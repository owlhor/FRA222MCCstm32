
FRA262STUIII.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ed70  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000b104  0801ef10  0801ef10  0002ef10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802a014  0802a014  00040250  2**0
                  CONTENTS
  4 .ARM          00000008  0802a014  0802a014  0003a014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802a01c  0802a01c  00040250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0802a01c  0802a01c  0003a01c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802a024  0802a024  0003a024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000250  20000000  0802a028  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005b0  20000250  0802a278  00040250  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000800  0802a278  00040800  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040250  2**0
                  CONTENTS, READONLY
 12 .debug_info   00105243  00000000  00000000  00040280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002da4  00000000  00000000  001454c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00004a30  00000000  00000000  00148268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00004980  00000000  00000000  0014cc98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cb84  00000000  00000000  00151618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000222eb  00000000  00000000  0016e19c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0047856f  00000000  00000000  00190487  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  006089f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0001646c  00000000  00000000  00608a48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000250 	.word	0x20000250
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801eef8 	.word	0x0801eef8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000254 	.word	0x20000254
 80001dc:	0801eef8 	.word	0x0801eef8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b974 	b.w	8000ef8 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468e      	mov	lr, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14d      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	4694      	mov	ip, r2
 8000c3a:	d969      	bls.n	8000d10 <__udivmoddi4+0xe8>
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b152      	cbz	r2, 8000c58 <__udivmoddi4+0x30>
 8000c42:	fa01 f302 	lsl.w	r3, r1, r2
 8000c46:	f1c2 0120 	rsb	r1, r2, #32
 8000c4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c52:	ea41 0e03 	orr.w	lr, r1, r3
 8000c56:	4094      	lsls	r4, r2
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	0c21      	lsrs	r1, r4, #16
 8000c5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c62:	fa1f f78c 	uxth.w	r7, ip
 8000c66:	fb08 e316 	mls	r3, r8, r6, lr
 8000c6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c6e:	fb06 f107 	mul.w	r1, r6, r7
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7e:	f080 811f 	bcs.w	8000ec0 <__udivmoddi4+0x298>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 811c 	bls.w	8000ec0 <__udivmoddi4+0x298>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 f707 	mul.w	r7, r0, r7
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x92>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cac:	f080 810a 	bcs.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	f240 8107 	bls.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	1be4      	subs	r4, r4, r7
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	b11d      	cbz	r5, 8000ccc <__udivmoddi4+0xa4>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xc2>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	f000 80ef 	beq.w	8000eba <__udivmoddi4+0x292>
 8000cdc:	2600      	movs	r6, #0
 8000cde:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f683 	clz	r6, r3
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d14a      	bne.n	8000d88 <__udivmoddi4+0x160>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd4>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80f9 	bhi.w	8000eee <__udivmoddi4+0x2c6>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	469e      	mov	lr, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa4>
 8000d0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xec>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 8092 	bne.w	8000e42 <__udivmoddi4+0x21a>
 8000d1e:	eba1 010c 	sub.w	r1, r1, ip
 8000d22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d26:	fa1f fe8c 	uxth.w	lr, ip
 8000d2a:	2601      	movs	r6, #1
 8000d2c:	0c20      	lsrs	r0, r4, #16
 8000d2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d32:	fb07 1113 	mls	r1, r7, r3, r1
 8000d36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3a:	fb0e f003 	mul.w	r0, lr, r3
 8000d3e:	4288      	cmp	r0, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x12c>
 8000d42:	eb1c 0101 	adds.w	r1, ip, r1
 8000d46:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x12a>
 8000d4c:	4288      	cmp	r0, r1
 8000d4e:	f200 80cb 	bhi.w	8000ee8 <__udivmoddi4+0x2c0>
 8000d52:	4643      	mov	r3, r8
 8000d54:	1a09      	subs	r1, r1, r0
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d64:	fb0e fe00 	mul.w	lr, lr, r0
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x156>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d74:	d202      	bcs.n	8000d7c <__udivmoddi4+0x154>
 8000d76:	45a6      	cmp	lr, r4
 8000d78:	f200 80bb 	bhi.w	8000ef2 <__udivmoddi4+0x2ca>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	eba4 040e 	sub.w	r4, r4, lr
 8000d82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d86:	e79c      	b.n	8000cc2 <__udivmoddi4+0x9a>
 8000d88:	f1c6 0720 	rsb	r7, r6, #32
 8000d8c:	40b3      	lsls	r3, r6
 8000d8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d96:	fa20 f407 	lsr.w	r4, r0, r7
 8000d9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	40f9      	lsrs	r1, r7
 8000da2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da6:	fa00 f306 	lsl.w	r3, r0, r6
 8000daa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dae:	0c20      	lsrs	r0, r4, #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fb09 1118 	mls	r1, r9, r8, r1
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dc0:	4288      	cmp	r0, r1
 8000dc2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc6:	d90b      	bls.n	8000de0 <__udivmoddi4+0x1b8>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dd0:	f080 8088 	bcs.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dd4:	4288      	cmp	r0, r1
 8000dd6:	f240 8085 	bls.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dda:	f1a8 0802 	sub.w	r8, r8, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	1a09      	subs	r1, r1, r0
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000de8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000df0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df4:	458e      	cmp	lr, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x1e2>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e00:	d26c      	bcs.n	8000edc <__udivmoddi4+0x2b4>
 8000e02:	458e      	cmp	lr, r1
 8000e04:	d96a      	bls.n	8000edc <__udivmoddi4+0x2b4>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e12:	eba1 010e 	sub.w	r1, r1, lr
 8000e16:	42a1      	cmp	r1, r4
 8000e18:	46c8      	mov	r8, r9
 8000e1a:	46a6      	mov	lr, r4
 8000e1c:	d356      	bcc.n	8000ecc <__udivmoddi4+0x2a4>
 8000e1e:	d053      	beq.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x212>
 8000e22:	ebb3 0208 	subs.w	r2, r3, r8
 8000e26:	eb61 010e 	sbc.w	r1, r1, lr
 8000e2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e32:	40f1      	lsrs	r1, r6
 8000e34:	431f      	orrs	r7, r3
 8000e36:	e9c5 7100 	strd	r7, r1, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	f1c2 0320 	rsb	r3, r2, #32
 8000e46:	40d8      	lsrs	r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e50:	4091      	lsls	r1, r2
 8000e52:	4301      	orrs	r1, r0
 8000e54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e58:	fa1f fe8c 	uxth.w	lr, ip
 8000e5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e60:	fb07 3610 	mls	r6, r7, r0, r3
 8000e64:	0c0b      	lsrs	r3, r1, #16
 8000e66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	fa04 f402 	lsl.w	r4, r4, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x260>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e7e:	d22f      	bcs.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e80:	429e      	cmp	r6, r3
 8000e82:	d92d      	bls.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	b289      	uxth	r1, r1
 8000e8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e90:	fb07 3316 	mls	r3, r7, r6, r3
 8000e94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e98:	fb06 f30e 	mul.w	r3, r6, lr
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x28a>
 8000ea0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ea8:	d216      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d914      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eae:	3e02      	subs	r6, #2
 8000eb0:	4461      	add	r1, ip
 8000eb2:	1ac9      	subs	r1, r1, r3
 8000eb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eb8:	e738      	b.n	8000d2c <__udivmoddi4+0x104>
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e705      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e3      	b.n	8000c8c <__udivmoddi4+0x64>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6f8      	b.n	8000cba <__udivmoddi4+0x92>
 8000ec8:	454b      	cmp	r3, r9
 8000eca:	d2a9      	bcs.n	8000e20 <__udivmoddi4+0x1f8>
 8000ecc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7a3      	b.n	8000e20 <__udivmoddi4+0x1f8>
 8000ed8:	4646      	mov	r6, r8
 8000eda:	e7ea      	b.n	8000eb2 <__udivmoddi4+0x28a>
 8000edc:	4620      	mov	r0, r4
 8000ede:	e794      	b.n	8000e0a <__udivmoddi4+0x1e2>
 8000ee0:	4640      	mov	r0, r8
 8000ee2:	e7d1      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ee4:	46d0      	mov	r8, sl
 8000ee6:	e77b      	b.n	8000de0 <__udivmoddi4+0x1b8>
 8000ee8:	3b02      	subs	r3, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	e732      	b.n	8000d54 <__udivmoddi4+0x12c>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e709      	b.n	8000d06 <__udivmoddi4+0xde>
 8000ef2:	4464      	add	r4, ip
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	e742      	b.n	8000d7e <__udivmoddi4+0x156>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f06:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f0a:	eef0 7ae7 	vabs.f32	s15, s15
 8000f0e:	eeb0 0a67 	vmov.f32	s0, s15
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f26:	ed97 0a01 	vldr	s0, [r7, #4]
 8000f2a:	f01c f8e5 	bl	801d0f8 <sqrtf>
 8000f2e:	eef0 7a40 	vmov.f32	s15, s0
 8000f32:	eeb0 0a67 	vmov.f32	s0, s15
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <_ZN5Eigen8internal5all_tC1Ev>:

//--------------------------------------------------------------------------------
// Handling of all
//--------------------------------------------------------------------------------

struct all_t { all_t() {} };
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
	...

08000f6c <HAL_UARTEx_RxEventCallback>:
/* USER CODE BEGIN 0 */

///////////////////// [UART UI Base System] /////////////////////

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	460b      	mov	r3, r1
 8000f76:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART2)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a4a      	ldr	r2, [pc, #296]	; (80010a8 <HAL_UARTEx_RxEventCallback+0x13c>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	f040 808d 	bne.w	800109e <HAL_UARTEx_RxEventCallback+0x132>
	{
		oldPos_uart = newPos_uart;  // Update the last position before copying new data
 8000f84:	4b49      	ldr	r3, [pc, #292]	; (80010ac <HAL_UARTEx_RxEventCallback+0x140>)
 8000f86:	881a      	ldrh	r2, [r3, #0]
 8000f88:	4b49      	ldr	r3, [pc, #292]	; (80010b0 <HAL_UARTEx_RxEventCallback+0x144>)
 8000f8a:	801a      	strh	r2, [r3, #0]
		datasize_uart = Size;
 8000f8c:	4a49      	ldr	r2, [pc, #292]	; (80010b4 <HAL_UARTEx_RxEventCallback+0x148>)
 8000f8e:	887b      	ldrh	r3, [r7, #2]
 8000f90:	8013      	strh	r3, [r2, #0]
		// If the data in large and it is about to exceed the buffer size, we have to route it to the start of the buffer
		// This is to maintain the circular buffer
		// The old data in the main buffer will be overlapped

		if (oldPos_uart+Size > MainBuf_SIZE)  // If the current position + new data size is greater than the main buffer
 8000f92:	4b47      	ldr	r3, [pc, #284]	; (80010b0 <HAL_UARTEx_RxEventCallback+0x144>)
 8000f94:	881b      	ldrh	r3, [r3, #0]
 8000f96:	461a      	mov	r2, r3
 8000f98:	887b      	ldrh	r3, [r7, #2]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	2b20      	cmp	r3, #32
 8000f9e:	dd14      	ble.n	8000fca <HAL_UARTEx_RxEventCallback+0x5e>
		{
			oldPos_uart = 0;  // point to the start of the buffer
 8000fa0:	4b43      	ldr	r3, [pc, #268]	; (80010b0 <HAL_UARTEx_RxEventCallback+0x144>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)MainBuf + oldPos_uart, RxBuf, Size);
 8000fa6:	4b42      	ldr	r3, [pc, #264]	; (80010b0 <HAL_UARTEx_RxEventCallback+0x144>)
 8000fa8:	881b      	ldrh	r3, [r3, #0]
 8000faa:	461a      	mov	r2, r3
 8000fac:	4b42      	ldr	r3, [pc, #264]	; (80010b8 <HAL_UARTEx_RxEventCallback+0x14c>)
 8000fae:	4413      	add	r3, r2
 8000fb0:	887a      	ldrh	r2, [r7, #2]
 8000fb2:	4942      	ldr	r1, [pc, #264]	; (80010bc <HAL_UARTEx_RxEventCallback+0x150>)
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f01c ffc7 	bl	801df48 <memcpy>
			newPos_uart = Size + oldPos_uart;
 8000fba:	4b3d      	ldr	r3, [pc, #244]	; (80010b0 <HAL_UARTEx_RxEventCallback+0x144>)
 8000fbc:	881a      	ldrh	r2, [r3, #0]
 8000fbe:	887b      	ldrh	r3, [r7, #2]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	b29a      	uxth	r2, r3
 8000fc4:	4b39      	ldr	r3, [pc, #228]	; (80010ac <HAL_UARTEx_RxEventCallback+0x140>)
 8000fc6:	801a      	strh	r2, [r3, #0]
 8000fc8:	e010      	b.n	8000fec <HAL_UARTEx_RxEventCallback+0x80>
		}
		else
		{
			memcpy ((uint8_t *)MainBuf + oldPos_uart, RxBuf, Size);
 8000fca:	4b39      	ldr	r3, [pc, #228]	; (80010b0 <HAL_UARTEx_RxEventCallback+0x144>)
 8000fcc:	881b      	ldrh	r3, [r3, #0]
 8000fce:	461a      	mov	r2, r3
 8000fd0:	4b39      	ldr	r3, [pc, #228]	; (80010b8 <HAL_UARTEx_RxEventCallback+0x14c>)
 8000fd2:	4413      	add	r3, r2
 8000fd4:	887a      	ldrh	r2, [r7, #2]
 8000fd6:	4939      	ldr	r1, [pc, #228]	; (80010bc <HAL_UARTEx_RxEventCallback+0x150>)
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f01c ffb5 	bl	801df48 <memcpy>
			newPos_uart = Size + oldPos_uart;
 8000fde:	4b34      	ldr	r3, [pc, #208]	; (80010b0 <HAL_UARTEx_RxEventCallback+0x144>)
 8000fe0:	881a      	ldrh	r2, [r3, #0]
 8000fe2:	887b      	ldrh	r3, [r7, #2]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	b29a      	uxth	r2, r3
 8000fe8:	4b30      	ldr	r3, [pc, #192]	; (80010ac <HAL_UARTEx_RxEventCallback+0x140>)
 8000fea:	801a      	strh	r2, [r3, #0]
		}
		StartM = MainBuf[newPos_uart - datasize_uart]; // 0b1001xxxx for check start & mode
 8000fec:	4b2f      	ldr	r3, [pc, #188]	; (80010ac <HAL_UARTEx_RxEventCallback+0x140>)
 8000fee:	881b      	ldrh	r3, [r3, #0]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	4b30      	ldr	r3, [pc, #192]	; (80010b4 <HAL_UARTEx_RxEventCallback+0x148>)
 8000ff4:	881b      	ldrh	r3, [r3, #0]
 8000ff6:	1ad3      	subs	r3, r2, r3
 8000ff8:	4a2f      	ldr	r2, [pc, #188]	; (80010b8 <HAL_UARTEx_RxEventCallback+0x14c>)
 8000ffa:	5cd2      	ldrb	r2, [r2, r3]
 8000ffc:	4b30      	ldr	r3, [pc, #192]	; (80010c0 <HAL_UARTEx_RxEventCallback+0x154>)
 8000ffe:	701a      	strb	r2, [r3, #0]
		chkStart = StartM >> 4; // for check "start" or nor
 8001000:	4b2f      	ldr	r3, [pc, #188]	; (80010c0 <HAL_UARTEx_RxEventCallback+0x154>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	091b      	lsrs	r3, r3, #4
 8001006:	b2da      	uxtb	r2, r3
 8001008:	4b2e      	ldr	r3, [pc, #184]	; (80010c4 <HAL_UARTEx_RxEventCallback+0x158>)
 800100a:	701a      	strb	r2, [r3, #0]
		NameM = (StartM & 15); // Check mode
 800100c:	4b2c      	ldr	r3, [pc, #176]	; (80010c0 <HAL_UARTEx_RxEventCallback+0x154>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	f003 030f 	and.w	r3, r3, #15
 8001014:	b2da      	uxtb	r2, r3
 8001016:	4b2c      	ldr	r3, [pc, #176]	; (80010c8 <HAL_UARTEx_RxEventCallback+0x15c>)
 8001018:	701a      	strb	r2, [r3, #0]
		if (chkStart == 9){ // 0b1001
 800101a:	4b2a      	ldr	r3, [pc, #168]	; (80010c4 <HAL_UARTEx_RxEventCallback+0x158>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	2b09      	cmp	r3, #9
 8001020:	d10a      	bne.n	8001038 <HAL_UARTEx_RxEventCallback+0xcc>
			if (NameM >= 1 && NameM <= 14){ // 15 work state or not
 8001022:	4b29      	ldr	r3, [pc, #164]	; (80010c8 <HAL_UARTEx_RxEventCallback+0x15c>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d02c      	beq.n	8001084 <HAL_UARTEx_RxEventCallback+0x118>
 800102a:	4b27      	ldr	r3, [pc, #156]	; (80010c8 <HAL_UARTEx_RxEventCallback+0x15c>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	2b0e      	cmp	r3, #14
 8001030:	d828      	bhi.n	8001084 <HAL_UARTEx_RxEventCallback+0x118>
				All_mode_UARTUI();
 8001032:	f000 f851 	bl	80010d8 <_Z15All_mode_UARTUIv>
 8001036:	e025      	b.n	8001084 <HAL_UARTEx_RxEventCallback+0x118>
			}
		}
		else if (StartM == 88) {
 8001038:	4b21      	ldr	r3, [pc, #132]	; (80010c0 <HAL_UARTEx_RxEventCallback+0x154>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	2b58      	cmp	r3, #88	; 0x58
 800103e:	d121      	bne.n	8001084 <HAL_UARTEx_RxEventCallback+0x118>
			StartM = MainBuf[newPos_uart-2];
 8001040:	4b1a      	ldr	r3, [pc, #104]	; (80010ac <HAL_UARTEx_RxEventCallback+0x140>)
 8001042:	881b      	ldrh	r3, [r3, #0]
 8001044:	3b02      	subs	r3, #2
 8001046:	4a1c      	ldr	r2, [pc, #112]	; (80010b8 <HAL_UARTEx_RxEventCallback+0x14c>)
 8001048:	5cd2      	ldrb	r2, [r2, r3]
 800104a:	4b1d      	ldr	r3, [pc, #116]	; (80010c0 <HAL_UARTEx_RxEventCallback+0x154>)
 800104c:	701a      	strb	r2, [r3, #0]
		    chkStart = StartM >> 4;
 800104e:	4b1c      	ldr	r3, [pc, #112]	; (80010c0 <HAL_UARTEx_RxEventCallback+0x154>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	091b      	lsrs	r3, r3, #4
 8001054:	b2da      	uxtb	r2, r3
 8001056:	4b1b      	ldr	r3, [pc, #108]	; (80010c4 <HAL_UARTEx_RxEventCallback+0x158>)
 8001058:	701a      	strb	r2, [r3, #0]
		    NameM = (StartM & 15);
 800105a:	4b19      	ldr	r3, [pc, #100]	; (80010c0 <HAL_UARTEx_RxEventCallback+0x154>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	f003 030f 	and.w	r3, r3, #15
 8001062:	b2da      	uxtb	r2, r3
 8001064:	4b18      	ldr	r3, [pc, #96]	; (80010c8 <HAL_UARTEx_RxEventCallback+0x15c>)
 8001066:	701a      	strb	r2, [r3, #0]
		    if (chkStart == 9){
 8001068:	4b16      	ldr	r3, [pc, #88]	; (80010c4 <HAL_UARTEx_RxEventCallback+0x158>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	2b09      	cmp	r3, #9
 800106e:	d109      	bne.n	8001084 <HAL_UARTEx_RxEventCallback+0x118>
		    	if (NameM >= 1 && NameM <= 14){
 8001070:	4b15      	ldr	r3, [pc, #84]	; (80010c8 <HAL_UARTEx_RxEventCallback+0x15c>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d005      	beq.n	8001084 <HAL_UARTEx_RxEventCallback+0x118>
 8001078:	4b13      	ldr	r3, [pc, #76]	; (80010c8 <HAL_UARTEx_RxEventCallback+0x15c>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	2b0e      	cmp	r3, #14
 800107e:	d801      	bhi.n	8001084 <HAL_UARTEx_RxEventCallback+0x118>
		    		All_mode_UARTUI();
 8001080:	f000 f82a 	bl	80010d8 <_Z15All_mode_UARTUIv>
		        }
		    }
		}

		// start the DMA again
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *) RxBuf, RxBuf_SIZE);
 8001084:	2220      	movs	r2, #32
 8001086:	490d      	ldr	r1, [pc, #52]	; (80010bc <HAL_UARTEx_RxEventCallback+0x150>)
 8001088:	4810      	ldr	r0, [pc, #64]	; (80010cc <HAL_UARTEx_RxEventCallback+0x160>)
 800108a:	f01a fe70 	bl	801bd6e <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 800108e:	4b10      	ldr	r3, [pc, #64]	; (80010d0 <HAL_UARTEx_RxEventCallback+0x164>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <HAL_UARTEx_RxEventCallback+0x164>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f022 0208 	bic.w	r2, r2, #8
 800109c:	601a      	str	r2, [r3, #0]

	} //huart USART2
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40004400 	.word	0x40004400
 80010ac:	20000792 	.word	0x20000792
 80010b0:	20000790 	.word	0x20000790
 80010b4:	200007d0 	.word	0x200007d0
 80010b8:	20000770 	.word	0x20000770
 80010bc:	20000750 	.word	0x20000750
 80010c0:	200007d4 	.word	0x200007d4
 80010c4:	200007d2 	.word	0x200007d2
 80010c8:	200007d3 	.word	0x200007d3
 80010cc:	200003f4 	.word	0x200003f4
 80010d0:	20000438 	.word	0x20000438
 80010d4:	00000000 	.word	0x00000000

080010d8 <_Z15All_mode_UARTUIv>:

void All_mode_UARTUI()
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b088      	sub	sp, #32
 80010dc:	af00      	add	r7, sp, #0
	int yur;
	int zur;
	int kur; // counter

	// NameM => 15 mode
		switch (NameM){
 80010de:	4ba8      	ldr	r3, [pc, #672]	; (8001380 <_Z15All_mode_UARTUIv+0x2a8>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	3b01      	subs	r3, #1
 80010e4:	2b0d      	cmp	r3, #13
 80010e6:	f200 83fe 	bhi.w	80018e6 <_Z15All_mode_UARTUIv+0x80e>
 80010ea:	a201      	add	r2, pc, #4	; (adr r2, 80010f0 <_Z15All_mode_UARTUIv+0x18>)
 80010ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010f0:	08001129 	.word	0x08001129
 80010f4:	08001189 	.word	0x08001189
 80010f8:	080011c3 	.word	0x080011c3
 80010fc:	0800120d 	.word	0x0800120d
 8001100:	080012c9 	.word	0x080012c9
 8001104:	080013d5 	.word	0x080013d5
 8001108:	0800145f 	.word	0x0800145f
 800110c:	080015c3 	.word	0x080015c3
 8001110:	080015fd 	.word	0x080015fd
 8001114:	08001699 	.word	0x08001699
 8001118:	08001735 	.word	0x08001735
 800111c:	080017f7 	.word	0x080017f7
 8001120:	0800182f 	.word	0x0800182f
 8001124:	08001879 	.word	0x08001879
		////==============[Test Command]===========
			case 1: // 10010001 01000000 00000000 00101110
				chksum = MainBuf[newPos_uart-1];
 8001128:	4b96      	ldr	r3, [pc, #600]	; (8001384 <_Z15All_mode_UARTUIv+0x2ac>)
 800112a:	881b      	ldrh	r3, [r3, #0]
 800112c:	3b01      	subs	r3, #1
 800112e:	4a96      	ldr	r2, [pc, #600]	; (8001388 <_Z15All_mode_UARTUIv+0x2b0>)
 8001130:	5cd2      	ldrb	r2, [r2, r3]
 8001132:	4b96      	ldr	r3, [pc, #600]	; (800138c <_Z15All_mode_UARTUIv+0x2b4>)
 8001134:	701a      	strb	r2, [r3, #0]
				dataF2 = MainBuf[newPos_uart-2];
 8001136:	4b93      	ldr	r3, [pc, #588]	; (8001384 <_Z15All_mode_UARTUIv+0x2ac>)
 8001138:	881b      	ldrh	r3, [r3, #0]
 800113a:	3b02      	subs	r3, #2
 800113c:	4a92      	ldr	r2, [pc, #584]	; (8001388 <_Z15All_mode_UARTUIv+0x2b0>)
 800113e:	5cd2      	ldrb	r2, [r2, r3]
 8001140:	4b93      	ldr	r3, [pc, #588]	; (8001390 <_Z15All_mode_UARTUIv+0x2b8>)
 8001142:	701a      	strb	r2, [r3, #0]
				dataF1 = MainBuf[newPos_uart-3];
 8001144:	4b8f      	ldr	r3, [pc, #572]	; (8001384 <_Z15All_mode_UARTUIv+0x2ac>)
 8001146:	881b      	ldrh	r3, [r3, #0]
 8001148:	3b03      	subs	r3, #3
 800114a:	4a8f      	ldr	r2, [pc, #572]	; (8001388 <_Z15All_mode_UARTUIv+0x2b0>)
 800114c:	5cd2      	ldrb	r2, [r2, r3]
 800114e:	4b91      	ldr	r3, [pc, #580]	; (8001394 <_Z15All_mode_UARTUIv+0x2bc>)
 8001150:	701a      	strb	r2, [r3, #0]
				chksum2 = ~(StartM + dataF1 + dataF2);
 8001152:	4b91      	ldr	r3, [pc, #580]	; (8001398 <_Z15All_mode_UARTUIv+0x2c0>)
 8001154:	781a      	ldrb	r2, [r3, #0]
 8001156:	4b8f      	ldr	r3, [pc, #572]	; (8001394 <_Z15All_mode_UARTUIv+0x2bc>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	4413      	add	r3, r2
 800115c:	b2da      	uxtb	r2, r3
 800115e:	4b8c      	ldr	r3, [pc, #560]	; (8001390 <_Z15All_mode_UARTUIv+0x2b8>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	4413      	add	r3, r2
 8001164:	b2db      	uxtb	r3, r3
 8001166:	43db      	mvns	r3, r3
 8001168:	b2da      	uxtb	r2, r3
 800116a:	4b8c      	ldr	r3, [pc, #560]	; (800139c <_Z15All_mode_UARTUIv+0x2c4>)
 800116c:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum2){
 800116e:	4b87      	ldr	r3, [pc, #540]	; (800138c <_Z15All_mode_UARTUIv+0x2b4>)
 8001170:	781a      	ldrb	r2, [r3, #0]
 8001172:	4b8a      	ldr	r3, [pc, #552]	; (800139c <_Z15All_mode_UARTUIv+0x2c4>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	429a      	cmp	r2, r3
 8001178:	f040 839a 	bne.w	80018b0 <_Z15All_mode_UARTUIv+0x7d8>
					M_state = 1;
 800117c:	4b88      	ldr	r3, [pc, #544]	; (80013a0 <_Z15All_mode_UARTUIv+0x2c8>)
 800117e:	2201      	movs	r2, #1
 8001180:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 8001182:	f000 fbe3 	bl	800194c <_Z7xu_Uartv>
				}
				break;
 8001186:	e393      	b.n	80018b0 <_Z15All_mode_UARTUIv+0x7d8>
		////==============[Connect MCU]===========
			case 2: //10010010 01101101
				chksum = MainBuf[newPos_uart-1];
 8001188:	4b7e      	ldr	r3, [pc, #504]	; (8001384 <_Z15All_mode_UARTUIv+0x2ac>)
 800118a:	881b      	ldrh	r3, [r3, #0]
 800118c:	3b01      	subs	r3, #1
 800118e:	4a7e      	ldr	r2, [pc, #504]	; (8001388 <_Z15All_mode_UARTUIv+0x2b0>)
 8001190:	5cd2      	ldrb	r2, [r2, r3]
 8001192:	4b7e      	ldr	r3, [pc, #504]	; (800138c <_Z15All_mode_UARTUIv+0x2b4>)
 8001194:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 8001196:	4b80      	ldr	r3, [pc, #512]	; (8001398 <_Z15All_mode_UARTUIv+0x2c0>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	43db      	mvns	r3, r3
 800119c:	b2da      	uxtb	r2, r3
 800119e:	4b81      	ldr	r3, [pc, #516]	; (80013a4 <_Z15All_mode_UARTUIv+0x2cc>)
 80011a0:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 80011a2:	4b7a      	ldr	r3, [pc, #488]	; (800138c <_Z15All_mode_UARTUIv+0x2b4>)
 80011a4:	781a      	ldrb	r2, [r3, #0]
 80011a6:	4b7f      	ldr	r3, [pc, #508]	; (80013a4 <_Z15All_mode_UARTUIv+0x2cc>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	f040 8382 	bne.w	80018b4 <_Z15All_mode_UARTUIv+0x7dc>
					M_state = 2;
 80011b0:	4b7b      	ldr	r3, [pc, #492]	; (80013a0 <_Z15All_mode_UARTUIv+0x2c8>)
 80011b2:	2202      	movs	r2, #2
 80011b4:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);

					// check efft
					flag_efftActi = 1;
 80011b6:	4b7c      	ldr	r3, [pc, #496]	; (80013a8 <_Z15All_mode_UARTUIv+0x2d0>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	701a      	strb	r2, [r3, #0]

					xu_Uart();
 80011bc:	f000 fbc6 	bl	800194c <_Z7xu_Uartv>
				}
				break;
 80011c0:	e378      	b.n	80018b4 <_Z15All_mode_UARTUIv+0x7dc>
		////==============[Disconnect MCU]===========
			case 3: //10010011 01101100
					chksum = MainBuf[newPos_uart-1];
 80011c2:	4b70      	ldr	r3, [pc, #448]	; (8001384 <_Z15All_mode_UARTUIv+0x2ac>)
 80011c4:	881b      	ldrh	r3, [r3, #0]
 80011c6:	3b01      	subs	r3, #1
 80011c8:	4a6f      	ldr	r2, [pc, #444]	; (8001388 <_Z15All_mode_UARTUIv+0x2b0>)
 80011ca:	5cd2      	ldrb	r2, [r2, r3]
 80011cc:	4b6f      	ldr	r3, [pc, #444]	; (800138c <_Z15All_mode_UARTUIv+0x2b4>)
 80011ce:	701a      	strb	r2, [r3, #0]
					chksum1 = ~(StartM);
 80011d0:	4b71      	ldr	r3, [pc, #452]	; (8001398 <_Z15All_mode_UARTUIv+0x2c0>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	43db      	mvns	r3, r3
 80011d6:	b2da      	uxtb	r2, r3
 80011d8:	4b72      	ldr	r3, [pc, #456]	; (80013a4 <_Z15All_mode_UARTUIv+0x2cc>)
 80011da:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 80011dc:	4b6b      	ldr	r3, [pc, #428]	; (800138c <_Z15All_mode_UARTUIv+0x2b4>)
 80011de:	781a      	ldrb	r2, [r3, #0]
 80011e0:	4b70      	ldr	r3, [pc, #448]	; (80013a4 <_Z15All_mode_UARTUIv+0x2cc>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	f040 8367 	bne.w	80018b8 <_Z15All_mode_UARTUIv+0x7e0>
					M_state = 3;
 80011ea:	4b6d      	ldr	r3, [pc, #436]	; (80013a0 <_Z15All_mode_UARTUIv+0x2c8>)
 80011ec:	2203      	movs	r2, #3
 80011ee:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);

					ResetParam();
 80011f0:	f001 fe70 	bl	8002ed4 <_Z10ResetParamv>
					grandState = Ready;
 80011f4:	4b6d      	ldr	r3, [pc, #436]	; (80013ac <_Z15All_mode_UARTUIv+0x2d4>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*)temp_f_ack2, 2, 100);
 80011fa:	2364      	movs	r3, #100	; 0x64
 80011fc:	2202      	movs	r2, #2
 80011fe:	496c      	ldr	r1, [pc, #432]	; (80013b0 <_Z15All_mode_UARTUIv+0x2d8>)
 8001200:	486c      	ldr	r0, [pc, #432]	; (80013b4 <_Z15All_mode_UARTUIv+0x2dc>)
 8001202:	f01a fd22 	bl	801bc4a <HAL_UART_Transmit>

					xu_Uart();
 8001206:	f000 fba1 	bl	800194c <_Z7xu_Uartv>

				}
				break;
 800120a:	e355      	b.n	80018b8 <_Z15All_mode_UARTUIv+0x7e0>
		////==============[Angular Velo Set]===========
			case 4:
					chksum = MainBuf[newPos_uart-1];
 800120c:	4b5d      	ldr	r3, [pc, #372]	; (8001384 <_Z15All_mode_UARTUIv+0x2ac>)
 800120e:	881b      	ldrh	r3, [r3, #0]
 8001210:	3b01      	subs	r3, #1
 8001212:	4a5d      	ldr	r2, [pc, #372]	; (8001388 <_Z15All_mode_UARTUIv+0x2b0>)
 8001214:	5cd2      	ldrb	r2, [r2, r3]
 8001216:	4b5d      	ldr	r3, [pc, #372]	; (800138c <_Z15All_mode_UARTUIv+0x2b4>)
 8001218:	701a      	strb	r2, [r3, #0]
					dataF2 = MainBuf[newPos_uart-2];
 800121a:	4b5a      	ldr	r3, [pc, #360]	; (8001384 <_Z15All_mode_UARTUIv+0x2ac>)
 800121c:	881b      	ldrh	r3, [r3, #0]
 800121e:	3b02      	subs	r3, #2
 8001220:	4a59      	ldr	r2, [pc, #356]	; (8001388 <_Z15All_mode_UARTUIv+0x2b0>)
 8001222:	5cd2      	ldrb	r2, [r2, r3]
 8001224:	4b5a      	ldr	r3, [pc, #360]	; (8001390 <_Z15All_mode_UARTUIv+0x2b8>)
 8001226:	701a      	strb	r2, [r3, #0]
					dataF1 = MainBuf[newPos_uart-3];
 8001228:	4b56      	ldr	r3, [pc, #344]	; (8001384 <_Z15All_mode_UARTUIv+0x2ac>)
 800122a:	881b      	ldrh	r3, [r3, #0]
 800122c:	3b03      	subs	r3, #3
 800122e:	4a56      	ldr	r2, [pc, #344]	; (8001388 <_Z15All_mode_UARTUIv+0x2b0>)
 8001230:	5cd2      	ldrb	r2, [r2, r3]
 8001232:	4b58      	ldr	r3, [pc, #352]	; (8001394 <_Z15All_mode_UARTUIv+0x2bc>)
 8001234:	701a      	strb	r2, [r3, #0]
					Set_AngVelo[0] = dataF1;
 8001236:	4b57      	ldr	r3, [pc, #348]	; (8001394 <_Z15All_mode_UARTUIv+0x2bc>)
 8001238:	781a      	ldrb	r2, [r3, #0]
 800123a:	4b5f      	ldr	r3, [pc, #380]	; (80013b8 <_Z15All_mode_UARTUIv+0x2e0>)
 800123c:	701a      	strb	r2, [r3, #0]
					Set_AngVelo[1] = dataF2;
 800123e:	4b54      	ldr	r3, [pc, #336]	; (8001390 <_Z15All_mode_UARTUIv+0x2b8>)
 8001240:	781a      	ldrb	r2, [r3, #0]
 8001242:	4b5d      	ldr	r3, [pc, #372]	; (80013b8 <_Z15All_mode_UARTUIv+0x2e0>)
 8001244:	705a      	strb	r2, [r3, #1]
					chksum2 = ~(StartM + dataF1 + dataF2);
 8001246:	4b54      	ldr	r3, [pc, #336]	; (8001398 <_Z15All_mode_UARTUIv+0x2c0>)
 8001248:	781a      	ldrb	r2, [r3, #0]
 800124a:	4b52      	ldr	r3, [pc, #328]	; (8001394 <_Z15All_mode_UARTUIv+0x2bc>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	4413      	add	r3, r2
 8001250:	b2da      	uxtb	r2, r3
 8001252:	4b4f      	ldr	r3, [pc, #316]	; (8001390 <_Z15All_mode_UARTUIv+0x2b8>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	4413      	add	r3, r2
 8001258:	b2db      	uxtb	r3, r3
 800125a:	43db      	mvns	r3, r3
 800125c:	b2da      	uxtb	r2, r3
 800125e:	4b4f      	ldr	r3, [pc, #316]	; (800139c <_Z15All_mode_UARTUIv+0x2c4>)
 8001260:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum2){
 8001262:	4b4a      	ldr	r3, [pc, #296]	; (800138c <_Z15All_mode_UARTUIv+0x2b4>)
 8001264:	781a      	ldrb	r2, [r3, #0]
 8001266:	4b4d      	ldr	r3, [pc, #308]	; (800139c <_Z15All_mode_UARTUIv+0x2c4>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	429a      	cmp	r2, r3
 800126c:	f040 8326 	bne.w	80018bc <_Z15All_mode_UARTUIv+0x7e4>
					M_state = 4;
 8001270:	4b4b      	ldr	r3, [pc, #300]	; (80013a0 <_Z15All_mode_UARTUIv+0x2c8>)
 8001272:	2204      	movs	r2, #4
 8001274:	701a      	strb	r2, [r3, #0]
					DataProtocol_SetVelo = Set_AngVelo[1];
 8001276:	4b50      	ldr	r3, [pc, #320]	; (80013b8 <_Z15All_mode_UARTUIv+0x2e0>)
 8001278:	785b      	ldrb	r3, [r3, #1]
 800127a:	ee07 3a90 	vmov	s15, r3
 800127e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001282:	4b4e      	ldr	r3, [pc, #312]	; (80013bc <_Z15All_mode_UARTUIv+0x2e4>)
 8001284:	edc3 7a00 	vstr	s15, [r3]
					//////// RPM to Rad/s => 2PI/60
					Velocity =((DataProtocol_SetVelo * 10)/255) * (2 * M_PI / 60);
 8001288:	4b4c      	ldr	r3, [pc, #304]	; (80013bc <_Z15All_mode_UARTUIv+0x2e4>)
 800128a:	edd3 7a00 	vldr	s15, [r3]
 800128e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001292:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001296:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80013c0 <_Z15All_mode_UARTUIv+0x2e8>
 800129a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800129e:	ee16 0a90 	vmov	r0, s13
 80012a2:	f7ff f951 	bl	8000548 <__aeabi_f2d>
 80012a6:	a332      	add	r3, pc, #200	; (adr r3, 8001370 <_Z15All_mode_UARTUIv+0x298>)
 80012a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ac:	f7ff f9a4 	bl	80005f8 <__aeabi_dmul>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	4610      	mov	r0, r2
 80012b6:	4619      	mov	r1, r3
 80012b8:	f7ff fc4e 	bl	8000b58 <__aeabi_d2f>
 80012bc:	4603      	mov	r3, r0
 80012be:	4a41      	ldr	r2, [pc, #260]	; (80013c4 <_Z15All_mode_UARTUIv+0x2ec>)
 80012c0:	6013      	str	r3, [r2, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 80012c2:	f000 fb43 	bl	800194c <_Z7xu_Uartv>
				}
				break;
 80012c6:	e2f9      	b.n	80018bc <_Z15All_mode_UARTUIv+0x7e4>
		////==============[Angular Position Set]===========
			case 5:
					chksum = MainBuf[newPos_uart-1];
 80012c8:	4b2e      	ldr	r3, [pc, #184]	; (8001384 <_Z15All_mode_UARTUIv+0x2ac>)
 80012ca:	881b      	ldrh	r3, [r3, #0]
 80012cc:	3b01      	subs	r3, #1
 80012ce:	4a2e      	ldr	r2, [pc, #184]	; (8001388 <_Z15All_mode_UARTUIv+0x2b0>)
 80012d0:	5cd2      	ldrb	r2, [r2, r3]
 80012d2:	4b2e      	ldr	r3, [pc, #184]	; (800138c <_Z15All_mode_UARTUIv+0x2b4>)
 80012d4:	701a      	strb	r2, [r3, #0]
					dataF2 = MainBuf[newPos_uart-2];
 80012d6:	4b2b      	ldr	r3, [pc, #172]	; (8001384 <_Z15All_mode_UARTUIv+0x2ac>)
 80012d8:	881b      	ldrh	r3, [r3, #0]
 80012da:	3b02      	subs	r3, #2
 80012dc:	4a2a      	ldr	r2, [pc, #168]	; (8001388 <_Z15All_mode_UARTUIv+0x2b0>)
 80012de:	5cd2      	ldrb	r2, [r2, r3]
 80012e0:	4b2b      	ldr	r3, [pc, #172]	; (8001390 <_Z15All_mode_UARTUIv+0x2b8>)
 80012e2:	701a      	strb	r2, [r3, #0]
					dataF1 = MainBuf[newPos_uart-3];
 80012e4:	4b27      	ldr	r3, [pc, #156]	; (8001384 <_Z15All_mode_UARTUIv+0x2ac>)
 80012e6:	881b      	ldrh	r3, [r3, #0]
 80012e8:	3b03      	subs	r3, #3
 80012ea:	4a27      	ldr	r2, [pc, #156]	; (8001388 <_Z15All_mode_UARTUIv+0x2b0>)
 80012ec:	5cd2      	ldrb	r2, [r2, r3]
 80012ee:	4b29      	ldr	r3, [pc, #164]	; (8001394 <_Z15All_mode_UARTUIv+0x2bc>)
 80012f0:	701a      	strb	r2, [r3, #0]
					Set_AngPosi[0] = dataF1;
 80012f2:	4b28      	ldr	r3, [pc, #160]	; (8001394 <_Z15All_mode_UARTUIv+0x2bc>)
 80012f4:	781a      	ldrb	r2, [r3, #0]
 80012f6:	4b34      	ldr	r3, [pc, #208]	; (80013c8 <_Z15All_mode_UARTUIv+0x2f0>)
 80012f8:	701a      	strb	r2, [r3, #0]
					Set_AngPosi[1] = dataF2;
 80012fa:	4b25      	ldr	r3, [pc, #148]	; (8001390 <_Z15All_mode_UARTUIv+0x2b8>)
 80012fc:	781a      	ldrb	r2, [r3, #0]
 80012fe:	4b32      	ldr	r3, [pc, #200]	; (80013c8 <_Z15All_mode_UARTUIv+0x2f0>)
 8001300:	705a      	strb	r2, [r3, #1]
					chksum2 = ~(StartM + dataF1 + dataF2);
 8001302:	4b25      	ldr	r3, [pc, #148]	; (8001398 <_Z15All_mode_UARTUIv+0x2c0>)
 8001304:	781a      	ldrb	r2, [r3, #0]
 8001306:	4b23      	ldr	r3, [pc, #140]	; (8001394 <_Z15All_mode_UARTUIv+0x2bc>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	4413      	add	r3, r2
 800130c:	b2da      	uxtb	r2, r3
 800130e:	4b20      	ldr	r3, [pc, #128]	; (8001390 <_Z15All_mode_UARTUIv+0x2b8>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	4413      	add	r3, r2
 8001314:	b2db      	uxtb	r3, r3
 8001316:	43db      	mvns	r3, r3
 8001318:	b2da      	uxtb	r2, r3
 800131a:	4b20      	ldr	r3, [pc, #128]	; (800139c <_Z15All_mode_UARTUIv+0x2c4>)
 800131c:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum2){
 800131e:	4b1b      	ldr	r3, [pc, #108]	; (800138c <_Z15All_mode_UARTUIv+0x2b4>)
 8001320:	781a      	ldrb	r2, [r3, #0]
 8001322:	4b1e      	ldr	r3, [pc, #120]	; (800139c <_Z15All_mode_UARTUIv+0x2c4>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	429a      	cmp	r2, r3
 8001328:	f040 82ca 	bne.w	80018c0 <_Z15All_mode_UARTUIv+0x7e8>
					M_state = 5;
 800132c:	4b1c      	ldr	r3, [pc, #112]	; (80013a0 <_Z15All_mode_UARTUIv+0x2c8>)
 800132e:	2205      	movs	r2, #5
 8001330:	701a      	strb	r2, [r3, #0]

					DataProtocol_SetAngPosi = (Set_AngPosi[0]*256) + Set_AngPosi[1];
 8001332:	4b25      	ldr	r3, [pc, #148]	; (80013c8 <_Z15All_mode_UARTUIv+0x2f0>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	021b      	lsls	r3, r3, #8
 8001338:	4a23      	ldr	r2, [pc, #140]	; (80013c8 <_Z15All_mode_UARTUIv+0x2f0>)
 800133a:	7852      	ldrb	r2, [r2, #1]
 800133c:	4413      	add	r3, r2
 800133e:	4a23      	ldr	r2, [pc, #140]	; (80013cc <_Z15All_mode_UARTUIv+0x2f4>)
 8001340:	6013      	str	r3, [r2, #0]
					//positionlog[0] = (DataProtocol_SetAngPosi / (3.14 * 10000) * 180);
					positionlog[0] = (float)(DataProtocol_SetAngPosi / 10000.0);
 8001342:	4b22      	ldr	r3, [pc, #136]	; (80013cc <_Z15All_mode_UARTUIv+0x2f4>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff f8ec 	bl	8000524 <__aeabi_i2d>
 800134c:	a30a      	add	r3, pc, #40	; (adr r3, 8001378 <_Z15All_mode_UARTUIv+0x2a0>)
 800134e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001352:	f7ff fa7b 	bl	800084c <__aeabi_ddiv>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	4610      	mov	r0, r2
 800135c:	4619      	mov	r1, r3
 800135e:	f7ff fbfb 	bl	8000b58 <__aeabi_d2f>
 8001362:	4603      	mov	r3, r0
 8001364:	4a1a      	ldr	r2, [pc, #104]	; (80013d0 <_Z15All_mode_UARTUIv+0x2f8>)
 8001366:	6013      	str	r3, [r2, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 8001368:	f000 faf0 	bl	800194c <_Z7xu_Uartv>
				}
				break;
 800136c:	e2a8      	b.n	80018c0 <_Z15All_mode_UARTUIv+0x7e8>
 800136e:	bf00      	nop
 8001370:	f37bebd5 	.word	0xf37bebd5
 8001374:	3fbacee9 	.word	0x3fbacee9
 8001378:	00000000 	.word	0x00000000
 800137c:	40c38800 	.word	0x40c38800
 8001380:	200007d3 	.word	0x200007d3
 8001384:	20000792 	.word	0x20000792
 8001388:	20000770 	.word	0x20000770
 800138c:	200007d5 	.word	0x200007d5
 8001390:	200007da 	.word	0x200007da
 8001394:	200007d9 	.word	0x200007d9
 8001398:	200007d4 	.word	0x200007d4
 800139c:	200007d7 	.word	0x200007d7
 80013a0:	200007db 	.word	0x200007db
 80013a4:	200007d6 	.word	0x200007d6
 80013a8:	2000073b 	.word	0x2000073b
 80013ac:	200004fc 	.word	0x200004fc
 80013b0:	200001b4 	.word	0x200001b4
 80013b4:	200003f4 	.word	0x200003f4
 80013b8:	2000079c 	.word	0x2000079c
 80013bc:	200007a0 	.word	0x200007a0
 80013c0:	437f0000 	.word	0x437f0000
 80013c4:	20000588 	.word	0x20000588
 80013c8:	200007a4 	.word	0x200007a4
 80013cc:	200007a8 	.word	0x200007a8
 80013d0:	20000144 	.word	0x20000144
		////==============[Goal 1 station]===========
			case 6:
					chksum = MainBuf[newPos_uart-1];
 80013d4:	4b99      	ldr	r3, [pc, #612]	; (800163c <_Z15All_mode_UARTUIv+0x564>)
 80013d6:	881b      	ldrh	r3, [r3, #0]
 80013d8:	3b01      	subs	r3, #1
 80013da:	4a99      	ldr	r2, [pc, #612]	; (8001640 <_Z15All_mode_UARTUIv+0x568>)
 80013dc:	5cd2      	ldrb	r2, [r2, r3]
 80013de:	4b99      	ldr	r3, [pc, #612]	; (8001644 <_Z15All_mode_UARTUIv+0x56c>)
 80013e0:	701a      	strb	r2, [r3, #0]
					dataF2 = MainBuf[newPos_uart-2];
 80013e2:	4b96      	ldr	r3, [pc, #600]	; (800163c <_Z15All_mode_UARTUIv+0x564>)
 80013e4:	881b      	ldrh	r3, [r3, #0]
 80013e6:	3b02      	subs	r3, #2
 80013e8:	4a95      	ldr	r2, [pc, #596]	; (8001640 <_Z15All_mode_UARTUIv+0x568>)
 80013ea:	5cd2      	ldrb	r2, [r2, r3]
 80013ec:	4b96      	ldr	r3, [pc, #600]	; (8001648 <_Z15All_mode_UARTUIv+0x570>)
 80013ee:	701a      	strb	r2, [r3, #0]
					dataF1 = MainBuf[newPos_uart-3];
 80013f0:	4b92      	ldr	r3, [pc, #584]	; (800163c <_Z15All_mode_UARTUIv+0x564>)
 80013f2:	881b      	ldrh	r3, [r3, #0]
 80013f4:	3b03      	subs	r3, #3
 80013f6:	4a92      	ldr	r2, [pc, #584]	; (8001640 <_Z15All_mode_UARTUIv+0x568>)
 80013f8:	5cd2      	ldrb	r2, [r2, r3]
 80013fa:	4b94      	ldr	r3, [pc, #592]	; (800164c <_Z15All_mode_UARTUIv+0x574>)
 80013fc:	701a      	strb	r2, [r3, #0]
					Set_Goal_1Sta[0] = dataF1;
 80013fe:	4b93      	ldr	r3, [pc, #588]	; (800164c <_Z15All_mode_UARTUIv+0x574>)
 8001400:	781a      	ldrb	r2, [r3, #0]
 8001402:	4b93      	ldr	r3, [pc, #588]	; (8001650 <_Z15All_mode_UARTUIv+0x578>)
 8001404:	701a      	strb	r2, [r3, #0]
					Set_Goal_1Sta[1] = dataF2;
 8001406:	4b90      	ldr	r3, [pc, #576]	; (8001648 <_Z15All_mode_UARTUIv+0x570>)
 8001408:	781a      	ldrb	r2, [r3, #0]
 800140a:	4b91      	ldr	r3, [pc, #580]	; (8001650 <_Z15All_mode_UARTUIv+0x578>)
 800140c:	705a      	strb	r2, [r3, #1]
					chksum2 = ~(StartM + dataF1 + dataF2);
 800140e:	4b91      	ldr	r3, [pc, #580]	; (8001654 <_Z15All_mode_UARTUIv+0x57c>)
 8001410:	781a      	ldrb	r2, [r3, #0]
 8001412:	4b8e      	ldr	r3, [pc, #568]	; (800164c <_Z15All_mode_UARTUIv+0x574>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	4413      	add	r3, r2
 8001418:	b2da      	uxtb	r2, r3
 800141a:	4b8b      	ldr	r3, [pc, #556]	; (8001648 <_Z15All_mode_UARTUIv+0x570>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	4413      	add	r3, r2
 8001420:	b2db      	uxtb	r3, r3
 8001422:	43db      	mvns	r3, r3
 8001424:	b2da      	uxtb	r2, r3
 8001426:	4b8c      	ldr	r3, [pc, #560]	; (8001658 <_Z15All_mode_UARTUIv+0x580>)
 8001428:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum2){
 800142a:	4b86      	ldr	r3, [pc, #536]	; (8001644 <_Z15All_mode_UARTUIv+0x56c>)
 800142c:	781a      	ldrb	r2, [r3, #0]
 800142e:	4b8a      	ldr	r3, [pc, #552]	; (8001658 <_Z15All_mode_UARTUIv+0x580>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	429a      	cmp	r2, r3
 8001434:	f040 8246 	bne.w	80018c4 <_Z15All_mode_UARTUIv+0x7ec>
					M_state = 6;
 8001438:	4b88      	ldr	r3, [pc, #544]	; (800165c <_Z15All_mode_UARTUIv+0x584>)
 800143a:	2206      	movs	r2, #6
 800143c:	701a      	strb	r2, [r3, #0]

					///////// Load 1 station Data /////////////
					positionlog[0] = PosDataSet[Set_Goal_1Sta[1]];
 800143e:	4b84      	ldr	r3, [pc, #528]	; (8001650 <_Z15All_mode_UARTUIv+0x578>)
 8001440:	785b      	ldrb	r3, [r3, #1]
 8001442:	4a87      	ldr	r2, [pc, #540]	; (8001660 <_Z15All_mode_UARTUIv+0x588>)
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	4413      	add	r3, r2
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a86      	ldr	r2, [pc, #536]	; (8001664 <_Z15All_mode_UARTUIv+0x58c>)
 800144c:	6013      	str	r3, [r2, #0]
					Set1_Sta = Set_Goal_1Sta[1];
 800144e:	4b80      	ldr	r3, [pc, #512]	; (8001650 <_Z15All_mode_UARTUIv+0x578>)
 8001450:	785b      	ldrb	r3, [r3, #1]
 8001452:	461a      	mov	r2, r3
 8001454:	4b84      	ldr	r3, [pc, #528]	; (8001668 <_Z15All_mode_UARTUIv+0x590>)
 8001456:	601a      	str	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);

					xu_Uart();
 8001458:	f000 fa78 	bl	800194c <_Z7xu_Uartv>
				}
				break;
 800145c:	e232      	b.n	80018c4 <_Z15All_mode_UARTUIv+0x7ec>
		////==============[Goal n station]===========
			case 7:
				Nstation = MainBuf[(newPos_uart - datasize_uart)+1];
 800145e:	4b77      	ldr	r3, [pc, #476]	; (800163c <_Z15All_mode_UARTUIv+0x564>)
 8001460:	881b      	ldrh	r3, [r3, #0]
 8001462:	461a      	mov	r2, r3
 8001464:	4b81      	ldr	r3, [pc, #516]	; (800166c <_Z15All_mode_UARTUIv+0x594>)
 8001466:	881b      	ldrh	r3, [r3, #0]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	3301      	adds	r3, #1
 800146c:	4a74      	ldr	r2, [pc, #464]	; (8001640 <_Z15All_mode_UARTUIv+0x568>)
 800146e:	5cd2      	ldrb	r2, [r2, r3]
 8001470:	4b7f      	ldr	r3, [pc, #508]	; (8001670 <_Z15All_mode_UARTUIv+0x598>)
 8001472:	701a      	strb	r2, [r3, #0]
				yur = Nstation;
 8001474:	4b7e      	ldr	r3, [pc, #504]	; (8001670 <_Z15All_mode_UARTUIv+0x598>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	60fb      	str	r3, [r7, #12]
				zur = ( yur / 2 ) + yur % 2;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	0fda      	lsrs	r2, r3, #31
 800147e:	4413      	add	r3, r2
 8001480:	105b      	asrs	r3, r3, #1
 8001482:	461a      	mov	r2, r3
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	2b00      	cmp	r3, #0
 8001488:	f003 0301 	and.w	r3, r3, #1
 800148c:	bfb8      	it	lt
 800148e:	425b      	neglt	r3, r3
 8001490:	4413      	add	r3, r2
 8001492:	60bb      	str	r3, [r7, #8]
				kur = 0; // counter
 8001494:	2300      	movs	r3, #0
 8001496:	61fb      	str	r3, [r7, #28]

				for(int i = 0; i < zur; i++ ){
 8001498:	2300      	movs	r3, #0
 800149a:	61bb      	str	r3, [r7, #24]
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	da1e      	bge.n	80014e2 <_Z15All_mode_UARTUIv+0x40a>
					dataFSum += MainBuf[oldPos_uart + (i+2)];
 80014a4:	4b73      	ldr	r3, [pc, #460]	; (8001674 <_Z15All_mode_UARTUIv+0x59c>)
 80014a6:	881b      	ldrh	r3, [r3, #0]
 80014a8:	461a      	mov	r2, r3
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	3302      	adds	r3, #2
 80014ae:	4413      	add	r3, r2
 80014b0:	4a63      	ldr	r2, [pc, #396]	; (8001640 <_Z15All_mode_UARTUIv+0x568>)
 80014b2:	5cd2      	ldrb	r2, [r2, r3]
 80014b4:	4b70      	ldr	r3, [pc, #448]	; (8001678 <_Z15All_mode_UARTUIv+0x5a0>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	4413      	add	r3, r2
 80014ba:	b2da      	uxtb	r2, r3
 80014bc:	4b6e      	ldr	r3, [pc, #440]	; (8001678 <_Z15All_mode_UARTUIv+0x5a0>)
 80014be:	701a      	strb	r2, [r3, #0]
					Goal_nSta[i] = MainBuf[oldPos_uart + (i+2)];
 80014c0:	4b6c      	ldr	r3, [pc, #432]	; (8001674 <_Z15All_mode_UARTUIv+0x59c>)
 80014c2:	881b      	ldrh	r3, [r3, #0]
 80014c4:	461a      	mov	r2, r3
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	3302      	adds	r3, #2
 80014ca:	4413      	add	r3, r2
 80014cc:	4a5c      	ldr	r2, [pc, #368]	; (8001640 <_Z15All_mode_UARTUIv+0x568>)
 80014ce:	5cd1      	ldrb	r1, [r2, r3]
 80014d0:	4a6a      	ldr	r2, [pc, #424]	; (800167c <_Z15All_mode_UARTUIv+0x5a4>)
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	4413      	add	r3, r2
 80014d6:	460a      	mov	r2, r1
 80014d8:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < zur; i++ ){
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	3301      	adds	r3, #1
 80014de:	61bb      	str	r3, [r7, #24]
 80014e0:	e7dc      	b.n	800149c <_Z15All_mode_UARTUIv+0x3c4>
				}
				for(int x = 1; x < Nstation+1; x++){
 80014e2:	2301      	movs	r3, #1
 80014e4:	617b      	str	r3, [r7, #20]
 80014e6:	4b62      	ldr	r3, [pc, #392]	; (8001670 <_Z15All_mode_UARTUIv+0x598>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	461a      	mov	r2, r3
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	4293      	cmp	r3, r2
 80014f0:	dc29      	bgt.n	8001546 <_Z15All_mode_UARTUIv+0x46e>
                    if(x % 2 == 1){
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	bfb8      	it	lt
 80014fc:	425b      	neglt	r3, r3
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d10b      	bne.n	800151a <_Z15All_mode_UARTUIv+0x442>
                        Set_Goal_nSta[x-1] = (Goal_nSta[kur] % 16);
 8001502:	4a5e      	ldr	r2, [pc, #376]	; (800167c <_Z15All_mode_UARTUIv+0x5a4>)
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	4413      	add	r3, r2
 8001508:	781a      	ldrb	r2, [r3, #0]
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	3b01      	subs	r3, #1
 800150e:	f002 020f 	and.w	r2, r2, #15
 8001512:	b2d1      	uxtb	r1, r2
 8001514:	4a5a      	ldr	r2, [pc, #360]	; (8001680 <_Z15All_mode_UARTUIv+0x5a8>)
 8001516:	54d1      	strb	r1, [r2, r3]
 8001518:	e011      	b.n	800153e <_Z15All_mode_UARTUIv+0x466>
                    }else if(x % 2 == 0){
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	f003 0301 	and.w	r3, r3, #1
 8001520:	2b00      	cmp	r3, #0
 8001522:	d10c      	bne.n	800153e <_Z15All_mode_UARTUIv+0x466>
                        Set_Goal_nSta[x-1] = (Goal_nSta[kur] / 16);
 8001524:	4a55      	ldr	r2, [pc, #340]	; (800167c <_Z15All_mode_UARTUIv+0x5a4>)
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	4413      	add	r3, r2
 800152a:	781a      	ldrb	r2, [r3, #0]
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	3b01      	subs	r3, #1
 8001530:	0912      	lsrs	r2, r2, #4
 8001532:	b2d1      	uxtb	r1, r2
 8001534:	4a52      	ldr	r2, [pc, #328]	; (8001680 <_Z15All_mode_UARTUIv+0x5a8>)
 8001536:	54d1      	strb	r1, [r2, r3]
                        kur++;
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	3301      	adds	r3, #1
 800153c:	61fb      	str	r3, [r7, #28]
				for(int x = 1; x < Nstation+1; x++){
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	3301      	adds	r3, #1
 8001542:	617b      	str	r3, [r7, #20]
 8001544:	e7cf      	b.n	80014e6 <_Z15All_mode_UARTUIv+0x40e>
                    }
                }

				chksum = MainBuf[newPos_uart-1];
 8001546:	4b3d      	ldr	r3, [pc, #244]	; (800163c <_Z15All_mode_UARTUIv+0x564>)
 8001548:	881b      	ldrh	r3, [r3, #0]
 800154a:	3b01      	subs	r3, #1
 800154c:	4a3c      	ldr	r2, [pc, #240]	; (8001640 <_Z15All_mode_UARTUIv+0x568>)
 800154e:	5cd2      	ldrb	r2, [r2, r3]
 8001550:	4b3c      	ldr	r3, [pc, #240]	; (8001644 <_Z15All_mode_UARTUIv+0x56c>)
 8001552:	701a      	strb	r2, [r3, #0]
				chksum3 = ~(StartM + Nstation + dataFSum);
 8001554:	4b3f      	ldr	r3, [pc, #252]	; (8001654 <_Z15All_mode_UARTUIv+0x57c>)
 8001556:	781a      	ldrb	r2, [r3, #0]
 8001558:	4b45      	ldr	r3, [pc, #276]	; (8001670 <_Z15All_mode_UARTUIv+0x598>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	4413      	add	r3, r2
 800155e:	b2da      	uxtb	r2, r3
 8001560:	4b45      	ldr	r3, [pc, #276]	; (8001678 <_Z15All_mode_UARTUIv+0x5a0>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	4413      	add	r3, r2
 8001566:	b2db      	uxtb	r3, r3
 8001568:	43db      	mvns	r3, r3
 800156a:	b2da      	uxtb	r2, r3
 800156c:	4b45      	ldr	r3, [pc, #276]	; (8001684 <_Z15All_mode_UARTUIv+0x5ac>)
 800156e:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum3){
 8001570:	4b34      	ldr	r3, [pc, #208]	; (8001644 <_Z15All_mode_UARTUIv+0x56c>)
 8001572:	781a      	ldrb	r2, [r3, #0]
 8001574:	4b43      	ldr	r3, [pc, #268]	; (8001684 <_Z15All_mode_UARTUIv+0x5ac>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	429a      	cmp	r2, r3
 800157a:	f040 81a5 	bne.w	80018c8 <_Z15All_mode_UARTUIv+0x7f0>
					M_state = 7;
 800157e:	4b37      	ldr	r3, [pc, #220]	; (800165c <_Z15All_mode_UARTUIv+0x584>)
 8001580:	2207      	movs	r2, #7
 8001582:	701a      	strb	r2, [r3, #0]

					/////////// Load n station-> positionlog  //////////
					//for(int j = 0; j <= len(PosDataSet); j++){
					for(int j = 0; j <= Nstation; j++){
 8001584:	2300      	movs	r3, #0
 8001586:	613b      	str	r3, [r7, #16]
 8001588:	4b39      	ldr	r3, [pc, #228]	; (8001670 <_Z15All_mode_UARTUIv+0x598>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	461a      	mov	r2, r3
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	4293      	cmp	r3, r2
 8001592:	dc10      	bgt.n	80015b6 <_Z15All_mode_UARTUIv+0x4de>
						positionlog[j] = PosDataSet[Set_Goal_nSta[j]];
 8001594:	4a3a      	ldr	r2, [pc, #232]	; (8001680 <_Z15All_mode_UARTUIv+0x5a8>)
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	4413      	add	r3, r2
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	4a30      	ldr	r2, [pc, #192]	; (8001660 <_Z15All_mode_UARTUIv+0x588>)
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	4413      	add	r3, r2
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	492f      	ldr	r1, [pc, #188]	; (8001664 <_Z15All_mode_UARTUIv+0x58c>)
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	440b      	add	r3, r1
 80015ac:	601a      	str	r2, [r3, #0]
					for(int j = 0; j <= Nstation; j++){
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	3301      	adds	r3, #1
 80015b2:	613b      	str	r3, [r7, #16]
 80015b4:	e7e8      	b.n	8001588 <_Z15All_mode_UARTUIv+0x4b0>
						//Set_Goal_nSta -> raw index from UART
					}

					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					dataFSum = 0;
 80015b6:	4b30      	ldr	r3, [pc, #192]	; (8001678 <_Z15All_mode_UARTUIv+0x5a0>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	701a      	strb	r2, [r3, #0]
					xu_Uart();
 80015bc:	f000 f9c6 	bl	800194c <_Z7xu_Uartv>
				}
				break;
 80015c0:	e182      	b.n	80018c8 <_Z15All_mode_UARTUIv+0x7f0>
		////==============[RUN Go to Goal station Order to Work]===========
			case 8: //10011000 01100111
				chksum = MainBuf[newPos_uart-1];
 80015c2:	4b1e      	ldr	r3, [pc, #120]	; (800163c <_Z15All_mode_UARTUIv+0x564>)
 80015c4:	881b      	ldrh	r3, [r3, #0]
 80015c6:	3b01      	subs	r3, #1
 80015c8:	4a1d      	ldr	r2, [pc, #116]	; (8001640 <_Z15All_mode_UARTUIv+0x568>)
 80015ca:	5cd2      	ldrb	r2, [r2, r3]
 80015cc:	4b1d      	ldr	r3, [pc, #116]	; (8001644 <_Z15All_mode_UARTUIv+0x56c>)
 80015ce:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 80015d0:	4b20      	ldr	r3, [pc, #128]	; (8001654 <_Z15All_mode_UARTUIv+0x57c>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	43db      	mvns	r3, r3
 80015d6:	b2da      	uxtb	r2, r3
 80015d8:	4b2b      	ldr	r3, [pc, #172]	; (8001688 <_Z15All_mode_UARTUIv+0x5b0>)
 80015da:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 80015dc:	4b19      	ldr	r3, [pc, #100]	; (8001644 <_Z15All_mode_UARTUIv+0x56c>)
 80015de:	781a      	ldrb	r2, [r3, #0]
 80015e0:	4b29      	ldr	r3, [pc, #164]	; (8001688 <_Z15All_mode_UARTUIv+0x5b0>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	f040 8171 	bne.w	80018cc <_Z15All_mode_UARTUIv+0x7f4>
					M_state = 8;
 80015ea:	4b1c      	ldr	r3, [pc, #112]	; (800165c <_Z15All_mode_UARTUIv+0x584>)
 80015ec:	2208      	movs	r2, #8
 80015ee:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 80015f0:	f000 f9ac 	bl	800194c <_Z7xu_Uartv>

		///////// Order to Work !!! ///
					grandState = work;
 80015f4:	4b25      	ldr	r3, [pc, #148]	; (800168c <_Z15All_mode_UARTUIv+0x5b4>)
 80015f6:	2201      	movs	r2, #1
 80015f8:	701a      	strb	r2, [r3, #0]
					//if(grandState == Ready){grandState = work;}
					//HAL_UART_Transmit(&huart2, (uint8_t*)temp_f_ack2, 2 ,1000);
				}
				break;
 80015fa:	e167      	b.n	80018cc <_Z15All_mode_UARTUIv+0x7f4>
		////==============[Request Current station]===========
			case 9: //10011001 01100110
				chksum = MainBuf[newPos_uart-1];
 80015fc:	4b0f      	ldr	r3, [pc, #60]	; (800163c <_Z15All_mode_UARTUIv+0x564>)
 80015fe:	881b      	ldrh	r3, [r3, #0]
 8001600:	3b01      	subs	r3, #1
 8001602:	4a0f      	ldr	r2, [pc, #60]	; (8001640 <_Z15All_mode_UARTUIv+0x568>)
 8001604:	5cd2      	ldrb	r2, [r2, r3]
 8001606:	4b0f      	ldr	r3, [pc, #60]	; (8001644 <_Z15All_mode_UARTUIv+0x56c>)
 8001608:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 800160a:	4b12      	ldr	r3, [pc, #72]	; (8001654 <_Z15All_mode_UARTUIv+0x57c>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	43db      	mvns	r3, r3
 8001610:	b2da      	uxtb	r2, r3
 8001612:	4b1d      	ldr	r3, [pc, #116]	; (8001688 <_Z15All_mode_UARTUIv+0x5b0>)
 8001614:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 8001616:	4b0b      	ldr	r3, [pc, #44]	; (8001644 <_Z15All_mode_UARTUIv+0x56c>)
 8001618:	781a      	ldrb	r2, [r3, #0]
 800161a:	4b1b      	ldr	r3, [pc, #108]	; (8001688 <_Z15All_mode_UARTUIv+0x5b0>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	429a      	cmp	r2, r3
 8001620:	f040 8156 	bne.w	80018d0 <_Z15All_mode_UARTUIv+0x7f8>
					M_state = 9;
 8001624:	4b0d      	ldr	r3, [pc, #52]	; (800165c <_Z15All_mode_UARTUIv+0x584>)
 8001626:	2209      	movs	r2, #9
 8001628:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 800162a:	f000 f98f 	bl	800194c <_Z7xu_Uartv>
					//Req_sta[1] = 0;
					//Req_sta[2] = x;
					//Req_sta[3] = ~(Req_sta[0] + Req_sta[1] + Req_sta[2]);
					HAL_UART_Transmit(&huart2, (uint8_t*)Req_sta, 4 ,100);
 800162e:	2364      	movs	r3, #100	; 0x64
 8001630:	2204      	movs	r2, #4
 8001632:	4917      	ldr	r1, [pc, #92]	; (8001690 <_Z15All_mode_UARTUIv+0x5b8>)
 8001634:	4817      	ldr	r0, [pc, #92]	; (8001694 <_Z15All_mode_UARTUIv+0x5bc>)
 8001636:	f01a fb08 	bl	801bc4a <HAL_UART_Transmit>
				}
				break;
 800163a:	e149      	b.n	80018d0 <_Z15All_mode_UARTUIv+0x7f8>
 800163c:	20000792 	.word	0x20000792
 8001640:	20000770 	.word	0x20000770
 8001644:	200007d5 	.word	0x200007d5
 8001648:	200007da 	.word	0x200007da
 800164c:	200007d9 	.word	0x200007d9
 8001650:	200007ac 	.word	0x200007ac
 8001654:	200007d4 	.word	0x200007d4
 8001658:	200007d7 	.word	0x200007d7
 800165c:	200007db 	.word	0x200007db
 8001660:	20000518 	.word	0x20000518
 8001664:	20000144 	.word	0x20000144
 8001668:	200007cc 	.word	0x200007cc
 800166c:	200007d0 	.word	0x200007d0
 8001670:	200007dc 	.word	0x200007dc
 8001674:	20000790 	.word	0x20000790
 8001678:	200007dd 	.word	0x200007dd
 800167c:	200007b0 	.word	0x200007b0
 8001680:	200007b8 	.word	0x200007b8
 8001684:	200007d8 	.word	0x200007d8
 8001688:	200007d6 	.word	0x200007d6
 800168c:	200004fc 	.word	0x200004fc
 8001690:	200001b8 	.word	0x200001b8
 8001694:	200003f4 	.word	0x200003f4
		////==============[Request Angular Position]===========
			case 10: //10011010 01100101
				chksum = MainBuf[newPos_uart-1];
 8001698:	4b97      	ldr	r3, [pc, #604]	; (80018f8 <_Z15All_mode_UARTUIv+0x820>)
 800169a:	881b      	ldrh	r3, [r3, #0]
 800169c:	3b01      	subs	r3, #1
 800169e:	4a97      	ldr	r2, [pc, #604]	; (80018fc <_Z15All_mode_UARTUIv+0x824>)
 80016a0:	5cd2      	ldrb	r2, [r2, r3]
 80016a2:	4b97      	ldr	r3, [pc, #604]	; (8001900 <_Z15All_mode_UARTUIv+0x828>)
 80016a4:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 80016a6:	4b97      	ldr	r3, [pc, #604]	; (8001904 <_Z15All_mode_UARTUIv+0x82c>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	43db      	mvns	r3, r3
 80016ac:	b2da      	uxtb	r2, r3
 80016ae:	4b96      	ldr	r3, [pc, #600]	; (8001908 <_Z15All_mode_UARTUIv+0x830>)
 80016b0:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 80016b2:	4b93      	ldr	r3, [pc, #588]	; (8001900 <_Z15All_mode_UARTUIv+0x828>)
 80016b4:	781a      	ldrb	r2, [r3, #0]
 80016b6:	4b94      	ldr	r3, [pc, #592]	; (8001908 <_Z15All_mode_UARTUIv+0x830>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	f040 810a 	bne.w	80018d4 <_Z15All_mode_UARTUIv+0x7fc>
					M_state = 10;
 80016c0:	4b92      	ldr	r3, [pc, #584]	; (800190c <_Z15All_mode_UARTUIv+0x834>)
 80016c2:	220a      	movs	r2, #10
 80016c4:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 80016c6:	f000 f941 	bl	800194c <_Z7xu_Uartv>
					DataProtocol_AngPosi = (CurrentEn * 10000); //KalP
 80016ca:	4b91      	ldr	r3, [pc, #580]	; (8001910 <_Z15All_mode_UARTUIv+0x838>)
 80016cc:	edd3 7a00 	vldr	s15, [r3]
 80016d0:	ed9f 7a90 	vldr	s14, [pc, #576]	; 8001914 <_Z15All_mode_UARTUIv+0x83c>
 80016d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016dc:	ee17 2a90 	vmov	r2, s15
 80016e0:	4b8d      	ldr	r3, [pc, #564]	; (8001918 <_Z15All_mode_UARTUIv+0x840>)
 80016e2:	601a      	str	r2, [r3, #0]
					Req_AngPosi[1] = (DataProtocol_AngPosi / 256);
 80016e4:	4b8c      	ldr	r3, [pc, #560]	; (8001918 <_Z15All_mode_UARTUIv+0x840>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	da00      	bge.n	80016ee <_Z15All_mode_UARTUIv+0x616>
 80016ec:	33ff      	adds	r3, #255	; 0xff
 80016ee:	121b      	asrs	r3, r3, #8
 80016f0:	b2da      	uxtb	r2, r3
 80016f2:	4b8a      	ldr	r3, [pc, #552]	; (800191c <_Z15All_mode_UARTUIv+0x844>)
 80016f4:	705a      	strb	r2, [r3, #1]
					Req_AngPosi[2] = (DataProtocol_AngPosi % 256);
 80016f6:	4b88      	ldr	r3, [pc, #544]	; (8001918 <_Z15All_mode_UARTUIv+0x840>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	425a      	negs	r2, r3
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	b2d2      	uxtb	r2, r2
 8001700:	bf58      	it	pl
 8001702:	4253      	negpl	r3, r2
 8001704:	b2da      	uxtb	r2, r3
 8001706:	4b85      	ldr	r3, [pc, #532]	; (800191c <_Z15All_mode_UARTUIv+0x844>)
 8001708:	709a      	strb	r2, [r3, #2]
					Req_AngPosi[3] = ~(Req_AngPosi[0] + Req_AngPosi[1] + Req_AngPosi[2]);
 800170a:	4b84      	ldr	r3, [pc, #528]	; (800191c <_Z15All_mode_UARTUIv+0x844>)
 800170c:	781a      	ldrb	r2, [r3, #0]
 800170e:	4b83      	ldr	r3, [pc, #524]	; (800191c <_Z15All_mode_UARTUIv+0x844>)
 8001710:	785b      	ldrb	r3, [r3, #1]
 8001712:	4413      	add	r3, r2
 8001714:	b2da      	uxtb	r2, r3
 8001716:	4b81      	ldr	r3, [pc, #516]	; (800191c <_Z15All_mode_UARTUIv+0x844>)
 8001718:	789b      	ldrb	r3, [r3, #2]
 800171a:	4413      	add	r3, r2
 800171c:	b2db      	uxtb	r3, r3
 800171e:	43db      	mvns	r3, r3
 8001720:	b2da      	uxtb	r2, r3
 8001722:	4b7e      	ldr	r3, [pc, #504]	; (800191c <_Z15All_mode_UARTUIv+0x844>)
 8001724:	70da      	strb	r2, [r3, #3]
					HAL_UART_Transmit(&huart2, (uint8_t*)Req_AngPosi, 4 ,100);
 8001726:	2364      	movs	r3, #100	; 0x64
 8001728:	2204      	movs	r2, #4
 800172a:	497c      	ldr	r1, [pc, #496]	; (800191c <_Z15All_mode_UARTUIv+0x844>)
 800172c:	487c      	ldr	r0, [pc, #496]	; (8001920 <_Z15All_mode_UARTUIv+0x848>)
 800172e:	f01a fa8c 	bl	801bc4a <HAL_UART_Transmit>
				}
				break;
 8001732:	e0cf      	b.n	80018d4 <_Z15All_mode_UARTUIv+0x7fc>
		////==============[Request MAX Angular velo]===========
			case 11: //10011011 01100100
				chksum = MainBuf[newPos_uart-1];
 8001734:	4b70      	ldr	r3, [pc, #448]	; (80018f8 <_Z15All_mode_UARTUIv+0x820>)
 8001736:	881b      	ldrh	r3, [r3, #0]
 8001738:	3b01      	subs	r3, #1
 800173a:	4a70      	ldr	r2, [pc, #448]	; (80018fc <_Z15All_mode_UARTUIv+0x824>)
 800173c:	5cd2      	ldrb	r2, [r2, r3]
 800173e:	4b70      	ldr	r3, [pc, #448]	; (8001900 <_Z15All_mode_UARTUIv+0x828>)
 8001740:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 8001742:	4b70      	ldr	r3, [pc, #448]	; (8001904 <_Z15All_mode_UARTUIv+0x82c>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	43db      	mvns	r3, r3
 8001748:	b2da      	uxtb	r2, r3
 800174a:	4b6f      	ldr	r3, [pc, #444]	; (8001908 <_Z15All_mode_UARTUIv+0x830>)
 800174c:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 800174e:	4b6c      	ldr	r3, [pc, #432]	; (8001900 <_Z15All_mode_UARTUIv+0x828>)
 8001750:	781a      	ldrb	r2, [r3, #0]
 8001752:	4b6d      	ldr	r3, [pc, #436]	; (8001908 <_Z15All_mode_UARTUIv+0x830>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	429a      	cmp	r2, r3
 8001758:	f040 80be 	bne.w	80018d8 <_Z15All_mode_UARTUIv+0x800>
					M_state = 11;
 800175c:	4b6b      	ldr	r3, [pc, #428]	; (800190c <_Z15All_mode_UARTUIv+0x834>)
 800175e:	220b      	movs	r2, #11
 8001760:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 8001762:	f000 f8f3 	bl	800194c <_Z7xu_Uartv>
					DataProtocol_Velo = (KalV/(2 * 3.14)) * 60;
 8001766:	4b6f      	ldr	r3, [pc, #444]	; (8001924 <_Z15All_mode_UARTUIv+0x84c>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4618      	mov	r0, r3
 800176c:	f7fe feec 	bl	8000548 <__aeabi_f2d>
 8001770:	a35f      	add	r3, pc, #380	; (adr r3, 80018f0 <_Z15All_mode_UARTUIv+0x818>)
 8001772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001776:	f7ff f869 	bl	800084c <__aeabi_ddiv>
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	4610      	mov	r0, r2
 8001780:	4619      	mov	r1, r3
 8001782:	f04f 0200 	mov.w	r2, #0
 8001786:	4b68      	ldr	r3, [pc, #416]	; (8001928 <_Z15All_mode_UARTUIv+0x850>)
 8001788:	f7fe ff36 	bl	80005f8 <__aeabi_dmul>
 800178c:	4602      	mov	r2, r0
 800178e:	460b      	mov	r3, r1
 8001790:	4610      	mov	r0, r2
 8001792:	4619      	mov	r1, r3
 8001794:	f7ff f9e0 	bl	8000b58 <__aeabi_d2f>
 8001798:	4603      	mov	r3, r0
 800179a:	4a64      	ldr	r2, [pc, #400]	; (800192c <_Z15All_mode_UARTUIv+0x854>)
 800179c:	6013      	str	r3, [r2, #0]
					Req_MaxVelo[1] = 0;
 800179e:	4b64      	ldr	r3, [pc, #400]	; (8001930 <_Z15All_mode_UARTUIv+0x858>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	705a      	strb	r2, [r3, #1]
					Req_MaxVelo[2] = (DataProtocol_Velo * 255) / 10;
 80017a4:	4b61      	ldr	r3, [pc, #388]	; (800192c <_Z15All_mode_UARTUIv+0x854>)
 80017a6:	edd3 7a00 	vldr	s15, [r3]
 80017aa:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8001934 <_Z15All_mode_UARTUIv+0x85c>
 80017ae:	ee27 7a87 	vmul.f32	s14, s15, s14
 80017b2:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80017b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017be:	edc7 7a01 	vstr	s15, [r7, #4]
 80017c2:	793b      	ldrb	r3, [r7, #4]
 80017c4:	b2da      	uxtb	r2, r3
 80017c6:	4b5a      	ldr	r3, [pc, #360]	; (8001930 <_Z15All_mode_UARTUIv+0x858>)
 80017c8:	709a      	strb	r2, [r3, #2]
					Req_MaxVelo[3] = ~(Req_MaxVelo[0] + Req_MaxVelo[1] + Req_MaxVelo[2]);
 80017ca:	4b59      	ldr	r3, [pc, #356]	; (8001930 <_Z15All_mode_UARTUIv+0x858>)
 80017cc:	781a      	ldrb	r2, [r3, #0]
 80017ce:	4b58      	ldr	r3, [pc, #352]	; (8001930 <_Z15All_mode_UARTUIv+0x858>)
 80017d0:	785b      	ldrb	r3, [r3, #1]
 80017d2:	4413      	add	r3, r2
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	4b56      	ldr	r3, [pc, #344]	; (8001930 <_Z15All_mode_UARTUIv+0x858>)
 80017d8:	789b      	ldrb	r3, [r3, #2]
 80017da:	4413      	add	r3, r2
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	43db      	mvns	r3, r3
 80017e0:	b2da      	uxtb	r2, r3
 80017e2:	4b53      	ldr	r3, [pc, #332]	; (8001930 <_Z15All_mode_UARTUIv+0x858>)
 80017e4:	70da      	strb	r2, [r3, #3]
					HAL_UART_Transmit(&huart2, (uint8_t*)Req_MaxVelo, 4 ,1000);
 80017e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ea:	2204      	movs	r2, #4
 80017ec:	4950      	ldr	r1, [pc, #320]	; (8001930 <_Z15All_mode_UARTUIv+0x858>)
 80017ee:	484c      	ldr	r0, [pc, #304]	; (8001920 <_Z15All_mode_UARTUIv+0x848>)
 80017f0:	f01a fa2b 	bl	801bc4a <HAL_UART_Transmit>
				}
				break;
 80017f4:	e070      	b.n	80018d8 <_Z15All_mode_UARTUIv+0x800>
		////==============[Enable end effector]================
			case 12: //// 12  10011100 01100011
				chksum = MainBuf[newPos_uart-1];
 80017f6:	4b40      	ldr	r3, [pc, #256]	; (80018f8 <_Z15All_mode_UARTUIv+0x820>)
 80017f8:	881b      	ldrh	r3, [r3, #0]
 80017fa:	3b01      	subs	r3, #1
 80017fc:	4a3f      	ldr	r2, [pc, #252]	; (80018fc <_Z15All_mode_UARTUIv+0x824>)
 80017fe:	5cd2      	ldrb	r2, [r2, r3]
 8001800:	4b3f      	ldr	r3, [pc, #252]	; (8001900 <_Z15All_mode_UARTUIv+0x828>)
 8001802:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 8001804:	4b3f      	ldr	r3, [pc, #252]	; (8001904 <_Z15All_mode_UARTUIv+0x82c>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	43db      	mvns	r3, r3
 800180a:	b2da      	uxtb	r2, r3
 800180c:	4b3e      	ldr	r3, [pc, #248]	; (8001908 <_Z15All_mode_UARTUIv+0x830>)
 800180e:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 8001810:	4b3b      	ldr	r3, [pc, #236]	; (8001900 <_Z15All_mode_UARTUIv+0x828>)
 8001812:	781a      	ldrb	r2, [r3, #0]
 8001814:	4b3c      	ldr	r3, [pc, #240]	; (8001908 <_Z15All_mode_UARTUIv+0x830>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	429a      	cmp	r2, r3
 800181a:	d15f      	bne.n	80018dc <_Z15All_mode_UARTUIv+0x804>
					M_state = 12;
 800181c:	4b3b      	ldr	r3, [pc, #236]	; (800190c <_Z15All_mode_UARTUIv+0x834>)
 800181e:	220c      	movs	r2, #12
 8001820:	701a      	strb	r2, [r3, #0]

					flag_efftDis = 0;
 8001822:	4b45      	ldr	r3, [pc, #276]	; (8001938 <_Z15All_mode_UARTUIv+0x860>)
 8001824:	2200      	movs	r2, #0
 8001826:	701a      	strb	r2, [r3, #0]

					//flag_efftActi = 1;

					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 8001828:	f000 f890 	bl	800194c <_Z7xu_Uartv>
				}
				break;
 800182c:	e056      	b.n	80018dc <_Z15All_mode_UARTUIv+0x804>
		////==============[Disable end effector]================
			case 13: // 13 10011101 01100010
				chksum = MainBuf[newPos_uart-1];
 800182e:	4b32      	ldr	r3, [pc, #200]	; (80018f8 <_Z15All_mode_UARTUIv+0x820>)
 8001830:	881b      	ldrh	r3, [r3, #0]
 8001832:	3b01      	subs	r3, #1
 8001834:	4a31      	ldr	r2, [pc, #196]	; (80018fc <_Z15All_mode_UARTUIv+0x824>)
 8001836:	5cd2      	ldrb	r2, [r2, r3]
 8001838:	4b31      	ldr	r3, [pc, #196]	; (8001900 <_Z15All_mode_UARTUIv+0x828>)
 800183a:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 800183c:	4b31      	ldr	r3, [pc, #196]	; (8001904 <_Z15All_mode_UARTUIv+0x82c>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	43db      	mvns	r3, r3
 8001842:	b2da      	uxtb	r2, r3
 8001844:	4b30      	ldr	r3, [pc, #192]	; (8001908 <_Z15All_mode_UARTUIv+0x830>)
 8001846:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 8001848:	4b2d      	ldr	r3, [pc, #180]	; (8001900 <_Z15All_mode_UARTUIv+0x828>)
 800184a:	781a      	ldrb	r2, [r3, #0]
 800184c:	4b2e      	ldr	r3, [pc, #184]	; (8001908 <_Z15All_mode_UARTUIv+0x830>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	429a      	cmp	r2, r3
 8001852:	d145      	bne.n	80018e0 <_Z15All_mode_UARTUIv+0x808>
					M_state = 13;
 8001854:	4b2d      	ldr	r3, [pc, #180]	; (800190c <_Z15All_mode_UARTUIv+0x834>)
 8001856:	220d      	movs	r2, #13
 8001858:	701a      	strb	r2, [r3, #0]
					//// End Effector Kill
					trig_efftRead = 0;
 800185a:	4b38      	ldr	r3, [pc, #224]	; (800193c <_Z15All_mode_UARTUIv+0x864>)
 800185c:	2200      	movs	r2, #0
 800185e:	701a      	strb	r2, [r3, #0]
					flag_efftRead = 0;
 8001860:	4b37      	ldr	r3, [pc, #220]	; (8001940 <_Z15All_mode_UARTUIv+0x868>)
 8001862:	2200      	movs	r2, #0
 8001864:	701a      	strb	r2, [r3, #0]
					flag_efftActi = 0;
 8001866:	4b37      	ldr	r3, [pc, #220]	; (8001944 <_Z15All_mode_UARTUIv+0x86c>)
 8001868:	2200      	movs	r2, #0
 800186a:	701a      	strb	r2, [r3, #0]
					flag_efftDis = 1;
 800186c:	4b32      	ldr	r3, [pc, #200]	; (8001938 <_Z15All_mode_UARTUIv+0x860>)
 800186e:	2201      	movs	r2, #1
 8001870:	701a      	strb	r2, [r3, #0]

					xu_Uart();
 8001872:	f000 f86b 	bl	800194c <_Z7xu_Uartv>
				}
				break;
 8001876:	e033      	b.n	80018e0 <_Z15All_mode_UARTUIv+0x808>
		////==============[Set Home Zero]================
			case 14: //10011110 01100001
				chksum = MainBuf[newPos_uart-1];
 8001878:	4b1f      	ldr	r3, [pc, #124]	; (80018f8 <_Z15All_mode_UARTUIv+0x820>)
 800187a:	881b      	ldrh	r3, [r3, #0]
 800187c:	3b01      	subs	r3, #1
 800187e:	4a1f      	ldr	r2, [pc, #124]	; (80018fc <_Z15All_mode_UARTUIv+0x824>)
 8001880:	5cd2      	ldrb	r2, [r2, r3]
 8001882:	4b1f      	ldr	r3, [pc, #124]	; (8001900 <_Z15All_mode_UARTUIv+0x828>)
 8001884:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 8001886:	4b1f      	ldr	r3, [pc, #124]	; (8001904 <_Z15All_mode_UARTUIv+0x82c>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	43db      	mvns	r3, r3
 800188c:	b2da      	uxtb	r2, r3
 800188e:	4b1e      	ldr	r3, [pc, #120]	; (8001908 <_Z15All_mode_UARTUIv+0x830>)
 8001890:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 8001892:	4b1b      	ldr	r3, [pc, #108]	; (8001900 <_Z15All_mode_UARTUIv+0x828>)
 8001894:	781a      	ldrb	r2, [r3, #0]
 8001896:	4b1c      	ldr	r3, [pc, #112]	; (8001908 <_Z15All_mode_UARTUIv+0x830>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	429a      	cmp	r2, r3
 800189c:	d122      	bne.n	80018e4 <_Z15All_mode_UARTUIv+0x80c>
					M_state = 14;
 800189e:	4b1b      	ldr	r3, [pc, #108]	; (800190c <_Z15All_mode_UARTUIv+0x834>)
 80018a0:	220e      	movs	r2, #14
 80018a2:	701a      	strb	r2, [r3, #0]
					//act as set zero interrupt
//					position_order = 0;
//					positionlog[position_order] = 0.0;
//					Velocity = 7.0;
					grandState = SetZeroBf;
 80018a4:	4b28      	ldr	r3, [pc, #160]	; (8001948 <_Z15All_mode_UARTUIv+0x870>)
 80018a6:	2206      	movs	r2, #6
 80018a8:	701a      	strb	r2, [r3, #0]

					xu_Uart();
 80018aa:	f000 f84f 	bl	800194c <_Z7xu_Uartv>
				}
				break;
 80018ae:	e019      	b.n	80018e4 <_Z15All_mode_UARTUIv+0x80c>
				break;
 80018b0:	bf00      	nop
 80018b2:	e018      	b.n	80018e6 <_Z15All_mode_UARTUIv+0x80e>
				break;
 80018b4:	bf00      	nop
 80018b6:	e016      	b.n	80018e6 <_Z15All_mode_UARTUIv+0x80e>
				break;
 80018b8:	bf00      	nop
 80018ba:	e014      	b.n	80018e6 <_Z15All_mode_UARTUIv+0x80e>
				break;
 80018bc:	bf00      	nop
 80018be:	e012      	b.n	80018e6 <_Z15All_mode_UARTUIv+0x80e>
				break;
 80018c0:	bf00      	nop
 80018c2:	e010      	b.n	80018e6 <_Z15All_mode_UARTUIv+0x80e>
				break;
 80018c4:	bf00      	nop
 80018c6:	e00e      	b.n	80018e6 <_Z15All_mode_UARTUIv+0x80e>
				break;
 80018c8:	bf00      	nop
 80018ca:	e00c      	b.n	80018e6 <_Z15All_mode_UARTUIv+0x80e>
				break;
 80018cc:	bf00      	nop
 80018ce:	e00a      	b.n	80018e6 <_Z15All_mode_UARTUIv+0x80e>
				break;
 80018d0:	bf00      	nop
 80018d2:	e008      	b.n	80018e6 <_Z15All_mode_UARTUIv+0x80e>
				break;
 80018d4:	bf00      	nop
 80018d6:	e006      	b.n	80018e6 <_Z15All_mode_UARTUIv+0x80e>
				break;
 80018d8:	bf00      	nop
 80018da:	e004      	b.n	80018e6 <_Z15All_mode_UARTUIv+0x80e>
				break;
 80018dc:	bf00      	nop
 80018de:	e002      	b.n	80018e6 <_Z15All_mode_UARTUIv+0x80e>
				break;
 80018e0:	bf00      	nop
 80018e2:	e000      	b.n	80018e6 <_Z15All_mode_UARTUIv+0x80e>
				break;
 80018e4:	bf00      	nop
			}
}
 80018e6:	bf00      	nop
 80018e8:	3720      	adds	r7, #32
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	51eb851f 	.word	0x51eb851f
 80018f4:	40191eb8 	.word	0x40191eb8
 80018f8:	20000792 	.word	0x20000792
 80018fc:	20000770 	.word	0x20000770
 8001900:	200007d5 	.word	0x200007d5
 8001904:	200007d4 	.word	0x200007d4
 8001908:	200007d6 	.word	0x200007d6
 800190c:	200007db 	.word	0x200007db
 8001910:	200006e4 	.word	0x200006e4
 8001914:	461c4000 	.word	0x461c4000
 8001918:	20000794 	.word	0x20000794
 800191c:	200001bc 	.word	0x200001bc
 8001920:	200003f4 	.word	0x200003f4
 8001924:	200006c8 	.word	0x200006c8
 8001928:	404e0000 	.word	0x404e0000
 800192c:	20000798 	.word	0x20000798
 8001930:	200001c0 	.word	0x200001c0
 8001934:	437f0000 	.word	0x437f0000
 8001938:	200001ac 	.word	0x200001ac
 800193c:	2000073d 	.word	0x2000073d
 8001940:	2000073c 	.word	0x2000073c
 8001944:	2000073b 	.word	0x2000073b
 8001948:	200004fc 	.word	0x200004fc

0800194c <_Z7xu_Uartv>:

void xu_Uart(){
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
	//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
	HAL_UART_Transmit(&huart2, (uint8_t*)temp_s_ack1, 2 , 200); //Xu
 8001950:	23c8      	movs	r3, #200	; 0xc8
 8001952:	2202      	movs	r2, #2
 8001954:	4902      	ldr	r1, [pc, #8]	; (8001960 <_Z7xu_Uartv+0x14>)
 8001956:	4803      	ldr	r0, [pc, #12]	; (8001964 <_Z7xu_Uartv+0x18>)
 8001958:	f01a f977 	bl	801bc4a <HAL_UART_Transmit>
}
 800195c:	bf00      	nop
 800195e:	bd80      	pop	{r7, pc}
 8001960:	200001b0 	.word	0x200001b0
 8001964:	200003f4 	.word	0x200003f4

08001968 <_Z7fn_Uartv>:

void fn_Uart(){
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, (uint8_t*)temp_f_ack2, 2, 100);
 800196c:	2364      	movs	r3, #100	; 0x64
 800196e:	2202      	movs	r2, #2
 8001970:	4902      	ldr	r1, [pc, #8]	; (800197c <_Z7fn_Uartv+0x14>)
 8001972:	4803      	ldr	r0, [pc, #12]	; (8001980 <_Z7fn_Uartv+0x18>)
 8001974:	f01a f969 	bl	801bc4a <HAL_UART_Transmit>
}
 8001978:	bf00      	nop
 800197a:	bd80      	pop	{r7, pc}
 800197c:	200001b4 	.word	0x200001b4
 8001980:	200003f4 	.word	0x200003f4

08001984 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8001984:	b5b0      	push	{r4, r5, r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
      return pow(__type(__x), __type(__y));
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f7fe fdc8 	bl	8000524 <__aeabi_i2d>
 8001994:	4604      	mov	r4, r0
 8001996:	460d      	mov	r5, r1
 8001998:	6838      	ldr	r0, [r7, #0]
 800199a:	f7fe fdc3 	bl	8000524 <__aeabi_i2d>
 800199e:	4602      	mov	r2, r0
 80019a0:	460b      	mov	r3, r1
 80019a2:	ec43 2b11 	vmov	d1, r2, r3
 80019a6:	ec45 4b10 	vmov	d0, r4, r5
 80019aa:	f01b fb35 	bl	801d018 <pow>
 80019ae:	eeb0 7a40 	vmov.f32	s14, s0
 80019b2:	eef0 7a60 	vmov.f32	s15, s1
    }
 80019b6:	eeb0 0a47 	vmov.f32	s0, s14
 80019ba:	eef0 0a67 	vmov.f32	s1, s15
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bdb0      	pop	{r4, r5, r7, pc}

080019c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019c8:	b0f2      	sub	sp, #456	; 0x1c8
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	/////assign  Matrix  element value  //////////
		A << 1 ,   Dt    ,   (Dt*Dt)/2 ,
 80019cc:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80019d0:	f5a3 72c2 	sub.w	r2, r3, #388	; 0x184
 80019d4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80019d8:	6013      	str	r3, [r2, #0]
 80019da:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80019de:	f5a3 70ca 	sub.w	r0, r3, #404	; 0x194
 80019e2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80019e6:	461a      	mov	r2, r3
 80019e8:	49ed      	ldr	r1, [pc, #948]	; (8001da0 <main+0x3dc>)
 80019ea:	f002 fcaa 	bl	8004342 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEElsERKf>
 80019ee:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80019f2:	f5a3 72c0 	sub.w	r2, r3, #384	; 0x180
 80019f6:	4beb      	ldr	r3, [pc, #940]	; (8001da4 <main+0x3e0>)
 80019f8:	6013      	str	r3, [r2, #0]
 80019fa:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80019fe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a02:	4611      	mov	r1, r2
 8001a04:	4618      	mov	r0, r3
 8001a06:	f002 fcb7 	bl	8004378 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001a0a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001a0e:	f5a3 72be 	sub.w	r2, r3, #380	; 0x17c
 8001a12:	4be5      	ldr	r3, [pc, #916]	; (8001da8 <main+0x3e4>)
 8001a14:	6013      	str	r3, [r2, #0]
 8001a16:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	f002 fcac 	bl	8004378 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
		     0 ,    1    ,      Dt    ,
 8001a20:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001a24:	f5a3 72bc 	sub.w	r2, r3, #376	; 0x178
 8001a28:	f04f 0300 	mov.w	r3, #0
 8001a2c:	6013      	str	r3, [r2, #0]
 8001a2e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001a32:	4619      	mov	r1, r3
 8001a34:	f002 fca0 	bl	8004378 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001a38:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001a3c:	f5a3 72ba 	sub.w	r2, r3, #372	; 0x174
 8001a40:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001a44:	6013      	str	r3, [r2, #0]
 8001a46:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	f002 fc94 	bl	8004378 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001a50:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001a54:	f5a3 72b8 	sub.w	r2, r3, #368	; 0x170
 8001a58:	4bd2      	ldr	r3, [pc, #840]	; (8001da4 <main+0x3e0>)
 8001a5a:	6013      	str	r3, [r2, #0]
 8001a5c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a60:	4619      	mov	r1, r3
 8001a62:	f002 fc89 	bl	8004378 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
			 0 ,    0    ,      1     ;
 8001a66:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001a6a:	f5a3 72b6 	sub.w	r2, r3, #364	; 0x16c
 8001a6e:	f04f 0300 	mov.w	r3, #0
 8001a72:	6013      	str	r3, [r2, #0]
 8001a74:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001a78:	4619      	mov	r1, r3
 8001a7a:	f002 fc7d 	bl	8004378 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001a7e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001a82:	f5a3 72b4 	sub.w	r2, r3, #360	; 0x168
 8001a86:	f04f 0300 	mov.w	r3, #0
 8001a8a:	6013      	str	r3, [r2, #0]
 8001a8c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001a90:	4619      	mov	r1, r3
 8001a92:	f002 fc71 	bl	8004378 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001a96:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001a9a:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 8001a9e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001aa2:	6013      	str	r3, [r2, #0]
 8001aa4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	f002 fc65 	bl	8004378 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
		A << 1 ,   Dt    ,   (Dt*Dt)/2 ,
 8001aae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f002 fc54 	bl	8004360 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>

		X << 0 ,    0    ,      0     ;
 8001ab8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001abc:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 8001ac0:	f04f 0300 	mov.w	r3, #0
 8001ac4:	6013      	str	r3, [r2, #0]
 8001ac6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001aca:	f5a3 70b0 	sub.w	r0, r3, #352	; 0x160
 8001ace:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	49b5      	ldr	r1, [pc, #724]	; (8001dac <main+0x3e8>)
 8001ad6:	f002 fcbf 	bl	8004458 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEElsERKf>
 8001ada:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001ade:	f5a3 72a6 	sub.w	r2, r3, #332	; 0x14c
 8001ae2:	f04f 0300 	mov.w	r3, #0
 8001ae6:	6013      	str	r3, [r2, #0]
 8001ae8:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8001aec:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001af0:	4611      	mov	r1, r2
 8001af2:	4618      	mov	r0, r3
 8001af4:	f002 fccc 	bl	8004490 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001af8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001afc:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 8001b00:	f04f 0300 	mov.w	r3, #0
 8001b04:	6013      	str	r3, [r2, #0]
 8001b06:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	f002 fcc0 	bl	8004490 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001b10:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001b14:	4618      	mov	r0, r3
 8001b16:	f002 fcae 	bl	8004476 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>

		X1 << 0 ,    0    ,      0     ;
 8001b1a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001b1e:	f5a3 729a 	sub.w	r2, r3, #308	; 0x134
 8001b22:	f04f 0300 	mov.w	r3, #0
 8001b26:	6013      	str	r3, [r2, #0]
 8001b28:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001b2c:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
 8001b30:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001b34:	461a      	mov	r2, r3
 8001b36:	499e      	ldr	r1, [pc, #632]	; (8001db0 <main+0x3ec>)
 8001b38:	f002 fc8e 	bl	8004458 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEElsERKf>
 8001b3c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001b40:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 8001b44:	f04f 0300 	mov.w	r3, #0
 8001b48:	6013      	str	r3, [r2, #0]
 8001b4a:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8001b4e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001b52:	4611      	mov	r1, r2
 8001b54:	4618      	mov	r0, r3
 8001b56:	f002 fc9b 	bl	8004490 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001b5a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001b5e:	f5a3 7296 	sub.w	r2, r3, #300	; 0x12c
 8001b62:	f04f 0300 	mov.w	r3, #0
 8001b66:	6013      	str	r3, [r2, #0]
 8001b68:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	f002 fc8f 	bl	8004490 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001b72:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001b76:	4618      	mov	r0, r3
 8001b78:	f002 fc7d 	bl	8004476 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>


		P << 0.000001 , 			0 	 , 			0     ,
 8001b7c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001b80:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 8001b84:	4b8b      	ldr	r3, [pc, #556]	; (8001db4 <main+0x3f0>)
 8001b86:	6013      	str	r3, [r2, #0]
 8001b88:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001b8c:	f5a3 7094 	sub.w	r0, r3, #296	; 0x128
 8001b90:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001b94:	461a      	mov	r2, r3
 8001b96:	4988      	ldr	r1, [pc, #544]	; (8001db8 <main+0x3f4>)
 8001b98:	f002 fbd3 	bl	8004342 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEElsERKf>
 8001b9c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001ba0:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 8001ba4:	f04f 0300 	mov.w	r3, #0
 8001ba8:	6013      	str	r3, [r2, #0]
 8001baa:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8001bae:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001bb2:	4611      	mov	r1, r2
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f002 fbdf 	bl	8004378 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001bba:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001bbe:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8001bc2:	f04f 0300 	mov.w	r3, #0
 8001bc6:	6013      	str	r3, [r2, #0]
 8001bc8:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001bcc:	4619      	mov	r1, r3
 8001bce:	f002 fbd3 	bl	8004378 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
		     0 		 ,    0.000001    ,  		0     ,
 8001bd2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001bd6:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 8001bda:	f04f 0300 	mov.w	r3, #0
 8001bde:	6013      	str	r3, [r2, #0]
 8001be0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001be4:	4619      	mov	r1, r3
 8001be6:	f002 fbc7 	bl	8004378 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001bea:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001bee:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 8001bf2:	4b70      	ldr	r3, [pc, #448]	; (8001db4 <main+0x3f0>)
 8001bf4:	6013      	str	r3, [r2, #0]
 8001bf6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	f002 fbbc 	bl	8004378 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001c00:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001c04:	f5a3 7282 	sub.w	r2, r3, #260	; 0x104
 8001c08:	f04f 0300 	mov.w	r3, #0
 8001c0c:	6013      	str	r3, [r2, #0]
 8001c0e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001c12:	4619      	mov	r1, r3
 8001c14:	f002 fbb0 	bl	8004378 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
			 0 		 ,    		0    ,      0.000001     ;
 8001c18:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001c1c:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 8001c20:	f04f 0300 	mov.w	r3, #0
 8001c24:	6013      	str	r3, [r2, #0]
 8001c26:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	f002 fba4 	bl	8004378 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001c30:	4602      	mov	r2, r0
 8001c32:	f04f 0300 	mov.w	r3, #0
 8001c36:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001c3a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4610      	mov	r0, r2
 8001c42:	f002 fb99 	bl	8004378 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001c46:	4602      	mov	r2, r0
 8001c48:	4b5a      	ldr	r3, [pc, #360]	; (8001db4 <main+0x3f0>)
 8001c4a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001c4e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001c52:	4619      	mov	r1, r3
 8001c54:	4610      	mov	r0, r2
 8001c56:	f002 fb8f 	bl	8004378 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
		P << 0.000001 , 			0 	 , 			0     ,
 8001c5a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f002 fb7e 	bl	8004360 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>

		O << 0 , 	0 	 , 		0     ,
 8001c64:	f04f 0300 	mov.w	r3, #0
 8001c68:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001c6c:	f107 00d4 	add.w	r0, r7, #212	; 0xd4
 8001c70:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001c74:	461a      	mov	r2, r3
 8001c76:	4951      	ldr	r1, [pc, #324]	; (8001dbc <main+0x3f8>)
 8001c78:	f002 fb63 	bl	8004342 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEElsERKf>
 8001c7c:	f04f 0300 	mov.w	r3, #0
 8001c80:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001c84:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 8001c88:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001c8c:	4611      	mov	r1, r2
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f002 fb72 	bl	8004378 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001c94:	4602      	mov	r2, r0
 8001c96:	f04f 0300 	mov.w	r3, #0
 8001c9a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001c9e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4610      	mov	r0, r2
 8001ca6:	f002 fb67 	bl	8004378 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001caa:	4602      	mov	r2, r0
		     0 ,    0    ,  	0     ,
 8001cac:	f04f 0300 	mov.w	r3, #0
 8001cb0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001cb4:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4610      	mov	r0, r2
 8001cbc:	f002 fb5c 	bl	8004378 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	f04f 0300 	mov.w	r3, #0
 8001cc6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001cca:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4610      	mov	r0, r2
 8001cd2:	f002 fb51 	bl	8004378 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	f04f 0300 	mov.w	r3, #0
 8001cdc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001ce0:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4610      	mov	r0, r2
 8001ce8:	f002 fb46 	bl	8004378 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001cec:	4602      	mov	r2, r0
			 0 ,    0    ,      0     ;
 8001cee:	f04f 0300 	mov.w	r3, #0
 8001cf2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001cf6:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4610      	mov	r0, r2
 8001cfe:	f002 fb3b 	bl	8004378 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001d02:	4602      	mov	r2, r0
 8001d04:	f04f 0300 	mov.w	r3, #0
 8001d08:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001d0c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001d10:	4619      	mov	r1, r3
 8001d12:	4610      	mov	r0, r2
 8001d14:	f002 fb30 	bl	8004378 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	f04f 0300 	mov.w	r3, #0
 8001d1e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001d22:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001d26:	4619      	mov	r1, r3
 8001d28:	4610      	mov	r0, r2
 8001d2a:	f002 fb25 	bl	8004378 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
		O << 0 , 	0 	 , 		0     ,
 8001d2e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001d32:	4618      	mov	r0, r3
 8001d34:	f002 fb14 	bl	8004360 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>

		I << 1 , 0 , 0 ,
 8001d38:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001d3c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8001d40:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8001d44:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001d48:	461a      	mov	r2, r3
 8001d4a:	491d      	ldr	r1, [pc, #116]	; (8001dc0 <main+0x3fc>)
 8001d4c:	f002 faf9 	bl	8004342 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEElsERKf>
 8001d50:	f04f 0300 	mov.w	r3, #0
 8001d54:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001d58:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 8001d5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001d60:	4611      	mov	r1, r2
 8001d62:	4618      	mov	r0, r3
 8001d64:	f002 fb08 	bl	8004378 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	f04f 0300 	mov.w	r3, #0
 8001d6e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001d72:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001d76:	4619      	mov	r1, r3
 8001d78:	4610      	mov	r0, r2
 8001d7a:	f002 fafd 	bl	8004378 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001d7e:	4602      	mov	r2, r0
			 0 , 1 , 0 ,
 8001d80:	f04f 0300 	mov.w	r3, #0
 8001d84:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001d88:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	4610      	mov	r0, r2
 8001d90:	f002 faf2 	bl	8004378 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001d94:	4602      	mov	r2, r0
 8001d96:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001d9a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001d9e:	e011      	b.n	8001dc4 <main+0x400>
 8001da0:	200005b8 	.word	0x200005b8
 8001da4:	3c23d70a 	.word	0x3c23d70a
 8001da8:	3851b717 	.word	0x3851b717
 8001dac:	200006a0 	.word	0x200006a0
 8001db0:	200006ac 	.word	0x200006ac
 8001db4:	358637bd 	.word	0x358637bd
 8001db8:	200005dc 	.word	0x200005dc
 8001dbc:	20000600 	.word	0x20000600
 8001dc0:	20000624 	.word	0x20000624
 8001dc4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4610      	mov	r0, r2
 8001dcc:	f002 fad4 	bl	8004378 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	f04f 0300 	mov.w	r3, #0
 8001dd6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001dda:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8001dde:	4619      	mov	r1, r3
 8001de0:	4610      	mov	r0, r2
 8001de2:	f002 fac9 	bl	8004378 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001de6:	4602      	mov	r2, r0
			 0 , 0 , 1 ;
 8001de8:	f04f 0300 	mov.w	r3, #0
 8001dec:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8001df0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001df4:	4619      	mov	r1, r3
 8001df6:	4610      	mov	r0, r2
 8001df8:	f002 fabe 	bl	8004378 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	f04f 0300 	mov.w	r3, #0
 8001e02:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8001e06:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4610      	mov	r0, r2
 8001e0e:	f002 fab3 	bl	8004378 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001e12:	4602      	mov	r2, r0
 8001e14:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001e18:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8001e1c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001e20:	4619      	mov	r1, r3
 8001e22:	4610      	mov	r0, r2
 8001e24:	f002 faa8 	bl	8004378 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
		I << 1 , 0 , 0 ,
 8001e28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f002 fa97 	bl	8004360 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>

		R << pow(10, 0);
 8001e32:	2100      	movs	r1, #0
 8001e34:	200a      	movs	r0, #10
 8001e36:	f7ff fda5 	bl	8001984 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001e3a:	ec53 2b10 	vmov	r2, r3, d0
 8001e3e:	4610      	mov	r0, r2
 8001e40:	4619      	mov	r1, r3
 8001e42:	f7fe fe89 	bl	8000b58 <__aeabi_d2f>
 8001e46:	4603      	mov	r3, r0
 8001e48:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001e4c:	f507 709e 	add.w	r0, r7, #316	; 0x13c
 8001e50:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8001e54:	461a      	mov	r2, r3
 8001e56:	499c      	ldr	r1, [pc, #624]	; (80020c8 <main+0x704>)
 8001e58:	f002 fb8a 	bl	8004570 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEElsERKf>
 8001e5c:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8001e60:	4618      	mov	r0, r3
 8001e62:	f002 fb94 	bl	800458e <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>

		D << 0 ;
 8001e66:	f04f 0300 	mov.w	r3, #0
 8001e6a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8001e6e:	f507 70a8 	add.w	r0, r7, #336	; 0x150
 8001e72:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001e76:	461a      	mov	r2, r3
 8001e78:	4994      	ldr	r1, [pc, #592]	; (80020cc <main+0x708>)
 8001e7a:	f002 fb79 	bl	8004570 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEElsERKf>
 8001e7e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001e82:	4618      	mov	r0, r3
 8001e84:	f002 fb83 	bl	800458e <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>

		B << 0 , 0 , 0 ;
 8001e88:	f04f 0300 	mov.w	r3, #0
 8001e8c:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8001e90:	f507 70b2 	add.w	r0, r7, #356	; 0x164
 8001e94:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8001e98:	461a      	mov	r2, r3
 8001e9a:	498d      	ldr	r1, [pc, #564]	; (80020d0 <main+0x70c>)
 8001e9c:	f002 fadc 	bl	8004458 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEElsERKf>
 8001ea0:	f04f 0300 	mov.w	r3, #0
 8001ea4:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8001ea8:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 8001eac:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8001eb0:	4611      	mov	r1, r2
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f002 faec 	bl	8004490 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	f04f 0300 	mov.w	r3, #0
 8001ebe:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001ec2:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4610      	mov	r0, r2
 8001eca:	f002 fae1 	bl	8004490 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001ece:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f002 facf 	bl	8004476 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>

		C << 1 , 0 , 0 ;
 8001ed8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001edc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8001ee0:	f507 70c0 	add.w	r0, r7, #384	; 0x180
 8001ee4:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001ee8:	461a      	mov	r2, r3
 8001eea:	497a      	ldr	r1, [pc, #488]	; (80020d4 <main+0x710>)
 8001eec:	f002 fb5b 	bl	80045a6 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEElsERKf>
 8001ef0:	f04f 0300 	mov.w	r3, #0
 8001ef4:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8001ef8:	f507 72ca 	add.w	r2, r7, #404	; 0x194
 8001efc:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8001f00:	4611      	mov	r1, r2
 8001f02:	4618      	mov	r0, r3
 8001f04:	f002 fb6a 	bl	80045dc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	f04f 0300 	mov.w	r3, #0
 8001f0e:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8001f12:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001f16:	4619      	mov	r1, r3
 8001f18:	4610      	mov	r0, r2
 8001f1a:	f002 fb5f 	bl	80045dc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf>
 8001f1e:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8001f22:	4618      	mov	r0, r3
 8001f24:	f002 fb4e 	bl	80045c4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>

		G << (Dt*Dt)/2 , Dt , 1 ;
 8001f28:	4b6b      	ldr	r3, [pc, #428]	; (80020d8 <main+0x714>)
 8001f2a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8001f2e:	f507 70ce 	add.w	r0, r7, #412	; 0x19c
 8001f32:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001f36:	461a      	mov	r2, r3
 8001f38:	4968      	ldr	r1, [pc, #416]	; (80020dc <main+0x718>)
 8001f3a:	f002 fa8d 	bl	8004458 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEElsERKf>
 8001f3e:	4b68      	ldr	r3, [pc, #416]	; (80020e0 <main+0x71c>)
 8001f40:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8001f44:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 8001f48:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8001f4c:	4611      	mov	r1, r2
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f002 fa9e 	bl	8004490 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001f54:	4602      	mov	r2, r0
 8001f56:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001f5a:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8001f5e:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8001f62:	4619      	mov	r1, r3
 8001f64:	4610      	mov	r0, r2
 8001f66:	f002 fa93 	bl	8004490 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001f6a:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f002 fa81 	bl	8004476 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f74:	f014 fb82 	bl	801667c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f78:	f000 f9a4 	bl	80022c4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f7c:	f000 fbb4 	bl	80026e8 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8001f80:	f000 fb8a 	bl	8002698 <_ZL11MX_DMA_Initv>
  MX_I2C1_Init();
 8001f84:	f000 fa10 	bl	80023a8 <_ZL12MX_I2C1_Initv>
  MX_TIM11_Init();
 8001f88:	f000 fb2e 	bl	80025e8 <_ZL13MX_TIM11_Initv>
  MX_TIM4_Init();
 8001f8c:	f000 fa74 	bl	8002478 <_ZL12MX_TIM4_Initv>
  MX_I2C3_Init();
 8001f90:	f000 fa3e 	bl	8002410 <_ZL12MX_I2C3_Initv>
  MX_USART2_UART_Init();
 8001f94:	f000 fb50 	bl	8002638 <_ZL19MX_USART2_UART_Initv>
  MX_TIM10_Init();
 8001f98:	f000 fafe 	bl	8002598 <_ZL13MX_TIM10_Initv>
  /* USER CODE BEGIN 2 */
    HAL_TIM_Base_Start_IT(&htim10); // milli timer
 8001f9c:	4851      	ldr	r0, [pc, #324]	; (80020e4 <main+0x720>)
 8001f9e:	f018 fe93 	bl	801acc8 <HAL_TIM_Base_Start_IT>
  	HAL_TIM_Base_Start_IT(&htim11); // micro timer
 8001fa2:	4851      	ldr	r0, [pc, #324]	; (80020e8 <main+0x724>)
 8001fa4:	f018 fe90 	bl	801acc8 <HAL_TIM_Base_Start_IT>

    //PWM Test
    HAL_TIM_Base_Start(&htim4);
 8001fa8:	4850      	ldr	r0, [pc, #320]	; (80020ec <main+0x728>)
 8001faa:	f018 fe33 	bl	801ac14 <HAL_TIM_Base_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001fae:	2100      	movs	r1, #0
 8001fb0:	484e      	ldr	r0, [pc, #312]	; (80020ec <main+0x728>)
 8001fb2:	f018 ff45 	bl	801ae40 <HAL_TIM_PWM_Start>

    //UART UI
    HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RxBuf, RxBuf_SIZE);
 8001fb6:	2220      	movs	r2, #32
 8001fb8:	494d      	ldr	r1, [pc, #308]	; (80020f0 <main+0x72c>)
 8001fba:	484e      	ldr	r0, [pc, #312]	; (80020f4 <main+0x730>)
 8001fbc:	f019 fed7 	bl	801bd6e <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8001fc0:	4b4d      	ldr	r3, [pc, #308]	; (80020f8 <main+0x734>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	6819      	ldr	r1, [r3, #0]
 8001fc6:	4b4c      	ldr	r3, [pc, #304]	; (80020f8 <main+0x734>)
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	f021 0308 	bic.w	r3, r1, #8
 8001fce:	6013      	str	r3, [r2, #0]

    ////// ===== Select DataPosition Dataset =================
    switch(NumPosDataSetx){
 8001fd0:	4b4a      	ldr	r3, [pc, #296]	; (80020fc <main+0x738>)
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	3b01      	subs	r3, #1
 8001fd6:	2b03      	cmp	r3, #3
 8001fd8:	f200 809d 	bhi.w	8002116 <main+0x752>
 8001fdc:	a201      	add	r2, pc, #4	; (adr r2, 8001fe4 <main+0x620>)
 8001fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fe2:	bf00      	nop
 8001fe4:	08001ff5 	.word	0x08001ff5
 8001fe8:	08002027 	.word	0x08002027
 8001fec:	08002059 	.word	0x08002059
 8001ff0:	0800208b 	.word	0x0800208b

    case 1:
    	for(int t = 0;t <= PosBufSize ;t++){
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001ffa:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001ffe:	2b14      	cmp	r3, #20
 8002000:	dc5c      	bgt.n	80020bc <main+0x6f8>
		PosDataSet[t] = rawPossw_1[t];
 8002002:	4a3f      	ldr	r2, [pc, #252]	; (8002100 <main+0x73c>)
 8002004:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	4413      	add	r3, r2
 800200c:	6819      	ldr	r1, [r3, #0]
 800200e:	4a3d      	ldr	r2, [pc, #244]	; (8002104 <main+0x740>)
 8002010:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	4413      	add	r3, r2
 8002018:	6019      	str	r1, [r3, #0]
    	for(int t = 0;t <= PosBufSize ;t++){
 800201a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800201e:	3301      	adds	r3, #1
 8002020:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002024:	e7e9      	b.n	8001ffa <main+0x636>
		} break;

    case 2:
    	for(int t = 0;t <= PosBufSize ;t++){
 8002026:	2300      	movs	r3, #0
 8002028:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800202c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002030:	2b14      	cmp	r3, #20
 8002032:	dc45      	bgt.n	80020c0 <main+0x6fc>
		PosDataSet[t] = rawPossw_2[t];
 8002034:	4a34      	ldr	r2, [pc, #208]	; (8002108 <main+0x744>)
 8002036:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	4413      	add	r3, r2
 800203e:	6819      	ldr	r1, [r3, #0]
 8002040:	4a30      	ldr	r2, [pc, #192]	; (8002104 <main+0x740>)
 8002042:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	4413      	add	r3, r2
 800204a:	6019      	str	r1, [r3, #0]
    	for(int t = 0;t <= PosBufSize ;t++){
 800204c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002050:	3301      	adds	r3, #1
 8002052:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002056:	e7e9      	b.n	800202c <main+0x668>
		} break;

    case 3:
    	for(int t = 0;t <= PosBufSize ;t++){
 8002058:	2300      	movs	r3, #0
 800205a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800205e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8002062:	2b14      	cmp	r3, #20
 8002064:	dc2e      	bgt.n	80020c4 <main+0x700>
    	PosDataSet[t] = rawPossw_3[t];
 8002066:	4a29      	ldr	r2, [pc, #164]	; (800210c <main+0x748>)
 8002068:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	4413      	add	r3, r2
 8002070:	6819      	ldr	r1, [r3, #0]
 8002072:	4a24      	ldr	r2, [pc, #144]	; (8002104 <main+0x740>)
 8002074:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	4413      	add	r3, r2
 800207c:	6019      	str	r1, [r3, #0]
    	for(int t = 0;t <= PosBufSize ;t++){
 800207e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8002082:	3301      	adds	r3, #1
 8002084:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002088:	e7e9      	b.n	800205e <main+0x69a>
    	} break;

    case 4:
		for(int t = 0;t <= PosBufSize ;t++){
 800208a:	2300      	movs	r3, #0
 800208c:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8002090:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8002094:	2b14      	cmp	r3, #20
 8002096:	dc3d      	bgt.n	8002114 <main+0x750>
		PosDataSet[t] = rawPossw_4[t];
 8002098:	4a1d      	ldr	r2, [pc, #116]	; (8002110 <main+0x74c>)
 800209a:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	4413      	add	r3, r2
 80020a2:	6819      	ldr	r1, [r3, #0]
 80020a4:	4a17      	ldr	r2, [pc, #92]	; (8002104 <main+0x740>)
 80020a6:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	4413      	add	r3, r2
 80020ae:	6019      	str	r1, [r3, #0]
		for(int t = 0;t <= PosBufSize ;t++){
 80020b0:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80020b4:	3301      	adds	r3, #1
 80020b6:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 80020ba:	e7e9      	b.n	8002090 <main+0x6cc>
		} break;
 80020bc:	bf00      	nop
 80020be:	e02a      	b.n	8002116 <main+0x752>
		} break;
 80020c0:	bf00      	nop
 80020c2:	e028      	b.n	8002116 <main+0x752>
    	} break;
 80020c4:	bf00      	nop
 80020c6:	e026      	b.n	8002116 <main+0x752>
 80020c8:	2000064c 	.word	0x2000064c
 80020cc:	20000650 	.word	0x20000650
 80020d0:	200006b8 	.word	0x200006b8
 80020d4:	20000664 	.word	0x20000664
 80020d8:	3851b717 	.word	0x3851b717
 80020dc:	20000670 	.word	0x20000670
 80020e0:	3c23d70a 	.word	0x3c23d70a
 80020e4:	20000364 	.word	0x20000364
 80020e8:	200003ac 	.word	0x200003ac
 80020ec:	2000031c 	.word	0x2000031c
 80020f0:	20000750 	.word	0x20000750
 80020f4:	200003f4 	.word	0x200003f4
 80020f8:	20000438 	.word	0x20000438
 80020fc:	20000000 	.word	0x20000000
 8002100:	20000004 	.word	0x20000004
 8002104:	20000518 	.word	0x20000518
 8002108:	20000054 	.word	0x20000054
 800210c:	200000a4 	.word	0x200000a4
 8002110:	200000f4 	.word	0x200000f4
		} break;
 8002114:	bf00      	nop
    }

    PosoffsetMon = 0 + POSOFFSET; // for send to cubeMon
 8002116:	4a5d      	ldr	r2, [pc, #372]	; (800228c <main+0x8c8>)
 8002118:	f240 336f 	movw	r3, #879	; 0x36f
 800211c:	6013      	str	r3, [r2, #0]
    ////============position buffer Set Default===================
    //for(int f = 0; f <= PosBufSize; f++){
    //		positionlog[f] = -1.0;
    //	}
    //MCP23017 setting init
    HAL_Delay(50);
 800211e:	2032      	movs	r0, #50	; 0x32
 8002120:	f014 fb1e 	bl	8016760 <HAL_Delay>
    IOExpenderInit();
 8002124:	f001 fec8 	bl	8003eb8 <_Z14IOExpenderInitv>
	      ///// IT test
	 //HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);

	  	  ///// GrandState ///////////////////

	  	  if(micros() - TimeStampGrand >= 1000){
 8002128:	f002 f834 	bl	8004194 <_Z6microsv>
 800212c:	4b58      	ldr	r3, [pc, #352]	; (8002290 <main+0x8cc>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2200      	movs	r2, #0
 8002132:	62bb      	str	r3, [r7, #40]	; 0x28
 8002134:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002138:	ebb0 0803 	subs.w	r8, r0, r3
 800213c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800213e:	eb61 0903 	sbc.w	r9, r1, r3
 8002142:	f5b8 7f7a 	cmp.w	r8, #1000	; 0x3e8
 8002146:	f179 0300 	sbcs.w	r3, r9, #0
 800214a:	bf2c      	ite	cs
 800214c:	2301      	movcs	r3, #1
 800214e:	2300      	movcc	r3, #0
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b00      	cmp	r3, #0
 8002154:	d007      	beq.n	8002166 <main+0x7a2>
	  		TimeStampGrand = micros();
 8002156:	f002 f81d 	bl	8004194 <_Z6microsv>
 800215a:	4602      	mov	r2, r0
 800215c:	460b      	mov	r3, r1
 800215e:	4b4c      	ldr	r3, [pc, #304]	; (8002290 <main+0x8cc>)
 8002160:	601a      	str	r2, [r3, #0]
	  		GrandStatumix();
 8002162:	f000 fbad 	bl	80028c0 <_Z13GrandStatumixv>
	  		//CurrentEn = BinPosXI * 0.006136;
	  	  }

	  	  // Encoder I2CRead

	  	  if (micros()-timeStampSR >= 10000)      // don't use 1
 8002166:	f002 f815 	bl	8004194 <_Z6microsv>
 800216a:	4b4a      	ldr	r3, [pc, #296]	; (8002294 <main+0x8d0>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2200      	movs	r2, #0
 8002170:	623b      	str	r3, [r7, #32]
 8002172:	627a      	str	r2, [r7, #36]	; 0x24
 8002174:	6a3b      	ldr	r3, [r7, #32]
 8002176:	1ac3      	subs	r3, r0, r3
 8002178:	60bb      	str	r3, [r7, #8]
 800217a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217c:	eb61 0303 	sbc.w	r3, r1, r3
 8002180:	60fb      	str	r3, [r7, #12]
 8002182:	f242 7310 	movw	r3, #10000	; 0x2710
 8002186:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800218a:	4602      	mov	r2, r0
 800218c:	429a      	cmp	r2, r3
 800218e:	460b      	mov	r3, r1
 8002190:	f173 0300 	sbcs.w	r3, r3, #0
 8002194:	bf2c      	ite	cs
 8002196:	2301      	movcs	r3, #1
 8002198:	2300      	movcc	r3, #0
 800219a:	b2db      	uxtb	r3, r3
 800219c:	2b00      	cmp	r3, #0
 800219e:	d008      	beq.n	80021b2 <main+0x7ee>
	  	          {
	  	              timeStampSR = micros();           //set new time stamp
 80021a0:	f001 fff8 	bl	8004194 <_Z6microsv>
 80021a4:	4602      	mov	r2, r0
 80021a6:	460b      	mov	r3, r1
 80021a8:	4b3a      	ldr	r3, [pc, #232]	; (8002294 <main+0x8d0>)
 80021aa:	601a      	str	r2, [r3, #0]
	  	              flag_absenc = 1;
 80021ac:	4a3a      	ldr	r2, [pc, #232]	; (8002298 <main+0x8d4>)
 80021ae:	2301      	movs	r3, #1
 80021b0:	7013      	strb	r3, [r2, #0]
	  	          }
	  	  AbsEncI2CReadx(RawEnBitAB);
 80021b2:	483a      	ldr	r0, [pc, #232]	; (800229c <main+0x8d8>)
 80021b4:	f001 fe96 	bl	8003ee4 <_Z14AbsEncI2CReadxPh>
	  	  //Unwrapping();
	  	  //Kalmanfilter();

	  	  ///////////////////// 2KHz change PWM PB6////////////////////

	  	  if(micros() - timestampPWM >= 500){
 80021b8:	f001 ffec 	bl	8004194 <_Z6microsv>
 80021bc:	4b38      	ldr	r3, [pc, #224]	; (80022a0 <main+0x8dc>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2200      	movs	r2, #0
 80021c2:	61bb      	str	r3, [r7, #24]
 80021c4:	61fa      	str	r2, [r7, #28]
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	ebb0 0a03 	subs.w	sl, r0, r3
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	eb61 0b03 	sbc.w	fp, r1, r3
 80021d2:	f5ba 7ffa 	cmp.w	sl, #500	; 0x1f4
 80021d6:	f17b 0300 	sbcs.w	r3, fp, #0
 80021da:	bf2c      	ite	cs
 80021dc:	2301      	movcs	r3, #1
 80021de:	2300      	movcc	r3, #0
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d01a      	beq.n	800221c <main+0x858>
	  		  	  timestampPWM = micros(); // stamp
 80021e6:	f001 ffd5 	bl	8004194 <_Z6microsv>
 80021ea:	4602      	mov	r2, r0
 80021ec:	460b      	mov	r3, r1
 80021ee:	4b2c      	ldr	r3, [pc, #176]	; (80022a0 <main+0x8dc>)
 80021f0:	601a      	str	r2, [r3, #0]
	  	  		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, PWMOut); // dutycycle
 80021f2:	4b2c      	ldr	r3, [pc, #176]	; (80022a4 <main+0x8e0>)
 80021f4:	8819      	ldrh	r1, [r3, #0]
 80021f6:	4b2c      	ldr	r3, [pc, #176]	; (80022a8 <main+0x8e4>)
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	460b      	mov	r3, r1
 80021fc:	6353      	str	r3, [r2, #52]	; 0x34
	  	  		  //__HAL_TIM_SET_PRESCALER(&htim4, pscalr); // Set freq of pwm
	  	  		  //ADC_Target = ADCFeedx[1].datt;

	  	  		///// Mot Driver ///// 0 => CCW /// 1 => CW
	  	  		if (mot_dirctn == 0){
 80021fe:	4b2b      	ldr	r3, [pc, #172]	; (80022ac <main+0x8e8>)
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d105      	bne.n	8002212 <main+0x84e>
	  	  		HAL_GPIO_WritePin(Mot_dir_GPIO_Port, Mot_dir_Pin, GPIO_PIN_SET);
 8002206:	2201      	movs	r2, #1
 8002208:	2104      	movs	r1, #4
 800220a:	4829      	ldr	r0, [pc, #164]	; (80022b0 <main+0x8ec>)
 800220c:	f015 f98a 	bl	8017524 <HAL_GPIO_WritePin>
 8002210:	e004      	b.n	800221c <main+0x858>
	  	  		}else{
	  	  		HAL_GPIO_WritePin(Mot_dir_GPIO_Port, Mot_dir_Pin, GPIO_PIN_RESET);
 8002212:	2200      	movs	r2, #0
 8002214:	2104      	movs	r1, #4
 8002216:	4826      	ldr	r0, [pc, #152]	; (80022b0 <main+0x8ec>)
 8002218:	f015 f984 	bl	8017524 <HAL_GPIO_WritePin>
				controlloop();
			 }
	  	    */

	  	 //////////// End Effector /////////////////////
	  	 Efft_activate(); // Activate by flag_efftActi = 1;
 800221c:	f001 feb6 	bl	8003f8c <_Z13Efft_activatev>
	  	 Efft_read(&efft_status);
 8002220:	4824      	ldr	r0, [pc, #144]	; (80022b4 <main+0x8f0>)
 8002222:	f001 ff0b 	bl	800403c <_Z9Efft_readPh>
	  	 //// trig_efftRead up for 10 times afrer shoot / trig at shoot state

	  	 if(trig_efftRead != 0 && millis() - timestamp_efft >= 500){
 8002226:	4b24      	ldr	r3, [pc, #144]	; (80022b8 <main+0x8f4>)
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d014      	beq.n	8002258 <main+0x894>
 800222e:	f001 ffcb 	bl	80041c8 <_Z6millisv>
 8002232:	4603      	mov	r3, r0
 8002234:	2200      	movs	r2, #0
 8002236:	613b      	str	r3, [r7, #16]
 8002238:	617a      	str	r2, [r7, #20]
 800223a:	4b20      	ldr	r3, [pc, #128]	; (80022bc <main+0x8f8>)
 800223c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002240:	6939      	ldr	r1, [r7, #16]
 8002242:	1a8c      	subs	r4, r1, r2
 8002244:	6979      	ldr	r1, [r7, #20]
 8002246:	eb61 0503 	sbc.w	r5, r1, r3
 800224a:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
 800224e:	f175 0300 	sbcs.w	r3, r5, #0
 8002252:	d301      	bcc.n	8002258 <main+0x894>
 8002254:	2301      	movs	r3, #1
 8002256:	e000      	b.n	800225a <main+0x896>
 8002258:	2300      	movs	r3, #0
 800225a:	2b00      	cmp	r3, #0
 800225c:	f43f af64 	beq.w	8002128 <main+0x764>
	  		 timestamp_efft = millis();
 8002260:	f001 ffb2 	bl	80041c8 <_Z6millisv>
 8002264:	4603      	mov	r3, r0
 8002266:	2200      	movs	r2, #0
 8002268:	603b      	str	r3, [r7, #0]
 800226a:	607a      	str	r2, [r7, #4]
 800226c:	4b13      	ldr	r3, [pc, #76]	; (80022bc <main+0x8f8>)
 800226e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002272:	e9c3 1200 	strd	r1, r2, [r3]
	  		 flag_efftRead = 1;
 8002276:	4a12      	ldr	r2, [pc, #72]	; (80022c0 <main+0x8fc>)
 8002278:	2301      	movs	r3, #1
 800227a:	7013      	strb	r3, [r2, #0]
	  		 trig_efftRead++;
 800227c:	4b0e      	ldr	r3, [pc, #56]	; (80022b8 <main+0x8f4>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	3301      	adds	r3, #1
 8002282:	b2db      	uxtb	r3, r3
 8002284:	4a0c      	ldr	r2, [pc, #48]	; (80022b8 <main+0x8f4>)
 8002286:	7013      	strb	r3, [r2, #0]
	  	  if(micros() - TimeStampGrand >= 1000){
 8002288:	e74e      	b.n	8002128 <main+0x764>
 800228a:	bf00      	nop
 800228c:	200004f8 	.word	0x200004f8
 8002290:	20000500 	.word	0x20000500
 8002294:	20000568 	.word	0x20000568
 8002298:	20000572 	.word	0x20000572
 800229c:	2000056c 	.word	0x2000056c
 80022a0:	20000578 	.word	0x20000578
 80022a4:	20000574 	.word	0x20000574
 80022a8:	2000031c 	.word	0x2000031c
 80022ac:	2000057c 	.word	0x2000057c
 80022b0:	40020400 	.word	0x40020400
 80022b4:	2000073a 	.word	0x2000073a
 80022b8:	2000073d 	.word	0x2000073d
 80022bc:	20000740 	.word	0x20000740
 80022c0:	2000073c 	.word	0x2000073c

080022c4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b094      	sub	sp, #80	; 0x50
 80022c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022ca:	f107 0320 	add.w	r3, r7, #32
 80022ce:	2230      	movs	r2, #48	; 0x30
 80022d0:	2100      	movs	r1, #0
 80022d2:	4618      	mov	r0, r3
 80022d4:	f01b fe46 	bl	801df64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022d8:	f107 030c 	add.w	r3, r7, #12
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	605a      	str	r2, [r3, #4]
 80022e2:	609a      	str	r2, [r3, #8]
 80022e4:	60da      	str	r2, [r3, #12]
 80022e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80022e8:	2300      	movs	r3, #0
 80022ea:	60bb      	str	r3, [r7, #8]
 80022ec:	4b2c      	ldr	r3, [pc, #176]	; (80023a0 <_Z18SystemClock_Configv+0xdc>)
 80022ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f0:	4a2b      	ldr	r2, [pc, #172]	; (80023a0 <_Z18SystemClock_Configv+0xdc>)
 80022f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022f6:	6413      	str	r3, [r2, #64]	; 0x40
 80022f8:	4b29      	ldr	r3, [pc, #164]	; (80023a0 <_Z18SystemClock_Configv+0xdc>)
 80022fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002300:	60bb      	str	r3, [r7, #8]
 8002302:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002304:	2300      	movs	r3, #0
 8002306:	607b      	str	r3, [r7, #4]
 8002308:	4b26      	ldr	r3, [pc, #152]	; (80023a4 <_Z18SystemClock_Configv+0xe0>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a25      	ldr	r2, [pc, #148]	; (80023a4 <_Z18SystemClock_Configv+0xe0>)
 800230e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002312:	6013      	str	r3, [r2, #0]
 8002314:	4b23      	ldr	r3, [pc, #140]	; (80023a4 <_Z18SystemClock_Configv+0xe0>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800231c:	607b      	str	r3, [r7, #4]
 800231e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002320:	2302      	movs	r3, #2
 8002322:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002324:	2301      	movs	r3, #1
 8002326:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002328:	2310      	movs	r3, #16
 800232a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800232c:	2302      	movs	r3, #2
 800232e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002330:	2300      	movs	r3, #0
 8002332:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002334:	2308      	movs	r3, #8
 8002336:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002338:	2364      	movs	r3, #100	; 0x64
 800233a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800233c:	2302      	movs	r3, #2
 800233e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002340:	2304      	movs	r3, #4
 8002342:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002344:	f107 0320 	add.w	r3, r7, #32
 8002348:	4618      	mov	r0, r3
 800234a:	f017 ff7b 	bl	801a244 <HAL_RCC_OscConfig>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	bf14      	ite	ne
 8002354:	2301      	movne	r3, #1
 8002356:	2300      	moveq	r3, #0
 8002358:	b2db      	uxtb	r3, r3
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 800235e:	f001 ff69 	bl	8004234 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002362:	230f      	movs	r3, #15
 8002364:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002366:	2302      	movs	r3, #2
 8002368:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800236a:	2300      	movs	r3, #0
 800236c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800236e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002372:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002374:	2300      	movs	r3, #0
 8002376:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002378:	f107 030c 	add.w	r3, r7, #12
 800237c:	2103      	movs	r1, #3
 800237e:	4618      	mov	r0, r3
 8002380:	f018 f9d8 	bl	801a734 <HAL_RCC_ClockConfig>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	bf14      	ite	ne
 800238a:	2301      	movne	r3, #1
 800238c:	2300      	moveq	r3, #0
 800238e:	b2db      	uxtb	r3, r3
 8002390:	2b00      	cmp	r3, #0
 8002392:	d001      	beq.n	8002398 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8002394:	f001 ff4e 	bl	8004234 <Error_Handler>
  }
}
 8002398:	bf00      	nop
 800239a:	3750      	adds	r7, #80	; 0x50
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	40023800 	.word	0x40023800
 80023a4:	40007000 	.word	0x40007000

080023a8 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80023ac:	4b15      	ldr	r3, [pc, #84]	; (8002404 <_ZL12MX_I2C1_Initv+0x5c>)
 80023ae:	4a16      	ldr	r2, [pc, #88]	; (8002408 <_ZL12MX_I2C1_Initv+0x60>)
 80023b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80023b2:	4b14      	ldr	r3, [pc, #80]	; (8002404 <_ZL12MX_I2C1_Initv+0x5c>)
 80023b4:	4a15      	ldr	r2, [pc, #84]	; (800240c <_ZL12MX_I2C1_Initv+0x64>)
 80023b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80023b8:	4b12      	ldr	r3, [pc, #72]	; (8002404 <_ZL12MX_I2C1_Initv+0x5c>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80023be:	4b11      	ldr	r3, [pc, #68]	; (8002404 <_ZL12MX_I2C1_Initv+0x5c>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023c4:	4b0f      	ldr	r3, [pc, #60]	; (8002404 <_ZL12MX_I2C1_Initv+0x5c>)
 80023c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80023ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023cc:	4b0d      	ldr	r3, [pc, #52]	; (8002404 <_ZL12MX_I2C1_Initv+0x5c>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80023d2:	4b0c      	ldr	r3, [pc, #48]	; (8002404 <_ZL12MX_I2C1_Initv+0x5c>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023d8:	4b0a      	ldr	r3, [pc, #40]	; (8002404 <_ZL12MX_I2C1_Initv+0x5c>)
 80023da:	2200      	movs	r2, #0
 80023dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023de:	4b09      	ldr	r3, [pc, #36]	; (8002404 <_ZL12MX_I2C1_Initv+0x5c>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80023e4:	4807      	ldr	r0, [pc, #28]	; (8002404 <_ZL12MX_I2C1_Initv+0x5c>)
 80023e6:	f015 f8cf 	bl	8017588 <HAL_I2C_Init>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	bf14      	ite	ne
 80023f0:	2301      	movne	r3, #1
 80023f2:	2300      	moveq	r3, #0
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 80023fa:	f001 ff1b 	bl	8004234 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80023fe:	bf00      	nop
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	20000274 	.word	0x20000274
 8002408:	40005400 	.word	0x40005400
 800240c:	00061a80 	.word	0x00061a80

08002410 <_ZL12MX_I2C3_Initv>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002414:	4b15      	ldr	r3, [pc, #84]	; (800246c <_ZL12MX_I2C3_Initv+0x5c>)
 8002416:	4a16      	ldr	r2, [pc, #88]	; (8002470 <_ZL12MX_I2C3_Initv+0x60>)
 8002418:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 800241a:	4b14      	ldr	r3, [pc, #80]	; (800246c <_ZL12MX_I2C3_Initv+0x5c>)
 800241c:	4a15      	ldr	r2, [pc, #84]	; (8002474 <_ZL12MX_I2C3_Initv+0x64>)
 800241e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002420:	4b12      	ldr	r3, [pc, #72]	; (800246c <_ZL12MX_I2C3_Initv+0x5c>)
 8002422:	2200      	movs	r2, #0
 8002424:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002426:	4b11      	ldr	r3, [pc, #68]	; (800246c <_ZL12MX_I2C3_Initv+0x5c>)
 8002428:	2200      	movs	r2, #0
 800242a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800242c:	4b0f      	ldr	r3, [pc, #60]	; (800246c <_ZL12MX_I2C3_Initv+0x5c>)
 800242e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002432:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002434:	4b0d      	ldr	r3, [pc, #52]	; (800246c <_ZL12MX_I2C3_Initv+0x5c>)
 8002436:	2200      	movs	r2, #0
 8002438:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800243a:	4b0c      	ldr	r3, [pc, #48]	; (800246c <_ZL12MX_I2C3_Initv+0x5c>)
 800243c:	2200      	movs	r2, #0
 800243e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002440:	4b0a      	ldr	r3, [pc, #40]	; (800246c <_ZL12MX_I2C3_Initv+0x5c>)
 8002442:	2200      	movs	r2, #0
 8002444:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002446:	4b09      	ldr	r3, [pc, #36]	; (800246c <_ZL12MX_I2C3_Initv+0x5c>)
 8002448:	2200      	movs	r2, #0
 800244a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800244c:	4807      	ldr	r0, [pc, #28]	; (800246c <_ZL12MX_I2C3_Initv+0x5c>)
 800244e:	f015 f89b 	bl	8017588 <HAL_I2C_Init>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	bf14      	ite	ne
 8002458:	2301      	movne	r3, #1
 800245a:	2300      	moveq	r3, #0
 800245c:	b2db      	uxtb	r3, r3
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <_ZL12MX_I2C3_Initv+0x56>
  {
    Error_Handler();
 8002462:	f001 fee7 	bl	8004234 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002466:	bf00      	nop
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	200002c8 	.word	0x200002c8
 8002470:	40005c00 	.word	0x40005c00
 8002474:	00061a80 	.word	0x00061a80

08002478 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b08e      	sub	sp, #56	; 0x38
 800247c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800247e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002482:	2200      	movs	r2, #0
 8002484:	601a      	str	r2, [r3, #0]
 8002486:	605a      	str	r2, [r3, #4]
 8002488:	609a      	str	r2, [r3, #8]
 800248a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800248c:	f107 0320 	add.w	r3, r7, #32
 8002490:	2200      	movs	r2, #0
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002496:	1d3b      	adds	r3, r7, #4
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]
 800249c:	605a      	str	r2, [r3, #4]
 800249e:	609a      	str	r2, [r3, #8]
 80024a0:	60da      	str	r2, [r3, #12]
 80024a2:	611a      	str	r2, [r3, #16]
 80024a4:	615a      	str	r2, [r3, #20]
 80024a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80024a8:	4b39      	ldr	r3, [pc, #228]	; (8002590 <_ZL12MX_TIM4_Initv+0x118>)
 80024aa:	4a3a      	ldr	r2, [pc, #232]	; (8002594 <_ZL12MX_TIM4_Initv+0x11c>)
 80024ac:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80024ae:	4b38      	ldr	r3, [pc, #224]	; (8002590 <_ZL12MX_TIM4_Initv+0x118>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024b4:	4b36      	ldr	r3, [pc, #216]	; (8002590 <_ZL12MX_TIM4_Initv+0x118>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 80024ba:	4b35      	ldr	r3, [pc, #212]	; (8002590 <_ZL12MX_TIM4_Initv+0x118>)
 80024bc:	f242 720f 	movw	r2, #9999	; 0x270f
 80024c0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024c2:	4b33      	ldr	r3, [pc, #204]	; (8002590 <_ZL12MX_TIM4_Initv+0x118>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024c8:	4b31      	ldr	r3, [pc, #196]	; (8002590 <_ZL12MX_TIM4_Initv+0x118>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80024ce:	4830      	ldr	r0, [pc, #192]	; (8002590 <_ZL12MX_TIM4_Initv+0x118>)
 80024d0:	f018 fb50 	bl	801ab74 <HAL_TIM_Base_Init>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	bf14      	ite	ne
 80024da:	2301      	movne	r3, #1
 80024dc:	2300      	moveq	r3, #0
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <_ZL12MX_TIM4_Initv+0x70>
  {
    Error_Handler();
 80024e4:	f001 fea6 	bl	8004234 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024ec:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80024ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024f2:	4619      	mov	r1, r3
 80024f4:	4826      	ldr	r0, [pc, #152]	; (8002590 <_ZL12MX_TIM4_Initv+0x118>)
 80024f6:	f018 ff1d 	bl	801b334 <HAL_TIM_ConfigClockSource>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	bf14      	ite	ne
 8002500:	2301      	movne	r3, #1
 8002502:	2300      	moveq	r3, #0
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <_ZL12MX_TIM4_Initv+0x96>
  {
    Error_Handler();
 800250a:	f001 fe93 	bl	8004234 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800250e:	4820      	ldr	r0, [pc, #128]	; (8002590 <_ZL12MX_TIM4_Initv+0x118>)
 8002510:	f018 fc3c 	bl	801ad8c <HAL_TIM_PWM_Init>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	bf14      	ite	ne
 800251a:	2301      	movne	r3, #1
 800251c:	2300      	moveq	r3, #0
 800251e:	b2db      	uxtb	r3, r3
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <_ZL12MX_TIM4_Initv+0xb0>
  {
    Error_Handler();
 8002524:	f001 fe86 	bl	8004234 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002528:	2300      	movs	r3, #0
 800252a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800252c:	2300      	movs	r3, #0
 800252e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002530:	f107 0320 	add.w	r3, r7, #32
 8002534:	4619      	mov	r1, r3
 8002536:	4816      	ldr	r0, [pc, #88]	; (8002590 <_ZL12MX_TIM4_Initv+0x118>)
 8002538:	f019 fab8 	bl	801baac <HAL_TIMEx_MasterConfigSynchronization>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	bf14      	ite	ne
 8002542:	2301      	movne	r3, #1
 8002544:	2300      	moveq	r3, #0
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <_ZL12MX_TIM4_Initv+0xd8>
  {
    Error_Handler();
 800254c:	f001 fe72 	bl	8004234 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002550:	2360      	movs	r3, #96	; 0x60
 8002552:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002554:	2300      	movs	r3, #0
 8002556:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002558:	2300      	movs	r3, #0
 800255a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800255c:	2300      	movs	r3, #0
 800255e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002560:	1d3b      	adds	r3, r7, #4
 8002562:	2200      	movs	r2, #0
 8002564:	4619      	mov	r1, r3
 8002566:	480a      	ldr	r0, [pc, #40]	; (8002590 <_ZL12MX_TIM4_Initv+0x118>)
 8002568:	f018 fe22 	bl	801b1b0 <HAL_TIM_PWM_ConfigChannel>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	bf14      	ite	ne
 8002572:	2301      	movne	r3, #1
 8002574:	2300      	moveq	r3, #0
 8002576:	b2db      	uxtb	r3, r3
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <_ZL12MX_TIM4_Initv+0x108>
  {
    Error_Handler();
 800257c:	f001 fe5a 	bl	8004234 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002580:	4803      	ldr	r0, [pc, #12]	; (8002590 <_ZL12MX_TIM4_Initv+0x118>)
 8002582:	f013 fdef 	bl	8016164 <HAL_TIM_MspPostInit>

}
 8002586:	bf00      	nop
 8002588:	3738      	adds	r7, #56	; 0x38
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	2000031c 	.word	0x2000031c
 8002594:	40000800 	.word	0x40000800

08002598 <_ZL13MX_TIM10_Initv>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800259c:	4b10      	ldr	r3, [pc, #64]	; (80025e0 <_ZL13MX_TIM10_Initv+0x48>)
 800259e:	4a11      	ldr	r2, [pc, #68]	; (80025e4 <_ZL13MX_TIM10_Initv+0x4c>)
 80025a0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 99;
 80025a2:	4b0f      	ldr	r3, [pc, #60]	; (80025e0 <_ZL13MX_TIM10_Initv+0x48>)
 80025a4:	2263      	movs	r2, #99	; 0x63
 80025a6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025a8:	4b0d      	ldr	r3, [pc, #52]	; (80025e0 <_ZL13MX_TIM10_Initv+0x48>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 999;
 80025ae:	4b0c      	ldr	r3, [pc, #48]	; (80025e0 <_ZL13MX_TIM10_Initv+0x48>)
 80025b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80025b4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025b6:	4b0a      	ldr	r3, [pc, #40]	; (80025e0 <_ZL13MX_TIM10_Initv+0x48>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025bc:	4b08      	ldr	r3, [pc, #32]	; (80025e0 <_ZL13MX_TIM10_Initv+0x48>)
 80025be:	2200      	movs	r2, #0
 80025c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80025c2:	4807      	ldr	r0, [pc, #28]	; (80025e0 <_ZL13MX_TIM10_Initv+0x48>)
 80025c4:	f018 fad6 	bl	801ab74 <HAL_TIM_Base_Init>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	bf14      	ite	ne
 80025ce:	2301      	movne	r3, #1
 80025d0:	2300      	moveq	r3, #0
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <_ZL13MX_TIM10_Initv+0x44>
  {
    Error_Handler();
 80025d8:	f001 fe2c 	bl	8004234 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80025dc:	bf00      	nop
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	20000364 	.word	0x20000364
 80025e4:	40014400 	.word	0x40014400

080025e8 <_ZL13MX_TIM11_Initv>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80025ec:	4b10      	ldr	r3, [pc, #64]	; (8002630 <_ZL13MX_TIM11_Initv+0x48>)
 80025ee:	4a11      	ldr	r2, [pc, #68]	; (8002634 <_ZL13MX_TIM11_Initv+0x4c>)
 80025f0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 80025f2:	4b0f      	ldr	r3, [pc, #60]	; (8002630 <_ZL13MX_TIM11_Initv+0x48>)
 80025f4:	2263      	movs	r2, #99	; 0x63
 80025f6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025f8:	4b0d      	ldr	r3, [pc, #52]	; (8002630 <_ZL13MX_TIM11_Initv+0x48>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80025fe:	4b0c      	ldr	r3, [pc, #48]	; (8002630 <_ZL13MX_TIM11_Initv+0x48>)
 8002600:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002604:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002606:	4b0a      	ldr	r3, [pc, #40]	; (8002630 <_ZL13MX_TIM11_Initv+0x48>)
 8002608:	2200      	movs	r2, #0
 800260a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800260c:	4b08      	ldr	r3, [pc, #32]	; (8002630 <_ZL13MX_TIM11_Initv+0x48>)
 800260e:	2200      	movs	r2, #0
 8002610:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002612:	4807      	ldr	r0, [pc, #28]	; (8002630 <_ZL13MX_TIM11_Initv+0x48>)
 8002614:	f018 faae 	bl	801ab74 <HAL_TIM_Base_Init>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	bf14      	ite	ne
 800261e:	2301      	movne	r3, #1
 8002620:	2300      	moveq	r3, #0
 8002622:	b2db      	uxtb	r3, r3
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <_ZL13MX_TIM11_Initv+0x44>
  {
    Error_Handler();
 8002628:	f001 fe04 	bl	8004234 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800262c:	bf00      	nop
 800262e:	bd80      	pop	{r7, pc}
 8002630:	200003ac 	.word	0x200003ac
 8002634:	40014800 	.word	0x40014800

08002638 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800263c:	4b14      	ldr	r3, [pc, #80]	; (8002690 <_ZL19MX_USART2_UART_Initv+0x58>)
 800263e:	4a15      	ldr	r2, [pc, #84]	; (8002694 <_ZL19MX_USART2_UART_Initv+0x5c>)
 8002640:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 8002642:	4b13      	ldr	r3, [pc, #76]	; (8002690 <_ZL19MX_USART2_UART_Initv+0x58>)
 8002644:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 8002648:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800264a:	4b11      	ldr	r3, [pc, #68]	; (8002690 <_ZL19MX_USART2_UART_Initv+0x58>)
 800264c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002650:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002652:	4b0f      	ldr	r3, [pc, #60]	; (8002690 <_ZL19MX_USART2_UART_Initv+0x58>)
 8002654:	2200      	movs	r2, #0
 8002656:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8002658:	4b0d      	ldr	r3, [pc, #52]	; (8002690 <_ZL19MX_USART2_UART_Initv+0x58>)
 800265a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800265e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002660:	4b0b      	ldr	r3, [pc, #44]	; (8002690 <_ZL19MX_USART2_UART_Initv+0x58>)
 8002662:	220c      	movs	r2, #12
 8002664:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002666:	4b0a      	ldr	r3, [pc, #40]	; (8002690 <_ZL19MX_USART2_UART_Initv+0x58>)
 8002668:	2200      	movs	r2, #0
 800266a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800266c:	4b08      	ldr	r3, [pc, #32]	; (8002690 <_ZL19MX_USART2_UART_Initv+0x58>)
 800266e:	2200      	movs	r2, #0
 8002670:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002672:	4807      	ldr	r0, [pc, #28]	; (8002690 <_ZL19MX_USART2_UART_Initv+0x58>)
 8002674:	f019 fa9c 	bl	801bbb0 <HAL_UART_Init>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	bf14      	ite	ne
 800267e:	2301      	movne	r3, #1
 8002680:	2300      	moveq	r3, #0
 8002682:	b2db      	uxtb	r3, r3
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <_ZL19MX_USART2_UART_Initv+0x54>
  {
    Error_Handler();
 8002688:	f001 fdd4 	bl	8004234 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800268c:	bf00      	nop
 800268e:	bd80      	pop	{r7, pc}
 8002690:	200003f4 	.word	0x200003f4
 8002694:	40004400 	.word	0x40004400

08002698 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800269e:	2300      	movs	r3, #0
 80026a0:	607b      	str	r3, [r7, #4]
 80026a2:	4b10      	ldr	r3, [pc, #64]	; (80026e4 <_ZL11MX_DMA_Initv+0x4c>)
 80026a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a6:	4a0f      	ldr	r2, [pc, #60]	; (80026e4 <_ZL11MX_DMA_Initv+0x4c>)
 80026a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80026ac:	6313      	str	r3, [r2, #48]	; 0x30
 80026ae:	4b0d      	ldr	r3, [pc, #52]	; (80026e4 <_ZL11MX_DMA_Initv+0x4c>)
 80026b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026b6:	607b      	str	r3, [r7, #4]
 80026b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80026ba:	2200      	movs	r2, #0
 80026bc:	2100      	movs	r1, #0
 80026be:	2011      	movs	r0, #17
 80026c0:	f014 f94d 	bl	801695e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80026c4:	2011      	movs	r0, #17
 80026c6:	f014 f966 	bl	8016996 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80026ca:	2200      	movs	r2, #0
 80026cc:	2100      	movs	r1, #0
 80026ce:	202f      	movs	r0, #47	; 0x2f
 80026d0:	f014 f945 	bl	801695e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80026d4:	202f      	movs	r0, #47	; 0x2f
 80026d6:	f014 f95e 	bl	8016996 <HAL_NVIC_EnableIRQ>

}
 80026da:	bf00      	nop
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	40023800 	.word	0x40023800

080026e8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b08a      	sub	sp, #40	; 0x28
 80026ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ee:	f107 0314 	add.w	r3, r7, #20
 80026f2:	2200      	movs	r2, #0
 80026f4:	601a      	str	r2, [r3, #0]
 80026f6:	605a      	str	r2, [r3, #4]
 80026f8:	609a      	str	r2, [r3, #8]
 80026fa:	60da      	str	r2, [r3, #12]
 80026fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026fe:	2300      	movs	r3, #0
 8002700:	613b      	str	r3, [r7, #16]
 8002702:	4b69      	ldr	r3, [pc, #420]	; (80028a8 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002706:	4a68      	ldr	r2, [pc, #416]	; (80028a8 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002708:	f043 0304 	orr.w	r3, r3, #4
 800270c:	6313      	str	r3, [r2, #48]	; 0x30
 800270e:	4b66      	ldr	r3, [pc, #408]	; (80028a8 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002712:	f003 0304 	and.w	r3, r3, #4
 8002716:	613b      	str	r3, [r7, #16]
 8002718:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800271a:	2300      	movs	r3, #0
 800271c:	60fb      	str	r3, [r7, #12]
 800271e:	4b62      	ldr	r3, [pc, #392]	; (80028a8 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002722:	4a61      	ldr	r2, [pc, #388]	; (80028a8 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002728:	6313      	str	r3, [r2, #48]	; 0x30
 800272a:	4b5f      	ldr	r3, [pc, #380]	; (80028a8 <_ZL12MX_GPIO_Initv+0x1c0>)
 800272c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002732:	60fb      	str	r3, [r7, #12]
 8002734:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002736:	2300      	movs	r3, #0
 8002738:	60bb      	str	r3, [r7, #8]
 800273a:	4b5b      	ldr	r3, [pc, #364]	; (80028a8 <_ZL12MX_GPIO_Initv+0x1c0>)
 800273c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273e:	4a5a      	ldr	r2, [pc, #360]	; (80028a8 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002740:	f043 0301 	orr.w	r3, r3, #1
 8002744:	6313      	str	r3, [r2, #48]	; 0x30
 8002746:	4b58      	ldr	r3, [pc, #352]	; (80028a8 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	60bb      	str	r3, [r7, #8]
 8002750:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002752:	2300      	movs	r3, #0
 8002754:	607b      	str	r3, [r7, #4]
 8002756:	4b54      	ldr	r3, [pc, #336]	; (80028a8 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275a:	4a53      	ldr	r2, [pc, #332]	; (80028a8 <_ZL12MX_GPIO_Initv+0x1c0>)
 800275c:	f043 0302 	orr.w	r3, r3, #2
 8002760:	6313      	str	r3, [r2, #48]	; 0x30
 8002762:	4b51      	ldr	r3, [pc, #324]	; (80028a8 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	607b      	str	r3, [r7, #4]
 800276c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800276e:	2300      	movs	r3, #0
 8002770:	603b      	str	r3, [r7, #0]
 8002772:	4b4d      	ldr	r3, [pc, #308]	; (80028a8 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002776:	4a4c      	ldr	r2, [pc, #304]	; (80028a8 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002778:	f043 0308 	orr.w	r3, r3, #8
 800277c:	6313      	str	r3, [r2, #48]	; 0x30
 800277e:	4b4a      	ldr	r3, [pc, #296]	; (80028a8 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002782:	f003 0308 	and.w	r3, r3, #8
 8002786:	603b      	str	r3, [r7, #0]
 8002788:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800278a:	2200      	movs	r2, #0
 800278c:	2120      	movs	r1, #32
 800278e:	4847      	ldr	r0, [pc, #284]	; (80028ac <_ZL12MX_GPIO_Initv+0x1c4>)
 8002790:	f014 fec8 	bl	8017524 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Mot_dir_Pin|PLamp_Green_Pin|PLamp_Blue_Pin|PLamp_Yellow_Pin, GPIO_PIN_RESET);
 8002794:	2200      	movs	r2, #0
 8002796:	f24e 0104 	movw	r1, #57348	; 0xe004
 800279a:	4845      	ldr	r0, [pc, #276]	; (80028b0 <_ZL12MX_GPIO_Initv+0x1c8>)
 800279c:	f014 fec2 	bl	8017524 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin EXTI11_EMER_Pin */
  GPIO_InitStruct.Pin = B1_Pin|EXTI11_EMER_Pin;
 80027a0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80027a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80027a6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80027aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ac:	2300      	movs	r3, #0
 80027ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027b0:	f107 0314 	add.w	r3, r7, #20
 80027b4:	4619      	mov	r1, r3
 80027b6:	483f      	ldr	r0, [pc, #252]	; (80028b4 <_ZL12MX_GPIO_Initv+0x1cc>)
 80027b8:	f014 fd18 	bl	80171ec <HAL_GPIO_Init>

  /*Configure GPIO pin : TIM2_CH1_VINCp_Pin */
  GPIO_InitStruct.Pin = TIM2_CH1_VINCp_Pin;
 80027bc:	2301      	movs	r3, #1
 80027be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c0:	2302      	movs	r3, #2
 80027c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c4:	2300      	movs	r3, #0
 80027c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c8:	2300      	movs	r3, #0
 80027ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80027cc:	2301      	movs	r3, #1
 80027ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TIM2_CH1_VINCp_GPIO_Port, &GPIO_InitStruct);
 80027d0:	f107 0314 	add.w	r3, r7, #20
 80027d4:	4619      	mov	r1, r3
 80027d6:	4835      	ldr	r0, [pc, #212]	; (80028ac <_ZL12MX_GPIO_Initv+0x1c4>)
 80027d8:	f014 fd08 	bl	80171ec <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80027dc:	2320      	movs	r3, #32
 80027de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027e0:	2301      	movs	r3, #1
 80027e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e4:	2300      	movs	r3, #0
 80027e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027e8:	2300      	movs	r3, #0
 80027ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80027ec:	f107 0314 	add.w	r3, r7, #20
 80027f0:	4619      	mov	r1, r3
 80027f2:	482e      	ldr	r0, [pc, #184]	; (80028ac <_ZL12MX_GPIO_Initv+0x1c4>)
 80027f4:	f014 fcfa 	bl	80171ec <HAL_GPIO_Init>

  /*Configure GPIO pin : Pwr_Sense_Pin */
  GPIO_InitStruct.Pin = Pwr_Sense_Pin;
 80027f8:	2302      	movs	r3, #2
 80027fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027fc:	2300      	movs	r3, #0
 80027fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002800:	2300      	movs	r3, #0
 8002802:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Pwr_Sense_GPIO_Port, &GPIO_InitStruct);
 8002804:	f107 0314 	add.w	r3, r7, #20
 8002808:	4619      	mov	r1, r3
 800280a:	4829      	ldr	r0, [pc, #164]	; (80028b0 <_ZL12MX_GPIO_Initv+0x1c8>)
 800280c:	f014 fcee 	bl	80171ec <HAL_GPIO_Init>

  /*Configure GPIO pins : Mot_dir_Pin PLamp_Green_Pin PLamp_Blue_Pin PLamp_Yellow_Pin */
  GPIO_InitStruct.Pin = Mot_dir_Pin|PLamp_Green_Pin|PLamp_Blue_Pin|PLamp_Yellow_Pin;
 8002810:	f24e 0304 	movw	r3, #57348	; 0xe004
 8002814:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002816:	2301      	movs	r3, #1
 8002818:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281a:	2300      	movs	r3, #0
 800281c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800281e:	2300      	movs	r3, #0
 8002820:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002822:	f107 0314 	add.w	r3, r7, #20
 8002826:	4619      	mov	r1, r3
 8002828:	4821      	ldr	r0, [pc, #132]	; (80028b0 <_ZL12MX_GPIO_Initv+0x1c8>)
 800282a:	f014 fcdf 	bl	80171ec <HAL_GPIO_Init>

  /*Configure GPIO pin : EXTI10_Stop_Pin */
  GPIO_InitStruct.Pin = EXTI10_Stop_Pin;
 800282e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002832:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002834:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002838:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283a:	2300      	movs	r3, #0
 800283c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EXTI10_Stop_GPIO_Port, &GPIO_InitStruct);
 800283e:	f107 0314 	add.w	r3, r7, #20
 8002842:	4619      	mov	r1, r3
 8002844:	481b      	ldr	r0, [pc, #108]	; (80028b4 <_ZL12MX_GPIO_Initv+0x1cc>)
 8002846:	f014 fcd1 	bl	80171ec <HAL_GPIO_Init>

  /*Configure GPIO pin : Stop_Sense_Pin */
  GPIO_InitStruct.Pin = Stop_Sense_Pin;
 800284a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800284e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002850:	2300      	movs	r3, #0
 8002852:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002854:	2300      	movs	r3, #0
 8002856:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Stop_Sense_GPIO_Port, &GPIO_InitStruct);
 8002858:	f107 0314 	add.w	r3, r7, #20
 800285c:	4619      	mov	r1, r3
 800285e:	4815      	ldr	r0, [pc, #84]	; (80028b4 <_ZL12MX_GPIO_Initv+0x1cc>)
 8002860:	f014 fcc4 	bl	80171ec <HAL_GPIO_Init>

  /*Configure GPIO pin : EXTI2_SetZero_Pin */
  GPIO_InitStruct.Pin = EXTI2_SetZero_Pin;
 8002864:	2304      	movs	r3, #4
 8002866:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002868:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800286c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286e:	2300      	movs	r3, #0
 8002870:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EXTI2_SetZero_GPIO_Port, &GPIO_InitStruct);
 8002872:	f107 0314 	add.w	r3, r7, #20
 8002876:	4619      	mov	r1, r3
 8002878:	480f      	ldr	r0, [pc, #60]	; (80028b8 <_ZL12MX_GPIO_Initv+0x1d0>)
 800287a:	f014 fcb7 	bl	80171ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800287e:	2200      	movs	r2, #0
 8002880:	2100      	movs	r1, #0
 8002882:	2008      	movs	r0, #8
 8002884:	f014 f86b 	bl	801695e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002888:	2008      	movs	r0, #8
 800288a:	f014 f884 	bl	8016996 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800288e:	2200      	movs	r2, #0
 8002890:	2100      	movs	r1, #0
 8002892:	2028      	movs	r0, #40	; 0x28
 8002894:	f014 f863 	bl	801695e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002898:	2028      	movs	r0, #40	; 0x28
 800289a:	f014 f87c 	bl	8016996 <HAL_NVIC_EnableIRQ>

}
 800289e:	bf00      	nop
 80028a0:	3728      	adds	r7, #40	; 0x28
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	40023800 	.word	0x40023800
 80028ac:	40020000 	.word	0x40020000
 80028b0:	40020400 	.word	0x40020400
 80028b4:	40020800 	.word	0x40020800
 80028b8:	40020c00 	.word	0x40020c00
 80028bc:	00000000 	.word	0x00000000

080028c0 <_Z13GrandStatumixv>:

/* USER CODE BEGIN 4 */
////////// [Grand State] //////////////////////// [Grand State] ////////////////////////
//======== [Grand State] ======================== [Grand State] ========================

void GrandStatumix(){
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0
	if (grandState != Ready){
 80028c4:	4ba0      	ldr	r3, [pc, #640]	; (8002b48 <_Z13GrandStatumixv+0x288>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d005      	beq.n	80028d8 <_Z13GrandStatumixv+0x18>
		HAL_GPIO_WritePin(PLamp_Green_GPIO_Port, PLamp_Green_Pin, GPIO_PIN_RESET);
 80028cc:	2200      	movs	r2, #0
 80028ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028d2:	489e      	ldr	r0, [pc, #632]	; (8002b4c <_Z13GrandStatumixv+0x28c>)
 80028d4:	f014 fe26 	bl	8017524 <HAL_GPIO_WritePin>
	}
	if (grandState != work || grandState != SetZeroBf || grandState != SetZeroGr){
 80028d8:	4b9b      	ldr	r3, [pc, #620]	; (8002b48 <_Z13GrandStatumixv+0x288>)
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d107      	bne.n	80028f0 <_Z13GrandStatumixv+0x30>
 80028e0:	4b99      	ldr	r3, [pc, #612]	; (8002b48 <_Z13GrandStatumixv+0x288>)
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	2b06      	cmp	r3, #6
 80028e6:	d103      	bne.n	80028f0 <_Z13GrandStatumixv+0x30>
 80028e8:	4b97      	ldr	r3, [pc, #604]	; (8002b48 <_Z13GrandStatumixv+0x288>)
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	2b05      	cmp	r3, #5
 80028ee:	d005      	beq.n	80028fc <_Z13GrandStatumixv+0x3c>
			HAL_GPIO_WritePin(PLamp_Blue_GPIO_Port, PLamp_Blue_Pin, GPIO_PIN_RESET);
 80028f0:	2200      	movs	r2, #0
 80028f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80028f6:	4895      	ldr	r0, [pc, #596]	; (8002b4c <_Z13GrandStatumixv+0x28c>)
 80028f8:	f014 fe14 	bl	8017524 <HAL_GPIO_WritePin>
		}
	if (grandState != stop || grandState != stopnd){
 80028fc:	4b92      	ldr	r3, [pc, #584]	; (8002b48 <_Z13GrandStatumixv+0x288>)
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	2b02      	cmp	r3, #2
 8002902:	d103      	bne.n	800290c <_Z13GrandStatumixv+0x4c>
 8002904:	4b90      	ldr	r3, [pc, #576]	; (8002b48 <_Z13GrandStatumixv+0x288>)
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	2b04      	cmp	r3, #4
 800290a:	d005      	beq.n	8002918 <_Z13GrandStatumixv+0x58>
				HAL_GPIO_WritePin(PLamp_Yellow_GPIO_Port, PLamp_Yellow_Pin, GPIO_PIN_RESET);
 800290c:	2200      	movs	r2, #0
 800290e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002912:	488e      	ldr	r0, [pc, #568]	; (8002b4c <_Z13GrandStatumixv+0x28c>)
 8002914:	f014 fe06 	bl	8017524 <HAL_GPIO_WritePin>
			}

	stop_sense = HAL_GPIO_ReadPin(Stop_Sense_GPIO_Port, Stop_Sense_Pin);
 8002918:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800291c:	488c      	ldr	r0, [pc, #560]	; (8002b50 <_Z13GrandStatumixv+0x290>)
 800291e:	f014 fde9 	bl	80174f4 <HAL_GPIO_ReadPin>
 8002922:	4603      	mov	r3, r0
 8002924:	461a      	mov	r2, r3
 8002926:	4b8b      	ldr	r3, [pc, #556]	; (8002b54 <_Z13GrandStatumixv+0x294>)
 8002928:	701a      	strb	r2, [r3, #0]
	pwr_sense = HAL_GPIO_ReadPin(Pwr_Sense_GPIO_Port, Pwr_Sense_Pin);
 800292a:	2102      	movs	r1, #2
 800292c:	4887      	ldr	r0, [pc, #540]	; (8002b4c <_Z13GrandStatumixv+0x28c>)
 800292e:	f014 fde1 	bl	80174f4 <HAL_GPIO_ReadPin>
 8002932:	4603      	mov	r3, r0
 8002934:	461a      	mov	r2, r3
 8002936:	4b88      	ldr	r3, [pc, #544]	; (8002b58 <_Z13GrandStatumixv+0x298>)
 8002938:	701a      	strb	r2, [r3, #0]

	switch(grandState){
 800293a:	4b83      	ldr	r3, [pc, #524]	; (8002b48 <_Z13GrandStatumixv+0x288>)
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	3b01      	subs	r3, #1
 8002940:	2b05      	cmp	r3, #5
 8002942:	d80f      	bhi.n	8002964 <_Z13GrandStatumixv+0xa4>
 8002944:	a201      	add	r2, pc, #4	; (adr r2, 800294c <_Z13GrandStatumixv+0x8c>)
 8002946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800294a:	bf00      	nop
 800294c:	08002999 	.word	0x08002999
 8002950:	08002c05 	.word	0x08002c05
 8002954:	08002c9b 	.word	0x08002c9b
 8002958:	08002c55 	.word	0x08002c55
 800295c:	08002b75 	.word	0x08002b75
 8002960:	080029df 	.word	0x080029df
	default:
	case Ready:
		HAL_GPIO_WritePin(PLamp_Green_GPIO_Port, PLamp_Green_Pin, GPIO_PIN_SET);
 8002964:	2201      	movs	r2, #1
 8002966:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800296a:	4878      	ldr	r0, [pc, #480]	; (8002b4c <_Z13GrandStatumixv+0x28c>)
 800296c:	f014 fdda 	bl	8017524 <HAL_GPIO_WritePin>
		//PWMOut = 1200;
		Unwrapping();
 8002970:	f000 fe62 	bl	8003638 <_Z10Unwrappingv>
		Kalmanfilter();
 8002974:	f000 ff14 	bl	80037a0 <_Z12Kalmanfilterv>
		//diffvelo();

		if (pwr_sense == 1){grandState = emer;}
 8002978:	4b77      	ldr	r3, [pc, #476]	; (8002b58 <_Z13GrandStatumixv+0x298>)
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d102      	bne.n	8002986 <_Z13GrandStatumixv+0xc6>
 8002980:	4b71      	ldr	r3, [pc, #452]	; (8002b48 <_Z13GrandStatumixv+0x288>)
 8002982:	2203      	movs	r2, #3
 8002984:	701a      	strb	r2, [r3, #0]
		if (stop_sense == 0){grandState = stop;}
 8002986:	4b73      	ldr	r3, [pc, #460]	; (8002b54 <_Z13GrandStatumixv+0x294>)
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	2b00      	cmp	r3, #0
 800298c:	f040 8194 	bne.w	8002cb8 <_Z13GrandStatumixv+0x3f8>
 8002990:	4b6d      	ldr	r3, [pc, #436]	; (8002b48 <_Z13GrandStatumixv+0x288>)
 8002992:	2202      	movs	r2, #2
 8002994:	701a      	strb	r2, [r3, #0]
		/// [From UART] run when get {HOME} , {RUN}
		//if (bluecounter != 0){grandState = work;} // can go work from ready only
	break;
 8002996:	e18f      	b.n	8002cb8 <_Z13GrandStatumixv+0x3f8>

	case work:
		HAL_GPIO_WritePin(PLamp_Blue_GPIO_Port, PLamp_Blue_Pin, GPIO_PIN_SET);
 8002998:	2201      	movs	r2, #1
 800299a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800299e:	486b      	ldr	r0, [pc, #428]	; (8002b4c <_Z13GrandStatumixv+0x28c>)
 80029a0:	f014 fdc0 	bl	8017524 <HAL_GPIO_WritePin>
		LaserTrajex_workflow();
 80029a4:	f000 f9b4 	bl	8002d10 <_Z20LaserTrajex_workflowv>

		if (pwr_sense == 1){
 80029a8:	4b6b      	ldr	r3, [pc, #428]	; (8002b58 <_Z13GrandStatumixv+0x298>)
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d106      	bne.n	80029be <_Z13GrandStatumixv+0xfe>
			grandState = emer;
 80029b0:	4b65      	ldr	r3, [pc, #404]	; (8002b48 <_Z13GrandStatumixv+0x288>)
 80029b2:	2203      	movs	r2, #3
 80029b4:	701a      	strb	r2, [r3, #0]
			u_contr = 0;
 80029b6:	4b69      	ldr	r3, [pc, #420]	; (8002b5c <_Z13GrandStatumixv+0x29c>)
 80029b8:	f04f 0200 	mov.w	r2, #0
 80029bc:	601a      	str	r2, [r3, #0]
		}
		if (stop_sense == 0){
 80029be:	4b65      	ldr	r3, [pc, #404]	; (8002b54 <_Z13GrandStatumixv+0x294>)
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	f040 817a 	bne.w	8002cbc <_Z13GrandStatumixv+0x3fc>
			PWMOut = 0;
 80029c8:	4b65      	ldr	r3, [pc, #404]	; (8002b60 <_Z13GrandStatumixv+0x2a0>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	801a      	strh	r2, [r3, #0]
			grandState = stopnd;
 80029ce:	4b5e      	ldr	r3, [pc, #376]	; (8002b48 <_Z13GrandStatumixv+0x288>)
 80029d0:	2204      	movs	r2, #4
 80029d2:	701a      	strb	r2, [r3, #0]
			u_contr = 0;
 80029d4:	4b61      	ldr	r3, [pc, #388]	; (8002b5c <_Z13GrandStatumixv+0x29c>)
 80029d6:	f04f 0200 	mov.w	r2, #0
 80029da:	601a      	str	r2, [r3, #0]
		}
	break;
 80029dc:	e16e      	b.n	8002cbc <_Z13GrandStatumixv+0x3fc>

	case SetZeroBf:
		static uint8_t counter_Z = 0;
		//// Cat cat set zero
		HAL_GPIO_WritePin(PLamp_Blue_GPIO_Port, PLamp_Blue_Pin, GPIO_PIN_SET);
 80029de:	2201      	movs	r2, #1
 80029e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80029e4:	4859      	ldr	r0, [pc, #356]	; (8002b4c <_Z13GrandStatumixv+0x28c>)
 80029e6:	f014 fd9d 	bl	8017524 <HAL_GPIO_WritePin>

		//PWMOut = 2500;
		//mot_dirctn = 0;
		Unwrapping();
 80029ea:	f000 fe25 	bl	8003638 <_Z10Unwrappingv>
		Kalmanfilter();
 80029ee:	f000 fed7 	bl	80037a0 <_Z12Kalmanfilterv>

		if(KalP >= 2.00){
 80029f2:	4b5c      	ldr	r3, [pc, #368]	; (8002b64 <_Z13GrandStatumixv+0x2a4>)
 80029f4:	edd3 7a00 	vldr	s15, [r3]
 80029f8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80029fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a04:	db07      	blt.n	8002a16 <_Z13GrandStatumixv+0x156>
			PWMOut = 4800;
 8002a06:	4b56      	ldr	r3, [pc, #344]	; (8002b60 <_Z13GrandStatumixv+0x2a0>)
 8002a08:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8002a0c:	801a      	strh	r2, [r3, #0]
			mot_dirctn = 0;
 8002a0e:	4b56      	ldr	r3, [pc, #344]	; (8002b68 <_Z13GrandStatumixv+0x2a8>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	701a      	strb	r2, [r3, #0]
 8002a14:	e072      	b.n	8002afc <_Z13GrandStatumixv+0x23c>
		}else if (2.00 >= KalP && KalP >= 1.00) {
 8002a16:	4b53      	ldr	r3, [pc, #332]	; (8002b64 <_Z13GrandStatumixv+0x2a4>)
 8002a18:	edd3 7a00 	vldr	s15, [r3]
 8002a1c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002a20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a28:	d811      	bhi.n	8002a4e <_Z13GrandStatumixv+0x18e>
 8002a2a:	4b4e      	ldr	r3, [pc, #312]	; (8002b64 <_Z13GrandStatumixv+0x2a4>)
 8002a2c:	edd3 7a00 	vldr	s15, [r3]
 8002a30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002a34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a3c:	db07      	blt.n	8002a4e <_Z13GrandStatumixv+0x18e>
					PWMOut = 2400;
 8002a3e:	4b48      	ldr	r3, [pc, #288]	; (8002b60 <_Z13GrandStatumixv+0x2a0>)
 8002a40:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8002a44:	801a      	strh	r2, [r3, #0]
					mot_dirctn = 0;
 8002a46:	4b48      	ldr	r3, [pc, #288]	; (8002b68 <_Z13GrandStatumixv+0x2a8>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	701a      	strb	r2, [r3, #0]
 8002a4c:	e056      	b.n	8002afc <_Z13GrandStatumixv+0x23c>
		}else if (1.00 >= KalP && KalP >= 0.2) {
 8002a4e:	4b45      	ldr	r3, [pc, #276]	; (8002b64 <_Z13GrandStatumixv+0x2a4>)
 8002a50:	edd3 7a00 	vldr	s15, [r3]
 8002a54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002a58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a60:	d814      	bhi.n	8002a8c <_Z13GrandStatumixv+0x1cc>
 8002a62:	4b40      	ldr	r3, [pc, #256]	; (8002b64 <_Z13GrandStatumixv+0x2a4>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7fd fd6e 	bl	8000548 <__aeabi_f2d>
 8002a6c:	a332      	add	r3, pc, #200	; (adr r3, 8002b38 <_Z13GrandStatumixv+0x278>)
 8002a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a72:	f7fe f847 	bl	8000b04 <__aeabi_dcmpge>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d007      	beq.n	8002a8c <_Z13GrandStatumixv+0x1cc>
			PWMOut = 1200;
 8002a7c:	4b38      	ldr	r3, [pc, #224]	; (8002b60 <_Z13GrandStatumixv+0x2a0>)
 8002a7e:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8002a82:	801a      	strh	r2, [r3, #0]
			mot_dirctn = 0;
 8002a84:	4b38      	ldr	r3, [pc, #224]	; (8002b68 <_Z13GrandStatumixv+0x2a8>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	701a      	strb	r2, [r3, #0]
 8002a8a:	e037      	b.n	8002afc <_Z13GrandStatumixv+0x23c>
		}else if (0.2 >= KalP && KalP >= 0.006) {
 8002a8c:	4b35      	ldr	r3, [pc, #212]	; (8002b64 <_Z13GrandStatumixv+0x2a4>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7fd fd59 	bl	8000548 <__aeabi_f2d>
 8002a96:	a328      	add	r3, pc, #160	; (adr r3, 8002b38 <_Z13GrandStatumixv+0x278>)
 8002a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a9c:	f7fe f828 	bl	8000af0 <__aeabi_dcmple>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d014      	beq.n	8002ad0 <_Z13GrandStatumixv+0x210>
 8002aa6:	4b2f      	ldr	r3, [pc, #188]	; (8002b64 <_Z13GrandStatumixv+0x2a4>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7fd fd4c 	bl	8000548 <__aeabi_f2d>
 8002ab0:	a323      	add	r3, pc, #140	; (adr r3, 8002b40 <_Z13GrandStatumixv+0x280>)
 8002ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab6:	f7fe f825 	bl	8000b04 <__aeabi_dcmpge>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d007      	beq.n	8002ad0 <_Z13GrandStatumixv+0x210>
			PWMOut = 950;
 8002ac0:	4b27      	ldr	r3, [pc, #156]	; (8002b60 <_Z13GrandStatumixv+0x2a0>)
 8002ac2:	f240 32b6 	movw	r2, #950	; 0x3b6
 8002ac6:	801a      	strh	r2, [r3, #0]
			mot_dirctn = 0;
 8002ac8:	4b27      	ldr	r3, [pc, #156]	; (8002b68 <_Z13GrandStatumixv+0x2a8>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	701a      	strb	r2, [r3, #0]
 8002ace:	e015      	b.n	8002afc <_Z13GrandStatumixv+0x23c>
		}else if (1000 <= BinPosXI && BinPosXI <= 1023) {
 8002ad0:	4b26      	ldr	r3, [pc, #152]	; (8002b6c <_Z13GrandStatumixv+0x2ac>)
 8002ad2:	881b      	ldrh	r3, [r3, #0]
 8002ad4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ad8:	d30c      	bcc.n	8002af4 <_Z13GrandStatumixv+0x234>
 8002ada:	4b24      	ldr	r3, [pc, #144]	; (8002b6c <_Z13GrandStatumixv+0x2ac>)
 8002adc:	881b      	ldrh	r3, [r3, #0]
 8002ade:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ae2:	d207      	bcs.n	8002af4 <_Z13GrandStatumixv+0x234>
				PWMOut = 950;
 8002ae4:	4b1e      	ldr	r3, [pc, #120]	; (8002b60 <_Z13GrandStatumixv+0x2a0>)
 8002ae6:	f240 32b6 	movw	r2, #950	; 0x3b6
 8002aea:	801a      	strh	r2, [r3, #0]
				mot_dirctn = 1;
 8002aec:	4b1e      	ldr	r3, [pc, #120]	; (8002b68 <_Z13GrandStatumixv+0x2a8>)
 8002aee:	2201      	movs	r2, #1
 8002af0:	701a      	strb	r2, [r3, #0]
 8002af2:	e003      	b.n	8002afc <_Z13GrandStatumixv+0x23c>
			}
		else{PWMOut = PWMOut;}
 8002af4:	4b1a      	ldr	r3, [pc, #104]	; (8002b60 <_Z13GrandStatumixv+0x2a0>)
 8002af6:	881a      	ldrh	r2, [r3, #0]
 8002af8:	4b19      	ldr	r3, [pc, #100]	; (8002b60 <_Z13GrandStatumixv+0x2a0>)
 8002afa:	801a      	strh	r2, [r3, #0]

		if(BinPosXI == 0){
 8002afc:	4b1b      	ldr	r3, [pc, #108]	; (8002b6c <_Z13GrandStatumixv+0x2ac>)
 8002afe:	881b      	ldrh	r3, [r3, #0]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d108      	bne.n	8002b16 <_Z13GrandStatumixv+0x256>
			PWMOut = 0;
 8002b04:	4b16      	ldr	r3, [pc, #88]	; (8002b60 <_Z13GrandStatumixv+0x2a0>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	801a      	strh	r2, [r3, #0]
			counter_Z++;
 8002b0a:	4b19      	ldr	r3, [pc, #100]	; (8002b70 <_Z13GrandStatumixv+0x2b0>)
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	3301      	adds	r3, #1
 8002b10:	b2da      	uxtb	r2, r3
 8002b12:	4b17      	ldr	r3, [pc, #92]	; (8002b70 <_Z13GrandStatumixv+0x2b0>)
 8002b14:	701a      	strb	r2, [r3, #0]
		}
		if(counter_Z >= 100){
 8002b16:	4b16      	ldr	r3, [pc, #88]	; (8002b70 <_Z13GrandStatumixv+0x2b0>)
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	2b63      	cmp	r3, #99	; 0x63
 8002b1c:	f240 80d0 	bls.w	8002cc0 <_Z13GrandStatumixv+0x400>
			counter_Z = 0;
 8002b20:	4b13      	ldr	r3, [pc, #76]	; (8002b70 <_Z13GrandStatumixv+0x2b0>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	701a      	strb	r2, [r3, #0]
			PWMOut = 0;
 8002b26:	4b0e      	ldr	r3, [pc, #56]	; (8002b60 <_Z13GrandStatumixv+0x2a0>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	801a      	strh	r2, [r3, #0]
			fn_Uart();
 8002b2c:	f7fe ff1c 	bl	8001968 <_Z7fn_Uartv>
			grandState = Ready;
 8002b30:	4b05      	ldr	r3, [pc, #20]	; (8002b48 <_Z13GrandStatumixv+0x288>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	701a      	strb	r2, [r3, #0]
//			position_order = 0;
//			positionlog[position_order] = 0.00; // 0.000613 - 0.0122 => 1-2/1024
//			Velocity = 7.0;
//			grandState = SetZeroGr;
//		}
		break;
 8002b36:	e0c3      	b.n	8002cc0 <_Z13GrandStatumixv+0x400>
 8002b38:	9999999a 	.word	0x9999999a
 8002b3c:	3fc99999 	.word	0x3fc99999
 8002b40:	bc6a7efa 	.word	0xbc6a7efa
 8002b44:	3f789374 	.word	0x3f789374
 8002b48:	200004fc 	.word	0x200004fc
 8002b4c:	40020400 	.word	0x40020400
 8002b50:	40020800 	.word	0x40020800
 8002b54:	200004fe 	.word	0x200004fe
 8002b58:	200004fd 	.word	0x200004fd
 8002b5c:	20000730 	.word	0x20000730
 8002b60:	20000574 	.word	0x20000574
 8002b64:	200006c4 	.word	0x200006c4
 8002b68:	2000057c 	.word	0x2000057c
 8002b6c:	20000570 	.word	0x20000570
 8002b70:	200007de 	.word	0x200007de

	case SetZeroGr:
		HAL_GPIO_WritePin(PLamp_Blue_GPIO_Port, PLamp_Blue_Pin, GPIO_PIN_SET);
 8002b74:	2201      	movs	r2, #1
 8002b76:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002b7a:	4857      	ldr	r0, [pc, #348]	; (8002cd8 <_Z13GrandStatumixv+0x418>)
 8002b7c:	f014 fcd2 	bl	8017524 <HAL_GPIO_WritePin>

			////////>>>SetZeroStp/////////////////
		Unwrapping();
 8002b80:	f000 fd5a 	bl	8003638 <_Z10Unwrappingv>

		 if(flagNewpos==0){
 8002b84:	4b55      	ldr	r3, [pc, #340]	; (8002cdc <_Z13GrandStatumixv+0x41c>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d111      	bne.n	8002bb0 <_Z13GrandStatumixv+0x2f0>
			Currentpos = CurrentEn;
 8002b8c:	4b54      	ldr	r3, [pc, #336]	; (8002ce0 <_Z13GrandStatumixv+0x420>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a54      	ldr	r2, [pc, #336]	; (8002ce4 <_Z13GrandStatumixv+0x424>)
 8002b92:	6013      	str	r3, [r2, #0]
			Distance = Finalposition - Currentpos;
 8002b94:	4b54      	ldr	r3, [pc, #336]	; (8002ce8 <_Z13GrandStatumixv+0x428>)
 8002b96:	ed93 7a00 	vldr	s14, [r3]
 8002b9a:	4b52      	ldr	r3, [pc, #328]	; (8002ce4 <_Z13GrandStatumixv+0x424>)
 8002b9c:	edd3 7a00 	vldr	s15, [r3]
 8002ba0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ba4:	4b51      	ldr	r3, [pc, #324]	; (8002cec <_Z13GrandStatumixv+0x42c>)
 8002ba6:	edc3 7a00 	vstr	s15, [r3]
			flagNewpos = 1;
 8002baa:	4b4c      	ldr	r3, [pc, #304]	; (8002cdc <_Z13GrandStatumixv+0x41c>)
 8002bac:	2201      	movs	r2, #1
 8002bae:	601a      	str	r2, [r3, #0]
		 }
		Trajectory();
 8002bb0:	f000 f9da 	bl	8002f68 <_Z10Trajectoryv>
		Kalmanfilter();
 8002bb4:	f000 fdf4 	bl	80037a0 <_Z12Kalmanfilterv>
		controlloop();
 8002bb8:	f001 f84e 	bl	8003c58 <_Z11controlloopv>

		//// <> Zero finish
		if (flag_finishTra == 1){
 8002bbc:	4b4c      	ldr	r3, [pc, #304]	; (8002cf0 <_Z13GrandStatumixv+0x430>)
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d109      	bne.n	8002bd8 <_Z13GrandStatumixv+0x318>
			flag_finishTra = 0;
 8002bc4:	4b4a      	ldr	r3, [pc, #296]	; (8002cf0 <_Z13GrandStatumixv+0x430>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	701a      	strb	r2, [r3, #0]
			//HAL_UART_Transmit(&huart2, (uint8_t*)temp_f_ack2, 2, 100);
			fn_Uart();
 8002bca:	f7fe fecd 	bl	8001968 <_Z7fn_Uartv>
			grandState = Ready;
 8002bce:	4b49      	ldr	r3, [pc, #292]	; (8002cf4 <_Z13GrandStatumixv+0x434>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	701a      	strb	r2, [r3, #0]
			ResetParam();
 8002bd4:	f000 f97e 	bl	8002ed4 <_Z10ResetParamv>
		}
		////////<<<SetZeroStp/////////////////
//		}

		if (pwr_sense == 1){grandState = emer;}
 8002bd8:	4b47      	ldr	r3, [pc, #284]	; (8002cf8 <_Z13GrandStatumixv+0x438>)
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d102      	bne.n	8002be6 <_Z13GrandStatumixv+0x326>
 8002be0:	4b44      	ldr	r3, [pc, #272]	; (8002cf4 <_Z13GrandStatumixv+0x434>)
 8002be2:	2203      	movs	r2, #3
 8002be4:	701a      	strb	r2, [r3, #0]
		if (stop_sense == 0){
 8002be6:	4b45      	ldr	r3, [pc, #276]	; (8002cfc <_Z13GrandStatumixv+0x43c>)
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d16a      	bne.n	8002cc4 <_Z13GrandStatumixv+0x404>
					PWMOut = 0;
 8002bee:	4b44      	ldr	r3, [pc, #272]	; (8002d00 <_Z13GrandStatumixv+0x440>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	801a      	strh	r2, [r3, #0]
					grandState = stopnd;
 8002bf4:	4b3f      	ldr	r3, [pc, #252]	; (8002cf4 <_Z13GrandStatumixv+0x434>)
 8002bf6:	2204      	movs	r2, #4
 8002bf8:	701a      	strb	r2, [r3, #0]
					u_contr = 0;
 8002bfa:	4b42      	ldr	r3, [pc, #264]	; (8002d04 <_Z13GrandStatumixv+0x444>)
 8002bfc:	f04f 0200 	mov.w	r2, #0
 8002c00:	601a      	str	r2, [r3, #0]
				}
	break;
 8002c02:	e05f      	b.n	8002cc4 <_Z13GrandStatumixv+0x404>

	case stop:
		HAL_GPIO_WritePin(PLamp_Yellow_GPIO_Port, PLamp_Yellow_Pin, GPIO_PIN_SET);
 8002c04:	2201      	movs	r2, #1
 8002c06:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c0a:	4833      	ldr	r0, [pc, #204]	; (8002cd8 <_Z13GrandStatumixv+0x418>)
 8002c0c:	f014 fc8a 	bl	8017524 <HAL_GPIO_WritePin>
		PWMOut = 0;
 8002c10:	4b3b      	ldr	r3, [pc, #236]	; (8002d00 <_Z13GrandStatumixv+0x440>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	801a      	strh	r2, [r3, #0]

		X(1,0)=0;
 8002c16:	2200      	movs	r2, #0
 8002c18:	2101      	movs	r1, #1
 8002c1a:	483b      	ldr	r0, [pc, #236]	; (8002d08 <_Z13GrandStatumixv+0x448>)
 8002c1c:	f001 fd4e 	bl	80046bc <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>
 8002c20:	4603      	mov	r3, r0
 8002c22:	f04f 0200 	mov.w	r2, #0
 8002c26:	601a      	str	r2, [r3, #0]
		KalV = X(1,0);
 8002c28:	2200      	movs	r2, #0
 8002c2a:	2101      	movs	r1, #1
 8002c2c:	4836      	ldr	r0, [pc, #216]	; (8002d08 <_Z13GrandStatumixv+0x448>)
 8002c2e:	f001 fd45 	bl	80046bc <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>
 8002c32:	4603      	mov	r3, r0
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a35      	ldr	r2, [pc, #212]	; (8002d0c <_Z13GrandStatumixv+0x44c>)
 8002c38:	6013      	str	r3, [r2, #0]

		if (stop_sense == 1){
 8002c3a:	4b30      	ldr	r3, [pc, #192]	; (8002cfc <_Z13GrandStatumixv+0x43c>)
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d142      	bne.n	8002cc8 <_Z13GrandStatumixv+0x408>
			grandState = Ready;
 8002c42:	4b2c      	ldr	r3, [pc, #176]	; (8002cf4 <_Z13GrandStatumixv+0x434>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	701a      	strb	r2, [r3, #0]
			IOExpenderInit();
 8002c48:	f001 f936 	bl	8003eb8 <_Z14IOExpenderInitv>
			HAL_Delay(100);
 8002c4c:	2064      	movs	r0, #100	; 0x64
 8002c4e:	f013 fd87 	bl	8016760 <HAL_Delay>
			//== rotation change for dummy test
			//mot_dirctn++; mot_dirctn%=2;
		}
	break;
 8002c52:	e039      	b.n	8002cc8 <_Z13GrandStatumixv+0x408>

	case stopnd:
			HAL_GPIO_WritePin(PLamp_Yellow_GPIO_Port, PLamp_Yellow_Pin, GPIO_PIN_SET);
 8002c54:	2201      	movs	r2, #1
 8002c56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c5a:	481f      	ldr	r0, [pc, #124]	; (8002cd8 <_Z13GrandStatumixv+0x418>)
 8002c5c:	f014 fc62 	bl	8017524 <HAL_GPIO_WritePin>
			PWMOut = 0;
 8002c60:	4b27      	ldr	r3, [pc, #156]	; (8002d00 <_Z13GrandStatumixv+0x440>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	801a      	strh	r2, [r3, #0]
			//Integral = 0;
			X(1,0)=0;
 8002c66:	2200      	movs	r2, #0
 8002c68:	2101      	movs	r1, #1
 8002c6a:	4827      	ldr	r0, [pc, #156]	; (8002d08 <_Z13GrandStatumixv+0x448>)
 8002c6c:	f001 fd26 	bl	80046bc <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>
 8002c70:	4603      	mov	r3, r0
 8002c72:	f04f 0200 	mov.w	r2, #0
 8002c76:	601a      	str	r2, [r3, #0]
			KalV = X(1,0);
 8002c78:	2200      	movs	r2, #0
 8002c7a:	2101      	movs	r1, #1
 8002c7c:	4822      	ldr	r0, [pc, #136]	; (8002d08 <_Z13GrandStatumixv+0x448>)
 8002c7e:	f001 fd1d 	bl	80046bc <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>
 8002c82:	4603      	mov	r3, r0
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a21      	ldr	r2, [pc, #132]	; (8002d0c <_Z13GrandStatumixv+0x44c>)
 8002c88:	6013      	str	r3, [r2, #0]


			if (stop_sense == 1){
 8002c8a:	4b1c      	ldr	r3, [pc, #112]	; (8002cfc <_Z13GrandStatumixv+0x43c>)
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d11c      	bne.n	8002ccc <_Z13GrandStatumixv+0x40c>
				grandState = work;
 8002c92:	4b18      	ldr	r3, [pc, #96]	; (8002cf4 <_Z13GrandStatumixv+0x434>)
 8002c94:	2201      	movs	r2, #1
 8002c96:	701a      	strb	r2, [r3, #0]
			}
		break;
 8002c98:	e018      	b.n	8002ccc <_Z13GrandStatumixv+0x40c>

	case emer:
		ResetParam();
 8002c9a:	f000 f91b 	bl	8002ed4 <_Z10ResetParamv>
		// Reset every variables at control
		if (pwr_sense == 0){
 8002c9e:	4b16      	ldr	r3, [pc, #88]	; (8002cf8 <_Z13GrandStatumixv+0x438>)
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d114      	bne.n	8002cd0 <_Z13GrandStatumixv+0x410>
			grandState = Ready;
 8002ca6:	4b13      	ldr	r3, [pc, #76]	; (8002cf4 <_Z13GrandStatumixv+0x434>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	701a      	strb	r2, [r3, #0]
			HAL_Delay(250); // wait for emer release shock power
 8002cac:	20fa      	movs	r0, #250	; 0xfa
 8002cae:	f013 fd57 	bl	8016760 <HAL_Delay>
			IOExpenderInit();
 8002cb2:	f001 f901 	bl	8003eb8 <_Z14IOExpenderInitv>

		}
	break;
 8002cb6:	e00b      	b.n	8002cd0 <_Z13GrandStatumixv+0x410>
	break;
 8002cb8:	bf00      	nop
 8002cba:	e00a      	b.n	8002cd2 <_Z13GrandStatumixv+0x412>
	break;
 8002cbc:	bf00      	nop
 8002cbe:	e008      	b.n	8002cd2 <_Z13GrandStatumixv+0x412>
		break;
 8002cc0:	bf00      	nop
 8002cc2:	e006      	b.n	8002cd2 <_Z13GrandStatumixv+0x412>
	break;
 8002cc4:	bf00      	nop
 8002cc6:	e004      	b.n	8002cd2 <_Z13GrandStatumixv+0x412>
	break;
 8002cc8:	bf00      	nop
 8002cca:	e002      	b.n	8002cd2 <_Z13GrandStatumixv+0x412>
		break;
 8002ccc:	bf00      	nop
 8002cce:	e000      	b.n	8002cd2 <_Z13GrandStatumixv+0x412>
	break;
 8002cd0:	bf00      	nop
	}
}
 8002cd2:	bf00      	nop
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	40020400 	.word	0x40020400
 8002cdc:	200005ac 	.word	0x200005ac
 8002ce0:	200006e4 	.word	0x200006e4
 8002ce4:	200005a8 	.word	0x200005a8
 8002ce8:	20000580 	.word	0x20000580
 8002cec:	20000584 	.word	0x20000584
 8002cf0:	20000504 	.word	0x20000504
 8002cf4:	200004fc 	.word	0x200004fc
 8002cf8:	200004fd 	.word	0x200004fd
 8002cfc:	200004fe 	.word	0x200004fe
 8002d00:	20000574 	.word	0x20000574
 8002d04:	20000730 	.word	0x20000730
 8002d08:	200006a0 	.word	0x200006a0
 8002d0c:	200006c8 	.word	0x200006c8

08002d10 <_Z20LaserTrajex_workflowv>:

void LaserTrajex_workflow(){ // 1, n loop go to shoot laser run
 8002d10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d14:	b082      	sub	sp, #8
 8002d16:	af00      	add	r7, sp, #0
	// -1 means no position value
	//if (Finalposition == -1){flag_LasxTraj = 0;}
	static uint16_t timeouttt = 5050;
	//static uint8_t missst = 0;

	switch(flag_LasxTraj){
 8002d18:	4b5d      	ldr	r3, [pc, #372]	; (8002e90 <_Z20LaserTrajex_workflowv+0x180>)
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d012      	beq.n	8002d46 <_Z20LaserTrajex_workflowv+0x36>
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d05a      	beq.n	8002dda <_Z20LaserTrajex_workflowv+0xca>
	default:
	case 0: // wait go flag
		////////// raise flag to 1 if need to drive the state

		if (grandState == work){ //flag_LasxTraj != 0 ||
 8002d24:	4b5b      	ldr	r3, [pc, #364]	; (8002e94 <_Z20LaserTrajex_workflowv+0x184>)
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	f040 80a6 	bne.w	8002e7a <_Z20LaserTrajex_workflowv+0x16a>
			flag_LasxTraj = 1;
 8002d2e:	4b58      	ldr	r3, [pc, #352]	; (8002e90 <_Z20LaserTrajex_workflowv+0x180>)
 8002d30:	2201      	movs	r2, #1
 8002d32:	701a      	strb	r2, [r3, #0]
			Finalposition = positionlog[position_order]; // receive in rad
 8002d34:	4b58      	ldr	r3, [pc, #352]	; (8002e98 <_Z20LaserTrajex_workflowv+0x188>)
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	4a58      	ldr	r2, [pc, #352]	; (8002e9c <_Z20LaserTrajex_workflowv+0x18c>)
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	4413      	add	r3, r2
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a57      	ldr	r2, [pc, #348]	; (8002ea0 <_Z20LaserTrajex_workflowv+0x190>)
 8002d42:	6013      	str	r3, [r2, #0]

		}
		break;
 8002d44:	e099      	b.n	8002e7a <_Z20LaserTrajex_workflowv+0x16a>
	case 1: //-------------traject-----
		//====flag_LasxTraj will trig trajex in while;
		//////// raise flag to 2 and flag_efftActi = 1; if reach the target the position

		Unwrapping();
 8002d46:	f000 fc77 	bl	8003638 <_Z10Unwrappingv>
		 if(flagNewpos == 0){
 8002d4a:	4b56      	ldr	r3, [pc, #344]	; (8002ea4 <_Z20LaserTrajex_workflowv+0x194>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d114      	bne.n	8002d7c <_Z20LaserTrajex_workflowv+0x6c>
			Currentpos = CurrentEn;
 8002d52:	4b55      	ldr	r3, [pc, #340]	; (8002ea8 <_Z20LaserTrajex_workflowv+0x198>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a55      	ldr	r2, [pc, #340]	; (8002eac <_Z20LaserTrajex_workflowv+0x19c>)
 8002d58:	6013      	str	r3, [r2, #0]
			//Finalposition = 300*0.006136; // Put goal position here in rad
			Distance = Finalposition - Currentpos;
 8002d5a:	4b51      	ldr	r3, [pc, #324]	; (8002ea0 <_Z20LaserTrajex_workflowv+0x190>)
 8002d5c:	ed93 7a00 	vldr	s14, [r3]
 8002d60:	4b52      	ldr	r3, [pc, #328]	; (8002eac <_Z20LaserTrajex_workflowv+0x19c>)
 8002d62:	edd3 7a00 	vldr	s15, [r3]
 8002d66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d6a:	4b51      	ldr	r3, [pc, #324]	; (8002eb0 <_Z20LaserTrajex_workflowv+0x1a0>)
 8002d6c:	edc3 7a00 	vstr	s15, [r3]
			flagNewpos = 1;
 8002d70:	4b4c      	ldr	r3, [pc, #304]	; (8002ea4 <_Z20LaserTrajex_workflowv+0x194>)
 8002d72:	2201      	movs	r2, #1
 8002d74:	601a      	str	r2, [r3, #0]
			check = 0;
 8002d76:	4b4f      	ldr	r3, [pc, #316]	; (8002eb4 <_Z20LaserTrajex_workflowv+0x1a4>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	701a      	strb	r2, [r3, #0]
		 }
		Trajectory();
 8002d7c:	f000 f8f4 	bl	8002f68 <_Z10Trajectoryv>
		Kalmanfilter();
 8002d80:	f000 fd0e 	bl	80037a0 <_Z12Kalmanfilterv>
		controlloop();
 8002d84:	f000 ff68 	bl	8003c58 <_Z11controlloopv>

		//HAL_Delay(2500); // Simulate workload
		//flag_finishTra = 1;

		if(flag_finishTra == 1){
 8002d88:	4b4b      	ldr	r3, [pc, #300]	; (8002eb8 <_Z20LaserTrajex_workflowv+0x1a8>)
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d176      	bne.n	8002e7e <_Z20LaserTrajex_workflowv+0x16e>
			flag_finishTra = 0;
 8002d90:	4b49      	ldr	r3, [pc, #292]	; (8002eb8 <_Z20LaserTrajex_workflowv+0x1a8>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	701a      	strb	r2, [r3, #0]

			flag_efftActi = 1;
 8002d96:	4b49      	ldr	r3, [pc, #292]	; (8002ebc <_Z20LaserTrajex_workflowv+0x1ac>)
 8002d98:	2201      	movs	r2, #1
 8002d9a:	701a      	strb	r2, [r3, #0]
			flag_LasxTraj = 2;
 8002d9c:	4b3c      	ldr	r3, [pc, #240]	; (8002e90 <_Z20LaserTrajex_workflowv+0x180>)
 8002d9e:	2202      	movs	r2, #2
 8002da0:	701a      	strb	r2, [r3, #0]

			timeout_efft = millis();
 8002da2:	f001 fa11 	bl	80041c8 <_Z6millisv>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2200      	movs	r2, #0
 8002daa:	603b      	str	r3, [r7, #0]
 8002dac:	607a      	str	r2, [r7, #4]
 8002dae:	4b44      	ldr	r3, [pc, #272]	; (8002ec0 <_Z20LaserTrajex_workflowv+0x1b0>)
 8002db0:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002db4:	e9c3 1200 	strd	r1, r2, [r3]

			if(flag_efftDis == 1){
 8002db8:	4b42      	ldr	r3, [pc, #264]	; (8002ec4 <_Z20LaserTrajex_workflowv+0x1b4>)
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d107      	bne.n	8002dd0 <_Z20LaserTrajex_workflowv+0xc0>
				timeouttt = 500;
 8002dc0:	4b41      	ldr	r3, [pc, #260]	; (8002ec8 <_Z20LaserTrajex_workflowv+0x1b8>)
 8002dc2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002dc6:	801a      	strh	r2, [r3, #0]
				efft_status = 0x78;}
 8002dc8:	4b40      	ldr	r3, [pc, #256]	; (8002ecc <_Z20LaserTrajex_workflowv+0x1bc>)
 8002dca:	2278      	movs	r2, #120	; 0x78
 8002dcc:	701a      	strb	r2, [r3, #0]
			else{timeouttt = 5050;}

		}
		break;
 8002dce:	e056      	b.n	8002e7e <_Z20LaserTrajex_workflowv+0x16e>
			else{timeouttt = 5050;}
 8002dd0:	4b3d      	ldr	r3, [pc, #244]	; (8002ec8 <_Z20LaserTrajex_workflowv+0x1b8>)
 8002dd2:	f241 32ba 	movw	r2, #5050	; 0x13ba
 8002dd6:	801a      	strh	r2, [r3, #0]
		break;
 8002dd8:	e051      	b.n	8002e7e <_Z20LaserTrajex_workflowv+0x16e>
	case 2: //---------------Laserwork--------------
		trig_efftRead = 1;
 8002dda:	4b3d      	ldr	r3, [pc, #244]	; (8002ed0 <_Z20LaserTrajex_workflowv+0x1c0>)
 8002ddc:	2201      	movs	r2, #1
 8002dde:	701a      	strb	r2, [r3, #0]
		// if laser finished work or tomeout and not too fast shift state
		//if((efft_status == 0x78 || millis() - timeout_efft >= timeouttt) && millis() - timeout_efft >= 1000){
		//// force encoder to work
		//if(efft_status == 0x78 || millis() - timeout_efft >= timeouttt){
		////bcheat force
		if(millis() - timeout_efft >= timeouttt){
 8002de0:	f001 f9f2 	bl	80041c8 <_Z6millisv>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2200      	movs	r2, #0
 8002de8:	469a      	mov	sl, r3
 8002dea:	4693      	mov	fp, r2
 8002dec:	4b34      	ldr	r3, [pc, #208]	; (8002ec0 <_Z20LaserTrajex_workflowv+0x1b0>)
 8002dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df2:	ebba 0402 	subs.w	r4, sl, r2
 8002df6:	eb6b 0503 	sbc.w	r5, fp, r3
 8002dfa:	4b33      	ldr	r3, [pc, #204]	; (8002ec8 <_Z20LaserTrajex_workflowv+0x1b8>)
 8002dfc:	881b      	ldrh	r3, [r3, #0]
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	2200      	movs	r2, #0
 8002e02:	4698      	mov	r8, r3
 8002e04:	4691      	mov	r9, r2
 8002e06:	4544      	cmp	r4, r8
 8002e08:	eb75 0309 	sbcs.w	r3, r5, r9
 8002e0c:	bf2c      	ite	cs
 8002e0e:	2301      	movcs	r3, #1
 8002e10:	2300      	movcc	r3, #0
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d034      	beq.n	8002e82 <_Z20LaserTrajex_workflowv+0x172>
			efft_status = 0x00;
 8002e18:	4b2c      	ldr	r3, [pc, #176]	; (8002ecc <_Z20LaserTrajex_workflowv+0x1bc>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	701a      	strb	r2, [r3, #0]
			trig_efftRead = 0;
 8002e1e:	4b2c      	ldr	r3, [pc, #176]	; (8002ed0 <_Z20LaserTrajex_workflowv+0x1c0>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	701a      	strb	r2, [r3, #0]
			position_order++; // go to next obtained position
 8002e24:	4b1c      	ldr	r3, [pc, #112]	; (8002e98 <_Z20LaserTrajex_workflowv+0x188>)
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	3301      	adds	r3, #1
 8002e2a:	b2da      	uxtb	r2, r3
 8002e2c:	4b1a      	ldr	r3, [pc, #104]	; (8002e98 <_Z20LaserTrajex_workflowv+0x188>)
 8002e2e:	701a      	strb	r2, [r3, #0]

			if (positionlog[position_order] == -1){
 8002e30:	4b19      	ldr	r3, [pc, #100]	; (8002e98 <_Z20LaserTrajex_workflowv+0x188>)
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	4a19      	ldr	r2, [pc, #100]	; (8002e9c <_Z20LaserTrajex_workflowv+0x18c>)
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	4413      	add	r3, r2
 8002e3a:	edd3 7a00 	vldr	s15, [r3]
 8002e3e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8002e42:	eef4 7a47 	vcmp.f32	s15, s14
 8002e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e4a:	d10a      	bne.n	8002e62 <_Z20LaserTrajex_workflowv+0x152>
				//Real end, reset all position parameter
				// back to ready
				//HAL_UART_Transmit(&huart2, (uint8_t*)temp_f_ack2, 2, 100);
				fn_Uart();
 8002e4c:	f7fe fd8c 	bl	8001968 <_Z7fn_Uartv>
				flag_LasxTraj = 0;
 8002e50:	4b0f      	ldr	r3, [pc, #60]	; (8002e90 <_Z20LaserTrajex_workflowv+0x180>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	701a      	strb	r2, [r3, #0]
				ResetParam();
 8002e56:	f000 f83d 	bl	8002ed4 <_Z10ResetParamv>
				grandState = Ready;
 8002e5a:	4b0e      	ldr	r3, [pc, #56]	; (8002e94 <_Z20LaserTrajex_workflowv+0x184>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	701a      	strb	r2, [r3, #0]
			else {
				Finalposition = positionlog[position_order];
				flag_LasxTraj = 1;
			} // continue next pos if have
		}
		break;
 8002e60:	e00f      	b.n	8002e82 <_Z20LaserTrajex_workflowv+0x172>
				Finalposition = positionlog[position_order];
 8002e62:	4b0d      	ldr	r3, [pc, #52]	; (8002e98 <_Z20LaserTrajex_workflowv+0x188>)
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	4a0d      	ldr	r2, [pc, #52]	; (8002e9c <_Z20LaserTrajex_workflowv+0x18c>)
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	4413      	add	r3, r2
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a0c      	ldr	r2, [pc, #48]	; (8002ea0 <_Z20LaserTrajex_workflowv+0x190>)
 8002e70:	6013      	str	r3, [r2, #0]
				flag_LasxTraj = 1;
 8002e72:	4b07      	ldr	r3, [pc, #28]	; (8002e90 <_Z20LaserTrajex_workflowv+0x180>)
 8002e74:	2201      	movs	r2, #1
 8002e76:	701a      	strb	r2, [r3, #0]
		break;
 8002e78:	e003      	b.n	8002e82 <_Z20LaserTrajex_workflowv+0x172>
		break;
 8002e7a:	bf00      	nop
 8002e7c:	e002      	b.n	8002e84 <_Z20LaserTrajex_workflowv+0x174>
		break;
 8002e7e:	bf00      	nop
 8002e80:	e000      	b.n	8002e84 <_Z20LaserTrajex_workflowv+0x174>
		break;
 8002e82:	bf00      	nop
	}
}
 8002e84:	bf00      	nop
 8002e86:	3708      	adds	r7, #8
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e8e:	bf00      	nop
 8002e90:	20000514 	.word	0x20000514
 8002e94:	200004fc 	.word	0x200004fc
 8002e98:	20000515 	.word	0x20000515
 8002e9c:	20000144 	.word	0x20000144
 8002ea0:	20000580 	.word	0x20000580
 8002ea4:	200005ac 	.word	0x200005ac
 8002ea8:	200006e4 	.word	0x200006e4
 8002eac:	200005a8 	.word	0x200005a8
 8002eb0:	20000584 	.word	0x20000584
 8002eb4:	20000739 	.word	0x20000739
 8002eb8:	20000504 	.word	0x20000504
 8002ebc:	2000073b 	.word	0x2000073b
 8002ec0:	20000748 	.word	0x20000748
 8002ec4:	200001ac 	.word	0x200001ac
 8002ec8:	200001c4 	.word	0x200001c4
 8002ecc:	2000073a 	.word	0x2000073a
 8002ed0:	2000073d 	.word	0x2000073d

08002ed4 <_Z10ResetParamv>:

void ResetParam(){
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
	// Reset every variables at control
	// reset position buffer
	PWMOut = 0;
 8002eda:	4b19      	ldr	r3, [pc, #100]	; (8002f40 <_Z10ResetParamv+0x6c>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i <= position_order; i++){
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	607b      	str	r3, [r7, #4]
 8002ee4:	4b17      	ldr	r3, [pc, #92]	; (8002f44 <_Z10ResetParamv+0x70>)
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	461a      	mov	r2, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4293      	cmp	r3, r2
 8002eee:	dc09      	bgt.n	8002f04 <_Z10ResetParamv+0x30>
			positionlog[i] = -1.0;
 8002ef0:	4a15      	ldr	r2, [pc, #84]	; (8002f48 <_Z10ResetParamv+0x74>)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	4413      	add	r3, r2
 8002ef8:	4a14      	ldr	r2, [pc, #80]	; (8002f4c <_Z10ResetParamv+0x78>)
 8002efa:	601a      	str	r2, [r3, #0]
	for(int i = 0; i <= position_order; i++){
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	3301      	adds	r3, #1
 8002f00:	607b      	str	r3, [r7, #4]
 8002f02:	e7ef      	b.n	8002ee4 <_Z10ResetParamv+0x10>
		}
	position_order = 0;
 8002f04:	4b0f      	ldr	r3, [pc, #60]	; (8002f44 <_Z10ResetParamv+0x70>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	701a      	strb	r2, [r3, #0]
	flag_LasxTraj = 0;
 8002f0a:	4b11      	ldr	r3, [pc, #68]	; (8002f50 <_Z10ResetParamv+0x7c>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	701a      	strb	r2, [r3, #0]
	trig_efftRead = 0;
 8002f10:	4b10      	ldr	r3, [pc, #64]	; (8002f54 <_Z10ResetParamv+0x80>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	701a      	strb	r2, [r3, #0]
	bluecounter = 0;
 8002f16:	4b10      	ldr	r3, [pc, #64]	; (8002f58 <_Z10ResetParamv+0x84>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	701a      	strb	r2, [r3, #0]
	Distance = 0;
 8002f1c:	4b0f      	ldr	r3, [pc, #60]	; (8002f5c <_Z10ResetParamv+0x88>)
 8002f1e:	f04f 0200 	mov.w	r2, #0
 8002f22:	601a      	str	r2, [r3, #0]
	Currentpos = 0;
 8002f24:	4b0e      	ldr	r3, [pc, #56]	; (8002f60 <_Z10ResetParamv+0x8c>)
 8002f26:	f04f 0200 	mov.w	r2, #0
 8002f2a:	601a      	str	r2, [r3, #0]
	efft_status = 0x00;
 8002f2c:	4b0d      	ldr	r3, [pc, #52]	; (8002f64 <_Z10ResetParamv+0x90>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	701a      	strb	r2, [r3, #0]
	IOExpenderInit();
 8002f32:	f000 ffc1 	bl	8003eb8 <_Z14IOExpenderInitv>
	//Integral = 0;
	//u_contr = 0;
}
 8002f36:	bf00      	nop
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	20000574 	.word	0x20000574
 8002f44:	20000515 	.word	0x20000515
 8002f48:	20000144 	.word	0x20000144
 8002f4c:	bf800000 	.word	0xbf800000
 8002f50:	20000514 	.word	0x20000514
 8002f54:	2000073d 	.word	0x2000073d
 8002f58:	200006f0 	.word	0x200006f0
 8002f5c:	20000584 	.word	0x20000584
 8002f60:	200005a8 	.word	0x200005a8
 8002f64:	2000073a 	.word	0x2000073a

08002f68 <_Z10Trajectoryv>:

//////////////////// [Trajectory Path] //////////////////////
void Trajectory(){
 8002f68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f6c:	ed2d 8b04 	vpush	{d8-d9}
 8002f70:	af00      	add	r7, sp, #0

	if(micros() - TimeStampTraject >= 10000){
 8002f72:	f001 f90f 	bl	8004194 <_Z6microsv>
 8002f76:	4602      	mov	r2, r0
 8002f78:	460b      	mov	r3, r1
 8002f7a:	49c4      	ldr	r1, [pc, #784]	; (800328c <_Z10Trajectoryv+0x324>)
 8002f7c:	6809      	ldr	r1, [r1, #0]
 8002f7e:	2000      	movs	r0, #0
 8002f80:	4688      	mov	r8, r1
 8002f82:	4681      	mov	r9, r0
 8002f84:	ebb2 0408 	subs.w	r4, r2, r8
 8002f88:	eb63 0509 	sbc.w	r5, r3, r9
 8002f8c:	f242 7310 	movw	r3, #10000	; 0x2710
 8002f90:	429c      	cmp	r4, r3
 8002f92:	f175 0300 	sbcs.w	r3, r5, #0
 8002f96:	bf2c      	ite	cs
 8002f98:	2301      	movcs	r3, #1
 8002f9a:	2300      	movcc	r3, #0
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	f000 831b 	beq.w	80035da <_Z10Trajectoryv+0x672>
		TimeStampTraject = micros();
 8002fa4:	f001 f8f6 	bl	8004194 <_Z6microsv>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	460b      	mov	r3, r1
 8002fac:	4bb7      	ldr	r3, [pc, #732]	; (800328c <_Z10Trajectoryv+0x324>)
 8002fae:	601a      	str	r2, [r3, #0]

		Acceleration = 0.5;
 8002fb0:	4bb7      	ldr	r3, [pc, #732]	; (8003290 <_Z10Trajectoryv+0x328>)
 8002fb2:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8002fb6:	601a      	str	r2, [r3, #0]
//		}
		////////=======>>> Quintic ============///////////

		////////=======<<< Tapezoidal==========//////////

      timeFinal = (4*abs(Velocity)) + ((abs(Distance)-(2*abs(Velocity)*abs(Velocity)))/abs(Velocity));
 8002fb8:	4bb6      	ldr	r3, [pc, #728]	; (8003294 <_Z10Trajectoryv+0x32c>)
 8002fba:	edd3 7a00 	vldr	s15, [r3]
 8002fbe:	eeb0 0a67 	vmov.f32	s0, s15
 8002fc2:	f7fd ff9b 	bl	8000efc <_ZSt3absf>
 8002fc6:	eef0 7a40 	vmov.f32	s15, s0
 8002fca:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002fce:	ee27 8a87 	vmul.f32	s16, s15, s14
 8002fd2:	4bb1      	ldr	r3, [pc, #708]	; (8003298 <_Z10Trajectoryv+0x330>)
 8002fd4:	edd3 7a00 	vldr	s15, [r3]
 8002fd8:	eeb0 0a67 	vmov.f32	s0, s15
 8002fdc:	f7fd ff8e 	bl	8000efc <_ZSt3absf>
 8002fe0:	eeb0 9a40 	vmov.f32	s18, s0
 8002fe4:	4bab      	ldr	r3, [pc, #684]	; (8003294 <_Z10Trajectoryv+0x32c>)
 8002fe6:	edd3 7a00 	vldr	s15, [r3]
 8002fea:	eeb0 0a67 	vmov.f32	s0, s15
 8002fee:	f7fd ff85 	bl	8000efc <_ZSt3absf>
 8002ff2:	eef0 7a40 	vmov.f32	s15, s0
 8002ff6:	ee77 8aa7 	vadd.f32	s17, s15, s15
 8002ffa:	4ba6      	ldr	r3, [pc, #664]	; (8003294 <_Z10Trajectoryv+0x32c>)
 8002ffc:	edd3 7a00 	vldr	s15, [r3]
 8003000:	eeb0 0a67 	vmov.f32	s0, s15
 8003004:	f7fd ff7a 	bl	8000efc <_ZSt3absf>
 8003008:	eef0 7a40 	vmov.f32	s15, s0
 800300c:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8003010:	ee79 8a67 	vsub.f32	s17, s18, s15
 8003014:	4b9f      	ldr	r3, [pc, #636]	; (8003294 <_Z10Trajectoryv+0x32c>)
 8003016:	edd3 7a00 	vldr	s15, [r3]
 800301a:	eeb0 0a67 	vmov.f32	s0, s15
 800301e:	f7fd ff6d 	bl	8000efc <_ZSt3absf>
 8003022:	eeb0 7a40 	vmov.f32	s14, s0
 8003026:	eec8 7a87 	vdiv.f32	s15, s17, s14
 800302a:	ee78 7a27 	vadd.f32	s15, s16, s15
 800302e:	4b9b      	ldr	r3, [pc, #620]	; (800329c <_Z10Trajectoryv+0x334>)
 8003030:	edc3 7a00 	vstr	s15, [r3]

		if (Distance/Velocity > Velocity/Acceleration){
 8003034:	4b98      	ldr	r3, [pc, #608]	; (8003298 <_Z10Trajectoryv+0x330>)
 8003036:	edd3 6a00 	vldr	s13, [r3]
 800303a:	4b96      	ldr	r3, [pc, #600]	; (8003294 <_Z10Trajectoryv+0x32c>)
 800303c:	edd3 7a00 	vldr	s15, [r3]
 8003040:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003044:	4b93      	ldr	r3, [pc, #588]	; (8003294 <_Z10Trajectoryv+0x32c>)
 8003046:	ed93 6a00 	vldr	s12, [r3]
 800304a:	4b91      	ldr	r3, [pc, #580]	; (8003290 <_Z10Trajectoryv+0x328>)
 800304c:	edd3 6a00 	vldr	s13, [r3]
 8003050:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003054:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800305c:	dd0b      	ble.n	8003076 <_Z10Trajectoryv+0x10e>
			Tb = Velocity/Acceleration;
 800305e:	4b8d      	ldr	r3, [pc, #564]	; (8003294 <_Z10Trajectoryv+0x32c>)
 8003060:	edd3 6a00 	vldr	s13, [r3]
 8003064:	4b8a      	ldr	r3, [pc, #552]	; (8003290 <_Z10Trajectoryv+0x328>)
 8003066:	ed93 7a00 	vldr	s14, [r3]
 800306a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800306e:	4b8c      	ldr	r3, [pc, #560]	; (80032a0 <_Z10Trajectoryv+0x338>)
 8003070:	edc3 7a00 	vstr	s15, [r3]
 8003074:	e029      	b.n	80030ca <_Z10Trajectoryv+0x162>
		}
		else {
			Tb = sqrt(2*abs(Distance));
 8003076:	4b88      	ldr	r3, [pc, #544]	; (8003298 <_Z10Trajectoryv+0x330>)
 8003078:	edd3 7a00 	vldr	s15, [r3]
 800307c:	eeb0 0a67 	vmov.f32	s0, s15
 8003080:	f7fd ff3c 	bl	8000efc <_ZSt3absf>
 8003084:	eef0 7a40 	vmov.f32	s15, s0
 8003088:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800308c:	eeb0 0a67 	vmov.f32	s0, s15
 8003090:	f7fd ff44 	bl	8000f1c <_ZSt4sqrtf>
 8003094:	eef0 7a40 	vmov.f32	s15, s0
 8003098:	4b81      	ldr	r3, [pc, #516]	; (80032a0 <_Z10Trajectoryv+0x338>)
 800309a:	edc3 7a00 	vstr	s15, [r3]
			Velocity = sqrt(abs(Distance)/2);
 800309e:	4b7e      	ldr	r3, [pc, #504]	; (8003298 <_Z10Trajectoryv+0x330>)
 80030a0:	edd3 7a00 	vldr	s15, [r3]
 80030a4:	eeb0 0a67 	vmov.f32	s0, s15
 80030a8:	f7fd ff28 	bl	8000efc <_ZSt3absf>
 80030ac:	eeb0 7a40 	vmov.f32	s14, s0
 80030b0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80030b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80030b8:	eeb0 0a67 	vmov.f32	s0, s15
 80030bc:	f7fd ff2e 	bl	8000f1c <_ZSt4sqrtf>
 80030c0:	eef0 7a40 	vmov.f32	s15, s0
 80030c4:	4b73      	ldr	r3, [pc, #460]	; (8003294 <_Z10Trajectoryv+0x32c>)
 80030c6:	edc3 7a00 	vstr	s15, [r3]
		}
		if (TimeinS < Tb){
 80030ca:	4b76      	ldr	r3, [pc, #472]	; (80032a4 <_Z10Trajectoryv+0x33c>)
 80030cc:	ed93 7a00 	vldr	s14, [r3]
 80030d0:	4b73      	ldr	r3, [pc, #460]	; (80032a0 <_Z10Trajectoryv+0x338>)
 80030d2:	edd3 7a00 	vldr	s15, [r3]
 80030d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030de:	d55b      	bpl.n	8003198 <_Z10Trajectoryv+0x230>
			OutPosition = (0.5*Acceleration*TimeinS*TimeinS)+Currentpos;
 80030e0:	4b6b      	ldr	r3, [pc, #428]	; (8003290 <_Z10Trajectoryv+0x328>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7fd fa2f 	bl	8000548 <__aeabi_f2d>
 80030ea:	f04f 0200 	mov.w	r2, #0
 80030ee:	4b6e      	ldr	r3, [pc, #440]	; (80032a8 <_Z10Trajectoryv+0x340>)
 80030f0:	f7fd fa82 	bl	80005f8 <__aeabi_dmul>
 80030f4:	4602      	mov	r2, r0
 80030f6:	460b      	mov	r3, r1
 80030f8:	4614      	mov	r4, r2
 80030fa:	461d      	mov	r5, r3
 80030fc:	4b69      	ldr	r3, [pc, #420]	; (80032a4 <_Z10Trajectoryv+0x33c>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4618      	mov	r0, r3
 8003102:	f7fd fa21 	bl	8000548 <__aeabi_f2d>
 8003106:	4602      	mov	r2, r0
 8003108:	460b      	mov	r3, r1
 800310a:	4620      	mov	r0, r4
 800310c:	4629      	mov	r1, r5
 800310e:	f7fd fa73 	bl	80005f8 <__aeabi_dmul>
 8003112:	4602      	mov	r2, r0
 8003114:	460b      	mov	r3, r1
 8003116:	4614      	mov	r4, r2
 8003118:	461d      	mov	r5, r3
 800311a:	4b62      	ldr	r3, [pc, #392]	; (80032a4 <_Z10Trajectoryv+0x33c>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4618      	mov	r0, r3
 8003120:	f7fd fa12 	bl	8000548 <__aeabi_f2d>
 8003124:	4602      	mov	r2, r0
 8003126:	460b      	mov	r3, r1
 8003128:	4620      	mov	r0, r4
 800312a:	4629      	mov	r1, r5
 800312c:	f7fd fa64 	bl	80005f8 <__aeabi_dmul>
 8003130:	4602      	mov	r2, r0
 8003132:	460b      	mov	r3, r1
 8003134:	4614      	mov	r4, r2
 8003136:	461d      	mov	r5, r3
 8003138:	4b5c      	ldr	r3, [pc, #368]	; (80032ac <_Z10Trajectoryv+0x344>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4618      	mov	r0, r3
 800313e:	f7fd fa03 	bl	8000548 <__aeabi_f2d>
 8003142:	4602      	mov	r2, r0
 8003144:	460b      	mov	r3, r1
 8003146:	4620      	mov	r0, r4
 8003148:	4629      	mov	r1, r5
 800314a:	f7fd f89f 	bl	800028c <__adddf3>
 800314e:	4602      	mov	r2, r0
 8003150:	460b      	mov	r3, r1
 8003152:	4610      	mov	r0, r2
 8003154:	4619      	mov	r1, r3
 8003156:	f7fd fcff 	bl	8000b58 <__aeabi_d2f>
 800315a:	4603      	mov	r3, r0
 800315c:	4a54      	ldr	r2, [pc, #336]	; (80032b0 <_Z10Trajectoryv+0x348>)
 800315e:	6013      	str	r3, [r2, #0]
			OutVelocity = Acceleration*TimeinS;
 8003160:	4b4b      	ldr	r3, [pc, #300]	; (8003290 <_Z10Trajectoryv+0x328>)
 8003162:	ed93 7a00 	vldr	s14, [r3]
 8003166:	4b4f      	ldr	r3, [pc, #316]	; (80032a4 <_Z10Trajectoryv+0x33c>)
 8003168:	edd3 7a00 	vldr	s15, [r3]
 800316c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003170:	4b50      	ldr	r3, [pc, #320]	; (80032b4 <_Z10Trajectoryv+0x34c>)
 8003172:	edc3 7a00 	vstr	s15, [r3]
			OutAcceleration = Acceleration;
 8003176:	4b46      	ldr	r3, [pc, #280]	; (8003290 <_Z10Trajectoryv+0x328>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a4f      	ldr	r2, [pc, #316]	; (80032b8 <_Z10Trajectoryv+0x350>)
 800317c:	6013      	str	r3, [r2, #0]
			K_P_V = 2.5;
 800317e:	4b4f      	ldr	r3, [pc, #316]	; (80032bc <_Z10Trajectoryv+0x354>)
 8003180:	4a4f      	ldr	r2, [pc, #316]	; (80032c0 <_Z10Trajectoryv+0x358>)
 8003182:	601a      	str	r2, [r3, #0]
			K_I_V = 0.23;
 8003184:	4b4f      	ldr	r3, [pc, #316]	; (80032c4 <_Z10Trajectoryv+0x35c>)
 8003186:	4a50      	ldr	r2, [pc, #320]	; (80032c8 <_Z10Trajectoryv+0x360>)
 8003188:	601a      	str	r2, [r3, #0]
			K_D_V = 1.7;
 800318a:	4b50      	ldr	r3, [pc, #320]	; (80032cc <_Z10Trajectoryv+0x364>)
 800318c:	4a50      	ldr	r2, [pc, #320]	; (80032d0 <_Z10Trajectoryv+0x368>)
 800318e:	601a      	str	r2, [r3, #0]
			ch = 1;
 8003190:	4b50      	ldr	r3, [pc, #320]	; (80032d4 <_Z10Trajectoryv+0x36c>)
 8003192:	2201      	movs	r2, #1
 8003194:	701a      	strb	r2, [r3, #0]
 8003196:	e1c8      	b.n	800352a <_Z10Trajectoryv+0x5c2>
			}
		else if(TimeinS < (timeFinal-Tb)){
 8003198:	4b40      	ldr	r3, [pc, #256]	; (800329c <_Z10Trajectoryv+0x334>)
 800319a:	ed93 7a00 	vldr	s14, [r3]
 800319e:	4b40      	ldr	r3, [pc, #256]	; (80032a0 <_Z10Trajectoryv+0x338>)
 80031a0:	edd3 7a00 	vldr	s15, [r3]
 80031a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80031a8:	4b3e      	ldr	r3, [pc, #248]	; (80032a4 <_Z10Trajectoryv+0x33c>)
 80031aa:	edd3 7a00 	vldr	s15, [r3]
 80031ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031b6:	f340 8091 	ble.w	80032dc <_Z10Trajectoryv+0x374>
			OutPosition = (0.5*Acceleration*(Tb*Tb)) + (Velocity*(TimeinS-Tb))+Currentpos;
 80031ba:	4b35      	ldr	r3, [pc, #212]	; (8003290 <_Z10Trajectoryv+0x328>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4618      	mov	r0, r3
 80031c0:	f7fd f9c2 	bl	8000548 <__aeabi_f2d>
 80031c4:	f04f 0200 	mov.w	r2, #0
 80031c8:	4b37      	ldr	r3, [pc, #220]	; (80032a8 <_Z10Trajectoryv+0x340>)
 80031ca:	f7fd fa15 	bl	80005f8 <__aeabi_dmul>
 80031ce:	4602      	mov	r2, r0
 80031d0:	460b      	mov	r3, r1
 80031d2:	4614      	mov	r4, r2
 80031d4:	461d      	mov	r5, r3
 80031d6:	4b32      	ldr	r3, [pc, #200]	; (80032a0 <_Z10Trajectoryv+0x338>)
 80031d8:	ed93 7a00 	vldr	s14, [r3]
 80031dc:	4b30      	ldr	r3, [pc, #192]	; (80032a0 <_Z10Trajectoryv+0x338>)
 80031de:	edd3 7a00 	vldr	s15, [r3]
 80031e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031e6:	ee17 0a90 	vmov	r0, s15
 80031ea:	f7fd f9ad 	bl	8000548 <__aeabi_f2d>
 80031ee:	4602      	mov	r2, r0
 80031f0:	460b      	mov	r3, r1
 80031f2:	4620      	mov	r0, r4
 80031f4:	4629      	mov	r1, r5
 80031f6:	f7fd f9ff 	bl	80005f8 <__aeabi_dmul>
 80031fa:	4602      	mov	r2, r0
 80031fc:	460b      	mov	r3, r1
 80031fe:	4614      	mov	r4, r2
 8003200:	461d      	mov	r5, r3
 8003202:	4b28      	ldr	r3, [pc, #160]	; (80032a4 <_Z10Trajectoryv+0x33c>)
 8003204:	ed93 7a00 	vldr	s14, [r3]
 8003208:	4b25      	ldr	r3, [pc, #148]	; (80032a0 <_Z10Trajectoryv+0x338>)
 800320a:	edd3 7a00 	vldr	s15, [r3]
 800320e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003212:	4b20      	ldr	r3, [pc, #128]	; (8003294 <_Z10Trajectoryv+0x32c>)
 8003214:	edd3 7a00 	vldr	s15, [r3]
 8003218:	ee67 7a27 	vmul.f32	s15, s14, s15
 800321c:	ee17 0a90 	vmov	r0, s15
 8003220:	f7fd f992 	bl	8000548 <__aeabi_f2d>
 8003224:	4602      	mov	r2, r0
 8003226:	460b      	mov	r3, r1
 8003228:	4620      	mov	r0, r4
 800322a:	4629      	mov	r1, r5
 800322c:	f7fd f82e 	bl	800028c <__adddf3>
 8003230:	4602      	mov	r2, r0
 8003232:	460b      	mov	r3, r1
 8003234:	4614      	mov	r4, r2
 8003236:	461d      	mov	r5, r3
 8003238:	4b1c      	ldr	r3, [pc, #112]	; (80032ac <_Z10Trajectoryv+0x344>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4618      	mov	r0, r3
 800323e:	f7fd f983 	bl	8000548 <__aeabi_f2d>
 8003242:	4602      	mov	r2, r0
 8003244:	460b      	mov	r3, r1
 8003246:	4620      	mov	r0, r4
 8003248:	4629      	mov	r1, r5
 800324a:	f7fd f81f 	bl	800028c <__adddf3>
 800324e:	4602      	mov	r2, r0
 8003250:	460b      	mov	r3, r1
 8003252:	4610      	mov	r0, r2
 8003254:	4619      	mov	r1, r3
 8003256:	f7fd fc7f 	bl	8000b58 <__aeabi_d2f>
 800325a:	4603      	mov	r3, r0
 800325c:	4a14      	ldr	r2, [pc, #80]	; (80032b0 <_Z10Trajectoryv+0x348>)
 800325e:	6013      	str	r3, [r2, #0]
			OutVelocity = Velocity;
 8003260:	4b0c      	ldr	r3, [pc, #48]	; (8003294 <_Z10Trajectoryv+0x32c>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a13      	ldr	r2, [pc, #76]	; (80032b4 <_Z10Trajectoryv+0x34c>)
 8003266:	6013      	str	r3, [r2, #0]
			OutAcceleration = 0;
 8003268:	4b13      	ldr	r3, [pc, #76]	; (80032b8 <_Z10Trajectoryv+0x350>)
 800326a:	f04f 0200 	mov.w	r2, #0
 800326e:	601a      	str	r2, [r3, #0]
			K_P_V = 2.0;
 8003270:	4b12      	ldr	r3, [pc, #72]	; (80032bc <_Z10Trajectoryv+0x354>)
 8003272:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003276:	601a      	str	r2, [r3, #0]
			K_I_V = 0.215;
 8003278:	4b12      	ldr	r3, [pc, #72]	; (80032c4 <_Z10Trajectoryv+0x35c>)
 800327a:	4a17      	ldr	r2, [pc, #92]	; (80032d8 <_Z10Trajectoryv+0x370>)
 800327c:	601a      	str	r2, [r3, #0]
			K_D_V = 1.7;
 800327e:	4b13      	ldr	r3, [pc, #76]	; (80032cc <_Z10Trajectoryv+0x364>)
 8003280:	4a13      	ldr	r2, [pc, #76]	; (80032d0 <_Z10Trajectoryv+0x368>)
 8003282:	601a      	str	r2, [r3, #0]
			ch = 2;
 8003284:	4b13      	ldr	r3, [pc, #76]	; (80032d4 <_Z10Trajectoryv+0x36c>)
 8003286:	2202      	movs	r2, #2
 8003288:	701a      	strb	r2, [r3, #0]
 800328a:	e14e      	b.n	800352a <_Z10Trajectoryv+0x5c2>
 800328c:	200005b0 	.word	0x200005b0
 8003290:	2000058c 	.word	0x2000058c
 8003294:	20000588 	.word	0x20000588
 8003298:	20000584 	.word	0x20000584
 800329c:	200005a0 	.word	0x200005a0
 80032a0:	2000059c 	.word	0x2000059c
 80032a4:	200005a4 	.word	0x200005a4
 80032a8:	3fe00000 	.word	0x3fe00000
 80032ac:	200005a8 	.word	0x200005a8
 80032b0:	20000590 	.word	0x20000590
 80032b4:	20000594 	.word	0x20000594
 80032b8:	20000598 	.word	0x20000598
 80032bc:	2000071c 	.word	0x2000071c
 80032c0:	40200000 	.word	0x40200000
 80032c4:	20000720 	.word	0x20000720
 80032c8:	3e6b851f 	.word	0x3e6b851f
 80032cc:	20000724 	.word	0x20000724
 80032d0:	3fd9999a 	.word	0x3fd9999a
 80032d4:	20000738 	.word	0x20000738
 80032d8:	3e5c28f6 	.word	0x3e5c28f6
			}
		else if(((timeFinal-Tb) <= TimeinS) && (TimeinS <= timeFinal)){
 80032dc:	4bc4      	ldr	r3, [pc, #784]	; (80035f0 <_Z10Trajectoryv+0x688>)
 80032de:	ed93 7a00 	vldr	s14, [r3]
 80032e2:	4bc4      	ldr	r3, [pc, #784]	; (80035f4 <_Z10Trajectoryv+0x68c>)
 80032e4:	edd3 7a00 	vldr	s15, [r3]
 80032e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80032ec:	4bc2      	ldr	r3, [pc, #776]	; (80035f8 <_Z10Trajectoryv+0x690>)
 80032ee:	edd3 7a00 	vldr	s15, [r3]
 80032f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80032f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032fa:	f200 80ef 	bhi.w	80034dc <_Z10Trajectoryv+0x574>
 80032fe:	4bbe      	ldr	r3, [pc, #760]	; (80035f8 <_Z10Trajectoryv+0x690>)
 8003300:	ed93 7a00 	vldr	s14, [r3]
 8003304:	4bba      	ldr	r3, [pc, #744]	; (80035f0 <_Z10Trajectoryv+0x688>)
 8003306:	edd3 7a00 	vldr	s15, [r3]
 800330a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800330e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003312:	f200 80e3 	bhi.w	80034dc <_Z10Trajectoryv+0x574>
			OutPosition = (0.5*Acceleration*(Tb*Tb))+ (Velocity*(timeFinal-(2*Tb)))  + (Velocity*(TimeinS-(timeFinal-Tb))) - (0.5*Acceleration*((TimeinS-(timeFinal-Tb))*(TimeinS-(timeFinal-Tb))))+Currentpos;
 8003316:	4bb9      	ldr	r3, [pc, #740]	; (80035fc <_Z10Trajectoryv+0x694>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4618      	mov	r0, r3
 800331c:	f7fd f914 	bl	8000548 <__aeabi_f2d>
 8003320:	f04f 0200 	mov.w	r2, #0
 8003324:	4bb6      	ldr	r3, [pc, #728]	; (8003600 <_Z10Trajectoryv+0x698>)
 8003326:	f7fd f967 	bl	80005f8 <__aeabi_dmul>
 800332a:	4602      	mov	r2, r0
 800332c:	460b      	mov	r3, r1
 800332e:	4614      	mov	r4, r2
 8003330:	461d      	mov	r5, r3
 8003332:	4bb0      	ldr	r3, [pc, #704]	; (80035f4 <_Z10Trajectoryv+0x68c>)
 8003334:	ed93 7a00 	vldr	s14, [r3]
 8003338:	4bae      	ldr	r3, [pc, #696]	; (80035f4 <_Z10Trajectoryv+0x68c>)
 800333a:	edd3 7a00 	vldr	s15, [r3]
 800333e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003342:	ee17 0a90 	vmov	r0, s15
 8003346:	f7fd f8ff 	bl	8000548 <__aeabi_f2d>
 800334a:	4602      	mov	r2, r0
 800334c:	460b      	mov	r3, r1
 800334e:	4620      	mov	r0, r4
 8003350:	4629      	mov	r1, r5
 8003352:	f7fd f951 	bl	80005f8 <__aeabi_dmul>
 8003356:	4602      	mov	r2, r0
 8003358:	460b      	mov	r3, r1
 800335a:	4614      	mov	r4, r2
 800335c:	461d      	mov	r5, r3
 800335e:	4ba4      	ldr	r3, [pc, #656]	; (80035f0 <_Z10Trajectoryv+0x688>)
 8003360:	ed93 7a00 	vldr	s14, [r3]
 8003364:	4ba3      	ldr	r3, [pc, #652]	; (80035f4 <_Z10Trajectoryv+0x68c>)
 8003366:	edd3 7a00 	vldr	s15, [r3]
 800336a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800336e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003372:	4ba4      	ldr	r3, [pc, #656]	; (8003604 <_Z10Trajectoryv+0x69c>)
 8003374:	edd3 7a00 	vldr	s15, [r3]
 8003378:	ee67 7a27 	vmul.f32	s15, s14, s15
 800337c:	ee17 0a90 	vmov	r0, s15
 8003380:	f7fd f8e2 	bl	8000548 <__aeabi_f2d>
 8003384:	4602      	mov	r2, r0
 8003386:	460b      	mov	r3, r1
 8003388:	4620      	mov	r0, r4
 800338a:	4629      	mov	r1, r5
 800338c:	f7fc ff7e 	bl	800028c <__adddf3>
 8003390:	4602      	mov	r2, r0
 8003392:	460b      	mov	r3, r1
 8003394:	4614      	mov	r4, r2
 8003396:	461d      	mov	r5, r3
 8003398:	4b97      	ldr	r3, [pc, #604]	; (80035f8 <_Z10Trajectoryv+0x690>)
 800339a:	ed93 7a00 	vldr	s14, [r3]
 800339e:	4b94      	ldr	r3, [pc, #592]	; (80035f0 <_Z10Trajectoryv+0x688>)
 80033a0:	edd3 6a00 	vldr	s13, [r3]
 80033a4:	4b93      	ldr	r3, [pc, #588]	; (80035f4 <_Z10Trajectoryv+0x68c>)
 80033a6:	edd3 7a00 	vldr	s15, [r3]
 80033aa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80033ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80033b2:	4b94      	ldr	r3, [pc, #592]	; (8003604 <_Z10Trajectoryv+0x69c>)
 80033b4:	edd3 7a00 	vldr	s15, [r3]
 80033b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033bc:	ee17 0a90 	vmov	r0, s15
 80033c0:	f7fd f8c2 	bl	8000548 <__aeabi_f2d>
 80033c4:	4602      	mov	r2, r0
 80033c6:	460b      	mov	r3, r1
 80033c8:	4620      	mov	r0, r4
 80033ca:	4629      	mov	r1, r5
 80033cc:	f7fc ff5e 	bl	800028c <__adddf3>
 80033d0:	4602      	mov	r2, r0
 80033d2:	460b      	mov	r3, r1
 80033d4:	4614      	mov	r4, r2
 80033d6:	461d      	mov	r5, r3
 80033d8:	4b88      	ldr	r3, [pc, #544]	; (80035fc <_Z10Trajectoryv+0x694>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4618      	mov	r0, r3
 80033de:	f7fd f8b3 	bl	8000548 <__aeabi_f2d>
 80033e2:	f04f 0200 	mov.w	r2, #0
 80033e6:	4b86      	ldr	r3, [pc, #536]	; (8003600 <_Z10Trajectoryv+0x698>)
 80033e8:	f7fd f906 	bl	80005f8 <__aeabi_dmul>
 80033ec:	4602      	mov	r2, r0
 80033ee:	460b      	mov	r3, r1
 80033f0:	4690      	mov	r8, r2
 80033f2:	4699      	mov	r9, r3
 80033f4:	4b80      	ldr	r3, [pc, #512]	; (80035f8 <_Z10Trajectoryv+0x690>)
 80033f6:	ed93 7a00 	vldr	s14, [r3]
 80033fa:	4b7d      	ldr	r3, [pc, #500]	; (80035f0 <_Z10Trajectoryv+0x688>)
 80033fc:	edd3 6a00 	vldr	s13, [r3]
 8003400:	4b7c      	ldr	r3, [pc, #496]	; (80035f4 <_Z10Trajectoryv+0x68c>)
 8003402:	edd3 7a00 	vldr	s15, [r3]
 8003406:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800340a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800340e:	4b7a      	ldr	r3, [pc, #488]	; (80035f8 <_Z10Trajectoryv+0x690>)
 8003410:	edd3 6a00 	vldr	s13, [r3]
 8003414:	4b76      	ldr	r3, [pc, #472]	; (80035f0 <_Z10Trajectoryv+0x688>)
 8003416:	ed93 6a00 	vldr	s12, [r3]
 800341a:	4b76      	ldr	r3, [pc, #472]	; (80035f4 <_Z10Trajectoryv+0x68c>)
 800341c:	edd3 7a00 	vldr	s15, [r3]
 8003420:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003424:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003428:	ee67 7a27 	vmul.f32	s15, s14, s15
 800342c:	ee17 0a90 	vmov	r0, s15
 8003430:	f7fd f88a 	bl	8000548 <__aeabi_f2d>
 8003434:	4602      	mov	r2, r0
 8003436:	460b      	mov	r3, r1
 8003438:	4640      	mov	r0, r8
 800343a:	4649      	mov	r1, r9
 800343c:	f7fd f8dc 	bl	80005f8 <__aeabi_dmul>
 8003440:	4602      	mov	r2, r0
 8003442:	460b      	mov	r3, r1
 8003444:	4620      	mov	r0, r4
 8003446:	4629      	mov	r1, r5
 8003448:	f7fc ff1e 	bl	8000288 <__aeabi_dsub>
 800344c:	4602      	mov	r2, r0
 800344e:	460b      	mov	r3, r1
 8003450:	4614      	mov	r4, r2
 8003452:	461d      	mov	r5, r3
 8003454:	4b6c      	ldr	r3, [pc, #432]	; (8003608 <_Z10Trajectoryv+0x6a0>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4618      	mov	r0, r3
 800345a:	f7fd f875 	bl	8000548 <__aeabi_f2d>
 800345e:	4602      	mov	r2, r0
 8003460:	460b      	mov	r3, r1
 8003462:	4620      	mov	r0, r4
 8003464:	4629      	mov	r1, r5
 8003466:	f7fc ff11 	bl	800028c <__adddf3>
 800346a:	4602      	mov	r2, r0
 800346c:	460b      	mov	r3, r1
 800346e:	4610      	mov	r0, r2
 8003470:	4619      	mov	r1, r3
 8003472:	f7fd fb71 	bl	8000b58 <__aeabi_d2f>
 8003476:	4603      	mov	r3, r0
 8003478:	4a64      	ldr	r2, [pc, #400]	; (800360c <_Z10Trajectoryv+0x6a4>)
 800347a:	6013      	str	r3, [r2, #0]
			OutVelocity = Velocity-(Acceleration*(TimeinS-(timeFinal-Tb)));
 800347c:	4b61      	ldr	r3, [pc, #388]	; (8003604 <_Z10Trajectoryv+0x69c>)
 800347e:	ed93 7a00 	vldr	s14, [r3]
 8003482:	4b5d      	ldr	r3, [pc, #372]	; (80035f8 <_Z10Trajectoryv+0x690>)
 8003484:	edd3 6a00 	vldr	s13, [r3]
 8003488:	4b59      	ldr	r3, [pc, #356]	; (80035f0 <_Z10Trajectoryv+0x688>)
 800348a:	ed93 6a00 	vldr	s12, [r3]
 800348e:	4b59      	ldr	r3, [pc, #356]	; (80035f4 <_Z10Trajectoryv+0x68c>)
 8003490:	edd3 7a00 	vldr	s15, [r3]
 8003494:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003498:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800349c:	4b57      	ldr	r3, [pc, #348]	; (80035fc <_Z10Trajectoryv+0x694>)
 800349e:	edd3 7a00 	vldr	s15, [r3]
 80034a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034aa:	4b59      	ldr	r3, [pc, #356]	; (8003610 <_Z10Trajectoryv+0x6a8>)
 80034ac:	edc3 7a00 	vstr	s15, [r3]
			OutAcceleration = -Acceleration;
 80034b0:	4b52      	ldr	r3, [pc, #328]	; (80035fc <_Z10Trajectoryv+0x694>)
 80034b2:	edd3 7a00 	vldr	s15, [r3]
 80034b6:	eef1 7a67 	vneg.f32	s15, s15
 80034ba:	4b56      	ldr	r3, [pc, #344]	; (8003614 <_Z10Trajectoryv+0x6ac>)
 80034bc:	edc3 7a00 	vstr	s15, [r3]
			K_P_V = 1.5;
 80034c0:	4b55      	ldr	r3, [pc, #340]	; (8003618 <_Z10Trajectoryv+0x6b0>)
 80034c2:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 80034c6:	601a      	str	r2, [r3, #0]
			K_I_V = 0.2;
 80034c8:	4b54      	ldr	r3, [pc, #336]	; (800361c <_Z10Trajectoryv+0x6b4>)
 80034ca:	4a55      	ldr	r2, [pc, #340]	; (8003620 <_Z10Trajectoryv+0x6b8>)
 80034cc:	601a      	str	r2, [r3, #0]
			K_D_V = 1.7;
 80034ce:	4b55      	ldr	r3, [pc, #340]	; (8003624 <_Z10Trajectoryv+0x6bc>)
 80034d0:	4a55      	ldr	r2, [pc, #340]	; (8003628 <_Z10Trajectoryv+0x6c0>)
 80034d2:	601a      	str	r2, [r3, #0]
			ch = 3;
 80034d4:	4b55      	ldr	r3, [pc, #340]	; (800362c <_Z10Trajectoryv+0x6c4>)
 80034d6:	2203      	movs	r2, #3
 80034d8:	701a      	strb	r2, [r3, #0]
 80034da:	e026      	b.n	800352a <_Z10Trajectoryv+0x5c2>
			}
		else if(TimeinS > timeFinal){
 80034dc:	4b46      	ldr	r3, [pc, #280]	; (80035f8 <_Z10Trajectoryv+0x690>)
 80034de:	ed93 7a00 	vldr	s14, [r3]
 80034e2:	4b43      	ldr	r3, [pc, #268]	; (80035f0 <_Z10Trajectoryv+0x688>)
 80034e4:	edd3 7a00 	vldr	s15, [r3]
 80034e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034f0:	dd1b      	ble.n	800352a <_Z10Trajectoryv+0x5c2>
			OutPosition = Distance+Currentpos;
 80034f2:	4b4f      	ldr	r3, [pc, #316]	; (8003630 <_Z10Trajectoryv+0x6c8>)
 80034f4:	ed93 7a00 	vldr	s14, [r3]
 80034f8:	4b43      	ldr	r3, [pc, #268]	; (8003608 <_Z10Trajectoryv+0x6a0>)
 80034fa:	edd3 7a00 	vldr	s15, [r3]
 80034fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003502:	4b42      	ldr	r3, [pc, #264]	; (800360c <_Z10Trajectoryv+0x6a4>)
 8003504:	edc3 7a00 	vstr	s15, [r3]
			OutAcceleration = 0;
 8003508:	4b42      	ldr	r3, [pc, #264]	; (8003614 <_Z10Trajectoryv+0x6ac>)
 800350a:	f04f 0200 	mov.w	r2, #0
 800350e:	601a      	str	r2, [r3, #0]
			K_P_V = 2.0;
 8003510:	4b41      	ldr	r3, [pc, #260]	; (8003618 <_Z10Trajectoryv+0x6b0>)
 8003512:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003516:	601a      	str	r2, [r3, #0]
			K_I_V = 0.2;
 8003518:	4b40      	ldr	r3, [pc, #256]	; (800361c <_Z10Trajectoryv+0x6b4>)
 800351a:	4a41      	ldr	r2, [pc, #260]	; (8003620 <_Z10Trajectoryv+0x6b8>)
 800351c:	601a      	str	r2, [r3, #0]
			K_D_V = 1.7;
 800351e:	4b41      	ldr	r3, [pc, #260]	; (8003624 <_Z10Trajectoryv+0x6bc>)
 8003520:	4a41      	ldr	r2, [pc, #260]	; (8003628 <_Z10Trajectoryv+0x6c0>)
 8003522:	601a      	str	r2, [r3, #0]
			ch = 4;
 8003524:	4b41      	ldr	r3, [pc, #260]	; (800362c <_Z10Trajectoryv+0x6c4>)
 8003526:	2204      	movs	r2, #4
 8003528:	701a      	strb	r2, [r3, #0]
			}

		if (Distance > 0){
 800352a:	4b41      	ldr	r3, [pc, #260]	; (8003630 <_Z10Trajectoryv+0x6c8>)
 800352c:	edd3 7a00 	vldr	s15, [r3]
 8003530:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003538:	dd03      	ble.n	8003542 <_Z10Trajectoryv+0x5da>
			//Velocity = 1.04719755; // [From UART] Put Max Velo here
			//Acceleration= 0.5;   // recieve frol UART
			check = 50;
 800353a:	4b3e      	ldr	r3, [pc, #248]	; (8003634 <_Z10Trajectoryv+0x6cc>)
 800353c:	2232      	movs	r2, #50	; 0x32
 800353e:	701a      	strb	r2, [r3, #0]
 8003540:	e038      	b.n	80035b4 <_Z10Trajectoryv+0x64c>
		}
		else if(Distance < 0){
 8003542:	4b3b      	ldr	r3, [pc, #236]	; (8003630 <_Z10Trajectoryv+0x6c8>)
 8003544:	edd3 7a00 	vldr	s15, [r3]
 8003548:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800354c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003550:	d530      	bpl.n	80035b4 <_Z10Trajectoryv+0x64c>
			//Velocity=-1.04719755; // [From UART] Put Max Velo here  (negative)
			//Velocity= -1 * Velocity;
			OutVelocity = OutVelocity * -1.0;
 8003552:	4b2f      	ldr	r3, [pc, #188]	; (8003610 <_Z10Trajectoryv+0x6a8>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4618      	mov	r0, r3
 8003558:	f7fc fff6 	bl	8000548 <__aeabi_f2d>
 800355c:	4602      	mov	r2, r0
 800355e:	460b      	mov	r3, r1
 8003560:	4692      	mov	sl, r2
 8003562:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8003566:	4650      	mov	r0, sl
 8003568:	4659      	mov	r1, fp
 800356a:	f7fd faf5 	bl	8000b58 <__aeabi_d2f>
 800356e:	4603      	mov	r3, r0
 8003570:	4a27      	ldr	r2, [pc, #156]	; (8003610 <_Z10Trajectoryv+0x6a8>)
 8003572:	6013      	str	r3, [r2, #0]
			if(ch==4){
 8003574:	4b2d      	ldr	r3, [pc, #180]	; (800362c <_Z10Trajectoryv+0x6c4>)
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	2b04      	cmp	r3, #4
 800357a:	d10b      	bne.n	8003594 <_Z10Trajectoryv+0x62c>
				OutPosition = Distance+Currentpos;
 800357c:	4b2c      	ldr	r3, [pc, #176]	; (8003630 <_Z10Trajectoryv+0x6c8>)
 800357e:	ed93 7a00 	vldr	s14, [r3]
 8003582:	4b21      	ldr	r3, [pc, #132]	; (8003608 <_Z10Trajectoryv+0x6a0>)
 8003584:	edd3 7a00 	vldr	s15, [r3]
 8003588:	ee77 7a27 	vadd.f32	s15, s14, s15
 800358c:	4b1f      	ldr	r3, [pc, #124]	; (800360c <_Z10Trajectoryv+0x6a4>)
 800358e:	edc3 7a00 	vstr	s15, [r3]
 8003592:	e00c      	b.n	80035ae <_Z10Trajectoryv+0x646>
			}
			else{
				OutPosition = (OutPosition * -1.0)+(2*Currentpos) ;
 8003594:	4b1c      	ldr	r3, [pc, #112]	; (8003608 <_Z10Trajectoryv+0x6a0>)
 8003596:	edd3 7a00 	vldr	s15, [r3]
 800359a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800359e:	4b1b      	ldr	r3, [pc, #108]	; (800360c <_Z10Trajectoryv+0x6a4>)
 80035a0:	edd3 7a00 	vldr	s15, [r3]
 80035a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035a8:	4b18      	ldr	r3, [pc, #96]	; (800360c <_Z10Trajectoryv+0x6a4>)
 80035aa:	edc3 7a00 	vstr	s15, [r3]
			}
		    //Acceleration= -0.5;   // recieve frol UART (negative)
		    check = 100;
 80035ae:	4b21      	ldr	r3, [pc, #132]	; (8003634 <_Z10Trajectoryv+0x6cc>)
 80035b0:	2264      	movs	r2, #100	; 0x64
 80035b2:	701a      	strb	r2, [r3, #0]
		}

		////////=======>>> Tapezoidal==========//////////

		TimeinS = TimeinS + Dt;
 80035b4:	4b10      	ldr	r3, [pc, #64]	; (80035f8 <_Z10Trajectoryv+0x690>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7fc ffc5 	bl	8000548 <__aeabi_f2d>
 80035be:	a30a      	add	r3, pc, #40	; (adr r3, 80035e8 <_Z10Trajectoryv+0x680>)
 80035c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c4:	f7fc fe62 	bl	800028c <__adddf3>
 80035c8:	4602      	mov	r2, r0
 80035ca:	460b      	mov	r3, r1
 80035cc:	4610      	mov	r0, r2
 80035ce:	4619      	mov	r1, r3
 80035d0:	f7fd fac2 	bl	8000b58 <__aeabi_d2f>
 80035d4:	4603      	mov	r3, r0
 80035d6:	4a08      	ldr	r2, [pc, #32]	; (80035f8 <_Z10Trajectoryv+0x690>)
 80035d8:	6013      	str	r3, [r2, #0]
		//////<<< PID Tuning
		//OutVelocity = 0.523598775 ;
		//////>>> PID Tuning

		}
}
 80035da:	bf00      	nop
 80035dc:	46bd      	mov	sp, r7
 80035de:	ecbd 8b04 	vpop	{d8-d9}
 80035e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035e6:	bf00      	nop
 80035e8:	47ae147b 	.word	0x47ae147b
 80035ec:	3f847ae1 	.word	0x3f847ae1
 80035f0:	200005a0 	.word	0x200005a0
 80035f4:	2000059c 	.word	0x2000059c
 80035f8:	200005a4 	.word	0x200005a4
 80035fc:	2000058c 	.word	0x2000058c
 8003600:	3fe00000 	.word	0x3fe00000
 8003604:	20000588 	.word	0x20000588
 8003608:	200005a8 	.word	0x200005a8
 800360c:	20000590 	.word	0x20000590
 8003610:	20000594 	.word	0x20000594
 8003614:	20000598 	.word	0x20000598
 8003618:	2000071c 	.word	0x2000071c
 800361c:	20000720 	.word	0x20000720
 8003620:	3e4ccccd 	.word	0x3e4ccccd
 8003624:	20000724 	.word	0x20000724
 8003628:	3fd9999a 	.word	0x3fd9999a
 800362c:	20000738 	.word	0x20000738
 8003630:	20000584 	.word	0x20000584
 8003634:	20000739 	.word	0x20000739

08003638 <_Z10Unwrappingv>:

//////////////////////// [Unwrapping] ///////////////////////
void Unwrapping(){
 8003638:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800363c:	af00      	add	r7, sp, #0

	if(micros() - TimeUnwrap >= 10000){
 800363e:	f000 fda9 	bl	8004194 <_Z6microsv>
 8003642:	4602      	mov	r2, r0
 8003644:	460b      	mov	r3, r1
 8003646:	494c      	ldr	r1, [pc, #304]	; (8003778 <_Z10Unwrappingv+0x140>)
 8003648:	6809      	ldr	r1, [r1, #0]
 800364a:	2000      	movs	r0, #0
 800364c:	4688      	mov	r8, r1
 800364e:	4681      	mov	r9, r0
 8003650:	ebb2 0408 	subs.w	r4, r2, r8
 8003654:	eb63 0509 	sbc.w	r5, r3, r9
 8003658:	f242 7310 	movw	r3, #10000	; 0x2710
 800365c:	429c      	cmp	r4, r3
 800365e:	f175 0300 	sbcs.w	r3, r5, #0
 8003662:	bf2c      	ite	cs
 8003664:	2301      	movcs	r3, #1
 8003666:	2300      	movcc	r3, #0
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b00      	cmp	r3, #0
 800366c:	d07c      	beq.n	8003768 <_Z10Unwrappingv+0x130>
		TimeUnwrap = micros();
 800366e:	f000 fd91 	bl	8004194 <_Z6microsv>
 8003672:	4602      	mov	r2, r0
 8003674:	460b      	mov	r3, r1
 8003676:	4b40      	ldr	r3, [pc, #256]	; (8003778 <_Z10Unwrappingv+0x140>)
 8003678:	601a      	str	r2, [r3, #0]
		Pn = BinPosXI * 0.006136;
 800367a:	4b40      	ldr	r3, [pc, #256]	; (800377c <_Z10Unwrappingv+0x144>)
 800367c:	881b      	ldrh	r3, [r3, #0]
 800367e:	4618      	mov	r0, r3
 8003680:	f7fc ff50 	bl	8000524 <__aeabi_i2d>
 8003684:	a33a      	add	r3, pc, #232	; (adr r3, 8003770 <_Z10Unwrappingv+0x138>)
 8003686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800368a:	f7fc ffb5 	bl	80005f8 <__aeabi_dmul>
 800368e:	4602      	mov	r2, r0
 8003690:	460b      	mov	r3, r1
 8003692:	4610      	mov	r0, r2
 8003694:	4619      	mov	r1, r3
 8003696:	f7fd fa5f 	bl	8000b58 <__aeabi_d2f>
 800369a:	4603      	mov	r3, r0
 800369c:	4a38      	ldr	r2, [pc, #224]	; (8003780 <_Z10Unwrappingv+0x148>)
 800369e:	6013      	str	r3, [r2, #0]
		if(Pn-P_n <= -1*e){
 80036a0:	4b37      	ldr	r3, [pc, #220]	; (8003780 <_Z10Unwrappingv+0x148>)
 80036a2:	ed93 7a00 	vldr	s14, [r3]
 80036a6:	4b37      	ldr	r3, [pc, #220]	; (8003784 <_Z10Unwrappingv+0x14c>)
 80036a8:	edd3 7a00 	vldr	s15, [r3]
 80036ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80036b0:	4b35      	ldr	r3, [pc, #212]	; (8003788 <_Z10Unwrappingv+0x150>)
 80036b2:	edd3 7a00 	vldr	s15, [r3]
 80036b6:	eef1 7a67 	vneg.f32	s15, s15
 80036ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036c2:	d80b      	bhi.n	80036dc <_Z10Unwrappingv+0xa4>
			P0 = P_0 + P_max;
 80036c4:	4b31      	ldr	r3, [pc, #196]	; (800378c <_Z10Unwrappingv+0x154>)
 80036c6:	ed93 7a00 	vldr	s14, [r3]
 80036ca:	4b31      	ldr	r3, [pc, #196]	; (8003790 <_Z10Unwrappingv+0x158>)
 80036cc:	edd3 7a00 	vldr	s15, [r3]
 80036d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036d4:	4b2f      	ldr	r3, [pc, #188]	; (8003794 <_Z10Unwrappingv+0x15c>)
 80036d6:	edc3 7a00 	vstr	s15, [r3]
 80036da:	e01f      	b.n	800371c <_Z10Unwrappingv+0xe4>
		}
		else if(Pn - P_n >= e){
 80036dc:	4b28      	ldr	r3, [pc, #160]	; (8003780 <_Z10Unwrappingv+0x148>)
 80036de:	ed93 7a00 	vldr	s14, [r3]
 80036e2:	4b28      	ldr	r3, [pc, #160]	; (8003784 <_Z10Unwrappingv+0x14c>)
 80036e4:	edd3 7a00 	vldr	s15, [r3]
 80036e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80036ec:	4b26      	ldr	r3, [pc, #152]	; (8003788 <_Z10Unwrappingv+0x150>)
 80036ee:	edd3 7a00 	vldr	s15, [r3]
 80036f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036fa:	db0b      	blt.n	8003714 <_Z10Unwrappingv+0xdc>
			P0 = P_0 - P_max;
 80036fc:	4b23      	ldr	r3, [pc, #140]	; (800378c <_Z10Unwrappingv+0x154>)
 80036fe:	ed93 7a00 	vldr	s14, [r3]
 8003702:	4b23      	ldr	r3, [pc, #140]	; (8003790 <_Z10Unwrappingv+0x158>)
 8003704:	edd3 7a00 	vldr	s15, [r3]
 8003708:	ee77 7a67 	vsub.f32	s15, s14, s15
 800370c:	4b21      	ldr	r3, [pc, #132]	; (8003794 <_Z10Unwrappingv+0x15c>)
 800370e:	edc3 7a00 	vstr	s15, [r3]
 8003712:	e003      	b.n	800371c <_Z10Unwrappingv+0xe4>
		}
		else{
			P0 = P_0;
 8003714:	4b1d      	ldr	r3, [pc, #116]	; (800378c <_Z10Unwrappingv+0x154>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a1e      	ldr	r2, [pc, #120]	; (8003794 <_Z10Unwrappingv+0x15c>)
 800371a:	6013      	str	r3, [r2, #0]
		}

		OutUnwrap = Pn + P0;
 800371c:	4b18      	ldr	r3, [pc, #96]	; (8003780 <_Z10Unwrappingv+0x148>)
 800371e:	ed93 7a00 	vldr	s14, [r3]
 8003722:	4b1c      	ldr	r3, [pc, #112]	; (8003794 <_Z10Unwrappingv+0x15c>)
 8003724:	edd3 7a00 	vldr	s15, [r3]
 8003728:	ee77 7a27 	vadd.f32	s15, s14, s15
 800372c:	4b1a      	ldr	r3, [pc, #104]	; (8003798 <_Z10Unwrappingv+0x160>)
 800372e:	edc3 7a00 	vstr	s15, [r3]
		CurrentEn = BinPosXI * 0.006136;
 8003732:	4b12      	ldr	r3, [pc, #72]	; (800377c <_Z10Unwrappingv+0x144>)
 8003734:	881b      	ldrh	r3, [r3, #0]
 8003736:	4618      	mov	r0, r3
 8003738:	f7fc fef4 	bl	8000524 <__aeabi_i2d>
 800373c:	a30c      	add	r3, pc, #48	; (adr r3, 8003770 <_Z10Unwrappingv+0x138>)
 800373e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003742:	f7fc ff59 	bl	80005f8 <__aeabi_dmul>
 8003746:	4602      	mov	r2, r0
 8003748:	460b      	mov	r3, r1
 800374a:	4610      	mov	r0, r2
 800374c:	4619      	mov	r1, r3
 800374e:	f7fd fa03 	bl	8000b58 <__aeabi_d2f>
 8003752:	4603      	mov	r3, r0
 8003754:	4a11      	ldr	r2, [pc, #68]	; (800379c <_Z10Unwrappingv+0x164>)
 8003756:	6013      	str	r3, [r2, #0]
		P_n = Pn;
 8003758:	4b09      	ldr	r3, [pc, #36]	; (8003780 <_Z10Unwrappingv+0x148>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a09      	ldr	r2, [pc, #36]	; (8003784 <_Z10Unwrappingv+0x14c>)
 800375e:	6013      	str	r3, [r2, #0]
		P_0 = P0;
 8003760:	4b0c      	ldr	r3, [pc, #48]	; (8003794 <_Z10Unwrappingv+0x15c>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a09      	ldr	r2, [pc, #36]	; (800378c <_Z10Unwrappingv+0x154>)
 8003766:	6013      	str	r3, [r2, #0]
	}
}
 8003768:	bf00      	nop
 800376a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800376e:	bf00      	nop
 8003770:	f540895d 	.word	0xf540895d
 8003774:	3f79220f 	.word	0x3f79220f
 8003778:	200006e8 	.word	0x200006e8
 800377c:	20000570 	.word	0x20000570
 8003780:	200006d8 	.word	0x200006d8
 8003784:	200006dc 	.word	0x200006dc
 8003788:	2000019c 	.word	0x2000019c
 800378c:	200006d4 	.word	0x200006d4
 8003790:	20000198 	.word	0x20000198
 8003794:	200006d0 	.word	0x200006d0
 8003798:	200006e0 	.word	0x200006e0
 800379c:	200006e4 	.word	0x200006e4

080037a0 <_Z12Kalmanfilterv>:
	}
}


/////////////////////////// [Kalman Filter] ///////////////////////
void Kalmanfilter(){
 80037a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80037a4:	b0d2      	sub	sp, #328	; 0x148
 80037a6:	af00      	add	r7, sp, #0

	if(micros() - TimeStampKalman >= 10000){
 80037a8:	f000 fcf4 	bl	8004194 <_Z6microsv>
 80037ac:	4602      	mov	r2, r0
 80037ae:	460b      	mov	r3, r1
 80037b0:	4992      	ldr	r1, [pc, #584]	; (80039fc <_Z12Kalmanfilterv+0x25c>)
 80037b2:	6809      	ldr	r1, [r1, #0]
 80037b4:	2000      	movs	r0, #0
 80037b6:	4688      	mov	r8, r1
 80037b8:	4681      	mov	r9, r0
 80037ba:	ebb2 0408 	subs.w	r4, r2, r8
 80037be:	eb63 0509 	sbc.w	r5, r3, r9
 80037c2:	f242 7310 	movw	r3, #10000	; 0x2710
 80037c6:	429c      	cmp	r4, r3
 80037c8:	f175 0300 	sbcs.w	r3, r5, #0
 80037cc:	bf2c      	ite	cs
 80037ce:	2301      	movcs	r3, #1
 80037d0:	2300      	movcc	r3, #0
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	f000 810a 	beq.w	80039ee <_Z12Kalmanfilterv+0x24e>
		 TimeStampKalman = micros();
 80037da:	f000 fcdb 	bl	8004194 <_Z6microsv>
 80037de:	4602      	mov	r2, r0
 80037e0:	460b      	mov	r3, r1
 80037e2:	4b86      	ldr	r3, [pc, #536]	; (80039fc <_Z12Kalmanfilterv+0x25c>)
 80037e4:	601a      	str	r2, [r3, #0]
	//if(millis() - TimeStampKalman >= 10){
	//	TimeStampKalman = millis();
		 ////////// Predict ////////////////////
		 Q = G*Q1*G.transpose();
 80037e6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80037ea:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80037ee:	4a84      	ldr	r2, [pc, #528]	; (8003a00 <_Z12Kalmanfilterv+0x260>)
 80037f0:	4984      	ldr	r1, [pc, #528]	; (8003a04 <_Z12Kalmanfilterv+0x264>)
 80037f2:	4618      	mov	r0, r3
 80037f4:	f000 ffa6 	bl	8004744 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEmlIfEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNS6_18promote_scalar_argIfT_XsrNS6_14has_ReturnTypeINS_20ScalarBinaryOpTraitsIfS9_NS7_IfS9_EEEEEE5valueEE4typeEEEKS2_KNS6_19plain_constant_typeIS2_SG_E4typeEEERKS9_>
 80037f8:	4882      	ldr	r0, [pc, #520]	; (8003a04 <_Z12Kalmanfilterv+0x264>)
 80037fa:	f000 ffdc 	bl	80047b6 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE9transposeEv>
 80037fe:	4602      	mov	r2, r0
 8003800:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003804:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003808:	601a      	str	r2, [r3, #0]
 800380a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800380e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003812:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003816:	f107 0114 	add.w	r1, r7, #20
 800381a:	4618      	mov	r0, r3
 800381c:	f000 fffd 	bl	800481a <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEEmlINS_9TransposeIS6_EEEEKNS_7ProductISD_T_Li0EEERKNS0_ISJ_EE>
 8003820:	463b      	mov	r3, r7
 8003822:	4619      	mov	r1, r3
 8003824:	4878      	ldr	r0, [pc, #480]	; (8003a08 <_Z12Kalmanfilterv+0x268>)
 8003826:	f001 f80f 	bl	8004848 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEaSINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS0_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS5_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEEEERS1_RKNS_9DenseBaseIT_EE>
		 X = A*X1 ;
 800382a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800382e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003832:	4a76      	ldr	r2, [pc, #472]	; (8003a0c <_Z12Kalmanfilterv+0x26c>)
 8003834:	4976      	ldr	r1, [pc, #472]	; (8003a10 <_Z12Kalmanfilterv+0x270>)
 8003836:	4618      	mov	r0, r3
 8003838:	f001 f815 	bl	8004866 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmlINS1_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>
 800383c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003840:	4619      	mov	r1, r3
 8003842:	4874      	ldr	r0, [pc, #464]	; (8003a14 <_Z12Kalmanfilterv+0x274>)
 8003844:	f001 f826 	bl	8004894 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEaSINS_7ProductINS0_IfLi3ELi3ELi0ELi3ELi3EEES1_Li0EEEEERS1_RKNS_9DenseBaseIT_EE>
		 P = A*O*A.transpose()+Q;
 8003848:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800384c:	4a72      	ldr	r2, [pc, #456]	; (8003a18 <_Z12Kalmanfilterv+0x278>)
 800384e:	4970      	ldr	r1, [pc, #448]	; (8003a10 <_Z12Kalmanfilterv+0x270>)
 8003850:	4618      	mov	r0, r3
 8003852:	f001 f82e 	bl	80048b2 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmlIS2_EEKNS_7ProductIS2_T_Li0EEERKNS0_IS6_EE>
 8003856:	486e      	ldr	r0, [pc, #440]	; (8003a10 <_Z12Kalmanfilterv+0x270>)
 8003858:	f001 f842 	bl	80048e0 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE9transposeEv>
 800385c:	4603      	mov	r3, r0
 800385e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003860:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003864:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003868:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800386c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8003870:	4618      	mov	r0, r3
 8003872:	f001 f848 	bl	8004906 <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEmlINS_9TransposeIS3_EEEEKNS1_IS4_T_Li0EEERKNS0_IS9_EE>
 8003876:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800387a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800387e:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8003882:	4a61      	ldr	r2, [pc, #388]	; (8003a08 <_Z12Kalmanfilterv+0x268>)
 8003884:	4618      	mov	r0, r3
 8003886:	f001 f855 	bl	8004934 <_ZNK5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEEplIS3_EEKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIfNSB_6traitsIT_E6ScalarEEEKS7_KSE_EERKNS0_ISE_EE>
 800388a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800388e:	4619      	mov	r1, r3
 8003890:	4862      	ldr	r0, [pc, #392]	; (8003a1c <_Z12Kalmanfilterv+0x27c>)
 8003892:	f001 f86d 	bl	8004970 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEaSINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS7_IS1_S1_Li0EEENS_9TransposeIS1_EELi0EEEKS1_EEEERS1_RKNS_9DenseBaseIT_EE>

		 //////////////// Update /////////////////////
	     Z << OutUnwrap ;
 8003896:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800389a:	4a61      	ldr	r2, [pc, #388]	; (8003a20 <_Z12Kalmanfilterv+0x280>)
 800389c:	4961      	ldr	r1, [pc, #388]	; (8003a24 <_Z12Kalmanfilterv+0x284>)
 800389e:	4618      	mov	r0, r3
 80038a0:	f000 fe66 	bl	8004570 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEElsERKf>
 80038a4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80038a8:	4618      	mov	r0, r3
 80038aa:	f000 fe70 	bl	800458e <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
	//     Z << DiffVelo ;
		 K = (P*C.transpose())*(C*P*C.transpose()+R).inverse();
 80038ae:	485e      	ldr	r0, [pc, #376]	; (8003a28 <_Z12Kalmanfilterv+0x288>)
 80038b0:	f001 f86d 	bl	800498e <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE9transposeEv>
 80038b4:	4603      	mov	r3, r0
 80038b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80038ba:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80038be:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80038c2:	4956      	ldr	r1, [pc, #344]	; (8003a1c <_Z12Kalmanfilterv+0x27c>)
 80038c4:	4618      	mov	r0, r3
 80038c6:	f001 f875 	bl	80049b4 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmlINS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS9_EE>
 80038ca:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80038ce:	4a53      	ldr	r2, [pc, #332]	; (8003a1c <_Z12Kalmanfilterv+0x27c>)
 80038d0:	4955      	ldr	r1, [pc, #340]	; (8003a28 <_Z12Kalmanfilterv+0x288>)
 80038d2:	4618      	mov	r0, r3
 80038d4:	f001 f885 	bl	80049e2 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEmlINS1_IfLi3ELi3ELi0ELi3ELi3EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>
 80038d8:	4853      	ldr	r0, [pc, #332]	; (8003a28 <_Z12Kalmanfilterv+0x288>)
 80038da:	f001 f858 	bl	800498e <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE9transposeEv>
 80038de:	4603      	mov	r3, r0
 80038e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80038e4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80038e8:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 80038ec:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 80038f0:	4618      	mov	r0, r3
 80038f2:	f001 f88d 	bl	8004a10 <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEmlINS_9TransposeIS3_EEEEKNS1_IS5_T_Li0EEERKNS0_ISA_EE>
 80038f6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80038fa:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 80038fe:	4a4b      	ldr	r2, [pc, #300]	; (8003a2c <_Z12Kalmanfilterv+0x28c>)
 8003900:	4618      	mov	r0, r3
 8003902:	f001 f89c 	bl	8004a3e <_ZNK5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEEplINS2_IfLi1ELi1ELi0ELi1ELi1EEEEEKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIfNSD_6traitsIT_E6ScalarEEEKS8_KSG_EERKNS0_ISG_EE>
 8003906:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800390a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800390e:	4611      	mov	r1, r2
 8003910:	4618      	mov	r0, r3
 8003912:	f001 f8ef 	bl	8004af4 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7inverseEv>
 8003916:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800391a:	f107 0294 	add.w	r2, r7, #148	; 0x94
 800391e:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8003922:	4618      	mov	r0, r3
 8003924:	f001 f91e 	bl	8004b64 <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEmlINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEEKNS1_IS7_T_Li0EEERKNS0_ISM_EE>
 8003928:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800392c:	4619      	mov	r1, r3
 800392e:	4840      	ldr	r0, [pc, #256]	; (8003a30 <_Z12Kalmanfilterv+0x290>)
 8003930:	f001 f92f 	bl	8004b92 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEaSINS_7ProductINS3_INS0_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS0_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS3_INS3_IS6_S4_Li0EEES7_Li0EEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERS1_RKNS_9DenseBaseIT_EE>
		 X1 = X+K*(Z-C*X);
 8003934:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8003938:	4a36      	ldr	r2, [pc, #216]	; (8003a14 <_Z12Kalmanfilterv+0x274>)
 800393a:	493b      	ldr	r1, [pc, #236]	; (8003a28 <_Z12Kalmanfilterv+0x288>)
 800393c:	4618      	mov	r0, r3
 800393e:	f001 f937 	bl	8004bb0 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEmlINS1_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>
 8003942:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003946:	f507 728a 	add.w	r2, r7, #276	; 0x114
 800394a:	4936      	ldr	r1, [pc, #216]	; (8003a24 <_Z12Kalmanfilterv+0x284>)
 800394c:	4618      	mov	r0, r3
 800394e:	f001 f946 	bl	8004bde <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEmiINS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEKNS_13CwiseBinaryOpINS_8internal20scalar_difference_opIfNSA_6traitsIT_E6ScalarEEEKS2_KSD_EERKNS0_ISD_EE>
 8003952:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003956:	f507 7282 	add.w	r2, r7, #260	; 0x104
 800395a:	4935      	ldr	r1, [pc, #212]	; (8003a30 <_Z12Kalmanfilterv+0x290>)
 800395c:	4618      	mov	r0, r3
 800395e:	f001 f97b 	bl	8004c58 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEmlINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEEEEKNSB_IS2_T_Li0EEERKNS0_ISG_EE>
 8003962:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003966:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800396a:	492a      	ldr	r1, [pc, #168]	; (8003a14 <_Z12Kalmanfilterv+0x274>)
 800396c:	4618      	mov	r0, r3
 800396e:	f001 f9a0 	bl	8004cb2 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEplINS_7ProductIS2_NS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS5_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEEKNS6_INS7_13scalar_sum_opIfNS7_6traitsIT_E6ScalarEEEKS2_KSJ_EERKNS0_ISJ_EE>
 8003972:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003976:	4619      	mov	r1, r3
 8003978:	4824      	ldr	r0, [pc, #144]	; (8003a0c <_Z12Kalmanfilterv+0x26c>)
 800397a:	f001 f9b8 	bl	8004cee <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEaSINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS1_KNS_7ProductIS1_NS3_INS4_20scalar_difference_opIffEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS0_IfLi1ELi3ELi1ELi1ELi3EEES1_Li0EEEEELi0EEEEEEERS1_RKNS_9DenseBaseIT_EE>
		 O = (I-(K*C))*P;
 800397e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8003982:	4a29      	ldr	r2, [pc, #164]	; (8003a28 <_Z12Kalmanfilterv+0x288>)
 8003984:	492a      	ldr	r1, [pc, #168]	; (8003a30 <_Z12Kalmanfilterv+0x290>)
 8003986:	4618      	mov	r0, r3
 8003988:	f001 f9c0 	bl	8004d0c <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEmlINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>
 800398c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003990:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8003994:	4927      	ldr	r1, [pc, #156]	; (8003a34 <_Z12Kalmanfilterv+0x294>)
 8003996:	4618      	mov	r0, r3
 8003998:	f001 f9cf 	bl	8004d3a <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmiINS_7ProductINS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEKNS_13CwiseBinaryOpINS_8internal20scalar_difference_opIfNSA_6traitsIT_E6ScalarEEEKS2_KSD_EERKNS0_ISD_EE>
 800399c:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80039a0:	f507 7198 	add.w	r1, r7, #304	; 0x130
 80039a4:	4a1d      	ldr	r2, [pc, #116]	; (8003a1c <_Z12Kalmanfilterv+0x27c>)
 80039a6:	4618      	mov	r0, r3
 80039a8:	f001 fa04 	bl	8004db4 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEmlIS6_EEKNS8_ISD_T_Li0EEERKNS0_ISG_EE>
 80039ac:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80039b0:	4619      	mov	r1, r3
 80039b2:	4819      	ldr	r0, [pc, #100]	; (8003a18 <_Z12Kalmanfilterv+0x278>)
 80039b4:	f001 fa15 	bl	8004de2 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEaSINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS3_INS0_IfLi3ELi1ELi0ELi3ELi1EEENS0_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES1_Li0EEEEERS1_RKNS_9DenseBaseIT_EE>

		 KalP = X(0,0);
 80039b8:	2200      	movs	r2, #0
 80039ba:	2100      	movs	r1, #0
 80039bc:	4815      	ldr	r0, [pc, #84]	; (8003a14 <_Z12Kalmanfilterv+0x274>)
 80039be:	f000 fe7d 	bl	80046bc <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>
 80039c2:	4603      	mov	r3, r0
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a1c      	ldr	r2, [pc, #112]	; (8003a38 <_Z12Kalmanfilterv+0x298>)
 80039c8:	6013      	str	r3, [r2, #0]
		 KalV = X(1,0);
 80039ca:	2200      	movs	r2, #0
 80039cc:	2101      	movs	r1, #1
 80039ce:	4811      	ldr	r0, [pc, #68]	; (8003a14 <_Z12Kalmanfilterv+0x274>)
 80039d0:	f000 fe74 	bl	80046bc <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>
 80039d4:	4603      	mov	r3, r0
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a18      	ldr	r2, [pc, #96]	; (8003a3c <_Z12Kalmanfilterv+0x29c>)
 80039da:	6013      	str	r3, [r2, #0]
		 KalA = X(2,0);
 80039dc:	2200      	movs	r2, #0
 80039de:	2102      	movs	r1, #2
 80039e0:	480c      	ldr	r0, [pc, #48]	; (8003a14 <_Z12Kalmanfilterv+0x274>)
 80039e2:	f000 fe6b 	bl	80046bc <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>
 80039e6:	4603      	mov	r3, r0
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a15      	ldr	r2, [pc, #84]	; (8003a40 <_Z12Kalmanfilterv+0x2a0>)
 80039ec:	6013      	str	r3, [r2, #0]
		 //runtime = micros()-TimeStampKalman;

	     //ErrPos[0] = TargetDeg - BinPosXI*0.006136;
	 }

}
 80039ee:	bf00      	nop
 80039f0:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 80039f4:	46bd      	mov	sp, r7
 80039f6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80039fa:	bf00      	nop
 80039fc:	200005b4 	.word	0x200005b4
 8003a00:	20000194 	.word	0x20000194
 8003a04:	20000670 	.word	0x20000670
 8003a08:	2000067c 	.word	0x2000067c
 8003a0c:	200006ac 	.word	0x200006ac
 8003a10:	200005b8 	.word	0x200005b8
 8003a14:	200006a0 	.word	0x200006a0
 8003a18:	20000600 	.word	0x20000600
 8003a1c:	200005dc 	.word	0x200005dc
 8003a20:	200006e0 	.word	0x200006e0
 8003a24:	20000654 	.word	0x20000654
 8003a28:	20000664 	.word	0x20000664
 8003a2c:	2000064c 	.word	0x2000064c
 8003a30:	20000658 	.word	0x20000658
 8003a34:	20000624 	.word	0x20000624
 8003a38:	200006c4 	.word	0x200006c4
 8003a3c:	200006c8 	.word	0x200006c8
 8003a40:	200006cc 	.word	0x200006cc

08003a44 <_Z11PIDPositionv>:

///////////////////// [PID cat cat Zero] /////////////////////////////
void PIDPosition(){
 8003a44:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003a48:	af00      	add	r7, sp, #0
	/*CrrntTime = micros();
	//DeltaTime = (CrrntTime - PreviTime) / 1000000.0; // seconds
	PreviTime = CrrntTime; // log previ here for next loop
	*/
	if(micros() - TimeStampPID_P >= 10000){
 8003a4a:	f000 fba3 	bl	8004194 <_Z6microsv>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	460b      	mov	r3, r1
 8003a52:	4936      	ldr	r1, [pc, #216]	; (8003b2c <_Z11PIDPositionv+0xe8>)
 8003a54:	6809      	ldr	r1, [r1, #0]
 8003a56:	2000      	movs	r0, #0
 8003a58:	4688      	mov	r8, r1
 8003a5a:	4681      	mov	r9, r0
 8003a5c:	ebb2 0408 	subs.w	r4, r2, r8
 8003a60:	eb63 0509 	sbc.w	r5, r3, r9
 8003a64:	f242 7310 	movw	r3, #10000	; 0x2710
 8003a68:	429c      	cmp	r4, r3
 8003a6a:	f175 0300 	sbcs.w	r3, r5, #0
 8003a6e:	bf2c      	ite	cs
 8003a70:	2301      	movcs	r3, #1
 8003a72:	2300      	movcc	r3, #0
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d055      	beq.n	8003b26 <_Z11PIDPositionv+0xe2>
		TimeStampPID_P = micros();
 8003a7a:	f000 fb8b 	bl	8004194 <_Z6microsv>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	460b      	mov	r3, r1
 8003a82:	4b2a      	ldr	r3, [pc, #168]	; (8003b2c <_Z11PIDPositionv+0xe8>)
 8003a84:	601a      	str	r2, [r3, #0]

	//if(millis() - TimeStampPID_P >= 10){
	//	TimeStampPID_P = millis();

		ErrPos[0] = OutPosition - KalP;
 8003a86:	4b2a      	ldr	r3, [pc, #168]	; (8003b30 <_Z11PIDPositionv+0xec>)
 8003a88:	ed93 7a00 	vldr	s14, [r3]
 8003a8c:	4b29      	ldr	r3, [pc, #164]	; (8003b34 <_Z11PIDPositionv+0xf0>)
 8003a8e:	edd3 7a00 	vldr	s15, [r3]
 8003a92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a96:	4b28      	ldr	r3, [pc, #160]	; (8003b38 <_Z11PIDPositionv+0xf4>)
 8003a98:	edc3 7a00 	vstr	s15, [r3]
	//	ErrPos[0] = OutVelocity - KalV;
		sumError = sumError + ErrPos[0];
 8003a9c:	4b26      	ldr	r3, [pc, #152]	; (8003b38 <_Z11PIDPositionv+0xf4>)
 8003a9e:	ed93 7a00 	vldr	s14, [r3]
 8003aa2:	4b26      	ldr	r3, [pc, #152]	; (8003b3c <_Z11PIDPositionv+0xf8>)
 8003aa4:	edd3 7a00 	vldr	s15, [r3]
 8003aa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003aac:	4b23      	ldr	r3, [pc, #140]	; (8003b3c <_Z11PIDPositionv+0xf8>)
 8003aae:	edc3 7a00 	vstr	s15, [r3]

		Propo = K_P * ErrPos[0];
 8003ab2:	4b21      	ldr	r3, [pc, #132]	; (8003b38 <_Z11PIDPositionv+0xf4>)
 8003ab4:	ed93 7a00 	vldr	s14, [r3]
 8003ab8:	4b21      	ldr	r3, [pc, #132]	; (8003b40 <_Z11PIDPositionv+0xfc>)
 8003aba:	edd3 7a00 	vldr	s15, [r3]
 8003abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ac2:	4b20      	ldr	r3, [pc, #128]	; (8003b44 <_Z11PIDPositionv+0x100>)
 8003ac4:	edc3 7a00 	vstr	s15, [r3]

		Integral = K_I * sumError; // Integral -Newton-Leibniz
 8003ac8:	4b1f      	ldr	r3, [pc, #124]	; (8003b48 <_Z11PIDPositionv+0x104>)
 8003aca:	ed93 7a00 	vldr	s14, [r3]
 8003ace:	4b1b      	ldr	r3, [pc, #108]	; (8003b3c <_Z11PIDPositionv+0xf8>)
 8003ad0:	edd3 7a00 	vldr	s15, [r3]
 8003ad4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ad8:	4b1c      	ldr	r3, [pc, #112]	; (8003b4c <_Z11PIDPositionv+0x108>)
 8003ada:	edc3 7a00 	vstr	s15, [r3]

		Derivate = K_D * (ErrPos[0]-ErrPos[1]); // d/dt position
 8003ade:	4b16      	ldr	r3, [pc, #88]	; (8003b38 <_Z11PIDPositionv+0xf4>)
 8003ae0:	ed93 7a00 	vldr	s14, [r3]
 8003ae4:	4b14      	ldr	r3, [pc, #80]	; (8003b38 <_Z11PIDPositionv+0xf4>)
 8003ae6:	edd3 7a01 	vldr	s15, [r3, #4]
 8003aea:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003aee:	4b18      	ldr	r3, [pc, #96]	; (8003b50 <_Z11PIDPositionv+0x10c>)
 8003af0:	edd3 7a00 	vldr	s15, [r3]
 8003af4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003af8:	4b16      	ldr	r3, [pc, #88]	; (8003b54 <_Z11PIDPositionv+0x110>)
 8003afa:	edc3 7a00 	vstr	s15, [r3]

		ufromposit = Propo + Integral + Derivate;
 8003afe:	4b11      	ldr	r3, [pc, #68]	; (8003b44 <_Z11PIDPositionv+0x100>)
 8003b00:	ed93 7a00 	vldr	s14, [r3]
 8003b04:	4b11      	ldr	r3, [pc, #68]	; (8003b4c <_Z11PIDPositionv+0x108>)
 8003b06:	edd3 7a00 	vldr	s15, [r3]
 8003b0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b0e:	4b11      	ldr	r3, [pc, #68]	; (8003b54 <_Z11PIDPositionv+0x110>)
 8003b10:	edd3 7a00 	vldr	s15, [r3]
 8003b14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b18:	4b0f      	ldr	r3, [pc, #60]	; (8003b58 <_Z11PIDPositionv+0x114>)
 8003b1a:	edc3 7a00 	vstr	s15, [r3]

		//u_contr = ufromposit ;
		ErrPos[1] = ErrPos[0]; // log previous error
 8003b1e:	4b06      	ldr	r3, [pc, #24]	; (8003b38 <_Z11PIDPositionv+0xf4>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a05      	ldr	r2, [pc, #20]	; (8003b38 <_Z11PIDPositionv+0xf4>)
 8003b24:	6053      	str	r3, [r2, #4]
	}
}
 8003b26:	bf00      	nop
 8003b28:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003b2c:	200006ec 	.word	0x200006ec
 8003b30:	20000590 	.word	0x20000590
 8003b34:	200006c4 	.word	0x200006c4
 8003b38:	200006f4 	.word	0x200006f4
 8003b3c:	20000700 	.word	0x20000700
 8003b40:	200001a0 	.word	0x200001a0
 8003b44:	20000704 	.word	0x20000704
 8003b48:	200001a4 	.word	0x200001a4
 8003b4c:	20000708 	.word	0x20000708
 8003b50:	200001a8 	.word	0x200001a8
 8003b54:	2000070c 	.word	0x2000070c
 8003b58:	200006fc 	.word	0x200006fc

08003b5c <_Z11PIDVelocityv>:

void PIDVelocity(){
 8003b5c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003b60:	af00      	add	r7, sp, #0

	if(micros() - TimeStampPID_V >= 10000){
 8003b62:	f000 fb17 	bl	8004194 <_Z6microsv>
 8003b66:	4602      	mov	r2, r0
 8003b68:	460b      	mov	r3, r1
 8003b6a:	4930      	ldr	r1, [pc, #192]	; (8003c2c <_Z11PIDVelocityv+0xd0>)
 8003b6c:	6809      	ldr	r1, [r1, #0]
 8003b6e:	2000      	movs	r0, #0
 8003b70:	4688      	mov	r8, r1
 8003b72:	4681      	mov	r9, r0
 8003b74:	ebb2 0408 	subs.w	r4, r2, r8
 8003b78:	eb63 0509 	sbc.w	r5, r3, r9
 8003b7c:	f242 7310 	movw	r3, #10000	; 0x2710
 8003b80:	429c      	cmp	r4, r3
 8003b82:	f175 0300 	sbcs.w	r3, r5, #0
 8003b86:	bf2c      	ite	cs
 8003b88:	2301      	movcs	r3, #1
 8003b8a:	2300      	movcc	r3, #0
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d048      	beq.n	8003c24 <_Z11PIDVelocityv+0xc8>
		TimeStampPID_V = micros();
 8003b92:	f000 faff 	bl	8004194 <_Z6microsv>
 8003b96:	4602      	mov	r2, r0
 8003b98:	460b      	mov	r3, r1
 8003b9a:	4b24      	ldr	r3, [pc, #144]	; (8003c2c <_Z11PIDVelocityv+0xd0>)
 8003b9c:	601a      	str	r2, [r3, #0]
		Vcontr[1] = Vcontr[0] ;
		ErrVelo[2] = ErrVelo[1] ;
		ErrVelo[1] = ErrVelo[0] ;
		*/

		ErrVelo[0] = OutVelocity + ufromposit - KalV;
 8003b9e:	4b24      	ldr	r3, [pc, #144]	; (8003c30 <_Z11PIDVelocityv+0xd4>)
 8003ba0:	ed93 7a00 	vldr	s14, [r3]
 8003ba4:	4b23      	ldr	r3, [pc, #140]	; (8003c34 <_Z11PIDVelocityv+0xd8>)
 8003ba6:	edd3 7a00 	vldr	s15, [r3]
 8003baa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003bae:	4b22      	ldr	r3, [pc, #136]	; (8003c38 <_Z11PIDVelocityv+0xdc>)
 8003bb0:	edd3 7a00 	vldr	s15, [r3]
 8003bb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003bb8:	4b20      	ldr	r3, [pc, #128]	; (8003c3c <_Z11PIDVelocityv+0xe0>)
 8003bba:	edc3 7a00 	vstr	s15, [r3]
		SumAll = SumAll + ErrVelo[0];
 8003bbe:	4b1f      	ldr	r3, [pc, #124]	; (8003c3c <_Z11PIDVelocityv+0xe0>)
 8003bc0:	ed93 7a00 	vldr	s14, [r3]
 8003bc4:	4b1e      	ldr	r3, [pc, #120]	; (8003c40 <_Z11PIDVelocityv+0xe4>)
 8003bc6:	edd3 7a00 	vldr	s15, [r3]
 8003bca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bce:	4b1c      	ldr	r3, [pc, #112]	; (8003c40 <_Z11PIDVelocityv+0xe4>)
 8003bd0:	edc3 7a00 	vstr	s15, [r3]

		u_contr = (K_P_V * ErrVelo[0])+(K_I_V * SumAll)+(K_D * (ErrVelo[0]-ErrVelo[1])) ;
 8003bd4:	4b19      	ldr	r3, [pc, #100]	; (8003c3c <_Z11PIDVelocityv+0xe0>)
 8003bd6:	ed93 7a00 	vldr	s14, [r3]
 8003bda:	4b1a      	ldr	r3, [pc, #104]	; (8003c44 <_Z11PIDVelocityv+0xe8>)
 8003bdc:	edd3 7a00 	vldr	s15, [r3]
 8003be0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003be4:	4b18      	ldr	r3, [pc, #96]	; (8003c48 <_Z11PIDVelocityv+0xec>)
 8003be6:	edd3 6a00 	vldr	s13, [r3]
 8003bea:	4b15      	ldr	r3, [pc, #84]	; (8003c40 <_Z11PIDVelocityv+0xe4>)
 8003bec:	edd3 7a00 	vldr	s15, [r3]
 8003bf0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003bf4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003bf8:	4b10      	ldr	r3, [pc, #64]	; (8003c3c <_Z11PIDVelocityv+0xe0>)
 8003bfa:	edd3 6a00 	vldr	s13, [r3]
 8003bfe:	4b0f      	ldr	r3, [pc, #60]	; (8003c3c <_Z11PIDVelocityv+0xe0>)
 8003c00:	edd3 7a01 	vldr	s15, [r3, #4]
 8003c04:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003c08:	4b10      	ldr	r3, [pc, #64]	; (8003c4c <_Z11PIDVelocityv+0xf0>)
 8003c0a:	edd3 7a00 	vldr	s15, [r3]
 8003c0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c16:	4b0e      	ldr	r3, [pc, #56]	; (8003c50 <_Z11PIDVelocityv+0xf4>)
 8003c18:	edc3 7a00 	vstr	s15, [r3]
		ErrVelo[1] = ErrVelo[0]; // log previous error
 8003c1c:	4b07      	ldr	r3, [pc, #28]	; (8003c3c <_Z11PIDVelocityv+0xe0>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a06      	ldr	r2, [pc, #24]	; (8003c3c <_Z11PIDVelocityv+0xe0>)
 8003c22:	6053      	str	r3, [r2, #4]
		}
}
 8003c24:	bf00      	nop
 8003c26:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003c2a:	bf00      	nop
 8003c2c:	2000072c 	.word	0x2000072c
 8003c30:	20000594 	.word	0x20000594
 8003c34:	200006fc 	.word	0x200006fc
 8003c38:	200006c8 	.word	0x200006c8
 8003c3c:	20000710 	.word	0x20000710
 8003c40:	20000728 	.word	0x20000728
 8003c44:	2000071c 	.word	0x2000071c
 8003c48:	20000720 	.word	0x20000720
 8003c4c:	200001a8 	.word	0x200001a8
 8003c50:	20000730 	.word	0x20000730
 8003c54:	00000000 	.word	0x00000000

08003c58 <_Z11controlloopv>:

void controlloop(){
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	af00      	add	r7, sp, #0

	if( abs( Finalposition - KalP) < 0.005 && abs(KalV) < 0.0005){
 8003c5c:	4b32      	ldr	r3, [pc, #200]	; (8003d28 <_Z11controlloopv+0xd0>)
 8003c5e:	ed93 7a00 	vldr	s14, [r3]
 8003c62:	4b32      	ldr	r3, [pc, #200]	; (8003d2c <_Z11controlloopv+0xd4>)
 8003c64:	edd3 7a00 	vldr	s15, [r3]
 8003c68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c6c:	eeb0 0a67 	vmov.f32	s0, s15
 8003c70:	f7fd f944 	bl	8000efc <_ZSt3absf>
 8003c74:	ee10 3a10 	vmov	r3, s0
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7fc fc65 	bl	8000548 <__aeabi_f2d>
 8003c7e:	a326      	add	r3, pc, #152	; (adr r3, 8003d18 <_Z11controlloopv+0xc0>)
 8003c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c84:	f7fc ff2a 	bl	8000adc <__aeabi_dcmplt>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d015      	beq.n	8003cba <_Z11controlloopv+0x62>
 8003c8e:	4b28      	ldr	r3, [pc, #160]	; (8003d30 <_Z11controlloopv+0xd8>)
 8003c90:	edd3 7a00 	vldr	s15, [r3]
 8003c94:	eeb0 0a67 	vmov.f32	s0, s15
 8003c98:	f7fd f930 	bl	8000efc <_ZSt3absf>
 8003c9c:	ee10 3a10 	vmov	r3, s0
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f7fc fc51 	bl	8000548 <__aeabi_f2d>
 8003ca6:	a31e      	add	r3, pc, #120	; (adr r3, 8003d20 <_Z11controlloopv+0xc8>)
 8003ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cac:	f7fc ff16 	bl	8000adc <__aeabi_dcmplt>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d001      	beq.n	8003cba <_Z11controlloopv+0x62>
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e000      	b.n	8003cbc <_Z11controlloopv+0x64>
 8003cba:	2300      	movs	r3, #0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d020      	beq.n	8003d02 <_Z11controlloopv+0xaa>
		PWMOut = 0;
 8003cc0:	4b1c      	ldr	r3, [pc, #112]	; (8003d34 <_Z11controlloopv+0xdc>)
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	801a      	strh	r2, [r3, #0]
		check = 8;
 8003cc6:	4b1c      	ldr	r3, [pc, #112]	; (8003d38 <_Z11controlloopv+0xe0>)
 8003cc8:	2208      	movs	r2, #8
 8003cca:	701a      	strb	r2, [r3, #0]

		ErrPos[0]=0;
 8003ccc:	4b1b      	ldr	r3, [pc, #108]	; (8003d3c <_Z11controlloopv+0xe4>)
 8003cce:	f04f 0200 	mov.w	r2, #0
 8003cd2:	601a      	str	r2, [r3, #0]
		ErrPos[1]=0;
 8003cd4:	4b19      	ldr	r3, [pc, #100]	; (8003d3c <_Z11controlloopv+0xe4>)
 8003cd6:	f04f 0200 	mov.w	r2, #0
 8003cda:	605a      	str	r2, [r3, #4]
		ErrVelo[0]=0;
 8003cdc:	4b18      	ldr	r3, [pc, #96]	; (8003d40 <_Z11controlloopv+0xe8>)
 8003cde:	f04f 0200 	mov.w	r2, #0
 8003ce2:	601a      	str	r2, [r3, #0]
		ErrVelo[1]=0;
 8003ce4:	4b16      	ldr	r3, [pc, #88]	; (8003d40 <_Z11controlloopv+0xe8>)
 8003ce6:	f04f 0200 	mov.w	r2, #0
 8003cea:	605a      	str	r2, [r3, #4]
		flagNewpos = 0;
 8003cec:	4b15      	ldr	r3, [pc, #84]	; (8003d44 <_Z11controlloopv+0xec>)
 8003cee:	2200      	movs	r2, #0
 8003cf0:	601a      	str	r2, [r3, #0]
		flag_finishTra = 1;
 8003cf2:	4b15      	ldr	r3, [pc, #84]	; (8003d48 <_Z11controlloopv+0xf0>)
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	701a      	strb	r2, [r3, #0]
		TimeinS = 0;
 8003cf8:	4b14      	ldr	r3, [pc, #80]	; (8003d4c <_Z11controlloopv+0xf4>)
 8003cfa:	f04f 0200 	mov.w	r2, #0
 8003cfe:	601a      	str	r2, [r3, #0]
	else{
		PIDPosition();
		PIDVelocity();
		MotDrvCytron();
	}
}
 8003d00:	e005      	b.n	8003d0e <_Z11controlloopv+0xb6>
		PIDPosition();
 8003d02:	f7ff fe9f 	bl	8003a44 <_Z11PIDPositionv>
		PIDVelocity();
 8003d06:	f7ff ff29 	bl	8003b5c <_Z11PIDVelocityv>
		MotDrvCytron();
 8003d0a:	f000 f821 	bl	8003d50 <_Z12MotDrvCytronv>
}
 8003d0e:	bf00      	nop
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	f3af 8000 	nop.w
 8003d18:	47ae147b 	.word	0x47ae147b
 8003d1c:	3f747ae1 	.word	0x3f747ae1
 8003d20:	d2f1a9fc 	.word	0xd2f1a9fc
 8003d24:	3f40624d 	.word	0x3f40624d
 8003d28:	20000580 	.word	0x20000580
 8003d2c:	200006c4 	.word	0x200006c4
 8003d30:	200006c8 	.word	0x200006c8
 8003d34:	20000574 	.word	0x20000574
 8003d38:	20000739 	.word	0x20000739
 8003d3c:	200006f4 	.word	0x200006f4
 8003d40:	20000710 	.word	0x20000710
 8003d44:	200005ac 	.word	0x200005ac
 8003d48:	20000504 	.word	0x20000504
 8003d4c:	200005a4 	.word	0x200005a4

08003d50 <_Z12MotDrvCytronv>:

void MotDrvCytron(){
 8003d50:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003d54:	af00      	add	r7, sp, #0
	//   direction chk
	//if(u_contr > 0){mot_dirctn= 0;}
	//else if(u_contr < 0) {mot_dirctn = 1;}
	//else{PWMOut = 0;}

	if(micros() - TimeDrive >= 10000){
 8003d56:	f000 fa1d 	bl	8004194 <_Z6microsv>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	4932      	ldr	r1, [pc, #200]	; (8003e28 <_Z12MotDrvCytronv+0xd8>)
 8003d60:	6809      	ldr	r1, [r1, #0]
 8003d62:	2000      	movs	r0, #0
 8003d64:	4688      	mov	r8, r1
 8003d66:	4681      	mov	r9, r0
 8003d68:	ebb2 0408 	subs.w	r4, r2, r8
 8003d6c:	eb63 0509 	sbc.w	r5, r3, r9
 8003d70:	f242 7310 	movw	r3, #10000	; 0x2710
 8003d74:	429c      	cmp	r4, r3
 8003d76:	f175 0300 	sbcs.w	r3, r5, #0
 8003d7a:	bf2c      	ite	cs
 8003d7c:	2301      	movcs	r3, #1
 8003d7e:	2300      	movcc	r3, #0
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d049      	beq.n	8003e1a <_Z12MotDrvCytronv+0xca>
			TimeDrive = micros();
 8003d86:	f000 fa05 	bl	8004194 <_Z6microsv>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	4b26      	ldr	r3, [pc, #152]	; (8003e28 <_Z12MotDrvCytronv+0xd8>)
 8003d90:	601a      	str	r2, [r3, #0]
			u_contr = u_contr * 833.3;
 8003d92:	4b26      	ldr	r3, [pc, #152]	; (8003e2c <_Z12MotDrvCytronv+0xdc>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7fc fbd6 	bl	8000548 <__aeabi_f2d>
 8003d9c:	a320      	add	r3, pc, #128	; (adr r3, 8003e20 <_Z12MotDrvCytronv+0xd0>)
 8003d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da2:	f7fc fc29 	bl	80005f8 <__aeabi_dmul>
 8003da6:	4602      	mov	r2, r0
 8003da8:	460b      	mov	r3, r1
 8003daa:	4610      	mov	r0, r2
 8003dac:	4619      	mov	r1, r3
 8003dae:	f7fc fed3 	bl	8000b58 <__aeabi_d2f>
 8003db2:	4603      	mov	r3, r0
 8003db4:	4a1d      	ldr	r2, [pc, #116]	; (8003e2c <_Z12MotDrvCytronv+0xdc>)
 8003db6:	6013      	str	r3, [r2, #0]
			// u_contr = 2500;
			if(u_contr > 0){
 8003db8:	4b1c      	ldr	r3, [pc, #112]	; (8003e2c <_Z12MotDrvCytronv+0xdc>)
 8003dba:	edd3 7a00 	vldr	s15, [r3]
 8003dbe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dc6:	dd03      	ble.n	8003dd0 <_Z12MotDrvCytronv+0x80>
				mot_dirctn= 1;
 8003dc8:	4b19      	ldr	r3, [pc, #100]	; (8003e30 <_Z12MotDrvCytronv+0xe0>)
 8003dca:	2201      	movs	r2, #1
 8003dcc:	701a      	strb	r2, [r3, #0]
 8003dce:	e00e      	b.n	8003dee <_Z12MotDrvCytronv+0x9e>
			}
			else if(u_contr < 0) {
 8003dd0:	4b16      	ldr	r3, [pc, #88]	; (8003e2c <_Z12MotDrvCytronv+0xdc>)
 8003dd2:	edd3 7a00 	vldr	s15, [r3]
 8003dd6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dde:	d503      	bpl.n	8003de8 <_Z12MotDrvCytronv+0x98>
				mot_dirctn = 0;
 8003de0:	4b13      	ldr	r3, [pc, #76]	; (8003e30 <_Z12MotDrvCytronv+0xe0>)
 8003de2:	2200      	movs	r2, #0
 8003de4:	701a      	strb	r2, [r3, #0]
 8003de6:	e002      	b.n	8003dee <_Z12MotDrvCytronv+0x9e>
			}
			else{
				PWMOut = 0;
 8003de8:	4b12      	ldr	r3, [pc, #72]	; (8003e34 <_Z12MotDrvCytronv+0xe4>)
 8003dea:	2200      	movs	r2, #0
 8003dec:	801a      	strh	r2, [r3, #0]
			}
	// speed
	PWMOut= (int)fabsf(u_contr); // Absolute int
 8003dee:	4b0f      	ldr	r3, [pc, #60]	; (8003e2c <_Z12MotDrvCytronv+0xdc>)
 8003df0:	edd3 7a00 	vldr	s15, [r3]
 8003df4:	eef0 7ae7 	vabs.f32	s15, s15
 8003df8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003dfc:	ee17 3a90 	vmov	r3, s15
 8003e00:	b29a      	uxth	r2, r3
 8003e02:	4b0c      	ldr	r3, [pc, #48]	; (8003e34 <_Z12MotDrvCytronv+0xe4>)
 8003e04:	801a      	strh	r2, [r3, #0]
	if(PWMOut > 5000){PWMOut = 5000;} // saturate 50% gear 1:6 - 120rpm => 10rpm
 8003e06:	4b0b      	ldr	r3, [pc, #44]	; (8003e34 <_Z12MotDrvCytronv+0xe4>)
 8003e08:	881b      	ldrh	r3, [r3, #0]
 8003e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d903      	bls.n	8003e1a <_Z12MotDrvCytronv+0xca>
 8003e12:	4b08      	ldr	r3, [pc, #32]	; (8003e34 <_Z12MotDrvCytronv+0xe4>)
 8003e14:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e18:	801a      	strh	r2, [r3, #0]
	//if(PWMOut < 1600 ){PWMOut = 1600;} //pvnt too low pwm that can't drive mot
	//&& fabsf(ErrPos[0]) >= 4
	//if(flag_finishTra == 1){PWMOut = 0;}
	}
}
 8003e1a:	bf00      	nop
 8003e1c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003e20:	66666666 	.word	0x66666666
 8003e24:	408a0a66 	.word	0x408a0a66
 8003e28:	20000734 	.word	0x20000734
 8003e2c:	20000730 	.word	0x20000730
 8003e30:	2000057c 	.word	0x2000057c
 8003e34:	20000574 	.word	0x20000574

08003e38 <_Z13GraytoBinarioth>:

///////////////////// [Abs Encoder I2C] ////////////////////////////////////////////
////////// [Absolute Encoder] ////////////////////////////////////////////
uint16_t GraytoBinario(uint16_t grayx,uint8_t numbit){ // numbit=10
 8003e38:	b480      	push	{r7}
 8003e3a:	b087      	sub	sp, #28
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	4603      	mov	r3, r0
 8003e40:	460a      	mov	r2, r1
 8003e42:	80fb      	strh	r3, [r7, #6]
 8003e44:	4613      	mov	r3, r2
 8003e46:	717b      	strb	r3, [r7, #5]

	uint16_t binaryout = 0b0;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	82fb      	strh	r3, [r7, #22]

    binaryout = (grayx >> (numbit-1))&0x01;
 8003e4c:	88fa      	ldrh	r2, [r7, #6]
 8003e4e:	797b      	ldrb	r3, [r7, #5]
 8003e50:	3b01      	subs	r3, #1
 8003e52:	fa42 f303 	asr.w	r3, r2, r3
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	f003 0301 	and.w	r3, r3, #1
 8003e5c:	82fb      	strh	r3, [r7, #22]
    //std::cout << binaryout << std::endl;

    for (int i = 1; i < numbit ;i++){
 8003e5e:	2301      	movs	r3, #1
 8003e60:	613b      	str	r3, [r7, #16]
 8003e62:	797b      	ldrb	r3, [r7, #5]
 8003e64:	693a      	ldr	r2, [r7, #16]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	da1e      	bge.n	8003ea8 <_Z13GraytoBinarioth+0x70>
        /* XOR operation */
        int cp1 = binaryout&0x01 ;//>> (numbit-i)
 8003e6a:	8afb      	ldrh	r3, [r7, #22]
 8003e6c:	f003 0301 	and.w	r3, r3, #1
 8003e70:	60fb      	str	r3, [r7, #12]
        int cp2 = grayx >> (numbit-(i+1))&0x01; //
 8003e72:	88fa      	ldrh	r2, [r7, #6]
 8003e74:	7979      	ldrb	r1, [r7, #5]
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	3301      	adds	r3, #1
 8003e7a:	1acb      	subs	r3, r1, r3
 8003e7c:	fa42 f303 	asr.w	r3, r2, r3
 8003e80:	f003 0301 	and.w	r3, r3, #1
 8003e84:	60bb      	str	r3, [r7, #8]

        if (cp1 == cp2)
 8003e86:	68fa      	ldr	r2, [r7, #12]
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d103      	bne.n	8003e96 <_Z13GraytoBinarioth+0x5e>
            {binaryout = (binaryout << 1) + 0; } //qd = 0;
 8003e8e:	8afb      	ldrh	r3, [r7, #22]
 8003e90:	005b      	lsls	r3, r3, #1
 8003e92:	82fb      	strh	r3, [r7, #22]
 8003e94:	e004      	b.n	8003ea0 <_Z13GraytoBinarioth+0x68>
        else
            {binaryout = (binaryout << 1) + 1; } //qd = 1;
 8003e96:	8afb      	ldrh	r3, [r7, #22]
 8003e98:	005b      	lsls	r3, r3, #1
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	82fb      	strh	r3, [r7, #22]
    for (int i = 1; i < numbit ;i++){
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	613b      	str	r3, [r7, #16]
 8003ea6:	e7dc      	b.n	8003e62 <_Z13GraytoBinarioth+0x2a>
        //std::cout << "cp" << i << " " << cp1 << cp2 << " " << qd << "  "<<binaryout << std::endl;
    }
    //BinPos = binaryout;
    return binaryout;
 8003ea8:	8afb      	ldrh	r3, [r7, #22]
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	371c      	adds	r7, #28
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
	...

08003eb8 <_Z14IOExpenderInitv>:

void IOExpenderInit() {// call when start system
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af04      	add	r7, sp, #16
			0x00, 0x00, 0x00, 0x00,
			0x00, // 0x12 GPIOA
			0x00, // 0x13 GPIOB
			0x00, 0x00 };
	// OLATB -> Out data for pinB
	HAL_I2C_Mem_Write(&hi2c1, ADDR_IOXT, 0x00, I2C_MEMADD_SIZE_8BIT, Xetting,
 8003ebe:	2364      	movs	r3, #100	; 0x64
 8003ec0:	9302      	str	r3, [sp, #8]
 8003ec2:	2316      	movs	r3, #22
 8003ec4:	9301      	str	r3, [sp, #4]
 8003ec6:	4b05      	ldr	r3, [pc, #20]	; (8003edc <_Z14IOExpenderInitv+0x24>)
 8003ec8:	9300      	str	r3, [sp, #0]
 8003eca:	2301      	movs	r3, #1
 8003ecc:	2200      	movs	r2, #0
 8003ece:	2140      	movs	r1, #64	; 0x40
 8003ed0:	4803      	ldr	r0, [pc, #12]	; (8003ee0 <_Z14IOExpenderInitv+0x28>)
 8003ed2:	f013 fc9d 	bl	8017810 <HAL_I2C_Mem_Write>
			0x16, 100);

}
 8003ed6:	bf00      	nop
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	200001c8 	.word	0x200001c8
 8003ee0:	20000274 	.word	0x20000274

08003ee4 <_Z14AbsEncI2CReadxPh>:

void AbsEncI2CReadx(uint8_t *RawRAB){
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b086      	sub	sp, #24
 8003ee8:	af04      	add	r7, sp, #16
 8003eea:	6078      	str	r0, [r7, #4]

	if(flag_absenc != 0 && hi2c1.State == HAL_I2C_STATE_READY){
 8003eec:	4b22      	ldr	r3, [pc, #136]	; (8003f78 <_Z14AbsEncI2CReadxPh+0x94>)
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d007      	beq.n	8003f04 <_Z14AbsEncI2CReadxPh+0x20>
 8003ef4:	4b21      	ldr	r3, [pc, #132]	; (8003f7c <_Z14AbsEncI2CReadxPh+0x98>)
 8003ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	2b20      	cmp	r3, #32
 8003efe:	d101      	bne.n	8003f04 <_Z14AbsEncI2CReadxPh+0x20>
 8003f00:	2301      	movs	r3, #1
 8003f02:	e000      	b.n	8003f06 <_Z14AbsEncI2CReadxPh+0x22>
 8003f04:	2300      	movs	r3, #0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d032      	beq.n	8003f70 <_Z14AbsEncI2CReadxPh+0x8c>

		HAL_I2C_Mem_Read(&hi2c1, ADDR_IOXT, 0x12, I2C_MEMADD_SIZE_8BIT,
 8003f0a:	2364      	movs	r3, #100	; 0x64
 8003f0c:	9302      	str	r3, [sp, #8]
 8003f0e:	2302      	movs	r3, #2
 8003f10:	9301      	str	r3, [sp, #4]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	9300      	str	r3, [sp, #0]
 8003f16:	2301      	movs	r3, #1
 8003f18:	2212      	movs	r2, #18
 8003f1a:	2140      	movs	r1, #64	; 0x40
 8003f1c:	4817      	ldr	r0, [pc, #92]	; (8003f7c <_Z14AbsEncI2CReadxPh+0x98>)
 8003f1e:	f013 fd71 	bl	8017a04 <HAL_I2C_Mem_Read>
								RawRAB, 2, 100);

		GrayCBitXI = (RawEnBitAB[1] << 8) | RawEnBitAB[0]; // GrayCBitx
 8003f22:	4b17      	ldr	r3, [pc, #92]	; (8003f80 <_Z14AbsEncI2CReadxPh+0x9c>)
 8003f24:	785b      	ldrb	r3, [r3, #1]
 8003f26:	021b      	lsls	r3, r3, #8
 8003f28:	b21a      	sxth	r2, r3
 8003f2a:	4b15      	ldr	r3, [pc, #84]	; (8003f80 <_Z14AbsEncI2CReadxPh+0x9c>)
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	b21b      	sxth	r3, r3
 8003f30:	4313      	orrs	r3, r2
 8003f32:	b21b      	sxth	r3, r3
 8003f34:	b29a      	uxth	r2, r3
 8003f36:	4b13      	ldr	r3, [pc, #76]	; (8003f84 <_Z14AbsEncI2CReadxPh+0xa0>)
 8003f38:	801a      	strh	r2, [r3, #0]
		// 1023- to reverse
		BinPosXI = 1023 - (GraytoBinario(GrayCBitXI, 10) + POSOFFSET) ;//
 8003f3a:	4b12      	ldr	r3, [pc, #72]	; (8003f84 <_Z14AbsEncI2CReadxPh+0xa0>)
 8003f3c:	881b      	ldrh	r3, [r3, #0]
 8003f3e:	210a      	movs	r1, #10
 8003f40:	4618      	mov	r0, r3
 8003f42:	f7ff ff79 	bl	8003e38 <_Z13GraytoBinarioth>
 8003f46:	4603      	mov	r3, r0
 8003f48:	f1c3 0390 	rsb	r3, r3, #144	; 0x90
 8003f4c:	b29a      	uxth	r2, r3
 8003f4e:	4b0e      	ldr	r3, [pc, #56]	; (8003f88 <_Z14AbsEncI2CReadxPh+0xa4>)
 8003f50:	801a      	strh	r2, [r3, #0]
		if (BinPosXI >= 1024){BinPosXI %= 1024;}
 8003f52:	4b0d      	ldr	r3, [pc, #52]	; (8003f88 <_Z14AbsEncI2CReadxPh+0xa4>)
 8003f54:	881b      	ldrh	r3, [r3, #0]
 8003f56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f5a:	d306      	bcc.n	8003f6a <_Z14AbsEncI2CReadxPh+0x86>
 8003f5c:	4b0a      	ldr	r3, [pc, #40]	; (8003f88 <_Z14AbsEncI2CReadxPh+0xa4>)
 8003f5e:	881b      	ldrh	r3, [r3, #0]
 8003f60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f64:	b29a      	uxth	r2, r3
 8003f66:	4b08      	ldr	r3, [pc, #32]	; (8003f88 <_Z14AbsEncI2CReadxPh+0xa4>)
 8003f68:	801a      	strh	r2, [r3, #0]

		flag_absenc = 0;
 8003f6a:	4b03      	ldr	r3, [pc, #12]	; (8003f78 <_Z14AbsEncI2CReadxPh+0x94>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	701a      	strb	r2, [r3, #0]
//			flag_absenc = 0;
//		break;
//
//		}
	}
}
 8003f70:	bf00      	nop
 8003f72:	3708      	adds	r7, #8
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	20000572 	.word	0x20000572
 8003f7c:	20000274 	.word	0x20000274
 8003f80:	2000056c 	.word	0x2000056c
 8003f84:	2000056e 	.word	0x2000056e
 8003f88:	20000570 	.word	0x20000570

08003f8c <_Z13Efft_activatev>:

/////////////////////// [End Effector] //////////////////////////////////

void Efft_activate(){
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af02      	add	r7, sp, #8
	uint8_t cmmd = 0x45;
 8003f92:	2345      	movs	r3, #69	; 0x45
 8003f94:	71fb      	strb	r3, [r7, #7]

	static enum{ef_INIT, ef_shoot} efshoot = ef_INIT;


	switch(efshoot){
 8003f96:	4b25      	ldr	r3, [pc, #148]	; (800402c <_Z13Efft_activatev+0xa0>)
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d025      	beq.n	8003fea <_Z13Efft_activatev+0x5e>
	default:
	case ef_INIT:
		if(flag_efftDis == 1){
 8003f9e:	4b24      	ldr	r3, [pc, #144]	; (8004030 <_Z13Efft_activatev+0xa4>)
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d106      	bne.n	8003fb4 <_Z13Efft_activatev+0x28>
			flag_efftActi = 0;
 8003fa6:	4b23      	ldr	r3, [pc, #140]	; (8004034 <_Z13Efft_activatev+0xa8>)
 8003fa8:	2200      	movs	r2, #0
 8003faa:	701a      	strb	r2, [r3, #0]
			efshoot = ef_INIT;
 8003fac:	4b1f      	ldr	r3, [pc, #124]	; (800402c <_Z13Efft_activatev+0xa0>)
 8003fae:	2200      	movs	r2, #0
 8003fb0:	701a      	strb	r2, [r3, #0]
			//HAL_I2C_Master_Seq_Transmit_IT(&hi2c3, ADDR_EFFT, &cmmd, 1, I2C_FIRST_AND_LAST_FRAME);
			//HAL_I2C_Master_Transmit(&hi2c3, ADDR_EFFT, &cmmd, 2, 100);
			efshoot = ef_shoot;
			}
		}
	break;
 8003fb2:	e034      	b.n	800401e <_Z13Efft_activatev+0x92>
		if(flag_efftActi != 0 && hi2c3.State == HAL_I2C_STATE_READY){
 8003fb4:	4b1f      	ldr	r3, [pc, #124]	; (8004034 <_Z13Efft_activatev+0xa8>)
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d007      	beq.n	8003fcc <_Z13Efft_activatev+0x40>
 8003fbc:	4b1e      	ldr	r3, [pc, #120]	; (8004038 <_Z13Efft_activatev+0xac>)
 8003fbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	2b20      	cmp	r3, #32
 8003fc6:	d101      	bne.n	8003fcc <_Z13Efft_activatev+0x40>
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e000      	b.n	8003fce <_Z13Efft_activatev+0x42>
 8003fcc:	2300      	movs	r3, #0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d025      	beq.n	800401e <_Z13Efft_activatev+0x92>
			HAL_I2C_Master_Seq_Transmit_IT(&hi2c3, ADDR_EFFT, &cmmd, 0, I2C_FIRST_FRAME);
 8003fd2:	1dfa      	adds	r2, r7, #7
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	9300      	str	r3, [sp, #0]
 8003fd8:	2300      	movs	r3, #0
 8003fda:	2146      	movs	r1, #70	; 0x46
 8003fdc:	4816      	ldr	r0, [pc, #88]	; (8004038 <_Z13Efft_activatev+0xac>)
 8003fde:	f013 ff37 	bl	8017e50 <HAL_I2C_Master_Seq_Transmit_IT>
			efshoot = ef_shoot;
 8003fe2:	4b12      	ldr	r3, [pc, #72]	; (800402c <_Z13Efft_activatev+0xa0>)
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	701a      	strb	r2, [r3, #0]
	break;
 8003fe8:	e019      	b.n	800401e <_Z13Efft_activatev+0x92>

	case ef_shoot:
		if (hi2c3.State == HAL_I2C_STATE_READY){
 8003fea:	4b13      	ldr	r3, [pc, #76]	; (8004038 <_Z13Efft_activatev+0xac>)
 8003fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b20      	cmp	r3, #32
 8003ff4:	bf0c      	ite	eq
 8003ff6:	2301      	moveq	r3, #1
 8003ff8:	2300      	movne	r3, #0
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d010      	beq.n	8004022 <_Z13Efft_activatev+0x96>
			HAL_I2C_Master_Seq_Transmit_IT(&hi2c3, ADDR_EFFT, &cmmd, 1, I2C_LAST_FRAME);
 8004000:	1dfa      	adds	r2, r7, #7
 8004002:	2320      	movs	r3, #32
 8004004:	9300      	str	r3, [sp, #0]
 8004006:	2301      	movs	r3, #1
 8004008:	2146      	movs	r1, #70	; 0x46
 800400a:	480b      	ldr	r0, [pc, #44]	; (8004038 <_Z13Efft_activatev+0xac>)
 800400c:	f013 ff20 	bl	8017e50 <HAL_I2C_Master_Seq_Transmit_IT>
			efshoot = ef_INIT;
 8004010:	4b06      	ldr	r3, [pc, #24]	; (800402c <_Z13Efft_activatev+0xa0>)
 8004012:	2200      	movs	r2, #0
 8004014:	701a      	strb	r2, [r3, #0]
			flag_efftActi = 0;
 8004016:	4b07      	ldr	r3, [pc, #28]	; (8004034 <_Z13Efft_activatev+0xa8>)
 8004018:	2200      	movs	r2, #0
 800401a:	701a      	strb	r2, [r3, #0]
			//trig_efftRead = 1;
		}
	break;
 800401c:	e001      	b.n	8004022 <_Z13Efft_activatev+0x96>
	break;
 800401e:	bf00      	nop
 8004020:	e000      	b.n	8004024 <_Z13Efft_activatev+0x98>
	break;
 8004022:	bf00      	nop
	}
}
 8004024:	bf00      	nop
 8004026:	3708      	adds	r7, #8
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}
 800402c:	200007df 	.word	0x200007df
 8004030:	200001ac 	.word	0x200001ac
 8004034:	2000073b 	.word	0x2000073b
 8004038:	200002c8 	.word	0x200002c8

0800403c <_Z9Efft_readPh>:

void Efft_read(uint8_t *Rddata){
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af02      	add	r7, sp, #8
 8004042:	6078      	str	r0, [r7, #4]
		//HAL_I2C_Mem_Read(&hi2c1, ADDR_EFFT, &readRQ, I2C_MEMADD_SIZE_8BIT, Rddata, 1, 100);
		flag_efftRead = 0;
	}
	*/
	static uint8_t efrdStatus = 0;
	switch(efrdStatus){
 8004044:	4b1f      	ldr	r3, [pc, #124]	; (80040c4 <_Z9Efft_readPh+0x88>)
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	2b01      	cmp	r3, #1
 800404a:	d01a      	beq.n	8004082 <_Z9Efft_readPh+0x46>
	default:
	case 0:
		if (flag_efftRead != 0 && hi2c3.State == HAL_I2C_STATE_READY){
 800404c:	4b1e      	ldr	r3, [pc, #120]	; (80040c8 <_Z9Efft_readPh+0x8c>)
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d007      	beq.n	8004064 <_Z9Efft_readPh+0x28>
 8004054:	4b1d      	ldr	r3, [pc, #116]	; (80040cc <_Z9Efft_readPh+0x90>)
 8004056:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800405a:	b2db      	uxtb	r3, r3
 800405c:	2b20      	cmp	r3, #32
 800405e:	d101      	bne.n	8004064 <_Z9Efft_readPh+0x28>
 8004060:	2301      	movs	r3, #1
 8004062:	e000      	b.n	8004066 <_Z9Efft_readPh+0x2a>
 8004064:	2300      	movs	r3, #0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d025      	beq.n	80040b6 <_Z9Efft_readPh+0x7a>
			//HAL_I2C_Master_Transmit_IT(&hi2c3, ADDR_EFFT, 0x23, 1);
			HAL_I2C_Master_Seq_Transmit_IT(&hi2c3, ADDR_EFFT, &readRQ, 1, I2C_FIRST_AND_NEXT_FRAME);
 800406a:	2302      	movs	r3, #2
 800406c:	9300      	str	r3, [sp, #0]
 800406e:	2301      	movs	r3, #1
 8004070:	4a17      	ldr	r2, [pc, #92]	; (80040d0 <_Z9Efft_readPh+0x94>)
 8004072:	2146      	movs	r1, #70	; 0x46
 8004074:	4815      	ldr	r0, [pc, #84]	; (80040cc <_Z9Efft_readPh+0x90>)
 8004076:	f013 feeb 	bl	8017e50 <HAL_I2C_Master_Seq_Transmit_IT>
			//HAL_I2C_Master_Transmit(&hi2c3, ADDR_EFFT, &readRQ, 2, 100);
			//HAL_I2C_Master_Seq_Transmit_DMA(&hi2c3, ADDR_EFFT, &readRQ, 1, I2C_FIRST_AND_NEXT_FRAME);
			efrdStatus = 1;
 800407a:	4b12      	ldr	r3, [pc, #72]	; (80040c4 <_Z9Efft_readPh+0x88>)
 800407c:	2201      	movs	r2, #1
 800407e:	701a      	strb	r2, [r3, #0]
		}
	break;
 8004080:	e019      	b.n	80040b6 <_Z9Efft_readPh+0x7a>

	case 1:

		if (hi2c3.State == HAL_I2C_STATE_READY){
 8004082:	4b12      	ldr	r3, [pc, #72]	; (80040cc <_Z9Efft_readPh+0x90>)
 8004084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b20      	cmp	r3, #32
 800408c:	bf0c      	ite	eq
 800408e:	2301      	moveq	r3, #1
 8004090:	2300      	movne	r3, #0
 8004092:	b2db      	uxtb	r3, r3
 8004094:	2b00      	cmp	r3, #0
 8004096:	d010      	beq.n	80040ba <_Z9Efft_readPh+0x7e>
			HAL_I2C_Master_Seq_Receive_IT(&hi2c3, ADDR_EFFT, Rddata, 1, I2C_LAST_FRAME);
 8004098:	2320      	movs	r3, #32
 800409a:	9300      	str	r3, [sp, #0]
 800409c:	2301      	movs	r3, #1
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	2146      	movs	r1, #70	; 0x46
 80040a2:	480a      	ldr	r0, [pc, #40]	; (80040cc <_Z9Efft_readPh+0x90>)
 80040a4:	f013 ff9a 	bl	8017fdc <HAL_I2C_Master_Seq_Receive_IT>
			//HAL_I2C_Master_Seq_Receive_DMA(&hi2c3, ADDR_EFFT, Rddata, 1, I2C_LAST_FRAME);
			//HAL_I2C_Master_Receive(&hi2c3, ADDR_EFFT ,Rddata, 1, 100);
		flag_efftRead = 0;
 80040a8:	4b07      	ldr	r3, [pc, #28]	; (80040c8 <_Z9Efft_readPh+0x8c>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	701a      	strb	r2, [r3, #0]
		efrdStatus = 0;
 80040ae:	4b05      	ldr	r3, [pc, #20]	; (80040c4 <_Z9Efft_readPh+0x88>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	701a      	strb	r2, [r3, #0]
			}
	break;
 80040b4:	e001      	b.n	80040ba <_Z9Efft_readPh+0x7e>
	break;
 80040b6:	bf00      	nop
 80040b8:	e000      	b.n	80040bc <_Z9Efft_readPh+0x80>
	break;
 80040ba:	bf00      	nop
	}

}
 80040bc:	bf00      	nop
 80040be:	3708      	adds	r7, #8
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	200007e0 	.word	0x200007e0
 80040c8:	2000073c 	.word	0x2000073c
 80040cc:	200002c8 	.word	0x200002c8
 80040d0:	200001de 	.word	0x200001de

080040d4 <HAL_GPIO_EXTI_Callback>:

/////////////// Emer Interrupt /////////////////////////////////
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	4603      	mov	r3, r0
 80040dc:	80fb      	strh	r3, [r7, #6]
	//============// EMER ////=====================
	if(GPIO_Pin == GPIO_PIN_11){
 80040de:	88fb      	ldrh	r3, [r7, #6]
 80040e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040e4:	d108      	bne.n	80040f8 <HAL_GPIO_EXTI_Callback+0x24>
		//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
		grandState = emer;
 80040e6:	4b27      	ldr	r3, [pc, #156]	; (8004184 <HAL_GPIO_EXTI_Callback+0xb0>)
 80040e8:	2203      	movs	r2, #3
 80040ea:	701a      	strb	r2, [r3, #0]
		bluecounter = 0;
 80040ec:	4b26      	ldr	r3, [pc, #152]	; (8004188 <HAL_GPIO_EXTI_Callback+0xb4>)
 80040ee:	2200      	movs	r2, #0
 80040f0:	701a      	strb	r2, [r3, #0]
		PWMOut = 0;
 80040f2:	4b26      	ldr	r3, [pc, #152]	; (800418c <HAL_GPIO_EXTI_Callback+0xb8>)
 80040f4:	2200      	movs	r2, #0
 80040f6:	801a      	strh	r2, [r3, #0]
		// Motor Driver Torque Lock here
	}
	//=============// Stop ////======================
	if(GPIO_Pin == GPIO_PIN_10){
 80040f8:	88fb      	ldrh	r3, [r7, #6]
 80040fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040fe:	d110      	bne.n	8004122 <HAL_GPIO_EXTI_Callback+0x4e>
		PWMOut = 0;
 8004100:	4b22      	ldr	r3, [pc, #136]	; (800418c <HAL_GPIO_EXTI_Callback+0xb8>)
 8004102:	2200      	movs	r2, #0
 8004104:	801a      	strh	r2, [r3, #0]
		bluecounter = 0;
 8004106:	4b20      	ldr	r3, [pc, #128]	; (8004188 <HAL_GPIO_EXTI_Callback+0xb4>)
 8004108:	2200      	movs	r2, #0
 800410a:	701a      	strb	r2, [r3, #0]
		if(grandState == work){grandState = stopnd;}
 800410c:	4b1d      	ldr	r3, [pc, #116]	; (8004184 <HAL_GPIO_EXTI_Callback+0xb0>)
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	2b01      	cmp	r3, #1
 8004112:	d103      	bne.n	800411c <HAL_GPIO_EXTI_Callback+0x48>
 8004114:	4b1b      	ldr	r3, [pc, #108]	; (8004184 <HAL_GPIO_EXTI_Callback+0xb0>)
 8004116:	2204      	movs	r2, #4
 8004118:	701a      	strb	r2, [r3, #0]
 800411a:	e002      	b.n	8004122 <HAL_GPIO_EXTI_Callback+0x4e>
		else{grandState = stop;}
 800411c:	4b19      	ldr	r3, [pc, #100]	; (8004184 <HAL_GPIO_EXTI_Callback+0xb0>)
 800411e:	2202      	movs	r2, #2
 8004120:	701a      	strb	r2, [r3, #0]

		}
	//=========// work Blue button //=========//
	if(GPIO_Pin == GPIO_PIN_13){
 8004122:	88fb      	ldrh	r3, [r7, #6]
 8004124:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004128:	d120      	bne.n	800416c <HAL_GPIO_EXTI_Callback+0x98>
		bluecounter++;
 800412a:	4b17      	ldr	r3, [pc, #92]	; (8004188 <HAL_GPIO_EXTI_Callback+0xb4>)
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	3301      	adds	r3, #1
 8004130:	b2da      	uxtb	r2, r3
 8004132:	4b15      	ldr	r3, [pc, #84]	; (8004188 <HAL_GPIO_EXTI_Callback+0xb4>)
 8004134:	701a      	strb	r2, [r3, #0]

		////===== Zero Calibrate Func /////////////
		if (bluecounter % 2 == 0){
 8004136:	4b14      	ldr	r3, [pc, #80]	; (8004188 <HAL_GPIO_EXTI_Callback+0xb4>)
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	f003 0301 	and.w	r3, r3, #1
 800413e:	2b00      	cmp	r3, #0
 8004140:	d111      	bne.n	8004166 <HAL_GPIO_EXTI_Callback+0x92>
			PWMOut = 1100;
 8004142:	4b12      	ldr	r3, [pc, #72]	; (800418c <HAL_GPIO_EXTI_Callback+0xb8>)
 8004144:	f240 424c 	movw	r2, #1100	; 0x44c
 8004148:	801a      	strh	r2, [r3, #0]
			mot_dirctn++; mot_dirctn%=2;
 800414a:	4b11      	ldr	r3, [pc, #68]	; (8004190 <HAL_GPIO_EXTI_Callback+0xbc>)
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	3301      	adds	r3, #1
 8004150:	b2da      	uxtb	r2, r3
 8004152:	4b0f      	ldr	r3, [pc, #60]	; (8004190 <HAL_GPIO_EXTI_Callback+0xbc>)
 8004154:	701a      	strb	r2, [r3, #0]
 8004156:	4b0e      	ldr	r3, [pc, #56]	; (8004190 <HAL_GPIO_EXTI_Callback+0xbc>)
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	f003 0301 	and.w	r3, r3, #1
 800415e:	b2da      	uxtb	r2, r3
 8004160:	4b0b      	ldr	r3, [pc, #44]	; (8004190 <HAL_GPIO_EXTI_Callback+0xbc>)
 8004162:	701a      	strb	r2, [r3, #0]
 8004164:	e002      	b.n	800416c <HAL_GPIO_EXTI_Callback+0x98>

		}else{PWMOut = 0;}
 8004166:	4b09      	ldr	r3, [pc, #36]	; (800418c <HAL_GPIO_EXTI_Callback+0xb8>)
 8004168:	2200      	movs	r2, #0
 800416a:	801a      	strh	r2, [r3, #0]
		//flag_efftActi = 1;
		//trig_efftRead = 1;
	}

	//=============// setzero //================//
		if(GPIO_Pin == GPIO_PIN_2){
 800416c:	88fb      	ldrh	r3, [r7, #6]
 800416e:	2b04      	cmp	r3, #4
 8004170:	d102      	bne.n	8004178 <HAL_GPIO_EXTI_Callback+0xa4>
//			position_order = 0;
//			positionlog[position_order] = 0.00; // 0.000613 - 0.0122 => 1-2/1024
//			Velocity = 7.0;
//			grandState = SetZeroGr;

			grandState = SetZeroBf;
 8004172:	4b04      	ldr	r3, [pc, #16]	; (8004184 <HAL_GPIO_EXTI_Callback+0xb0>)
 8004174:	2206      	movs	r2, #6
 8004176:	701a      	strb	r2, [r3, #0]
		}
}
 8004178:	bf00      	nop
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr
 8004184:	200004fc 	.word	0x200004fc
 8004188:	200006f0 	.word	0x200006f0
 800418c:	20000574 	.word	0x20000574
 8004190:	2000057c 	.word	0x2000057c

08004194 <_Z6microsv>:

///////////////////////////////////// micro timer////////////////////////////////////
uint64_t micros()
{return _micros + htim11.Instance->CNT;}
 8004194:	b4b0      	push	{r4, r5, r7}
 8004196:	af00      	add	r7, sp, #0
 8004198:	4b09      	ldr	r3, [pc, #36]	; (80041c0 <_Z6microsv+0x2c>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419e:	2200      	movs	r2, #0
 80041a0:	4618      	mov	r0, r3
 80041a2:	4611      	mov	r1, r2
 80041a4:	4b07      	ldr	r3, [pc, #28]	; (80041c4 <_Z6microsv+0x30>)
 80041a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041aa:	1884      	adds	r4, r0, r2
 80041ac:	eb41 0503 	adc.w	r5, r1, r3
 80041b0:	4622      	mov	r2, r4
 80041b2:	462b      	mov	r3, r5
 80041b4:	4610      	mov	r0, r2
 80041b6:	4619      	mov	r1, r3
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bcb0      	pop	{r4, r5, r7}
 80041bc:	4770      	bx	lr
 80041be:	bf00      	nop
 80041c0:	200003ac 	.word	0x200003ac
 80041c4:	20000508 	.word	0x20000508

080041c8 <_Z6millisv>:
uint32_t millis()
{return _millis;}// + htim10.Instance->CNT
 80041c8:	b480      	push	{r7}
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	4b03      	ldr	r3, [pc, #12]	; (80041dc <_Z6millisv+0x14>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4618      	mov	r0, r3
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop
 80041dc:	20000510 	.word	0x20000510

080041e0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80041e0:	b4b0      	push	{r4, r5, r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 if(htim == &htim11)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a0e      	ldr	r2, [pc, #56]	; (8004224 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d10a      	bne.n	8004206 <HAL_TIM_PeriodElapsedCallback+0x26>
 {_micros += 65535;}
 80041f0:	4b0d      	ldr	r3, [pc, #52]	; (8004228 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80041f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80041fa:	1854      	adds	r4, r2, r1
 80041fc:	f143 0500 	adc.w	r5, r3, #0
 8004200:	4b09      	ldr	r3, [pc, #36]	; (8004228 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8004202:	e9c3 4500 	strd	r4, r5, [r3]
 if(htim == &htim10)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a08      	ldr	r2, [pc, #32]	; (800422c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d104      	bne.n	8004218 <HAL_TIM_PeriodElapsedCallback+0x38>
 {_millis++;}
 800420e:	4b08      	ldr	r3, [pc, #32]	; (8004230 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	3301      	adds	r3, #1
 8004214:	4a06      	ldr	r2, [pc, #24]	; (8004230 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8004216:	6013      	str	r3, [r2, #0]
}
 8004218:	bf00      	nop
 800421a:	370c      	adds	r7, #12
 800421c:	46bd      	mov	sp, r7
 800421e:	bcb0      	pop	{r4, r5, r7}
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop
 8004224:	200003ac 	.word	0x200003ac
 8004228:	20000508 	.word	0x20000508
 800422c:	20000364 	.word	0x20000364
 8004230:	20000510 	.word	0x20000510

08004234 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004234:	b480      	push	{r7}
 8004236:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004238:	b672      	cpsid	i
}
 800423a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800423c:	e7fe      	b.n	800423c <Error_Handler+0x8>

0800423e <_ZN5Eigen8symbolic10SymbolExprINS_8internal17symbolic_last_tagEEC1Ev>:
{
public:
  /** Alias to the template parameter \c tag */
  typedef tag Tag;

  SymbolExpr() {}
 800423e:	b480      	push	{r7}
 8004240:	b083      	sub	sp, #12
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4618      	mov	r0, r3
 800424a:	370c      	adds	r7, #12
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr

08004254 <_ZN5Eigen8internal8FixedIntILi1EEC1Ev>:
template<int N> class FixedInt
{
public:
  static const int value = N;
  EIGEN_CONSTEXPR operator int() const { return value; }
  FixedInt() {}
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	4618      	mov	r0, r3
 8004260:	370c      	adds	r7, #12
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr

0800426a <_ZNK5Eigen8internal8FixedIntILi1EEclEv>:
  template<int M>
  FixedInt<N&M> operator&( FixedInt<M>) const { return FixedInt<N&M>(); }

#if EIGEN_HAS_CXX14_VARIABLE_TEMPLATES
  // Needed in C++14 to allow fix<N>():
  FixedInt operator() () const { return *this; }
 800426a:	b480      	push	{r7}
 800426c:	b083      	sub	sp, #12
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
 8004272:	bf00      	nop
 8004274:	4618      	mov	r0, r3
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <_ZNK5Eigen8symbolic8BaseExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEEEplILi1EEENS0_7AddExprIS5_NS0_9ValueExprINS3_8FixedIntIXT_EEEEEEESB_>:
  AddExpr<Derived,ValueExpr<internal::FixedInt<N> > > operator+(internal::FixedInt<N>) const
 8004280:	b5b0      	push	{r4, r5, r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	7039      	strb	r1, [r7, #0]
  { return AddExpr<Derived,ValueExpr<internal::FixedInt<N> > >(derived(), ValueExpr<internal::FixedInt<N> >()); }
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 fdb8 	bl	8004e00 <_ZNK5Eigen8symbolic8BaseExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEEE7derivedEv>
 8004290:	4604      	mov	r4, r0
 8004292:	f107 030c 	add.w	r3, r7, #12
 8004296:	4618      	mov	r0, r3
 8004298:	f000 fdbd 	bl	8004e16 <_ZN5Eigen8symbolic9ValueExprINS_8internal8FixedIntILi1EEEEC1Ev>
 800429c:	f107 020c 	add.w	r2, r7, #12
 80042a0:	f107 0308 	add.w	r3, r7, #8
 80042a4:	4621      	mov	r1, r4
 80042a6:	4618      	mov	r0, r3
 80042a8:	f000 fdc0 	bl	8004e2c <_ZN5Eigen8symbolic7AddExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEENS0_9ValueExprINS3_8FixedIntILi1EEEEEEC1ERKS5_RKS9_>
 80042ac:	bf00      	nop
 80042ae:	4628      	mov	r0, r5
 80042b0:	3710      	adds	r7, #16
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bdb0      	pop	{r4, r5, r7, pc}

080042b6 <_ZN5Eigen8internal22ignore_unused_variableIiEEvRKT_>:
#endif

// Suppresses 'unused variable' warnings.
namespace Eigen {
  namespace internal {
    template<typename T> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void ignore_unused_variable(const T&) {}
 80042b6:	b480      	push	{r7}
 80042b8:	b083      	sub	sp, #12
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
 80042be:	bf00      	nop
 80042c0:	370c      	adds	r7, #12
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr

080042ca <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1Ev>:
      * a matrix to 0 is not supported.
      *
      * \sa resize(Index,Index)
      */
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    Matrix() : Base()
 80042ca:	b580      	push	{r7, lr}
 80042cc:	b082      	sub	sp, #8
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	6078      	str	r0, [r7, #4]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4618      	mov	r0, r3
 80042d6:	f000 fdc2 	bl	8004e5e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
    {
      Base::_check_template_params();
 80042da:	f000 fdd0 	bl	8004e7e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE22_check_template_paramsEv>
      EIGEN_INITIALIZE_COEFFS_IF_THAT_OPTION_IS_ENABLED
    }
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4618      	mov	r0, r3
 80042e2:	3708      	adds	r7, #8
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1Ev>:
    Matrix() : Base()
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4618      	mov	r0, r3
 80042f4:	f000 fdd6 	bl	8004ea4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
      Base::_check_template_params();
 80042f8:	f000 fde4 	bl	8004ec4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE22_check_template_paramsEv>
    }
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4618      	mov	r0, r3
 8004300:	3708      	adds	r7, #8
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}

08004306 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1Ev>:
    Matrix() : Base()
 8004306:	b580      	push	{r7, lr}
 8004308:	b082      	sub	sp, #8
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4618      	mov	r0, r3
 8004312:	f000 fdea 	bl	8004eea <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
      Base::_check_template_params();
 8004316:	f000 fdf8 	bl	8004f0a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv>
    }
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4618      	mov	r0, r3
 800431e:	3708      	adds	r7, #8
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}

08004324 <_ZN5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EEC1Ev>:
    Matrix() : Base()
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	4618      	mov	r0, r3
 8004330:	f000 fdfe 	bl	8004f30 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>
      Base::_check_template_params();
 8004334:	f000 fe0c 	bl	8004f50 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE22_check_template_paramsEv>
    }
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4618      	mov	r0, r3
 800433c:	3708      	adds	r7, #8
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}

08004342 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEElsERKf>:
  * \note According the c++ standard, the argument expressions of this comma initializer are evaluated in arbitrary order.
  *
  * \sa CommaInitializer::finished(), class CommaInitializer
  */
template<typename Derived>
EIGEN_DEVICE_FUNC inline CommaInitializer<Derived> DenseBase<Derived>::operator<< (const Scalar& s)
 8004342:	b580      	push	{r7, lr}
 8004344:	b084      	sub	sp, #16
 8004346:	af00      	add	r7, sp, #0
 8004348:	60f8      	str	r0, [r7, #12]
 800434a:	60b9      	str	r1, [r7, #8]
 800434c:	607a      	str	r2, [r7, #4]
{
  return CommaInitializer<Derived>(*static_cast<Derived*>(this), s);
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	68b9      	ldr	r1, [r7, #8]
 8004352:	68f8      	ldr	r0, [r7, #12]
 8004354:	f000 fe04 	bl	8004f60 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKf>
}
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	3710      	adds	r7, #16
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>:
  inline ~CommaInitializer()
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
    finished();
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f000 fe39 	bl	8004fe0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv>
  }
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4618      	mov	r0, r3
 8004372:	3708      	adds	r7, #8
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>:
  CommaInitializer& operator,(const Scalar& s)
 8004378:	b590      	push	{r4, r7, lr}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
    if (m_col==m_xpr.cols())
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	689c      	ldr	r4, [r3, #8]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4618      	mov	r0, r3
 800438c:	f000 fe5e 	bl	800504c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8004390:	4603      	mov	r3, r0
 8004392:	429c      	cmp	r4, r3
 8004394:	bf0c      	ite	eq
 8004396:	2301      	moveq	r3, #1
 8004398:	2300      	movne	r3, #0
 800439a:	b2db      	uxtb	r3, r3
 800439c:	2b00      	cmp	r3, #0
 800439e:	d01d      	beq.n	80043dc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0x64>
      m_row+=m_currentBlockRows;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685a      	ldr	r2, [r3, #4]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	441a      	add	r2, r3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	605a      	str	r2, [r3, #4]
      m_col = 0;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	609a      	str	r2, [r3, #8]
      m_currentBlockRows = 1;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	60da      	str	r2, [r3, #12]
      eigen_assert(m_row<m_xpr.rows()
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	685c      	ldr	r4, [r3, #4]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4618      	mov	r0, r3
 80043c4:	f000 fe4d 	bl	8005062 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80043c8:	4603      	mov	r3, r0
 80043ca:	429c      	cmp	r4, r3
 80043cc:	db05      	blt.n	80043da <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0x62>
 80043ce:	4b1d      	ldr	r3, [pc, #116]	; (8004444 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xcc>)
 80043d0:	4a1d      	ldr	r2, [pc, #116]	; (8004448 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xd0>)
 80043d2:	2148      	movs	r1, #72	; 0x48
 80043d4:	481d      	ldr	r0, [pc, #116]	; (800444c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xd4>)
 80043d6:	f019 fd5d 	bl	801de94 <__assert_func>
 80043da:	bf00      	nop
    eigen_assert(m_col<m_xpr.cols()
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	689c      	ldr	r4, [r3, #8]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4618      	mov	r0, r3
 80043e6:	f000 fe31 	bl	800504c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80043ea:	4603      	mov	r3, r0
 80043ec:	429c      	cmp	r4, r3
 80043ee:	db05      	blt.n	80043fc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0x84>
 80043f0:	4b17      	ldr	r3, [pc, #92]	; (8004450 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xd8>)
 80043f2:	4a15      	ldr	r2, [pc, #84]	; (8004448 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xd0>)
 80043f4:	214b      	movs	r1, #75	; 0x4b
 80043f6:	4815      	ldr	r0, [pc, #84]	; (800444c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xd4>)
 80043f8:	f019 fd4c 	bl	801de94 <__assert_func>
 80043fc:	bf00      	nop
    eigen_assert(m_currentBlockRows==1);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	2b01      	cmp	r3, #1
 8004404:	d005      	beq.n	8004412 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0x9a>
 8004406:	4b13      	ldr	r3, [pc, #76]	; (8004454 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xdc>)
 8004408:	4a0f      	ldr	r2, [pc, #60]	; (8004448 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xd0>)
 800440a:	214d      	movs	r1, #77	; 0x4d
 800440c:	480f      	ldr	r0, [pc, #60]	; (800444c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xd4>)
 800440e:	f019 fd41 	bl	801de94 <__assert_func>
    m_xpr.coeffRef(m_row, m_col++) = s;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	461c      	mov	r4, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6858      	ldr	r0, [r3, #4]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	1c59      	adds	r1, r3, #1
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	6091      	str	r1, [r2, #8]
 8004426:	461a      	mov	r2, r3
 8004428:	4601      	mov	r1, r0
 800442a:	4620      	mov	r0, r4
 800442c:	f000 fe24 	bl	8005078 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8coeffRefEii>
 8004430:	4602      	mov	r2, r0
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	6013      	str	r3, [r2, #0]
    return *this;
 8004438:	687b      	ldr	r3, [r7, #4]
  }
 800443a:	4618      	mov	r0, r3
 800443c:	370c      	adds	r7, #12
 800443e:	46bd      	mov	sp, r7
 8004440:	bd90      	pop	{r4, r7, pc}
 8004442:	bf00      	nop
 8004444:	0801ef10 	.word	0x0801ef10
 8004448:	0801ef60 	.word	0x0801ef60
 800444c:	0801f024 	.word	0x0801f024
 8004450:	0801f080 	.word	0x0801f080
 8004454:	0801f0d8 	.word	0x0801f0d8

08004458 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEElsERKf>:
EIGEN_DEVICE_FUNC inline CommaInitializer<Derived> DenseBase<Derived>::operator<< (const Scalar& s)
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]
  return CommaInitializer<Derived>(*static_cast<Derived*>(this), s);
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	68b9      	ldr	r1, [r7, #8]
 8004468:	68f8      	ldr	r0, [r7, #12]
 800446a:	f000 fe1f 	bl	80050ac <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKf>
}
 800446e:	68f8      	ldr	r0, [r7, #12]
 8004470:	3710      	adds	r7, #16
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}

08004476 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>:
  inline ~CommaInitializer()
 8004476:	b580      	push	{r7, lr}
 8004478:	b082      	sub	sp, #8
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
    finished();
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 fe54 	bl	800512c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv>
  }
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4618      	mov	r0, r3
 8004488:	3708      	adds	r7, #8
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
	...

08004490 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>:
  CommaInitializer& operator,(const Scalar& s)
 8004490:	b590      	push	{r4, r7, lr}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
    if (m_col==m_xpr.cols())
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	689c      	ldr	r4, [r3, #8]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4618      	mov	r0, r3
 80044a4:	f000 fe78 	bl	8005198 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80044a8:	4603      	mov	r3, r0
 80044aa:	429c      	cmp	r4, r3
 80044ac:	bf0c      	ite	eq
 80044ae:	2301      	moveq	r3, #1
 80044b0:	2300      	movne	r3, #0
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d01d      	beq.n	80044f4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0x64>
      m_row+=m_currentBlockRows;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	685a      	ldr	r2, [r3, #4]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	441a      	add	r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	605a      	str	r2, [r3, #4]
      m_col = 0;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	609a      	str	r2, [r3, #8]
      m_currentBlockRows = 1;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	60da      	str	r2, [r3, #12]
      eigen_assert(m_row<m_xpr.rows()
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685c      	ldr	r4, [r3, #4]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4618      	mov	r0, r3
 80044dc:	f000 fe67 	bl	80051ae <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80044e0:	4603      	mov	r3, r0
 80044e2:	429c      	cmp	r4, r3
 80044e4:	db05      	blt.n	80044f2 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0x62>
 80044e6:	4b1d      	ldr	r3, [pc, #116]	; (800455c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xcc>)
 80044e8:	4a1d      	ldr	r2, [pc, #116]	; (8004560 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xd0>)
 80044ea:	2148      	movs	r1, #72	; 0x48
 80044ec:	481d      	ldr	r0, [pc, #116]	; (8004564 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xd4>)
 80044ee:	f019 fcd1 	bl	801de94 <__assert_func>
 80044f2:	bf00      	nop
    eigen_assert(m_col<m_xpr.cols()
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	689c      	ldr	r4, [r3, #8]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4618      	mov	r0, r3
 80044fe:	f000 fe4b 	bl	8005198 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8004502:	4603      	mov	r3, r0
 8004504:	429c      	cmp	r4, r3
 8004506:	db05      	blt.n	8004514 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0x84>
 8004508:	4b17      	ldr	r3, [pc, #92]	; (8004568 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xd8>)
 800450a:	4a15      	ldr	r2, [pc, #84]	; (8004560 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xd0>)
 800450c:	214b      	movs	r1, #75	; 0x4b
 800450e:	4815      	ldr	r0, [pc, #84]	; (8004564 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xd4>)
 8004510:	f019 fcc0 	bl	801de94 <__assert_func>
 8004514:	bf00      	nop
    eigen_assert(m_currentBlockRows==1);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	2b01      	cmp	r3, #1
 800451c:	d005      	beq.n	800452a <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0x9a>
 800451e:	4b13      	ldr	r3, [pc, #76]	; (800456c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xdc>)
 8004520:	4a0f      	ldr	r2, [pc, #60]	; (8004560 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xd0>)
 8004522:	214d      	movs	r1, #77	; 0x4d
 8004524:	480f      	ldr	r0, [pc, #60]	; (8004564 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xd4>)
 8004526:	f019 fcb5 	bl	801de94 <__assert_func>
    m_xpr.coeffRef(m_row, m_col++) = s;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	461c      	mov	r4, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6858      	ldr	r0, [r3, #4]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	1c59      	adds	r1, r3, #1
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	6091      	str	r1, [r2, #8]
 800453e:	461a      	mov	r2, r3
 8004540:	4601      	mov	r1, r0
 8004542:	4620      	mov	r0, r4
 8004544:	f000 fe3e 	bl	80051c4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8coeffRefEii>
 8004548:	4602      	mov	r2, r0
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	6013      	str	r3, [r2, #0]
    return *this;
 8004550:	687b      	ldr	r3, [r7, #4]
  }
 8004552:	4618      	mov	r0, r3
 8004554:	370c      	adds	r7, #12
 8004556:	46bd      	mov	sp, r7
 8004558:	bd90      	pop	{r4, r7, pc}
 800455a:	bf00      	nop
 800455c:	0801ef10 	.word	0x0801ef10
 8004560:	0801f0f0 	.word	0x0801f0f0
 8004564:	0801f024 	.word	0x0801f024
 8004568:	0801f080 	.word	0x0801f080
 800456c:	0801f0d8 	.word	0x0801f0d8

08004570 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEElsERKf>:
EIGEN_DEVICE_FUNC inline CommaInitializer<Derived> DenseBase<Derived>::operator<< (const Scalar& s)
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	607a      	str	r2, [r7, #4]
  return CommaInitializer<Derived>(*static_cast<Derived*>(this), s);
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	68b9      	ldr	r1, [r7, #8]
 8004580:	68f8      	ldr	r0, [r7, #12]
 8004582:	f000 fe39 	bl	80051f8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS2_RKf>
}
 8004586:	68f8      	ldr	r0, [r7, #12]
 8004588:	3710      	adds	r7, #16
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}

0800458e <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>:
  inline ~CommaInitializer()
 800458e:	b580      	push	{r7, lr}
 8004590:	b082      	sub	sp, #8
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
    finished();
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 fe6e 	bl	8005278 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv>
  }
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4618      	mov	r0, r3
 80045a0:	3708      	adds	r7, #8
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}

080045a6 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEElsERKf>:
EIGEN_DEVICE_FUNC inline CommaInitializer<Derived> DenseBase<Derived>::operator<< (const Scalar& s)
 80045a6:	b580      	push	{r7, lr}
 80045a8:	b084      	sub	sp, #16
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	60f8      	str	r0, [r7, #12]
 80045ae:	60b9      	str	r1, [r7, #8]
 80045b0:	607a      	str	r2, [r7, #4]
  return CommaInitializer<Derived>(*static_cast<Derived*>(this), s);
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	68b9      	ldr	r1, [r7, #8]
 80045b6:	68f8      	ldr	r0, [r7, #12]
 80045b8:	f000 fe94 	bl	80052e4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_RKf>
}
 80045bc:	68f8      	ldr	r0, [r7, #12]
 80045be:	3710      	adds	r7, #16
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>:
  inline ~CommaInitializer()
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b082      	sub	sp, #8
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
    finished();
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f000 fec9 	bl	8005364 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv>
  }
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4618      	mov	r0, r3
 80045d6:	3708      	adds	r7, #8
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf>:
  CommaInitializer& operator,(const Scalar& s)
 80045dc:	b590      	push	{r4, r7, lr}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
    if (m_col==m_xpr.cols())
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	689c      	ldr	r4, [r3, #8]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4618      	mov	r0, r3
 80045f0:	f000 feee 	bl	80053d0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 80045f4:	4603      	mov	r3, r0
 80045f6:	429c      	cmp	r4, r3
 80045f8:	bf0c      	ite	eq
 80045fa:	2301      	moveq	r3, #1
 80045fc:	2300      	movne	r3, #0
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	2b00      	cmp	r3, #0
 8004602:	d01d      	beq.n	8004640 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0x64>
      m_row+=m_currentBlockRows;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685a      	ldr	r2, [r3, #4]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	441a      	add	r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	605a      	str	r2, [r3, #4]
      m_col = 0;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	609a      	str	r2, [r3, #8]
      m_currentBlockRows = 1;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	60da      	str	r2, [r3, #12]
      eigen_assert(m_row<m_xpr.rows()
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685c      	ldr	r4, [r3, #4]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4618      	mov	r0, r3
 8004628:	f000 fedd 	bl	80053e6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 800462c:	4603      	mov	r3, r0
 800462e:	429c      	cmp	r4, r3
 8004630:	db05      	blt.n	800463e <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0x62>
 8004632:	4b1d      	ldr	r3, [pc, #116]	; (80046a8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xcc>)
 8004634:	4a1d      	ldr	r2, [pc, #116]	; (80046ac <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xd0>)
 8004636:	2148      	movs	r1, #72	; 0x48
 8004638:	481d      	ldr	r0, [pc, #116]	; (80046b0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xd4>)
 800463a:	f019 fc2b 	bl	801de94 <__assert_func>
 800463e:	bf00      	nop
    eigen_assert(m_col<m_xpr.cols()
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	689c      	ldr	r4, [r3, #8]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4618      	mov	r0, r3
 800464a:	f000 fec1 	bl	80053d0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 800464e:	4603      	mov	r3, r0
 8004650:	429c      	cmp	r4, r3
 8004652:	db05      	blt.n	8004660 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0x84>
 8004654:	4b17      	ldr	r3, [pc, #92]	; (80046b4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xd8>)
 8004656:	4a15      	ldr	r2, [pc, #84]	; (80046ac <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xd0>)
 8004658:	214b      	movs	r1, #75	; 0x4b
 800465a:	4815      	ldr	r0, [pc, #84]	; (80046b0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xd4>)
 800465c:	f019 fc1a 	bl	801de94 <__assert_func>
 8004660:	bf00      	nop
    eigen_assert(m_currentBlockRows==1);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	2b01      	cmp	r3, #1
 8004668:	d005      	beq.n	8004676 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0x9a>
 800466a:	4b13      	ldr	r3, [pc, #76]	; (80046b8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xdc>)
 800466c:	4a0f      	ldr	r2, [pc, #60]	; (80046ac <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xd0>)
 800466e:	214d      	movs	r1, #77	; 0x4d
 8004670:	480f      	ldr	r0, [pc, #60]	; (80046b0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xd4>)
 8004672:	f019 fc0f 	bl	801de94 <__assert_func>
    m_xpr.coeffRef(m_row, m_col++) = s;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	461c      	mov	r4, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6858      	ldr	r0, [r3, #4]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	1c59      	adds	r1, r3, #1
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	6091      	str	r1, [r2, #8]
 800468a:	461a      	mov	r2, r3
 800468c:	4601      	mov	r1, r0
 800468e:	4620      	mov	r0, r4
 8004690:	f000 feb4 	bl	80053fc <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8coeffRefEii>
 8004694:	4602      	mov	r2, r0
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	6013      	str	r3, [r2, #0]
    return *this;
 800469c:	687b      	ldr	r3, [r7, #4]
  }
 800469e:	4618      	mov	r0, r3
 80046a0:	370c      	adds	r7, #12
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd90      	pop	{r4, r7, pc}
 80046a6:	bf00      	nop
 80046a8:	0801ef10 	.word	0x0801ef10
 80046ac:	0801f1b4 	.word	0x0801f1b4
 80046b0:	0801f024 	.word	0x0801f024
 80046b4:	0801f080 	.word	0x0801f080
 80046b8:	0801f0d8 	.word	0x0801f0d8

080046bc <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>:
      * \sa operator[](Index)
      */

    EIGEN_DEVICE_FUNC
    EIGEN_STRONG_INLINE Scalar&
    operator()(Index row, Index col)
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	607a      	str	r2, [r7, #4]
    {
      eigen_assert(row >= 0 && row < rows()
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	db10      	blt.n	80046f0 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii+0x34>
 80046ce:	68f8      	ldr	r0, [r7, #12]
 80046d0:	f000 fead 	bl	800542e <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80046d4:	4602      	mov	r2, r0
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	4293      	cmp	r3, r2
 80046da:	da09      	bge.n	80046f0 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii+0x34>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	db06      	blt.n	80046f0 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii+0x34>
 80046e2:	68f8      	ldr	r0, [r7, #12]
 80046e4:	f000 feb3 	bl	800544e <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80046e8:	4602      	mov	r2, r0
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4293      	cmp	r3, r2
 80046ee:	db06      	blt.n	80046fe <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii+0x42>
 80046f0:	4b08      	ldr	r3, [pc, #32]	; (8004714 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii+0x58>)
 80046f2:	4a09      	ldr	r2, [pc, #36]	; (8004718 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii+0x5c>)
 80046f4:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 80046f8:	4808      	ldr	r0, [pc, #32]	; (800471c <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii+0x60>)
 80046fa:	f019 fbcb 	bl	801de94 <__assert_func>
          && col >= 0 && col < cols());
      return coeffRef(row, col);
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	68b9      	ldr	r1, [r7, #8]
 8004702:	68f8      	ldr	r0, [r7, #12]
 8004704:	f000 fecc 	bl	80054a0 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EE8coeffRefEii>
 8004708:	4603      	mov	r3, r0
    }
 800470a:	4618      	mov	r0, r3
 800470c:	3710      	adds	r7, #16
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	0801f278 	.word	0x0801f278
 8004718:	0801f2b0 	.word	0x0801f2b0
 800471c:	0801f39c 	.word	0x0801f39c

08004720 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS7_>:
  * on the behavior of CwiseNullaryOp.
  *
  * \sa class CwiseUnaryOp, class CwiseBinaryOp, DenseBase::NullaryExpr
  */
template<typename NullaryOp, typename PlainObjectType>
class CwiseNullaryOp : public internal::dense_xpr_base< CwiseNullaryOp<NullaryOp, PlainObjectType> >::type, internal::no_assignment_operator
 8004720:	b580      	push	{r7, lr}
 8004722:	b082      	sub	sp, #8
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	1d1a      	adds	r2, r3, #4
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	3304      	adds	r3, #4
 8004732:	4619      	mov	r1, r3
 8004734:	4610      	mov	r0, r2
 8004736:	f000 ffaf 	bl	8005698 <_ZN5Eigen8internal18scalar_constant_opIfEC1ERKS2_>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4618      	mov	r0, r3
 800473e:	3708      	adds	r7, #8
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}

08004744 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEmlIfEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNS6_18promote_scalar_argIfT_XsrNS6_14has_ReturnTypeINS_20ScalarBinaryOpTraitsIfS9_NS7_IfS9_EEEEEE5valueEE4typeEEEKS2_KNS6_19plain_constant_typeIS2_SG_E4typeEEERKS9_>:
  return CwiseBinaryOp<CustomBinaryOp, const Derived, const OtherDerived>(derived(), other.derived(), func);
}


#ifndef EIGEN_PARSED_BY_DOXYGEN
EIGEN_MAKE_SCALAR_BINARY_OP(operator*,product)
 8004744:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004746:	b089      	sub	sp, #36	; 0x24
 8004748:	af00      	add	r7, sp, #0
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	607a      	str	r2, [r7, #4]
 8004750:	68b8      	ldr	r0, [r7, #8]
 8004752:	f000 fec8 	bl	80054e6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8004756:	4604      	mov	r4, r0
 8004758:	68b8      	ldr	r0, [r7, #8]
 800475a:	f000 fec4 	bl	80054e6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800475e:	4603      	mov	r3, r0
 8004760:	4618      	mov	r0, r3
 8004762:	f000 fd24 	bl	80051ae <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8004766:	4605      	mov	r5, r0
 8004768:	68b8      	ldr	r0, [r7, #8]
 800476a:	f000 febc 	bl	80054e6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800476e:	4603      	mov	r3, r0
 8004770:	4618      	mov	r0, r3
 8004772:	f000 fd11 	bl	8005198 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8004776:	4606      	mov	r6, r0
 8004778:	f107 0318 	add.w	r3, r7, #24
 800477c:	6879      	ldr	r1, [r7, #4]
 800477e:	4618      	mov	r0, r3
 8004780:	f000 febc 	bl	80054fc <_ZN5Eigen8internal18scalar_constant_opIfEC1ERKf>
 8004784:	f107 0318 	add.w	r3, r7, #24
 8004788:	f107 0010 	add.w	r0, r7, #16
 800478c:	4632      	mov	r2, r6
 800478e:	4629      	mov	r1, r5
 8004790:	f000 fed0 	bl	8005534 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_>
 8004794:	f107 031c 	add.w	r3, r7, #28
 8004798:	4618      	mov	r0, r3
 800479a:	f000 ff03 	bl	80055a4 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 800479e:	f107 031c 	add.w	r3, r7, #28
 80047a2:	f107 0210 	add.w	r2, r7, #16
 80047a6:	4621      	mov	r1, r4
 80047a8:	68f8      	ldr	r0, [r7, #12]
 80047aa:	f000 ff35 	bl	8005618 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERS6_RSB_RKS3_>
 80047ae:	68f8      	ldr	r0, [r7, #12]
 80047b0:	3724      	adds	r7, #36	; 0x24
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080047b6 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE9transposeEv>:
  *
  * \sa transposeInPlace(), adjoint() */
template<typename Derived>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
Transpose<Derived>
DenseBase<Derived>::transpose()
 80047b6:	b580      	push	{r7, lr}
 80047b8:	b084      	sub	sp, #16
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	6078      	str	r0, [r7, #4]
{
  return TransposeReturnType(derived());
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 ff86 	bl	80056d0 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80047c4:	4602      	mov	r2, r0
 80047c6:	f107 030c 	add.w	r3, r7, #12
 80047ca:	4611      	mov	r1, r2
 80047cc:	4618      	mov	r0, r3
 80047ce:	f000 ffa2 	bl	8005716 <_ZN5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_>
 80047d2:	68fb      	ldr	r3, [r7, #12]
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3710      	adds	r7, #16
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERKSC_>:
  * CwiseBinaryOp types explicitly.
  *
  * \sa MatrixBase::binaryExpr(const MatrixBase<OtherDerived> &,const CustomBinaryOp &) const, class CwiseUnaryOp, class CwiseNullaryOp
  */
template<typename BinaryOp, typename LhsType, typename RhsType>
class CwiseBinaryOp :
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	601a      	str	r2, [r3, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	1d1a      	adds	r2, r3, #4
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	3304      	adds	r3, #4
 80047f6:	4619      	mov	r1, r3
 80047f8:	4610      	mov	r0, r2
 80047fa:	f7ff ff91 	bl	8004720 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS7_>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f103 020c 	add.w	r2, r3, #12
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	330c      	adds	r3, #12
 8004808:	4619      	mov	r1, r3
 800480a:	4610      	mov	r0, r2
 800480c:	f000 ff54 	bl	80056b8 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4618      	mov	r0, r3
 8004814:	3708      	adds	r7, #8
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}

0800481a <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEEmlINS_9TransposeIS6_EEEEKNS_7ProductISD_T_Li0EEERKNS0_ISJ_EE>:
  */
template<typename Derived>
template<typename OtherDerived>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
const Product<Derived, OtherDerived>
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 800481a:	b590      	push	{r4, r7, lr}
 800481c:	b085      	sub	sp, #20
 800481e:	af00      	add	r7, sp, #0
 8004820:	60f8      	str	r0, [r7, #12]
 8004822:	60b9      	str	r1, [r7, #8]
 8004824:	607a      	str	r2, [r7, #4]
  EIGEN_STATIC_ASSERT(ProductIsValid || SameSizes, INVALID_MATRIX_PRODUCT)
#ifdef EIGEN_DEBUG_PRODUCT
  internal::product_type<Derived,OtherDerived>::debug();
#endif

  return Product<Derived, OtherDerived>(derived(), other.derived());
 8004826:	68b8      	ldr	r0, [r7, #8]
 8004828:	f000 ff85 	bl	8005736 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE7derivedEv>
 800482c:	4604      	mov	r4, r0
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 ff8c 	bl	800574c <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 8004834:	4603      	mov	r3, r0
 8004836:	461a      	mov	r2, r3
 8004838:	4621      	mov	r1, r4
 800483a:	68f8      	ldr	r0, [r7, #12]
 800483c:	f000 ffd2 	bl	80057e4 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EEC1ERKSD_RKSF_>
}
 8004840:	68f8      	ldr	r0, [r7, #12]
 8004842:	3714      	adds	r7, #20
 8004844:	46bd      	mov	sp, r7
 8004846:	bd90      	pop	{r4, r7, pc}

08004848 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEaSINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS0_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS5_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEEEERS1_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Matrix& operator=(const DenseBase<OtherDerived>& other)
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
      return Base::_set(other);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6839      	ldr	r1, [r7, #0]
 8004856:	4618      	mov	r0, r3
 8004858:	f000 fff4 	bl	8005844 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4_setINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS1_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS7_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi0EEEEERS2_RKNS_9DenseBaseIT_EE>
 800485c:	4603      	mov	r3, r0
    }
 800485e:	4618      	mov	r0, r3
 8004860:	3708      	adds	r7, #8
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}

08004866 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmlINS1_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8004866:	b590      	push	{r4, r7, lr}
 8004868:	b085      	sub	sp, #20
 800486a:	af00      	add	r7, sp, #0
 800486c:	60f8      	str	r0, [r7, #12]
 800486e:	60b9      	str	r1, [r7, #8]
 8004870:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8004872:	68b8      	ldr	r0, [r7, #8]
 8004874:	f000 ffff 	bl	8005876 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8004878:	4604      	mov	r4, r0
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 fe33 	bl	80054e6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8004880:	4603      	mov	r3, r0
 8004882:	461a      	mov	r2, r3
 8004884:	4621      	mov	r1, r4
 8004886:	68f8      	ldr	r0, [r7, #12]
 8004888:	f001 f824 	bl	80058d4 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_>
}
 800488c:	68f8      	ldr	r0, [r7, #12]
 800488e:	3714      	adds	r7, #20
 8004890:	46bd      	mov	sp, r7
 8004892:	bd90      	pop	{r4, r7, pc}

08004894 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEaSINS_7ProductINS0_IfLi3ELi3ELi0ELi3ELi3EEES1_Li0EEEEERS1_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Matrix& operator=(const DenseBase<OtherDerived>& other)
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
      return Base::_set(other);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6839      	ldr	r1, [r7, #0]
 80048a2:	4618      	mov	r0, r3
 80048a4:	f001 f844 	bl	8005930 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4_setINS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>
 80048a8:	4603      	mov	r3, r0
    }
 80048aa:	4618      	mov	r0, r3
 80048ac:	3708      	adds	r7, #8
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}

080048b2 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmlIS2_EEKNS_7ProductIS2_T_Li0EEERKNS0_IS6_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 80048b2:	b590      	push	{r4, r7, lr}
 80048b4:	b085      	sub	sp, #20
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	60f8      	str	r0, [r7, #12]
 80048ba:	60b9      	str	r1, [r7, #8]
 80048bc:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 80048be:	68b8      	ldr	r0, [r7, #8]
 80048c0:	f000 ffd9 	bl	8005876 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 80048c4:	4604      	mov	r4, r0
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 ffd5 	bl	8005876 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 80048cc:	4603      	mov	r3, r0
 80048ce:	461a      	mov	r2, r3
 80048d0:	4621      	mov	r1, r4
 80048d2:	68f8      	ldr	r0, [r7, #12]
 80048d4:	f001 f86a 	bl	80059ac <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEC1ERKS2_S5_>
}
 80048d8:	68f8      	ldr	r0, [r7, #12]
 80048da:	3714      	adds	r7, #20
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd90      	pop	{r4, r7, pc}

080048e0 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE9transposeEv>:
DenseBase<Derived>::transpose()
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  return TransposeReturnType(derived());
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f001 f88d 	bl	8005a08 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 80048ee:	4602      	mov	r2, r0
 80048f0:	f107 030c 	add.w	r3, r7, #12
 80048f4:	4611      	mov	r1, r2
 80048f6:	4618      	mov	r0, r3
 80048f8:	f001 f8a9 	bl	8005a4e <_ZN5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_>
 80048fc:	68fb      	ldr	r3, [r7, #12]
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3710      	adds	r7, #16
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}

08004906 <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEmlINS_9TransposeIS3_EEEEKNS1_IS4_T_Li0EEERKNS0_IS9_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8004906:	b590      	push	{r4, r7, lr}
 8004908:	b085      	sub	sp, #20
 800490a:	af00      	add	r7, sp, #0
 800490c:	60f8      	str	r0, [r7, #12]
 800490e:	60b9      	str	r1, [r7, #8]
 8004910:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8004912:	68b8      	ldr	r0, [r7, #8]
 8004914:	f001 f8ab 	bl	8005a6e <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEE7derivedEv>
 8004918:	4604      	mov	r4, r0
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f001 f8b2 	bl	8005a84 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>
 8004920:	4603      	mov	r3, r0
 8004922:	461a      	mov	r2, r3
 8004924:	4621      	mov	r1, r4
 8004926:	68f8      	ldr	r0, [r7, #12]
 8004928:	f001 f8f8 	bl	8005b1c <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EEC1ERKS3_RKS5_>
}
 800492c:	68f8      	ldr	r0, [r7, #12]
 800492e:	3714      	adds	r7, #20
 8004930:	46bd      	mov	sp, r7
 8004932:	bd90      	pop	{r4, r7, pc}

08004934 <_ZNK5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEEplIS3_EEKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIfNSB_6traitsIT_E6ScalarEEEKS7_KSE_EERKNS0_ISE_EE>:
EIGEN_MAKE_CWISE_BINARY_OP(operator+,sum)
 8004934:	b5b0      	push	{r4, r5, r7, lr}
 8004936:	b086      	sub	sp, #24
 8004938:	af00      	add	r7, sp, #0
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	60b9      	str	r1, [r7, #8]
 800493e:	607a      	str	r2, [r7, #4]
 8004940:	68b8      	ldr	r0, [r7, #8]
 8004942:	f001 f91b 	bl	8005b7c <_ZNK5Eigen9EigenBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEE7derivedEv>
 8004946:	4604      	mov	r4, r0
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 ff94 	bl	8005876 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800494e:	4605      	mov	r5, r0
 8004950:	f107 0314 	add.w	r3, r7, #20
 8004954:	4618      	mov	r0, r3
 8004956:	f001 f91c 	bl	8005b92 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 800495a:	f107 0314 	add.w	r3, r7, #20
 800495e:	462a      	mov	r2, r5
 8004960:	4621      	mov	r1, r4
 8004962:	68f8      	ldr	r0, [r7, #12]
 8004964:	f001 f954 	bl	8005c10 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_EC1ERSB_RSC_RKS3_>
 8004968:	68f8      	ldr	r0, [r7, #12]
 800496a:	3718      	adds	r7, #24
 800496c:	46bd      	mov	sp, r7
 800496e:	bdb0      	pop	{r4, r5, r7, pc}

08004970 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEaSINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS7_IS1_S1_Li0EEENS_9TransposeIS1_EELi0EEEKS1_EEEERS1_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Matrix& operator=(const DenseBase<OtherDerived>& other)
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
      return Base::_set(other);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6839      	ldr	r1, [r7, #0]
 800497e:	4618      	mov	r0, r3
 8004980:	f001 f992 	bl	8005ca8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4_setINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS9_IS2_S2_Li0EEENS_9TransposeIS2_EELi0EEEKS2_EEEERS2_RKNS_9DenseBaseIT_EE>
 8004984:	4603      	mov	r3, r0
    }
 8004986:	4618      	mov	r0, r3
 8004988:	3708      	adds	r7, #8
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}

0800498e <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE9transposeEv>:
DenseBase<Derived>::transpose()
 800498e:	b580      	push	{r7, lr}
 8004990:	b084      	sub	sp, #16
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
  return TransposeReturnType(derived());
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f001 f99f 	bl	8005cda <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 800499c:	4602      	mov	r2, r0
 800499e:	f107 030c 	add.w	r3, r7, #12
 80049a2:	4611      	mov	r1, r2
 80049a4:	4618      	mov	r0, r3
 80049a6:	f001 f9bb 	bl	8005d20 <_ZN5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_>
 80049aa:	68fb      	ldr	r3, [r7, #12]
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3710      	adds	r7, #16
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmlINS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS9_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 80049b4:	b590      	push	{r4, r7, lr}
 80049b6:	b085      	sub	sp, #20
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 80049c0:	68b8      	ldr	r0, [r7, #8]
 80049c2:	f000 ff58 	bl	8005876 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 80049c6:	4604      	mov	r4, r0
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f001 f9b9 	bl	8005d40 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 80049ce:	4603      	mov	r3, r0
 80049d0:	461a      	mov	r2, r3
 80049d2:	4621      	mov	r1, r4
 80049d4:	68f8      	ldr	r0, [r7, #12]
 80049d6:	f001 f9f1 	bl	8005dbc <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEC1ERKS2_RKS5_>
}
 80049da:	68f8      	ldr	r0, [r7, #12]
 80049dc:	3714      	adds	r7, #20
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd90      	pop	{r4, r7, pc}

080049e2 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEmlINS1_IfLi3ELi3ELi0ELi3ELi3EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 80049e2:	b590      	push	{r4, r7, lr}
 80049e4:	b085      	sub	sp, #20
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	60f8      	str	r0, [r7, #12]
 80049ea:	60b9      	str	r1, [r7, #8]
 80049ec:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 80049ee:	68b8      	ldr	r0, [r7, #8]
 80049f0:	f001 fa12 	bl	8005e18 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 80049f4:	4604      	mov	r4, r0
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f000 ff3d 	bl	8005876 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 80049fc:	4603      	mov	r3, r0
 80049fe:	461a      	mov	r2, r3
 8004a00:	4621      	mov	r1, r4
 8004a02:	68f8      	ldr	r0, [r7, #12]
 8004a04:	f001 fa38 	bl	8005e78 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEC1ERKS2_RKS3_>
}
 8004a08:	68f8      	ldr	r0, [r7, #12]
 8004a0a:	3714      	adds	r7, #20
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd90      	pop	{r4, r7, pc}

08004a10 <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEmlINS_9TransposeIS3_EEEEKNS1_IS5_T_Li0EEERKNS0_ISA_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8004a10:	b590      	push	{r4, r7, lr}
 8004a12:	b085      	sub	sp, #20
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8004a1c:	68b8      	ldr	r0, [r7, #8]
 8004a1e:	f001 fa59 	bl	8005ed4 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE7derivedEv>
 8004a22:	4604      	mov	r4, r0
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f001 f98b 	bl	8005d40 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	4621      	mov	r1, r4
 8004a30:	68f8      	ldr	r0, [r7, #12]
 8004a32:	f001 fa8d 	bl	8005f50 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EEC1ERKS4_RKS6_>
}
 8004a36:	68f8      	ldr	r0, [r7, #12]
 8004a38:	3714      	adds	r7, #20
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd90      	pop	{r4, r7, pc}

08004a3e <_ZNK5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEEplINS2_IfLi1ELi1ELi0ELi1ELi1EEEEEKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIfNSD_6traitsIT_E6ScalarEEEKS8_KSG_EERKNS0_ISG_EE>:
 8004a3e:	b5b0      	push	{r4, r5, r7, lr}
 8004a40:	b086      	sub	sp, #24
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	60f8      	str	r0, [r7, #12]
 8004a46:	60b9      	str	r1, [r7, #8]
 8004a48:	607a      	str	r2, [r7, #4]
 8004a4a:	68b8      	ldr	r0, [r7, #8]
 8004a4c:	f001 fab0 	bl	8005fb0 <_ZNK5Eigen9EigenBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEE7derivedEv>
 8004a50:	4604      	mov	r4, r0
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f001 fab7 	bl	8005fc6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 8004a58:	4605      	mov	r5, r0
 8004a5a:	f107 0314 	add.w	r3, r7, #20
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f001 f897 	bl	8005b92 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 8004a64:	f107 0314 	add.w	r3, r7, #20
 8004a68:	462a      	mov	r2, r5
 8004a6a:	4621      	mov	r1, r4
 8004a6c:	68f8      	ldr	r0, [r7, #12]
 8004a6e:	f001 faff 	bl	8006070 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERSC_RSE_RKS3_>
 8004a72:	68f8      	ldr	r0, [r7, #12]
 8004a74:	3718      	adds	r7, #24
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bdb0      	pop	{r4, r5, r7, pc}

08004a7a <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4rowsEv>:
  inline const Derived& const_derived() const
  { return *static_cast<const Derived*>(this); }

  /** \returns the number of rows. \sa cols(), RowsAtCompileTime */
  EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 8004a7a:	b580      	push	{r7, lr}
 8004a7c:	b082      	sub	sp, #8
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f001 fb34 	bl	80060f0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7derivedEv>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f001 fb3b 	bl	8006106 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8004a90:	4603      	mov	r3, r0
 8004a92:	4618      	mov	r0, r3
 8004a94:	3708      	adds	r7, #8
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}

08004a9a <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4colsEv>:
  /** \returns the number of columns. \sa rows(), ColsAtCompileTime*/
  EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 8004a9a:	b580      	push	{r7, lr}
 8004a9c:	b082      	sub	sp, #8
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f001 fb24 	bl	80060f0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7derivedEv>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f001 fb38 	bl	8006120 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3708      	adds	r7, #8
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}

08004aba <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERKSF_>:
 8004aba:	b580      	push	{r7, lr}
 8004abc:	b082      	sub	sp, #8
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
 8004ac2:	6039      	str	r1, [r7, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	683a      	ldr	r2, [r7, #0]
 8004ac8:	ca07      	ldmia	r2, {r0, r1, r2}
 8004aca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	68da      	ldr	r2, [r3, #12]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	60da      	str	r2, [r3, #12]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f103 0210 	add.w	r2, r3, #16
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	3310      	adds	r3, #16
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	4610      	mov	r0, r2
 8004ae4:	f001 f8d4 	bl	8005c90 <_ZN5Eigen8internal13scalar_sum_opIffEC1ERKS2_>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4618      	mov	r0, r3
 8004aec:	3708      	adds	r7, #8
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
	...

08004af4 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7inverseEv>:
  *
  * \sa computeInverseAndDetWithCheck()
  */
template<typename Derived>
EIGEN_DEVICE_FUNC
inline const Inverse<Derived> MatrixBase<Derived>::inverse() const
 8004af4:	b590      	push	{r4, r7, lr}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
{
  EIGEN_STATIC_ASSERT(!NumTraits<Scalar>::IsInteger,THIS_FUNCTION_IS_NOT_FOR_INTEGER_NUMERIC_TYPES)
  eigen_assert(rows() == cols());
 8004afe:	6838      	ldr	r0, [r7, #0]
 8004b00:	f7ff ffbb 	bl	8004a7a <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4rowsEv>
 8004b04:	4604      	mov	r4, r0
 8004b06:	6838      	ldr	r0, [r7, #0]
 8004b08:	f7ff ffc7 	bl	8004a9a <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4colsEv>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	429c      	cmp	r4, r3
 8004b10:	d006      	beq.n	8004b20 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7inverseEv+0x2c>
 8004b12:	4b09      	ldr	r3, [pc, #36]	; (8004b38 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7inverseEv+0x44>)
 8004b14:	4a09      	ldr	r2, [pc, #36]	; (8004b3c <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7inverseEv+0x48>)
 8004b16:	f240 115f 	movw	r1, #351	; 0x15f
 8004b1a:	4809      	ldr	r0, [pc, #36]	; (8004b40 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7inverseEv+0x4c>)
 8004b1c:	f019 f9ba 	bl	801de94 <__assert_func>
  return Inverse<Derived>(derived());
 8004b20:	6838      	ldr	r0, [r7, #0]
 8004b22:	f001 fae5 	bl	80060f0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7derivedEv>
 8004b26:	4603      	mov	r3, r0
 8004b28:	4619      	mov	r1, r3
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f001 fb1d 	bl	800616a <_ZN5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKSG_>
}
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd90      	pop	{r4, r7, pc}
 8004b38:	0801f3f8 	.word	0x0801f3f8
 8004b3c:	0801f40c 	.word	0x0801f40c
 8004b40:	0801f560 	.word	0x0801f560

08004b44 <_ZN5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKSH_>:
  * This class represents an abstract expression of A.inverse()
  * and most of the time this is the only way it is used.
  *
  */
template<typename XprType>
class Inverse : public InverseImpl<XprType,typename internal::traits<XprType>::StorageKind>
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	683a      	ldr	r2, [r7, #0]
 8004b52:	4611      	mov	r1, r2
 8004b54:	4618      	mov	r0, r3
 8004b56:	f7ff ffb0 	bl	8004aba <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERKSF_>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3708      	adds	r7, #8
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEmlINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEEKNS1_IS7_T_Li0EEERKNS0_ISM_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8004b64:	b590      	push	{r4, r7, lr}
 8004b66:	b085      	sub	sp, #20
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8004b70:	68b8      	ldr	r0, [r7, #8]
 8004b72:	f001 fb0c 	bl	800618e <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEE7derivedEv>
 8004b76:	4604      	mov	r4, r0
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f001 fb13 	bl	80061a4 <_ZNK5Eigen9EigenBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEE7derivedEv>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	461a      	mov	r2, r3
 8004b82:	4621      	mov	r1, r4
 8004b84:	68f8      	ldr	r0, [r7, #12]
 8004b86:	f001 fb57 	bl	8006238 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEC1ERKS6_RKSI_>
}
 8004b8a:	68f8      	ldr	r0, [r7, #12]
 8004b8c:	3714      	adds	r7, #20
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd90      	pop	{r4, r7, pc}

08004b92 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEaSINS_7ProductINS3_INS0_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS0_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS3_INS3_IS6_S4_Li0EEES7_Li0EEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERS1_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Matrix& operator=(const DenseBase<OtherDerived>& other)
 8004b92:	b580      	push	{r7, lr}
 8004b94:	b082      	sub	sp, #8
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
 8004b9a:	6039      	str	r1, [r7, #0]
      return Base::_set(other);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6839      	ldr	r1, [r7, #0]
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f001 fb7b 	bl	800629c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4_setINS_7ProductINS5_INS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS5_INS5_IS8_S6_Li0EEES9_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERS2_RKNS_9DenseBaseIT_EE>
 8004ba6:	4603      	mov	r3, r0
    }
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3708      	adds	r7, #8
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEmlINS1_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8004bb0:	b590      	push	{r4, r7, lr}
 8004bb2:	b085      	sub	sp, #20
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8004bbc:	68b8      	ldr	r0, [r7, #8]
 8004bbe:	f001 f92b 	bl	8005e18 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 8004bc2:	4604      	mov	r4, r0
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f000 fc8e 	bl	80054e6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	461a      	mov	r2, r3
 8004bce:	4621      	mov	r1, r4
 8004bd0:	68f8      	ldr	r0, [r7, #12]
 8004bd2:	f001 fba1 	bl	8006318 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_>
}
 8004bd6:	68f8      	ldr	r0, [r7, #12]
 8004bd8:	3714      	adds	r7, #20
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd90      	pop	{r4, r7, pc}

08004bde <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEmiINS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEKNS_13CwiseBinaryOpINS_8internal20scalar_difference_opIfNSA_6traitsIT_E6ScalarEEEKS2_KSD_EERKNS0_ISD_EE>:
EIGEN_MAKE_CWISE_BINARY_OP(operator-,difference)
 8004bde:	b5b0      	push	{r4, r5, r7, lr}
 8004be0:	b086      	sub	sp, #24
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	60f8      	str	r0, [r7, #12]
 8004be6:	60b9      	str	r1, [r7, #8]
 8004be8:	607a      	str	r2, [r7, #4]
 8004bea:	68b8      	ldr	r0, [r7, #8]
 8004bec:	f001 f9eb 	bl	8005fc6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 8004bf0:	4604      	mov	r4, r0
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f001 fbbe 	bl	8006374 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE7derivedEv>
 8004bf8:	4605      	mov	r5, r0
 8004bfa:	f107 0314 	add.w	r3, r7, #20
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f001 fbc3 	bl	800638a <_ZN5Eigen8internal20scalar_difference_opIffEC1Ev>
 8004c04:	f107 0314 	add.w	r3, r7, #20
 8004c08:	462a      	mov	r2, r5
 8004c0a:	4621      	mov	r1, r4
 8004c0c:	68f8      	ldr	r0, [r7, #12]
 8004c0e:	f001 fbfb 	bl	8006408 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERS6_RSB_RKS3_>
 8004c12:	68f8      	ldr	r0, [r7, #12]
 8004c14:	3718      	adds	r7, #24
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bdb0      	pop	{r4, r5, r7, pc}

08004c1a <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERKSC_>:
 8004c1a:	b580      	push	{r7, lr}
 8004c1c:	b082      	sub	sp, #8
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6078      	str	r0, [r7, #4]
 8004c22:	6039      	str	r1, [r7, #0]
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	601a      	str	r2, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	1d1a      	adds	r2, r3, #4
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	3304      	adds	r3, #4
 8004c34:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004c38:	e882 0003 	stmia.w	r2, {r0, r1}
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f103 020c 	add.w	r2, r3, #12
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	330c      	adds	r3, #12
 8004c46:	4619      	mov	r1, r3
 8004c48:	4610      	mov	r0, r2
 8004c4a:	f001 fc1f 	bl	800648c <_ZN5Eigen8internal20scalar_difference_opIffEC1ERKS2_>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4618      	mov	r0, r3
 8004c52:	3708      	adds	r7, #8
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEmlINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEEEEKNSB_IS2_T_Li0EEERKNS0_ISG_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8004c58:	b590      	push	{r4, r7, lr}
 8004c5a:	b085      	sub	sp, #20
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8004c64:	68b8      	ldr	r0, [r7, #8]
 8004c66:	f000 fc3e 	bl	80054e6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8004c6a:	4604      	mov	r4, r0
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f001 fc19 	bl	80064a4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEE7derivedEv>
 8004c72:	4603      	mov	r3, r0
 8004c74:	461a      	mov	r2, r3
 8004c76:	4621      	mov	r1, r4
 8004c78:	68f8      	ldr	r0, [r7, #12]
 8004c7a:	f001 fc51 	bl	8006520 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKS2_RKSC_>
}
 8004c7e:	68f8      	ldr	r0, [r7, #12]
 8004c80:	3714      	adds	r7, #20
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd90      	pop	{r4, r7, pc}

08004c86 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKSD_>:
  * The other template parameters are:
  * \tparam Option     can be DefaultProduct, AliasFreeProduct, or LazyProduct
  *
  */
template<typename _Lhs, typename _Rhs, int Option>
class Product : public ProductImpl<_Lhs,_Rhs,Option,
 8004c86:	b580      	push	{r7, lr}
 8004c88:	b082      	sub	sp, #8
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
 8004c8e:	6039      	str	r1, [r7, #0]
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	601a      	str	r2, [r3, #0]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	1d1a      	adds	r2, r3, #4
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	3304      	adds	r3, #4
 8004ca0:	4619      	mov	r1, r3
 8004ca2:	4610      	mov	r0, r2
 8004ca4:	f7ff ffb9 	bl	8004c1a <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERKSC_>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4618      	mov	r0, r3
 8004cac:	3708      	adds	r7, #8
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}

08004cb2 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEplINS_7ProductIS2_NS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS5_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEEKNS6_INS7_13scalar_sum_opIfNS7_6traitsIT_E6ScalarEEEKS2_KSJ_EERKNS0_ISJ_EE>:
EIGEN_MAKE_CWISE_BINARY_OP(operator+,sum)
 8004cb2:	b5b0      	push	{r4, r5, r7, lr}
 8004cb4:	b086      	sub	sp, #24
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	60f8      	str	r0, [r7, #12]
 8004cba:	60b9      	str	r1, [r7, #8]
 8004cbc:	607a      	str	r2, [r7, #4]
 8004cbe:	68b8      	ldr	r0, [r7, #8]
 8004cc0:	f000 fc11 	bl	80054e6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8004cc4:	4604      	mov	r4, r0
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f001 fc5a 	bl	8006580 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEE7derivedEv>
 8004ccc:	4605      	mov	r5, r0
 8004cce:	f107 0314 	add.w	r3, r7, #20
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f000 ff5d 	bl	8005b92 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 8004cd8:	f107 0314 	add.w	r3, r7, #20
 8004cdc:	462a      	mov	r2, r5
 8004cde:	4621      	mov	r1, r4
 8004ce0:	68f8      	ldr	r0, [r7, #12]
 8004ce2:	f001 fc8d 	bl	8006600 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEEC1ERS6_RSH_RKS3_>
 8004ce6:	68f8      	ldr	r0, [r7, #12]
 8004ce8:	3718      	adds	r7, #24
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bdb0      	pop	{r4, r5, r7, pc}

08004cee <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEaSINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS1_KNS_7ProductIS1_NS3_INS4_20scalar_difference_opIffEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS0_IfLi1ELi3ELi1ELi1ELi3EEES1_Li0EEEEELi0EEEEEEERS1_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Matrix& operator=(const DenseBase<OtherDerived>& other)
 8004cee:	b580      	push	{r7, lr}
 8004cf0:	b082      	sub	sp, #8
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
 8004cf6:	6039      	str	r1, [r7, #0]
      return Base::_set(other);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6839      	ldr	r1, [r7, #0]
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f001 fcbf 	bl	8006680 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4_setINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS2_KNS_7ProductIS2_NS5_INS6_20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>
 8004d02:	4603      	mov	r3, r0
    }
 8004d04:	4618      	mov	r0, r3
 8004d06:	3708      	adds	r7, #8
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEmlINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8004d0c:	b590      	push	{r4, r7, lr}
 8004d0e:	b085      	sub	sp, #20
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8004d18:	68b8      	ldr	r0, [r7, #8]
 8004d1a:	f000 fbe4 	bl	80054e6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8004d1e:	4604      	mov	r4, r0
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f001 f879 	bl	8005e18 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 8004d26:	4603      	mov	r3, r0
 8004d28:	461a      	mov	r2, r3
 8004d2a:	4621      	mov	r1, r4
 8004d2c:	68f8      	ldr	r0, [r7, #12]
 8004d2e:	f001 fce5 	bl	80066fc <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEC1ERKS2_RKS3_>
}
 8004d32:	68f8      	ldr	r0, [r7, #12]
 8004d34:	3714      	adds	r7, #20
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd90      	pop	{r4, r7, pc}

08004d3a <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmiINS_7ProductINS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEKNS_13CwiseBinaryOpINS_8internal20scalar_difference_opIfNSA_6traitsIT_E6ScalarEEEKS2_KSD_EERKNS0_ISD_EE>:
EIGEN_MAKE_CWISE_BINARY_OP(operator-,difference)
 8004d3a:	b5b0      	push	{r4, r5, r7, lr}
 8004d3c:	b086      	sub	sp, #24
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	60f8      	str	r0, [r7, #12]
 8004d42:	60b9      	str	r1, [r7, #8]
 8004d44:	607a      	str	r2, [r7, #4]
 8004d46:	68b8      	ldr	r0, [r7, #8]
 8004d48:	f000 fd95 	bl	8005876 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8004d4c:	4604      	mov	r4, r0
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f001 fd02 	bl	8006758 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE7derivedEv>
 8004d54:	4605      	mov	r5, r0
 8004d56:	f107 0314 	add.w	r3, r7, #20
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f001 fb15 	bl	800638a <_ZN5Eigen8internal20scalar_difference_opIffEC1Ev>
 8004d60:	f107 0314 	add.w	r3, r7, #20
 8004d64:	462a      	mov	r2, r5
 8004d66:	4621      	mov	r1, r4
 8004d68:	68f8      	ldr	r0, [r7, #12]
 8004d6a:	f001 fd35 	bl	80067d8 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERS6_RSB_RKS3_>
 8004d6e:	68f8      	ldr	r0, [r7, #12]
 8004d70:	3718      	adds	r7, #24
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bdb0      	pop	{r4, r5, r7, pc}

08004d76 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERKSC_>:
 8004d76:	b580      	push	{r7, lr}
 8004d78:	b082      	sub	sp, #8
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
 8004d7e:	6039      	str	r1, [r7, #0]
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	601a      	str	r2, [r3, #0]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	1d1a      	adds	r2, r3, #4
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	3304      	adds	r3, #4
 8004d90:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004d94:	e882 0003 	stmia.w	r2, {r0, r1}
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f103 020c 	add.w	r2, r3, #12
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	330c      	adds	r3, #12
 8004da2:	4619      	mov	r1, r3
 8004da4:	4610      	mov	r0, r2
 8004da6:	f001 fb71 	bl	800648c <_ZN5Eigen8internal20scalar_difference_opIffEC1ERKS2_>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4618      	mov	r0, r3
 8004dae:	3708      	adds	r7, #8
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEmlIS6_EEKNS8_ISD_T_Li0EEERKNS0_ISG_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8004db4:	b590      	push	{r4, r7, lr}
 8004db6:	b085      	sub	sp, #20
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	60f8      	str	r0, [r7, #12]
 8004dbc:	60b9      	str	r1, [r7, #8]
 8004dbe:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8004dc0:	68b8      	ldr	r0, [r7, #8]
 8004dc2:	f001 fd4b 	bl	800685c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEE7derivedEv>
 8004dc6:	4604      	mov	r4, r0
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f000 fd54 	bl	8005876 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	4621      	mov	r1, r4
 8004dd4:	68f8      	ldr	r0, [r7, #12]
 8004dd6:	f001 fd7f 	bl	80068d8 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EEC1ERKSC_RS7_>
}
 8004dda:	68f8      	ldr	r0, [r7, #12]
 8004ddc:	3714      	adds	r7, #20
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd90      	pop	{r4, r7, pc}

08004de2 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEaSINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS3_INS0_IfLi3ELi1ELi0ELi3ELi1EEENS0_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES1_Li0EEEEERS1_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Matrix& operator=(const DenseBase<OtherDerived>& other)
 8004de2:	b580      	push	{r7, lr}
 8004de4:	b082      	sub	sp, #8
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
 8004dea:	6039      	str	r1, [r7, #0]
      return Base::_set(other);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6839      	ldr	r1, [r7, #0]
 8004df0:	4618      	mov	r0, r3
 8004df2:	f001 fd9f 	bl	8006934 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4_setINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS5_INS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>
 8004df6:	4603      	mov	r3, r0
    }
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3708      	adds	r7, #8
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <_ZNK5Eigen8symbolic8BaseExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	370c      	adds	r7, #12
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr

08004e16 <_ZN5Eigen8symbolic9ValueExprINS_8internal8FixedIntILi1EEEEC1Ev>:
  ValueExpr() {}
 8004e16:	b480      	push	{r7}
 8004e18:	b083      	sub	sp, #12
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4618      	mov	r0, r3
 8004e22:	370c      	adds	r7, #12
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr

08004e2c <_ZN5Eigen8symbolic7AddExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEENS0_9ValueExprINS3_8FixedIntILi1EEEEEEC1ERKS5_RKS9_>:

template<typename Arg0, typename Arg1>
class AddExpr : public BaseExpr<AddExpr<Arg0,Arg1> >
{
public:
  AddExpr(const Arg0& arg0, const Arg1& arg1) : m_arg0(arg0), m_arg1(arg1) {}
 8004e2c:	b480      	push	{r7}
 8004e2e:	b085      	sub	sp, #20
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	607a      	str	r2, [r7, #4]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3714      	adds	r7, #20
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr

08004e46 <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>:
    EIGEN_MATRIX_FUNCTION_1(MatrixPowerReturnValue,        pow, power to \c p, const RealScalar& p)
    EIGEN_MATRIX_FUNCTION_1(MatrixComplexPowerReturnValue, pow, power to \c p, const std::complex<RealScalar>& p)

  protected:
    EIGEN_DEFAULT_COPY_CONSTRUCTOR(MatrixBase)
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(MatrixBase)
 8004e46:	b580      	push	{r7, lr}
 8004e48:	b082      	sub	sp, #8
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f001 fd89 	bl	8006966 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4618      	mov	r0, r3
 8004e58:	3708      	adds	r7, #8
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}

08004e5e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>:
    // Prevent user from trying to instantiate PlainObjectBase objects
    // by making all its constructor protected. See bug 1074.
  protected:

    EIGEN_DEVICE_FUNC
    EIGEN_STRONG_INLINE PlainObjectBase() : m_storage()
 8004e5e:	b580      	push	{r7, lr}
 8004e60:	b082      	sub	sp, #8
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	6078      	str	r0, [r7, #4]
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f7ff ffed 	bl	8004e46 <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f001 fd84 	bl	800697c <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EEC1Ev>
    {
//       _check_template_params();
//       EIGEN_INITIALIZE_COEFFS_IF_THAT_OPTION_IS_ENABLED
    }
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4618      	mov	r0, r3
 8004e78:	3708      	adds	r7, #8
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}

08004e7e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE22_check_template_paramsEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    void swap(DenseBase<OtherDerived> const & other)
    { Base::swap(other.derived()); }

    EIGEN_DEVICE_FUNC
    static EIGEN_STRONG_INLINE void _check_template_params()
 8004e7e:	b480      	push	{r7}
 8004e80:	af00      	add	r7, sp, #0
                        && ((MaxColsAtCompileTime == Dynamic) || (MaxColsAtCompileTime >= 0))
                        && (MaxRowsAtCompileTime == RowsAtCompileTime || RowsAtCompileTime==Dynamic)
                        && (MaxColsAtCompileTime == ColsAtCompileTime || ColsAtCompileTime==Dynamic)
                        && (Options & (DontAlign|RowMajor)) == Options),
        INVALID_MATRIX_TEMPLATE_PARAMETERS)
    }
 8004e82:	bf00      	nop
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>:
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b082      	sub	sp, #8
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f001 fd7e 	bl	8006996 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3708      	adds	r7, #8
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>:
    EIGEN_STRONG_INLINE PlainObjectBase() : m_storage()
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b082      	sub	sp, #8
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f7ff ffed 	bl	8004e8c <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f001 fd79 	bl	80069ac <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EEC1Ev>
    }
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3708      	adds	r7, #8
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE22_check_template_paramsEv>:
    static EIGEN_STRONG_INLINE void _check_template_params()
 8004ec4:	b480      	push	{r7}
 8004ec6:	af00      	add	r7, sp, #0
    }
 8004ec8:	bf00      	nop
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr

08004ed2 <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>:
 8004ed2:	b580      	push	{r7, lr}
 8004ed4:	b082      	sub	sp, #8
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f001 fd73 	bl	80069c6 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3708      	adds	r7, #8
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}

08004eea <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>:
    EIGEN_STRONG_INLINE PlainObjectBase() : m_storage()
 8004eea:	b580      	push	{r7, lr}
 8004eec:	b082      	sub	sp, #8
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f7ff ffed 	bl	8004ed2 <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4618      	mov	r0, r3
 8004efc:	f001 fd6e 	bl	80069dc <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EEC1Ev>
    }
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4618      	mov	r0, r3
 8004f04:	3708      	adds	r7, #8
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}

08004f0a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv>:
    static EIGEN_STRONG_INLINE void _check_template_params()
 8004f0a:	b480      	push	{r7}
 8004f0c:	af00      	add	r7, sp, #0
    }
 8004f0e:	bf00      	nop
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>:
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f001 fd68 	bl	80069f6 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3708      	adds	r7, #8
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}

08004f30 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>:
    EIGEN_STRONG_INLINE PlainObjectBase() : m_storage()
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b082      	sub	sp, #8
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f7ff ffed 	bl	8004f18 <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4618      	mov	r0, r3
 8004f42:	f001 fd63 	bl	8006a0c <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EEC1Ev>
    }
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3708      	adds	r7, #8
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE22_check_template_paramsEv>:
    static EIGEN_STRONG_INLINE void _check_template_params()
 8004f50:	b480      	push	{r7}
 8004f52:	af00      	add	r7, sp, #0
    }
 8004f54:	bf00      	nop
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr
	...

08004f60 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKf>:
  inline CommaInitializer(XprType& xpr, const Scalar& s)
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	60b9      	str	r1, [r7, #8]
 8004f6a:	607a      	str	r2, [r7, #4]
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	68ba      	ldr	r2, [r7, #8]
 8004f70:	601a      	str	r2, [r3, #0]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2200      	movs	r2, #0
 8004f76:	605a      	str	r2, [r3, #4]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	609a      	str	r2, [r3, #8]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2201      	movs	r2, #1
 8004f82:	60da      	str	r2, [r3, #12]
    eigen_assert(m_xpr.rows() > 0 && m_xpr.cols() > 0
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f000 f86a 	bl	8005062 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	dd07      	ble.n	8004fa4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKf+0x44>
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f000 f857 	bl	800504c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	dc05      	bgt.n	8004fb0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKf+0x50>
 8004fa4:	4b0b      	ldr	r3, [pc, #44]	; (8004fd4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKf+0x74>)
 8004fa6:	4a0c      	ldr	r2, [pc, #48]	; (8004fd8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKf+0x78>)
 8004fa8:	2124      	movs	r1, #36	; 0x24
 8004faa:	480c      	ldr	r0, [pc, #48]	; (8004fdc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKf+0x7c>)
 8004fac:	f018 ff72 	bl	801de94 <__assert_func>
 8004fb0:	bf00      	nop
    m_xpr.coeffRef(0,0) = s;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	2100      	movs	r1, #0
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f000 f85c 	bl	8005078 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8coeffRefEii>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	6013      	str	r3, [r2, #0]
  }
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3710      	adds	r7, #16
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
 8004fd2:	bf00      	nop
 8004fd4:	0801f5b8 	.word	0x0801f5b8
 8004fd8:	0801f614 	.word	0x0801f614
 8004fdc:	0801f024 	.word	0x0801f024

08004fe0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv>:
  inline XprType& finished() {
 8004fe0:	b590      	push	{r4, r7, lr}
 8004fe2:	b083      	sub	sp, #12
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
      eigen_assert(((m_row+m_currentBlockRows) == m_xpr.rows() || m_xpr.cols() == 0)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	685a      	ldr	r2, [r3, #4]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	18d4      	adds	r4, r2, r3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f000 f833 	bl	8005062 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	429c      	cmp	r4, r3
 8005000:	d007      	beq.n	8005012 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv+0x32>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4618      	mov	r0, r3
 8005008:	f000 f820 	bl	800504c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d109      	bne.n	8005026 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv+0x46>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	689c      	ldr	r4, [r3, #8]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4618      	mov	r0, r3
 800501c:	f000 f816 	bl	800504c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8005020:	4603      	mov	r3, r0
 8005022:	429c      	cmp	r4, r3
 8005024:	d005      	beq.n	8005032 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv+0x52>
 8005026:	4b06      	ldr	r3, [pc, #24]	; (8005040 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv+0x60>)
 8005028:	4a06      	ldr	r2, [pc, #24]	; (8005044 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv+0x64>)
 800502a:	217a      	movs	r1, #122	; 0x7a
 800502c:	4806      	ldr	r0, [pc, #24]	; (8005048 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv+0x68>)
 800502e:	f018 ff31 	bl	801de94 <__assert_func>
 8005032:	bf00      	nop
      return m_xpr;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
  }
 8005038:	4618      	mov	r0, r3
 800503a:	370c      	adds	r7, #12
 800503c:	46bd      	mov	sp, r7
 800503e:	bd90      	pop	{r4, r7, pc}
 8005040:	0801f6c4 	.word	0x0801f6c4
 8005044:	0801f764 	.word	0x0801f764
 8005048:	0801f024 	.word	0x0801f024

0800504c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_storage.cols(); }
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	f001 fce7 	bl	8006a26 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4colsEv>
 8005058:	4603      	mov	r3, r0
 800505a:	4618      	mov	r0, r3
 800505c:	3708      	adds	r7, #8
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}

08005062 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_storage.rows(); }
 8005062:	b580      	push	{r7, lr}
 8005064:	b082      	sub	sp, #8
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
 800506a:	f001 fce4 	bl	8006a36 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4rowsEv>
 800506e:	4603      	mov	r3, r0
 8005070:	4618      	mov	r0, r3
 8005072:	3708      	adds	r7, #8
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8coeffRefEii>:
    EIGEN_STRONG_INLINE Scalar& coeffRef(Index rowId, Index colId)
 8005078:	b590      	push	{r4, r7, lr}
 800507a:	b085      	sub	sp, #20
 800507c:	af00      	add	r7, sp, #0
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	607a      	str	r2, [r7, #4]
        return m_storage.data()[rowId + colId * m_storage.rows()];
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	4618      	mov	r0, r3
 8005088:	f001 fcdd 	bl	8006a46 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4dataEv>
 800508c:	4604      	mov	r4, r0
 800508e:	f001 fcd2 	bl	8006a36 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4rowsEv>
 8005092:	4602      	mov	r2, r0
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	fb03 f202 	mul.w	r2, r3, r2
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	4413      	add	r3, r2
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	4423      	add	r3, r4
    }
 80050a2:	4618      	mov	r0, r3
 80050a4:	3714      	adds	r7, #20
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd90      	pop	{r4, r7, pc}
	...

080050ac <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKf>:
  inline CommaInitializer(XprType& xpr, const Scalar& s)
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	60b9      	str	r1, [r7, #8]
 80050b6:	607a      	str	r2, [r7, #4]
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	68ba      	ldr	r2, [r7, #8]
 80050bc:	601a      	str	r2, [r3, #0]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2200      	movs	r2, #0
 80050c2:	605a      	str	r2, [r3, #4]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2201      	movs	r2, #1
 80050c8:	609a      	str	r2, [r3, #8]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2201      	movs	r2, #1
 80050ce:	60da      	str	r2, [r3, #12]
    eigen_assert(m_xpr.rows() > 0 && m_xpr.cols() > 0
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4618      	mov	r0, r3
 80050d6:	f000 f86a 	bl	80051ae <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80050da:	4603      	mov	r3, r0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	dd07      	ble.n	80050f0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKf+0x44>
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4618      	mov	r0, r3
 80050e6:	f000 f857 	bl	8005198 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	dc05      	bgt.n	80050fc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKf+0x50>
 80050f0:	4b0b      	ldr	r3, [pc, #44]	; (8005120 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKf+0x74>)
 80050f2:	4a0c      	ldr	r2, [pc, #48]	; (8005124 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKf+0x78>)
 80050f4:	2124      	movs	r1, #36	; 0x24
 80050f6:	480c      	ldr	r0, [pc, #48]	; (8005128 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKf+0x7c>)
 80050f8:	f018 fecc 	bl	801de94 <__assert_func>
 80050fc:	bf00      	nop
    m_xpr.coeffRef(0,0) = s;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2200      	movs	r2, #0
 8005104:	2100      	movs	r1, #0
 8005106:	4618      	mov	r0, r3
 8005108:	f000 f85c 	bl	80051c4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8coeffRefEii>
 800510c:	4602      	mov	r2, r0
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	6013      	str	r3, [r2, #0]
  }
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	4618      	mov	r0, r3
 8005118:	3710      	adds	r7, #16
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop
 8005120:	0801f5b8 	.word	0x0801f5b8
 8005124:	0801f7cc 	.word	0x0801f7cc
 8005128:	0801f024 	.word	0x0801f024

0800512c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv>:
  inline XprType& finished() {
 800512c:	b590      	push	{r4, r7, lr}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
      eigen_assert(((m_row+m_currentBlockRows) == m_xpr.rows() || m_xpr.cols() == 0)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	685a      	ldr	r2, [r3, #4]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	18d4      	adds	r4, r2, r3
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4618      	mov	r0, r3
 8005144:	f000 f833 	bl	80051ae <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8005148:	4603      	mov	r3, r0
 800514a:	429c      	cmp	r4, r3
 800514c:	d007      	beq.n	800515e <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv+0x32>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4618      	mov	r0, r3
 8005154:	f000 f820 	bl	8005198 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d109      	bne.n	8005172 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv+0x46>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	689c      	ldr	r4, [r3, #8]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4618      	mov	r0, r3
 8005168:	f000 f816 	bl	8005198 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800516c:	4603      	mov	r3, r0
 800516e:	429c      	cmp	r4, r3
 8005170:	d005      	beq.n	800517e <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv+0x52>
 8005172:	4b06      	ldr	r3, [pc, #24]	; (800518c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv+0x60>)
 8005174:	4a06      	ldr	r2, [pc, #24]	; (8005190 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv+0x64>)
 8005176:	217a      	movs	r1, #122	; 0x7a
 8005178:	4806      	ldr	r0, [pc, #24]	; (8005194 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv+0x68>)
 800517a:	f018 fe8b 	bl	801de94 <__assert_func>
 800517e:	bf00      	nop
      return m_xpr;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
  }
 8005184:	4618      	mov	r0, r3
 8005186:	370c      	adds	r7, #12
 8005188:	46bd      	mov	sp, r7
 800518a:	bd90      	pop	{r4, r7, pc}
 800518c:	0801f6c4 	.word	0x0801f6c4
 8005190:	0801f87c 	.word	0x0801f87c
 8005194:	0801f024 	.word	0x0801f024

08005198 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_storage.cols(); }
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	f001 fc5c 	bl	8006a5c <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4colsEv>
 80051a4:	4603      	mov	r3, r0
 80051a6:	4618      	mov	r0, r3
 80051a8:	3708      	adds	r7, #8
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}

080051ae <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_storage.rows(); }
 80051ae:	b580      	push	{r7, lr}
 80051b0:	b082      	sub	sp, #8
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	6078      	str	r0, [r7, #4]
 80051b6:	f001 fc59 	bl	8006a6c <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4rowsEv>
 80051ba:	4603      	mov	r3, r0
 80051bc:	4618      	mov	r0, r3
 80051be:	3708      	adds	r7, #8
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8coeffRefEii>:
    EIGEN_STRONG_INLINE Scalar& coeffRef(Index rowId, Index colId)
 80051c4:	b590      	push	{r4, r7, lr}
 80051c6:	b085      	sub	sp, #20
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	607a      	str	r2, [r7, #4]
        return m_storage.data()[rowId + colId * m_storage.rows()];
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	4618      	mov	r0, r3
 80051d4:	f001 fc52 	bl	8006a7c <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4dataEv>
 80051d8:	4604      	mov	r4, r0
 80051da:	f001 fc47 	bl	8006a6c <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4rowsEv>
 80051de:	4602      	mov	r2, r0
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	fb03 f202 	mul.w	r2, r3, r2
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	4413      	add	r3, r2
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	4423      	add	r3, r4
    }
 80051ee:	4618      	mov	r0, r3
 80051f0:	3714      	adds	r7, #20
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd90      	pop	{r4, r7, pc}
	...

080051f8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS2_RKf>:
  inline CommaInitializer(XprType& xpr, const Scalar& s)
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	607a      	str	r2, [r7, #4]
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	68ba      	ldr	r2, [r7, #8]
 8005208:	601a      	str	r2, [r3, #0]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2200      	movs	r2, #0
 800520e:	605a      	str	r2, [r3, #4]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2201      	movs	r2, #1
 8005214:	609a      	str	r2, [r3, #8]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2201      	movs	r2, #1
 800521a:	60da      	str	r2, [r3, #12]
    eigen_assert(m_xpr.rows() > 0 && m_xpr.cols() > 0
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4618      	mov	r0, r3
 8005222:	f000 ff0e 	bl	8006042 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8005226:	4603      	mov	r3, r0
 8005228:	2b00      	cmp	r3, #0
 800522a:	dd07      	ble.n	800523c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS2_RKf+0x44>
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4618      	mov	r0, r3
 8005232:	f000 ff11 	bl	8006058 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 8005236:	4603      	mov	r3, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	dc05      	bgt.n	8005248 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS2_RKf+0x50>
 800523c:	4b0b      	ldr	r3, [pc, #44]	; (800526c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS2_RKf+0x74>)
 800523e:	4a0c      	ldr	r2, [pc, #48]	; (8005270 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS2_RKf+0x78>)
 8005240:	2124      	movs	r1, #36	; 0x24
 8005242:	480c      	ldr	r0, [pc, #48]	; (8005274 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS2_RKf+0x7c>)
 8005244:	f018 fe26 	bl	801de94 <__assert_func>
 8005248:	bf00      	nop
    m_xpr.coeffRef(0,0) = s;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2200      	movs	r2, #0
 8005250:	2100      	movs	r1, #0
 8005252:	4618      	mov	r0, r3
 8005254:	f001 fc1d 	bl	8006a92 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8coeffRefEii>
 8005258:	4602      	mov	r2, r0
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	6013      	str	r3, [r2, #0]
  }
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	4618      	mov	r0, r3
 8005264:	3710      	adds	r7, #16
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	0801f5b8 	.word	0x0801f5b8
 8005270:	0801f8e4 	.word	0x0801f8e4
 8005274:	0801f024 	.word	0x0801f024

08005278 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv>:
  inline XprType& finished() {
 8005278:	b590      	push	{r4, r7, lr}
 800527a:	b083      	sub	sp, #12
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
      eigen_assert(((m_row+m_currentBlockRows) == m_xpr.rows() || m_xpr.cols() == 0)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	685a      	ldr	r2, [r3, #4]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	18d4      	adds	r4, r2, r3
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4618      	mov	r0, r3
 8005290:	f000 fed7 	bl	8006042 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8005294:	4603      	mov	r3, r0
 8005296:	429c      	cmp	r4, r3
 8005298:	d007      	beq.n	80052aa <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv+0x32>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4618      	mov	r0, r3
 80052a0:	f000 feda 	bl	8006058 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d109      	bne.n	80052be <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv+0x46>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	689c      	ldr	r4, [r3, #8]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4618      	mov	r0, r3
 80052b4:	f000 fed0 	bl	8006058 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 80052b8:	4603      	mov	r3, r0
 80052ba:	429c      	cmp	r4, r3
 80052bc:	d005      	beq.n	80052ca <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv+0x52>
 80052be:	4b06      	ldr	r3, [pc, #24]	; (80052d8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv+0x60>)
 80052c0:	4a06      	ldr	r2, [pc, #24]	; (80052dc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv+0x64>)
 80052c2:	217a      	movs	r1, #122	; 0x7a
 80052c4:	4806      	ldr	r0, [pc, #24]	; (80052e0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv+0x68>)
 80052c6:	f018 fde5 	bl	801de94 <__assert_func>
 80052ca:	bf00      	nop
      return m_xpr;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
  }
 80052d0:	4618      	mov	r0, r3
 80052d2:	370c      	adds	r7, #12
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd90      	pop	{r4, r7, pc}
 80052d8:	0801f6c4 	.word	0x0801f6c4
 80052dc:	0801f994 	.word	0x0801f994
 80052e0:	0801f024 	.word	0x0801f024

080052e4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_RKf>:
  inline CommaInitializer(XprType& xpr, const Scalar& s)
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	607a      	str	r2, [r7, #4]
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	68ba      	ldr	r2, [r7, #8]
 80052f4:	601a      	str	r2, [r3, #0]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2200      	movs	r2, #0
 80052fa:	605a      	str	r2, [r3, #4]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2201      	movs	r2, #1
 8005300:	609a      	str	r2, [r3, #8]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2201      	movs	r2, #1
 8005306:	60da      	str	r2, [r3, #12]
    eigen_assert(m_xpr.rows() > 0 && m_xpr.cols() > 0
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4618      	mov	r0, r3
 800530e:	f000 f86a 	bl	80053e6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8005312:	4603      	mov	r3, r0
 8005314:	2b00      	cmp	r3, #0
 8005316:	dd07      	ble.n	8005328 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_RKf+0x44>
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4618      	mov	r0, r3
 800531e:	f000 f857 	bl	80053d0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8005322:	4603      	mov	r3, r0
 8005324:	2b00      	cmp	r3, #0
 8005326:	dc05      	bgt.n	8005334 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_RKf+0x50>
 8005328:	4b0b      	ldr	r3, [pc, #44]	; (8005358 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_RKf+0x74>)
 800532a:	4a0c      	ldr	r2, [pc, #48]	; (800535c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_RKf+0x78>)
 800532c:	2124      	movs	r1, #36	; 0x24
 800532e:	480c      	ldr	r0, [pc, #48]	; (8005360 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_RKf+0x7c>)
 8005330:	f018 fdb0 	bl	801de94 <__assert_func>
 8005334:	bf00      	nop
    m_xpr.coeffRef(0,0) = s;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2200      	movs	r2, #0
 800533c:	2100      	movs	r1, #0
 800533e:	4618      	mov	r0, r3
 8005340:	f000 f85c 	bl	80053fc <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8coeffRefEii>
 8005344:	4602      	mov	r2, r0
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	6013      	str	r3, [r2, #0]
  }
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	4618      	mov	r0, r3
 8005350:	3710      	adds	r7, #16
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	0801f5b8 	.word	0x0801f5b8
 800535c:	0801f9fc 	.word	0x0801f9fc
 8005360:	0801f024 	.word	0x0801f024

08005364 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv>:
  inline XprType& finished() {
 8005364:	b590      	push	{r4, r7, lr}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
      eigen_assert(((m_row+m_currentBlockRows) == m_xpr.rows() || m_xpr.cols() == 0)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685a      	ldr	r2, [r3, #4]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	18d4      	adds	r4, r2, r3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4618      	mov	r0, r3
 800537c:	f000 f833 	bl	80053e6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8005380:	4603      	mov	r3, r0
 8005382:	429c      	cmp	r4, r3
 8005384:	d007      	beq.n	8005396 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv+0x32>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4618      	mov	r0, r3
 800538c:	f000 f820 	bl	80053d0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d109      	bne.n	80053aa <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv+0x46>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	689c      	ldr	r4, [r3, #8]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4618      	mov	r0, r3
 80053a0:	f000 f816 	bl	80053d0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 80053a4:	4603      	mov	r3, r0
 80053a6:	429c      	cmp	r4, r3
 80053a8:	d005      	beq.n	80053b6 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv+0x52>
 80053aa:	4b06      	ldr	r3, [pc, #24]	; (80053c4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv+0x60>)
 80053ac:	4a06      	ldr	r2, [pc, #24]	; (80053c8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv+0x64>)
 80053ae:	217a      	movs	r1, #122	; 0x7a
 80053b0:	4806      	ldr	r0, [pc, #24]	; (80053cc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv+0x68>)
 80053b2:	f018 fd6f 	bl	801de94 <__assert_func>
 80053b6:	bf00      	nop
      return m_xpr;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
  }
 80053bc:	4618      	mov	r0, r3
 80053be:	370c      	adds	r7, #12
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd90      	pop	{r4, r7, pc}
 80053c4:	0801f6c4 	.word	0x0801f6c4
 80053c8:	0801faac 	.word	0x0801faac
 80053cc:	0801f024 	.word	0x0801f024

080053d0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_storage.cols(); }
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b082      	sub	sp, #8
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	f001 fb74 	bl	8006ac4 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4colsEv>
 80053dc:	4603      	mov	r3, r0
 80053de:	4618      	mov	r0, r3
 80053e0:	3708      	adds	r7, #8
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}

080053e6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_storage.rows(); }
 80053e6:	b580      	push	{r7, lr}
 80053e8:	b082      	sub	sp, #8
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
 80053ee:	f001 fb71 	bl	8006ad4 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4rowsEv>
 80053f2:	4603      	mov	r3, r0
 80053f4:	4618      	mov	r0, r3
 80053f6:	3708      	adds	r7, #8
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8coeffRefEii>:
    EIGEN_STRONG_INLINE Scalar& coeffRef(Index rowId, Index colId)
 80053fc:	b590      	push	{r4, r7, lr}
 80053fe:	b085      	sub	sp, #20
 8005400:	af00      	add	r7, sp, #0
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	607a      	str	r2, [r7, #4]
        return m_storage.data()[colId + rowId * m_storage.cols()];
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	4618      	mov	r0, r3
 800540c:	f001 fb6a 	bl	8006ae4 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4dataEv>
 8005410:	4604      	mov	r4, r0
 8005412:	f001 fb57 	bl	8006ac4 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4colsEv>
 8005416:	4602      	mov	r2, r0
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	fb03 f202 	mul.w	r2, r3, r2
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4413      	add	r3, r2
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	4423      	add	r3, r4
    }
 8005426:	4618      	mov	r0, r3
 8005428:	3714      	adds	r7, #20
 800542a:	46bd      	mov	sp, r7
 800542c:	bd90      	pop	{r4, r7, pc}

0800542e <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 800542e:	b580      	push	{r7, lr}
 8005430:	b082      	sub	sp, #8
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 f855 	bl	80054e6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800543c:	4603      	mov	r3, r0
 800543e:	4618      	mov	r0, r3
 8005440:	f7ff feb5 	bl	80051ae <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8005444:	4603      	mov	r3, r0
 8005446:	4618      	mov	r0, r3
 8005448:	3708      	adds	r7, #8
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}

0800544e <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800544e:	b580      	push	{r7, lr}
 8005450:	b082      	sub	sp, #8
 8005452:	af00      	add	r7, sp, #0
 8005454:	6078      	str	r0, [r7, #4]
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f000 f845 	bl	80054e6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800545c:	4603      	mov	r3, r0
 800545e:	4618      	mov	r0, r3
 8005460:	f7ff fe9a 	bl	8005198 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8005464:	4603      	mov	r3, r0
 8005466:	4618      	mov	r0, r3
 8005468:	3708      	adds	r7, #8
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}

0800546e <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
protected:
  Index m_outerStride;
};

template<typename Derived>
struct evaluator<PlainObjectBase<Derived> >
 800546e:	b580      	push	{r7, lr}
 8005470:	b082      	sub	sp, #8
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f001 fb4f 	bl	8006b1a <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4618      	mov	r0, r3
 8005480:	3708      	adds	r7, #8
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}

08005486 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>:

  plainobjectbase_evaluator_data<Scalar,OuterStrideAtCompileTime> m_d;
};

template<typename Scalar, int Rows, int Cols, int Options, int MaxRows, int MaxCols>
struct evaluator<Matrix<Scalar, Rows, Cols, Options, MaxRows, MaxCols> >
 8005486:	b580      	push	{r7, lr}
 8005488:	b082      	sub	sp, #8
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4618      	mov	r0, r3
 8005492:	f7ff ffec 	bl	800546e <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4618      	mov	r0, r3
 800549a:	3708      	adds	r7, #8
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EE8coeffRefEii>:
    EIGEN_STRONG_INLINE Scalar& coeffRef(Index row, Index col)
 80054a0:	b590      	push	{r4, r7, lr}
 80054a2:	b087      	sub	sp, #28
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	607a      	str	r2, [r7, #4]
      return internal::evaluator<Derived>(derived()).coeffRef(row,col);
 80054ac:	68f8      	ldr	r0, [r7, #12]
 80054ae:	f000 f90f 	bl	80056d0 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80054b2:	4602      	mov	r2, r0
 80054b4:	f107 0314 	add.w	r3, r7, #20
 80054b8:	4611      	mov	r1, r2
 80054ba:	4618      	mov	r0, r3
 80054bc:	f001 fb1d 	bl	8006afa <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 80054c0:	f107 0314 	add.w	r3, r7, #20
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	68b9      	ldr	r1, [r7, #8]
 80054c8:	4618      	mov	r0, r3
 80054ca:	f001 fb31 	bl	8006b30 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEii>
 80054ce:	4604      	mov	r4, r0
 80054d0:	bf00      	nop
 80054d2:	f107 0314 	add.w	r3, r7, #20
 80054d6:	4618      	mov	r0, r3
 80054d8:	f7ff ffd5 	bl	8005486 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 80054dc:	4623      	mov	r3, r4
    }
 80054de:	4618      	mov	r0, r3
 80054e0:	371c      	adds	r7, #28
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd90      	pop	{r4, r7, pc}

080054e6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 80054e6:	b480      	push	{r7}
 80054e8:	b083      	sub	sp, #12
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4618      	mov	r0, r3
 80054f2:	370c      	adds	r7, #12
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr

080054fc <_ZN5Eigen8internal18scalar_constant_opIfEC1ERKf>:
namespace internal {

template<typename Scalar>
struct scalar_constant_op {
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE scalar_constant_op(const scalar_constant_op& other) : m_other(other.m_other) { }
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE scalar_constant_op(const Scalar& other) : m_other(other) { }
 80054fc:	b480      	push	{r7}
 80054fe:	b083      	sub	sp, #12
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	601a      	str	r2, [r3, #0]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4618      	mov	r0, r3
 8005512:	370c      	adds	r7, #12
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <_ZN5Eigen10MatrixBaseINS_14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
 800551c:	b580      	push	{r7, lr}
 800551e:	b082      	sub	sp, #8
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f001 fb1b 	bl	8006b60 <_ZN5Eigen9DenseBaseINS_14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4618      	mov	r0, r3
 800552e:	3708      	adds	r7, #8
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}

08005534 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_>:

    typedef typename internal::dense_xpr_base<CwiseNullaryOp>::type Base;
    EIGEN_DENSE_PUBLIC_INTERFACE(CwiseNullaryOp)

    EIGEN_DEVICE_FUNC
    CwiseNullaryOp(Index rows, Index cols, const NullaryOp& func = NullaryOp())
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	60b9      	str	r1, [r7, #8]
 800553e:	607a      	str	r2, [r7, #4]
 8005540:	603b      	str	r3, [r7, #0]
      : m_rows(rows), m_cols(cols), m_functor(func)
 8005542:	68f8      	ldr	r0, [r7, #12]
 8005544:	f7ff ffea 	bl	800551c <_ZN5Eigen10MatrixBaseINS_14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	68b9      	ldr	r1, [r7, #8]
 800554c:	4618      	mov	r0, r3
 800554e:	f001 fb13 	bl	8006b78 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	3301      	adds	r3, #1
 8005556:	6879      	ldr	r1, [r7, #4]
 8005558:	4618      	mov	r0, r3
 800555a:	f001 fb27 	bl	8006bac <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	3304      	adds	r3, #4
 8005562:	6839      	ldr	r1, [r7, #0]
 8005564:	4618      	mov	r0, r3
 8005566:	f000 f897 	bl	8005698 <_ZN5Eigen8internal18scalar_constant_opIfEC1ERKS2_>
    {
      eigen_assert(rows >= 0
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	2b00      	cmp	r3, #0
 800556e:	db08      	blt.n	8005582 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x4e>
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	2b03      	cmp	r3, #3
 8005574:	d105      	bne.n	8005582 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x4e>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2b00      	cmp	r3, #0
 800557a:	db02      	blt.n	8005582 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x4e>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2b01      	cmp	r3, #1
 8005580:	d005      	beq.n	800558e <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x5a>
 8005582:	4b05      	ldr	r3, [pc, #20]	; (8005598 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x64>)
 8005584:	4a05      	ldr	r2, [pc, #20]	; (800559c <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x68>)
 8005586:	2147      	movs	r1, #71	; 0x47
 8005588:	4805      	ldr	r0, [pc, #20]	; (80055a0 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x6c>)
 800558a:	f018 fc83 	bl	801de94 <__assert_func>
            && (RowsAtCompileTime == Dynamic || RowsAtCompileTime == rows)
            &&  cols >= 0
            && (ColsAtCompileTime == Dynamic || ColsAtCompileTime == cols));
    }
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	4618      	mov	r0, r3
 8005592:	3710      	adds	r7, #16
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}
 8005598:	0801fb14 	.word	0x0801fb14
 800559c:	0801fbac 	.word	0x0801fbac
 80055a0:	0801fca0 	.word	0x0801fca0

080055a4 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>:
template<typename LhsScalar,typename RhsScalar>
struct scalar_product_op  : binary_op_base<LhsScalar,RhsScalar>
{
  typedef typename ScalarBinaryOpTraits<LhsScalar,RhsScalar,scalar_product_op>::ReturnType result_type;
#ifndef EIGEN_SCALAR_BINARY_OP_PLUGIN
  EIGEN_EMPTY_STRUCT_CTOR(scalar_product_op)
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	4618      	mov	r0, r3
 80055b0:	370c      	adds	r7, #12
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr

080055ba <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEEC1Ev>:
 80055ba:	b580      	push	{r7, lr}
 80055bc:	b082      	sub	sp, #8
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f001 fb0c 	bl	8006be0 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEEC1Ev>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4618      	mov	r0, r3
 80055cc:	3708      	adds	r7, #8
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}

080055d2 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EENS_5DenseEEC1Ev>:
    const BinaryOp m_functor;
};

// Generic API dispatcher
template<typename BinaryOp, typename Lhs, typename Rhs, typename StorageKind>
class CwiseBinaryOpImpl
 80055d2:	b580      	push	{r7, lr}
 80055d4:	b082      	sub	sp, #8
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f7ff ffed 	bl	80055ba <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEEC1Ev>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4618      	mov	r0, r3
 80055e4:	3708      	adds	r7, #8
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}

080055ea <_ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>:

    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE EIGEN_CONSTEXPR
    Index rows() const { return m_rows.value(); }
 80055ea:	b580      	push	{r7, lr}
 80055ec:	b082      	sub	sp, #8
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
 80055f2:	f001 fb00 	bl	8006bf6 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 80055f6:	4603      	mov	r3, r0
 80055f8:	4618      	mov	r0, r3
 80055fa:	3708      	adds	r7, #8
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}

08005600 <_ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE EIGEN_CONSTEXPR
    Index cols() const { return m_cols.value(); }
 8005600:	b580      	push	{r7, lr}
 8005602:	b082      	sub	sp, #8
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	f001 fafd 	bl	8006c06 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800560c:	4603      	mov	r3, r0
 800560e:	4618      	mov	r0, r3
 8005610:	3708      	adds	r7, #8
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
	...

08005618 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERS6_RSB_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8005618:	b590      	push	{r4, r7, lr}
 800561a:	b085      	sub	sp, #20
 800561c:	af00      	add	r7, sp, #0
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	60b9      	str	r1, [r7, #8]
 8005622:	607a      	str	r2, [r7, #4]
 8005624:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 8005626:	68f8      	ldr	r0, [r7, #12]
 8005628:	f7ff ffd3 	bl	80055d2 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EENS_5DenseEEC1Ev>
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	68ba      	ldr	r2, [r7, #8]
 8005630:	601a      	str	r2, [r3, #0]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	3304      	adds	r3, #4
 8005636:	6879      	ldr	r1, [r7, #4]
 8005638:	4618      	mov	r0, r3
 800563a:	f7ff f871 	bl	8004720 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS7_>
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	330c      	adds	r3, #12
 8005642:	6839      	ldr	r1, [r7, #0]
 8005644:	4618      	mov	r0, r3
 8005646:	f000 f837 	bl	80056b8 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	4618      	mov	r0, r3
 800564e:	f7ff fdae 	bl	80051ae <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8005652:	4604      	mov	r4, r0
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f7ff ffc8 	bl	80055ea <_ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800565a:	4603      	mov	r3, r0
 800565c:	429c      	cmp	r4, r3
 800565e:	d10a      	bne.n	8005676 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERS6_RSB_RKS3_+0x5e>
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	4618      	mov	r0, r3
 8005664:	f7ff fd98 	bl	8005198 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8005668:	4604      	mov	r4, r0
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f7ff ffc8 	bl	8005600 <_ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8005670:	4603      	mov	r3, r0
 8005672:	429c      	cmp	r4, r3
 8005674:	d005      	beq.n	8005682 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERS6_RSB_RKS3_+0x6a>
 8005676:	4b05      	ldr	r3, [pc, #20]	; (800568c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERS6_RSB_RKS3_+0x74>)
 8005678:	4a05      	ldr	r2, [pc, #20]	; (8005690 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERS6_RSB_RKS3_+0x78>)
 800567a:	2174      	movs	r1, #116	; 0x74
 800567c:	4805      	ldr	r0, [pc, #20]	; (8005694 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERS6_RSB_RKS3_+0x7c>)
 800567e:	f018 fc09 	bl	801de94 <__assert_func>
    }
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	4618      	mov	r0, r3
 8005686:	3714      	adds	r7, #20
 8005688:	46bd      	mov	sp, r7
 800568a:	bd90      	pop	{r4, r7, pc}
 800568c:	0801fcfc 	.word	0x0801fcfc
 8005690:	0801fd38 	.word	0x0801fd38
 8005694:	0801ff60 	.word	0x0801ff60

08005698 <_ZN5Eigen8internal18scalar_constant_opIfEC1ERKS2_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE scalar_constant_op(const scalar_constant_op& other) : m_other(other.m_other) { }
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6039      	str	r1, [r7, #0]
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	601a      	str	r2, [r3, #0]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4618      	mov	r0, r3
 80056ae:	370c      	adds	r7, #12
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>:
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4618      	mov	r0, r3
 80056c6:	370c      	adds	r7, #12
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr

080056d0 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>:
  Derived& derived() { return *static_cast<Derived*>(this); }
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	4618      	mov	r0, r3
 80056dc:	370c      	adds	r7, #12
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr

080056e6 <_ZN5Eigen10MatrixBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
 80056e6:	b580      	push	{r7, lr}
 80056e8:	b082      	sub	sp, #8
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f001 fa91 	bl	8006c16 <_ZN5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4618      	mov	r0, r3
 80056f8:	3708      	adds	r7, #8
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}

080056fe <_ZN5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 80056fe:	b580      	push	{r7, lr}
 8005700:	b082      	sub	sp, #8
 8005702:	af00      	add	r7, sp, #0
 8005704:	6078      	str	r0, [r7, #4]
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f7ff ffed 	bl	80056e6 <_ZN5Eigen10MatrixBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4618      	mov	r0, r3
 8005710:	3708      	adds	r7, #8
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}

08005716 <_ZN5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 8005716:	b580      	push	{r7, lr}
 8005718:	b082      	sub	sp, #8
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
 800571e:	6039      	str	r1, [r7, #0]
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f7ff ffec 	bl	80056fe <_ZN5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEEC1Ev>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	683a      	ldr	r2, [r7, #0]
 800572a:	601a      	str	r2, [r3, #0]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4618      	mov	r0, r3
 8005730:	3708      	adds	r7, #8
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}

08005736 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8005736:	b480      	push	{r7}
 8005738:	b083      	sub	sp, #12
 800573a:	af00      	add	r7, sp, #0
 800573c:	6078      	str	r0, [r7, #4]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4618      	mov	r0, r3
 8005742:	370c      	adds	r7, #12
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>:
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4618      	mov	r0, r3
 8005758:	370c      	adds	r7, #12
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr

08005762 <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi0EEEEC1Ev>:
 8005762:	b580      	push	{r7, lr}
 8005764:	b082      	sub	sp, #8
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f001 fa5e 	bl	8006c2c <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi0EEEEC1Ev>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4618      	mov	r0, r3
 8005774:	3708      	adds	r7, #8
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}

0800577a <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0ELi4EEC1Ev>:
};

namespace internal {

template<typename Lhs, typename Rhs, int Option, int ProductTag = internal::product_type<Lhs,Rhs>::ret>
class dense_product_base
 800577a:	b580      	push	{r7, lr}
 800577c:	b082      	sub	sp, #8
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f7ff ffed 	bl	8005762 <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi0EEEEC1Ev>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	4618      	mov	r0, r3
 800578c:	3708      	adds	r7, #8
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}

08005792 <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0ENS_5DenseEEC1Ev>:
  public:
    typedef typename internal::generic_xpr_base<Product<Lhs,Rhs,Option>, MatrixXpr, StorageKind>::type Base;
};

template<typename Lhs, typename Rhs, int Option>
class ProductImpl<Lhs,Rhs,Option,Dense>
 8005792:	b580      	push	{r7, lr}
 8005794:	b082      	sub	sp, #8
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f7ff ffed 	bl	800577a <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0ELi4EEC1Ev>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4618      	mov	r0, r3
 80057a4:	3708      	adds	r7, #8
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}

080057aa <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 80057aa:	b580      	push	{r7, lr}
 80057ac:	b082      	sub	sp, #8
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4618      	mov	r0, r3
 80057b8:	f7ff fcee 	bl	8005198 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80057bc:	4603      	mov	r3, r0
    }
 80057be:	4618      	mov	r0, r3
 80057c0:	3708      	adds	r7, #8
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}

080057c6 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 80057c6:	b580      	push	{r7, lr}
 80057c8:	b082      	sub	sp, #8
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4618      	mov	r0, r3
 80057d4:	f7ff fce0 	bl	8005198 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80057d8:	4603      	mov	r3, r0
 80057da:	4618      	mov	r0, r3
 80057dc:	3708      	adds	r7, #8
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
	...

080057e4 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EEC1ERKSD_RKSF_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 80057e4:	b590      	push	{r4, r7, lr}
 80057e6:	b085      	sub	sp, #20
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	60b9      	str	r1, [r7, #8]
 80057ee:	607a      	str	r2, [r7, #4]
 80057f0:	68f8      	ldr	r0, [r7, #12]
 80057f2:	f7ff ffce 	bl	8005792 <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0ENS_5DenseEEC1Ev>
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	68b9      	ldr	r1, [r7, #8]
 80057fa:	4618      	mov	r0, r3
 80057fc:	f7fe ffee 	bl	80047dc <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERKSC_>
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	3310      	adds	r3, #16
 8005804:	687a      	ldr	r2, [r7, #4]
 8005806:	6812      	ldr	r2, [r2, #0]
 8005808:	601a      	str	r2, [r3, #0]
      eigen_assert(lhs.cols() == rhs.rows()
 800580a:	68b8      	ldr	r0, [r7, #8]
 800580c:	f7ff ffcd 	bl	80057aa <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4colsEv>
 8005810:	4604      	mov	r4, r0
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f7ff ffd7 	bl	80057c6 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8005818:	4603      	mov	r3, r0
 800581a:	429c      	cmp	r4, r3
 800581c:	d005      	beq.n	800582a <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EEC1ERKSD_RKSF_+0x46>
 800581e:	4b06      	ldr	r3, [pc, #24]	; (8005838 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EEC1ERKSD_RKSF_+0x54>)
 8005820:	4a06      	ldr	r2, [pc, #24]	; (800583c <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EEC1ERKSD_RKSF_+0x58>)
 8005822:	2160      	movs	r1, #96	; 0x60
 8005824:	4806      	ldr	r0, [pc, #24]	; (8005840 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EEC1ERKSD_RKSF_+0x5c>)
 8005826:	f018 fb35 	bl	801de94 <__assert_func>
 800582a:	bf00      	nop
    }
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	4618      	mov	r0, r3
 8005830:	3714      	adds	r7, #20
 8005832:	46bd      	mov	sp, r7
 8005834:	bd90      	pop	{r4, r7, pc}
 8005836:	bf00      	nop
 8005838:	0801ffbc 	.word	0x0801ffbc
 800583c:	08020048 	.word	0x08020048
 8005840:	0802030c 	.word	0x0802030c

08005844 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4_setINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS1_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS7_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set(const DenseBase<OtherDerived>& other)
 8005844:	b590      	push	{r4, r7, lr}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
      internal::call_assignment(this->derived(), other.derived());
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 f8da 	bl	8005a08 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8005854:	4604      	mov	r4, r0
 8005856:	6838      	ldr	r0, [r7, #0]
 8005858:	f001 f9f3 	bl	8006c42 <_ZNK5Eigen9EigenBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi0EEEE7derivedEv>
 800585c:	4603      	mov	r3, r0
 800585e:	4619      	mov	r1, r3
 8005860:	4620      	mov	r0, r4
 8005862:	f001 f9f9 	bl	8006c58 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEEEEvRT_RKT0_>
      return this->derived();
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 f8ce 	bl	8005a08 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800586c:	4603      	mov	r3, r0
    }
 800586e:	4618      	mov	r0, r3
 8005870:	370c      	adds	r7, #12
 8005872:	46bd      	mov	sp, r7
 8005874:	bd90      	pop	{r4, r7, pc}

08005876 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>:
 8005876:	b480      	push	{r7}
 8005878:	b083      	sub	sp, #12
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4618      	mov	r0, r3
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>:
 800588c:	b580      	push	{r7, lr}
 800588e:	b082      	sub	sp, #8
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f001 f9f4 	bl	8006c82 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4618      	mov	r0, r3
 800589e:	3708      	adds	r7, #8
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}

080058a4 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0ELi3EEC1Ev>:
class dense_product_base
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b082      	sub	sp, #8
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f7ff ffed 	bl	800588c <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4618      	mov	r0, r3
 80058b6:	3708      	adds	r7, #8
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 80058bc:	b580      	push	{r7, lr}
 80058be:	b082      	sub	sp, #8
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f7ff ffed 	bl	80058a4 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0ELi3EEC1Ev>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4618      	mov	r0, r3
 80058ce:	3708      	adds	r7, #8
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 80058d4:	b590      	push	{r4, r7, lr}
 80058d6:	b085      	sub	sp, #20
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	607a      	str	r2, [r7, #4]
 80058e0:	68f8      	ldr	r0, [r7, #12]
 80058e2:	f7ff ffeb 	bl	80058bc <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0ENS_5DenseEEC1Ev>
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	68ba      	ldr	r2, [r7, #8]
 80058ea:	601a      	str	r2, [r3, #0]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	4618      	mov	r0, r3
 80058f6:	f7ff fba9 	bl	800504c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80058fa:	4604      	mov	r4, r0
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	4618      	mov	r0, r3
 8005900:	f7ff fc55 	bl	80051ae <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8005904:	4603      	mov	r3, r0
 8005906:	429c      	cmp	r4, r3
 8005908:	d005      	beq.n	8005916 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x42>
 800590a:	4b06      	ldr	r3, [pc, #24]	; (8005924 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x50>)
 800590c:	4a06      	ldr	r2, [pc, #24]	; (8005928 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x54>)
 800590e:	2160      	movs	r1, #96	; 0x60
 8005910:	4806      	ldr	r0, [pc, #24]	; (800592c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x58>)
 8005912:	f018 fabf 	bl	801de94 <__assert_func>
 8005916:	bf00      	nop
    }
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	4618      	mov	r0, r3
 800591c:	3714      	adds	r7, #20
 800591e:	46bd      	mov	sp, r7
 8005920:	bd90      	pop	{r4, r7, pc}
 8005922:	bf00      	nop
 8005924:	0801ffbc 	.word	0x0801ffbc
 8005928:	08020360 	.word	0x08020360
 800592c:	0802030c 	.word	0x0802030c

08005930 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4_setINS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set(const DenseBase<OtherDerived>& other)
 8005930:	b590      	push	{r4, r7, lr}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
      internal::call_assignment(this->derived(), other.derived());
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f7ff fec8 	bl	80056d0 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8005940:	4604      	mov	r4, r0
 8005942:	6838      	ldr	r0, [r7, #0]
 8005944:	f001 f9a8 	bl	8006c98 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE7derivedEv>
 8005948:	4603      	mov	r3, r0
 800594a:	4619      	mov	r1, r3
 800594c:	4620      	mov	r0, r4
 800594e:	f001 f9ae 	bl	8006cae <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEEvRT_RKT0_>
      return this->derived();
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f7ff febc 	bl	80056d0 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8005958:	4603      	mov	r3, r0
    }
 800595a:	4618      	mov	r0, r3
 800595c:	370c      	adds	r7, #12
 800595e:	46bd      	mov	sp, r7
 8005960:	bd90      	pop	{r4, r7, pc}

08005962 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEC1Ev>:
 8005962:	b580      	push	{r7, lr}
 8005964:	b082      	sub	sp, #8
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f001 f9b4 	bl	8006cd8 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEC1Ev>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4618      	mov	r0, r3
 8005974:	3708      	adds	r7, #8
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}

0800597a <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0ELi3EEC1Ev>:
class dense_product_base
 800597a:	b580      	push	{r7, lr}
 800597c:	b082      	sub	sp, #8
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f7ff ffed 	bl	8005962 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEC1Ev>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4618      	mov	r0, r3
 800598c:	3708      	adds	r7, #8
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}

08005992 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8005992:	b580      	push	{r7, lr}
 8005994:	b082      	sub	sp, #8
 8005996:	af00      	add	r7, sp, #0
 8005998:	6078      	str	r0, [r7, #4]
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f7ff ffed 	bl	800597a <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0ELi3EEC1Ev>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4618      	mov	r0, r3
 80059a4:	3708      	adds	r7, #8
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
	...

080059ac <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEC1ERKS2_S5_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 80059ac:	b590      	push	{r4, r7, lr}
 80059ae:	b085      	sub	sp, #20
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	607a      	str	r2, [r7, #4]
 80059b8:	68f8      	ldr	r0, [r7, #12]
 80059ba:	f7ff ffea 	bl	8005992 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0ENS_5DenseEEC1Ev>
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	68ba      	ldr	r2, [r7, #8]
 80059c2:	601a      	str	r2, [r3, #0]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	4618      	mov	r0, r3
 80059ce:	f7ff fb3d 	bl	800504c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80059d2:	4604      	mov	r4, r0
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	4618      	mov	r0, r3
 80059d8:	f7ff fb43 	bl	8005062 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80059dc:	4603      	mov	r3, r0
 80059de:	429c      	cmp	r4, r3
 80059e0:	d005      	beq.n	80059ee <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEC1ERKS2_S5_+0x42>
 80059e2:	4b06      	ldr	r3, [pc, #24]	; (80059fc <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEC1ERKS2_S5_+0x50>)
 80059e4:	4a06      	ldr	r2, [pc, #24]	; (8005a00 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEC1ERKS2_S5_+0x54>)
 80059e6:	2160      	movs	r1, #96	; 0x60
 80059e8:	4806      	ldr	r0, [pc, #24]	; (8005a04 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEC1ERKS2_S5_+0x58>)
 80059ea:	f018 fa53 	bl	801de94 <__assert_func>
 80059ee:	bf00      	nop
    }
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	4618      	mov	r0, r3
 80059f4:	3714      	adds	r7, #20
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd90      	pop	{r4, r7, pc}
 80059fa:	bf00      	nop
 80059fc:	0801ffbc 	.word	0x0801ffbc
 8005a00:	08020488 	.word	0x08020488
 8005a04:	0802030c 	.word	0x0802030c

08005a08 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>:
  Derived& derived() { return *static_cast<Derived*>(this); }
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	4618      	mov	r0, r3
 8005a14:	370c      	adds	r7, #12
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr

08005a1e <_ZN5Eigen10MatrixBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1Ev>:
 8005a1e:	b580      	push	{r7, lr}
 8005a20:	b082      	sub	sp, #8
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f001 f961 	bl	8006cee <_ZN5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1Ev>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3708      	adds	r7, #8
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}

08005a36 <_ZN5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 8005a36:	b580      	push	{r7, lr}
 8005a38:	b082      	sub	sp, #8
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f7ff ffed 	bl	8005a1e <_ZN5Eigen10MatrixBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1Ev>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	4618      	mov	r0, r3
 8005a48:	3708      	adds	r7, #8
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}

08005a4e <_ZN5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 8005a4e:	b580      	push	{r7, lr}
 8005a50:	b082      	sub	sp, #8
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	6078      	str	r0, [r7, #4]
 8005a56:	6039      	str	r1, [r7, #0]
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f7ff ffec 	bl	8005a36 <_ZN5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEEC1Ev>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	683a      	ldr	r2, [r7, #0]
 8005a62:	601a      	str	r2, [r3, #0]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4618      	mov	r0, r3
 8005a68:	3708      	adds	r7, #8
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}

08005a6e <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8005a6e:	b480      	push	{r7}
 8005a70:	b083      	sub	sp, #12
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	6078      	str	r0, [r7, #4]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4618      	mov	r0, r3
 8005a7a:	370c      	adds	r7, #12
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr

08005a84 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>:
 8005a84:	b480      	push	{r7}
 8005a86:	b083      	sub	sp, #12
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	4618      	mov	r0, r3
 8005a90:	370c      	adds	r7, #12
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr

08005a9a <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEEC1Ev>:
 8005a9a:	b580      	push	{r7, lr}
 8005a9c:	b082      	sub	sp, #8
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	6078      	str	r0, [r7, #4]
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f001 f92e 	bl	8006d04 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEEC1Ev>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3708      	adds	r7, #8
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}

08005ab2 <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0ELi3EEC1Ev>:
class dense_product_base
 8005ab2:	b580      	push	{r7, lr}
 8005ab4:	b082      	sub	sp, #8
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6078      	str	r0, [r7, #4]
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f7ff ffed 	bl	8005a9a <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEEC1Ev>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3708      	adds	r7, #8
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}

08005aca <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8005aca:	b580      	push	{r7, lr}
 8005acc:	b082      	sub	sp, #8
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f7ff ffed 	bl	8005ab2 <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0ELi3EEC1Ev>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4618      	mov	r0, r3
 8005adc:	3708      	adds	r7, #8
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}

08005ae2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8005ae2:	b580      	push	{r7, lr}
 8005ae4:	b082      	sub	sp, #8
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	4618      	mov	r0, r3
 8005af0:	f7ff faac 	bl	800504c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8005af4:	4603      	mov	r3, r0
 8005af6:	4618      	mov	r0, r3
 8005af8:	3708      	adds	r7, #8
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}

08005afe <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 8005afe:	b580      	push	{r7, lr}
 8005b00:	b082      	sub	sp, #8
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f7ff fa9e 	bl	800504c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8005b10:	4603      	mov	r3, r0
 8005b12:	4618      	mov	r0, r3
 8005b14:	3708      	adds	r7, #8
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
	...

08005b1c <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EEC1ERKS3_RKS5_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8005b1c:	b590      	push	{r4, r7, lr}
 8005b1e:	b085      	sub	sp, #20
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	607a      	str	r2, [r7, #4]
 8005b28:	68f8      	ldr	r0, [r7, #12]
 8005b2a:	f7ff ffce 	bl	8005aca <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0ENS_5DenseEEC1Ev>
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	68ba      	ldr	r2, [r7, #8]
 8005b32:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005b36:	e883 0003 	stmia.w	r3, {r0, r1}
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	3308      	adds	r3, #8
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	6812      	ldr	r2, [r2, #0]
 8005b42:	601a      	str	r2, [r3, #0]
      eigen_assert(lhs.cols() == rhs.rows()
 8005b44:	68b8      	ldr	r0, [r7, #8]
 8005b46:	f7ff ffcc 	bl	8005ae2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4colsEv>
 8005b4a:	4604      	mov	r4, r0
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f7ff ffd6 	bl	8005afe <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8005b52:	4603      	mov	r3, r0
 8005b54:	429c      	cmp	r4, r3
 8005b56:	d005      	beq.n	8005b64 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EEC1ERKS3_RKS5_+0x48>
 8005b58:	4b05      	ldr	r3, [pc, #20]	; (8005b70 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EEC1ERKS3_RKS5_+0x54>)
 8005b5a:	4a06      	ldr	r2, [pc, #24]	; (8005b74 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EEC1ERKS3_RKS5_+0x58>)
 8005b5c:	2160      	movs	r1, #96	; 0x60
 8005b5e:	4806      	ldr	r0, [pc, #24]	; (8005b78 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EEC1ERKS3_RKS5_+0x5c>)
 8005b60:	f018 f998 	bl	801de94 <__assert_func>
 8005b64:	bf00      	nop
    }
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3714      	adds	r7, #20
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd90      	pop	{r4, r7, pc}
 8005b70:	0801ffbc 	.word	0x0801ffbc
 8005b74:	080205b0 	.word	0x080205b0
 8005b78:	0802030c 	.word	0x0802030c

08005b7c <_ZNK5Eigen9EigenBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEE7derivedEv>:
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4618      	mov	r0, r3
 8005b88:	370c      	adds	r7, #12
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr

08005b92 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>:
  EIGEN_EMPTY_STRUCT_CTOR(scalar_sum_op)
 8005b92:	b480      	push	{r7}
 8005b94:	b083      	sub	sp, #12
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	370c      	adds	r7, #12
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1Ev>:
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f001 f8b2 	bl	8006d1a <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1Ev>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3708      	adds	r7, #8
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_NS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b082      	sub	sp, #8
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f7ff ffed 	bl	8005ba8 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1Ev>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3708      	adds	r7, #8
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}

08005bd8 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b082      	sub	sp, #8
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4618      	mov	r0, r3
 8005be4:	f001 f8a4 	bl	8006d30 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4rowsEv>
 8005be8:	4603      	mov	r3, r0
 8005bea:	4618      	mov	r0, r3
 8005bec:	3708      	adds	r7, #8
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}

08005bf2 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8005bf2:	b580      	push	{r7, lr}
 8005bf4:	b082      	sub	sp, #8
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	6078      	str	r0, [r7, #4]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	3308      	adds	r3, #8
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f001 f8a4 	bl	8006d4c <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8005c04:	4603      	mov	r3, r0
 8005c06:	4618      	mov	r0, r3
 8005c08:	3708      	adds	r7, #8
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
	...

08005c10 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_EC1ERSB_RSC_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8005c10:	b590      	push	{r4, r7, lr}
 8005c12:	b085      	sub	sp, #20
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	607a      	str	r2, [r7, #4]
 8005c1c:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 8005c1e:	68f8      	ldr	r0, [r7, #12]
 8005c20:	f7ff ffce 	bl	8005bc0 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_NS_5DenseEEC1Ev>
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	68ba      	ldr	r2, [r7, #8]
 8005c28:	ca07      	ldmia	r2, {r0, r1, r2}
 8005c2a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	60da      	str	r2, [r3, #12]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	3310      	adds	r3, #16
 8005c38:	6839      	ldr	r1, [r7, #0]
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f000 f828 	bl	8005c90 <_ZN5Eigen8internal13scalar_sum_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8005c40:	68b8      	ldr	r0, [r7, #8]
 8005c42:	f7ff ffc9 	bl	8005bd8 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4rowsEv>
 8005c46:	4604      	mov	r4, r0
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f7ff fa09 	bl	8005062 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8005c50:	4603      	mov	r3, r0
 8005c52:	429c      	cmp	r4, r3
 8005c54:	d10a      	bne.n	8005c6c <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_EC1ERSB_RSC_RKS3_+0x5c>
 8005c56:	68b8      	ldr	r0, [r7, #8]
 8005c58:	f7ff ffcb 	bl	8005bf2 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4colsEv>
 8005c5c:	4604      	mov	r4, r0
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4618      	mov	r0, r3
 8005c62:	f7ff f9f3 	bl	800504c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8005c66:	4603      	mov	r3, r0
 8005c68:	429c      	cmp	r4, r3
 8005c6a:	d005      	beq.n	8005c78 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_EC1ERSB_RSC_RKS3_+0x68>
 8005c6c:	4b05      	ldr	r3, [pc, #20]	; (8005c84 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_EC1ERSB_RSC_RKS3_+0x74>)
 8005c6e:	4a06      	ldr	r2, [pc, #24]	; (8005c88 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_EC1ERSB_RSC_RKS3_+0x78>)
 8005c70:	2174      	movs	r1, #116	; 0x74
 8005c72:	4806      	ldr	r0, [pc, #24]	; (8005c8c <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_EC1ERSB_RSC_RKS3_+0x7c>)
 8005c74:	f018 f90e 	bl	801de94 <__assert_func>
    }
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3714      	adds	r7, #20
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd90      	pop	{r4, r7, pc}
 8005c82:	bf00      	nop
 8005c84:	0801fcfc 	.word	0x0801fcfc
 8005c88:	0802075c 	.word	0x0802075c
 8005c8c:	0801ff60 	.word	0x0801ff60

08005c90 <_ZN5Eigen8internal13scalar_sum_opIffEC1ERKS2_>:
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	370c      	adds	r7, #12
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4_setINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS9_IS2_S2_Li0EEENS_9TransposeIS2_EELi0EEEKS2_EEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set(const DenseBase<OtherDerived>& other)
 8005ca8:	b590      	push	{r4, r7, lr}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
      internal::call_assignment(this->derived(), other.derived());
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f7ff fea8 	bl	8005a08 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8005cb8:	4604      	mov	r4, r0
 8005cba:	6838      	ldr	r0, [r7, #0]
 8005cbc:	f001 f854 	bl	8006d68 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEE7derivedEv>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	4619      	mov	r1, r3
 8005cc4:	4620      	mov	r0, r4
 8005cc6:	f001 f85a 	bl	8006d7e <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRT_RKT0_>
      return this->derived();
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f7ff fe9c 	bl	8005a08 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8005cd0:	4603      	mov	r3, r0
    }
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	370c      	adds	r7, #12
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd90      	pop	{r4, r7, pc}

08005cda <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>:
  Derived& derived() { return *static_cast<Derived*>(this); }
 8005cda:	b480      	push	{r7}
 8005cdc:	b083      	sub	sp, #12
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	370c      	adds	r7, #12
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <_ZN5Eigen10MatrixBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>:
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b082      	sub	sp, #8
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f001 f855 	bl	8006da8 <_ZN5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4618      	mov	r0, r3
 8005d02:	3708      	adds	r7, #8
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <_ZN5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b082      	sub	sp, #8
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f7ff ffed 	bl	8005cf0 <_ZN5Eigen10MatrixBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3708      	adds	r7, #8
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <_ZN5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b082      	sub	sp, #8
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f7ff ffec 	bl	8005d08 <_ZN5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEEC1Ev>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	683a      	ldr	r2, [r7, #0]
 8005d34:	601a      	str	r2, [r3, #0]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3708      	adds	r7, #8
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}

08005d40 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	370c      	adds	r7, #12
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr

08005d56 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEC1Ev>:
 8005d56:	b580      	push	{r7, lr}
 8005d58:	b082      	sub	sp, #8
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f001 f82d 	bl	8006dbe <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEC1Ev>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	4618      	mov	r0, r3
 8005d68:	3708      	adds	r7, #8
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}

08005d6e <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0ELi3EEC1Ev>:
class dense_product_base
 8005d6e:	b580      	push	{r7, lr}
 8005d70:	b082      	sub	sp, #8
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f7ff ffed 	bl	8005d56 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEC1Ev>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3708      	adds	r7, #8
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}

08005d86 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8005d86:	b580      	push	{r7, lr}
 8005d88:	b082      	sub	sp, #8
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f7ff ffed 	bl	8005d6e <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0ELi3EEC1Ev>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4618      	mov	r0, r3
 8005d98:	3708      	adds	r7, #8
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}

08005d9e <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 8005d9e:	b580      	push	{r7, lr}
 8005da0:	b082      	sub	sp, #8
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4618      	mov	r0, r3
 8005dac:	f7ff fb10 	bl	80053d0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8005db0:	4603      	mov	r3, r0
 8005db2:	4618      	mov	r0, r3
 8005db4:	3708      	adds	r7, #8
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
	...

08005dbc <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEC1ERKS2_RKS5_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8005dbc:	b590      	push	{r4, r7, lr}
 8005dbe:	b085      	sub	sp, #20
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	607a      	str	r2, [r7, #4]
 8005dc8:	68f8      	ldr	r0, [r7, #12]
 8005dca:	f7ff ffdc 	bl	8005d86 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0ENS_5DenseEEC1Ev>
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	68ba      	ldr	r2, [r7, #8]
 8005dd2:	601a      	str	r2, [r3, #0]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	3304      	adds	r3, #4
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	6812      	ldr	r2, [r2, #0]
 8005ddc:	601a      	str	r2, [r3, #0]
      eigen_assert(lhs.cols() == rhs.rows()
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	4618      	mov	r0, r3
 8005de2:	f7ff f933 	bl	800504c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8005de6:	4604      	mov	r4, r0
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f7ff ffd8 	bl	8005d9e <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8005dee:	4603      	mov	r3, r0
 8005df0:	429c      	cmp	r4, r3
 8005df2:	d005      	beq.n	8005e00 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEC1ERKS2_RKS5_+0x44>
 8005df4:	4b05      	ldr	r3, [pc, #20]	; (8005e0c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEC1ERKS2_RKS5_+0x50>)
 8005df6:	4a06      	ldr	r2, [pc, #24]	; (8005e10 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEC1ERKS2_RKS5_+0x54>)
 8005df8:	2160      	movs	r1, #96	; 0x60
 8005dfa:	4806      	ldr	r0, [pc, #24]	; (8005e14 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEC1ERKS2_RKS5_+0x58>)
 8005dfc:	f018 f84a 	bl	801de94 <__assert_func>
 8005e00:	bf00      	nop
    }
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	4618      	mov	r0, r3
 8005e06:	3714      	adds	r7, #20
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd90      	pop	{r4, r7, pc}
 8005e0c:	0801ffbc 	.word	0x0801ffbc
 8005e10:	080209d0 	.word	0x080209d0
 8005e14:	0802030c 	.word	0x0802030c

08005e18 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>:
 8005e18:	b480      	push	{r7}
 8005e1a:	b083      	sub	sp, #12
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	4618      	mov	r0, r3
 8005e24:	370c      	adds	r7, #12
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr

08005e2e <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1Ev>:
 8005e2e:	b580      	push	{r7, lr}
 8005e30:	b082      	sub	sp, #8
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	6078      	str	r0, [r7, #4]
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 ffcc 	bl	8006dd4 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1Ev>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3708      	adds	r7, #8
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}

08005e46 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0ELi3EEC1Ev>:
class dense_product_base
 8005e46:	b580      	push	{r7, lr}
 8005e48:	b082      	sub	sp, #8
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	6078      	str	r0, [r7, #4]
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f7ff ffed 	bl	8005e2e <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1Ev>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	4618      	mov	r0, r3
 8005e58:	3708      	adds	r7, #8
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}

08005e5e <_ZN5Eigen11ProductImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8005e5e:	b580      	push	{r7, lr}
 8005e60:	b082      	sub	sp, #8
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f7ff ffed 	bl	8005e46 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0ELi3EEC1Ev>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3708      	adds	r7, #8
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
	...

08005e78 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8005e78:	b590      	push	{r4, r7, lr}
 8005e7a:	b085      	sub	sp, #20
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	607a      	str	r2, [r7, #4]
 8005e84:	68f8      	ldr	r0, [r7, #12]
 8005e86:	f7ff ffea 	bl	8005e5e <_ZN5Eigen11ProductImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0ENS_5DenseEEC1Ev>
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	68ba      	ldr	r2, [r7, #8]
 8005e8e:	601a      	str	r2, [r3, #0]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f7ff fa99 	bl	80053d0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8005e9e:	4604      	mov	r4, r0
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f7ff f8dd 	bl	8005062 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	429c      	cmp	r4, r3
 8005eac:	d005      	beq.n	8005eba <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEC1ERKS2_RKS3_+0x42>
 8005eae:	4b06      	ldr	r3, [pc, #24]	; (8005ec8 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEC1ERKS2_RKS3_+0x50>)
 8005eb0:	4a06      	ldr	r2, [pc, #24]	; (8005ecc <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEC1ERKS2_RKS3_+0x54>)
 8005eb2:	2160      	movs	r1, #96	; 0x60
 8005eb4:	4806      	ldr	r0, [pc, #24]	; (8005ed0 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEC1ERKS2_RKS3_+0x58>)
 8005eb6:	f017 ffed 	bl	801de94 <__assert_func>
 8005eba:	bf00      	nop
    }
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3714      	adds	r7, #20
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd90      	pop	{r4, r7, pc}
 8005ec6:	bf00      	nop
 8005ec8:	0801ffbc 	.word	0x0801ffbc
 8005ecc:	08020b1c 	.word	0x08020b1c
 8005ed0:	0802030c 	.word	0x0802030c

08005ed4 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE7derivedEv>:
 8005ed4:	b480      	push	{r7}
 8005ed6:	b083      	sub	sp, #12
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4618      	mov	r0, r3
 8005ee0:	370c      	adds	r7, #12
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr

08005eea <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEEC1Ev>:
 8005eea:	b580      	push	{r7, lr}
 8005eec:	b082      	sub	sp, #8
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6078      	str	r0, [r7, #4]
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 ff79 	bl	8006dea <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEEC1Ev>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4618      	mov	r0, r3
 8005efc:	3708      	adds	r7, #8
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}

08005f02 <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0ELi6EEC1Ev>:
class dense_product_base<Lhs, Rhs, Option, InnerProduct>
 8005f02:	b580      	push	{r7, lr}
 8005f04:	b082      	sub	sp, #8
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f7ff ffed 	bl	8005eea <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEEC1Ev>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	4618      	mov	r0, r3
 8005f14:	3708      	adds	r7, #8
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}

08005f1a <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8005f1a:	b580      	push	{r7, lr}
 8005f1c:	b082      	sub	sp, #8
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f7ff ffed 	bl	8005f02 <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0ELi6EEC1Ev>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3708      	adds	r7, #8
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}

08005f32 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8005f32:	b580      	push	{r7, lr}
 8005f34:	b082      	sub	sp, #8
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f7ff f884 	bl	800504c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8005f44:	4603      	mov	r3, r0
 8005f46:	4618      	mov	r0, r3
 8005f48:	3708      	adds	r7, #8
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
	...

08005f50 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EEC1ERKS4_RKS6_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8005f50:	b590      	push	{r4, r7, lr}
 8005f52:	b085      	sub	sp, #20
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	60b9      	str	r1, [r7, #8]
 8005f5a:	607a      	str	r2, [r7, #4]
 8005f5c:	68f8      	ldr	r0, [r7, #12]
 8005f5e:	f7ff ffdc 	bl	8005f1a <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0ENS_5DenseEEC1Ev>
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	68ba      	ldr	r2, [r7, #8]
 8005f66:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005f6a:	e883 0003 	stmia.w	r3, {r0, r1}
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	3308      	adds	r3, #8
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	6812      	ldr	r2, [r2, #0]
 8005f76:	601a      	str	r2, [r3, #0]
      eigen_assert(lhs.cols() == rhs.rows()
 8005f78:	68b8      	ldr	r0, [r7, #8]
 8005f7a:	f7ff ffda 	bl	8005f32 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4colsEv>
 8005f7e:	4604      	mov	r4, r0
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f7ff ff0c 	bl	8005d9e <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8005f86:	4603      	mov	r3, r0
 8005f88:	429c      	cmp	r4, r3
 8005f8a:	d005      	beq.n	8005f98 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EEC1ERKS4_RKS6_+0x48>
 8005f8c:	4b05      	ldr	r3, [pc, #20]	; (8005fa4 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EEC1ERKS4_RKS6_+0x54>)
 8005f8e:	4a06      	ldr	r2, [pc, #24]	; (8005fa8 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EEC1ERKS4_RKS6_+0x58>)
 8005f90:	2160      	movs	r1, #96	; 0x60
 8005f92:	4806      	ldr	r0, [pc, #24]	; (8005fac <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EEC1ERKS4_RKS6_+0x5c>)
 8005f94:	f017 ff7e 	bl	801de94 <__assert_func>
 8005f98:	bf00      	nop
    }
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3714      	adds	r7, #20
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd90      	pop	{r4, r7, pc}
 8005fa4:	0801ffbc 	.word	0x0801ffbc
 8005fa8:	08020c44 	.word	0x08020c44
 8005fac:	0802030c 	.word	0x0802030c

08005fb0 <_ZNK5Eigen9EigenBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEE7derivedEv>:
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	4618      	mov	r0, r3
 8005fbc:	370c      	adds	r7, #12
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr

08005fc6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>:
 8005fc6:	b480      	push	{r7}
 8005fc8:	b083      	sub	sp, #12
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>:
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f000 ff0b 	bl	8006e00 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4618      	mov	r0, r3
 8005fee:	3708      	adds	r7, #8
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}

08005ff4 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b082      	sub	sp, #8
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f7ff ffed 	bl	8005fdc <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4618      	mov	r0, r3
 8006006:	3708      	adds	r7, #8
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}

0800600c <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 800600c:	b580      	push	{r7, lr}
 800600e:	b082      	sub	sp, #8
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4618      	mov	r0, r3
 8006018:	f000 fefd 	bl	8006e16 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4rowsEv>
 800601c:	4603      	mov	r3, r0
 800601e:	4618      	mov	r0, r3
 8006020:	3708      	adds	r7, #8
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}

08006026 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8006026:	b580      	push	{r7, lr}
 8006028:	b082      	sub	sp, #8
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	3308      	adds	r3, #8
 8006032:	4618      	mov	r0, r3
 8006034:	f000 fefd 	bl	8006e32 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8006038:	4603      	mov	r3, r0
 800603a:	4618      	mov	r0, r3
 800603c:	3708      	adds	r7, #8
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}

08006042 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_storage.rows(); }
 8006042:	b580      	push	{r7, lr}
 8006044:	b082      	sub	sp, #8
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
 800604a:	f000 ff00 	bl	8006e4e <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4rowsEv>
 800604e:	4603      	mov	r3, r0
 8006050:	4618      	mov	r0, r3
 8006052:	3708      	adds	r7, #8
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_storage.cols(); }
 8006058:	b580      	push	{r7, lr}
 800605a:	b082      	sub	sp, #8
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	f000 fefd 	bl	8006e5e <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4colsEv>
 8006064:	4603      	mov	r3, r0
 8006066:	4618      	mov	r0, r3
 8006068:	3708      	adds	r7, #8
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
	...

08006070 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERSC_RSE_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8006070:	b590      	push	{r4, r7, lr}
 8006072:	b085      	sub	sp, #20
 8006074:	af00      	add	r7, sp, #0
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	60b9      	str	r1, [r7, #8]
 800607a:	607a      	str	r2, [r7, #4]
 800607c:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 800607e:	68f8      	ldr	r0, [r7, #12]
 8006080:	f7ff ffb8 	bl	8005ff4 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEENS_5DenseEEC1Ev>
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	68ba      	ldr	r2, [r7, #8]
 8006088:	ca07      	ldmia	r2, {r0, r1, r2}
 800608a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	60da      	str	r2, [r3, #12]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	3310      	adds	r3, #16
 8006098:	6839      	ldr	r1, [r7, #0]
 800609a:	4618      	mov	r0, r3
 800609c:	f7ff fdf8 	bl	8005c90 <_ZN5Eigen8internal13scalar_sum_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 80060a0:	68b8      	ldr	r0, [r7, #8]
 80060a2:	f7ff ffb3 	bl	800600c <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4rowsEv>
 80060a6:	4604      	mov	r4, r0
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	4618      	mov	r0, r3
 80060ac:	f7ff ffc9 	bl	8006042 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 80060b0:	4603      	mov	r3, r0
 80060b2:	429c      	cmp	r4, r3
 80060b4:	d10a      	bne.n	80060cc <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERSC_RSE_RKS3_+0x5c>
 80060b6:	68b8      	ldr	r0, [r7, #8]
 80060b8:	f7ff ffb5 	bl	8006026 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4colsEv>
 80060bc:	4604      	mov	r4, r0
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4618      	mov	r0, r3
 80060c2:	f7ff ffc9 	bl	8006058 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 80060c6:	4603      	mov	r3, r0
 80060c8:	429c      	cmp	r4, r3
 80060ca:	d005      	beq.n	80060d8 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERSC_RSE_RKS3_+0x68>
 80060cc:	4b05      	ldr	r3, [pc, #20]	; (80060e4 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERSC_RSE_RKS3_+0x74>)
 80060ce:	4a06      	ldr	r2, [pc, #24]	; (80060e8 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERSC_RSE_RKS3_+0x78>)
 80060d0:	2174      	movs	r1, #116	; 0x74
 80060d2:	4806      	ldr	r0, [pc, #24]	; (80060ec <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERSC_RSE_RKS3_+0x7c>)
 80060d4:	f017 fede 	bl	801de94 <__assert_func>
    }
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	4618      	mov	r0, r3
 80060dc:	3714      	adds	r7, #20
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd90      	pop	{r4, r7, pc}
 80060e2:	bf00      	nop
 80060e4:	0801fcfc 	.word	0x0801fcfc
 80060e8:	08020df0 	.word	0x08020df0
 80060ec:	0801ff60 	.word	0x0801ff60

080060f0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7derivedEv>:
 80060f0:	b480      	push	{r7}
 80060f2:	b083      	sub	sp, #12
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	4618      	mov	r0, r3
 80060fc:	370c      	adds	r7, #12
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr

08006106 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 8006106:	b580      	push	{r7, lr}
 8006108:	b082      	sub	sp, #8
 800610a:	af00      	add	r7, sp, #0
 800610c:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	4618      	mov	r0, r3
 8006112:	f7ff ff7b 	bl	800600c <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4rowsEv>
 8006116:	4603      	mov	r3, r0
    }
 8006118:	4618      	mov	r0, r3
 800611a:	3708      	adds	r7, #8
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 8006120:	b580      	push	{r7, lr}
 8006122:	b082      	sub	sp, #8
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	4618      	mov	r0, r3
 800612c:	f7ff ff7b 	bl	8006026 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4colsEv>
 8006130:	4603      	mov	r3, r0
    }
 8006132:	4618      	mov	r0, r3
 8006134:	3708      	adds	r7, #8
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}

0800613a <_ZN5Eigen10MatrixBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEC1Ev>:
 800613a:	b580      	push	{r7, lr}
 800613c:	b082      	sub	sp, #8
 800613e:	af00      	add	r7, sp, #0
 8006140:	6078      	str	r0, [r7, #4]
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f000 fe93 	bl	8006e6e <_ZN5Eigen9DenseBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEC1Ev>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	4618      	mov	r0, r3
 800614c:	3708      	adds	r7, #8
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}

08006152 <_ZN5Eigen11InverseImplINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS_5DenseEEC1Ev>:
  XprTypeNested m_xpr;
};

// Generic API dispatcher
template<typename XprType, typename StorageKind>
class InverseImpl
 8006152:	b580      	push	{r7, lr}
 8006154:	b082      	sub	sp, #8
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f7ff ffed 	bl	800613a <_ZN5Eigen10MatrixBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEC1Ev>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	4618      	mov	r0, r3
 8006164:	3708      	adds	r7, #8
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}

0800616a <_ZN5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKSG_>:
  explicit EIGEN_DEVICE_FUNC Inverse(const XprType &xpr)
 800616a:	b580      	push	{r7, lr}
 800616c:	b082      	sub	sp, #8
 800616e:	af00      	add	r7, sp, #0
 8006170:	6078      	str	r0, [r7, #4]
 8006172:	6039      	str	r1, [r7, #0]
    : m_xpr(xpr)
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f7ff ffec 	bl	8006152 <_ZN5Eigen11InverseImplINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS_5DenseEEC1Ev>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6839      	ldr	r1, [r7, #0]
 800617e:	4618      	mov	r0, r3
 8006180:	f7fe fc9b 	bl	8004aba <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERKSF_>
  {}
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	4618      	mov	r0, r3
 8006188:	3708      	adds	r7, #8
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}

0800618e <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEE7derivedEv>:
 800618e:	b480      	push	{r7}
 8006190:	b083      	sub	sp, #12
 8006192:	af00      	add	r7, sp, #0
 8006194:	6078      	str	r0, [r7, #4]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4618      	mov	r0, r3
 800619a:	370c      	adds	r7, #12
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr

080061a4 <_ZNK5Eigen9EigenBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEE7derivedEv>:
 80061a4:	b480      	push	{r7}
 80061a6:	b083      	sub	sp, #12
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	4618      	mov	r0, r3
 80061b0:	370c      	adds	r7, #12
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr

080061ba <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEC1Ev>:
 80061ba:	b580      	push	{r7, lr}
 80061bc:	b082      	sub	sp, #8
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 fe5e 	bl	8006e84 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEC1Ev>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	4618      	mov	r0, r3
 80061cc:	3708      	adds	r7, #8
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}

080061d2 <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0ELi4EEC1Ev>:
class dense_product_base
 80061d2:	b580      	push	{r7, lr}
 80061d4:	b082      	sub	sp, #8
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f7ff ffed 	bl	80061ba <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEC1Ev>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	4618      	mov	r0, r3
 80061e4:	3708      	adds	r7, #8
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}

080061ea <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 80061ea:	b580      	push	{r7, lr}
 80061ec:	b082      	sub	sp, #8
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f7ff ffed 	bl	80061d2 <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0ELi4EEC1Ev>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	4618      	mov	r0, r3
 80061fc:	3708      	adds	r7, #8
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}

08006202 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8006202:	b580      	push	{r7, lr}
 8006204:	b082      	sub	sp, #8
 8006206:	af00      	add	r7, sp, #0
 8006208:	6078      	str	r0, [r7, #4]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	3304      	adds	r3, #4
 800620e:	4618      	mov	r0, r3
 8006210:	f000 fe0f 	bl	8006e32 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8006214:	4603      	mov	r3, r0
 8006216:	4618      	mov	r0, r3
 8006218:	3708      	adds	r7, #8
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}

0800621e <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4rowsEv>:
  EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR  Index rows() const EIGEN_NOEXCEPT { return m_xpr.cols(); }
 800621e:	b580      	push	{r7, lr}
 8006220:	b082      	sub	sp, #8
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4618      	mov	r0, r3
 800622a:	f7ff ff79 	bl	8006120 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800622e:	4603      	mov	r3, r0
 8006230:	4618      	mov	r0, r3
 8006232:	3708      	adds	r7, #8
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}

08006238 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEC1ERKS6_RKSI_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8006238:	b590      	push	{r4, r7, lr}
 800623a:	b085      	sub	sp, #20
 800623c:	af00      	add	r7, sp, #0
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	607a      	str	r2, [r7, #4]
 8006244:	68f8      	ldr	r0, [r7, #12]
 8006246:	f7ff ffd0 	bl	80061ea <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0ENS_5DenseEEC1Ev>
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	68ba      	ldr	r2, [r7, #8]
 800624e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006252:	e883 0003 	stmia.w	r3, {r0, r1}
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	3308      	adds	r3, #8
 800625a:	6879      	ldr	r1, [r7, #4]
 800625c:	4618      	mov	r0, r3
 800625e:	f7fe fc71 	bl	8004b44 <_ZN5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKSH_>
      eigen_assert(lhs.cols() == rhs.rows()
 8006262:	68b8      	ldr	r0, [r7, #8]
 8006264:	f7ff ffcd 	bl	8006202 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4colsEv>
 8006268:	4604      	mov	r4, r0
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f7ff ffd7 	bl	800621e <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4rowsEv>
 8006270:	4603      	mov	r3, r0
 8006272:	429c      	cmp	r4, r3
 8006274:	d005      	beq.n	8006282 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEC1ERKS6_RKSI_+0x4a>
 8006276:	4b06      	ldr	r3, [pc, #24]	; (8006290 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEC1ERKS6_RKSI_+0x58>)
 8006278:	4a06      	ldr	r2, [pc, #24]	; (8006294 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEC1ERKS6_RKSI_+0x5c>)
 800627a:	2160      	movs	r1, #96	; 0x60
 800627c:	4806      	ldr	r0, [pc, #24]	; (8006298 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEC1ERKS6_RKSI_+0x60>)
 800627e:	f017 fe09 	bl	801de94 <__assert_func>
 8006282:	bf00      	nop
    }
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	4618      	mov	r0, r3
 8006288:	3714      	adds	r7, #20
 800628a:	46bd      	mov	sp, r7
 800628c:	bd90      	pop	{r4, r7, pc}
 800628e:	bf00      	nop
 8006290:	0801ffbc 	.word	0x0801ffbc
 8006294:	08021064 	.word	0x08021064
 8006298:	0802030c 	.word	0x0802030c

0800629c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4_setINS_7ProductINS5_INS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS5_INS5_IS8_S6_Li0EEES9_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set(const DenseBase<OtherDerived>& other)
 800629c:	b590      	push	{r4, r7, lr}
 800629e:	b083      	sub	sp, #12
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	6039      	str	r1, [r7, #0]
      internal::call_assignment(this->derived(), other.derived());
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f7ff fa12 	bl	80056d0 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80062ac:	4604      	mov	r4, r0
 80062ae:	6838      	ldr	r0, [r7, #0]
 80062b0:	f000 fdf3 	bl	8006e9a <_ZNK5Eigen9EigenBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEE7derivedEv>
 80062b4:	4603      	mov	r3, r0
 80062b6:	4619      	mov	r1, r3
 80062b8:	4620      	mov	r0, r4
 80062ba:	f000 fdf9 	bl	8006eb0 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEEvRT_RKT0_>
      return this->derived();
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f7ff fa06 	bl	80056d0 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80062c4:	4603      	mov	r3, r0
    }
 80062c6:	4618      	mov	r0, r3
 80062c8:	370c      	adds	r7, #12
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd90      	pop	{r4, r7, pc}

080062ce <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>:
 80062ce:	b580      	push	{r7, lr}
 80062d0:	b082      	sub	sp, #8
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	6078      	str	r0, [r7, #4]
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 fdff 	bl	8006eda <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	4618      	mov	r0, r3
 80062e0:	3708      	adds	r7, #8
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}

080062e6 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0ELi6EEC1Ev>:
class dense_product_base<Lhs, Rhs, Option, InnerProduct>
 80062e6:	b580      	push	{r7, lr}
 80062e8:	b082      	sub	sp, #8
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	6078      	str	r0, [r7, #4]
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f7ff ffed 	bl	80062ce <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	4618      	mov	r0, r3
 80062f8:	3708      	adds	r7, #8
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}

080062fe <_ZN5Eigen11ProductImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 80062fe:	b580      	push	{r7, lr}
 8006300:	b082      	sub	sp, #8
 8006302:	af00      	add	r7, sp, #0
 8006304:	6078      	str	r0, [r7, #4]
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f7ff ffed 	bl	80062e6 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0ELi6EEC1Ev>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	4618      	mov	r0, r3
 8006310:	3708      	adds	r7, #8
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
	...

08006318 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8006318:	b590      	push	{r4, r7, lr}
 800631a:	b085      	sub	sp, #20
 800631c:	af00      	add	r7, sp, #0
 800631e:	60f8      	str	r0, [r7, #12]
 8006320:	60b9      	str	r1, [r7, #8]
 8006322:	607a      	str	r2, [r7, #4]
 8006324:	68f8      	ldr	r0, [r7, #12]
 8006326:	f7ff ffea 	bl	80062fe <_ZN5Eigen11ProductImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0ENS_5DenseEEC1Ev>
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	68ba      	ldr	r2, [r7, #8]
 800632e:	601a      	str	r2, [r3, #0]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	4618      	mov	r0, r3
 800633a:	f7ff f849 	bl	80053d0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 800633e:	4604      	mov	r4, r0
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	4618      	mov	r0, r3
 8006344:	f7fe ff33 	bl	80051ae <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8006348:	4603      	mov	r3, r0
 800634a:	429c      	cmp	r4, r3
 800634c:	d005      	beq.n	800635a <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x42>
 800634e:	4b06      	ldr	r3, [pc, #24]	; (8006368 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x50>)
 8006350:	4a06      	ldr	r2, [pc, #24]	; (800636c <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x54>)
 8006352:	2160      	movs	r1, #96	; 0x60
 8006354:	4806      	ldr	r0, [pc, #24]	; (8006370 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x58>)
 8006356:	f017 fd9d 	bl	801de94 <__assert_func>
 800635a:	bf00      	nop
    }
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	4618      	mov	r0, r3
 8006360:	3714      	adds	r7, #20
 8006362:	46bd      	mov	sp, r7
 8006364:	bd90      	pop	{r4, r7, pc}
 8006366:	bf00      	nop
 8006368:	0801ffbc 	.word	0x0801ffbc
 800636c:	080213ec 	.word	0x080213ec
 8006370:	0802030c 	.word	0x0802030c

08006374 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE7derivedEv>:
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	4618      	mov	r0, r3
 8006380:	370c      	adds	r7, #12
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr

0800638a <_ZN5Eigen8internal20scalar_difference_opIffEC1Ev>:
template<typename LhsScalar,typename RhsScalar>
struct scalar_difference_op : binary_op_base<LhsScalar,RhsScalar>
{
  typedef typename ScalarBinaryOpTraits<LhsScalar,RhsScalar,scalar_difference_op>::ReturnType result_type;
#ifndef EIGEN_SCALAR_BINARY_OP_PLUGIN
  EIGEN_EMPTY_STRUCT_CTOR(scalar_difference_op)
 800638a:	b480      	push	{r7}
 800638c:	b083      	sub	sp, #12
 800638e:	af00      	add	r7, sp, #0
 8006390:	6078      	str	r0, [r7, #4]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4618      	mov	r0, r3
 8006396:	370c      	adds	r7, #12
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEC1Ev>:
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b082      	sub	sp, #8
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f000 fda1 	bl	8006ef0 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEC1Ev>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4618      	mov	r0, r3
 80063b2:	3708      	adds	r7, #8
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b082      	sub	sp, #8
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f7ff ffed 	bl	80063a0 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEC1Ev>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	4618      	mov	r0, r3
 80063ca:	3708      	adds	r7, #8
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b082      	sub	sp, #8
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4618      	mov	r0, r3
 80063de:	f7ff f802 	bl	80053e6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 80063e2:	4603      	mov	r3, r0
 80063e4:	4618      	mov	r0, r3
 80063e6:	3708      	adds	r7, #8
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b082      	sub	sp, #8
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	4618      	mov	r0, r3
 80063fa:	f7fe fecd 	bl	8005198 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80063fe:	4603      	mov	r3, r0
 8006400:	4618      	mov	r0, r3
 8006402:	3708      	adds	r7, #8
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}

08006408 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERS6_RSB_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8006408:	b590      	push	{r4, r7, lr}
 800640a:	b085      	sub	sp, #20
 800640c:	af00      	add	r7, sp, #0
 800640e:	60f8      	str	r0, [r7, #12]
 8006410:	60b9      	str	r1, [r7, #8]
 8006412:	607a      	str	r2, [r7, #4]
 8006414:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 8006416:	68f8      	ldr	r0, [r7, #12]
 8006418:	f7ff ffce 	bl	80063b8 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS_5DenseEEC1Ev>
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	68ba      	ldr	r2, [r7, #8]
 8006420:	601a      	str	r2, [r3, #0]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	3304      	adds	r3, #4
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	e892 0003 	ldmia.w	r2, {r0, r1}
 800642c:	e883 0003 	stmia.w	r3, {r0, r1}
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	330c      	adds	r3, #12
 8006434:	6839      	ldr	r1, [r7, #0]
 8006436:	4618      	mov	r0, r3
 8006438:	f000 f828 	bl	800648c <_ZN5Eigen8internal20scalar_difference_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	4618      	mov	r0, r3
 8006440:	f7ff fdff 	bl	8006042 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8006444:	4604      	mov	r4, r0
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f7ff ffc2 	bl	80063d0 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4rowsEv>
 800644c:	4603      	mov	r3, r0
 800644e:	429c      	cmp	r4, r3
 8006450:	d10a      	bne.n	8006468 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERS6_RSB_RKS3_+0x60>
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	4618      	mov	r0, r3
 8006456:	f7ff fdff 	bl	8006058 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800645a:	4604      	mov	r4, r0
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f7ff ffc5 	bl	80063ec <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4colsEv>
 8006462:	4603      	mov	r3, r0
 8006464:	429c      	cmp	r4, r3
 8006466:	d005      	beq.n	8006474 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERS6_RSB_RKS3_+0x6c>
 8006468:	4b05      	ldr	r3, [pc, #20]	; (8006480 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERS6_RSB_RKS3_+0x78>)
 800646a:	4a06      	ldr	r2, [pc, #24]	; (8006484 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERS6_RSB_RKS3_+0x7c>)
 800646c:	2174      	movs	r1, #116	; 0x74
 800646e:	4806      	ldr	r0, [pc, #24]	; (8006488 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERS6_RSB_RKS3_+0x80>)
 8006470:	f017 fd10 	bl	801de94 <__assert_func>
    }
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	4618      	mov	r0, r3
 8006478:	3714      	adds	r7, #20
 800647a:	46bd      	mov	sp, r7
 800647c:	bd90      	pop	{r4, r7, pc}
 800647e:	bf00      	nop
 8006480:	0801fcfc 	.word	0x0801fcfc
 8006484:	08021514 	.word	0x08021514
 8006488:	0801ff60 	.word	0x0801ff60

0800648c <_ZN5Eigen8internal20scalar_difference_opIffEC1ERKS2_>:
 800648c:	b480      	push	{r7}
 800648e:	b083      	sub	sp, #12
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6039      	str	r1, [r7, #0]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	4618      	mov	r0, r3
 800649a:	370c      	adds	r7, #12
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr

080064a4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEE7derivedEv>:
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	4618      	mov	r0, r3
 80064b0:	370c      	adds	r7, #12
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr

080064ba <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEC1Ev>:
 80064ba:	b580      	push	{r7, lr}
 80064bc:	b082      	sub	sp, #8
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f000 fd1f 	bl	8006f06 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEC1Ev>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	4618      	mov	r0, r3
 80064cc:	3708      	adds	r7, #8
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}

080064d2 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0ELi4EEC1Ev>:
class dense_product_base
 80064d2:	b580      	push	{r7, lr}
 80064d4:	b082      	sub	sp, #8
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	6078      	str	r0, [r7, #4]
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f7ff ffed 	bl	80064ba <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEC1Ev>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	4618      	mov	r0, r3
 80064e4:	3708      	adds	r7, #8
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}

080064ea <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 80064ea:	b580      	push	{r7, lr}
 80064ec:	b082      	sub	sp, #8
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f7ff ffed 	bl	80064d2 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0ELi4EEC1Ev>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	4618      	mov	r0, r3
 80064fc:	3708      	adds	r7, #8
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}

08006502 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 8006502:	b580      	push	{r7, lr}
 8006504:	b082      	sub	sp, #8
 8006506:	af00      	add	r7, sp, #0
 8006508:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4618      	mov	r0, r3
 8006510:	f7ff fd97 	bl	8006042 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8006514:	4603      	mov	r3, r0
    }
 8006516:	4618      	mov	r0, r3
 8006518:	3708      	adds	r7, #8
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
	...

08006520 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKS2_RKSC_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8006520:	b590      	push	{r4, r7, lr}
 8006522:	b085      	sub	sp, #20
 8006524:	af00      	add	r7, sp, #0
 8006526:	60f8      	str	r0, [r7, #12]
 8006528:	60b9      	str	r1, [r7, #8]
 800652a:	607a      	str	r2, [r7, #4]
 800652c:	68f8      	ldr	r0, [r7, #12]
 800652e:	f7ff ffdc 	bl	80064ea <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0ENS_5DenseEEC1Ev>
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	68ba      	ldr	r2, [r7, #8]
 8006536:	601a      	str	r2, [r3, #0]
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	3304      	adds	r3, #4
 800653c:	6879      	ldr	r1, [r7, #4]
 800653e:	4618      	mov	r0, r3
 8006540:	f7fe fb6b 	bl	8004c1a <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERKSC_>
      eigen_assert(lhs.cols() == rhs.rows()
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	4618      	mov	r0, r3
 8006548:	f7fe fe26 	bl	8005198 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800654c:	4604      	mov	r4, r0
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f7ff ffd7 	bl	8006502 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE4rowsEv>
 8006554:	4603      	mov	r3, r0
 8006556:	429c      	cmp	r4, r3
 8006558:	d005      	beq.n	8006566 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKS2_RKSC_+0x46>
 800655a:	4b06      	ldr	r3, [pc, #24]	; (8006574 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKS2_RKSC_+0x54>)
 800655c:	4a06      	ldr	r2, [pc, #24]	; (8006578 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKS2_RKSC_+0x58>)
 800655e:	2160      	movs	r1, #96	; 0x60
 8006560:	4806      	ldr	r0, [pc, #24]	; (800657c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKS2_RKSC_+0x5c>)
 8006562:	f017 fc97 	bl	801de94 <__assert_func>
 8006566:	bf00      	nop
    }
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	4618      	mov	r0, r3
 800656c:	3714      	adds	r7, #20
 800656e:	46bd      	mov	sp, r7
 8006570:	bd90      	pop	{r4, r7, pc}
 8006572:	bf00      	nop
 8006574:	0801ffbc 	.word	0x0801ffbc
 8006578:	0802170c 	.word	0x0802170c
 800657c:	0802030c 	.word	0x0802030c

08006580 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEE7derivedEv>:
 8006580:	b480      	push	{r7}
 8006582:	b083      	sub	sp, #12
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	4618      	mov	r0, r3
 800658c:	370c      	adds	r7, #12
 800658e:	46bd      	mov	sp, r7
 8006590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006594:	4770      	bx	lr

08006596 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS6_NS1_INS2_20scalar_difference_opIffEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS5_IfLi1ELi3ELi1ELi1ELi3EEES6_Li0EEEEELi0EEEEEEC1Ev>:
 8006596:	b580      	push	{r7, lr}
 8006598:	b082      	sub	sp, #8
 800659a:	af00      	add	r7, sp, #0
 800659c:	6078      	str	r0, [r7, #4]
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f000 fcbc 	bl	8006f1c <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS6_NS1_INS2_20scalar_difference_opIffEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS5_IfLi1ELi3ELi1ELi1ELi3EEES6_Li0EEEEELi0EEEEEEC1Ev>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	4618      	mov	r0, r3
 80065a8:	3708      	adds	r7, #8
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}

080065ae <_ZN5Eigen17CwiseBinaryOpImplINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS_13CwiseBinaryOpINS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 80065ae:	b580      	push	{r7, lr}
 80065b0:	b082      	sub	sp, #8
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	6078      	str	r0, [r7, #4]
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f7ff ffed 	bl	8006596 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS6_NS1_INS2_20scalar_difference_opIffEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS5_IfLi1ELi3ELi1ELi1ELi3EEES6_Li0EEEEELi0EEEEEEC1Ev>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	4618      	mov	r0, r3
 80065c0:	3708      	adds	r7, #8
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}

080065c6 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 80065c6:	b580      	push	{r7, lr}
 80065c8:	b082      	sub	sp, #8
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	6078      	str	r0, [r7, #4]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4618      	mov	r0, r3
 80065d4:	f7fe fdeb 	bl	80051ae <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80065d8:	4603      	mov	r3, r0
 80065da:	4618      	mov	r0, r3
 80065dc:	3708      	adds	r7, #8
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}

080065e2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 80065e2:	b580      	push	{r7, lr}
 80065e4:	b082      	sub	sp, #8
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	6078      	str	r0, [r7, #4]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	3304      	adds	r3, #4
 80065ee:	4618      	mov	r0, r3
 80065f0:	f000 fc9f 	bl	8006f32 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE4colsEv>
 80065f4:	4603      	mov	r3, r0
 80065f6:	4618      	mov	r0, r3
 80065f8:	3708      	adds	r7, #8
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
	...

08006600 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEEC1ERS6_RSH_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8006600:	b590      	push	{r4, r7, lr}
 8006602:	b085      	sub	sp, #20
 8006604:	af00      	add	r7, sp, #0
 8006606:	60f8      	str	r0, [r7, #12]
 8006608:	60b9      	str	r1, [r7, #8]
 800660a:	607a      	str	r2, [r7, #4]
 800660c:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 800660e:	68f8      	ldr	r0, [r7, #12]
 8006610:	f7ff ffcd 	bl	80065ae <_ZN5Eigen17CwiseBinaryOpImplINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS_13CwiseBinaryOpINS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEENS_5DenseEEC1Ev>
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	68ba      	ldr	r2, [r7, #8]
 8006618:	601a      	str	r2, [r3, #0]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	3304      	adds	r3, #4
 800661e:	6879      	ldr	r1, [r7, #4]
 8006620:	4618      	mov	r0, r3
 8006622:	f7fe fb30 	bl	8004c86 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKSD_>
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	3318      	adds	r3, #24
 800662a:	6839      	ldr	r1, [r7, #0]
 800662c:	4618      	mov	r0, r3
 800662e:	f7ff fb2f 	bl	8005c90 <_ZN5Eigen8internal13scalar_sum_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	4618      	mov	r0, r3
 8006636:	f7fe fdba 	bl	80051ae <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800663a:	4604      	mov	r4, r0
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f7ff ffc2 	bl	80065c6 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE4rowsEv>
 8006642:	4603      	mov	r3, r0
 8006644:	429c      	cmp	r4, r3
 8006646:	d10a      	bne.n	800665e <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEEC1ERS6_RSH_RKS3_+0x5e>
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	4618      	mov	r0, r3
 800664c:	f7fe fda4 	bl	8005198 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8006650:	4604      	mov	r4, r0
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f7ff ffc5 	bl	80065e2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE4colsEv>
 8006658:	4603      	mov	r3, r0
 800665a:	429c      	cmp	r4, r3
 800665c:	d005      	beq.n	800666a <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEEC1ERS6_RSH_RKS3_+0x6a>
 800665e:	4b05      	ldr	r3, [pc, #20]	; (8006674 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEEC1ERS6_RSH_RKS3_+0x74>)
 8006660:	4a05      	ldr	r2, [pc, #20]	; (8006678 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEEC1ERS6_RSH_RKS3_+0x78>)
 8006662:	2174      	movs	r1, #116	; 0x74
 8006664:	4805      	ldr	r0, [pc, #20]	; (800667c <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEEC1ERS6_RSH_RKS3_+0x7c>)
 8006666:	f017 fc15 	bl	801de94 <__assert_func>
    }
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	4618      	mov	r0, r3
 800666e:	3714      	adds	r7, #20
 8006670:	46bd      	mov	sp, r7
 8006672:	bd90      	pop	{r4, r7, pc}
 8006674:	0801fcfc 	.word	0x0801fcfc
 8006678:	08021978 	.word	0x08021978
 800667c:	0801ff60 	.word	0x0801ff60

08006680 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4_setINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS2_KNS_7ProductIS2_NS5_INS6_20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set(const DenseBase<OtherDerived>& other)
 8006680:	b590      	push	{r4, r7, lr}
 8006682:	b083      	sub	sp, #12
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	6039      	str	r1, [r7, #0]
      internal::call_assignment(this->derived(), other.derived());
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f7ff f820 	bl	80056d0 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8006690:	4604      	mov	r4, r0
 8006692:	6838      	ldr	r0, [r7, #0]
 8006694:	f000 fc5b 	bl	8006f4e <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS6_NS1_INS2_20scalar_difference_opIffEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS5_IfLi1ELi3ELi1ELi1ELi3EEES6_Li0EEEEELi0EEEEEE7derivedEv>
 8006698:	4603      	mov	r3, r0
 800669a:	4619      	mov	r1, r3
 800669c:	4620      	mov	r0, r4
 800669e:	f000 fc61 	bl	8006f64 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKS3_KNS_7ProductIS3_NS4_INS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEEEEvRT_RKT0_>
      return this->derived();
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f7ff f814 	bl	80056d0 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80066a8:	4603      	mov	r3, r0
    }
 80066aa:	4618      	mov	r0, r3
 80066ac:	370c      	adds	r7, #12
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd90      	pop	{r4, r7, pc}

080066b2 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1Ev>:
 80066b2:	b580      	push	{r7, lr}
 80066b4:	b082      	sub	sp, #8
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f000 fc67 	bl	8006f8e <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1Ev>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	4618      	mov	r0, r3
 80066c4:	3708      	adds	r7, #8
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}

080066ca <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0ELi4EEC1Ev>:
class dense_product_base
 80066ca:	b580      	push	{r7, lr}
 80066cc:	b082      	sub	sp, #8
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f7ff ffed 	bl	80066b2 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1Ev>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4618      	mov	r0, r3
 80066dc:	3708      	adds	r7, #8
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}

080066e2 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 80066e2:	b580      	push	{r7, lr}
 80066e4:	b082      	sub	sp, #8
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f7ff ffed 	bl	80066ca <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0ELi4EEC1Ev>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	4618      	mov	r0, r3
 80066f4:	3708      	adds	r7, #8
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
	...

080066fc <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 80066fc:	b590      	push	{r4, r7, lr}
 80066fe:	b085      	sub	sp, #20
 8006700:	af00      	add	r7, sp, #0
 8006702:	60f8      	str	r0, [r7, #12]
 8006704:	60b9      	str	r1, [r7, #8]
 8006706:	607a      	str	r2, [r7, #4]
 8006708:	68f8      	ldr	r0, [r7, #12]
 800670a:	f7ff ffea 	bl	80066e2 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0ENS_5DenseEEC1Ev>
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	68ba      	ldr	r2, [r7, #8]
 8006712:	601a      	str	r2, [r3, #0]
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	4618      	mov	r0, r3
 800671e:	f7fe fd3b 	bl	8005198 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8006722:	4604      	mov	r4, r0
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	4618      	mov	r0, r3
 8006728:	f7fe fe5d 	bl	80053e6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 800672c:	4603      	mov	r3, r0
 800672e:	429c      	cmp	r4, r3
 8006730:	d005      	beq.n	800673e <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEC1ERKS2_RKS3_+0x42>
 8006732:	4b06      	ldr	r3, [pc, #24]	; (800674c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEC1ERKS2_RKS3_+0x50>)
 8006734:	4a06      	ldr	r2, [pc, #24]	; (8006750 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEC1ERKS2_RKS3_+0x54>)
 8006736:	2160      	movs	r1, #96	; 0x60
 8006738:	4806      	ldr	r0, [pc, #24]	; (8006754 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEC1ERKS2_RKS3_+0x58>)
 800673a:	f017 fbab 	bl	801de94 <__assert_func>
 800673e:	bf00      	nop
    }
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	4618      	mov	r0, r3
 8006744:	3714      	adds	r7, #20
 8006746:	46bd      	mov	sp, r7
 8006748:	bd90      	pop	{r4, r7, pc}
 800674a:	bf00      	nop
 800674c:	0801ffbc 	.word	0x0801ffbc
 8006750:	08021cac 	.word	0x08021cac
 8006754:	0802030c 	.word	0x0802030c

08006758 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE7derivedEv>:
 8006758:	b480      	push	{r7}
 800675a:	b083      	sub	sp, #12
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	4618      	mov	r0, r3
 8006764:	370c      	adds	r7, #12
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr

0800676e <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEC1Ev>:
 800676e:	b580      	push	{r7, lr}
 8006770:	b082      	sub	sp, #8
 8006772:	af00      	add	r7, sp, #0
 8006774:	6078      	str	r0, [r7, #4]
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 fc14 	bl	8006fa4 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEC1Ev>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	4618      	mov	r0, r3
 8006780:	3708      	adds	r7, #8
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}

08006786 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 8006786:	b580      	push	{r7, lr}
 8006788:	b082      	sub	sp, #8
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f7ff ffed 	bl	800676e <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEC1Ev>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	4618      	mov	r0, r3
 8006798:	3708      	adds	r7, #8
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}

0800679e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 800679e:	b580      	push	{r7, lr}
 80067a0:	b082      	sub	sp, #8
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4618      	mov	r0, r3
 80067ac:	f7fe fcff 	bl	80051ae <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80067b0:	4603      	mov	r3, r0
 80067b2:	4618      	mov	r0, r3
 80067b4:	3708      	adds	r7, #8
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}

080067ba <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 80067ba:	b580      	push	{r7, lr}
 80067bc:	b082      	sub	sp, #8
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6078      	str	r0, [r7, #4]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	4618      	mov	r0, r3
 80067c8:	f7fe fe02 	bl	80053d0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 80067cc:	4603      	mov	r3, r0
 80067ce:	4618      	mov	r0, r3
 80067d0:	3708      	adds	r7, #8
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
	...

080067d8 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERS6_RSB_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 80067d8:	b590      	push	{r4, r7, lr}
 80067da:	b085      	sub	sp, #20
 80067dc:	af00      	add	r7, sp, #0
 80067de:	60f8      	str	r0, [r7, #12]
 80067e0:	60b9      	str	r1, [r7, #8]
 80067e2:	607a      	str	r2, [r7, #4]
 80067e4:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 80067e6:	68f8      	ldr	r0, [r7, #12]
 80067e8:	f7ff ffcd 	bl	8006786 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS_5DenseEEC1Ev>
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	68ba      	ldr	r2, [r7, #8]
 80067f0:	601a      	str	r2, [r3, #0]
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	3304      	adds	r3, #4
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80067fc:	e883 0003 	stmia.w	r3, {r0, r1}
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	330c      	adds	r3, #12
 8006804:	6839      	ldr	r1, [r7, #0]
 8006806:	4618      	mov	r0, r3
 8006808:	f7ff fe40 	bl	800648c <_ZN5Eigen8internal20scalar_difference_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	4618      	mov	r0, r3
 8006810:	f7fe fc27 	bl	8005062 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8006814:	4604      	mov	r4, r0
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f7ff ffc1 	bl	800679e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE4rowsEv>
 800681c:	4603      	mov	r3, r0
 800681e:	429c      	cmp	r4, r3
 8006820:	d10a      	bne.n	8006838 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERS6_RSB_RKS3_+0x60>
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	4618      	mov	r0, r3
 8006826:	f7fe fc11 	bl	800504c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800682a:	4604      	mov	r4, r0
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f7ff ffc4 	bl	80067ba <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE4colsEv>
 8006832:	4603      	mov	r3, r0
 8006834:	429c      	cmp	r4, r3
 8006836:	d005      	beq.n	8006844 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERS6_RSB_RKS3_+0x6c>
 8006838:	4b05      	ldr	r3, [pc, #20]	; (8006850 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERS6_RSB_RKS3_+0x78>)
 800683a:	4a06      	ldr	r2, [pc, #24]	; (8006854 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERS6_RSB_RKS3_+0x7c>)
 800683c:	2174      	movs	r1, #116	; 0x74
 800683e:	4806      	ldr	r0, [pc, #24]	; (8006858 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERS6_RSB_RKS3_+0x80>)
 8006840:	f017 fb28 	bl	801de94 <__assert_func>
    }
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	4618      	mov	r0, r3
 8006848:	3714      	adds	r7, #20
 800684a:	46bd      	mov	sp, r7
 800684c:	bd90      	pop	{r4, r7, pc}
 800684e:	bf00      	nop
 8006850:	0801fcfc 	.word	0x0801fcfc
 8006854:	08021dd4 	.word	0x08021dd4
 8006858:	0801ff60 	.word	0x0801ff60

0800685c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEE7derivedEv>:
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	4618      	mov	r0, r3
 8006868:	370c      	adds	r7, #12
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr

08006872 <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li0EEEEC1Ev>:
 8006872:	b580      	push	{r7, lr}
 8006874:	b082      	sub	sp, #8
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 fb9d 	bl	8006fba <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li0EEEEC1Ev>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4618      	mov	r0, r3
 8006884:	3708      	adds	r7, #8
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}

0800688a <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0ELi3EEC1Ev>:
class dense_product_base
 800688a:	b580      	push	{r7, lr}
 800688c:	b082      	sub	sp, #8
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f7ff ffed 	bl	8006872 <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li0EEEEC1Ev>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	4618      	mov	r0, r3
 800689c:	3708      	adds	r7, #8
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}

080068a2 <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 80068a2:	b580      	push	{r7, lr}
 80068a4:	b082      	sub	sp, #8
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	6078      	str	r0, [r7, #4]
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f7ff ffed 	bl	800688a <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0ELi3EEC1Ev>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	4618      	mov	r0, r3
 80068b4:	3708      	adds	r7, #8
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}

080068ba <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 80068ba:	b580      	push	{r7, lr}
 80068bc:	b082      	sub	sp, #8
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4618      	mov	r0, r3
 80068c8:	f7fe fbc0 	bl	800504c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80068cc:	4603      	mov	r3, r0
    }
 80068ce:	4618      	mov	r0, r3
 80068d0:	3708      	adds	r7, #8
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
	...

080068d8 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EEC1ERKSC_RS7_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 80068d8:	b590      	push	{r4, r7, lr}
 80068da:	b085      	sub	sp, #20
 80068dc:	af00      	add	r7, sp, #0
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	60b9      	str	r1, [r7, #8]
 80068e2:	607a      	str	r2, [r7, #4]
 80068e4:	68f8      	ldr	r0, [r7, #12]
 80068e6:	f7ff ffdc 	bl	80068a2 <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0ENS_5DenseEEC1Ev>
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	68b9      	ldr	r1, [r7, #8]
 80068ee:	4618      	mov	r0, r3
 80068f0:	f7fe fa41 	bl	8004d76 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERKSC_>
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	611a      	str	r2, [r3, #16]
      eigen_assert(lhs.cols() == rhs.rows()
 80068fa:	68b8      	ldr	r0, [r7, #8]
 80068fc:	f7ff ffdd 	bl	80068ba <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE4colsEv>
 8006900:	4604      	mov	r4, r0
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	4618      	mov	r0, r3
 8006906:	f7fe fbac 	bl	8005062 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800690a:	4603      	mov	r3, r0
 800690c:	429c      	cmp	r4, r3
 800690e:	d005      	beq.n	800691c <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EEC1ERKSC_RS7_+0x44>
 8006910:	4b05      	ldr	r3, [pc, #20]	; (8006928 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EEC1ERKSC_RS7_+0x50>)
 8006912:	4a06      	ldr	r2, [pc, #24]	; (800692c <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EEC1ERKSC_RS7_+0x54>)
 8006914:	2160      	movs	r1, #96	; 0x60
 8006916:	4806      	ldr	r0, [pc, #24]	; (8006930 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EEC1ERKSC_RS7_+0x58>)
 8006918:	f017 fabc 	bl	801de94 <__assert_func>
 800691c:	bf00      	nop
    }
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	4618      	mov	r0, r3
 8006922:	3714      	adds	r7, #20
 8006924:	46bd      	mov	sp, r7
 8006926:	bd90      	pop	{r4, r7, pc}
 8006928:	0801ffbc 	.word	0x0801ffbc
 800692c:	08021fcc 	.word	0x08021fcc
 8006930:	0802030c 	.word	0x0802030c

08006934 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4_setINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS5_INS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set(const DenseBase<OtherDerived>& other)
 8006934:	b590      	push	{r4, r7, lr}
 8006936:	b083      	sub	sp, #12
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	6039      	str	r1, [r7, #0]
      internal::call_assignment(this->derived(), other.derived());
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f7ff f862 	bl	8005a08 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8006944:	4604      	mov	r4, r0
 8006946:	6838      	ldr	r0, [r7, #0]
 8006948:	f000 fb42 	bl	8006fd0 <_ZNK5Eigen9EigenBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li0EEEE7derivedEv>
 800694c:	4603      	mov	r3, r0
 800694e:	4619      	mov	r1, r3
 8006950:	4620      	mov	r0, r4
 8006952:	f000 fb48 	bl	8006fe6 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEEEEvRT_RKT0_>
      return this->derived();
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f7ff f856 	bl	8005a08 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800695c:	4603      	mov	r3, r0
    }
 800695e:	4618      	mov	r0, r3
 8006960:	370c      	adds	r7, #12
 8006962:	46bd      	mov	sp, r7
 8006964:	bd90      	pop	{r4, r7, pc}

08006966 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>:
    }

  protected:
    EIGEN_DEFAULT_COPY_CONSTRUCTOR(DenseBase)
    /** Default constructor. Do nothing. */
    EIGEN_DEVICE_FUNC DenseBase()
 8006966:	b480      	push	{r7}
 8006968:	b083      	sub	sp, #12
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
#ifdef EIGEN_INTERNAL_DEBUGGING
      EIGEN_STATIC_ASSERT((EIGEN_IMPLIES(MaxRowsAtCompileTime==1 && MaxColsAtCompileTime!=1, int(IsRowMajor))
                        && EIGEN_IMPLIES(MaxColsAtCompileTime==1 && MaxRowsAtCompileTime!=1, int(!IsRowMajor))),
                          INVALID_STORAGE_ORDER_FOR_THIS_VECTOR_EXPRESSION)
#endif
    }
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	4618      	mov	r0, r3
 8006972:	370c      	adds	r7, #12
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr

0800697c <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EEC1Ev>:
// purely fixed-size matrix
template<typename T, int Size, int _Rows, int _Cols, int _Options> class DenseStorage
{
    internal::plain_array<T,Size,_Options> m_data;
  public:
    EIGEN_DEVICE_FUNC DenseStorage() {
 800697c:	b580      	push	{r7, lr}
 800697e:	b082      	sub	sp, #8
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	4618      	mov	r0, r3
 8006988:	f000 fb42 	bl	8007010 <_ZN5Eigen8internal11plain_arrayIfLi9ELi0ELi0EEC1Ev>
      EIGEN_INTERNAL_DENSE_STORAGE_CTOR_PLUGIN(Index size = Size)
    }
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	4618      	mov	r0, r3
 8006990:	3708      	adds	r7, #8
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}

08006996 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006996:	b480      	push	{r7}
 8006998:	b083      	sub	sp, #12
 800699a:	af00      	add	r7, sp, #0
 800699c:	6078      	str	r0, [r7, #4]
    }
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	4618      	mov	r0, r3
 80069a2:	370c      	adds	r7, #12
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr

080069ac <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EEC1Ev>:
    EIGEN_DEVICE_FUNC DenseStorage() {
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b082      	sub	sp, #8
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	4618      	mov	r0, r3
 80069b8:	f000 fb35 	bl	8007026 <_ZN5Eigen8internal11plain_arrayIfLi1ELi0ELi0EEC1Ev>
    }
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	4618      	mov	r0, r3
 80069c0:	3708      	adds	r7, #8
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}

080069c6 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80069c6:	b480      	push	{r7}
 80069c8:	b083      	sub	sp, #12
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	6078      	str	r0, [r7, #4]
    }
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	4618      	mov	r0, r3
 80069d2:	370c      	adds	r7, #12
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr

080069dc <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EEC1Ev>:
    EIGEN_DEVICE_FUNC DenseStorage() {
 80069dc:	b580      	push	{r7, lr}
 80069de:	b082      	sub	sp, #8
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4618      	mov	r0, r3
 80069e8:	f000 fb28 	bl	800703c <_ZN5Eigen8internal11plain_arrayIfLi3ELi0ELi0EEC1Ev>
    }
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	4618      	mov	r0, r3
 80069f0:	3708      	adds	r7, #8
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}

080069f6 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80069f6:	b480      	push	{r7}
 80069f8:	b083      	sub	sp, #12
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6078      	str	r0, [r7, #4]
    }
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	4618      	mov	r0, r3
 8006a02:	370c      	adds	r7, #12
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr

08006a0c <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EEC1Ev>:
    EIGEN_DEVICE_FUNC DenseStorage() {
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b082      	sub	sp, #8
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	4618      	mov	r0, r3
 8006a18:	f000 fb1b 	bl	8007052 <_ZN5Eigen8internal11plain_arrayIfLi3ELi1ELi0EEC1Ev>
    }
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3708      	adds	r7, #8
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}

08006a26 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4colsEv>:
    }
    EIGEN_DEVICE_FUNC void swap(DenseStorage& other) {
      numext::swap(m_data, other.m_data);
    }
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index rows(void) EIGEN_NOEXCEPT {return _Rows;}
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index cols(void) EIGEN_NOEXCEPT {return _Cols;}
 8006a26:	b480      	push	{r7}
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	2303      	movs	r3, #3
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr

08006a36 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4rowsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index rows(void) EIGEN_NOEXCEPT {return _Rows;}
 8006a36:	b480      	push	{r7}
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	2303      	movs	r3, #3
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr

08006a46 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC void conservativeResize(Index,Index,Index) {}
    EIGEN_DEVICE_FUNC void resize(Index,Index,Index) {}
    EIGEN_DEVICE_FUNC const T *data() const { return m_data.array; }
    EIGEN_DEVICE_FUNC T *data() { return m_data.array; }
 8006a46:	b480      	push	{r7}
 8006a48:	b083      	sub	sp, #12
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	4618      	mov	r0, r3
 8006a52:	370c      	adds	r7, #12
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4colsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index cols(void) EIGEN_NOEXCEPT {return _Cols;}
 8006a5c:	b480      	push	{r7}
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	2301      	movs	r3, #1
 8006a62:	4618      	mov	r0, r3
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr

08006a6c <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4rowsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index rows(void) EIGEN_NOEXCEPT {return _Rows;}
 8006a6c:	b480      	push	{r7}
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	2303      	movs	r3, #3
 8006a72:	4618      	mov	r0, r3
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr

08006a7c <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC T *data() { return m_data.array; }
 8006a7c:	b480      	push	{r7}
 8006a7e:	b083      	sub	sp, #12
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4618      	mov	r0, r3
 8006a88:	370c      	adds	r7, #12
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr

08006a92 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8coeffRefEii>:
    EIGEN_STRONG_INLINE Scalar& coeffRef(Index rowId, Index colId)
 8006a92:	b590      	push	{r4, r7, lr}
 8006a94:	b085      	sub	sp, #20
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	60f8      	str	r0, [r7, #12]
 8006a9a:	60b9      	str	r1, [r7, #8]
 8006a9c:	607a      	str	r2, [r7, #4]
        return m_storage.data()[rowId + colId * m_storage.rows()];
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f000 fae1 	bl	8007068 <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4dataEv>
 8006aa6:	4604      	mov	r4, r0
 8006aa8:	f000 f9d1 	bl	8006e4e <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4rowsEv>
 8006aac:	4602      	mov	r2, r0
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	fb03 f202 	mul.w	r2, r3, r2
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	4413      	add	r3, r2
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	4423      	add	r3, r4
    }
 8006abc:	4618      	mov	r0, r3
 8006abe:	3714      	adds	r7, #20
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd90      	pop	{r4, r7, pc}

08006ac4 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4colsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index cols(void) EIGEN_NOEXCEPT {return _Cols;}
 8006ac4:	b480      	push	{r7}
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	2303      	movs	r3, #3
 8006aca:	4618      	mov	r0, r3
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr

08006ad4 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4rowsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index rows(void) EIGEN_NOEXCEPT {return _Rows;}
 8006ad4:	b480      	push	{r7}
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	2301      	movs	r3, #1
 8006ada:	4618      	mov	r0, r3
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr

08006ae4 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4dataEv>:
    EIGEN_DEVICE_FUNC T *data() { return m_data.array; }
 8006ae4:	b480      	push	{r7}
 8006ae6:	b083      	sub	sp, #12
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	4618      	mov	r0, r3
 8006af0:	370c      	adds	r7, #12
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr

08006afa <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>:

  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  evaluator() {}

  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  explicit evaluator(const XprType& m)
 8006afa:	b580      	push	{r7, lr}
 8006afc:	b082      	sub	sp, #8
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
 8006b02:	6039      	str	r1, [r7, #0]
    : evaluator<PlainObjectBase<XprType> >(m)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	683a      	ldr	r2, [r7, #0]
 8006b08:	4611      	mov	r1, r2
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f000 fab7 	bl	800707e <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKS5_>
  { }
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	4618      	mov	r0, r3
 8006b14:	3708      	adds	r7, #8
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}

08006b1a <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8006b1a:	b480      	push	{r7}
 8006b1c:	b083      	sub	sp, #12
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	6078      	str	r0, [r7, #4]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	4618      	mov	r0, r3
 8006b26:	370c      	adds	r7, #12
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr

08006b30 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEii>:
  Scalar& coeffRef(Index row, Index col)
 8006b30:	b590      	push	{r4, r7, lr}
 8006b32:	b085      	sub	sp, #20
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	60f8      	str	r0, [r7, #12]
 8006b38:	60b9      	str	r1, [r7, #8]
 8006b3a:	607a      	str	r2, [r7, #4]
      return const_cast<Scalar*>(m_d.data)[row + col * m_d.outerStride()];
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681c      	ldr	r4, [r3, #0]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	4618      	mov	r0, r3
 8006b44:	f000 fab2 	bl	80070ac <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EE11outerStrideEv>
 8006b48:	4602      	mov	r2, r0
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	fb03 f202 	mul.w	r2, r3, r2
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	4413      	add	r3, r2
 8006b54:	009b      	lsls	r3, r3, #2
 8006b56:	4423      	add	r3, r4
  }
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3714      	adds	r7, #20
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd90      	pop	{r4, r7, pc}

08006b60 <_ZN5Eigen9DenseBaseINS_14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006b60:	b480      	push	{r7}
 8006b62:	b083      	sub	sp, #12
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
    }
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	370c      	adds	r7, #12
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b74:	4770      	bx	lr
	...

08006b78 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>:
  */
template<typename T, int Value> class variable_if_dynamic
{
  public:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(variable_if_dynamic)
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit variable_if_dynamic(T v) { EIGEN_ONLY_USED_FOR_DEBUG(v); eigen_assert(v == T(Value)); }
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b082      	sub	sp, #8
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	6039      	str	r1, [r7, #0]
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	2b03      	cmp	r3, #3
 8006b86:	d005      	beq.n	8006b94 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei+0x1c>
 8006b88:	4b05      	ldr	r3, [pc, #20]	; (8006ba0 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei+0x28>)
 8006b8a:	4a06      	ldr	r2, [pc, #24]	; (8006ba4 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei+0x2c>)
 8006b8c:	2185      	movs	r1, #133	; 0x85
 8006b8e:	4806      	ldr	r0, [pc, #24]	; (8006ba8 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei+0x30>)
 8006b90:	f017 f980 	bl	801de94 <__assert_func>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	4618      	mov	r0, r3
 8006b98:	3708      	adds	r7, #8
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
 8006b9e:	bf00      	nop
 8006ba0:	08022238 	.word	0x08022238
 8006ba4:	08022248 	.word	0x08022248
 8006ba8:	080222b0 	.word	0x080222b0

08006bac <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>:
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b082      	sub	sp, #8
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d005      	beq.n	8006bc8 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei+0x1c>
 8006bbc:	4b05      	ldr	r3, [pc, #20]	; (8006bd4 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei+0x28>)
 8006bbe:	4a06      	ldr	r2, [pc, #24]	; (8006bd8 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei+0x2c>)
 8006bc0:	2185      	movs	r1, #133	; 0x85
 8006bc2:	4806      	ldr	r0, [pc, #24]	; (8006bdc <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei+0x30>)
 8006bc4:	f017 f966 	bl	801de94 <__assert_func>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3708      	adds	r7, #8
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
 8006bd2:	bf00      	nop
 8006bd4:	08022238 	.word	0x08022238
 8006bd8:	0802230c 	.word	0x0802230c
 8006bdc:	080222b0 	.word	0x080222b0

08006be0 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
    }
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	4618      	mov	r0, r3
 8006bec:	370c      	adds	r7, #12
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf4:	4770      	bx	lr

08006bf6 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>:
    EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE EIGEN_CONSTEXPR
    T value() { return T(Value); }
 8006bf6:	b480      	push	{r7}
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	2303      	movs	r3, #3
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr

08006c06 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>:
 8006c06:	b480      	push	{r7}
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr

08006c16 <_ZN5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006c16:	b480      	push	{r7}
 8006c18:	b083      	sub	sp, #12
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	6078      	str	r0, [r7, #4]
    }
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	4618      	mov	r0, r3
 8006c22:	370c      	adds	r7, #12
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr

08006c2c <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006c2c:	b480      	push	{r7}
 8006c2e:	b083      	sub	sp, #12
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
    }
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	4618      	mov	r0, r3
 8006c38:	370c      	adds	r7, #12
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr

08006c42 <_ZNK5Eigen9EigenBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi0EEEE7derivedEv>:
 8006c42:	b480      	push	{r7}
 8006c44:	b083      	sub	sp, #12
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6078      	str	r0, [r7, #4]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	370c      	adds	r7, #12
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr

08006c58 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEEEEvRT_RKT0_>:
// So this intermediate function removes everything related to "assume-aliasing" such that Assignment
// does not has to bother about these annoying details.

template<typename Dst, typename Src>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
void call_assignment(Dst& dst, const Src& src)
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b084      	sub	sp, #16
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	6039      	str	r1, [r7, #0]
{
  call_assignment(dst, src, internal::assign_op<typename Dst::Scalar,typename Src::Scalar>());
 8006c62:	f107 030c 	add.w	r3, r7, #12
 8006c66:	4618      	mov	r0, r3
 8006c68:	f000 fa2b 	bl	80070c2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8006c6c:	f107 020c 	add.w	r2, r7, #12
 8006c70:	2300      	movs	r3, #0
 8006c72:	6839      	ldr	r1, [r7, #0]
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f000 fa2f 	bl	80070d8 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISN_NS0_16evaluator_traitsISN_E5ShapeEEE5valueEPvE4typeE>
}
 8006c7a:	bf00      	nop
 8006c7c:	3710      	adds	r7, #16
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}

08006c82 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006c82:	b480      	push	{r7}
 8006c84:	b083      	sub	sp, #12
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]
    }
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	370c      	adds	r7, #12
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr

08006c98 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE7derivedEv>:
 8006c98:	b480      	push	{r7}
 8006c9a:	b083      	sub	sp, #12
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	370c      	adds	r7, #12
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cac:	4770      	bx	lr

08006cae <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEEvRT_RKT0_>:
void call_assignment(Dst& dst, const Src& src)
 8006cae:	b580      	push	{r7, lr}
 8006cb0:	b084      	sub	sp, #16
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	6078      	str	r0, [r7, #4]
 8006cb6:	6039      	str	r1, [r7, #0]
  call_assignment(dst, src, internal::assign_op<typename Dst::Scalar,typename Src::Scalar>());
 8006cb8:	f107 030c 	add.w	r3, r7, #12
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f000 fa00 	bl	80070c2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8006cc2:	f107 020c 	add.w	r2, r7, #12
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	6839      	ldr	r1, [r7, #0]
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f000 fa1c 	bl	8007108 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISB_NS0_16evaluator_traitsISB_E5ShapeEEE5valueEPvE4typeE>
}
 8006cd0:	bf00      	nop
 8006cd2:	3710      	adds	r7, #16
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}

08006cd8 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
    }
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	370c      	adds	r7, #12
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr

08006cee <_ZN5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006cee:	b480      	push	{r7}
 8006cf0:	b083      	sub	sp, #12
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	6078      	str	r0, [r7, #4]
    }
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	370c      	adds	r7, #12
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr

08006d04 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006d04:	b480      	push	{r7}
 8006d06:	b083      	sub	sp, #12
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
    }
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	4618      	mov	r0, r3
 8006d10:	370c      	adds	r7, #12
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr

08006d1a <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006d1a:	b480      	push	{r7}
 8006d1c:	b083      	sub	sp, #12
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
    }
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	4618      	mov	r0, r3
 8006d26:	370c      	adds	r7, #12
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr

08006d30 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b082      	sub	sp, #8
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f7fe f990 	bl	8005062 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8006d42:	4603      	mov	r3, r0
 8006d44:	4618      	mov	r0, r3
 8006d46:	3708      	adds	r7, #8
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b082      	sub	sp, #8
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f7fe f982 	bl	8005062 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	4618      	mov	r0, r3
 8006d62:	3708      	adds	r7, #8
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEE7derivedEv>:
 8006d68:	b480      	push	{r7}
 8006d6a:	b083      	sub	sp, #12
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4618      	mov	r0, r3
 8006d74:	370c      	adds	r7, #12
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr

08006d7e <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRT_RKT0_>:
void call_assignment(Dst& dst, const Src& src)
 8006d7e:	b580      	push	{r7, lr}
 8006d80:	b084      	sub	sp, #16
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	6078      	str	r0, [r7, #4]
 8006d86:	6039      	str	r1, [r7, #0]
  call_assignment(dst, src, internal::assign_op<typename Dst::Scalar,typename Src::Scalar>());
 8006d88:	f107 030c 	add.w	r3, r7, #12
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f000 f998 	bl	80070c2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8006d92:	f107 020c 	add.w	r2, r7, #12
 8006d96:	2300      	movs	r3, #0
 8006d98:	6839      	ldr	r1, [r7, #0]
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 f9cc 	bl	8007138 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXntsrNS0_25evaluator_assume_aliasingISJ_NS0_16evaluator_traitsISJ_E5ShapeEEE5valueEPvE4typeE>
}
 8006da0:	bf00      	nop
 8006da2:	3710      	adds	r7, #16
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <_ZN5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006da8:	b480      	push	{r7}
 8006daa:	b083      	sub	sp, #12
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
    }
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	4618      	mov	r0, r3
 8006db4:	370c      	adds	r7, #12
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr

08006dbe <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006dbe:	b480      	push	{r7}
 8006dc0:	b083      	sub	sp, #12
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
    }
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	4618      	mov	r0, r3
 8006dca:	370c      	adds	r7, #12
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006dd4:	b480      	push	{r7}
 8006dd6:	b083      	sub	sp, #12
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
    }
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	4618      	mov	r0, r3
 8006de0:	370c      	adds	r7, #12
 8006de2:	46bd      	mov	sp, r7
 8006de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de8:	4770      	bx	lr

08006dea <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006dea:	b480      	push	{r7}
 8006dec:	b083      	sub	sp, #12
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	6078      	str	r0, [r7, #4]
    }
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	4618      	mov	r0, r3
 8006df6:	370c      	adds	r7, #12
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr

08006e00 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006e00:	b480      	push	{r7}
 8006e02:	b083      	sub	sp, #12
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
    }
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	370c      	adds	r7, #12
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr

08006e16 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4rowsEv>:
 8006e16:	b580      	push	{r7, lr}
 8006e18:	b082      	sub	sp, #8
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4618      	mov	r0, r3
 8006e24:	f7fe fadf 	bl	80053e6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3708      	adds	r7, #8
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}

08006e32 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>:
 8006e32:	b580      	push	{r7, lr}
 8006e34:	b082      	sub	sp, #8
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	6078      	str	r0, [r7, #4]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f7fe fad1 	bl	80053e6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8006e44:	4603      	mov	r3, r0
 8006e46:	4618      	mov	r0, r3
 8006e48:	3708      	adds	r7, #8
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}

08006e4e <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4rowsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index rows(void) EIGEN_NOEXCEPT {return _Rows;}
 8006e4e:	b480      	push	{r7}
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	2301      	movs	r3, #1
 8006e54:	4618      	mov	r0, r3
 8006e56:	46bd      	mov	sp, r7
 8006e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5c:	4770      	bx	lr

08006e5e <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4colsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index cols(void) EIGEN_NOEXCEPT {return _Cols;}
 8006e5e:	b480      	push	{r7}
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	2301      	movs	r3, #1
 8006e64:	4618      	mov	r0, r3
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr

08006e6e <_ZN5Eigen9DenseBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006e6e:	b480      	push	{r7}
 8006e70:	b083      	sub	sp, #12
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
    }
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	4618      	mov	r0, r3
 8006e7a:	370c      	adds	r7, #12
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr

08006e84 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006e84:	b480      	push	{r7}
 8006e86:	b083      	sub	sp, #12
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
    }
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	4618      	mov	r0, r3
 8006e90:	370c      	adds	r7, #12
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr

08006e9a <_ZNK5Eigen9EigenBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEE7derivedEv>:
 8006e9a:	b480      	push	{r7}
 8006e9c:	b083      	sub	sp, #12
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	6078      	str	r0, [r7, #4]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	370c      	adds	r7, #12
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr

08006eb0 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEEvRT_RKT0_>:
void call_assignment(Dst& dst, const Src& src)
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b084      	sub	sp, #16
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	6039      	str	r1, [r7, #0]
  call_assignment(dst, src, internal::assign_op<typename Dst::Scalar,typename Src::Scalar>());
 8006eba:	f107 030c 	add.w	r3, r7, #12
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f000 f8ff 	bl	80070c2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8006ec4:	f107 020c 	add.w	r2, r7, #12
 8006ec8:	2300      	movs	r3, #0
 8006eca:	6839      	ldr	r1, [r7, #0]
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f000 f943 	bl	8007158 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISQ_NS0_16evaluator_traitsISQ_E5ShapeEEE5valueEPvE4typeE>
}
 8006ed2:	bf00      	nop
 8006ed4:	3710      	adds	r7, #16
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}

08006eda <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006eda:	b480      	push	{r7}
 8006edc:	b083      	sub	sp, #12
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	6078      	str	r0, [r7, #4]
    }
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	370c      	adds	r7, #12
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr

08006ef0 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006ef0:	b480      	push	{r7}
 8006ef2:	b083      	sub	sp, #12
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
    }
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	4618      	mov	r0, r3
 8006efc:	370c      	adds	r7, #12
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr

08006f06 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006f06:	b480      	push	{r7}
 8006f08:	b083      	sub	sp, #12
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	6078      	str	r0, [r7, #4]
    }
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	4618      	mov	r0, r3
 8006f12:	370c      	adds	r7, #12
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr

08006f1c <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS6_NS1_INS2_20scalar_difference_opIffEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS5_IfLi1ELi3ELi1ELi1ELi3EEES6_Li0EEEEELi0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006f1c:	b480      	push	{r7}
 8006f1e:	b083      	sub	sp, #12
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
    }
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	4618      	mov	r0, r3
 8006f28:	370c      	adds	r7, #12
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr

08006f32 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 8006f32:	b580      	push	{r7, lr}
 8006f34:	b082      	sub	sp, #8
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f7ff f88a 	bl	8006058 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 8006f44:	4603      	mov	r3, r0
    }
 8006f46:	4618      	mov	r0, r3
 8006f48:	3708      	adds	r7, #8
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}

08006f4e <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS6_NS1_INS2_20scalar_difference_opIffEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS5_IfLi1ELi3ELi1ELi1ELi3EEES6_Li0EEEEELi0EEEEEE7derivedEv>:
 8006f4e:	b480      	push	{r7}
 8006f50:	b083      	sub	sp, #12
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	6078      	str	r0, [r7, #4]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	4618      	mov	r0, r3
 8006f5a:	370c      	adds	r7, #12
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr

08006f64 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKS3_KNS_7ProductIS3_NS4_INS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEEEEvRT_RKT0_>:
void call_assignment(Dst& dst, const Src& src)
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b084      	sub	sp, #16
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
  call_assignment(dst, src, internal::assign_op<typename Dst::Scalar,typename Src::Scalar>());
 8006f6e:	f107 030c 	add.w	r3, r7, #12
 8006f72:	4618      	mov	r0, r3
 8006f74:	f000 f8a5 	bl	80070c2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8006f78:	f107 020c 	add.w	r2, r7, #12
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	6839      	ldr	r1, [r7, #0]
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f000 f901 	bl	8007188 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKS3_KNS_7ProductIS3_NS4_INS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISO_NS0_16evaluator_traitsISO_E5ShapeEEE5valueEPvE4typeE>
}
 8006f86:	bf00      	nop
 8006f88:	3710      	adds	r7, #16
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}

08006f8e <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006f8e:	b480      	push	{r7}
 8006f90:	b083      	sub	sp, #12
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	6078      	str	r0, [r7, #4]
    }
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	4618      	mov	r0, r3
 8006f9a:	370c      	adds	r7, #12
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr

08006fa4 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006fa4:	b480      	push	{r7}
 8006fa6:	b083      	sub	sp, #12
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
    }
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	4618      	mov	r0, r3
 8006fb0:	370c      	adds	r7, #12
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr

08006fba <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006fba:	b480      	push	{r7}
 8006fbc:	b083      	sub	sp, #12
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	6078      	str	r0, [r7, #4]
    }
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	370c      	adds	r7, #12
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr

08006fd0 <_ZNK5Eigen9EigenBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li0EEEE7derivedEv>:
 8006fd0:	b480      	push	{r7}
 8006fd2:	b083      	sub	sp, #12
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	4618      	mov	r0, r3
 8006fdc:	370c      	adds	r7, #12
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr

08006fe6 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEEEEvRT_RKT0_>:
void call_assignment(Dst& dst, const Src& src)
 8006fe6:	b580      	push	{r7, lr}
 8006fe8:	b084      	sub	sp, #16
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
 8006fee:	6039      	str	r1, [r7, #0]
  call_assignment(dst, src, internal::assign_op<typename Dst::Scalar,typename Src::Scalar>());
 8006ff0:	f107 030c 	add.w	r3, r7, #12
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f000 f864 	bl	80070c2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8006ffa:	f107 020c 	add.w	r2, r7, #12
 8006ffe:	2300      	movs	r3, #0
 8007000:	6839      	ldr	r1, [r7, #0]
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 f8d8 	bl	80071b8 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISJ_NS0_16evaluator_traitsISJ_E5ShapeEEE5valueEPvE4typeE>
}
 8007008:	bf00      	nop
 800700a:	3710      	adds	r7, #16
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}

08007010 <_ZN5Eigen8internal11plain_arrayIfLi9ELi0ELi0EEC1Ev>:
  plain_array()
 8007010:	b580      	push	{r7, lr}
 8007012:	b082      	sub	sp, #8
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
    check_static_allocation_size<T,Size>();
 8007018:	f000 f8e6 	bl	80071e8 <_ZN5Eigen8internal28check_static_allocation_sizeIfLi9EEEvv>
  }
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	4618      	mov	r0, r3
 8007020:	3708      	adds	r7, #8
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}

08007026 <_ZN5Eigen8internal11plain_arrayIfLi1ELi0ELi0EEC1Ev>:
  plain_array()
 8007026:	b580      	push	{r7, lr}
 8007028:	b082      	sub	sp, #8
 800702a:	af00      	add	r7, sp, #0
 800702c:	6078      	str	r0, [r7, #4]
    check_static_allocation_size<T,Size>();
 800702e:	f000 f8e2 	bl	80071f6 <_ZN5Eigen8internal28check_static_allocation_sizeIfLi1EEEvv>
  }
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	4618      	mov	r0, r3
 8007036:	3708      	adds	r7, #8
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <_ZN5Eigen8internal11plain_arrayIfLi3ELi0ELi0EEC1Ev>:
  plain_array()
 800703c:	b580      	push	{r7, lr}
 800703e:	b082      	sub	sp, #8
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
    check_static_allocation_size<T,Size>();
 8007044:	f000 f8de 	bl	8007204 <_ZN5Eigen8internal28check_static_allocation_sizeIfLi3EEEvv>
  }
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	4618      	mov	r0, r3
 800704c:	3708      	adds	r7, #8
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}

08007052 <_ZN5Eigen8internal11plain_arrayIfLi3ELi1ELi0EEC1Ev>:
  plain_array()
 8007052:	b580      	push	{r7, lr}
 8007054:	b082      	sub	sp, #8
 8007056:	af00      	add	r7, sp, #0
 8007058:	6078      	str	r0, [r7, #4]
    check_static_allocation_size<T,Size>();
 800705a:	f000 f8d3 	bl	8007204 <_ZN5Eigen8internal28check_static_allocation_sizeIfLi3EEEvv>
  }
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	4618      	mov	r0, r3
 8007062:	3708      	adds	r7, #8
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}

08007068 <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC T *data() { return m_data.array; }
 8007068:	b480      	push	{r7}
 800706a:	b083      	sub	sp, #12
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	4618      	mov	r0, r3
 8007074:	370c      	adds	r7, #12
 8007076:	46bd      	mov	sp, r7
 8007078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707c:	4770      	bx	lr

0800707e <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKS5_>:
  explicit evaluator(const PlainObjectType& m)
 800707e:	b590      	push	{r4, r7, lr}
 8007080:	b083      	sub	sp, #12
 8007082:	af00      	add	r7, sp, #0
 8007084:	6078      	str	r0, [r7, #4]
 8007086:	6039      	str	r1, [r7, #0]
    : m_d(m.data(),IsVectorAtCompileTime ? 0 : m.outerStride())
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f000 f8cf 	bl	800722c <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
 800708e:	687c      	ldr	r4, [r7, #4]
 8007090:	6838      	ldr	r0, [r7, #0]
 8007092:	f000 f8be 	bl	8007212 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4dataEv>
 8007096:	4603      	mov	r3, r0
 8007098:	2200      	movs	r2, #0
 800709a:	4619      	mov	r1, r3
 800709c:	4620      	mov	r0, r4
 800709e:	f000 f8d0 	bl	8007242 <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EEC1EPKfi>
  }
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	4618      	mov	r0, r3
 80070a6:	370c      	adds	r7, #12
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd90      	pop	{r4, r7, pc}

080070ac <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EE11outerStrideEv>:
  Index outerStride() const EIGEN_NOEXCEPT { return OuterStride; }
 80070ac:	b480      	push	{r7}
 80070ae:	b083      	sub	sp, #12
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	2300      	movs	r3, #0
 80070b6:	4618      	mov	r0, r3
 80070b8:	370c      	adds	r7, #12
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr

080070c2 <_ZN5Eigen8internal9assign_opIffEC1Ev>:
  * \brief Template functor for scalar/packet assignment
  *
  */
template<typename DstScalar,typename SrcScalar> struct assign_op {

  EIGEN_EMPTY_STRUCT_CTOR(assign_op)
 80070c2:	b480      	push	{r7}
 80070c4:	b083      	sub	sp, #12
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	6078      	str	r0, [r7, #4]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	4618      	mov	r0, r3
 80070ce:	370c      	adds	r7, #12
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr

080070d8 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISN_NS0_16evaluator_traitsISN_E5ShapeEEE5valueEPvE4typeE>:
}

// Deal with "assume-aliasing"
template<typename Dst, typename Src, typename Func>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
void call_assignment(Dst& dst, const Src& src, const Func& func, typename enable_if< evaluator_assume_aliasing<Src>::value, void*>::type = 0)
 80070d8:	b580      	push	{r7, lr}
 80070da:	b08e      	sub	sp, #56	; 0x38
 80070dc:	af00      	add	r7, sp, #0
 80070de:	60f8      	str	r0, [r7, #12]
 80070e0:	60b9      	str	r1, [r7, #8]
 80070e2:	607a      	str	r2, [r7, #4]
 80070e4:	603b      	str	r3, [r7, #0]
{
  typename plain_matrix_type<Src>::type tmp(src);
 80070e6:	f107 0314 	add.w	r3, r7, #20
 80070ea:	68b9      	ldr	r1, [r7, #8]
 80070ec:	4618      	mov	r0, r3
 80070ee:	f000 f8ba 	bl	8007266 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS0_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS5_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEEEERKT_>
  call_assignment_no_alias(dst, tmp, func);
 80070f2:	f107 0314 	add.w	r3, r7, #20
 80070f6:	687a      	ldr	r2, [r7, #4]
 80070f8:	4619      	mov	r1, r3
 80070fa:	68f8      	ldr	r0, [r7, #12]
 80070fc:	f000 f8c8 	bl	8007290 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
}
 8007100:	bf00      	nop
 8007102:	3738      	adds	r7, #56	; 0x38
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISB_NS0_16evaluator_traitsISB_E5ShapeEEE5valueEPvE4typeE>:
void call_assignment(Dst& dst, const Src& src, const Func& func, typename enable_if< evaluator_assume_aliasing<Src>::value, void*>::type = 0)
 8007108:	b580      	push	{r7, lr}
 800710a:	b088      	sub	sp, #32
 800710c:	af00      	add	r7, sp, #0
 800710e:	60f8      	str	r0, [r7, #12]
 8007110:	60b9      	str	r1, [r7, #8]
 8007112:	607a      	str	r2, [r7, #4]
 8007114:	603b      	str	r3, [r7, #0]
  typename plain_matrix_type<Src>::type tmp(src);
 8007116:	f107 0314 	add.w	r3, r7, #20
 800711a:	68b9      	ldr	r1, [r7, #8]
 800711c:	4618      	mov	r0, r3
 800711e:	f000 f8c8 	bl	80072b2 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_7ProductINS0_IfLi3ELi3ELi0ELi3ELi3EEES1_Li0EEEEERKT_>
  call_assignment_no_alias(dst, tmp, func);
 8007122:	f107 0314 	add.w	r3, r7, #20
 8007126:	687a      	ldr	r2, [r7, #4]
 8007128:	4619      	mov	r1, r3
 800712a:	68f8      	ldr	r0, [r7, #12]
 800712c:	f000 f8d6 	bl	80072dc <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
}
 8007130:	bf00      	nop
 8007132:	3720      	adds	r7, #32
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}

08007138 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXntsrNS0_25evaluator_assume_aliasingISJ_NS0_16evaluator_traitsISJ_E5ShapeEEE5valueEPvE4typeE>:

template<typename Dst, typename Src, typename Func>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
void call_assignment(Dst& dst, const Src& src, const Func& func, typename enable_if<!evaluator_assume_aliasing<Src>::value, void*>::type = 0)
 8007138:	b580      	push	{r7, lr}
 800713a:	b084      	sub	sp, #16
 800713c:	af00      	add	r7, sp, #0
 800713e:	60f8      	str	r0, [r7, #12]
 8007140:	60b9      	str	r1, [r7, #8]
 8007142:	607a      	str	r2, [r7, #4]
 8007144:	603b      	str	r3, [r7, #0]
{
  call_assignment_no_alias(dst, src, func);
 8007146:	687a      	ldr	r2, [r7, #4]
 8007148:	68b9      	ldr	r1, [r7, #8]
 800714a:	68f8      	ldr	r0, [r7, #12]
 800714c:	f000 f8d7 	bl	80072fe <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
}
 8007150:	bf00      	nop
 8007152:	3710      	adds	r7, #16
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISQ_NS0_16evaluator_traitsISQ_E5ShapeEEE5valueEPvE4typeE>:
void call_assignment(Dst& dst, const Src& src, const Func& func, typename enable_if< evaluator_assume_aliasing<Src>::value, void*>::type = 0)
 8007158:	b580      	push	{r7, lr}
 800715a:	b088      	sub	sp, #32
 800715c:	af00      	add	r7, sp, #0
 800715e:	60f8      	str	r0, [r7, #12]
 8007160:	60b9      	str	r1, [r7, #8]
 8007162:	607a      	str	r2, [r7, #4]
 8007164:	603b      	str	r3, [r7, #0]
  typename plain_matrix_type<Src>::type tmp(src);
 8007166:	f107 0314 	add.w	r3, r7, #20
 800716a:	68b9      	ldr	r1, [r7, #8]
 800716c:	4618      	mov	r0, r3
 800716e:	f000 f8d7 	bl	8007320 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_7ProductINS3_INS0_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS0_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS3_INS3_IS6_S4_Li0EEES7_Li0EEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERKT_>
  call_assignment_no_alias(dst, tmp, func);
 8007172:	f107 0314 	add.w	r3, r7, #20
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	4619      	mov	r1, r3
 800717a:	68f8      	ldr	r0, [r7, #12]
 800717c:	f000 f8ae 	bl	80072dc <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
}
 8007180:	bf00      	nop
 8007182:	3720      	adds	r7, #32
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKS3_KNS_7ProductIS3_NS4_INS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISO_NS0_16evaluator_traitsISO_E5ShapeEEE5valueEPvE4typeE>:
void call_assignment(Dst& dst, const Src& src, const Func& func, typename enable_if< evaluator_assume_aliasing<Src>::value, void*>::type = 0)
 8007188:	b580      	push	{r7, lr}
 800718a:	b088      	sub	sp, #32
 800718c:	af00      	add	r7, sp, #0
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	60b9      	str	r1, [r7, #8]
 8007192:	607a      	str	r2, [r7, #4]
 8007194:	603b      	str	r3, [r7, #0]
  typename plain_matrix_type<Src>::type tmp(src);
 8007196:	f107 0314 	add.w	r3, r7, #20
 800719a:	68b9      	ldr	r1, [r7, #8]
 800719c:	4618      	mov	r0, r3
 800719e:	f000 f8d4 	bl	800734a <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS1_KNS_7ProductIS1_NS3_INS4_20scalar_difference_opIffEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS0_IfLi1ELi3ELi1ELi1ELi3EEES1_Li0EEEEELi0EEEEEEERKT_>
  call_assignment_no_alias(dst, tmp, func);
 80071a2:	f107 0314 	add.w	r3, r7, #20
 80071a6:	687a      	ldr	r2, [r7, #4]
 80071a8:	4619      	mov	r1, r3
 80071aa:	68f8      	ldr	r0, [r7, #12]
 80071ac:	f000 f896 	bl	80072dc <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
}
 80071b0:	bf00      	nop
 80071b2:	3720      	adds	r7, #32
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}

080071b8 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISJ_NS0_16evaluator_traitsISJ_E5ShapeEEE5valueEPvE4typeE>:
void call_assignment(Dst& dst, const Src& src, const Func& func, typename enable_if< evaluator_assume_aliasing<Src>::value, void*>::type = 0)
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b08e      	sub	sp, #56	; 0x38
 80071bc:	af00      	add	r7, sp, #0
 80071be:	60f8      	str	r0, [r7, #12]
 80071c0:	60b9      	str	r1, [r7, #8]
 80071c2:	607a      	str	r2, [r7, #4]
 80071c4:	603b      	str	r3, [r7, #0]
  typename plain_matrix_type<Src>::type tmp(src);
 80071c6:	f107 0314 	add.w	r3, r7, #20
 80071ca:	68b9      	ldr	r1, [r7, #8]
 80071cc:	4618      	mov	r0, r3
 80071ce:	f000 f8d1 	bl	8007374 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS3_INS0_IfLi3ELi1ELi0ELi3ELi1EEENS0_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES1_Li0EEEEERKT_>
  call_assignment_no_alias(dst, tmp, func);
 80071d2:	f107 0314 	add.w	r3, r7, #20
 80071d6:	687a      	ldr	r2, [r7, #4]
 80071d8:	4619      	mov	r1, r3
 80071da:	68f8      	ldr	r0, [r7, #12]
 80071dc:	f000 f858 	bl	8007290 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
}
 80071e0:	bf00      	nop
 80071e2:	3738      	adds	r7, #56	; 0x38
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <_ZN5Eigen8internal28check_static_allocation_sizeIfLi9EEEvv>:
void check_static_allocation_size()
 80071e8:	b480      	push	{r7}
 80071ea:	af00      	add	r7, sp, #0
}
 80071ec:	bf00      	nop
 80071ee:	46bd      	mov	sp, r7
 80071f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f4:	4770      	bx	lr

080071f6 <_ZN5Eigen8internal28check_static_allocation_sizeIfLi1EEEvv>:
void check_static_allocation_size()
 80071f6:	b480      	push	{r7}
 80071f8:	af00      	add	r7, sp, #0
}
 80071fa:	bf00      	nop
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr

08007204 <_ZN5Eigen8internal28check_static_allocation_sizeIfLi3EEEvv>:
void check_static_allocation_size()
 8007204:	b480      	push	{r7}
 8007206:	af00      	add	r7, sp, #0
}
 8007208:	bf00      	nop
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr

08007212 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4dataEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar *data() const
 8007212:	b580      	push	{r7, lr}
 8007214:	b082      	sub	sp, #8
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
    { return m_storage.data(); }
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	4618      	mov	r0, r3
 800721e:	f000 f8be 	bl	800739e <_ZNK5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4dataEv>
 8007222:	4603      	mov	r3, r0
 8007224:	4618      	mov	r0, r3
 8007226:	3708      	adds	r7, #8
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800722c:	b480      	push	{r7}
 800722e:	b083      	sub	sp, #12
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	4618      	mov	r0, r3
 8007238:	370c      	adds	r7, #12
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr

08007242 <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EEC1EPKfi>:
  plainobjectbase_evaluator_data(const Scalar* ptr, Index outerStride) : data(ptr)
 8007242:	b580      	push	{r7, lr}
 8007244:	b084      	sub	sp, #16
 8007246:	af00      	add	r7, sp, #0
 8007248:	60f8      	str	r0, [r7, #12]
 800724a:	60b9      	str	r1, [r7, #8]
 800724c:	607a      	str	r2, [r7, #4]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	68ba      	ldr	r2, [r7, #8]
 8007252:	601a      	str	r2, [r3, #0]
    EIGEN_UNUSED_VARIABLE(outerStride);
 8007254:	1d3b      	adds	r3, r7, #4
 8007256:	4618      	mov	r0, r3
 8007258:	f7fd f82d 	bl	80042b6 <_ZN5Eigen8internal22ignore_unused_variableIiEEvRKT_>
  }
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	4618      	mov	r0, r3
 8007260:	3710      	adds	r7, #16
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}

08007266 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS0_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS5_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEEEERKT_>:
#ifndef EIGEN_PARSED_BY_DOXYGEN

    // This constructor is for both 1x1 matrices and dynamic vectors
    template<typename T>
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    explicit Matrix(const T& x)
 8007266:	b580      	push	{r7, lr}
 8007268:	b082      	sub	sp, #8
 800726a:	af00      	add	r7, sp, #0
 800726c:	6078      	str	r0, [r7, #4]
 800726e:	6039      	str	r1, [r7, #0]
    {
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	4618      	mov	r0, r3
 8007274:	f7fd fdf3 	bl	8004e5e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
      Base::_check_template_params();
 8007278:	f7fd fe01 	bl	8004e7e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6839      	ldr	r1, [r7, #0]
 8007280:	4618      	mov	r0, r3
 8007282:	f000 f8a3 	bl	80073cc <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS1_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS7_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi0EEESK_EEvRKNS_9DenseBaseIT0_EE>
    }
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	4618      	mov	r0, r3
 800728a:	3708      	adds	r7, #8
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
}


template<typename Dst, typename Src, typename Func>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8007290:	b580      	push	{r7, lr}
 8007292:	b086      	sub	sp, #24
 8007294:	af00      	add	r7, sp, #0
 8007296:	60f8      	str	r0, [r7, #12]
 8007298:	60b9      	str	r1, [r7, #8]
 800729a:	607a      	str	r2, [r7, #4]
                      ) && int(Dst::SizeAtCompileTime) != 1
  };

  typedef typename internal::conditional<NeedToTranspose, Transpose<Dst>, Dst>::type ActualDstTypeCleaned;
  typedef typename internal::conditional<NeedToTranspose, Transpose<Dst>, Dst&>::type ActualDstType;
  ActualDstType actualDst(dst);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	617b      	str	r3, [r7, #20]
  // TODO check whether this is the right place to perform these checks:
  EIGEN_STATIC_ASSERT_LVALUE(Dst)
  EIGEN_STATIC_ASSERT_SAME_MATRIX_SIZE(ActualDstTypeCleaned,Src)
  EIGEN_CHECK_BINARY_COMPATIBILIY(Func,typename ActualDstTypeCleaned::Scalar,typename Src::Scalar);

  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	68b9      	ldr	r1, [r7, #8]
 80072a4:	6978      	ldr	r0, [r7, #20]
 80072a6:	f000 f89e 	bl	80073e6 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS3_RKS5_>
}
 80072aa:	bf00      	nop
 80072ac:	3718      	adds	r7, #24
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}

080072b2 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_7ProductINS0_IfLi3ELi3ELi0ELi3ELi3EEES1_Li0EEEEERKT_>:
    explicit Matrix(const T& x)
 80072b2:	b580      	push	{r7, lr}
 80072b4:	b082      	sub	sp, #8
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
 80072ba:	6039      	str	r1, [r7, #0]
    {
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	4618      	mov	r0, r3
 80072c0:	f7fd fe13 	bl	8004eea <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
      Base::_check_template_params();
 80072c4:	f7fd fe21 	bl	8004f0a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6839      	ldr	r1, [r7, #0]
 80072cc:	4618      	mov	r0, r3
 80072ce:	f000 f89d 	bl	800740c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEES7_EEvRKNS_9DenseBaseIT0_EE>
    }
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	4618      	mov	r0, r3
 80072d6:	3708      	adds	r7, #8
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}

080072dc <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 80072dc:	b580      	push	{r7, lr}
 80072de:	b086      	sub	sp, #24
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	60f8      	str	r0, [r7, #12]
 80072e4:	60b9      	str	r1, [r7, #8]
 80072e6:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 80072ec:	687a      	ldr	r2, [r7, #4]
 80072ee:	68b9      	ldr	r1, [r7, #8]
 80072f0:	6978      	ldr	r0, [r7, #20]
 80072f2:	f000 f898 	bl	8007426 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS3_RKS5_>
}
 80072f6:	bf00      	nop
 80072f8:	3718      	adds	r7, #24
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}

080072fe <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 80072fe:	b580      	push	{r7, lr}
 8007300:	b086      	sub	sp, #24
 8007302:	af00      	add	r7, sp, #0
 8007304:	60f8      	str	r0, [r7, #12]
 8007306:	60b9      	str	r1, [r7, #8]
 8007308:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800730e:	687a      	ldr	r2, [r7, #4]
 8007310:	68b9      	ldr	r1, [r7, #8]
 8007312:	6978      	ldr	r0, [r7, #20]
 8007314:	f000 f89a 	bl	800744c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>
}
 8007318:	bf00      	nop
 800731a:	3718      	adds	r7, #24
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}

08007320 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_7ProductINS3_INS0_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS0_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS3_INS3_IS6_S4_Li0EEES7_Li0EEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERKT_>:
    explicit Matrix(const T& x)
 8007320:	b580      	push	{r7, lr}
 8007322:	b082      	sub	sp, #8
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	6039      	str	r1, [r7, #0]
    {
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	4618      	mov	r0, r3
 800732e:	f7fd fddc 	bl	8004eea <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
      Base::_check_template_params();
 8007332:	f7fd fdea 	bl	8004f0a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6839      	ldr	r1, [r7, #0]
 800733a:	4618      	mov	r0, r3
 800733c:	f000 f899 	bl	8007472 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_7ProductINS5_INS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS5_INS5_IS8_S6_Li0EEES9_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEESN_EEvRKNS_9DenseBaseIT0_EE>
    }
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	4618      	mov	r0, r3
 8007344:	3708      	adds	r7, #8
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}

0800734a <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS1_KNS_7ProductIS1_NS3_INS4_20scalar_difference_opIffEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS0_IfLi1ELi3ELi1ELi1ELi3EEES1_Li0EEEEELi0EEEEEEERKT_>:
    explicit Matrix(const T& x)
 800734a:	b580      	push	{r7, lr}
 800734c:	b082      	sub	sp, #8
 800734e:	af00      	add	r7, sp, #0
 8007350:	6078      	str	r0, [r7, #4]
 8007352:	6039      	str	r1, [r7, #0]
    {
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	4618      	mov	r0, r3
 8007358:	f7fd fdc7 	bl	8004eea <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
      Base::_check_template_params();
 800735c:	f7fd fdd5 	bl	8004f0a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6839      	ldr	r1, [r7, #0]
 8007364:	4618      	mov	r0, r3
 8007366:	f000 f891 	bl	800748c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS2_KNS_7ProductIS2_NS5_INS6_20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEESL_EEvRKNS_9DenseBaseIT0_EE>
    }
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	4618      	mov	r0, r3
 800736e:	3708      	adds	r7, #8
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS3_INS0_IfLi3ELi1ELi0ELi3ELi1EEENS0_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES1_Li0EEEEERKT_>:
    explicit Matrix(const T& x)
 8007374:	b580      	push	{r7, lr}
 8007376:	b082      	sub	sp, #8
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	6039      	str	r1, [r7, #0]
    {
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	4618      	mov	r0, r3
 8007382:	f7fd fd6c 	bl	8004e5e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
      Base::_check_template_params();
 8007386:	f7fd fd7a 	bl	8004e7e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6839      	ldr	r1, [r7, #0]
 800738e:	4618      	mov	r0, r3
 8007390:	f000 f889 	bl	80074a6 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS5_INS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES2_Li0EEESG_EEvRKNS_9DenseBaseIT0_EE>
    }
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	4618      	mov	r0, r3
 8007398:	3708      	adds	r7, #8
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}

0800739e <_ZNK5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC const T *data() const { return m_data.array; }
 800739e:	b480      	push	{r7}
 80073a0:	b083      	sub	sp, #12
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	6078      	str	r0, [r7, #4]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	4618      	mov	r0, r3
 80073aa:	370c      	adds	r7, #12
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr

080073b4 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>:
    { }

    EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
    inline Index innerStride() const EIGEN_NOEXCEPT { return 1; }
    EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
    inline Index outerStride() const EIGEN_NOEXCEPT { return this->innerSize(); }
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b082      	sub	sp, #8
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f000 f87f 	bl	80074c0 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE9innerSizeEv>
 80073c2:	4603      	mov	r3, r0
 80073c4:	4618      	mov	r0, r3
 80073c6:	3708      	adds	r7, #8
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}

080073cc <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS1_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS7_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi0EEESK_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b082      	sub	sp, #8
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 80073d6:	6839      	ldr	r1, [r7, #0]
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f000 f87d 	bl	80074d8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS1_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS7_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi0EEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 80073de:	bf00      	nop
 80073e0:	3708      	adds	r7, #8
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}

080073e6 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS3_RKS5_>:
// both partial specialization+SFINAE without ambiguous specialization
template< typename DstXprType, typename SrcXprType, typename Functor, typename Weak>
struct Assignment<DstXprType, SrcXprType, Functor, Dense2Dense, Weak>
{
  EIGEN_DEVICE_FUNC
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 80073e6:	b580      	push	{r7, lr}
 80073e8:	b084      	sub	sp, #16
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	60f8      	str	r0, [r7, #12]
 80073ee:	60b9      	str	r1, [r7, #8]
 80073f0:	607a      	str	r2, [r7, #4]
  {
#ifndef EIGEN_NO_DEBUG
    internal::check_for_aliasing(dst, src);
 80073f2:	68b9      	ldr	r1, [r7, #8]
 80073f4:	68f8      	ldr	r0, [r7, #12]
 80073f6:	f000 f890 	bl	800751a <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_EEvRKT_RKT0_>
#endif

    call_dense_assignment_loop(dst, src, func);
 80073fa:	687a      	ldr	r2, [r7, #4]
 80073fc:	68b9      	ldr	r1, [r7, #8]
 80073fe:	68f8      	ldr	r0, [r7, #12]
 8007400:	f000 f8c4 	bl	800758c <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8007404:	bf00      	nop
 8007406:	3710      	adds	r7, #16
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}

0800740c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEES7_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 800740c:	b580      	push	{r7, lr}
 800740e:	b082      	sub	sp, #8
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 8007416:	6839      	ldr	r1, [r7, #0]
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f000 f8ef 	bl	80075fc <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 800741e:	bf00      	nop
 8007420:	3708      	adds	r7, #8
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}

08007426 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS3_RKS5_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 8007426:	b580      	push	{r7, lr}
 8007428:	b084      	sub	sp, #16
 800742a:	af00      	add	r7, sp, #0
 800742c:	60f8      	str	r0, [r7, #12]
 800742e:	60b9      	str	r1, [r7, #8]
 8007430:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 8007432:	68b9      	ldr	r1, [r7, #8]
 8007434:	68f8      	ldr	r0, [r7, #12]
 8007436:	f000 f902 	bl	800763e <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_EEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 800743a:	687a      	ldr	r2, [r7, #4]
 800743c:	68b9      	ldr	r1, [r7, #8]
 800743e:	68f8      	ldr	r0, [r7, #12]
 8007440:	f000 f908 	bl	8007654 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8007444:	bf00      	nop
 8007446:	3710      	adds	r7, #16
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}

0800744c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 800744c:	b580      	push	{r7, lr}
 800744e:	b084      	sub	sp, #16
 8007450:	af00      	add	r7, sp, #0
 8007452:	60f8      	str	r0, [r7, #12]
 8007454:	60b9      	str	r1, [r7, #8]
 8007456:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 8007458:	68b9      	ldr	r1, [r7, #8]
 800745a:	68f8      	ldr	r0, [r7, #12]
 800745c:	f000 f932 	bl	80076c4 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 8007460:	687a      	ldr	r2, [r7, #4]
 8007462:	68b9      	ldr	r1, [r7, #8]
 8007464:	68f8      	ldr	r0, [r7, #12]
 8007466:	f000 f9ca 	bl	80077fe <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800746a:	bf00      	nop
 800746c:	3710      	adds	r7, #16
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}

08007472 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_7ProductINS5_INS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS5_INS5_IS8_S6_Li0EEES9_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEESN_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 8007472:	b580      	push	{r7, lr}
 8007474:	b082      	sub	sp, #8
 8007476:	af00      	add	r7, sp, #0
 8007478:	6078      	str	r0, [r7, #4]
 800747a:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 800747c:	6839      	ldr	r1, [r7, #0]
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 f9f5 	bl	800786e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_7ProductINS5_INS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS5_INS5_IS8_S6_Li0EEES9_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 8007484:	bf00      	nop
 8007486:	3708      	adds	r7, #8
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}

0800748c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS2_KNS_7ProductIS2_NS5_INS6_20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEESL_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 800748c:	b580      	push	{r7, lr}
 800748e:	b082      	sub	sp, #8
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 8007496:	6839      	ldr	r1, [r7, #0]
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f000 fa09 	bl	80078b0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS2_KNS_7ProductIS2_NS5_INS6_20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 800749e:	bf00      	nop
 80074a0:	3708      	adds	r7, #8
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}

080074a6 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS5_INS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES2_Li0EEESG_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 80074a6:	b580      	push	{r7, lr}
 80074a8:	b082      	sub	sp, #8
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	6078      	str	r0, [r7, #4]
 80074ae:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 80074b0:	6839      	ldr	r1, [r7, #0]
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f000 fa1d 	bl	80078f2 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS5_INS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 80074b8:	bf00      	nop
 80074ba:	3708      	adds	r7, #8
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE9innerSizeEv>:
    Index innerSize() const
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b082      	sub	sp, #8
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
      return IsVectorAtCompileTime ? this->size()
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f000 fa33 	bl	8007934 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4sizeEv>
 80074ce:	4603      	mov	r3, r0
    }
 80074d0:	4618      	mov	r0, r3
 80074d2:	3708      	adds	r7, #8
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS1_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS7_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 80074d8:	b5b0      	push	{r4, r5, r7, lr}
 80074da:	b084      	sub	sp, #16
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f7fe fa90 	bl	8005a08 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 80074e8:	4604      	mov	r4, r0
 80074ea:	6838      	ldr	r0, [r7, #0]
 80074ec:	f7ff fba9 	bl	8006c42 <_ZNK5Eigen9EigenBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi0EEEE7derivedEv>
 80074f0:	4605      	mov	r5, r0
 80074f2:	f107 030c 	add.w	r3, r7, #12
 80074f6:	4618      	mov	r0, r3
 80074f8:	f7ff fde3 	bl	80070c2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 80074fc:	f107 030c 	add.w	r3, r7, #12
 8007500:	461a      	mov	r2, r3
 8007502:	4629      	mov	r1, r5
 8007504:	4620      	mov	r0, r4
 8007506:	f000 fa27 	bl	8007958 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f7fe fa7c 	bl	8005a08 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8007510:	4603      	mov	r3, r0
    }
 8007512:	4618      	mov	r0, r3
 8007514:	3710      	adds	r7, #16
 8007516:	46bd      	mov	sp, r7
 8007518:	bdb0      	pop	{r4, r5, r7, pc}

0800751a <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_EEvRKT_RKT0_>:
    {
    }
};

template<typename Dst, typename Src>
void check_for_aliasing(const Dst &dst, const Src &src)
 800751a:	b580      	push	{r7, lr}
 800751c:	b082      	sub	sp, #8
 800751e:	af00      	add	r7, sp, #0
 8007520:	6078      	str	r0, [r7, #4]
 8007522:	6039      	str	r1, [r7, #0]
{
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	4618      	mov	r0, r3
 8007528:	f7fd fd9b 	bl	8005062 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800752c:	4603      	mov	r3, r0
 800752e:	2b01      	cmp	r3, #1
 8007530:	dd08      	ble.n	8007544 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_EEvRKT_RKT0_+0x2a>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	4618      	mov	r0, r3
 8007536:	f7fd fd89 	bl	800504c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800753a:	4603      	mov	r3, r0
 800753c:	2b01      	cmp	r3, #1
 800753e:	dd01      	ble.n	8007544 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_EEvRKT_RKT0_+0x2a>
 8007540:	2301      	movs	r3, #1
 8007542:	e000      	b.n	8007546 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_EEvRKT_RKT0_+0x2c>
 8007544:	2300      	movs	r3, #0
 8007546:	2b00      	cmp	r3, #0
 8007548:	d003      	beq.n	8007552 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_EEvRKT_RKT0_+0x38>
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
 800754a:	6839      	ldr	r1, [r7, #0]
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f000 fa14 	bl	800797a <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Lb0EE3runERKS3_S6_>
}
 8007552:	bf00      	nop
 8007554:	3708      	adds	r7, #8
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}

0800755a <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEED1Ev>:
struct evaluator<PlainObjectBase<Derived> >
 800755a:	b580      	push	{r7, lr}
 800755c:	b082      	sub	sp, #8
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f000 fa24 	bl	80079b0 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	4618      	mov	r0, r3
 800756c:	3708      	adds	r7, #8
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}

08007572 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>:
struct evaluator<Matrix<Scalar, Rows, Cols, Options, MaxRows, MaxCols> >
 8007572:	b580      	push	{r7, lr}
 8007574:	b082      	sub	sp, #8
 8007576:	af00      	add	r7, sp, #0
 8007578:	6078      	str	r0, [r7, #4]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	4618      	mov	r0, r3
 800757e:	f7ff ffec 	bl	800755a <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEED1Ev>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	4618      	mov	r0, r3
 8007586:	3708      	adds	r7, #8
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}

0800758c <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 800758c:	b580      	push	{r7, lr}
 800758e:	b08c      	sub	sp, #48	; 0x30
 8007590:	af02      	add	r7, sp, #8
 8007592:	60f8      	str	r0, [r7, #12]
 8007594:	60b9      	str	r1, [r7, #8]
 8007596:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 8007598:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800759c:	68b9      	ldr	r1, [r7, #8]
 800759e:	4618      	mov	r0, r3
 80075a0:	f000 f9f6 	bl	8007990 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
  resize_if_allowed(dst, src, func);
 80075a4:	687a      	ldr	r2, [r7, #4]
 80075a6:	68b9      	ldr	r1, [r7, #8]
 80075a8:	68f8      	ldr	r0, [r7, #12]
 80075aa:	f000 fa0d 	bl	80079c8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 80075ae:	f107 0320 	add.w	r3, r7, #32
 80075b2:	68f9      	ldr	r1, [r7, #12]
 80075b4:	4618      	mov	r0, r3
 80075b6:	f000 f9eb 	bl	8007990 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 80075ba:	68f8      	ldr	r0, [r7, #12]
 80075bc:	f000 fa50 	bl	8007a60 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE18const_cast_derivedEv>
 80075c0:	4603      	mov	r3, r0
 80075c2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80075c6:	f107 0120 	add.w	r1, r7, #32
 80075ca:	f107 0010 	add.w	r0, r7, #16
 80075ce:	9300      	str	r3, [sp, #0]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f000 fa50 	bl	8007a76 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EEC1ERS5_RKS5_RKS7_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 80075d6:	f107 0310 	add.w	r3, r7, #16
 80075da:	4618      	mov	r0, r3
 80075dc:	f000 fa65 	bl	8007aaa <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi2EE3runERS9_>
  DstEvaluatorType dstEvaluator(dst);
 80075e0:	f107 0320 	add.w	r3, r7, #32
 80075e4:	4618      	mov	r0, r3
 80075e6:	f7ff ffc4 	bl	8007572 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 80075ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80075ee:	4618      	mov	r0, r3
 80075f0:	f7ff ffbf 	bl	8007572 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
}
 80075f4:	bf00      	nop
 80075f6:	3728      	adds	r7, #40	; 0x28
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}

080075fc <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 80075fc:	b5b0      	push	{r4, r5, r7, lr}
 80075fe:	b084      	sub	sp, #16
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f7fe f862 	bl	80056d0 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800760c:	4604      	mov	r4, r0
 800760e:	6838      	ldr	r0, [r7, #0]
 8007610:	f7ff fb42 	bl	8006c98 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE7derivedEv>
 8007614:	4605      	mov	r5, r0
 8007616:	f107 030c 	add.w	r3, r7, #12
 800761a:	4618      	mov	r0, r3
 800761c:	f7ff fd51 	bl	80070c2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8007620:	f107 030c 	add.w	r3, r7, #12
 8007624:	461a      	mov	r2, r3
 8007626:	4629      	mov	r1, r5
 8007628:	4620      	mov	r0, r4
 800762a:	f000 fa49 	bl	8007ac0 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f7fe f84e 	bl	80056d0 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8007634:	4603      	mov	r3, r0
    }
 8007636:	4618      	mov	r0, r3
 8007638:	3710      	adds	r7, #16
 800763a:	46bd      	mov	sp, r7
 800763c:	bdb0      	pop	{r4, r5, r7, pc}

0800763e <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_EEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 800763e:	b480      	push	{r7}
 8007640:	b083      	sub	sp, #12
 8007642:	af00      	add	r7, sp, #0
 8007644:	6078      	str	r0, [r7, #4]
 8007646:	6039      	str	r1, [r7, #0]
}
 8007648:	bf00      	nop
 800764a:	370c      	adds	r7, #12
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr

08007654 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 8007654:	b580      	push	{r7, lr}
 8007656:	b08c      	sub	sp, #48	; 0x30
 8007658:	af02      	add	r7, sp, #8
 800765a:	60f8      	str	r0, [r7, #12]
 800765c:	60b9      	str	r1, [r7, #8]
 800765e:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 8007660:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007664:	68b9      	ldr	r1, [r7, #8]
 8007666:	4618      	mov	r0, r3
 8007668:	f7ff fa47 	bl	8006afa <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
  resize_if_allowed(dst, src, func);
 800766c:	687a      	ldr	r2, [r7, #4]
 800766e:	68b9      	ldr	r1, [r7, #8]
 8007670:	68f8      	ldr	r0, [r7, #12]
 8007672:	f000 fa37 	bl	8007ae4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 8007676:	f107 0320 	add.w	r3, r7, #32
 800767a:	68f9      	ldr	r1, [r7, #12]
 800767c:	4618      	mov	r0, r3
 800767e:	f7ff fa3c 	bl	8006afa <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 8007682:	68f8      	ldr	r0, [r7, #12]
 8007684:	f000 fa7a 	bl	8007b7c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv>
 8007688:	4603      	mov	r3, r0
 800768a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800768e:	f107 0120 	add.w	r1, r7, #32
 8007692:	f107 0010 	add.w	r0, r7, #16
 8007696:	9300      	str	r3, [sp, #0]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f000 fa7a 	bl	8007b92 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIffEELi0EEC1ERS5_RKS5_RKS7_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 800769e:	f107 0310 	add.w	r3, r7, #16
 80076a2:	4618      	mov	r0, r3
 80076a4:	f000 fa8f 	bl	8007bc6 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi2EE3runERS9_>
  DstEvaluatorType dstEvaluator(dst);
 80076a8:	f107 0320 	add.w	r3, r7, #32
 80076ac:	4618      	mov	r0, r3
 80076ae:	f7fd feea 	bl	8005486 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 80076b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076b6:	4618      	mov	r0, r3
 80076b8:	f7fd fee5 	bl	8005486 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
}
 80076bc:	bf00      	nop
 80076be:	3728      	adds	r7, #40	; 0x28
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b082      	sub	sp, #8
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	4618      	mov	r0, r3
 80076d2:	f7fd fcc6 	bl	8005062 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80076d6:	4603      	mov	r3, r0
 80076d8:	2b01      	cmp	r3, #1
 80076da:	dd08      	ble.n	80076ee <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRKT_RKT0_+0x2a>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	4618      	mov	r0, r3
 80076e0:	f7fd fcb4 	bl	800504c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80076e4:	4603      	mov	r3, r0
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	dd01      	ble.n	80076ee <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRKT_RKT0_+0x2a>
 80076ea:	2301      	movs	r3, #1
 80076ec:	e000      	b.n	80076f0 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRKT_RKT0_+0x2c>
 80076ee:	2300      	movs	r3, #0
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d003      	beq.n	80076fc <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRKT_RKT0_+0x38>
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
 80076f4:	6839      	ldr	r1, [r7, #0]
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 fa70 	bl	8007bdc <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EELb0EE3runERSD_RKSE_>
}
 80076fc:	bf00      	nop
 80076fe:	3708      	adds	r7, #8
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}

08007704 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEED1Ev>:
struct evaluator<PlainObjectBase<Derived> >
 8007704:	b580      	push	{r7, lr}
 8007706:	b082      	sub	sp, #8
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f000 fa8a 	bl	8007c26 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEED1Ev>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	4618      	mov	r0, r3
 8007716:	3708      	adds	r7, #8
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}

0800771c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEED1Ev>:
struct evaluator<Matrix<Scalar, Rows, Cols, Options, MaxRows, MaxCols> >
 800771c:	b580      	push	{r7, lr}
 800771e:	b082      	sub	sp, #8
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	4618      	mov	r0, r3
 8007728:	f7ff ffec 	bl	8007704 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEED1Ev>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	4618      	mov	r0, r3
 8007730:	3708      	adds	r7, #8
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}

08007736 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEELi3ENS_10DenseShapeES9_ffED1Ev>:
};

// This is the default evaluator implementation for products:
// It creates a temporary and call generic_product_impl
template<typename Lhs, typename Rhs, int Options, int ProductTag, typename LhsShape, typename RhsShape>
struct product_evaluator<Product<Lhs, Rhs, Options>, ProductTag, LhsShape, RhsShape>
 8007736:	b580      	push	{r7, lr}
 8007738:	b082      	sub	sp, #8
 800773a:	af00      	add	r7, sp, #0
 800773c:	6078      	str	r0, [r7, #4]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	4618      	mov	r0, r3
 8007742:	f7ff ffeb 	bl	800771c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEED1Ev>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	4618      	mov	r0, r3
 800774a:	3708      	adds	r7, #8
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}

08007750 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 8007750:	b580      	push	{r7, lr}
 8007752:	b082      	sub	sp, #8
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	4618      	mov	r0, r3
 800775c:	f7ff ffeb 	bl	8007736 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEELi3ENS_10DenseShapeES9_ffED1Ev>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	4618      	mov	r0, r3
 8007764:	3708      	adds	r7, #8
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}

0800776a <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEED1Ev>:
struct evaluator<const T>
 800776a:	b580      	push	{r7, lr}
 800776c:	b082      	sub	sp, #8
 800776e:	af00      	add	r7, sp, #0
 8007770:	6078      	str	r0, [r7, #4]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	4618      	mov	r0, r3
 8007776:	f7ff ffeb 	bl	8007750 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEED1Ev>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	4618      	mov	r0, r3
 800777e:	3708      	adds	r7, #8
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}

08007784 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>:
 8007784:	b580      	push	{r7, lr}
 8007786:	b082      	sub	sp, #8
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	4618      	mov	r0, r3
 8007790:	f7ff feef 	bl	8007572 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	4618      	mov	r0, r3
 8007798:	3708      	adds	r7, #8
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}

0800779e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE4DataD1Ev>:
  }

protected:

  // this helper permits to completely eliminate the functor if it is empty
  struct Data
 800779e:	b580      	push	{r7, lr}
 80077a0:	b082      	sub	sp, #8
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	6078      	str	r0, [r7, #4]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	332c      	adds	r3, #44	; 0x2c
 80077aa:	4618      	mov	r0, r3
 80077ac:	f7ff ffea 	bl	8007784 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	3304      	adds	r3, #4
 80077b4:	4618      	mov	r0, r3
 80077b6:	f7ff ffd8 	bl	800776a <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEED1Ev>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	4618      	mov	r0, r3
 80077be:	3708      	adds	r7, #8
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}

080077c4 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b082      	sub	sp, #8
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	4618      	mov	r0, r3
 80077d0:	f7ff ffe5 	bl	800779e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE4DataD1Ev>
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f000 fa1b 	bl	8007c10 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEED1Ev>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	4618      	mov	r0, r3
 80077de:	3708      	adds	r7, #8
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}

080077e4 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b082      	sub	sp, #8
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	4618      	mov	r0, r3
 80077f0:	f7ff ffe8 	bl	80077c4 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffED1Ev>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	4618      	mov	r0, r3
 80077f8:	3708      	adds	r7, #8
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}

080077fe <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 80077fe:	b580      	push	{r7, lr}
 8007800:	b098      	sub	sp, #96	; 0x60
 8007802:	af02      	add	r7, sp, #8
 8007804:	60f8      	str	r0, [r7, #12]
 8007806:	60b9      	str	r1, [r7, #8]
 8007808:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 800780a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800780e:	68b9      	ldr	r1, [r7, #8]
 8007810:	4618      	mov	r0, r3
 8007812:	f000 f9ee 	bl	8007bf2 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1ERKSE_>
  resize_if_allowed(dst, src, func);
 8007816:	687a      	ldr	r2, [r7, #4]
 8007818:	68b9      	ldr	r1, [r7, #8]
 800781a:	68f8      	ldr	r0, [r7, #12]
 800781c:	f000 fa28 	bl	8007c70 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 8007820:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007824:	68f9      	ldr	r1, [r7, #12]
 8007826:	4618      	mov	r0, r3
 8007828:	f000 f8b2 	bl	8007990 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 800782c:	68f8      	ldr	r0, [r7, #12]
 800782e:	f000 f917 	bl	8007a60 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE18const_cast_derivedEv>
 8007832:	4603      	mov	r3, r0
 8007834:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007838:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800783c:	f107 0014 	add.w	r0, r7, #20
 8007840:	9300      	str	r3, [sp, #0]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f000 fa5e 	bl	8007d04 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EEC1ERS5_RKSH_RKSJ_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 8007848:	f107 0314 	add.w	r3, r7, #20
 800784c:	4618      	mov	r0, r3
 800784e:	f000 fa73 	bl	8007d38 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSL_>
  DstEvaluatorType dstEvaluator(dst);
 8007852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007856:	4618      	mov	r0, r3
 8007858:	f7ff fe8b 	bl	8007572 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 800785c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007860:	4618      	mov	r0, r3
 8007862:	f7ff ffbf 	bl	80077e4 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEED1Ev>
}
 8007866:	bf00      	nop
 8007868:	3758      	adds	r7, #88	; 0x58
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}

0800786e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_7ProductINS5_INS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS5_INS5_IS8_S6_Li0EEES9_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 800786e:	b5b0      	push	{r4, r5, r7, lr}
 8007870:	b084      	sub	sp, #16
 8007872:	af00      	add	r7, sp, #0
 8007874:	6078      	str	r0, [r7, #4]
 8007876:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f7fd ff29 	bl	80056d0 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800787e:	4604      	mov	r4, r0
 8007880:	6838      	ldr	r0, [r7, #0]
 8007882:	f7ff fb0a 	bl	8006e9a <_ZNK5Eigen9EigenBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEE7derivedEv>
 8007886:	4605      	mov	r5, r0
 8007888:	f107 030c 	add.w	r3, r7, #12
 800788c:	4618      	mov	r0, r3
 800788e:	f7ff fc18 	bl	80070c2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8007892:	f107 030c 	add.w	r3, r7, #12
 8007896:	461a      	mov	r2, r3
 8007898:	4629      	mov	r1, r5
 800789a:	4620      	mov	r0, r4
 800789c:	f000 fa57 	bl	8007d4e <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f7fd ff15 	bl	80056d0 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80078a6:	4603      	mov	r3, r0
    }
 80078a8:	4618      	mov	r0, r3
 80078aa:	3710      	adds	r7, #16
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bdb0      	pop	{r4, r5, r7, pc}

080078b0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS2_KNS_7ProductIS2_NS5_INS6_20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 80078b0:	b5b0      	push	{r4, r5, r7, lr}
 80078b2:	b084      	sub	sp, #16
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f7fd ff08 	bl	80056d0 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80078c0:	4604      	mov	r4, r0
 80078c2:	6838      	ldr	r0, [r7, #0]
 80078c4:	f7ff fb43 	bl	8006f4e <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS6_NS1_INS2_20scalar_difference_opIffEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS5_IfLi1ELi3ELi1ELi1ELi3EEES6_Li0EEEEELi0EEEEEE7derivedEv>
 80078c8:	4605      	mov	r5, r0
 80078ca:	f107 030c 	add.w	r3, r7, #12
 80078ce:	4618      	mov	r0, r3
 80078d0:	f7ff fbf7 	bl	80070c2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 80078d4:	f107 030c 	add.w	r3, r7, #12
 80078d8:	461a      	mov	r2, r3
 80078da:	4629      	mov	r1, r5
 80078dc:	4620      	mov	r0, r4
 80078de:	f000 fa47 	bl	8007d70 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKS3_KNS_7ProductIS3_NS4_INS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f7fd fef4 	bl	80056d0 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80078e8:	4603      	mov	r3, r0
    }
 80078ea:	4618      	mov	r0, r3
 80078ec:	3710      	adds	r7, #16
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bdb0      	pop	{r4, r5, r7, pc}

080078f2 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS5_INS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 80078f2:	b5b0      	push	{r4, r5, r7, lr}
 80078f4:	b084      	sub	sp, #16
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	6078      	str	r0, [r7, #4]
 80078fa:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f7fe f883 	bl	8005a08 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8007902:	4604      	mov	r4, r0
 8007904:	6838      	ldr	r0, [r7, #0]
 8007906:	f7ff fb63 	bl	8006fd0 <_ZNK5Eigen9EigenBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li0EEEE7derivedEv>
 800790a:	4605      	mov	r5, r0
 800790c:	f107 030c 	add.w	r3, r7, #12
 8007910:	4618      	mov	r0, r3
 8007912:	f7ff fbd6 	bl	80070c2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8007916:	f107 030c 	add.w	r3, r7, #12
 800791a:	461a      	mov	r2, r3
 800791c:	4629      	mov	r1, r5
 800791e:	4620      	mov	r0, r4
 8007920:	f000 fa37 	bl	8007d92 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f7fe f86f 	bl	8005a08 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800792a:	4603      	mov	r3, r0
    }
 800792c:	4618      	mov	r0, r3
 800792e:	3710      	adds	r7, #16
 8007930:	46bd      	mov	sp, r7
 8007932:	bdb0      	pop	{r4, r5, r7, pc}

08007934 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4sizeEv>:
  /** \returns the number of coefficients, which is rows()*cols().
    * \sa rows(), cols(), SizeAtCompileTime. */
  EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
  inline Index size() const EIGEN_NOEXCEPT { return rows() * cols(); }
 8007934:	b590      	push	{r4, r7, lr}
 8007936:	b083      	sub	sp, #12
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f7fd fd76 	bl	800542e <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8007942:	4604      	mov	r4, r0
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f7fd fd82 	bl	800544e <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800794a:	4603      	mov	r3, r0
 800794c:	fb04 f303 	mul.w	r3, r4, r3
 8007950:	4618      	mov	r0, r3
 8007952:	370c      	adds	r7, #12
 8007954:	46bd      	mov	sp, r7
 8007956:	bd90      	pop	{r4, r7, pc}

08007958 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8007958:	b580      	push	{r7, lr}
 800795a:	b086      	sub	sp, #24
 800795c:	af00      	add	r7, sp, #0
 800795e:	60f8      	str	r0, [r7, #12]
 8007960:	60b9      	str	r1, [r7, #8]
 8007962:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8007968:	687a      	ldr	r2, [r7, #4]
 800796a:	68b9      	ldr	r1, [r7, #8]
 800796c:	6978      	ldr	r0, [r7, #20]
 800796e:	f000 fa3c 	bl	8007dea <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_>
}
 8007972:	bf00      	nop
 8007974:	3718      	adds	r7, #24
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}

0800797a <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Lb0EE3runERKS3_S6_>:
    static void run(const Derived&, const OtherDerived&)
 800797a:	b480      	push	{r7}
 800797c:	b083      	sub	sp, #12
 800797e:	af00      	add	r7, sp, #0
 8007980:	6078      	str	r0, [r7, #4]
 8007982:	6039      	str	r1, [r7, #0]
    }
 8007984:	bf00      	nop
 8007986:	370c      	adds	r7, #12
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr

08007990 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>:
  explicit evaluator(const XprType& m)
 8007990:	b580      	push	{r7, lr}
 8007992:	b082      	sub	sp, #8
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	6039      	str	r1, [r7, #0]
    : evaluator<PlainObjectBase<XprType> >(m)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	683a      	ldr	r2, [r7, #0]
 800799e:	4611      	mov	r1, r2
 80079a0:	4618      	mov	r0, r3
 80079a2:	f000 fa5c 	bl	8007e5e <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1ERKS5_>
  { }
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	4618      	mov	r0, r3
 80079aa:	3708      	adds	r7, #8
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}

080079b0 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 80079b0:	b480      	push	{r7}
 80079b2:	b083      	sub	sp, #12
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	4618      	mov	r0, r3
 80079bc:	370c      	adds	r7, #12
 80079be:	46bd      	mov	sp, r7
 80079c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c4:	4770      	bx	lr
	...

080079c8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b086      	sub	sp, #24
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	60f8      	str	r0, [r7, #12]
 80079d0:	60b9      	str	r1, [r7, #8]
 80079d2:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	4618      	mov	r0, r3
 80079d8:	f7fd fb43 	bl	8005062 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80079dc:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	4618      	mov	r0, r3
 80079e2:	f7fd fb33 	bl	800504c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80079e6:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	4618      	mov	r0, r3
 80079ec:	f7fd fb39 	bl	8005062 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80079f0:	4602      	mov	r2, r0
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d107      	bne.n	8007a08 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	4618      	mov	r0, r3
 80079fc:	f7fd fb26 	bl	800504c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8007a00:	4602      	mov	r2, r0
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d001      	beq.n	8007a0c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x44>
 8007a08:	2301      	movs	r3, #1
 8007a0a:	e000      	b.n	8007a0e <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x46>
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d005      	beq.n	8007a1e <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x56>
    dst.resize(dstRows, dstCols);
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	693a      	ldr	r2, [r7, #16]
 8007a16:	6979      	ldr	r1, [r7, #20]
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f000 fa3b 	bl	8007e94 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	4618      	mov	r0, r3
 8007a22:	f7fd fb1e 	bl	8005062 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8007a26:	4602      	mov	r2, r0
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d107      	bne.n	8007a3e <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x76>
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	4618      	mov	r0, r3
 8007a32:	f7fd fb0b 	bl	800504c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8007a36:	4602      	mov	r2, r0
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d006      	beq.n	8007a4c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x84>
 8007a3e:	4b05      	ldr	r3, [pc, #20]	; (8007a54 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 8007a40:	4a05      	ldr	r2, [pc, #20]	; (8007a58 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8007a42:	f240 21fd 	movw	r1, #765	; 0x2fd
 8007a46:	4805      	ldr	r0, [pc, #20]	; (8007a5c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x94>)
 8007a48:	f016 fa24 	bl	801de94 <__assert_func>
}
 8007a4c:	bf00      	nop
 8007a4e:	3718      	adds	r7, #24
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}
 8007a54:	08022374 	.word	0x08022374
 8007a58:	080223a4 	.word	0x080223a4
 8007a5c:	08022488 	.word	0x08022488

08007a60 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE18const_cast_derivedEv>:
  inline Derived& const_cast_derived() const
 8007a60:	b480      	push	{r7}
 8007a62:	b083      	sub	sp, #12
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  { return *static_cast<Derived*>(const_cast<EigenBase*>(this)); }
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	370c      	adds	r7, #12
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a74:	4770      	bx	lr

08007a76 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EEC1ERS5_RKS5_RKS7_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8007a76:	b480      	push	{r7}
 8007a78:	b085      	sub	sp, #20
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	60f8      	str	r0, [r7, #12]
 8007a7e:	60b9      	str	r1, [r7, #8]
 8007a80:	607a      	str	r2, [r7, #4]
 8007a82:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	68ba      	ldr	r2, [r7, #8]
 8007a88:	601a      	str	r2, [r3, #0]
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	687a      	ldr	r2, [r7, #4]
 8007a8e:	605a      	str	r2, [r3, #4]
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	683a      	ldr	r2, [r7, #0]
 8007a94:	609a      	str	r2, [r3, #8]
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	69ba      	ldr	r2, [r7, #24]
 8007a9a:	60da      	str	r2, [r3, #12]
  }
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3714      	adds	r7, #20
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa8:	4770      	bx	lr

08007aaa <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi2EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8007aaa:	b580      	push	{r7, lr}
 8007aac:	b082      	sub	sp, #8
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 fa20 	bl	8007ef8 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi0ELi9EE3runERS9_>
  }
 8007ab8:	bf00      	nop
 8007aba:	3708      	adds	r7, #8
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}

08007ac0 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b086      	sub	sp, #24
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	60f8      	str	r0, [r7, #12]
 8007ac8:	60b9      	str	r1, [r7, #8]
 8007aca:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8007ad0:	687a      	ldr	r2, [r7, #4]
 8007ad2:	68b9      	ldr	r1, [r7, #8]
 8007ad4:	6978      	ldr	r0, [r7, #20]
 8007ad6:	f000 fa3a 	bl	8007f4e <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_>
}
 8007ada:	bf00      	nop
 8007adc:	3718      	adds	r7, #24
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
	...

08007ae4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b086      	sub	sp, #24
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	60f8      	str	r0, [r7, #12]
 8007aec:	60b9      	str	r1, [r7, #8]
 8007aee:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	4618      	mov	r0, r3
 8007af4:	f7fd fb5b 	bl	80051ae <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8007af8:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	4618      	mov	r0, r3
 8007afe:	f7fd fb4b 	bl	8005198 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8007b02:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	4618      	mov	r0, r3
 8007b08:	f7fd fb51 	bl	80051ae <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8007b0c:	4602      	mov	r2, r0
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d107      	bne.n	8007b24 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	4618      	mov	r0, r3
 8007b18:	f7fd fb3e 	bl	8005198 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8007b1c:	4602      	mov	r2, r0
 8007b1e:	693b      	ldr	r3, [r7, #16]
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d001      	beq.n	8007b28 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x44>
 8007b24:	2301      	movs	r3, #1
 8007b26:	e000      	b.n	8007b2a <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x46>
 8007b28:	2300      	movs	r3, #0
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d005      	beq.n	8007b3a <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x56>
    dst.resize(dstRows, dstCols);
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	693a      	ldr	r2, [r7, #16]
 8007b32:	6979      	ldr	r1, [r7, #20]
 8007b34:	4618      	mov	r0, r3
 8007b36:	f000 fa45 	bl	8007fc4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f7fd fb36 	bl	80051ae <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8007b42:	4602      	mov	r2, r0
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d107      	bne.n	8007b5a <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x76>
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f7fd fb23 	bl	8005198 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8007b52:	4602      	mov	r2, r0
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d006      	beq.n	8007b68 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x84>
 8007b5a:	4b05      	ldr	r3, [pc, #20]	; (8007b70 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 8007b5c:	4a05      	ldr	r2, [pc, #20]	; (8007b74 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8007b5e:	f240 21fd 	movw	r1, #765	; 0x2fd
 8007b62:	4805      	ldr	r0, [pc, #20]	; (8007b78 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x94>)
 8007b64:	f016 f996 	bl	801de94 <__assert_func>
}
 8007b68:	bf00      	nop
 8007b6a:	3718      	adds	r7, #24
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}
 8007b70:	08022374 	.word	0x08022374
 8007b74:	080224e4 	.word	0x080224e4
 8007b78:	08022488 	.word	0x08022488

08007b7c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv>:
  inline Derived& const_cast_derived() const
 8007b7c:	b480      	push	{r7}
 8007b7e:	b083      	sub	sp, #12
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
  { return *static_cast<Derived*>(const_cast<EigenBase*>(this)); }
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	4618      	mov	r0, r3
 8007b88:	370c      	adds	r7, #12
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b90:	4770      	bx	lr

08007b92 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIffEELi0EEC1ERS5_RKS5_RKS7_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8007b92:	b480      	push	{r7}
 8007b94:	b085      	sub	sp, #20
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	60f8      	str	r0, [r7, #12]
 8007b9a:	60b9      	str	r1, [r7, #8]
 8007b9c:	607a      	str	r2, [r7, #4]
 8007b9e:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	68ba      	ldr	r2, [r7, #8]
 8007ba4:	601a      	str	r2, [r3, #0]
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	687a      	ldr	r2, [r7, #4]
 8007baa:	605a      	str	r2, [r3, #4]
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	683a      	ldr	r2, [r7, #0]
 8007bb0:	609a      	str	r2, [r3, #8]
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	69ba      	ldr	r2, [r7, #24]
 8007bb6:	60da      	str	r2, [r3, #12]
  }
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3714      	adds	r7, #20
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc4:	4770      	bx	lr

08007bc6 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi2EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8007bc6:	b580      	push	{r7, lr}
 8007bc8:	b082      	sub	sp, #8
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f000 fa2a 	bl	8008028 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi0ELi3EE3runERS9_>
  }
 8007bd4:	bf00      	nop
 8007bd6:	3708      	adds	r7, #8
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EELb0EE3runERSD_RKSE_>:
    static void run(const Derived&, const OtherDerived&)
 8007bdc:	b480      	push	{r7}
 8007bde:	b083      	sub	sp, #12
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	6039      	str	r1, [r7, #0]
    }
 8007be6:	bf00      	nop
 8007be8:	370c      	adds	r7, #12
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr

08007bf2 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1ERKSE_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8007bf2:	b580      	push	{r7, lr}
 8007bf4:	b082      	sub	sp, #8
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	6078      	str	r0, [r7, #4]
 8007bfa:	6039      	str	r1, [r7, #0]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6839      	ldr	r1, [r7, #0]
 8007c00:	4618      	mov	r0, r3
 8007c02:	f000 fa20 	bl	8008046 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffEC1ERKSE_>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3708      	adds	r7, #8
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}

08007c10 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8007c10:	b480      	push	{r7}
 8007c12:	b083      	sub	sp, #12
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	370c      	adds	r7, #12
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr

08007c26 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEED1Ev>:
 8007c26:	b480      	push	{r7}
 8007c28:	b083      	sub	sp, #12
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	6078      	str	r0, [r7, #4]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	4618      	mov	r0, r3
 8007c32:	370c      	adds	r7, #12
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr

08007c3c <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b082      	sub	sp, #8
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	4618      	mov	r0, r3
 8007c48:	f7fd ffc6 	bl	8005bd8 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4rowsEv>
 8007c4c:	4603      	mov	r3, r0
    }
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3708      	adds	r7, #8
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}

08007c56 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 8007c56:	b580      	push	{r7, lr}
 8007c58:	b082      	sub	sp, #8
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	4618      	mov	r0, r3
 8007c62:	f7fd ffc6 	bl	8005bf2 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4colsEv>
 8007c66:	4603      	mov	r3, r0
    }
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3708      	adds	r7, #8
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}

08007c70 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b086      	sub	sp, #24
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	60f8      	str	r0, [r7, #12]
 8007c78:	60b9      	str	r1, [r7, #8]
 8007c7a:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8007c7c:	68b8      	ldr	r0, [r7, #8]
 8007c7e:	f7ff ffdd 	bl	8007c3c <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E4rowsEv>
 8007c82:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8007c84:	68b8      	ldr	r0, [r7, #8]
 8007c86:	f7ff ffe6 	bl	8007c56 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E4colsEv>
 8007c8a:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f7fd f9e7 	bl	8005062 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8007c94:	4602      	mov	r2, r0
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d107      	bne.n	8007cac <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f7fd f9d4 	bl	800504c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8007ca4:	4602      	mov	r2, r0
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d001      	beq.n	8007cb0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 8007cac:	2301      	movs	r3, #1
 8007cae:	e000      	b.n	8007cb2 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d005      	beq.n	8007cc2 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	693a      	ldr	r2, [r7, #16]
 8007cba:	6979      	ldr	r1, [r7, #20]
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f000 f8e9 	bl	8007e94 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	f7fd f9cc 	bl	8005062 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8007cca:	4602      	mov	r2, r0
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d107      	bne.n	8007ce2 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f7fd f9b9 	bl	800504c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8007cda:	4602      	mov	r2, r0
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d006      	beq.n	8007cf0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 8007ce2:	4b05      	ldr	r3, [pc, #20]	; (8007cf8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 8007ce4:	4a05      	ldr	r2, [pc, #20]	; (8007cfc <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 8007ce6:	f240 21fd 	movw	r1, #765	; 0x2fd
 8007cea:	4805      	ldr	r0, [pc, #20]	; (8007d00 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8007cec:	f016 f8d2 	bl	801de94 <__assert_func>
}
 8007cf0:	bf00      	nop
 8007cf2:	3718      	adds	r7, #24
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}
 8007cf8:	08022374 	.word	0x08022374
 8007cfc:	080225c8 	.word	0x080225c8
 8007d00:	08022488 	.word	0x08022488

08007d04 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EEC1ERS5_RKSH_RKSJ_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8007d04:	b480      	push	{r7}
 8007d06:	b085      	sub	sp, #20
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	60f8      	str	r0, [r7, #12]
 8007d0c:	60b9      	str	r1, [r7, #8]
 8007d0e:	607a      	str	r2, [r7, #4]
 8007d10:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	68ba      	ldr	r2, [r7, #8]
 8007d16:	601a      	str	r2, [r3, #0]
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	687a      	ldr	r2, [r7, #4]
 8007d1c:	605a      	str	r2, [r3, #4]
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	683a      	ldr	r2, [r7, #0]
 8007d22:	609a      	str	r2, [r3, #8]
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	69ba      	ldr	r2, [r7, #24]
 8007d28:	60da      	str	r2, [r3, #12]
  }
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3714      	adds	r7, #20
 8007d30:	46bd      	mov	sp, r7
 8007d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d36:	4770      	bx	lr

08007d38 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b082      	sub	sp, #8
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f000 f992 	bl	800806a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSL_>
  }
 8007d46:	bf00      	nop
 8007d48:	3708      	adds	r7, #8
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}

08007d4e <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8007d4e:	b580      	push	{r7, lr}
 8007d50:	b086      	sub	sp, #24
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	60f8      	str	r0, [r7, #12]
 8007d56:	60b9      	str	r1, [r7, #8]
 8007d58:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8007d5e:	687a      	ldr	r2, [r7, #4]
 8007d60:	68b9      	ldr	r1, [r7, #8]
 8007d62:	6978      	ldr	r0, [r7, #20]
 8007d64:	f000 f9ac 	bl	80080c0 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_>
}
 8007d68:	bf00      	nop
 8007d6a:	3718      	adds	r7, #24
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKS3_KNS_7ProductIS3_NS4_INS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b086      	sub	sp, #24
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	60f8      	str	r0, [r7, #12]
 8007d78:	60b9      	str	r1, [r7, #8]
 8007d7a:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8007d80:	687a      	ldr	r2, [r7, #4]
 8007d82:	68b9      	ldr	r1, [r7, #8]
 8007d84:	6978      	ldr	r0, [r7, #20]
 8007d86:	f000 f9d5 	bl	8008134 <_ZN5Eigen8internal30assignment_from_xpr_op_productINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_9assign_opIffEENS0_13add_assign_opIffEEE3runINS5_INS0_13scalar_sum_opIffEEKS3_KSE_EESG_EEvRS3_RKT_RKT0_>
}
 8007d8a:	bf00      	nop
 8007d8c:	3718      	adds	r7, #24
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}

08007d92 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8007d92:	b580      	push	{r7, lr}
 8007d94:	b086      	sub	sp, #24
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	60f8      	str	r0, [r7, #12]
 8007d9a:	60b9      	str	r1, [r7, #8]
 8007d9c:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8007da2:	687a      	ldr	r2, [r7, #4]
 8007da4:	68b9      	ldr	r1, [r7, #8]
 8007da6:	6978      	ldr	r0, [r7, #20]
 8007da8:	f000 fa09 	bl	80081be <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>
}
 8007dac:	bf00      	nop
 8007dae:	3718      	adds	r7, #24
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE4rowsEv>:
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b082      	sub	sp, #8
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f000 fa37 	bl	8008232 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4rowsEv>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3708      	adds	r7, #8
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}

08007dce <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8007dce:	b580      	push	{r7, lr}
 8007dd0:	b082      	sub	sp, #8
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	6078      	str	r0, [r7, #4]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	3310      	adds	r3, #16
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f000 fa37 	bl	800824e <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8007de0:	4603      	mov	r3, r0
 8007de2:	4618      	mov	r0, r3
 8007de4:	3708      	adds	r7, #8
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}

08007dea <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_>:
struct Assignment<DstXprType, Product<Lhs,Rhs,Options>, internal::assign_op<Scalar,Scalar>, Dense2Dense,
  typename enable_if<(Options==DefaultProduct || Options==AliasFreeProduct)>::type>
{
  typedef Product<Lhs,Rhs,Options> SrcXprType;
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<Scalar,Scalar> &)
 8007dea:	b590      	push	{r4, r7, lr}
 8007dec:	b087      	sub	sp, #28
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	60f8      	str	r0, [r7, #12]
 8007df2:	60b9      	str	r1, [r7, #8]
 8007df4:	607a      	str	r2, [r7, #4]
  {
    Index dstRows = src.rows();
 8007df6:	68b8      	ldr	r0, [r7, #8]
 8007df8:	f7ff ffdc 	bl	8007db4 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE4rowsEv>
 8007dfc:	6178      	str	r0, [r7, #20]
    Index dstCols = src.cols();
 8007dfe:	68b8      	ldr	r0, [r7, #8]
 8007e00:	f7ff ffe5 	bl	8007dce <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE4colsEv>
 8007e04:	6138      	str	r0, [r7, #16]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f7fd f92a 	bl	8005062 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8007e0e:	4602      	mov	r2, r0
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d107      	bne.n	8007e26 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x3c>
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f7fd f917 	bl	800504c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8007e1e:	4602      	mov	r2, r0
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d001      	beq.n	8007e2a <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x40>
 8007e26:	2301      	movs	r3, #1
 8007e28:	e000      	b.n	8007e2c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x42>
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d005      	beq.n	8007e3c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x52>
      dst.resize(dstRows, dstCols);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	693a      	ldr	r2, [r7, #16]
 8007e34:	6979      	ldr	r1, [r7, #20]
 8007e36:	4618      	mov	r0, r3
 8007e38:	f000 f82c 	bl	8007e94 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
    // FIXME shall we handle nested_eval here?
    generic_product_impl<Lhs, Rhs>::evalTo(dst, src.lhs(), src.rhs());
 8007e3c:	68b8      	ldr	r0, [r7, #8]
 8007e3e:	f000 fa14 	bl	800826a <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE3lhsEv>
 8007e42:	4604      	mov	r4, r0
 8007e44:	68b8      	ldr	r0, [r7, #8]
 8007e46:	f000 fa1b 	bl	8008280 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE3rhsEv>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	461a      	mov	r2, r3
 8007e4e:	4621      	mov	r1, r4
 8007e50:	68f8      	ldr	r0, [r7, #12]
 8007e52:	f000 fa21 	bl	8008298 <_ZN5Eigen8internal20generic_product_implINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EENS_10DenseShapeESG_Li3EE6evalToINS5_IfLi3ELi3ELi0ELi3ELi3EEEEEvRT_RKSD_RKSF_>
  }
 8007e56:	bf00      	nop
 8007e58:	371c      	adds	r7, #28
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd90      	pop	{r4, r7, pc}

08007e5e <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1ERKS5_>:
  explicit evaluator(const PlainObjectType& m)
 8007e5e:	b5b0      	push	{r4, r5, r7, lr}
 8007e60:	b082      	sub	sp, #8
 8007e62:	af00      	add	r7, sp, #0
 8007e64:	6078      	str	r0, [r7, #4]
 8007e66:	6039      	str	r1, [r7, #0]
    : m_d(m.data(),IsVectorAtCompileTime ? 0 : m.outerStride())
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f000 fa50 	bl	800830e <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
 8007e6e:	687c      	ldr	r4, [r7, #4]
 8007e70:	6838      	ldr	r0, [r7, #0]
 8007e72:	f000 fa2f 	bl	80082d4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4dataEv>
 8007e76:	4605      	mov	r5, r0
 8007e78:	6838      	ldr	r0, [r7, #0]
 8007e7a:	f000 fa38 	bl	80082ee <_ZNK5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3EE11outerStrideEv>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	461a      	mov	r2, r3
 8007e82:	4629      	mov	r1, r5
 8007e84:	4620      	mov	r0, r4
 8007e86:	f000 fa4d 	bl	8008324 <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EEC1EPKfi>
  }
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3708      	adds	r7, #8
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bdb0      	pop	{r4, r5, r7, pc}

08007e94 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>:
    EIGEN_STRONG_INLINE void resize(Index rows, Index cols)
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b086      	sub	sp, #24
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	60f8      	str	r0, [r7, #12]
 8007e9c:	60b9      	str	r1, [r7, #8]
 8007e9e:	607a      	str	r2, [r7, #4]
      eigen_assert(   EIGEN_IMPLIES(RowsAtCompileTime!=Dynamic,rows==RowsAtCompileTime)
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	2b03      	cmp	r3, #3
 8007ea4:	d108      	bne.n	8007eb8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x24>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2b03      	cmp	r3, #3
 8007eaa:	d105      	bne.n	8007eb8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x24>
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	db02      	blt.n	8007eb8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x24>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	da06      	bge.n	8007ec6 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x32>
 8007eb8:	4b0c      	ldr	r3, [pc, #48]	; (8007eec <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x58>)
 8007eba:	4a0d      	ldr	r2, [pc, #52]	; (8007ef0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x5c>)
 8007ebc:	f240 1111 	movw	r1, #273	; 0x111
 8007ec0:	480c      	ldr	r0, [pc, #48]	; (8007ef4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x60>)
 8007ec2:	f015 ffe7 	bl	801de94 <__assert_func>
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	617b      	str	r3, [r7, #20]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	613b      	str	r3, [r7, #16]
  }
 8007ece:	bf00      	nop
        m_storage.resize(rows*cols, rows, cols);
 8007ed0:	68f8      	ldr	r0, [r7, #12]
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	687a      	ldr	r2, [r7, #4]
 8007ed6:	fb02 f103 	mul.w	r1, r2, r3
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	68ba      	ldr	r2, [r7, #8]
 8007ede:	f000 fa33 	bl	8008348 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE6resizeEiii>
    }
 8007ee2:	bf00      	nop
 8007ee4:	3718      	adds	r7, #24
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}
 8007eea:	bf00      	nop
 8007eec:	0802278c 	.word	0x0802278c
 8007ef0:	0802291c 	.word	0x0802291c
 8007ef4:	080229a8 	.word	0x080229a8

08007ef8 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi0ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b082      	sub	sp, #8
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8007f00:	2100      	movs	r1, #0
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 fa2d 	bl	8008362 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f000 fa48 	bl	800839e <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi9EE3runERS9_>
  }
 8007f0e:	bf00      	nop
 8007f10:	3708      	adds	r7, #8
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}

08007f16 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8007f16:	b580      	push	{r7, lr}
 8007f18:	b082      	sub	sp, #8
 8007f1a:	af00      	add	r7, sp, #0
 8007f1c:	6078      	str	r0, [r7, #4]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4618      	mov	r0, r3
 8007f24:	f7fd f89d 	bl	8005062 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3708      	adds	r7, #8
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}

08007f32 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8007f32:	b580      	push	{r7, lr}
 8007f34:	b082      	sub	sp, #8
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	6078      	str	r0, [r7, #4]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	685b      	ldr	r3, [r3, #4]
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f7fd f92a 	bl	8005198 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8007f44:	4603      	mov	r3, r0
 8007f46:	4618      	mov	r0, r3
 8007f48:	3708      	adds	r7, #8
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}

08007f4e <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<Scalar,Scalar> &)
 8007f4e:	b590      	push	{r4, r7, lr}
 8007f50:	b087      	sub	sp, #28
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	60f8      	str	r0, [r7, #12]
 8007f56:	60b9      	str	r1, [r7, #8]
 8007f58:	607a      	str	r2, [r7, #4]
    Index dstRows = src.rows();
 8007f5a:	68b8      	ldr	r0, [r7, #8]
 8007f5c:	f7ff ffdb 	bl	8007f16 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4rowsEv>
 8007f60:	6178      	str	r0, [r7, #20]
    Index dstCols = src.cols();
 8007f62:	68b8      	ldr	r0, [r7, #8]
 8007f64:	f7ff ffe5 	bl	8007f32 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4colsEv>
 8007f68:	6138      	str	r0, [r7, #16]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f7fd f91e 	bl	80051ae <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8007f72:	4602      	mov	r2, r0
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d107      	bne.n	8007f8a <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_+0x3c>
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f7fd f90b 	bl	8005198 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8007f82:	4602      	mov	r2, r0
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d001      	beq.n	8007f8e <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_+0x40>
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	e000      	b.n	8007f90 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_+0x42>
 8007f8e:	2300      	movs	r3, #0
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d005      	beq.n	8007fa0 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_+0x52>
      dst.resize(dstRows, dstCols);
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	693a      	ldr	r2, [r7, #16]
 8007f98:	6979      	ldr	r1, [r7, #20]
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f000 f812 	bl	8007fc4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
    generic_product_impl<Lhs, Rhs>::evalTo(dst, src.lhs(), src.rhs());
 8007fa0:	68b8      	ldr	r0, [r7, #8]
 8007fa2:	f000 fa0b 	bl	80083bc <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3lhsEv>
 8007fa6:	4604      	mov	r4, r0
 8007fa8:	68b8      	ldr	r0, [r7, #8]
 8007faa:	f000 fa13 	bl	80083d4 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3rhsEv>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	461a      	mov	r2, r3
 8007fb2:	4621      	mov	r1, r4
 8007fb4:	68f8      	ldr	r0, [r7, #12]
 8007fb6:	f000 fa19 	bl	80083ec <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEENS_10DenseShapeES5_Li3EE6evalToIS4_EEvRT_RKS3_RKS4_>
  }
 8007fba:	bf00      	nop
 8007fbc:	371c      	adds	r7, #28
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd90      	pop	{r4, r7, pc}
	...

08007fc4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>:
    EIGEN_STRONG_INLINE void resize(Index rows, Index cols)
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b086      	sub	sp, #24
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	60f8      	str	r0, [r7, #12]
 8007fcc:	60b9      	str	r1, [r7, #8]
 8007fce:	607a      	str	r2, [r7, #4]
      eigen_assert(   EIGEN_IMPLIES(RowsAtCompileTime!=Dynamic,rows==RowsAtCompileTime)
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	2b03      	cmp	r3, #3
 8007fd4:	d108      	bne.n	8007fe8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x24>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	d105      	bne.n	8007fe8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x24>
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	db02      	blt.n	8007fe8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x24>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	da06      	bge.n	8007ff6 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x32>
 8007fe8:	4b0c      	ldr	r3, [pc, #48]	; (800801c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x58>)
 8007fea:	4a0d      	ldr	r2, [pc, #52]	; (8008020 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x5c>)
 8007fec:	f240 1111 	movw	r1, #273	; 0x111
 8007ff0:	480c      	ldr	r0, [pc, #48]	; (8008024 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x60>)
 8007ff2:	f015 ff4f 	bl	801de94 <__assert_func>
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	617b      	str	r3, [r7, #20]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	613b      	str	r3, [r7, #16]
  }
 8007ffe:	bf00      	nop
        m_storage.resize(rows*cols, rows, cols);
 8008000:	68f8      	ldr	r0, [r7, #12]
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	687a      	ldr	r2, [r7, #4]
 8008006:	fb02 f103 	mul.w	r1, r2, r3
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	68ba      	ldr	r2, [r7, #8]
 800800e:	f000 fa0b 	bl	8008428 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE6resizeEiii>
    }
 8008012:	bf00      	nop
 8008014:	3718      	adds	r7, #24
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}
 800801a:	bf00      	nop
 800801c:	0802278c 	.word	0x0802278c
 8008020:	08022a04 	.word	0x08022a04
 8008024:	080229a8 	.word	0x080229a8

08008028 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi0ELi3EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8008028:	b580      	push	{r7, lr}
 800802a:	b082      	sub	sp, #8
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8008030:	2100      	movs	r1, #0
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f000 fa05 	bl	8008442 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f000 fa20 	bl	800847e <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi3EE3runERS9_>
  }
 800803e:	bf00      	nop
 8008040:	3708      	adds	r7, #8
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}

08008046 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffEC1ERKSE_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 8008046:	b580      	push	{r7, lr}
 8008048:	b082      	sub	sp, #8
 800804a:	af00      	add	r7, sp, #0
 800804c:	6078      	str	r0, [r7, #4]
 800804e:	6039      	str	r1, [r7, #0]
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f000 fa23 	bl	800849c <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1Ev>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6839      	ldr	r1, [r7, #0]
 800805a:	4618      	mov	r0, r3
 800805c:	f000 fa29 	bl	80084b2 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE4DataC1ERKSE_>
  }
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	4618      	mov	r0, r3
 8008064:	3708      	adds	r7, #8
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}

0800806a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800806a:	b580      	push	{r7, lr}
 800806c:	b082      	sub	sp, #8
 800806e:	af00      	add	r7, sp, #0
 8008070:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8008072:	2200      	movs	r2, #0
 8008074:	2100      	movs	r1, #0
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f000 fa43 	bl	8008502 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f000 fa59 	bl	8008534 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSL_>
  }
 8008082:	bf00      	nop
 8008084:	3708      	adds	r7, #8
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}

0800808a <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 800808a:	b580      	push	{r7, lr}
 800808c:	b082      	sub	sp, #8
 800808e:	af00      	add	r7, sp, #0
 8008090:	6078      	str	r0, [r7, #4]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	4618      	mov	r0, r3
 8008096:	f000 fa5d 	bl	8008554 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4rowsEv>
 800809a:	4603      	mov	r3, r0
 800809c:	4618      	mov	r0, r3
 800809e:	3708      	adds	r7, #8
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b082      	sub	sp, #8
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	3308      	adds	r3, #8
 80080b0:	4618      	mov	r0, r3
 80080b2:	f000 fa5d 	bl	8008570 <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4colsEv>
 80080b6:	4603      	mov	r3, r0
 80080b8:	4618      	mov	r0, r3
 80080ba:	3708      	adds	r7, #8
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}

080080c0 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<Scalar,Scalar> &)
 80080c0:	b590      	push	{r4, r7, lr}
 80080c2:	b087      	sub	sp, #28
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	60f8      	str	r0, [r7, #12]
 80080c8:	60b9      	str	r1, [r7, #8]
 80080ca:	607a      	str	r2, [r7, #4]
    Index dstRows = src.rows();
 80080cc:	68b8      	ldr	r0, [r7, #8]
 80080ce:	f7ff ffdc 	bl	800808a <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE4rowsEv>
 80080d2:	6178      	str	r0, [r7, #20]
    Index dstCols = src.cols();
 80080d4:	68b8      	ldr	r0, [r7, #8]
 80080d6:	f7ff ffe5 	bl	80080a4 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE4colsEv>
 80080da:	6138      	str	r0, [r7, #16]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	4618      	mov	r0, r3
 80080e0:	f7fd f865 	bl	80051ae <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80080e4:	4602      	mov	r2, r0
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d107      	bne.n	80080fc <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_+0x3c>
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	4618      	mov	r0, r3
 80080f0:	f7fd f852 	bl	8005198 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80080f4:	4602      	mov	r2, r0
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d001      	beq.n	8008100 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_+0x40>
 80080fc:	2301      	movs	r3, #1
 80080fe:	e000      	b.n	8008102 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_+0x42>
 8008100:	2300      	movs	r3, #0
 8008102:	2b00      	cmp	r3, #0
 8008104:	d005      	beq.n	8008112 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_+0x52>
      dst.resize(dstRows, dstCols);
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	693a      	ldr	r2, [r7, #16]
 800810a:	6979      	ldr	r1, [r7, #20]
 800810c:	4618      	mov	r0, r3
 800810e:	f7ff ff59 	bl	8007fc4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
    generic_product_impl<Lhs, Rhs>::evalTo(dst, src.lhs(), src.rhs());
 8008112:	68b8      	ldr	r0, [r7, #8]
 8008114:	f000 fa39 	bl	800858a <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE3lhsEv>
 8008118:	4604      	mov	r4, r0
 800811a:	68b8      	ldr	r0, [r7, #8]
 800811c:	f000 fa40 	bl	80085a0 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE3rhsEv>
 8008120:	4603      	mov	r3, r0
 8008122:	461a      	mov	r2, r3
 8008124:	4621      	mov	r1, r4
 8008126:	68f8      	ldr	r0, [r7, #12]
 8008128:	f000 fa46 	bl	80085b8 <_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEENS_10DenseShapeESK_Li3EE6evalToINS3_IfLi3ELi1ELi0ELi3ELi1EEEEEvRT_RKS8_RKSJ_>
  }
 800812c:	bf00      	nop
 800812e:	371c      	adds	r7, #28
 8008130:	46bd      	mov	sp, r7
 8008132:	bd90      	pop	{r4, r7, pc}

08008134 <_ZN5Eigen8internal30assignment_from_xpr_op_productINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_9assign_opIffEENS0_13add_assign_opIffEEE3runINS5_INS0_13scalar_sum_opIffEEKS3_KSE_EESG_EEvRS3_RKT_RKT0_>:
template<typename DstXprType, typename OtherXpr, typename ProductType, typename Func1, typename Func2>
struct assignment_from_xpr_op_product
{
  template<typename SrcXprType, typename InitialFunc>
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  void run(DstXprType &dst, const SrcXprType &src, const InitialFunc& /*func*/)
 8008134:	b590      	push	{r4, r7, lr}
 8008136:	b087      	sub	sp, #28
 8008138:	af00      	add	r7, sp, #0
 800813a:	60f8      	str	r0, [r7, #12]
 800813c:	60b9      	str	r1, [r7, #8]
 800813e:	607a      	str	r2, [r7, #4]
  {
    call_assignment_no_alias(dst, src.lhs(), Func1());
 8008140:	68b8      	ldr	r0, [r7, #8]
 8008142:	f000 fa57 	bl	80085f4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEE3lhsEv>
 8008146:	4604      	mov	r4, r0
 8008148:	f107 0310 	add.w	r3, r7, #16
 800814c:	4618      	mov	r0, r3
 800814e:	f7fe ffb8 	bl	80070c2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8008152:	f107 0310 	add.w	r3, r7, #16
 8008156:	461a      	mov	r2, r3
 8008158:	4621      	mov	r1, r4
 800815a:	68f8      	ldr	r0, [r7, #12]
 800815c:	f7ff f8be 	bl	80072dc <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
    call_assignment_no_alias(dst, src.rhs(), Func2());
 8008160:	68b8      	ldr	r0, [r7, #8]
 8008162:	f000 fa53 	bl	800860c <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEE3rhsEv>
 8008166:	4604      	mov	r4, r0
 8008168:	f107 0314 	add.w	r3, r7, #20
 800816c:	4618      	mov	r0, r3
 800816e:	f000 fa59 	bl	8008624 <_ZN5Eigen8internal13add_assign_opIffEC1Ev>
 8008172:	f107 0314 	add.w	r3, r7, #20
 8008176:	461a      	mov	r2, r3
 8008178:	4621      	mov	r1, r4
 800817a:	68f8      	ldr	r0, [r7, #12]
 800817c:	f000 fa5d 	bl	800863a <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8008180:	bf00      	nop
 8008182:	371c      	adds	r7, #28
 8008184:	46bd      	mov	sp, r7
 8008186:	bd90      	pop	{r4, r7, pc}

08008188 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8008188:	b580      	push	{r7, lr}
 800818a:	b082      	sub	sp, #8
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	4618      	mov	r0, r3
 8008194:	f000 fa62 	bl	800865c <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE4rowsEv>
 8008198:	4603      	mov	r3, r0
 800819a:	4618      	mov	r0, r3
 800819c:	3708      	adds	r7, #8
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}

080081a2 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 80081a2:	b580      	push	{r7, lr}
 80081a4:	b082      	sub	sp, #8
 80081a6:	af00      	add	r7, sp, #0
 80081a8:	6078      	str	r0, [r7, #4]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	691b      	ldr	r3, [r3, #16]
 80081ae:	4618      	mov	r0, r3
 80081b0:	f7fc ff4c 	bl	800504c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80081b4:	4603      	mov	r3, r0
 80081b6:	4618      	mov	r0, r3
 80081b8:	3708      	adds	r7, #8
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}

080081be <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<Scalar,Scalar> &)
 80081be:	b590      	push	{r4, r7, lr}
 80081c0:	b087      	sub	sp, #28
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	60f8      	str	r0, [r7, #12]
 80081c6:	60b9      	str	r1, [r7, #8]
 80081c8:	607a      	str	r2, [r7, #4]
    Index dstRows = src.rows();
 80081ca:	68b8      	ldr	r0, [r7, #8]
 80081cc:	f7ff ffdc 	bl	8008188 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE4rowsEv>
 80081d0:	6178      	str	r0, [r7, #20]
    Index dstCols = src.cols();
 80081d2:	68b8      	ldr	r0, [r7, #8]
 80081d4:	f7ff ffe5 	bl	80081a2 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE4colsEv>
 80081d8:	6138      	str	r0, [r7, #16]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	4618      	mov	r0, r3
 80081de:	f7fc ff40 	bl	8005062 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80081e2:	4602      	mov	r2, r0
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d107      	bne.n	80081fa <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x3c>
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	4618      	mov	r0, r3
 80081ee:	f7fc ff2d 	bl	800504c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80081f2:	4602      	mov	r2, r0
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d001      	beq.n	80081fe <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x40>
 80081fa:	2301      	movs	r3, #1
 80081fc:	e000      	b.n	8008200 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x42>
 80081fe:	2300      	movs	r3, #0
 8008200:	2b00      	cmp	r3, #0
 8008202:	d005      	beq.n	8008210 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x52>
      dst.resize(dstRows, dstCols);
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	693a      	ldr	r2, [r7, #16]
 8008208:	6979      	ldr	r1, [r7, #20]
 800820a:	4618      	mov	r0, r3
 800820c:	f7ff fe42 	bl	8007e94 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
    generic_product_impl<Lhs, Rhs>::evalTo(dst, src.lhs(), src.rhs());
 8008210:	68b8      	ldr	r0, [r7, #8]
 8008212:	f000 fa31 	bl	8008678 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE3lhsEv>
 8008216:	4604      	mov	r4, r0
 8008218:	68b8      	ldr	r0, [r7, #8]
 800821a:	f000 fa38 	bl	800868e <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE3rhsEv>
 800821e:	4603      	mov	r3, r0
 8008220:	461a      	mov	r2, r3
 8008222:	4621      	mov	r1, r4
 8008224:	68f8      	ldr	r0, [r7, #12]
 8008226:	f000 fa3e 	bl	80086a6 <_ZN5Eigen8internal20generic_product_implINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_NS_10DenseShapeESE_Li3EE6evalToIS6_EEvRT_RKSD_RS7_>
  }
 800822a:	bf00      	nop
 800822c:	371c      	adds	r7, #28
 800822e:	46bd      	mov	sp, r7
 8008230:	bd90      	pop	{r4, r7, pc}

08008232 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 8008232:	b580      	push	{r7, lr}
 8008234:	b082      	sub	sp, #8
 8008236:	af00      	add	r7, sp, #0
 8008238:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4618      	mov	r0, r3
 8008240:	f7fc ffb5 	bl	80051ae <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8008244:	4603      	mov	r3, r0
    }
 8008246:	4618      	mov	r0, r3
 8008248:	3708      	adds	r7, #8
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}

0800824e <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 800824e:	b580      	push	{r7, lr}
 8008250:	b082      	sub	sp, #8
 8008252:	af00      	add	r7, sp, #0
 8008254:	6078      	str	r0, [r7, #4]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4618      	mov	r0, r3
 800825c:	f7fc ffa7 	bl	80051ae <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8008260:	4603      	mov	r3, r0
 8008262:	4618      	mov	r0, r3
 8008264:	3708      	adds	r7, #8
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}

0800826a <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800826a:	b480      	push	{r7}
 800826c:	b083      	sub	sp, #12
 800826e:	af00      	add	r7, sp, #0
 8008270:	6078      	str	r0, [r7, #4]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	4618      	mov	r0, r3
 8008276:	370c      	adds	r7, #12
 8008278:	46bd      	mov	sp, r7
 800827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827e:	4770      	bx	lr

08008280 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8008280:	b480      	push	{r7}
 8008282:	b083      	sub	sp, #12
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	3310      	adds	r3, #16
 800828c:	4618      	mov	r0, r3
 800828e:	370c      	adds	r7, #12
 8008290:	46bd      	mov	sp, r7
 8008292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008296:	4770      	bx	lr

08008298 <_ZN5Eigen8internal20generic_product_implINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EENS_10DenseShapeESG_Li3EE6evalToINS5_IfLi3ELi3ELi0ELi3ELi3EEEEEvRT_RKSD_RKSF_>:
struct generic_product_impl<Lhs,Rhs,DenseShape,DenseShape,CoeffBasedProductMode>
{
  typedef typename Product<Lhs,Rhs>::Scalar Scalar;

  template<typename Dst>
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 8008298:	b580      	push	{r7, lr}
 800829a:	b08a      	sub	sp, #40	; 0x28
 800829c:	af00      	add	r7, sp, #0
 800829e:	60f8      	str	r0, [r7, #12]
 80082a0:	60b9      	str	r1, [r7, #8]
 80082a2:	607a      	str	r2, [r7, #4]
  {
    // Same as: dst.noalias() = lhs.lazyProduct(rhs);
    // but easier on the compiler side
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 80082a4:	f107 0310 	add.w	r3, r7, #16
 80082a8:	687a      	ldr	r2, [r7, #4]
 80082aa:	68b9      	ldr	r1, [r7, #8]
 80082ac:	4618      	mov	r0, r3
 80082ae:	f000 fa18 	bl	80086e2 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE11lazyProductINS_9TransposeIS6_EEEEKNS_7ProductISD_T_Li1EEERKNS0_ISJ_EE>
 80082b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80082b6:	4618      	mov	r0, r3
 80082b8:	f7fe ff03 	bl	80070c2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 80082bc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80082c0:	f107 0310 	add.w	r3, r7, #16
 80082c4:	4619      	mov	r1, r3
 80082c6:	68f8      	ldr	r0, [r7, #12]
 80082c8:	f000 fa22 	bl	8008710 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 80082cc:	bf00      	nop
 80082ce:	3728      	adds	r7, #40	; 0x28
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}

080082d4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4dataEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar *data() const
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b082      	sub	sp, #8
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
    { return m_storage.data(); }
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	4618      	mov	r0, r3
 80082e0:	f000 fa27 	bl	8008732 <_ZNK5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4dataEv>
 80082e4:	4603      	mov	r3, r0
 80082e6:	4618      	mov	r0, r3
 80082e8:	3708      	adds	r7, #8
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}

080082ee <_ZNK5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3EE11outerStrideEv>:
      *          in a column-major matrix).
      *
      * \sa innerStride(), rowStride(), colStride()
      */
    EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
    inline Index outerStride() const EIGEN_NOEXCEPT
 80082ee:	b580      	push	{r7, lr}
 80082f0:	b082      	sub	sp, #8
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	6078      	str	r0, [r7, #4]
    {
      return derived().outerStride();
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f7fd fabd 	bl	8005876 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 80082fc:	4603      	mov	r3, r0
 80082fe:	4618      	mov	r0, r3
 8008300:	f000 fa22 	bl	8008748 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>
 8008304:	4603      	mov	r3, r0
    }
 8008306:	4618      	mov	r0, r3
 8008308:	3708      	adds	r7, #8
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}

0800830e <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800830e:	b480      	push	{r7}
 8008310:	b083      	sub	sp, #12
 8008312:	af00      	add	r7, sp, #0
 8008314:	6078      	str	r0, [r7, #4]
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	4618      	mov	r0, r3
 800831a:	370c      	adds	r7, #12
 800831c:	46bd      	mov	sp, r7
 800831e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008322:	4770      	bx	lr

08008324 <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EEC1EPKfi>:
  plainobjectbase_evaluator_data(const Scalar* ptr, Index outerStride) : data(ptr)
 8008324:	b580      	push	{r7, lr}
 8008326:	b084      	sub	sp, #16
 8008328:	af00      	add	r7, sp, #0
 800832a:	60f8      	str	r0, [r7, #12]
 800832c:	60b9      	str	r1, [r7, #8]
 800832e:	607a      	str	r2, [r7, #4]
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	68ba      	ldr	r2, [r7, #8]
 8008334:	601a      	str	r2, [r3, #0]
    EIGEN_UNUSED_VARIABLE(outerStride);
 8008336:	1d3b      	adds	r3, r7, #4
 8008338:	4618      	mov	r0, r3
 800833a:	f7fb ffbc 	bl	80042b6 <_ZN5Eigen8internal22ignore_unused_variableIiEEvRKT_>
  }
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	4618      	mov	r0, r3
 8008342:	3710      	adds	r7, #16
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}

08008348 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE6resizeEiii>:
    EIGEN_DEVICE_FUNC void resize(Index,Index,Index) {}
 8008348:	b480      	push	{r7}
 800834a:	b085      	sub	sp, #20
 800834c:	af00      	add	r7, sp, #0
 800834e:	60f8      	str	r0, [r7, #12]
 8008350:	60b9      	str	r1, [r7, #8]
 8008352:	607a      	str	r2, [r7, #4]
 8008354:	603b      	str	r3, [r7, #0]
 8008356:	bf00      	nop
 8008358:	3714      	adds	r7, #20
 800835a:	46bd      	mov	sp, r7
 800835c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008360:	4770      	bx	lr

08008362 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 8008362:	b5b0      	push	{r4, r5, r7, lr}
 8008364:	b082      	sub	sp, #8
 8008366:	af00      	add	r7, sp, #0
 8008368:	6078      	str	r0, [r7, #4]
 800836a:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	689c      	ldr	r4, [r3, #8]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	6839      	ldr	r1, [r7, #0]
 8008376:	4618      	mov	r0, r3
 8008378:	f000 f9f2 	bl	8008760 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEi>
 800837c:	4605      	mov	r5, r0
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	6839      	ldr	r1, [r7, #0]
 8008384:	4618      	mov	r0, r3
 8008386:	f000 f9fb 	bl	8008780 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE5coeffEi>
 800838a:	4603      	mov	r3, r0
 800838c:	461a      	mov	r2, r3
 800838e:	4629      	mov	r1, r5
 8008390:	4620      	mov	r0, r4
 8008392:	f000 fa05 	bl	80087a0 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 8008396:	bf00      	nop
 8008398:	3708      	adds	r7, #8
 800839a:	46bd      	mov	sp, r7
 800839c:	bdb0      	pop	{r4, r5, r7, pc}

0800839e <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800839e:	b580      	push	{r7, lr}
 80083a0:	b082      	sub	sp, #8
 80083a2:	af00      	add	r7, sp, #0
 80083a4:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 80083a6:	2101      	movs	r1, #1
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f7ff ffda 	bl	8008362 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 fa06 	bl	80087c0 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi2ELi9EE3runERS9_>
  }
 80083b4:	bf00      	nop
 80083b6:	3708      	adds	r7, #8
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}

080083bc <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 80083bc:	b480      	push	{r7}
 80083be:	b083      	sub	sp, #12
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4618      	mov	r0, r3
 80083ca:	370c      	adds	r7, #12
 80083cc:	46bd      	mov	sp, r7
 80083ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d2:	4770      	bx	lr

080083d4 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 80083d4:	b480      	push	{r7}
 80083d6:	b083      	sub	sp, #12
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	4618      	mov	r0, r3
 80083e2:	370c      	adds	r7, #12
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr

080083ec <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEENS_10DenseShapeES5_Li3EE6evalToIS4_EEvRT_RKS3_RKS4_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b088      	sub	sp, #32
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	60f8      	str	r0, [r7, #12]
 80083f4:	60b9      	str	r1, [r7, #8]
 80083f6:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 80083f8:	f107 0314 	add.w	r3, r7, #20
 80083fc:	687a      	ldr	r2, [r7, #4]
 80083fe:	68b9      	ldr	r1, [r7, #8]
 8008400:	4618      	mov	r0, r3
 8008402:	f000 f9ec 	bl	80087de <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE11lazyProductINS1_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS7_EE>
 8008406:	f107 031c 	add.w	r3, r7, #28
 800840a:	4618      	mov	r0, r3
 800840c:	f7fe fe59 	bl	80070c2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8008410:	f107 021c 	add.w	r2, r7, #28
 8008414:	f107 0314 	add.w	r3, r7, #20
 8008418:	4619      	mov	r1, r3
 800841a:	68f8      	ldr	r0, [r7, #12]
 800841c:	f000 f9f6 	bl	800880c <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8008420:	bf00      	nop
 8008422:	3720      	adds	r7, #32
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}

08008428 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE6resizeEiii>:
 8008428:	b480      	push	{r7}
 800842a:	b085      	sub	sp, #20
 800842c:	af00      	add	r7, sp, #0
 800842e:	60f8      	str	r0, [r7, #12]
 8008430:	60b9      	str	r1, [r7, #8]
 8008432:	607a      	str	r2, [r7, #4]
 8008434:	603b      	str	r3, [r7, #0]
 8008436:	bf00      	nop
 8008438:	3714      	adds	r7, #20
 800843a:	46bd      	mov	sp, r7
 800843c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008440:	4770      	bx	lr

08008442 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 8008442:	b5b0      	push	{r4, r5, r7, lr}
 8008444:	b082      	sub	sp, #8
 8008446:	af00      	add	r7, sp, #0
 8008448:	6078      	str	r0, [r7, #4]
 800844a:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	689c      	ldr	r4, [r3, #8]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	6839      	ldr	r1, [r7, #0]
 8008456:	4618      	mov	r0, r3
 8008458:	f000 f9e9 	bl	800882e <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi>
 800845c:	4605      	mov	r5, r0
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	6839      	ldr	r1, [r7, #0]
 8008464:	4618      	mov	r0, r3
 8008466:	f000 f9f2 	bl	800884e <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffEi>
 800846a:	4603      	mov	r3, r0
 800846c:	461a      	mov	r2, r3
 800846e:	4629      	mov	r1, r5
 8008470:	4620      	mov	r0, r4
 8008472:	f000 f995 	bl	80087a0 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 8008476:	bf00      	nop
 8008478:	3708      	adds	r7, #8
 800847a:	46bd      	mov	sp, r7
 800847c:	bdb0      	pop	{r4, r5, r7, pc}

0800847e <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi3EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800847e:	b580      	push	{r7, lr}
 8008480:	b082      	sub	sp, #8
 8008482:	af00      	add	r7, sp, #0
 8008484:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8008486:	2101      	movs	r1, #1
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f7ff ffda 	bl	8008442 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 f9ed 	bl	800886e <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi2ELi3EE3runERS9_>
  }
 8008494:	bf00      	nop
 8008496:	3708      	adds	r7, #8
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}

0800849c <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800849c:	b480      	push	{r7}
 800849e:	b083      	sub	sp, #12
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	4618      	mov	r0, r3
 80084a8:	370c      	adds	r7, #12
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr

080084b2 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE4DataC1ERKSE_>:
  {
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 80084b2:	b590      	push	{r4, r7, lr}
 80084b4:	b083      	sub	sp, #12
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	6078      	str	r0, [r7, #4]
 80084ba:	6039      	str	r1, [r7, #0]
 80084bc:	687c      	ldr	r4, [r7, #4]
 80084be:	6838      	ldr	r0, [r7, #0]
 80084c0:	f000 f9e4 	bl	800888c <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E7functorEv>
 80084c4:	4603      	mov	r3, r0
 80084c6:	4619      	mov	r1, r3
 80084c8:	4620      	mov	r0, r4
 80084ca:	f7fd fbe1 	bl	8005c90 <_ZN5Eigen8internal13scalar_sum_opIffEC1ERKS2_>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	1d1c      	adds	r4, r3, #4
 80084d2:	6838      	ldr	r0, [r7, #0]
 80084d4:	f000 f9e6 	bl	80088a4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E3lhsEv>
 80084d8:	4603      	mov	r3, r0
 80084da:	4619      	mov	r1, r3
 80084dc:	4620      	mov	r0, r4
 80084de:	f000 f9f8 	bl	80088d2 <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEEC1ERS9_>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80084e8:	6838      	ldr	r0, [r7, #0]
 80084ea:	f000 f9e6 	bl	80088ba <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E3rhsEv>
 80084ee:	4603      	mov	r3, r0
 80084f0:	4619      	mov	r1, r3
 80084f2:	4620      	mov	r0, r4
 80084f4:	f000 f9fc 	bl	80088f0 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS4_>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	4618      	mov	r0, r3
 80084fc:	370c      	adds	r7, #12
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd90      	pop	{r4, r7, pc}

08008502 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeffByOuterInner(Index outer, Index inner)
 8008502:	b580      	push	{r7, lr}
 8008504:	b086      	sub	sp, #24
 8008506:	af00      	add	r7, sp, #0
 8008508:	60f8      	str	r0, [r7, #12]
 800850a:	60b9      	str	r1, [r7, #8]
 800850c:	607a      	str	r2, [r7, #4]
    Index row = rowIndexByOuterInner(outer, inner);
 800850e:	6879      	ldr	r1, [r7, #4]
 8008510:	68b8      	ldr	r0, [r7, #8]
 8008512:	f000 f9fc 	bl	800890e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>
 8008516:	6178      	str	r0, [r7, #20]
    Index col = colIndexByOuterInner(outer, inner);
 8008518:	6879      	ldr	r1, [r7, #4]
 800851a:	68b8      	ldr	r0, [r7, #8]
 800851c:	f000 fa03 	bl	8008926 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>
 8008520:	6138      	str	r0, [r7, #16]
    assignCoeff(row, col);
 8008522:	693a      	ldr	r2, [r7, #16]
 8008524:	6979      	ldr	r1, [r7, #20]
 8008526:	68f8      	ldr	r0, [r7, #12]
 8008528:	f000 fa09 	bl	800893e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE11assignCoeffEii>
  }
 800852c:	bf00      	nop
 800852e:	3718      	adds	r7, #24
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}

08008534 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8008534:	b580      	push	{r7, lr}
 8008536:	b082      	sub	sp, #8
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800853c:	2201      	movs	r2, #1
 800853e:	2100      	movs	r1, #0
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f7ff ffde 	bl	8008502 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f000 fa1f 	bl	800898a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSL_>
  }
 800854c:	bf00      	nop
 800854e:	3708      	adds	r7, #8
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8008554:	b580      	push	{r7, lr}
 8008556:	b082      	sub	sp, #8
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4618      	mov	r0, r3
 8008562:	f7fc fd7e 	bl	8005062 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8008566:	4603      	mov	r3, r0
 8008568:	4618      	mov	r0, r3
 800856a:	3708      	adds	r7, #8
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}

08008570 <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4colsEv>:
  EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR  Index cols() const EIGEN_NOEXCEPT { return m_xpr.rows(); }
 8008570:	b580      	push	{r7, lr}
 8008572:	b082      	sub	sp, #8
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	4618      	mov	r0, r3
 800857c:	f7fd fdc3 	bl	8006106 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8008580:	4603      	mov	r3, r0
 8008582:	4618      	mov	r0, r3
 8008584:	3708      	adds	r7, #8
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}

0800858a <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800858a:	b480      	push	{r7}
 800858c:	b083      	sub	sp, #12
 800858e:	af00      	add	r7, sp, #0
 8008590:	6078      	str	r0, [r7, #4]
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	4618      	mov	r0, r3
 8008596:	370c      	adds	r7, #12
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr

080085a0 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 80085a0:	b480      	push	{r7}
 80085a2:	b083      	sub	sp, #12
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	3308      	adds	r3, #8
 80085ac:	4618      	mov	r0, r3
 80085ae:	370c      	adds	r7, #12
 80085b0:	46bd      	mov	sp, r7
 80085b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b6:	4770      	bx	lr

080085b8 <_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEENS_10DenseShapeESK_Li3EE6evalToINS3_IfLi3ELi1ELi0ELi3ELi1EEEEEvRT_RKS8_RKSJ_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b08c      	sub	sp, #48	; 0x30
 80085bc:	af00      	add	r7, sp, #0
 80085be:	60f8      	str	r0, [r7, #12]
 80085c0:	60b9      	str	r1, [r7, #8]
 80085c2:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 80085c4:	f107 0310 	add.w	r3, r7, #16
 80085c8:	687a      	ldr	r2, [r7, #4]
 80085ca:	68b9      	ldr	r1, [r7, #8]
 80085cc:	4618      	mov	r0, r3
 80085ce:	f000 f9ec 	bl	80089aa <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEE11lazyProductINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEEKNS1_IS7_T_Li1EEERKNS0_ISM_EE>
 80085d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80085d6:	4618      	mov	r0, r3
 80085d8:	f7fe fd73 	bl	80070c2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 80085dc:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80085e0:	f107 0310 	add.w	r3, r7, #16
 80085e4:	4619      	mov	r1, r3
 80085e6:	68f8      	ldr	r0, [r7, #12]
 80085e8:	f000 f9f6 	bl	80089d8 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 80085ec:	bf00      	nop
 80085ee:	3730      	adds	r7, #48	; 0x30
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}

080085f4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 80085f4:	b480      	push	{r7}
 80085f6:	b083      	sub	sp, #12
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4618      	mov	r0, r3
 8008602:	370c      	adds	r7, #12
 8008604:	46bd      	mov	sp, r7
 8008606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860a:	4770      	bx	lr

0800860c <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800860c:	b480      	push	{r7}
 800860e:	b083      	sub	sp, #12
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	3304      	adds	r3, #4
 8008618:	4618      	mov	r0, r3
 800861a:	370c      	adds	r7, #12
 800861c:	46bd      	mov	sp, r7
 800861e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008622:	4770      	bx	lr

08008624 <_ZN5Eigen8internal13add_assign_opIffEC1Ev>:
  * \brief Template functor for scalar/packet assignment with addition
  *
  */
template<typename DstScalar,typename SrcScalar> struct add_assign_op {

  EIGEN_EMPTY_STRUCT_CTOR(add_assign_op)
 8008624:	b480      	push	{r7}
 8008626:	b083      	sub	sp, #12
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	4618      	mov	r0, r3
 8008630:	370c      	adds	r7, #12
 8008632:	46bd      	mov	sp, r7
 8008634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008638:	4770      	bx	lr

0800863a <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800863a:	b580      	push	{r7, lr}
 800863c:	b086      	sub	sp, #24
 800863e:	af00      	add	r7, sp, #0
 8008640:	60f8      	str	r0, [r7, #12]
 8008642:	60b9      	str	r1, [r7, #8]
 8008644:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800864a:	687a      	ldr	r2, [r7, #4]
 800864c:	68b9      	ldr	r1, [r7, #8]
 800864e:	6978      	ldr	r0, [r7, #20]
 8008650:	f000 f9d4 	bl	80089fc <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>
}
 8008654:	bf00      	nop
 8008656:	3718      	adds	r7, #24
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}

0800865c <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 800865c:	b580      	push	{r7, lr}
 800865e:	b082      	sub	sp, #8
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4618      	mov	r0, r3
 800866a:	f7fc fcfa 	bl	8005062 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800866e:	4603      	mov	r3, r0
    }
 8008670:	4618      	mov	r0, r3
 8008672:	3708      	adds	r7, #8
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}

08008678 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8008678:	b480      	push	{r7}
 800867a:	b083      	sub	sp, #12
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	4618      	mov	r0, r3
 8008684:	370c      	adds	r7, #12
 8008686:	46bd      	mov	sp, r7
 8008688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868c:	4770      	bx	lr

0800868e <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800868e:	b480      	push	{r7}
 8008690:	b083      	sub	sp, #12
 8008692:	af00      	add	r7, sp, #0
 8008694:	6078      	str	r0, [r7, #4]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	691b      	ldr	r3, [r3, #16]
 800869a:	4618      	mov	r0, r3
 800869c:	370c      	adds	r7, #12
 800869e:	46bd      	mov	sp, r7
 80086a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a4:	4770      	bx	lr

080086a6 <_ZN5Eigen8internal20generic_product_implINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_NS_10DenseShapeESE_Li3EE6evalToIS6_EEvRT_RKSD_RS7_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 80086a6:	b580      	push	{r7, lr}
 80086a8:	b08a      	sub	sp, #40	; 0x28
 80086aa:	af00      	add	r7, sp, #0
 80086ac:	60f8      	str	r0, [r7, #12]
 80086ae:	60b9      	str	r1, [r7, #8]
 80086b0:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 80086b2:	f107 0310 	add.w	r3, r7, #16
 80086b6:	687a      	ldr	r2, [r7, #4]
 80086b8:	68b9      	ldr	r1, [r7, #8]
 80086ba:	4618      	mov	r0, r3
 80086bc:	f000 f9d8 	bl	8008a70 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEE11lazyProductIS6_EEKNS8_ISD_T_Li1EEERKNS0_ISG_EE>
 80086c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80086c4:	4618      	mov	r0, r3
 80086c6:	f7fe fcfc 	bl	80070c2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 80086ca:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80086ce:	f107 0310 	add.w	r3, r7, #16
 80086d2:	4619      	mov	r1, r3
 80086d4:	68f8      	ldr	r0, [r7, #12]
 80086d6:	f000 f9e2 	bl	8008a9e <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 80086da:	bf00      	nop
 80086dc:	3728      	adds	r7, #40	; 0x28
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}

080086e2 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE11lazyProductINS_9TransposeIS6_EEEEKNS_7ProductISD_T_Li1EEERKNS0_ISJ_EE>:
  */
template<typename Derived>
template<typename OtherDerived>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
const Product<Derived,OtherDerived,LazyProduct>
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 80086e2:	b590      	push	{r4, r7, lr}
 80086e4:	b085      	sub	sp, #20
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	60f8      	str	r0, [r7, #12]
 80086ea:	60b9      	str	r1, [r7, #8]
 80086ec:	607a      	str	r2, [r7, #4]
    INVALID_VECTOR_VECTOR_PRODUCT__IF_YOU_WANTED_A_DOT_OR_COEFF_WISE_PRODUCT_YOU_MUST_USE_THE_EXPLICIT_FUNCTIONS)
  EIGEN_STATIC_ASSERT(ProductIsValid || !(SameSizes && !AreVectors),
    INVALID_MATRIX_PRODUCT__IF_YOU_WANTED_A_COEFF_WISE_PRODUCT_YOU_MUST_USE_THE_EXPLICIT_FUNCTION)
  EIGEN_STATIC_ASSERT(ProductIsValid || SameSizes, INVALID_MATRIX_PRODUCT)

  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 80086ee:	68b8      	ldr	r0, [r7, #8]
 80086f0:	f7fd f821 	bl	8005736 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE7derivedEv>
 80086f4:	4604      	mov	r4, r0
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f7fd f828 	bl	800574c <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 80086fc:	4603      	mov	r3, r0
 80086fe:	461a      	mov	r2, r3
 8008700:	4621      	mov	r1, r4
 8008702:	68f8      	ldr	r0, [r7, #12]
 8008704:	f000 fa00 	bl	8008b08 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EEC1ERKSD_RKSF_>
}
 8008708:	68f8      	ldr	r0, [r7, #12]
 800870a:	3714      	adds	r7, #20
 800870c:	46bd      	mov	sp, r7
 800870e:	bd90      	pop	{r4, r7, pc}

08008710 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8008710:	b580      	push	{r7, lr}
 8008712:	b086      	sub	sp, #24
 8008714:	af00      	add	r7, sp, #0
 8008716:	60f8      	str	r0, [r7, #12]
 8008718:	60b9      	str	r1, [r7, #8]
 800871a:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8008720:	687a      	ldr	r2, [r7, #4]
 8008722:	68b9      	ldr	r1, [r7, #8]
 8008724:	6978      	ldr	r0, [r7, #20]
 8008726:	f000 fa1f 	bl	8008b68 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_>
}
 800872a:	bf00      	nop
 800872c:	3718      	adds	r7, #24
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}

08008732 <_ZNK5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC const T *data() const { return m_data.array; }
 8008732:	b480      	push	{r7}
 8008734:	b083      	sub	sp, #12
 8008736:	af00      	add	r7, sp, #0
 8008738:	6078      	str	r0, [r7, #4]
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	4618      	mov	r0, r3
 800873e:	370c      	adds	r7, #12
 8008740:	46bd      	mov	sp, r7
 8008742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008746:	4770      	bx	lr

08008748 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>:
 8008748:	b580      	push	{r7, lr}
 800874a:	b082      	sub	sp, #8
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f000 fa1c 	bl	8008b8e <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE9innerSizeEv>
 8008756:	4603      	mov	r3, r0
 8008758:	4618      	mov	r0, r3
 800875a:	3708      	adds	r7, #8
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}

08008760 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEi>:
  Scalar& coeffRef(Index index)
 8008760:	b480      	push	{r7}
 8008762:	b083      	sub	sp, #12
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
 8008768:	6039      	str	r1, [r7, #0]
    return const_cast<Scalar*>(m_d.data)[index];
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681a      	ldr	r2, [r3, #0]
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	009b      	lsls	r3, r3, #2
 8008772:	4413      	add	r3, r2
  }
 8008774:	4618      	mov	r0, r3
 8008776:	370c      	adds	r7, #12
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr

08008780 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE5coeffEi>:
  CoeffReturnType coeff(Index index) const
 8008780:	b480      	push	{r7}
 8008782:	b083      	sub	sp, #12
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	6039      	str	r1, [r7, #0]
    return m_d.data[index];
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681a      	ldr	r2, [r3, #0]
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	009b      	lsls	r3, r3, #2
 8008792:	4413      	add	r3, r2
  }
 8008794:	4618      	mov	r0, r3
 8008796:	370c      	adds	r7, #12
 8008798:	46bd      	mov	sp, r7
 800879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879e:	4770      	bx	lr

080087a0 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a = b; }
 80087a0:	b480      	push	{r7}
 80087a2:	b085      	sub	sp, #20
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	60f8      	str	r0, [r7, #12]
 80087a8:	60b9      	str	r1, [r7, #8]
 80087aa:	607a      	str	r2, [r7, #4]
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681a      	ldr	r2, [r3, #0]
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	601a      	str	r2, [r3, #0]
 80087b4:	bf00      	nop
 80087b6:	3714      	adds	r7, #20
 80087b8:	46bd      	mov	sp, r7
 80087ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087be:	4770      	bx	lr

080087c0 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi2ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b082      	sub	sp, #8
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 80087c8:	2102      	movs	r1, #2
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f7ff fdc9 	bl	8008362 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f000 f9e8 	bl	8008ba6 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi3ELi9EE3runERS9_>
  }
 80087d6:	bf00      	nop
 80087d8:	3708      	adds	r7, #8
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}

080087de <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE11lazyProductINS1_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS7_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 80087de:	b590      	push	{r4, r7, lr}
 80087e0:	b085      	sub	sp, #20
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	60f8      	str	r0, [r7, #12]
 80087e6:	60b9      	str	r1, [r7, #8]
 80087e8:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 80087ea:	68b8      	ldr	r0, [r7, #8]
 80087ec:	f7fd f843 	bl	8005876 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 80087f0:	4604      	mov	r4, r0
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f7fc fe77 	bl	80054e6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80087f8:	4603      	mov	r3, r0
 80087fa:	461a      	mov	r2, r3
 80087fc:	4621      	mov	r1, r4
 80087fe:	68f8      	ldr	r0, [r7, #12]
 8008800:	f000 fa04 	bl	8008c0c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EEC1ERKS2_RKS3_>
}
 8008804:	68f8      	ldr	r0, [r7, #12]
 8008806:	3714      	adds	r7, #20
 8008808:	46bd      	mov	sp, r7
 800880a:	bd90      	pop	{r4, r7, pc}

0800880c <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800880c:	b580      	push	{r7, lr}
 800880e:	b086      	sub	sp, #24
 8008810:	af00      	add	r7, sp, #0
 8008812:	60f8      	str	r0, [r7, #12]
 8008814:	60b9      	str	r1, [r7, #8]
 8008816:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800881c:	687a      	ldr	r2, [r7, #4]
 800881e:	68b9      	ldr	r1, [r7, #8]
 8008820:	6978      	ldr	r0, [r7, #20]
 8008822:	f000 fa21 	bl	8008c68 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_>
}
 8008826:	bf00      	nop
 8008828:	3718      	adds	r7, #24
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}

0800882e <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi>:
  Scalar& coeffRef(Index index)
 800882e:	b480      	push	{r7}
 8008830:	b083      	sub	sp, #12
 8008832:	af00      	add	r7, sp, #0
 8008834:	6078      	str	r0, [r7, #4]
 8008836:	6039      	str	r1, [r7, #0]
    return const_cast<Scalar*>(m_d.data)[index];
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681a      	ldr	r2, [r3, #0]
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	009b      	lsls	r3, r3, #2
 8008840:	4413      	add	r3, r2
  }
 8008842:	4618      	mov	r0, r3
 8008844:	370c      	adds	r7, #12
 8008846:	46bd      	mov	sp, r7
 8008848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884c:	4770      	bx	lr

0800884e <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffEi>:
  CoeffReturnType coeff(Index index) const
 800884e:	b480      	push	{r7}
 8008850:	b083      	sub	sp, #12
 8008852:	af00      	add	r7, sp, #0
 8008854:	6078      	str	r0, [r7, #4]
 8008856:	6039      	str	r1, [r7, #0]
    return m_d.data[index];
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681a      	ldr	r2, [r3, #0]
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	009b      	lsls	r3, r3, #2
 8008860:	4413      	add	r3, r2
  }
 8008862:	4618      	mov	r0, r3
 8008864:	370c      	adds	r7, #12
 8008866:	46bd      	mov	sp, r7
 8008868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886c:	4770      	bx	lr

0800886e <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi2ELi3EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800886e:	b580      	push	{r7, lr}
 8008870:	b082      	sub	sp, #8
 8008872:	af00      	add	r7, sp, #0
 8008874:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8008876:	2102      	movs	r1, #2
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f7ff fde2 	bl	8008442 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f000 fa05 	bl	8008c8e <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi3ELi3EE3runERS9_>
  }
 8008884:	bf00      	nop
 8008886:	3708      	adds	r7, #8
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}

0800888c <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 800888c:	b480      	push	{r7}
 800888e:	b083      	sub	sp, #12
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	3310      	adds	r3, #16
 8008898:	4618      	mov	r0, r3
 800889a:	370c      	adds	r7, #12
 800889c:	46bd      	mov	sp, r7
 800889e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a2:	4770      	bx	lr

080088a4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 80088a4:	b480      	push	{r7}
 80088a6:	b083      	sub	sp, #12
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	4618      	mov	r0, r3
 80088b0:	370c      	adds	r7, #12
 80088b2:	46bd      	mov	sp, r7
 80088b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b8:	4770      	bx	lr

080088ba <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 80088ba:	b480      	push	{r7}
 80088bc:	b083      	sub	sp, #12
 80088be:	af00      	add	r7, sp, #0
 80088c0:	6078      	str	r0, [r7, #4]
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	68db      	ldr	r3, [r3, #12]
 80088c6:	4618      	mov	r0, r3
 80088c8:	370c      	adds	r7, #12
 80088ca:	46bd      	mov	sp, r7
 80088cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d0:	4770      	bx	lr

080088d2 <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEEC1ERS9_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 80088d2:	b580      	push	{r7, lr}
 80088d4:	b082      	sub	sp, #8
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
 80088da:	6039      	str	r1, [r7, #0]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	6839      	ldr	r1, [r7, #0]
 80088e0:	4618      	mov	r0, r3
 80088e2:	f000 f9de 	bl	8008ca2 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEEC1ERKS8_>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	4618      	mov	r0, r3
 80088ea:	3708      	adds	r7, #8
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}

080088f0 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS4_>:
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b082      	sub	sp, #8
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	6039      	str	r1, [r7, #0]
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6839      	ldr	r1, [r7, #0]
 80088fe:	4618      	mov	r0, r3
 8008900:	f7ff f846 	bl	8007990 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	4618      	mov	r0, r3
 8008908:	3708      	adds	r7, #8
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}

0800890e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index rowIndexByOuterInner(Index outer, Index inner)
 800890e:	b480      	push	{r7}
 8008910:	b083      	sub	sp, #12
 8008912:	af00      	add	r7, sp, #0
 8008914:	6078      	str	r0, [r7, #4]
 8008916:	6039      	str	r1, [r7, #0]
      : inner;
 8008918:	683b      	ldr	r3, [r7, #0]
  }
 800891a:	4618      	mov	r0, r3
 800891c:	370c      	adds	r7, #12
 800891e:	46bd      	mov	sp, r7
 8008920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008924:	4770      	bx	lr

08008926 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index colIndexByOuterInner(Index outer, Index inner)
 8008926:	b480      	push	{r7}
 8008928:	b083      	sub	sp, #12
 800892a:	af00      	add	r7, sp, #0
 800892c:	6078      	str	r0, [r7, #4]
 800892e:	6039      	str	r1, [r7, #0]
      : outer;
 8008930:	687b      	ldr	r3, [r7, #4]
  }
 8008932:	4618      	mov	r0, r3
 8008934:	370c      	adds	r7, #12
 8008936:	46bd      	mov	sp, r7
 8008938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893c:	4770      	bx	lr

0800893e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE11assignCoeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index row, Index col)
 800893e:	b5b0      	push	{r4, r5, r7, lr}
 8008940:	b086      	sub	sp, #24
 8008942:	af00      	add	r7, sp, #0
 8008944:	60f8      	str	r0, [r7, #12]
 8008946:	60b9      	str	r1, [r7, #8]
 8008948:	607a      	str	r2, [r7, #4]
    m_functor.assignCoeff(m_dst.coeffRef(row,col), m_src.coeff(row,col));
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	689c      	ldr	r4, [r3, #8]
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	68b9      	ldr	r1, [r7, #8]
 8008956:	4618      	mov	r0, r3
 8008958:	f000 f9b2 	bl	8008cc0 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEii>
 800895c:	4605      	mov	r5, r0
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	685b      	ldr	r3, [r3, #4]
 8008962:	687a      	ldr	r2, [r7, #4]
 8008964:	68b9      	ldr	r1, [r7, #8]
 8008966:	4618      	mov	r0, r3
 8008968:	f000 f9c2 	bl	8008cf0 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE5coeffEii>
 800896c:	eef0 7a40 	vmov.f32	s15, s0
 8008970:	edc7 7a05 	vstr	s15, [r7, #20]
 8008974:	f107 0314 	add.w	r3, r7, #20
 8008978:	461a      	mov	r2, r3
 800897a:	4629      	mov	r1, r5
 800897c:	4620      	mov	r0, r4
 800897e:	f7ff ff0f 	bl	80087a0 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 8008982:	bf00      	nop
 8008984:	3718      	adds	r7, #24
 8008986:	46bd      	mov	sp, r7
 8008988:	bdb0      	pop	{r4, r5, r7, pc}

0800898a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800898a:	b580      	push	{r7, lr}
 800898c:	b082      	sub	sp, #8
 800898e:	af00      	add	r7, sp, #0
 8008990:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8008992:	2202      	movs	r2, #2
 8008994:	2100      	movs	r1, #0
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f7ff fdb3 	bl	8008502 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f000 f9ce 	bl	8008d3e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSL_>
  }
 80089a2:	bf00      	nop
 80089a4:	3708      	adds	r7, #8
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}

080089aa <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEE11lazyProductINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEEKNS1_IS7_T_Li1EEERKNS0_ISM_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 80089aa:	b590      	push	{r4, r7, lr}
 80089ac:	b085      	sub	sp, #20
 80089ae:	af00      	add	r7, sp, #0
 80089b0:	60f8      	str	r0, [r7, #12]
 80089b2:	60b9      	str	r1, [r7, #8]
 80089b4:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 80089b6:	68b8      	ldr	r0, [r7, #8]
 80089b8:	f7fd fbe9 	bl	800618e <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEE7derivedEv>
 80089bc:	4604      	mov	r4, r0
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f7fd fbf0 	bl	80061a4 <_ZNK5Eigen9EigenBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEE7derivedEv>
 80089c4:	4603      	mov	r3, r0
 80089c6:	461a      	mov	r2, r3
 80089c8:	4621      	mov	r1, r4
 80089ca:	68f8      	ldr	r0, [r7, #12]
 80089cc:	f000 f9ec 	bl	8008da8 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEC1ERKS6_RKSI_>
}
 80089d0:	68f8      	ldr	r0, [r7, #12]
 80089d2:	3714      	adds	r7, #20
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd90      	pop	{r4, r7, pc}

080089d8 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 80089d8:	b580      	push	{r7, lr}
 80089da:	b086      	sub	sp, #24
 80089dc:	af00      	add	r7, sp, #0
 80089de:	60f8      	str	r0, [r7, #12]
 80089e0:	60b9      	str	r1, [r7, #8]
 80089e2:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 80089e8:	687a      	ldr	r2, [r7, #4]
 80089ea:	68b9      	ldr	r1, [r7, #8]
 80089ec:	6978      	ldr	r0, [r7, #20]
 80089ee:	f000 fa0d 	bl	8008e0c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_>
}
 80089f2:	bf00      	nop
 80089f4:	3718      	adds	r7, #24
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}
	...

080089fc <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::add_assign_op<Scalar,Scalar> &)
 80089fc:	b590      	push	{r4, r7, lr}
 80089fe:	b085      	sub	sp, #20
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	60f8      	str	r0, [r7, #12]
 8008a04:	60b9      	str	r1, [r7, #8]
 8008a06:	607a      	str	r2, [r7, #4]
    eigen_assert(dst.rows() == src.rows() && dst.cols() == src.cols());
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f7fc fbcf 	bl	80051ae <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8008a10:	4604      	mov	r4, r0
 8008a12:	68b8      	ldr	r0, [r7, #8]
 8008a14:	f7fd fdd7 	bl	80065c6 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE4rowsEv>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	429c      	cmp	r4, r3
 8008a1c:	d10a      	bne.n	8008a34 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x38>
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	4618      	mov	r0, r3
 8008a22:	f7fc fbb9 	bl	8005198 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8008a26:	4604      	mov	r4, r0
 8008a28:	68b8      	ldr	r0, [r7, #8]
 8008a2a:	f7fd fdda 	bl	80065e2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE4colsEv>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	429c      	cmp	r4, r3
 8008a32:	d005      	beq.n	8008a40 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x44>
 8008a34:	4b0b      	ldr	r3, [pc, #44]	; (8008a64 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x68>)
 8008a36:	4a0c      	ldr	r2, [pc, #48]	; (8008a68 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x6c>)
 8008a38:	21a1      	movs	r1, #161	; 0xa1
 8008a3a:	480c      	ldr	r0, [pc, #48]	; (8008a6c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x70>)
 8008a3c:	f015 fa2a 	bl	801de94 <__assert_func>
    generic_product_impl<Lhs, Rhs>::addTo(dst, src.lhs(), src.rhs());
 8008a40:	68b8      	ldr	r0, [r7, #8]
 8008a42:	f000 f9f6 	bl	8008e32 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE3lhsEv>
 8008a46:	4604      	mov	r4, r0
 8008a48:	68b8      	ldr	r0, [r7, #8]
 8008a4a:	f000 f9fe 	bl	8008e4a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE3rhsEv>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	461a      	mov	r2, r3
 8008a52:	4621      	mov	r1, r4
 8008a54:	68f8      	ldr	r0, [r7, #12]
 8008a56:	f000 fa04 	bl	8008e62 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEENS_10DenseShapeESE_Li3EE5addToIS3_EEvRT_RKS3_RKSD_>
  }
 8008a5a:	bf00      	nop
 8008a5c:	3714      	adds	r7, #20
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd90      	pop	{r4, r7, pc}
 8008a62:	bf00      	nop
 8008a64:	08022a90 	.word	0x08022a90
 8008a68:	08022ac8 	.word	0x08022ac8
 8008a6c:	08022f88 	.word	0x08022f88

08008a70 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEE11lazyProductIS6_EEKNS8_ISD_T_Li1EEERKNS0_ISG_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 8008a70:	b590      	push	{r4, r7, lr}
 8008a72:	b085      	sub	sp, #20
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	60f8      	str	r0, [r7, #12]
 8008a78:	60b9      	str	r1, [r7, #8]
 8008a7a:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 8008a7c:	68b8      	ldr	r0, [r7, #8]
 8008a7e:	f7fd feed 	bl	800685c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEE7derivedEv>
 8008a82:	4604      	mov	r4, r0
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f7fc fef6 	bl	8005876 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	461a      	mov	r2, r3
 8008a8e:	4621      	mov	r1, r4
 8008a90:	68f8      	ldr	r0, [r7, #12]
 8008a92:	f000 fa29 	bl	8008ee8 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EEC1ERKSC_RS7_>
}
 8008a96:	68f8      	ldr	r0, [r7, #12]
 8008a98:	3714      	adds	r7, #20
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd90      	pop	{r4, r7, pc}

08008a9e <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8008a9e:	b580      	push	{r7, lr}
 8008aa0:	b086      	sub	sp, #24
 8008aa2:	af00      	add	r7, sp, #0
 8008aa4:	60f8      	str	r0, [r7, #12]
 8008aa6:	60b9      	str	r1, [r7, #8]
 8008aa8:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8008aae:	687a      	ldr	r2, [r7, #4]
 8008ab0:	68b9      	ldr	r1, [r7, #8]
 8008ab2:	6978      	ldr	r0, [r7, #20]
 8008ab4:	f000 fa46 	bl	8008f44 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>
}
 8008ab8:	bf00      	nop
 8008aba:	3718      	adds	r7, #24
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bd80      	pop	{r7, pc}

08008ac0 <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1Ev>:
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b082      	sub	sp, #8
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f000 fa4e 	bl	8008f6a <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1Ev>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3708      	adds	r7, #8
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}

08008ad8 <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1ELi4EEC1Ev>:
class dense_product_base
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b082      	sub	sp, #8
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f7ff ffed 	bl	8008ac0 <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1Ev>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	4618      	mov	r0, r3
 8008aea:	3708      	adds	r7, #8
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}

08008af0 <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b082      	sub	sp, #8
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f7ff ffed 	bl	8008ad8 <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1ELi4EEC1Ev>
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	4618      	mov	r0, r3
 8008b02:	3708      	adds	r7, #8
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}

08008b08 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EEC1ERKSD_RKSF_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8008b08:	b590      	push	{r4, r7, lr}
 8008b0a:	b085      	sub	sp, #20
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	60f8      	str	r0, [r7, #12]
 8008b10:	60b9      	str	r1, [r7, #8]
 8008b12:	607a      	str	r2, [r7, #4]
 8008b14:	68f8      	ldr	r0, [r7, #12]
 8008b16:	f7ff ffeb 	bl	8008af0 <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1ENS_5DenseEEC1Ev>
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	68b9      	ldr	r1, [r7, #8]
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f7fb fe5c 	bl	80047dc <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERKSC_>
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	3310      	adds	r3, #16
 8008b28:	687a      	ldr	r2, [r7, #4]
 8008b2a:	6812      	ldr	r2, [r2, #0]
 8008b2c:	601a      	str	r2, [r3, #0]
      eigen_assert(lhs.cols() == rhs.rows()
 8008b2e:	68b8      	ldr	r0, [r7, #8]
 8008b30:	f7fc fe3b 	bl	80057aa <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4colsEv>
 8008b34:	4604      	mov	r4, r0
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f7fc fe45 	bl	80057c6 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	429c      	cmp	r4, r3
 8008b40:	d005      	beq.n	8008b4e <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EEC1ERKSD_RKSF_+0x46>
 8008b42:	4b06      	ldr	r3, [pc, #24]	; (8008b5c <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EEC1ERKSD_RKSF_+0x54>)
 8008b44:	4a06      	ldr	r2, [pc, #24]	; (8008b60 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EEC1ERKSD_RKSF_+0x58>)
 8008b46:	2160      	movs	r1, #96	; 0x60
 8008b48:	4806      	ldr	r0, [pc, #24]	; (8008b64 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EEC1ERKSD_RKSF_+0x5c>)
 8008b4a:	f015 f9a3 	bl	801de94 <__assert_func>
 8008b4e:	bf00      	nop
    }
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	4618      	mov	r0, r3
 8008b54:	3714      	adds	r7, #20
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd90      	pop	{r4, r7, pc}
 8008b5a:	bf00      	nop
 8008b5c:	0801ffbc 	.word	0x0801ffbc
 8008b60:	08022fe8 	.word	0x08022fe8
 8008b64:	0802030c 	.word	0x0802030c

08008b68 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b084      	sub	sp, #16
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	60f8      	str	r0, [r7, #12]
 8008b70:	60b9      	str	r1, [r7, #8]
 8008b72:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 8008b74:	68b9      	ldr	r1, [r7, #8]
 8008b76:	68f8      	ldr	r0, [r7, #12]
 8008b78:	f000 fa02 	bl	8008f80 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 8008b7c:	687a      	ldr	r2, [r7, #4]
 8008b7e:	68b9      	ldr	r1, [r7, #8]
 8008b80:	68f8      	ldr	r0, [r7, #12]
 8008b82:	f000 fab3 	bl	80090ec <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8008b86:	bf00      	nop
 8008b88:	3710      	adds	r7, #16
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}

08008b8e <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE9innerSizeEv>:
    Index innerSize() const
 8008b8e:	b580      	push	{r7, lr}
 8008b90:	b082      	sub	sp, #8
 8008b92:	af00      	add	r7, sp, #0
 8008b94:	6078      	str	r0, [r7, #4]
      return IsVectorAtCompileTime ? this->size()
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f000 fae0 	bl	800915c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8008b9c:	4603      	mov	r3, r0
    }
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3708      	adds	r7, #8
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}

08008ba6 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi3ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8008ba6:	b580      	push	{r7, lr}
 8008ba8:	b082      	sub	sp, #8
 8008baa:	af00      	add	r7, sp, #0
 8008bac:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8008bae:	2103      	movs	r1, #3
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f7ff fbd6 	bl	8008362 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f000 fae0 	bl	800917c <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi4ELi9EE3runERS9_>
  }
 8008bbc:	bf00      	nop
 8008bbe:	3708      	adds	r7, #8
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}

08008bc4 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1Ev>:
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b082      	sub	sp, #8
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f000 fae4 	bl	800919a <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1Ev>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3708      	adds	r7, #8
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}

08008bdc <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi1ELi3EEC1Ev>:
class dense_product_base
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b082      	sub	sp, #8
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f7ff ffed 	bl	8008bc4 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1Ev>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	4618      	mov	r0, r3
 8008bee:	3708      	adds	r7, #8
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}

08008bf4 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b082      	sub	sp, #8
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f7ff ffed 	bl	8008bdc <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi1ELi3EEC1Ev>
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	4618      	mov	r0, r3
 8008c06:	3708      	adds	r7, #8
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}

08008c0c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8008c0c:	b590      	push	{r4, r7, lr}
 8008c0e:	b085      	sub	sp, #20
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	60f8      	str	r0, [r7, #12]
 8008c14:	60b9      	str	r1, [r7, #8]
 8008c16:	607a      	str	r2, [r7, #4]
 8008c18:	68f8      	ldr	r0, [r7, #12]
 8008c1a:	f7ff ffeb 	bl	8008bf4 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1ENS_5DenseEEC1Ev>
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	68ba      	ldr	r2, [r7, #8]
 8008c22:	601a      	str	r2, [r3, #0]
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	687a      	ldr	r2, [r7, #4]
 8008c28:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	f7fc fa0d 	bl	800504c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8008c32:	4604      	mov	r4, r0
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	4618      	mov	r0, r3
 8008c38:	f7fc fab9 	bl	80051ae <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	429c      	cmp	r4, r3
 8008c40:	d005      	beq.n	8008c4e <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EEC1ERKS2_RKS3_+0x42>
 8008c42:	4b06      	ldr	r3, [pc, #24]	; (8008c5c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EEC1ERKS2_RKS3_+0x50>)
 8008c44:	4a06      	ldr	r2, [pc, #24]	; (8008c60 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EEC1ERKS2_RKS3_+0x54>)
 8008c46:	2160      	movs	r1, #96	; 0x60
 8008c48:	4806      	ldr	r0, [pc, #24]	; (8008c64 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EEC1ERKS2_RKS3_+0x58>)
 8008c4a:	f015 f923 	bl	801de94 <__assert_func>
 8008c4e:	bf00      	nop
    }
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	4618      	mov	r0, r3
 8008c54:	3714      	adds	r7, #20
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd90      	pop	{r4, r7, pc}
 8008c5a:	bf00      	nop
 8008c5c:	0801ffbc 	.word	0x0801ffbc
 8008c60:	080232ac 	.word	0x080232ac
 8008c64:	0802030c 	.word	0x0802030c

08008c68 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b084      	sub	sp, #16
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	60f8      	str	r0, [r7, #12]
 8008c70:	60b9      	str	r1, [r7, #8]
 8008c72:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 8008c74:	68b9      	ldr	r1, [r7, #8]
 8008c76:	68f8      	ldr	r0, [r7, #12]
 8008c78:	f000 fa9a 	bl	80091b0 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 8008c7c:	687a      	ldr	r2, [r7, #4]
 8008c7e:	68b9      	ldr	r1, [r7, #8]
 8008c80:	68f8      	ldr	r0, [r7, #12]
 8008c82:	f000 fac3 	bl	800920c <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8008c86:	bf00      	nop
 8008c88:	3710      	adds	r7, #16
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}

08008c8e <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi3ELi3EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 8008c8e:	b480      	push	{r7}
 8008c90:	b083      	sub	sp, #12
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	6078      	str	r0, [r7, #4]
 8008c96:	bf00      	nop
 8008c98:	370c      	adds	r7, #12
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca0:	4770      	bx	lr

08008ca2 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEEC1ERKS8_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8008ca2:	b580      	push	{r7, lr}
 8008ca4:	b082      	sub	sp, #8
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	6078      	str	r0, [r7, #4]
 8008caa:	6039      	str	r1, [r7, #0]
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6839      	ldr	r1, [r7, #0]
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f000 fae3 	bl	800927c <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEELi3ENS_10DenseShapeES9_ffEC1ERKS8_>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	4618      	mov	r0, r3
 8008cba:	3708      	adds	r7, #8
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}

08008cc0 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEii>:
  Scalar& coeffRef(Index row, Index col)
 8008cc0:	b590      	push	{r4, r7, lr}
 8008cc2:	b085      	sub	sp, #20
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	60f8      	str	r0, [r7, #12]
 8008cc8:	60b9      	str	r1, [r7, #8]
 8008cca:	607a      	str	r2, [r7, #4]
      return const_cast<Scalar*>(m_d.data)[row + col * m_d.outerStride()];
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	681c      	ldr	r4, [r3, #0]
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f000 fb0f 	bl	80092f6 <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EE11outerStrideEv>
 8008cd8:	4602      	mov	r2, r0
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	fb03 f202 	mul.w	r2, r3, r2
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	4413      	add	r3, r2
 8008ce4:	009b      	lsls	r3, r3, #2
 8008ce6:	4423      	add	r3, r4
  }
 8008ce8:	4618      	mov	r0, r3
 8008cea:	3714      	adds	r7, #20
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd90      	pop	{r4, r7, pc}

08008cf0 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8008cf0:	b5b0      	push	{r4, r5, r7, lr}
 8008cf2:	b084      	sub	sp, #16
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	60f8      	str	r0, [r7, #12]
 8008cf8:	60b9      	str	r1, [r7, #8]
 8008cfa:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f000 fb04 	bl	800930c <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE4Data4funcEv>
 8008d04:	4604      	mov	r4, r0
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	3304      	adds	r3, #4
 8008d0a:	687a      	ldr	r2, [r7, #4]
 8008d0c:	68b9      	ldr	r1, [r7, #8]
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f000 fb07 	bl	8009322 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEE5coeffEii>
 8008d14:	4605      	mov	r5, r0
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	332c      	adds	r3, #44	; 0x2c
 8008d1a:	687a      	ldr	r2, [r7, #4]
 8008d1c:	68b9      	ldr	r1, [r7, #8]
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f000 fb17 	bl	8009352 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE5coeffEii>
 8008d24:	4603      	mov	r3, r0
 8008d26:	461a      	mov	r2, r3
 8008d28:	4629      	mov	r1, r5
 8008d2a:	4620      	mov	r0, r4
 8008d2c:	f000 fb29 	bl	8009382 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 8008d30:	eef0 7a40 	vmov.f32	s15, s0
  }
 8008d34:	eeb0 0a67 	vmov.f32	s0, s15
 8008d38:	3710      	adds	r7, #16
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bdb0      	pop	{r4, r5, r7, pc}

08008d3e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8008d3e:	b580      	push	{r7, lr}
 8008d40:	b082      	sub	sp, #8
 8008d42:	af00      	add	r7, sp, #0
 8008d44:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8008d46:	2200      	movs	r2, #0
 8008d48:	2101      	movs	r1, #1
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f7ff fbd9 	bl	8008502 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f000 fb2b 	bl	80093ac <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSL_>
  }
 8008d56:	bf00      	nop
 8008d58:	3708      	adds	r7, #8
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}

08008d5e <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1Ev>:
 8008d5e:	b580      	push	{r7, lr}
 8008d60:	b082      	sub	sp, #8
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	6078      	str	r0, [r7, #4]
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f000 fb30 	bl	80093cc <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1Ev>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	4618      	mov	r0, r3
 8008d70:	3708      	adds	r7, #8
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}

08008d76 <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1ELi4EEC1Ev>:
class dense_product_base
 8008d76:	b580      	push	{r7, lr}
 8008d78:	b082      	sub	sp, #8
 8008d7a:	af00      	add	r7, sp, #0
 8008d7c:	6078      	str	r0, [r7, #4]
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f7ff ffed 	bl	8008d5e <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1Ev>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	4618      	mov	r0, r3
 8008d88:	3708      	adds	r7, #8
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd80      	pop	{r7, pc}

08008d8e <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8008d8e:	b580      	push	{r7, lr}
 8008d90:	b082      	sub	sp, #8
 8008d92:	af00      	add	r7, sp, #0
 8008d94:	6078      	str	r0, [r7, #4]
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f7ff ffed 	bl	8008d76 <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1ELi4EEC1Ev>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3708      	adds	r7, #8
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}
	...

08008da8 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEC1ERKS6_RKSI_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8008da8:	b590      	push	{r4, r7, lr}
 8008daa:	b085      	sub	sp, #20
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	60f8      	str	r0, [r7, #12]
 8008db0:	60b9      	str	r1, [r7, #8]
 8008db2:	607a      	str	r2, [r7, #4]
 8008db4:	68f8      	ldr	r0, [r7, #12]
 8008db6:	f7ff ffea 	bl	8008d8e <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1ENS_5DenseEEC1Ev>
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	68ba      	ldr	r2, [r7, #8]
 8008dbe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008dc2:	e883 0003 	stmia.w	r3, {r0, r1}
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	3308      	adds	r3, #8
 8008dca:	6879      	ldr	r1, [r7, #4]
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f7fb feb9 	bl	8004b44 <_ZN5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKSH_>
      eigen_assert(lhs.cols() == rhs.rows()
 8008dd2:	68b8      	ldr	r0, [r7, #8]
 8008dd4:	f7fd fa15 	bl	8006202 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4colsEv>
 8008dd8:	4604      	mov	r4, r0
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f7fd fa1f 	bl	800621e <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4rowsEv>
 8008de0:	4603      	mov	r3, r0
 8008de2:	429c      	cmp	r4, r3
 8008de4:	d005      	beq.n	8008df2 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEC1ERKS6_RKSI_+0x4a>
 8008de6:	4b06      	ldr	r3, [pc, #24]	; (8008e00 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEC1ERKS6_RKSI_+0x58>)
 8008de8:	4a06      	ldr	r2, [pc, #24]	; (8008e04 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEC1ERKS6_RKSI_+0x5c>)
 8008dea:	2160      	movs	r1, #96	; 0x60
 8008dec:	4806      	ldr	r0, [pc, #24]	; (8008e08 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEC1ERKS6_RKSI_+0x60>)
 8008dee:	f015 f851 	bl	801de94 <__assert_func>
 8008df2:	bf00      	nop
    }
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	4618      	mov	r0, r3
 8008df8:	3714      	adds	r7, #20
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd90      	pop	{r4, r7, pc}
 8008dfe:	bf00      	nop
 8008e00:	0801ffbc 	.word	0x0801ffbc
 8008e04:	080233d4 	.word	0x080233d4
 8008e08:	0802030c 	.word	0x0802030c

08008e0c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b084      	sub	sp, #16
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	60f8      	str	r0, [r7, #12]
 8008e14:	60b9      	str	r1, [r7, #8]
 8008e16:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 8008e18:	68b9      	ldr	r1, [r7, #8]
 8008e1a:	68f8      	ldr	r0, [r7, #12]
 8008e1c:	f000 fae1 	bl	80093e2 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 8008e20:	687a      	ldr	r2, [r7, #4]
 8008e22:	68b9      	ldr	r1, [r7, #8]
 8008e24:	68f8      	ldr	r0, [r7, #12]
 8008e26:	f000 fb23 	bl	8009470 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8008e2a:	bf00      	nop
 8008e2c:	3710      	adds	r7, #16
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}

08008e32 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8008e32:	b480      	push	{r7}
 8008e34:	b083      	sub	sp, #12
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	6078      	str	r0, [r7, #4]
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	4618      	mov	r0, r3
 8008e40:	370c      	adds	r7, #12
 8008e42:	46bd      	mov	sp, r7
 8008e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e48:	4770      	bx	lr

08008e4a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8008e4a:	b480      	push	{r7}
 8008e4c:	b083      	sub	sp, #12
 8008e4e:	af00      	add	r7, sp, #0
 8008e50:	6078      	str	r0, [r7, #4]
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	3304      	adds	r3, #4
 8008e56:	4618      	mov	r0, r3
 8008e58:	370c      	adds	r7, #12
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e60:	4770      	bx	lr

08008e62 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEENS_10DenseShapeESE_Li3EE5addToIS3_EEvRT_RKS3_RKSD_>:

  template<typename Dst>
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void addTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 8008e62:	b580      	push	{r7, lr}
 8008e64:	b08a      	sub	sp, #40	; 0x28
 8008e66:	af00      	add	r7, sp, #0
 8008e68:	60f8      	str	r0, [r7, #12]
 8008e6a:	60b9      	str	r1, [r7, #8]
 8008e6c:	607a      	str	r2, [r7, #4]
  {
    // dst.noalias() += lhs.lazyProduct(rhs);
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::add_assign_op<typename Dst::Scalar,Scalar>());
 8008e6e:	f107 0310 	add.w	r3, r7, #16
 8008e72:	687a      	ldr	r2, [r7, #4]
 8008e74:	68b9      	ldr	r1, [r7, #8]
 8008e76:	4618      	mov	r0, r3
 8008e78:	f000 fb32 	bl	80094e0 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE11lazyProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEEEEKNSB_IS2_T_Li1EEERKNS0_ISG_EE>
 8008e7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e80:	4618      	mov	r0, r3
 8008e82:	f7ff fbcf 	bl	8008624 <_ZN5Eigen8internal13add_assign_opIffEC1Ev>
 8008e86:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8008e8a:	f107 0310 	add.w	r3, r7, #16
 8008e8e:	4619      	mov	r1, r3
 8008e90:	68f8      	ldr	r0, [r7, #12]
 8008e92:	f000 fb3c 	bl	800950e <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8008e96:	bf00      	nop
 8008e98:	3728      	adds	r7, #40	; 0x28
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}

08008e9e <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1Ev>:
 8008e9e:	b580      	push	{r7, lr}
 8008ea0:	b082      	sub	sp, #8
 8008ea2:	af00      	add	r7, sp, #0
 8008ea4:	6078      	str	r0, [r7, #4]
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f000 fb42 	bl	8009530 <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1Ev>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3708      	adds	r7, #8
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}

08008eb6 <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1ELi3EEC1Ev>:
class dense_product_base
 8008eb6:	b580      	push	{r7, lr}
 8008eb8:	b082      	sub	sp, #8
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	6078      	str	r0, [r7, #4]
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f7ff ffed 	bl	8008e9e <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1Ev>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3708      	adds	r7, #8
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}

08008ece <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8008ece:	b580      	push	{r7, lr}
 8008ed0:	b082      	sub	sp, #8
 8008ed2:	af00      	add	r7, sp, #0
 8008ed4:	6078      	str	r0, [r7, #4]
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f7ff ffed 	bl	8008eb6 <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1ELi3EEC1Ev>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3708      	adds	r7, #8
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}
	...

08008ee8 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EEC1ERKSC_RS7_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8008ee8:	b590      	push	{r4, r7, lr}
 8008eea:	b085      	sub	sp, #20
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	60f8      	str	r0, [r7, #12]
 8008ef0:	60b9      	str	r1, [r7, #8]
 8008ef2:	607a      	str	r2, [r7, #4]
 8008ef4:	68f8      	ldr	r0, [r7, #12]
 8008ef6:	f7ff ffea 	bl	8008ece <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1ENS_5DenseEEC1Ev>
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	68b9      	ldr	r1, [r7, #8]
 8008efe:	4618      	mov	r0, r3
 8008f00:	f7fb ff39 	bl	8004d76 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERKSC_>
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	687a      	ldr	r2, [r7, #4]
 8008f08:	611a      	str	r2, [r3, #16]
      eigen_assert(lhs.cols() == rhs.rows()
 8008f0a:	68b8      	ldr	r0, [r7, #8]
 8008f0c:	f7fd fcd5 	bl	80068ba <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE4colsEv>
 8008f10:	4604      	mov	r4, r0
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	4618      	mov	r0, r3
 8008f16:	f7fc f8a4 	bl	8005062 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	429c      	cmp	r4, r3
 8008f1e:	d005      	beq.n	8008f2c <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EEC1ERKSC_RS7_+0x44>
 8008f20:	4b05      	ldr	r3, [pc, #20]	; (8008f38 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EEC1ERKSC_RS7_+0x50>)
 8008f22:	4a06      	ldr	r2, [pc, #24]	; (8008f3c <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EEC1ERKSC_RS7_+0x54>)
 8008f24:	2160      	movs	r1, #96	; 0x60
 8008f26:	4806      	ldr	r0, [pc, #24]	; (8008f40 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EEC1ERKSC_RS7_+0x58>)
 8008f28:	f014 ffb4 	bl	801de94 <__assert_func>
 8008f2c:	bf00      	nop
    }
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	4618      	mov	r0, r3
 8008f32:	3714      	adds	r7, #20
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd90      	pop	{r4, r7, pc}
 8008f38:	0801ffbc 	.word	0x0801ffbc
 8008f3c:	0802375c 	.word	0x0802375c
 8008f40:	0802030c 	.word	0x0802030c

08008f44 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b084      	sub	sp, #16
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	60f8      	str	r0, [r7, #12]
 8008f4c:	60b9      	str	r1, [r7, #8]
 8008f4e:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 8008f50:	68b9      	ldr	r1, [r7, #8]
 8008f52:	68f8      	ldr	r0, [r7, #12]
 8008f54:	f000 faf7 	bl	8009546 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 8008f58:	687a      	ldr	r2, [r7, #4]
 8008f5a:	68b9      	ldr	r1, [r7, #8]
 8008f5c:	68f8      	ldr	r0, [r7, #12]
 8008f5e:	f000 fb35 	bl	80095cc <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8008f62:	bf00      	nop
 8008f64:	3710      	adds	r7, #16
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}

08008f6a <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8008f6a:	b480      	push	{r7}
 8008f6c:	b083      	sub	sp, #12
 8008f6e:	af00      	add	r7, sp, #0
 8008f70:	6078      	str	r0, [r7, #4]
    }
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	4618      	mov	r0, r3
 8008f76:	370c      	adds	r7, #12
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7e:	4770      	bx	lr

08008f80 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b082      	sub	sp, #8
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
 8008f88:	6039      	str	r1, [r7, #0]
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	f7fc f868 	bl	8005062 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8008f92:	4603      	mov	r3, r0
 8008f94:	2b01      	cmp	r3, #1
 8008f96:	dd08      	ble.n	8008faa <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEEEvRKT_RKT0_+0x2a>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f7fc f856 	bl	800504c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	2b01      	cmp	r3, #1
 8008fa4:	dd01      	ble.n	8008faa <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEEEvRKT_RKT0_+0x2a>
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	e000      	b.n	8008fac <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEEEvRKT_RKT0_+0x2c>
 8008faa:	2300      	movs	r3, #0
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d003      	beq.n	8008fb8 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEEEvRKT_RKT0_+0x38>
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
 8008fb0:	6839      	ldr	r1, [r7, #0]
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f000 fb42 	bl	800963c <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEELb0EE3runERKS3_RKSI_>
}
 8008fb8:	bf00      	nop
 8008fba:	3708      	adds	r7, #8
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>:
struct evaluator<const T>
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b082      	sub	sp, #8
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f7fc fa5b 	bl	8005486 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3708      	adds	r7, #8
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}

08008fda <_ZN5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
struct evaluator<CwiseNullaryOp<NullaryOp,PlainObjectType> >
 8008fda:	b580      	push	{r7, lr}
 8008fdc:	b082      	sub	sp, #8
 8008fde:	af00      	add	r7, sp, #0
 8008fe0:	6078      	str	r0, [r7, #4]
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f000 fb5a 	bl	800969c <_ZN5Eigen8internal14evaluator_baseINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	4618      	mov	r0, r3
 8008fec:	3708      	adds	r7, #8
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}

08008ff2 <_ZN5Eigen8internal9evaluatorIKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
struct evaluator<const T>
 8008ff2:	b580      	push	{r7, lr}
 8008ff4:	b082      	sub	sp, #8
 8008ff6:	af00      	add	r7, sp, #0
 8008ff8:	6078      	str	r0, [r7, #4]
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	f7ff ffec 	bl	8008fda <_ZN5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	4618      	mov	r0, r3
 8009006:	3708      	adds	r7, #8
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}

0800900c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE4DataD1Ev>:
  struct Data
 800900c:	b580      	push	{r7, lr}
 800900e:	b082      	sub	sp, #8
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	3308      	adds	r3, #8
 8009018:	4618      	mov	r0, r3
 800901a:	f7ff ffea 	bl	8008ff2 <_ZN5Eigen8internal9evaluatorIKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	3304      	adds	r3, #4
 8009022:	4618      	mov	r0, r3
 8009024:	f7ff ffcc 	bl	8008fc0 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	4618      	mov	r0, r3
 800902c:	3708      	adds	r7, #8
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}

08009032 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 8009032:	b580      	push	{r7, lr}
 8009034:	b082      	sub	sp, #8
 8009036:	af00      	add	r7, sp, #0
 8009038:	6078      	str	r0, [r7, #4]
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	4618      	mov	r0, r3
 800903e:	f7ff ffe5 	bl	800900c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE4DataD1Ev>
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f000 fb1f 	bl	8009686 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED1Ev>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	4618      	mov	r0, r3
 800904c:	3708      	adds	r7, #8
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}

08009052 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 8009052:	b580      	push	{r7, lr}
 8009054:	b082      	sub	sp, #8
 8009056:	af00      	add	r7, sp, #0
 8009058:	6078      	str	r0, [r7, #4]
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	4618      	mov	r0, r3
 800905e:	f7ff ffe8 	bl	8009032 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffED1Ev>
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	4618      	mov	r0, r3
 8009066:	3708      	adds	r7, #8
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}

0800906c <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 800906c:	b580      	push	{r7, lr}
 800906e:	b082      	sub	sp, #8
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	4618      	mov	r0, r3
 8009078:	f7fc fa05 	bl	8005486 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f000 fb18 	bl	80096b2 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	4618      	mov	r0, r3
 8009086:	3708      	adds	r7, #8
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}

0800908c <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 800908c:	b580      	push	{r7, lr}
 800908e:	b082      	sub	sp, #8
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	4618      	mov	r0, r3
 8009098:	f7ff ffe8 	bl	800906c <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedEfED1Ev>
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	4618      	mov	r0, r3
 80090a0:	3708      	adds	r7, #8
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}

080090a6 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEELi4ENS_10DenseShapeESI_ffED1Ev>:

template<int StorageOrder, int UnrollingIndex, typename Lhs, typename Rhs, typename Packet, int LoadMode>
struct etor_product_packet_impl;

template<typename Lhs, typename Rhs, int ProductTag>
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 80090a6:	b580      	push	{r7, lr}
 80090a8:	b082      	sub	sp, #8
 80090aa:	af00      	add	r7, sp, #0
 80090ac:	6078      	str	r0, [r7, #4]
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	3324      	adds	r3, #36	; 0x24
 80090b2:	4618      	mov	r0, r3
 80090b4:	f7ff ffea 	bl	800908c <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	3314      	adds	r3, #20
 80090bc:	4618      	mov	r0, r3
 80090be:	f7ff ffc8 	bl	8009052 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED1Ev>
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f000 fad4 	bl	8009670 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEED1Ev>
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	4618      	mov	r0, r3
 80090cc:	3708      	adds	r7, #8
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}

080090d2 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 80090d2:	b580      	push	{r7, lr}
 80090d4:	b082      	sub	sp, #8
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	6078      	str	r0, [r7, #4]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	4618      	mov	r0, r3
 80090de:	f7ff ffe2 	bl	80090a6 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEELi4ENS_10DenseShapeESI_ffED1Ev>
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	4618      	mov	r0, r3
 80090e6:	3708      	adds	r7, #8
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}

080090ec <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b096      	sub	sp, #88	; 0x58
 80090f0:	af02      	add	r7, sp, #8
 80090f2:	60f8      	str	r0, [r7, #12]
 80090f4:	60b9      	str	r1, [r7, #8]
 80090f6:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 80090f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80090fc:	68b9      	ldr	r1, [r7, #8]
 80090fe:	4618      	mov	r0, r3
 8009100:	f000 faa7 	bl	8009652 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1ERKSH_>
  resize_if_allowed(dst, src, func);
 8009104:	687a      	ldr	r2, [r7, #4]
 8009106:	68b9      	ldr	r1, [r7, #8]
 8009108:	68f8      	ldr	r0, [r7, #12]
 800910a:	f000 faf9 	bl	8009700 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 800910e:	f107 0320 	add.w	r3, r7, #32
 8009112:	68f9      	ldr	r1, [r7, #12]
 8009114:	4618      	mov	r0, r3
 8009116:	f7fe fc3b 	bl	8007990 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 800911a:	68f8      	ldr	r0, [r7, #12]
 800911c:	f7fe fca0 	bl	8007a60 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE18const_cast_derivedEv>
 8009120:	4603      	mov	r3, r0
 8009122:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8009126:	f107 0120 	add.w	r1, r7, #32
 800912a:	f107 0010 	add.w	r0, r7, #16
 800912e:	9300      	str	r3, [sp, #0]
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f000 fb2f 	bl	8009794 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSL_RKSN_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 8009136:	f107 0310 	add.w	r3, r7, #16
 800913a:	4618      	mov	r0, r3
 800913c:	f000 fb44 	bl	80097c8 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSP_>
  DstEvaluatorType dstEvaluator(dst);
 8009140:	f107 0320 	add.w	r3, r7, #32
 8009144:	4618      	mov	r0, r3
 8009146:	f7fe fa14 	bl	8007572 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 800914a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800914e:	4618      	mov	r0, r3
 8009150:	f7ff ffbf 	bl	80090d2 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEED1Ev>
}
 8009154:	bf00      	nop
 8009156:	3750      	adds	r7, #80	; 0x50
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}

0800915c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 800915c:	b580      	push	{r7, lr}
 800915e:	b082      	sub	sp, #8
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f7fc fb86 	bl	8005876 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800916a:	4603      	mov	r3, r0
 800916c:	4618      	mov	r0, r3
 800916e:	f7fb ff78 	bl	8005062 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8009172:	4603      	mov	r3, r0
 8009174:	4618      	mov	r0, r3
 8009176:	3708      	adds	r7, #8
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}

0800917c <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi4ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800917c:	b580      	push	{r7, lr}
 800917e:	b082      	sub	sp, #8
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8009184:	2104      	movs	r1, #4
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f7ff f8eb 	bl	8008362 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f000 fb26 	bl	80097de <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi5ELi9EE3runERS9_>
  }
 8009192:	bf00      	nop
 8009194:	3708      	adds	r7, #8
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}

0800919a <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800919a:	b480      	push	{r7}
 800919c:	b083      	sub	sp, #12
 800919e:	af00      	add	r7, sp, #0
 80091a0:	6078      	str	r0, [r7, #4]
    }
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	4618      	mov	r0, r3
 80091a6:	370c      	adds	r7, #12
 80091a8:	46bd      	mov	sp, r7
 80091aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ae:	4770      	bx	lr

080091b0 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 80091b0:	b480      	push	{r7}
 80091b2:	b083      	sub	sp, #12
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
 80091b8:	6039      	str	r1, [r7, #0]
}
 80091ba:	bf00      	nop
 80091bc:	370c      	adds	r7, #12
 80091be:	46bd      	mov	sp, r7
 80091c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c4:	4770      	bx	lr

080091c6 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEELi3ENS_10DenseShapeES7_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 80091c6:	b580      	push	{r7, lr}
 80091c8:	b082      	sub	sp, #8
 80091ca:	af00      	add	r7, sp, #0
 80091cc:	6078      	str	r0, [r7, #4]
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	330c      	adds	r3, #12
 80091d2:	4618      	mov	r0, r3
 80091d4:	f7fc f957 	bl	8005486 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	3308      	adds	r3, #8
 80091dc:	4618      	mov	r0, r3
 80091de:	f7fe f9c8 	bl	8007572 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f000 fb19 	bl	800981a <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEED1Ev>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	4618      	mov	r0, r3
 80091ec:	3708      	adds	r7, #8
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}

080091f2 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 80091f2:	b580      	push	{r7, lr}
 80091f4:	b082      	sub	sp, #8
 80091f6:	af00      	add	r7, sp, #0
 80091f8:	6078      	str	r0, [r7, #4]
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	4618      	mov	r0, r3
 80091fe:	f7ff ffe2 	bl	80091c6 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEELi3ENS_10DenseShapeES7_ffED1Ev>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	4618      	mov	r0, r3
 8009206:	3708      	adds	r7, #8
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}

0800920c <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 800920c:	b580      	push	{r7, lr}
 800920e:	b090      	sub	sp, #64	; 0x40
 8009210:	af02      	add	r7, sp, #8
 8009212:	60f8      	str	r0, [r7, #12]
 8009214:	60b9      	str	r1, [r7, #8]
 8009216:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 8009218:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800921c:	68b9      	ldr	r1, [r7, #8]
 800921e:	4618      	mov	r0, r3
 8009220:	f000 faec 	bl	80097fc <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1ERKS6_>
  resize_if_allowed(dst, src, func);
 8009224:	687a      	ldr	r2, [r7, #4]
 8009226:	68b9      	ldr	r1, [r7, #8]
 8009228:	68f8      	ldr	r0, [r7, #12]
 800922a:	f000 fb1d 	bl	8009868 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 800922e:	f107 0320 	add.w	r3, r7, #32
 8009232:	68f9      	ldr	r1, [r7, #12]
 8009234:	4618      	mov	r0, r3
 8009236:	f7fd fc60 	bl	8006afa <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 800923a:	68f8      	ldr	r0, [r7, #12]
 800923c:	f7fe fc9e 	bl	8007b7c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv>
 8009240:	4603      	mov	r3, r0
 8009242:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8009246:	f107 0120 	add.w	r1, r7, #32
 800924a:	f107 0010 	add.w	r0, r7, #16
 800924e:	9300      	str	r3, [sp, #0]
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f000 fb53 	bl	80098fc <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKS9_RKSB_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 8009256:	f107 0310 	add.w	r3, r7, #16
 800925a:	4618      	mov	r0, r3
 800925c:	f000 fb68 	bl	8009930 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSD_>
  DstEvaluatorType dstEvaluator(dst);
 8009260:	f107 0320 	add.w	r3, r7, #32
 8009264:	4618      	mov	r0, r3
 8009266:	f7fc f90e 	bl	8005486 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 800926a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800926e:	4618      	mov	r0, r3
 8009270:	f7ff ffbf 	bl	80091f2 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEED1Ev>
}
 8009274:	bf00      	nop
 8009276:	3738      	adds	r7, #56	; 0x38
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}

0800927c <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEELi3ENS_10DenseShapeES9_ffEC1ERKS8_>:
  explicit product_evaluator(const XprType& xpr)
 800927c:	b5b0      	push	{r4, r5, r7, lr}
 800927e:	b084      	sub	sp, #16
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
 8009284:	6039      	str	r1, [r7, #0]
    : m_result(xpr.rows(), xpr.cols())
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	4618      	mov	r0, r3
 800928a:	f000 fb5c 	bl	8009946 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	1d1c      	adds	r4, r3, #4
 8009292:	6838      	ldr	r0, [r7, #0]
 8009294:	f7fc fca0 	bl	8005bd8 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4rowsEv>
 8009298:	4603      	mov	r3, r0
 800929a:	60bb      	str	r3, [r7, #8]
 800929c:	6838      	ldr	r0, [r7, #0]
 800929e:	f7fc fca8 	bl	8005bf2 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4colsEv>
 80092a2:	4603      	mov	r3, r0
 80092a4:	60fb      	str	r3, [r7, #12]
 80092a6:	f107 020c 	add.w	r2, r7, #12
 80092aa:	f107 0308 	add.w	r3, r7, #8
 80092ae:	4619      	mov	r1, r3
 80092b0:	4620      	mov	r0, r4
 80092b2:	f000 fb55 	bl	8009960 <_ZN5Eigen6MatrixIfLi3ELi3ELi1ELi3ELi3EEC1IiiEERKT_RKT0_>
    ::new (static_cast<Base*>(this)) Base(m_result);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	4619      	mov	r1, r3
 80092ba:	2004      	movs	r0, #4
 80092bc:	f7f7 fe3e 	bl	8000f3c <_ZnwjPv>
 80092c0:	4602      	mov	r2, r0
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	3304      	adds	r3, #4
 80092c6:	4619      	mov	r1, r3
 80092c8:	4610      	mov	r0, r2
 80092ca:	f000 fb62 	bl	8009992 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1ERKS3_>
    generic_product_impl<Lhs, Rhs, LhsShape, RhsShape, ProductTag>::evalTo(m_result, xpr.lhs(), xpr.rhs());
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	1d1c      	adds	r4, r3, #4
 80092d2:	6838      	ldr	r0, [r7, #0]
 80092d4:	f000 fb6d 	bl	80099b2 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE3lhsEv>
 80092d8:	4605      	mov	r5, r0
 80092da:	6838      	ldr	r0, [r7, #0]
 80092dc:	f000 fb74 	bl	80099c8 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE3rhsEv>
 80092e0:	4603      	mov	r3, r0
 80092e2:	461a      	mov	r2, r3
 80092e4:	4629      	mov	r1, r5
 80092e6:	4620      	mov	r0, r4
 80092e8:	f000 fb7a 	bl	80099e0 <_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EENS_10DenseShapeES8_Li3EE6evalToINS3_IfLi3ELi3ELi1ELi3ELi3EEEEEvRT_RKS5_RKS7_>
  }
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	4618      	mov	r0, r3
 80092f0:	3710      	adds	r7, #16
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bdb0      	pop	{r4, r5, r7, pc}

080092f6 <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EE11outerStrideEv>:
  Index outerStride() const EIGEN_NOEXCEPT { return OuterStride; }
 80092f6:	b480      	push	{r7}
 80092f8:	b083      	sub	sp, #12
 80092fa:	af00      	add	r7, sp, #0
 80092fc:	6078      	str	r0, [r7, #4]
 80092fe:	2303      	movs	r3, #3
 8009300:	4618      	mov	r0, r3
 8009302:	370c      	adds	r7, #12
 8009304:	46bd      	mov	sp, r7
 8009306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930a:	4770      	bx	lr

0800930c <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE4Data4funcEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    const BinaryOp& func() const { return op; }
 800930c:	b480      	push	{r7}
 800930e:	b083      	sub	sp, #12
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	4618      	mov	r0, r3
 8009318:	370c      	adds	r7, #12
 800931a:	46bd      	mov	sp, r7
 800931c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009320:	4770      	bx	lr

08009322 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8009322:	b590      	push	{r4, r7, lr}
 8009324:	b085      	sub	sp, #20
 8009326:	af00      	add	r7, sp, #0
 8009328:	60f8      	str	r0, [r7, #12]
 800932a:	60b9      	str	r1, [r7, #8]
 800932c:	607a      	str	r2, [r7, #4]
      return m_d.data[row * m_d.outerStride() + col];
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681c      	ldr	r4, [r3, #0]
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	4618      	mov	r0, r3
 8009336:	f7ff ffde 	bl	80092f6 <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EE11outerStrideEv>
 800933a:	4602      	mov	r2, r0
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	fb03 f202 	mul.w	r2, r3, r2
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	4413      	add	r3, r2
 8009346:	009b      	lsls	r3, r3, #2
 8009348:	4423      	add	r3, r4
  }
 800934a:	4618      	mov	r0, r3
 800934c:	3714      	adds	r7, #20
 800934e:	46bd      	mov	sp, r7
 8009350:	bd90      	pop	{r4, r7, pc}

08009352 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8009352:	b590      	push	{r4, r7, lr}
 8009354:	b085      	sub	sp, #20
 8009356:	af00      	add	r7, sp, #0
 8009358:	60f8      	str	r0, [r7, #12]
 800935a:	60b9      	str	r1, [r7, #8]
 800935c:	607a      	str	r2, [r7, #4]
      return m_d.data[row + col * m_d.outerStride()];
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681c      	ldr	r4, [r3, #0]
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	4618      	mov	r0, r3
 8009366:	f7ff ffc6 	bl	80092f6 <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EE11outerStrideEv>
 800936a:	4602      	mov	r2, r0
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	fb03 f202 	mul.w	r2, r3, r2
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	4413      	add	r3, r2
 8009376:	009b      	lsls	r3, r3, #2
 8009378:	4423      	add	r3, r4
  }
 800937a:	4618      	mov	r0, r3
 800937c:	3714      	adds	r7, #20
 800937e:	46bd      	mov	sp, r7
 8009380:	bd90      	pop	{r4, r7, pc}

08009382 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 8009382:	b480      	push	{r7}
 8009384:	b085      	sub	sp, #20
 8009386:	af00      	add	r7, sp, #0
 8009388:	60f8      	str	r0, [r7, #12]
 800938a:	60b9      	str	r1, [r7, #8]
 800938c:	607a      	str	r2, [r7, #4]
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	ed93 7a00 	vldr	s14, [r3]
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	edd3 7a00 	vldr	s15, [r3]
 800939a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800939e:	eeb0 0a67 	vmov.f32	s0, s15
 80093a2:	3714      	adds	r7, #20
 80093a4:	46bd      	mov	sp, r7
 80093a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093aa:	4770      	bx	lr

080093ac <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b082      	sub	sp, #8
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 80093b4:	2201      	movs	r2, #1
 80093b6:	2101      	movs	r1, #1
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f7ff f8a2 	bl	8008502 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f000 fb2c 	bl	8009a1c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSL_>
  }
 80093c4:	bf00      	nop
 80093c6:	3708      	adds	r7, #8
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}

080093cc <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80093cc:	b480      	push	{r7}
 80093ce:	b083      	sub	sp, #12
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
    }
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	4618      	mov	r0, r3
 80093d8:	370c      	adds	r7, #12
 80093da:	46bd      	mov	sp, r7
 80093dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e0:	4770      	bx	lr

080093e2 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 80093e2:	b480      	push	{r7}
 80093e4:	b083      	sub	sp, #12
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	6078      	str	r0, [r7, #4]
 80093ea:	6039      	str	r1, [r7, #0]
}
 80093ec:	bf00      	nop
 80093ee:	370c      	adds	r7, #12
 80093f0:	46bd      	mov	sp, r7
 80093f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f6:	4770      	bx	lr

080093f8 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEED1Ev>:
struct evaluator<PlainObjectBase<Derived> >
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b082      	sub	sp, #8
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f000 fb35 	bl	8009a70 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	4618      	mov	r0, r3
 800940a:	3708      	adds	r7, #8
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}

08009410 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>:
struct evaluator<Matrix<Scalar, Rows, Cols, Options, MaxRows, MaxCols> >
 8009410:	b580      	push	{r7, lr}
 8009412:	b082      	sub	sp, #8
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	4618      	mov	r0, r3
 800941c:	f7ff ffec 	bl	80093f8 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEED1Ev>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	4618      	mov	r0, r3
 8009424:	3708      	adds	r7, #8
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}

0800942a <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEELi4ENS_10DenseShapeESL_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 800942a:	b580      	push	{r7, lr}
 800942c:	b082      	sub	sp, #8
 800942e:	af00      	add	r7, sp, #0
 8009430:	6078      	str	r0, [r7, #4]
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	3314      	adds	r3, #20
 8009436:	4618      	mov	r0, r3
 8009438:	f7ff ffea 	bl	8009410 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	3310      	adds	r3, #16
 8009440:	4618      	mov	r0, r3
 8009442:	f7fc f820 	bl	8005486 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f000 fb07 	bl	8009a5a <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEED1Ev>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	4618      	mov	r0, r3
 8009450:	3708      	adds	r7, #8
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}

08009456 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 8009456:	b580      	push	{r7, lr}
 8009458:	b082      	sub	sp, #8
 800945a:	af00      	add	r7, sp, #0
 800945c:	6078      	str	r0, [r7, #4]
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	4618      	mov	r0, r3
 8009462:	f7ff ffe2 	bl	800942a <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEELi4ENS_10DenseShapeESL_ffED1Ev>
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	4618      	mov	r0, r3
 800946a:	3708      	adds	r7, #8
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}

08009470 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 8009470:	b580      	push	{r7, lr}
 8009472:	b092      	sub	sp, #72	; 0x48
 8009474:	af02      	add	r7, sp, #8
 8009476:	60f8      	str	r0, [r7, #12]
 8009478:	60b9      	str	r1, [r7, #8]
 800947a:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 800947c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009480:	68b9      	ldr	r1, [r7, #8]
 8009482:	4618      	mov	r0, r3
 8009484:	f000 fada 	bl	8009a3c <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1ERKSK_>
  resize_if_allowed(dst, src, func);
 8009488:	687a      	ldr	r2, [r7, #4]
 800948a:	68b9      	ldr	r1, [r7, #8]
 800948c:	68f8      	ldr	r0, [r7, #12]
 800948e:	f000 fb15 	bl	8009abc <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 8009492:	f107 0320 	add.w	r3, r7, #32
 8009496:	68f9      	ldr	r1, [r7, #12]
 8009498:	4618      	mov	r0, r3
 800949a:	f7fd fb2e 	bl	8006afa <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 800949e:	68f8      	ldr	r0, [r7, #12]
 80094a0:	f7fe fb6c 	bl	8007b7c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv>
 80094a4:	4603      	mov	r3, r0
 80094a6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80094aa:	f107 0120 	add.w	r1, r7, #32
 80094ae:	f107 0010 	add.w	r0, r7, #16
 80094b2:	9300      	str	r3, [sp, #0]
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f000 fb4b 	bl	8009b50 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS6_INS6_IS9_S7_Li0EEESA_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSO_RKSQ_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 80094ba:	f107 0310 	add.w	r3, r7, #16
 80094be:	4618      	mov	r0, r3
 80094c0:	f000 fb60 	bl	8009b84 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSS_>
  DstEvaluatorType dstEvaluator(dst);
 80094c4:	f107 0320 	add.w	r3, r7, #32
 80094c8:	4618      	mov	r0, r3
 80094ca:	f7fb ffdc 	bl	8005486 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 80094ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80094d2:	4618      	mov	r0, r3
 80094d4:	f7ff ffbf 	bl	8009456 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEED1Ev>
}
 80094d8:	bf00      	nop
 80094da:	3740      	adds	r7, #64	; 0x40
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}

080094e0 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE11lazyProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEEEEKNSB_IS2_T_Li1EEERKNS0_ISG_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 80094e0:	b590      	push	{r4, r7, lr}
 80094e2:	b085      	sub	sp, #20
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	60f8      	str	r0, [r7, #12]
 80094e8:	60b9      	str	r1, [r7, #8]
 80094ea:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 80094ec:	68b8      	ldr	r0, [r7, #8]
 80094ee:	f7fb fffa 	bl	80054e6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80094f2:	4604      	mov	r4, r0
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f7fc ffd5 	bl	80064a4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEE7derivedEv>
 80094fa:	4603      	mov	r3, r0
 80094fc:	461a      	mov	r2, r3
 80094fe:	4621      	mov	r1, r4
 8009500:	68f8      	ldr	r0, [r7, #12]
 8009502:	f000 fb6f 	bl	8009be4 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EEC1ERKS2_RKSC_>
}
 8009506:	68f8      	ldr	r0, [r7, #12]
 8009508:	3714      	adds	r7, #20
 800950a:	46bd      	mov	sp, r7
 800950c:	bd90      	pop	{r4, r7, pc}

0800950e <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800950e:	b580      	push	{r7, lr}
 8009510:	b086      	sub	sp, #24
 8009512:	af00      	add	r7, sp, #0
 8009514:	60f8      	str	r0, [r7, #12]
 8009516:	60b9      	str	r1, [r7, #8]
 8009518:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800951e:	687a      	ldr	r2, [r7, #4]
 8009520:	68b9      	ldr	r1, [r7, #8]
 8009522:	6978      	ldr	r0, [r7, #20]
 8009524:	f000 fb8e 	bl	8009c44 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>
}
 8009528:	bf00      	nop
 800952a:	3718      	adds	r7, #24
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}

08009530 <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8009530:	b480      	push	{r7}
 8009532:	b083      	sub	sp, #12
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
    }
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	4618      	mov	r0, r3
 800953c:	370c      	adds	r7, #12
 800953e:	46bd      	mov	sp, r7
 8009540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009544:	4770      	bx	lr

08009546 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 8009546:	b580      	push	{r7, lr}
 8009548:	b082      	sub	sp, #8
 800954a:	af00      	add	r7, sp, #0
 800954c:	6078      	str	r0, [r7, #4]
 800954e:	6039      	str	r1, [r7, #0]
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	4618      	mov	r0, r3
 8009554:	f7fb fd85 	bl	8005062 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8009558:	4603      	mov	r3, r0
 800955a:	2b01      	cmp	r3, #1
 800955c:	dd08      	ble.n	8009570 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEEEvRKT_RKT0_+0x2a>
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	4618      	mov	r0, r3
 8009562:	f7fb fd73 	bl	800504c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8009566:	4603      	mov	r3, r0
 8009568:	2b01      	cmp	r3, #1
 800956a:	dd01      	ble.n	8009570 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEEEvRKT_RKT0_+0x2a>
 800956c:	2301      	movs	r3, #1
 800956e:	e000      	b.n	8009572 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEEEvRKT_RKT0_+0x2c>
 8009570:	2300      	movs	r3, #0
 8009572:	2b00      	cmp	r3, #0
 8009574:	d003      	beq.n	800957e <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEEEvRKT_RKT0_+0x38>
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
 8009576:	6839      	ldr	r1, [r7, #0]
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f000 fb76 	bl	8009c6a <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEELb0EE3runERS8_RKSE_>
}
 800957e:	bf00      	nop
 8009580:	3708      	adds	r7, #8
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}

08009586 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEELi3ENS_10DenseShapeESF_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 8009586:	b580      	push	{r7, lr}
 8009588:	b082      	sub	sp, #8
 800958a:	af00      	add	r7, sp, #0
 800958c:	6078      	str	r0, [r7, #4]
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	332c      	adds	r3, #44	; 0x2c
 8009592:	4618      	mov	r0, r3
 8009594:	f7fd ffed 	bl	8007572 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	3328      	adds	r3, #40	; 0x28
 800959c:	4618      	mov	r0, r3
 800959e:	f7fd ffe8 	bl	8007572 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f000 fb7b 	bl	8009c9e <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEED1Ev>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	4618      	mov	r0, r3
 80095ac:	3708      	adds	r7, #8
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}

080095b2 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 80095b2:	b580      	push	{r7, lr}
 80095b4:	b082      	sub	sp, #8
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	6078      	str	r0, [r7, #4]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	4618      	mov	r0, r3
 80095be:	f7ff ffe2 	bl	8009586 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEELi3ENS_10DenseShapeESF_ffED1Ev>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	4618      	mov	r0, r3
 80095c6:	3708      	adds	r7, #8
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}

080095cc <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b098      	sub	sp, #96	; 0x60
 80095d0:	af02      	add	r7, sp, #8
 80095d2:	60f8      	str	r0, [r7, #12]
 80095d4:	60b9      	str	r1, [r7, #8]
 80095d6:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 80095d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80095dc:	68b9      	ldr	r1, [r7, #8]
 80095de:	4618      	mov	r0, r3
 80095e0:	f000 fb4e 	bl	8009c80 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1ERKSE_>
  resize_if_allowed(dst, src, func);
 80095e4:	687a      	ldr	r2, [r7, #4]
 80095e6:	68b9      	ldr	r1, [r7, #8]
 80095e8:	68f8      	ldr	r0, [r7, #12]
 80095ea:	f000 fb7f 	bl	8009cec <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 80095ee:	f107 0320 	add.w	r3, r7, #32
 80095f2:	68f9      	ldr	r1, [r7, #12]
 80095f4:	4618      	mov	r0, r3
 80095f6:	f7fe f9cb 	bl	8007990 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 80095fa:	68f8      	ldr	r0, [r7, #12]
 80095fc:	f7fe fa30 	bl	8007a60 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE18const_cast_derivedEv>
 8009600:	4603      	mov	r3, r0
 8009602:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8009606:	f107 0120 	add.w	r1, r7, #32
 800960a:	f107 0010 	add.w	r0, r7, #16
 800960e:	9300      	str	r3, [sp, #0]
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f000 fbb5 	bl	8009d80 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSH_RKSJ_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 8009616:	f107 0310 	add.w	r3, r7, #16
 800961a:	4618      	mov	r0, r3
 800961c:	f000 fbca 	bl	8009db4 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSL_>
  DstEvaluatorType dstEvaluator(dst);
 8009620:	f107 0320 	add.w	r3, r7, #32
 8009624:	4618      	mov	r0, r3
 8009626:	f7fd ffa4 	bl	8007572 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 800962a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800962e:	4618      	mov	r0, r3
 8009630:	f7ff ffbf 	bl	80095b2 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEED1Ev>
}
 8009634:	bf00      	nop
 8009636:	3758      	adds	r7, #88	; 0x58
 8009638:	46bd      	mov	sp, r7
 800963a:	bd80      	pop	{r7, pc}

0800963c <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEELb0EE3runERKS3_RKSI_>:
    static void run(const Derived&, const OtherDerived&)
 800963c:	b480      	push	{r7}
 800963e:	b083      	sub	sp, #12
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
 8009644:	6039      	str	r1, [r7, #0]
    }
 8009646:	bf00      	nop
 8009648:	370c      	adds	r7, #12
 800964a:	46bd      	mov	sp, r7
 800964c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009650:	4770      	bx	lr

08009652 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1ERKSH_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8009652:	b580      	push	{r7, lr}
 8009654:	b082      	sub	sp, #8
 8009656:	af00      	add	r7, sp, #0
 8009658:	6078      	str	r0, [r7, #4]
 800965a:	6039      	str	r1, [r7, #0]
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	6839      	ldr	r1, [r7, #0]
 8009660:	4618      	mov	r0, r3
 8009662:	f000 fbb2 	bl	8009dca <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEELi4ENS_10DenseShapeESI_ffEC1ERKSH_>
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	4618      	mov	r0, r3
 800966a:	3708      	adds	r7, #8
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}

08009670 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8009670:	b480      	push	{r7}
 8009672:	b083      	sub	sp, #12
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	4618      	mov	r0, r3
 800967c:	370c      	adds	r7, #12
 800967e:	46bd      	mov	sp, r7
 8009680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009684:	4770      	bx	lr

08009686 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED1Ev>:
 8009686:	b480      	push	{r7}
 8009688:	b083      	sub	sp, #12
 800968a:	af00      	add	r7, sp, #0
 800968c:	6078      	str	r0, [r7, #4]
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	4618      	mov	r0, r3
 8009692:	370c      	adds	r7, #12
 8009694:	46bd      	mov	sp, r7
 8009696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969a:	4770      	bx	lr

0800969c <_ZN5Eigen8internal14evaluator_baseINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
 800969c:	b480      	push	{r7}
 800969e:	b083      	sub	sp, #12
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	4618      	mov	r0, r3
 80096a8:	370c      	adds	r7, #12
 80096aa:	46bd      	mov	sp, r7
 80096ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b0:	4770      	bx	lr

080096b2 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
 80096b2:	b480      	push	{r7}
 80096b4:	b083      	sub	sp, #12
 80096b6:	af00      	add	r7, sp, #0
 80096b8:	6078      	str	r0, [r7, #4]
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	4618      	mov	r0, r3
 80096be:	370c      	adds	r7, #12
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr

080096c8 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b082      	sub	sp, #8
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	4618      	mov	r0, r3
 80096d4:	f7fe fdad 	bl	8008232 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4rowsEv>
 80096d8:	4603      	mov	r3, r0
 80096da:	4618      	mov	r0, r3
 80096dc:	3708      	adds	r7, #8
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}

080096e2 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 80096e2:	b580      	push	{r7, lr}
 80096e4:	b082      	sub	sp, #8
 80096e6:	af00      	add	r7, sp, #0
 80096e8:	6078      	str	r0, [r7, #4]
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	3310      	adds	r3, #16
 80096ee:	4618      	mov	r0, r3
 80096f0:	f7fe fdad 	bl	800824e <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80096f4:	4603      	mov	r3, r0
 80096f6:	4618      	mov	r0, r3
 80096f8:	3708      	adds	r7, #8
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}
	...

08009700 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8009700:	b580      	push	{r7, lr}
 8009702:	b086      	sub	sp, #24
 8009704:	af00      	add	r7, sp, #0
 8009706:	60f8      	str	r0, [r7, #12]
 8009708:	60b9      	str	r1, [r7, #8]
 800970a:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 800970c:	68b8      	ldr	r0, [r7, #8]
 800970e:	f7ff ffdb 	bl	80096c8 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE4rowsEv>
 8009712:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8009714:	68b8      	ldr	r0, [r7, #8]
 8009716:	f7ff ffe4 	bl	80096e2 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE4colsEv>
 800971a:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	4618      	mov	r0, r3
 8009720:	f7fb fc9f 	bl	8005062 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8009724:	4602      	mov	r2, r0
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	4293      	cmp	r3, r2
 800972a:	d107      	bne.n	800973c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	4618      	mov	r0, r3
 8009730:	f7fb fc8c 	bl	800504c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8009734:	4602      	mov	r2, r0
 8009736:	693b      	ldr	r3, [r7, #16]
 8009738:	4293      	cmp	r3, r2
 800973a:	d001      	beq.n	8009740 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 800973c:	2301      	movs	r3, #1
 800973e:	e000      	b.n	8009742 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 8009740:	2300      	movs	r3, #0
 8009742:	2b00      	cmp	r3, #0
 8009744:	d005      	beq.n	8009752 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	693a      	ldr	r2, [r7, #16]
 800974a:	6979      	ldr	r1, [r7, #20]
 800974c:	4618      	mov	r0, r3
 800974e:	f7fe fba1 	bl	8007e94 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	4618      	mov	r0, r3
 8009756:	f7fb fc84 	bl	8005062 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800975a:	4602      	mov	r2, r0
 800975c:	697b      	ldr	r3, [r7, #20]
 800975e:	4293      	cmp	r3, r2
 8009760:	d107      	bne.n	8009772 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	4618      	mov	r0, r3
 8009766:	f7fb fc71 	bl	800504c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800976a:	4602      	mov	r2, r0
 800976c:	693b      	ldr	r3, [r7, #16]
 800976e:	4293      	cmp	r3, r2
 8009770:	d006      	beq.n	8009780 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 8009772:	4b05      	ldr	r3, [pc, #20]	; (8009788 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 8009774:	4a05      	ldr	r2, [pc, #20]	; (800978c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 8009776:	f240 21fd 	movw	r1, #765	; 0x2fd
 800977a:	4805      	ldr	r0, [pc, #20]	; (8009790 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 800977c:	f014 fb8a 	bl	801de94 <__assert_func>
}
 8009780:	bf00      	nop
 8009782:	3718      	adds	r7, #24
 8009784:	46bd      	mov	sp, r7
 8009786:	bd80      	pop	{r7, pc}
 8009788:	08022374 	.word	0x08022374
 800978c:	080239c8 	.word	0x080239c8
 8009790:	08022488 	.word	0x08022488

08009794 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSL_RKSN_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8009794:	b480      	push	{r7}
 8009796:	b085      	sub	sp, #20
 8009798:	af00      	add	r7, sp, #0
 800979a:	60f8      	str	r0, [r7, #12]
 800979c:	60b9      	str	r1, [r7, #8]
 800979e:	607a      	str	r2, [r7, #4]
 80097a0:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	68ba      	ldr	r2, [r7, #8]
 80097a6:	601a      	str	r2, [r3, #0]
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	687a      	ldr	r2, [r7, #4]
 80097ac:	605a      	str	r2, [r3, #4]
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	683a      	ldr	r2, [r7, #0]
 80097b2:	609a      	str	r2, [r3, #8]
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	69ba      	ldr	r2, [r7, #24]
 80097b8:	60da      	str	r2, [r3, #12]
  }
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	4618      	mov	r0, r3
 80097be:	3714      	adds	r7, #20
 80097c0:	46bd      	mov	sp, r7
 80097c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c6:	4770      	bx	lr

080097c8 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b082      	sub	sp, #8
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f000 fb32 	bl	8009e3a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSP_>
  }
 80097d6:	bf00      	nop
 80097d8:	3708      	adds	r7, #8
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}

080097de <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi5ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 80097de:	b580      	push	{r7, lr}
 80097e0:	b082      	sub	sp, #8
 80097e2:	af00      	add	r7, sp, #0
 80097e4:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 80097e6:	2105      	movs	r1, #5
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f7fe fdba 	bl	8008362 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f000 fb33 	bl	8009e5a <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi6ELi9EE3runERS9_>
  }
 80097f4:	bf00      	nop
 80097f6:	3708      	adds	r7, #8
 80097f8:	46bd      	mov	sp, r7
 80097fa:	bd80      	pop	{r7, pc}

080097fc <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1ERKS6_>:
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b082      	sub	sp, #8
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
 8009804:	6039      	str	r1, [r7, #0]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6839      	ldr	r1, [r7, #0]
 800980a:	4618      	mov	r0, r3
 800980c:	f000 fb34 	bl	8009e78 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEELi3ENS_10DenseShapeES7_ffEC1ERKS6_>
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	4618      	mov	r0, r3
 8009814:	3708      	adds	r7, #8
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}

0800981a <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEED1Ev>:
 800981a:	b480      	push	{r7}
 800981c:	b083      	sub	sp, #12
 800981e:	af00      	add	r7, sp, #0
 8009820:	6078      	str	r0, [r7, #4]
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	4618      	mov	r0, r3
 8009826:	370c      	adds	r7, #12
 8009828:	46bd      	mov	sp, r7
 800982a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982e:	4770      	bx	lr

08009830 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8009830:	b580      	push	{r7, lr}
 8009832:	b082      	sub	sp, #8
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	4618      	mov	r0, r3
 800983e:	f7fb fc10 	bl	8005062 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8009842:	4603      	mov	r3, r0
 8009844:	4618      	mov	r0, r3
 8009846:	3708      	adds	r7, #8
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}

0800984c <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 800984c:	b580      	push	{r7, lr}
 800984e:	b082      	sub	sp, #8
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	685b      	ldr	r3, [r3, #4]
 8009858:	4618      	mov	r0, r3
 800985a:	f7fb fc9d 	bl	8005198 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800985e:	4603      	mov	r3, r0
 8009860:	4618      	mov	r0, r3
 8009862:	3708      	adds	r7, #8
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}

08009868 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8009868:	b580      	push	{r7, lr}
 800986a:	b086      	sub	sp, #24
 800986c:	af00      	add	r7, sp, #0
 800986e:	60f8      	str	r0, [r7, #12]
 8009870:	60b9      	str	r1, [r7, #8]
 8009872:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8009874:	68b8      	ldr	r0, [r7, #8]
 8009876:	f7ff ffdb 	bl	8009830 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE4rowsEv>
 800987a:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 800987c:	68b8      	ldr	r0, [r7, #8]
 800987e:	f7ff ffe5 	bl	800984c <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE4colsEv>
 8009882:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	4618      	mov	r0, r3
 8009888:	f7fb fc91 	bl	80051ae <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800988c:	4602      	mov	r2, r0
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	4293      	cmp	r3, r2
 8009892:	d107      	bne.n	80098a4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	4618      	mov	r0, r3
 8009898:	f7fb fc7e 	bl	8005198 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800989c:	4602      	mov	r2, r0
 800989e:	693b      	ldr	r3, [r7, #16]
 80098a0:	4293      	cmp	r3, r2
 80098a2:	d001      	beq.n	80098a8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 80098a4:	2301      	movs	r3, #1
 80098a6:	e000      	b.n	80098aa <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 80098a8:	2300      	movs	r3, #0
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d005      	beq.n	80098ba <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	693a      	ldr	r2, [r7, #16]
 80098b2:	6979      	ldr	r1, [r7, #20]
 80098b4:	4618      	mov	r0, r3
 80098b6:	f7fe fb85 	bl	8007fc4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	4618      	mov	r0, r3
 80098be:	f7fb fc76 	bl	80051ae <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80098c2:	4602      	mov	r2, r0
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d107      	bne.n	80098da <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	4618      	mov	r0, r3
 80098ce:	f7fb fc63 	bl	8005198 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80098d2:	4602      	mov	r2, r0
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d006      	beq.n	80098e8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 80098da:	4b05      	ldr	r3, [pc, #20]	; (80098f0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 80098dc:	4a05      	ldr	r2, [pc, #20]	; (80098f4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 80098de:	f240 21fd 	movw	r1, #765	; 0x2fd
 80098e2:	4805      	ldr	r0, [pc, #20]	; (80098f8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 80098e4:	f014 fad6 	bl	801de94 <__assert_func>
}
 80098e8:	bf00      	nop
 80098ea:	3718      	adds	r7, #24
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}
 80098f0:	08022374 	.word	0x08022374
 80098f4:	08023ba8 	.word	0x08023ba8
 80098f8:	08022488 	.word	0x08022488

080098fc <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKS9_RKSB_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 80098fc:	b480      	push	{r7}
 80098fe:	b085      	sub	sp, #20
 8009900:	af00      	add	r7, sp, #0
 8009902:	60f8      	str	r0, [r7, #12]
 8009904:	60b9      	str	r1, [r7, #8]
 8009906:	607a      	str	r2, [r7, #4]
 8009908:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	68ba      	ldr	r2, [r7, #8]
 800990e:	601a      	str	r2, [r3, #0]
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	687a      	ldr	r2, [r7, #4]
 8009914:	605a      	str	r2, [r3, #4]
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	683a      	ldr	r2, [r7, #0]
 800991a:	609a      	str	r2, [r3, #8]
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	69ba      	ldr	r2, [r7, #24]
 8009920:	60da      	str	r2, [r3, #12]
  }
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	4618      	mov	r0, r3
 8009926:	3714      	adds	r7, #20
 8009928:	46bd      	mov	sp, r7
 800992a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992e:	4770      	bx	lr

08009930 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8009930:	b580      	push	{r7, lr}
 8009932:	b082      	sub	sp, #8
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f000 fad2 	bl	8009ee2 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSD_>
  }
 800993e:	bf00      	nop
 8009940:	3708      	adds	r7, #8
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}

08009946 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>:
  evaluator() {}
 8009946:	b580      	push	{r7, lr}
 8009948:	b082      	sub	sp, #8
 800994a:	af00      	add	r7, sp, #0
 800994c:	6078      	str	r0, [r7, #4]
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	4618      	mov	r0, r3
 8009952:	f000 fad5 	bl	8009f00 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEEC1Ev>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	4618      	mov	r0, r3
 800995a:	3708      	adds	r7, #8
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}

08009960 <_ZN5Eigen6MatrixIfLi3ELi3ELi1ELi3ELi3EEC1IiiEERKT_RKT0_>:
    Matrix(const T0& x, const T1& y)
 8009960:	b580      	push	{r7, lr}
 8009962:	b084      	sub	sp, #16
 8009964:	af00      	add	r7, sp, #0
 8009966:	60f8      	str	r0, [r7, #12]
 8009968:	60b9      	str	r1, [r7, #8]
 800996a:	607a      	str	r2, [r7, #4]
    {
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	4618      	mov	r0, r3
 8009970:	f000 fae4 	bl	8009f3c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>
      Base::_check_template_params();
 8009974:	f000 faf2 	bl	8009f5c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE22_check_template_paramsEv>
      Base::template _init2<T0,T1>(x, y);
 8009978:	68f8      	ldr	r0, [r7, #12]
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	6819      	ldr	r1, [r3, #0]
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681a      	ldr	r2, [r3, #0]
 8009982:	2300      	movs	r3, #0
 8009984:	f000 faf1 	bl	8009f6a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6_init2IiiEEviiPNS_8internal9enable_ifILb1ET_E4typeE>
    }
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	4618      	mov	r0, r3
 800998c:	3710      	adds	r7, #16
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}

08009992 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1ERKS3_>:
  explicit evaluator(const XprType& m)
 8009992:	b580      	push	{r7, lr}
 8009994:	b082      	sub	sp, #8
 8009996:	af00      	add	r7, sp, #0
 8009998:	6078      	str	r0, [r7, #4]
 800999a:	6039      	str	r1, [r7, #0]
    : evaluator<PlainObjectBase<XprType> >(m)
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	683a      	ldr	r2, [r7, #0]
 80099a0:	4611      	mov	r1, r2
 80099a2:	4618      	mov	r0, r3
 80099a4:	f000 faf5 	bl	8009f92 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEEC1ERKS5_>
  { }
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	4618      	mov	r0, r3
 80099ac:	3708      	adds	r7, #8
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}

080099b2 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 80099b2:	b480      	push	{r7}
 80099b4:	b083      	sub	sp, #12
 80099b6:	af00      	add	r7, sp, #0
 80099b8:	6078      	str	r0, [r7, #4]
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	4618      	mov	r0, r3
 80099be:	370c      	adds	r7, #12
 80099c0:	46bd      	mov	sp, r7
 80099c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c6:	4770      	bx	lr

080099c8 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 80099c8:	b480      	push	{r7}
 80099ca:	b083      	sub	sp, #12
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	3308      	adds	r3, #8
 80099d4:	4618      	mov	r0, r3
 80099d6:	370c      	adds	r7, #12
 80099d8:	46bd      	mov	sp, r7
 80099da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099de:	4770      	bx	lr

080099e0 <_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EENS_10DenseShapeES8_Li3EE6evalToINS3_IfLi3ELi3ELi1ELi3ELi3EEEEEvRT_RKS5_RKS7_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b088      	sub	sp, #32
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	60f8      	str	r0, [r7, #12]
 80099e8:	60b9      	str	r1, [r7, #8]
 80099ea:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 80099ec:	f107 0310 	add.w	r3, r7, #16
 80099f0:	687a      	ldr	r2, [r7, #4]
 80099f2:	68b9      	ldr	r1, [r7, #8]
 80099f4:	4618      	mov	r0, r3
 80099f6:	f000 fae7 	bl	8009fc8 <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEE11lazyProductINS_9TransposeIS3_EEEEKNS1_IS4_T_Li1EEERKNS0_IS9_EE>
 80099fa:	f107 031c 	add.w	r3, r7, #28
 80099fe:	4618      	mov	r0, r3
 8009a00:	f7fd fb5f 	bl	80070c2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8009a04:	f107 021c 	add.w	r2, r7, #28
 8009a08:	f107 0310 	add.w	r3, r7, #16
 8009a0c:	4619      	mov	r1, r3
 8009a0e:	68f8      	ldr	r0, [r7, #12]
 8009a10:	f000 faf1 	bl	8009ff6 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8009a14:	bf00      	nop
 8009a16:	3720      	adds	r7, #32
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}

08009a1c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b082      	sub	sp, #8
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8009a24:	2202      	movs	r2, #2
 8009a26:	2101      	movs	r1, #1
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f7fe fd6a 	bl	8008502 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f000 faf2 	bl	800a018 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSL_>
  }
 8009a34:	bf00      	nop
 8009a36:	3708      	adds	r7, #8
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}

08009a3c <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1ERKSK_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b082      	sub	sp, #8
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
 8009a44:	6039      	str	r1, [r7, #0]
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6839      	ldr	r1, [r7, #0]
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f000 faf4 	bl	800a038 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEELi4ENS_10DenseShapeESL_ffEC1ERKSK_>
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	4618      	mov	r0, r3
 8009a54:	3708      	adds	r7, #8
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}

08009a5a <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8009a5a:	b480      	push	{r7}
 8009a5c:	b083      	sub	sp, #12
 8009a5e:	af00      	add	r7, sp, #0
 8009a60:	6078      	str	r0, [r7, #4]
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	4618      	mov	r0, r3
 8009a66:	370c      	adds	r7, #12
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6e:	4770      	bx	lr

08009a70 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>:
 8009a70:	b480      	push	{r7}
 8009a72:	b083      	sub	sp, #12
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	370c      	adds	r7, #12
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a84:	4770      	bx	lr

08009a86 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8009a86:	b580      	push	{r7, lr}
 8009a88:	b082      	sub	sp, #8
 8009a8a:	af00      	add	r7, sp, #0
 8009a8c:	6078      	str	r0, [r7, #4]
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	4618      	mov	r0, r3
 8009a92:	f7fe fd5f 	bl	8008554 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4rowsEv>
 8009a96:	4603      	mov	r3, r0
 8009a98:	4618      	mov	r0, r3
 8009a9a:	3708      	adds	r7, #8
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bd80      	pop	{r7, pc}

08009aa0 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b082      	sub	sp, #8
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	3308      	adds	r3, #8
 8009aac:	4618      	mov	r0, r3
 8009aae:	f7fe fd5f 	bl	8008570 <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4colsEv>
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	3708      	adds	r7, #8
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}

08009abc <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b086      	sub	sp, #24
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	60f8      	str	r0, [r7, #12]
 8009ac4:	60b9      	str	r1, [r7, #8]
 8009ac6:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8009ac8:	68b8      	ldr	r0, [r7, #8]
 8009aca:	f7ff ffdc 	bl	8009a86 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE4rowsEv>
 8009ace:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8009ad0:	68b8      	ldr	r0, [r7, #8]
 8009ad2:	f7ff ffe5 	bl	8009aa0 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE4colsEv>
 8009ad6:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	4618      	mov	r0, r3
 8009adc:	f7fb fb67 	bl	80051ae <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8009ae0:	4602      	mov	r2, r0
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	d107      	bne.n	8009af8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	4618      	mov	r0, r3
 8009aec:	f7fb fb54 	bl	8005198 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8009af0:	4602      	mov	r2, r0
 8009af2:	693b      	ldr	r3, [r7, #16]
 8009af4:	4293      	cmp	r3, r2
 8009af6:	d001      	beq.n	8009afc <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 8009af8:	2301      	movs	r3, #1
 8009afa:	e000      	b.n	8009afe <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 8009afc:	2300      	movs	r3, #0
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d005      	beq.n	8009b0e <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	693a      	ldr	r2, [r7, #16]
 8009b06:	6979      	ldr	r1, [r7, #20]
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f7fe fa5b 	bl	8007fc4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	4618      	mov	r0, r3
 8009b12:	f7fb fb4c 	bl	80051ae <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8009b16:	4602      	mov	r2, r0
 8009b18:	697b      	ldr	r3, [r7, #20]
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d107      	bne.n	8009b2e <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	4618      	mov	r0, r3
 8009b22:	f7fb fb39 	bl	8005198 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8009b26:	4602      	mov	r2, r0
 8009b28:	693b      	ldr	r3, [r7, #16]
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d006      	beq.n	8009b3c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 8009b2e:	4b05      	ldr	r3, [pc, #20]	; (8009b44 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 8009b30:	4a05      	ldr	r2, [pc, #20]	; (8009b48 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 8009b32:	f240 21fd 	movw	r1, #765	; 0x2fd
 8009b36:	4805      	ldr	r0, [pc, #20]	; (8009b4c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8009b38:	f014 f9ac 	bl	801de94 <__assert_func>
}
 8009b3c:	bf00      	nop
 8009b3e:	3718      	adds	r7, #24
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd80      	pop	{r7, pc}
 8009b44:	08022374 	.word	0x08022374
 8009b48:	08023cbc 	.word	0x08023cbc
 8009b4c:	08022488 	.word	0x08022488

08009b50 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS6_INS6_IS9_S7_Li0EEESA_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSO_RKSQ_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8009b50:	b480      	push	{r7}
 8009b52:	b085      	sub	sp, #20
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	60f8      	str	r0, [r7, #12]
 8009b58:	60b9      	str	r1, [r7, #8]
 8009b5a:	607a      	str	r2, [r7, #4]
 8009b5c:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	68ba      	ldr	r2, [r7, #8]
 8009b62:	601a      	str	r2, [r3, #0]
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	687a      	ldr	r2, [r7, #4]
 8009b68:	605a      	str	r2, [r3, #4]
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	683a      	ldr	r2, [r7, #0]
 8009b6e:	609a      	str	r2, [r3, #8]
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	69ba      	ldr	r2, [r7, #24]
 8009b74:	60da      	str	r2, [r3, #12]
  }
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	4618      	mov	r0, r3
 8009b7a:	3714      	adds	r7, #20
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b82:	4770      	bx	lr

08009b84 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSS_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b082      	sub	sp, #8
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f000 fa8e 	bl	800a0ae <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSS_>
  }
 8009b92:	bf00      	nop
 8009b94:	3708      	adds	r7, #8
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}

08009b9a <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEEEC1Ev>:
 8009b9a:	b580      	push	{r7, lr}
 8009b9c:	b082      	sub	sp, #8
 8009b9e:	af00      	add	r7, sp, #0
 8009ba0:	6078      	str	r0, [r7, #4]
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f000 fa92 	bl	800a0cc <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEEEC1Ev>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	4618      	mov	r0, r3
 8009bac:	3708      	adds	r7, #8
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bd80      	pop	{r7, pc}

08009bb2 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1ELi4EEC1Ev>:
class dense_product_base
 8009bb2:	b580      	push	{r7, lr}
 8009bb4:	b082      	sub	sp, #8
 8009bb6:	af00      	add	r7, sp, #0
 8009bb8:	6078      	str	r0, [r7, #4]
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f7ff ffed 	bl	8009b9a <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEEEC1Ev>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	3708      	adds	r7, #8
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}

08009bca <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8009bca:	b580      	push	{r7, lr}
 8009bcc:	b082      	sub	sp, #8
 8009bce:	af00      	add	r7, sp, #0
 8009bd0:	6078      	str	r0, [r7, #4]
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f7ff ffed 	bl	8009bb2 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1ELi4EEC1Ev>
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	4618      	mov	r0, r3
 8009bdc:	3708      	adds	r7, #8
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bd80      	pop	{r7, pc}
	...

08009be4 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EEC1ERKS2_RKSC_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8009be4:	b590      	push	{r4, r7, lr}
 8009be6:	b085      	sub	sp, #20
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	60f8      	str	r0, [r7, #12]
 8009bec:	60b9      	str	r1, [r7, #8]
 8009bee:	607a      	str	r2, [r7, #4]
 8009bf0:	68f8      	ldr	r0, [r7, #12]
 8009bf2:	f7ff ffea 	bl	8009bca <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1ENS_5DenseEEC1Ev>
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	68ba      	ldr	r2, [r7, #8]
 8009bfa:	601a      	str	r2, [r3, #0]
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	3304      	adds	r3, #4
 8009c00:	6879      	ldr	r1, [r7, #4]
 8009c02:	4618      	mov	r0, r3
 8009c04:	f7fb f809 	bl	8004c1a <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERKSC_>
      eigen_assert(lhs.cols() == rhs.rows()
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f7fb fac4 	bl	8005198 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8009c10:	4604      	mov	r4, r0
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f7fc fc75 	bl	8006502 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE4rowsEv>
 8009c18:	4603      	mov	r3, r0
 8009c1a:	429c      	cmp	r4, r3
 8009c1c:	d005      	beq.n	8009c2a <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EEC1ERKS2_RKSC_+0x46>
 8009c1e:	4b06      	ldr	r3, [pc, #24]	; (8009c38 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EEC1ERKS2_RKSC_+0x54>)
 8009c20:	4a06      	ldr	r2, [pc, #24]	; (8009c3c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EEC1ERKS2_RKSC_+0x58>)
 8009c22:	2160      	movs	r1, #96	; 0x60
 8009c24:	4806      	ldr	r0, [pc, #24]	; (8009c40 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EEC1ERKS2_RKSC_+0x5c>)
 8009c26:	f014 f935 	bl	801de94 <__assert_func>
 8009c2a:	bf00      	nop
    }
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	4618      	mov	r0, r3
 8009c30:	3714      	adds	r7, #20
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bd90      	pop	{r4, r7, pc}
 8009c36:	bf00      	nop
 8009c38:	0801ffbc 	.word	0x0801ffbc
 8009c3c:	08023f00 	.word	0x08023f00
 8009c40:	0802030c 	.word	0x0802030c

08009c44 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b084      	sub	sp, #16
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	60f8      	str	r0, [r7, #12]
 8009c4c:	60b9      	str	r1, [r7, #8]
 8009c4e:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 8009c50:	68b9      	ldr	r1, [r7, #8]
 8009c52:	68f8      	ldr	r0, [r7, #12]
 8009c54:	f000 fa45 	bl	800a0e2 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 8009c58:	687a      	ldr	r2, [r7, #4]
 8009c5a:	68b9      	ldr	r1, [r7, #8]
 8009c5c:	68f8      	ldr	r0, [r7, #12]
 8009c5e:	f000 fa6e 	bl	800a13e <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8009c62:	bf00      	nop
 8009c64:	3710      	adds	r7, #16
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}

08009c6a <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEELb0EE3runERS8_RKSE_>:
    static void run(const Derived&, const OtherDerived&)
 8009c6a:	b480      	push	{r7}
 8009c6c:	b083      	sub	sp, #12
 8009c6e:	af00      	add	r7, sp, #0
 8009c70:	6078      	str	r0, [r7, #4]
 8009c72:	6039      	str	r1, [r7, #0]
    }
 8009c74:	bf00      	nop
 8009c76:	370c      	adds	r7, #12
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7e:	4770      	bx	lr

08009c80 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1ERKSE_>:
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b082      	sub	sp, #8
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
 8009c88:	6039      	str	r1, [r7, #0]
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6839      	ldr	r1, [r7, #0]
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f000 fa8d 	bl	800a1ae <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEELi3ENS_10DenseShapeESF_ffEC1ERKSE_>
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	4618      	mov	r0, r3
 8009c98:	3708      	adds	r7, #8
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bd80      	pop	{r7, pc}

08009c9e <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEED1Ev>:
 8009c9e:	b480      	push	{r7}
 8009ca0:	b083      	sub	sp, #12
 8009ca2:	af00      	add	r7, sp, #0
 8009ca4:	6078      	str	r0, [r7, #4]
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	4618      	mov	r0, r3
 8009caa:	370c      	adds	r7, #12
 8009cac:	46bd      	mov	sp, r7
 8009cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb2:	4770      	bx	lr

08009cb4 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b082      	sub	sp, #8
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f7fe fccc 	bl	800865c <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE4rowsEv>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3708      	adds	r7, #8
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}

08009cce <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8009cce:	b580      	push	{r7, lr}
 8009cd0:	b082      	sub	sp, #8
 8009cd2:	af00      	add	r7, sp, #0
 8009cd4:	6078      	str	r0, [r7, #4]
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	691b      	ldr	r3, [r3, #16]
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f7fb f9b6 	bl	800504c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	3708      	adds	r7, #8
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}
	...

08009cec <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b086      	sub	sp, #24
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	60f8      	str	r0, [r7, #12]
 8009cf4:	60b9      	str	r1, [r7, #8]
 8009cf6:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8009cf8:	68b8      	ldr	r0, [r7, #8]
 8009cfa:	f7ff ffdb 	bl	8009cb4 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE4rowsEv>
 8009cfe:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8009d00:	68b8      	ldr	r0, [r7, #8]
 8009d02:	f7ff ffe4 	bl	8009cce <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE4colsEv>
 8009d06:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f7fb f9a9 	bl	8005062 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8009d10:	4602      	mov	r2, r0
 8009d12:	697b      	ldr	r3, [r7, #20]
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d107      	bne.n	8009d28 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	f7fb f996 	bl	800504c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8009d20:	4602      	mov	r2, r0
 8009d22:	693b      	ldr	r3, [r7, #16]
 8009d24:	4293      	cmp	r3, r2
 8009d26:	d001      	beq.n	8009d2c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 8009d28:	2301      	movs	r3, #1
 8009d2a:	e000      	b.n	8009d2e <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d005      	beq.n	8009d3e <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	693a      	ldr	r2, [r7, #16]
 8009d36:	6979      	ldr	r1, [r7, #20]
 8009d38:	4618      	mov	r0, r3
 8009d3a:	f7fe f8ab 	bl	8007e94 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	4618      	mov	r0, r3
 8009d42:	f7fb f98e 	bl	8005062 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8009d46:	4602      	mov	r2, r0
 8009d48:	697b      	ldr	r3, [r7, #20]
 8009d4a:	4293      	cmp	r3, r2
 8009d4c:	d107      	bne.n	8009d5e <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	4618      	mov	r0, r3
 8009d52:	f7fb f97b 	bl	800504c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8009d56:	4602      	mov	r2, r0
 8009d58:	693b      	ldr	r3, [r7, #16]
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	d006      	beq.n	8009d6c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 8009d5e:	4b05      	ldr	r3, [pc, #20]	; (8009d74 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 8009d60:	4a05      	ldr	r2, [pc, #20]	; (8009d78 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 8009d62:	f240 21fd 	movw	r1, #765	; 0x2fd
 8009d66:	4805      	ldr	r0, [pc, #20]	; (8009d7c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8009d68:	f014 f894 	bl	801de94 <__assert_func>
}
 8009d6c:	bf00      	nop
 8009d6e:	3718      	adds	r7, #24
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bd80      	pop	{r7, pc}
 8009d74:	08022374 	.word	0x08022374
 8009d78:	0802416c 	.word	0x0802416c
 8009d7c:	08022488 	.word	0x08022488

08009d80 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSH_RKSJ_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8009d80:	b480      	push	{r7}
 8009d82:	b085      	sub	sp, #20
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	60f8      	str	r0, [r7, #12]
 8009d88:	60b9      	str	r1, [r7, #8]
 8009d8a:	607a      	str	r2, [r7, #4]
 8009d8c:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	68ba      	ldr	r2, [r7, #8]
 8009d92:	601a      	str	r2, [r3, #0]
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	687a      	ldr	r2, [r7, #4]
 8009d98:	605a      	str	r2, [r3, #4]
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	683a      	ldr	r2, [r7, #0]
 8009d9e:	609a      	str	r2, [r3, #8]
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	69ba      	ldr	r2, [r7, #24]
 8009da4:	60da      	str	r2, [r3, #12]
  }
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	4618      	mov	r0, r3
 8009daa:	3714      	adds	r7, #20
 8009dac:	46bd      	mov	sp, r7
 8009dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db2:	4770      	bx	lr

08009db4 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b082      	sub	sp, #8
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8009dbc:	6878      	ldr	r0, [r7, #4]
 8009dbe:	f000 fa2c 	bl	800a21a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSL_>
  }
 8009dc2:	bf00      	nop
 8009dc4:	3708      	adds	r7, #8
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}

08009dca <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEELi4ENS_10DenseShapeESI_ffEC1ERKSH_>:
  typedef Product<Lhs, Rhs, LazyProduct> XprType;
  typedef typename XprType::Scalar Scalar;
  typedef typename XprType::CoeffReturnType CoeffReturnType;

  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  explicit product_evaluator(const XprType& xpr)
 8009dca:	b590      	push	{r4, r7, lr}
 8009dcc:	b083      	sub	sp, #12
 8009dce:	af00      	add	r7, sp, #0
 8009dd0:	6078      	str	r0, [r7, #4]
 8009dd2:	6039      	str	r1, [r7, #0]
    : m_lhs(xpr.lhs()),
      m_rhs(xpr.rhs()),
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
                            //       or perhaps declare them on the fly on the packet method... We have experiment to check what's best.
      m_innerDim(xpr.lhs().cols())
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f000 fa47 	bl	800a268 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1Ev>
 8009dda:	687c      	ldr	r4, [r7, #4]
    : m_lhs(xpr.lhs()),
 8009ddc:	6838      	ldr	r0, [r7, #0]
 8009dde:	f000 fa2c 	bl	800a23a <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE3lhsEv>
 8009de2:	4603      	mov	r3, r0
      m_innerDim(xpr.lhs().cols())
 8009de4:	4619      	mov	r1, r3
 8009de6:	4620      	mov	r0, r4
 8009de8:	f7fa fcf8 	bl	80047dc <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERKSC_>
      m_rhs(xpr.rhs()),
 8009dec:	6838      	ldr	r0, [r7, #0]
 8009dee:	f000 fa2f 	bl	800a250 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE3rhsEv>
 8009df2:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	3310      	adds	r3, #16
 8009df8:	6812      	ldr	r2, [r2, #0]
 8009dfa:	601a      	str	r2, [r3, #0]
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	3314      	adds	r3, #20
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 8009e00:	687a      	ldr	r2, [r7, #4]
      m_innerDim(xpr.lhs().cols())
 8009e02:	4611      	mov	r1, r2
 8009e04:	4618      	mov	r0, r3
 8009e06:	f000 fa3a 	bl	800a27e <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC1ERKSD_>
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	f103 0224 	add.w	r2, r3, #36	; 0x24
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	3310      	adds	r3, #16
      m_innerDim(xpr.lhs().cols())
 8009e14:	4619      	mov	r1, r3
 8009e16:	4610      	mov	r0, r2
 8009e18:	f000 fa40 	bl	800a29c <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKS5_>
 8009e1c:	6838      	ldr	r0, [r7, #0]
 8009e1e:	f000 fa0c 	bl	800a23a <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE3lhsEv>
 8009e22:	4603      	mov	r3, r0
 8009e24:	4618      	mov	r0, r3
 8009e26:	f7fb fcc0 	bl	80057aa <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4colsEv>
 8009e2a:	4602      	mov	r2, r0
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	629a      	str	r2, [r3, #40]	; 0x28
    std::cerr << "CanVectorizeInner=    " << CanVectorizeInner << "\n";
    std::cerr << "EvalToRowMajor=       " << EvalToRowMajor << "\n";
    std::cerr << "Alignment=            " << Alignment << "\n";
    std::cerr << "Flags=                " << Flags << "\n";
#endif
  }
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	4618      	mov	r0, r3
 8009e34:	370c      	adds	r7, #12
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd90      	pop	{r4, r7, pc}

08009e3a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8009e3a:	b580      	push	{r7, lr}
 8009e3c:	b082      	sub	sp, #8
 8009e3e:	af00      	add	r7, sp, #0
 8009e40:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8009e42:	2200      	movs	r2, #0
 8009e44:	2100      	movs	r1, #0
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f000 fa37 	bl	800a2ba <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f000 fa4d 	bl	800a2ec <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSP_>
  }
 8009e52:	bf00      	nop
 8009e54:	3708      	adds	r7, #8
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}

08009e5a <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi6ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8009e5a:	b580      	push	{r7, lr}
 8009e5c:	b082      	sub	sp, #8
 8009e5e:	af00      	add	r7, sp, #0
 8009e60:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8009e62:	2106      	movs	r1, #6
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f7fe fa7c 	bl	8008362 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f000 fa4e 	bl	800a30c <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi7ELi9EE3runERS9_>
  }
 8009e70:	bf00      	nop
 8009e72:	3708      	adds	r7, #8
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}

08009e78 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEELi3ENS_10DenseShapeES7_ffEC1ERKS6_>:
  explicit product_evaluator(const XprType& xpr)
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b082      	sub	sp, #8
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
 8009e80:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f000 fa69 	bl	800a35a <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1Ev>
    : m_lhs(xpr.lhs()),
 8009e88:	6838      	ldr	r0, [r7, #0]
 8009e8a:	f000 fa4e 	bl	800a32a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE3lhsEv>
 8009e8e:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	601a      	str	r2, [r3, #0]
      m_rhs(xpr.rhs()),
 8009e94:	6838      	ldr	r0, [r7, #0]
 8009e96:	f000 fa54 	bl	800a342 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE3rhsEv>
 8009e9a:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	605a      	str	r2, [r3, #4]
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f103 0208 	add.w	r2, r3, #8
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
      m_innerDim(xpr.lhs().cols())
 8009eaa:	4619      	mov	r1, r3
 8009eac:	4610      	mov	r0, r2
 8009eae:	f7fd fd6f 	bl	8007990 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	f103 020c 	add.w	r2, r3, #12
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	685b      	ldr	r3, [r3, #4]
      m_innerDim(xpr.lhs().cols())
 8009ebc:	4619      	mov	r1, r3
 8009ebe:	4610      	mov	r0, r2
 8009ec0:	f7fc fe1b 	bl	8006afa <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 8009ec4:	6838      	ldr	r0, [r7, #0]
 8009ec6:	f000 fa30 	bl	800a32a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE3lhsEv>
 8009eca:	4603      	mov	r3, r0
 8009ecc:	4618      	mov	r0, r3
 8009ece:	f7fb f8bd 	bl	800504c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8009ed2:	4602      	mov	r2, r0
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	611a      	str	r2, [r3, #16]
  }
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	4618      	mov	r0, r3
 8009edc:	3708      	adds	r7, #8
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}

08009ee2 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8009ee2:	b580      	push	{r7, lr}
 8009ee4:	b082      	sub	sp, #8
 8009ee6:	af00      	add	r7, sp, #0
 8009ee8:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8009eea:	2100      	movs	r1, #0
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f000 fa3f 	bl	800a370 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f000 fa5f 	bl	800a3b6 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSD_>
  }
 8009ef8:	bf00      	nop
 8009efa:	3708      	adds	r7, #8
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}

08009f00 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEEC1Ev>:
  evaluator()
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b082      	sub	sp, #8
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
    : m_d(0,OuterStrideAtCompileTime)
 8009f08:	6878      	ldr	r0, [r7, #4]
 8009f0a:	f000 fa63 	bl	800a3d4 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2203      	movs	r2, #3
 8009f12:	2100      	movs	r1, #0
 8009f14:	4618      	mov	r0, r3
 8009f16:	f7fe fa05 	bl	8008324 <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EEC1EPKfi>
  }
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	3708      	adds	r7, #8
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}

08009f24 <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>:
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b082      	sub	sp, #8
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
 8009f2c:	6878      	ldr	r0, [r7, #4]
 8009f2e:	f000 fa5c 	bl	800a3ea <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	4618      	mov	r0, r3
 8009f36:	3708      	adds	r7, #8
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd80      	pop	{r7, pc}

08009f3c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>:
    EIGEN_STRONG_INLINE PlainObjectBase() : m_storage()
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b082      	sub	sp, #8
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	f7ff ffed 	bl	8009f24 <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	f000 fa57 	bl	800a400 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EEC1Ev>
    }
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	4618      	mov	r0, r3
 8009f56:	3708      	adds	r7, #8
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}

08009f5c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE22_check_template_paramsEv>:
    static EIGEN_STRONG_INLINE void _check_template_params()
 8009f5c:	b480      	push	{r7}
 8009f5e:	af00      	add	r7, sp, #0
    }
 8009f60:	bf00      	nop
 8009f62:	46bd      	mov	sp, r7
 8009f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f68:	4770      	bx	lr

08009f6a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6_init2IiiEEviiPNS_8internal9enable_ifILb1ET_E4typeE>:
    EIGEN_STRONG_INLINE void _init2(Index rows, Index cols, typename internal::enable_if<Base::SizeAtCompileTime!=2,T0>::type* = 0)
 8009f6a:	b580      	push	{r7, lr}
 8009f6c:	b086      	sub	sp, #24
 8009f6e:	af00      	add	r7, sp, #0
 8009f70:	60f8      	str	r0, [r7, #12]
 8009f72:	60b9      	str	r1, [r7, #8]
 8009f74:	607a      	str	r2, [r7, #4]
 8009f76:	603b      	str	r3, [r7, #0]
      const bool t0_is_integer_alike = internal::is_valid_index_type<T0>::value;
 8009f78:	2301      	movs	r3, #1
 8009f7a:	75fb      	strb	r3, [r7, #23]
      const bool t1_is_integer_alike = internal::is_valid_index_type<T1>::value;
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	75bb      	strb	r3, [r7, #22]
      resize(rows,cols);
 8009f80:	687a      	ldr	r2, [r7, #4]
 8009f82:	68b9      	ldr	r1, [r7, #8]
 8009f84:	68f8      	ldr	r0, [r7, #12]
 8009f86:	f000 fa49 	bl	800a41c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii>
    }
 8009f8a:	bf00      	nop
 8009f8c:	3718      	adds	r7, #24
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bd80      	pop	{r7, pc}

08009f92 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEEC1ERKS5_>:
  explicit evaluator(const PlainObjectType& m)
 8009f92:	b5b0      	push	{r4, r5, r7, lr}
 8009f94:	b082      	sub	sp, #8
 8009f96:	af00      	add	r7, sp, #0
 8009f98:	6078      	str	r0, [r7, #4]
 8009f9a:	6039      	str	r1, [r7, #0]
    : m_d(m.data(),IsVectorAtCompileTime ? 0 : m.outerStride())
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f000 fa19 	bl	800a3d4 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>
 8009fa2:	687c      	ldr	r4, [r7, #4]
 8009fa4:	6838      	ldr	r0, [r7, #0]
 8009fa6:	f000 fa6b 	bl	800a480 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4dataEv>
 8009faa:	4605      	mov	r5, r0
 8009fac:	6838      	ldr	r0, [r7, #0]
 8009fae:	f000 fa74 	bl	800a49a <_ZNK5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEELi3EE11outerStrideEv>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	461a      	mov	r2, r3
 8009fb6:	4629      	mov	r1, r5
 8009fb8:	4620      	mov	r0, r4
 8009fba:	f7fe f9b3 	bl	8008324 <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EEC1EPKfi>
  }
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	3708      	adds	r7, #8
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bdb0      	pop	{r4, r5, r7, pc}

08009fc8 <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEE11lazyProductINS_9TransposeIS3_EEEEKNS1_IS4_T_Li1EEERKNS0_IS9_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 8009fc8:	b590      	push	{r4, r7, lr}
 8009fca:	b085      	sub	sp, #20
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	60f8      	str	r0, [r7, #12]
 8009fd0:	60b9      	str	r1, [r7, #8]
 8009fd2:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 8009fd4:	68b8      	ldr	r0, [r7, #8]
 8009fd6:	f7fb fd4a 	bl	8005a6e <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEE7derivedEv>
 8009fda:	4604      	mov	r4, r0
 8009fdc:	6878      	ldr	r0, [r7, #4]
 8009fde:	f7fb fd51 	bl	8005a84 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	461a      	mov	r2, r3
 8009fe6:	4621      	mov	r1, r4
 8009fe8:	68f8      	ldr	r0, [r7, #12]
 8009fea:	f000 fa8b 	bl	800a504 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EEC1ERKS3_RKS5_>
}
 8009fee:	68f8      	ldr	r0, [r7, #12]
 8009ff0:	3714      	adds	r7, #20
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd90      	pop	{r4, r7, pc}

08009ff6 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8009ff6:	b580      	push	{r7, lr}
 8009ff8:	b086      	sub	sp, #24
 8009ffa:	af00      	add	r7, sp, #0
 8009ffc:	60f8      	str	r0, [r7, #12]
 8009ffe:	60b9      	str	r1, [r7, #8]
 800a000:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800a006:	687a      	ldr	r2, [r7, #4]
 800a008:	68b9      	ldr	r1, [r7, #8]
 800a00a:	6978      	ldr	r0, [r7, #20]
 800a00c:	f000 faaa 	bl	800a564 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_>
}
 800a010:	bf00      	nop
 800a012:	3718      	adds	r7, #24
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}

0800a018 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800a018:	b580      	push	{r7, lr}
 800a01a:	b082      	sub	sp, #8
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800a020:	2200      	movs	r2, #0
 800a022:	2102      	movs	r1, #2
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	f7fe fa6c 	bl	8008502 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f000 faad 	bl	800a58a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSL_>
  }
 800a030:	bf00      	nop
 800a032:	3708      	adds	r7, #8
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}

0800a038 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEELi4ENS_10DenseShapeESL_ffEC1ERKSK_>:
  explicit product_evaluator(const XprType& xpr)
 800a038:	b590      	push	{r4, r7, lr}
 800a03a:	b083      	sub	sp, #12
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
 800a040:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f000 fac8 	bl	800a5d8 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1Ev>
 800a048:	687c      	ldr	r4, [r7, #4]
    : m_lhs(xpr.lhs()),
 800a04a:	6838      	ldr	r0, [r7, #0]
 800a04c:	f000 faad 	bl	800a5aa <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE3lhsEv>
 800a050:	4603      	mov	r3, r0
      m_innerDim(xpr.lhs().cols())
 800a052:	4619      	mov	r1, r3
 800a054:	4620      	mov	r0, r4
 800a056:	f000 faca 	bl	800a5ee <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_7ProductINS0_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS0_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEERKT_>
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	f103 040c 	add.w	r4, r3, #12
      m_rhs(xpr.rhs()),
 800a060:	6838      	ldr	r0, [r7, #0]
 800a062:	f000 faad 	bl	800a5c0 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE3rhsEv>
 800a066:	4603      	mov	r3, r0
      m_innerDim(xpr.lhs().cols())
 800a068:	4619      	mov	r1, r3
 800a06a:	4620      	mov	r0, r4
 800a06c:	f000 fad4 	bl	800a618 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1INS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS8_INS0_IfLi1ELi3ELi1ELi1ELi3EEENS0_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS1_EEEEEERKT_>
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	3310      	adds	r3, #16
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 800a074:	687a      	ldr	r2, [r7, #4]
      m_innerDim(xpr.lhs().cols())
 800a076:	4611      	mov	r1, r2
 800a078:	4618      	mov	r0, r3
 800a07a:	f7fc fd3e 	bl	8006afa <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f103 0214 	add.w	r2, r3, #20
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	330c      	adds	r3, #12
      m_innerDim(xpr.lhs().cols())
 800a088:	4619      	mov	r1, r3
 800a08a:	4610      	mov	r0, r2
 800a08c:	f000 fad9 	bl	800a642 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
 800a090:	6838      	ldr	r0, [r7, #0]
 800a092:	f000 fa8a 	bl	800a5aa <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE3lhsEv>
 800a096:	4603      	mov	r3, r0
 800a098:	4618      	mov	r0, r3
 800a09a:	f7fc f8b2 	bl	8006202 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4colsEv>
 800a09e:	4602      	mov	r2, r0
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	619a      	str	r2, [r3, #24]
  }
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	370c      	adds	r7, #12
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bd90      	pop	{r4, r7, pc}

0800a0ae <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSS_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800a0ae:	b580      	push	{r7, lr}
 800a0b0:	b082      	sub	sp, #8
 800a0b2:	af00      	add	r7, sp, #0
 800a0b4:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800a0b6:	2100      	movs	r1, #0
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	f000 fad2 	bl	800a662 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS6_INS6_IS9_S7_Li0EEESA_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f000 faf2 	bl	800a6a8 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSS_>
  }
 800a0c4:	bf00      	nop
 800a0c6:	3708      	adds	r7, #8
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}

0800a0cc <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800a0cc:	b480      	push	{r7}
 800a0ce:	b083      	sub	sp, #12
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
    }
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	370c      	adds	r7, #12
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e0:	4770      	bx	lr

0800a0e2 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 800a0e2:	b480      	push	{r7}
 800a0e4:	b083      	sub	sp, #12
 800a0e6:	af00      	add	r7, sp, #0
 800a0e8:	6078      	str	r0, [r7, #4]
 800a0ea:	6039      	str	r1, [r7, #0]
}
 800a0ec:	bf00      	nop
 800a0ee:	370c      	adds	r7, #12
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f6:	4770      	bx	lr

0800a0f8 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEELi4ENS_10DenseShapeESF_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b082      	sub	sp, #8
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	330c      	adds	r3, #12
 800a104:	4618      	mov	r0, r3
 800a106:	f7ff f983 	bl	8009410 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	3308      	adds	r3, #8
 800a10e:	4618      	mov	r0, r3
 800a110:	f7fb f9b9 	bl	8005486 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f000 fae5 	bl	800a6e4 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEED1Ev>
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	4618      	mov	r0, r3
 800a11e:	3708      	adds	r7, #8
 800a120:	46bd      	mov	sp, r7
 800a122:	bd80      	pop	{r7, pc}

0800a124 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 800a124:	b580      	push	{r7, lr}
 800a126:	b082      	sub	sp, #8
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	4618      	mov	r0, r3
 800a130:	f7ff ffe2 	bl	800a0f8 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEELi4ENS_10DenseShapeESF_ffED1Ev>
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	4618      	mov	r0, r3
 800a138:	3708      	adds	r7, #8
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}

0800a13e <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 800a13e:	b580      	push	{r7, lr}
 800a140:	b090      	sub	sp, #64	; 0x40
 800a142:	af02      	add	r7, sp, #8
 800a144:	60f8      	str	r0, [r7, #12]
 800a146:	60b9      	str	r1, [r7, #8]
 800a148:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 800a14a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a14e:	68b9      	ldr	r1, [r7, #8]
 800a150:	4618      	mov	r0, r3
 800a152:	f000 fab8 	bl	800a6c6 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEC1ERKSE_>
  resize_if_allowed(dst, src, func);
 800a156:	687a      	ldr	r2, [r7, #4]
 800a158:	68b9      	ldr	r1, [r7, #8]
 800a15a:	68f8      	ldr	r0, [r7, #12]
 800a15c:	f000 faea 	bl	800a734 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>
  DstEvaluatorType dstEvaluator(dst);
 800a160:	f107 0320 	add.w	r3, r7, #32
 800a164:	68f9      	ldr	r1, [r7, #12]
 800a166:	4618      	mov	r0, r3
 800a168:	f7fc fcc7 	bl	8006afa <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 800a16c:	68f8      	ldr	r0, [r7, #12]
 800a16e:	f7fd fd05 	bl	8007b7c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv>
 800a172:	4603      	mov	r3, r0
 800a174:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800a178:	f107 0120 	add.w	r1, r7, #32
 800a17c:	f107 0010 	add.w	r0, r7, #16
 800a180:	9300      	str	r3, [sp, #0]
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	f000 fb04 	bl	800a790 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductIS4_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS6_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEC1ERS5_RKSH_RKSJ_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 800a188:	f107 0310 	add.w	r3, r7, #16
 800a18c:	4618      	mov	r0, r3
 800a18e:	f000 fb19 	bl	800a7c4 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi1ELi2EE3runERSL_>
  DstEvaluatorType dstEvaluator(dst);
 800a192:	f107 0320 	add.w	r3, r7, #32
 800a196:	4618      	mov	r0, r3
 800a198:	f7fb f975 	bl	8005486 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 800a19c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	f7ff ffbf 	bl	800a124 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEED1Ev>
}
 800a1a6:	bf00      	nop
 800a1a8:	3738      	adds	r7, #56	; 0x38
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}

0800a1ae <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEELi3ENS_10DenseShapeESF_ffEC1ERKSE_>:
  explicit product_evaluator(const XprType& xpr)
 800a1ae:	b590      	push	{r4, r7, lr}
 800a1b0:	b083      	sub	sp, #12
 800a1b2:	af00      	add	r7, sp, #0
 800a1b4:	6078      	str	r0, [r7, #4]
 800a1b6:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f000 fb25 	bl	800a808 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1Ev>
 800a1be:	687c      	ldr	r4, [r7, #4]
    : m_lhs(xpr.lhs()),
 800a1c0:	6838      	ldr	r0, [r7, #0]
 800a1c2:	f000 fb0a 	bl	800a7da <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE3lhsEv>
 800a1c6:	4603      	mov	r3, r0
      m_innerDim(xpr.lhs().cols())
 800a1c8:	4619      	mov	r1, r3
 800a1ca:	4620      	mov	r0, r4
 800a1cc:	f000 fb27 	bl	800a81e <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS_7ProductINS0_IfLi3ELi1ELi0ELi3ELi1EEENS0_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEERKT_>
      m_rhs(xpr.rhs()),
 800a1d0:	6838      	ldr	r0, [r7, #0]
 800a1d2:	f000 fb0d 	bl	800a7f0 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE3rhsEv>
 800a1d6:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	625a      	str	r2, [r3, #36]	; 0x24
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	3328      	adds	r3, #40	; 0x28
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 800a1e0:	687a      	ldr	r2, [r7, #4]
      m_innerDim(xpr.lhs().cols())
 800a1e2:	4611      	mov	r1, r2
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	f7fd fbd3 	bl	8007990 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f103 022c 	add.w	r2, r3, #44	; 0x2c
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      m_innerDim(xpr.lhs().cols())
 800a1f4:	4619      	mov	r1, r3
 800a1f6:	4610      	mov	r0, r2
 800a1f8:	f7fd fbca 	bl	8007990 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 800a1fc:	6838      	ldr	r0, [r7, #0]
 800a1fe:	f000 faec 	bl	800a7da <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE3lhsEv>
 800a202:	4603      	mov	r3, r0
 800a204:	4618      	mov	r0, r3
 800a206:	f7fc fb58 	bl	80068ba <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE4colsEv>
 800a20a:	4602      	mov	r2, r0
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	631a      	str	r2, [r3, #48]	; 0x30
  }
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	4618      	mov	r0, r3
 800a214:	370c      	adds	r7, #12
 800a216:	46bd      	mov	sp, r7
 800a218:	bd90      	pop	{r4, r7, pc}

0800a21a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800a21a:	b580      	push	{r7, lr}
 800a21c:	b082      	sub	sp, #8
 800a21e:	af00      	add	r7, sp, #0
 800a220:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800a222:	2200      	movs	r2, #0
 800a224:	2100      	movs	r1, #0
 800a226:	6878      	ldr	r0, [r7, #4]
 800a228:	f000 fb0e 	bl	800a848 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f000 fb24 	bl	800a87a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSL_>
  }
 800a232:	bf00      	nop
 800a234:	3708      	adds	r7, #8
 800a236:	46bd      	mov	sp, r7
 800a238:	bd80      	pop	{r7, pc}

0800a23a <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800a23a:	b480      	push	{r7}
 800a23c:	b083      	sub	sp, #12
 800a23e:	af00      	add	r7, sp, #0
 800a240:	6078      	str	r0, [r7, #4]
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	4618      	mov	r0, r3
 800a246:	370c      	adds	r7, #12
 800a248:	46bd      	mov	sp, r7
 800a24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24e:	4770      	bx	lr

0800a250 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800a250:	b480      	push	{r7}
 800a252:	b083      	sub	sp, #12
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	3310      	adds	r3, #16
 800a25c:	4618      	mov	r0, r3
 800a25e:	370c      	adds	r7, #12
 800a260:	46bd      	mov	sp, r7
 800a262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a266:	4770      	bx	lr

0800a268 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800a268:	b480      	push	{r7}
 800a26a:	b083      	sub	sp, #12
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	4618      	mov	r0, r3
 800a274:	370c      	adds	r7, #12
 800a276:	46bd      	mov	sp, r7
 800a278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27c:	4770      	bx	lr

0800a27e <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC1ERKSD_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800a27e:	b580      	push	{r7, lr}
 800a280:	b082      	sub	sp, #8
 800a282:	af00      	add	r7, sp, #0
 800a284:	6078      	str	r0, [r7, #4]
 800a286:	6039      	str	r1, [r7, #0]
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	6839      	ldr	r1, [r7, #0]
 800a28c:	4618      	mov	r0, r3
 800a28e:	f000 fb04 	bl	800a89a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffEC1ERKSD_>
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	4618      	mov	r0, r3
 800a296:	3708      	adds	r7, #8
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd80      	pop	{r7, pc}

0800a29c <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKS5_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b082      	sub	sp, #8
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
 800a2a4:	6039      	str	r1, [r7, #0]
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6839      	ldr	r1, [r7, #0]
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	f000 fb07 	bl	800a8be <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedEfEC1ERKS5_>
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	3708      	adds	r7, #8
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}

0800a2ba <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeffByOuterInner(Index outer, Index inner)
 800a2ba:	b580      	push	{r7, lr}
 800a2bc:	b086      	sub	sp, #24
 800a2be:	af00      	add	r7, sp, #0
 800a2c0:	60f8      	str	r0, [r7, #12]
 800a2c2:	60b9      	str	r1, [r7, #8]
 800a2c4:	607a      	str	r2, [r7, #4]
    Index row = rowIndexByOuterInner(outer, inner);
 800a2c6:	6879      	ldr	r1, [r7, #4]
 800a2c8:	68b8      	ldr	r0, [r7, #8]
 800a2ca:	f000 fb0e 	bl	800a8ea <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>
 800a2ce:	6178      	str	r0, [r7, #20]
    Index col = colIndexByOuterInner(outer, inner);
 800a2d0:	6879      	ldr	r1, [r7, #4]
 800a2d2:	68b8      	ldr	r0, [r7, #8]
 800a2d4:	f000 fb15 	bl	800a902 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>
 800a2d8:	6138      	str	r0, [r7, #16]
    assignCoeff(row, col);
 800a2da:	693a      	ldr	r2, [r7, #16]
 800a2dc:	6979      	ldr	r1, [r7, #20]
 800a2de:	68f8      	ldr	r0, [r7, #12]
 800a2e0:	f000 fb1b 	bl	800a91a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>
  }
 800a2e4:	bf00      	nop
 800a2e6:	3718      	adds	r7, #24
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bd80      	pop	{r7, pc}

0800a2ec <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b082      	sub	sp, #8
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800a2f4:	2201      	movs	r2, #1
 800a2f6:	2100      	movs	r1, #0
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	f7ff ffde 	bl	800a2ba <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f000 fb31 	bl	800a966 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSP_>
  }
 800a304:	bf00      	nop
 800a306:	3708      	adds	r7, #8
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}

0800a30c <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi7ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b082      	sub	sp, #8
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800a314:	2107      	movs	r1, #7
 800a316:	6878      	ldr	r0, [r7, #4]
 800a318:	f7fe f823 	bl	8008362 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a31c:	6878      	ldr	r0, [r7, #4]
 800a31e:	f000 fb32 	bl	800a986 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi8ELi9EE3runERS9_>
  }
 800a322:	bf00      	nop
 800a324:	3708      	adds	r7, #8
 800a326:	46bd      	mov	sp, r7
 800a328:	bd80      	pop	{r7, pc}

0800a32a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800a32a:	b480      	push	{r7}
 800a32c:	b083      	sub	sp, #12
 800a32e:	af00      	add	r7, sp, #0
 800a330:	6078      	str	r0, [r7, #4]
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	4618      	mov	r0, r3
 800a338:	370c      	adds	r7, #12
 800a33a:	46bd      	mov	sp, r7
 800a33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a340:	4770      	bx	lr

0800a342 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800a342:	b480      	push	{r7}
 800a344:	b083      	sub	sp, #12
 800a346:	af00      	add	r7, sp, #0
 800a348:	6078      	str	r0, [r7, #4]
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	685b      	ldr	r3, [r3, #4]
 800a34e:	4618      	mov	r0, r3
 800a350:	370c      	adds	r7, #12
 800a352:	46bd      	mov	sp, r7
 800a354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a358:	4770      	bx	lr

0800a35a <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800a35a:	b480      	push	{r7}
 800a35c:	b083      	sub	sp, #12
 800a35e:	af00      	add	r7, sp, #0
 800a360:	6078      	str	r0, [r7, #4]
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	4618      	mov	r0, r3
 800a366:	370c      	adds	r7, #12
 800a368:	46bd      	mov	sp, r7
 800a36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36e:	4770      	bx	lr

0800a370 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 800a370:	b5b0      	push	{r4, r5, r7, lr}
 800a372:	b084      	sub	sp, #16
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
 800a378:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	689c      	ldr	r4, [r3, #8]
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	6839      	ldr	r1, [r7, #0]
 800a384:	4618      	mov	r0, r3
 800a386:	f7fe fa52 	bl	800882e <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi>
 800a38a:	4605      	mov	r5, r0
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	685b      	ldr	r3, [r3, #4]
 800a390:	6839      	ldr	r1, [r7, #0]
 800a392:	4618      	mov	r0, r3
 800a394:	f000 fb06 	bl	800a9a4 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEELi3ENS_10DenseShapeES7_ffE5coeffEi>
 800a398:	eef0 7a40 	vmov.f32	s15, s0
 800a39c:	edc7 7a03 	vstr	s15, [r7, #12]
 800a3a0:	f107 030c 	add.w	r3, r7, #12
 800a3a4:	461a      	mov	r2, r3
 800a3a6:	4629      	mov	r1, r5
 800a3a8:	4620      	mov	r0, r4
 800a3aa:	f7fe f9f9 	bl	80087a0 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 800a3ae:	bf00      	nop
 800a3b0:	3710      	adds	r7, #16
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bdb0      	pop	{r4, r5, r7, pc}

0800a3b6 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800a3b6:	b580      	push	{r7, lr}
 800a3b8:	b082      	sub	sp, #8
 800a3ba:	af00      	add	r7, sp, #0
 800a3bc:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800a3be:	2101      	movs	r1, #1
 800a3c0:	6878      	ldr	r0, [r7, #4]
 800a3c2:	f7ff ffd5 	bl	800a370 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f000 fb25 	bl	800aa16 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSD_>
  }
 800a3cc:	bf00      	nop
 800a3ce:	3708      	adds	r7, #8
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bd80      	pop	{r7, pc}

0800a3d4 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>:
 800a3d4:	b480      	push	{r7}
 800a3d6:	b083      	sub	sp, #12
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	4618      	mov	r0, r3
 800a3e0:	370c      	adds	r7, #12
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e8:	4770      	bx	lr

0800a3ea <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800a3ea:	b480      	push	{r7}
 800a3ec:	b083      	sub	sp, #12
 800a3ee:	af00      	add	r7, sp, #0
 800a3f0:	6078      	str	r0, [r7, #4]
    }
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	370c      	adds	r7, #12
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fe:	4770      	bx	lr

0800a400 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EEC1Ev>:
    EIGEN_DEVICE_FUNC DenseStorage() {
 800a400:	b580      	push	{r7, lr}
 800a402:	b082      	sub	sp, #8
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	4618      	mov	r0, r3
 800a40c:	f000 fb12 	bl	800aa34 <_ZN5Eigen8internal11plain_arrayIfLi9ELi1ELi0EEC1Ev>
    }
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	4618      	mov	r0, r3
 800a414:	3708      	adds	r7, #8
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}
	...

0800a41c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii>:
    EIGEN_STRONG_INLINE void resize(Index rows, Index cols)
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b086      	sub	sp, #24
 800a420:	af00      	add	r7, sp, #0
 800a422:	60f8      	str	r0, [r7, #12]
 800a424:	60b9      	str	r1, [r7, #8]
 800a426:	607a      	str	r2, [r7, #4]
      eigen_assert(   EIGEN_IMPLIES(RowsAtCompileTime!=Dynamic,rows==RowsAtCompileTime)
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	2b03      	cmp	r3, #3
 800a42c:	d108      	bne.n	800a440 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii+0x24>
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	2b03      	cmp	r3, #3
 800a432:	d105      	bne.n	800a440 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii+0x24>
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	2b00      	cmp	r3, #0
 800a438:	db02      	blt.n	800a440 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii+0x24>
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	da06      	bge.n	800a44e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii+0x32>
 800a440:	4b0c      	ldr	r3, [pc, #48]	; (800a474 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii+0x58>)
 800a442:	4a0d      	ldr	r2, [pc, #52]	; (800a478 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii+0x5c>)
 800a444:	f240 1111 	movw	r1, #273	; 0x111
 800a448:	480c      	ldr	r0, [pc, #48]	; (800a47c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii+0x60>)
 800a44a:	f013 fd23 	bl	801de94 <__assert_func>
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	617b      	str	r3, [r7, #20]
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	613b      	str	r3, [r7, #16]
  }
 800a456:	bf00      	nop
        m_storage.resize(rows*cols, rows, cols);
 800a458:	68f8      	ldr	r0, [r7, #12]
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	687a      	ldr	r2, [r7, #4]
 800a45e:	fb02 f103 	mul.w	r1, r2, r3
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	68ba      	ldr	r2, [r7, #8]
 800a466:	f000 faf0 	bl	800aa4a <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE6resizeEiii>
    }
 800a46a:	bf00      	nop
 800a46c:	3718      	adds	r7, #24
 800a46e:	46bd      	mov	sp, r7
 800a470:	bd80      	pop	{r7, pc}
 800a472:	bf00      	nop
 800a474:	0802278c 	.word	0x0802278c
 800a478:	08024324 	.word	0x08024324
 800a47c:	080229a8 	.word	0x080229a8

0800a480 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4dataEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar *data() const
 800a480:	b580      	push	{r7, lr}
 800a482:	b082      	sub	sp, #8
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
    { return m_storage.data(); }
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	4618      	mov	r0, r3
 800a48c:	f000 faea 	bl	800aa64 <_ZNK5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE4dataEv>
 800a490:	4603      	mov	r3, r0
 800a492:	4618      	mov	r0, r3
 800a494:	3708      	adds	r7, #8
 800a496:	46bd      	mov	sp, r7
 800a498:	bd80      	pop	{r7, pc}

0800a49a <_ZNK5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEELi3EE11outerStrideEv>:
    inline Index outerStride() const EIGEN_NOEXCEPT
 800a49a:	b580      	push	{r7, lr}
 800a49c:	b082      	sub	sp, #8
 800a49e:	af00      	add	r7, sp, #0
 800a4a0:	6078      	str	r0, [r7, #4]
      return derived().outerStride();
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f000 fae9 	bl	800aa7a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE7derivedEv>
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	f000 faf0 	bl	800aa90 <_ZNK5Eigen6MatrixIfLi3ELi3ELi1ELi3ELi3EE11outerStrideEv>
 800a4b0:	4603      	mov	r3, r0
    }
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	3708      	adds	r7, #8
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	bd80      	pop	{r7, pc}

0800a4ba <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi1EEEEC1Ev>:
 800a4ba:	b580      	push	{r7, lr}
 800a4bc:	b082      	sub	sp, #8
 800a4be:	af00      	add	r7, sp, #0
 800a4c0:	6078      	str	r0, [r7, #4]
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	f000 faf0 	bl	800aaa8 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi1EEEEC1Ev>
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	3708      	adds	r7, #8
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}

0800a4d2 <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1ELi3EEC1Ev>:
class dense_product_base
 800a4d2:	b580      	push	{r7, lr}
 800a4d4:	b082      	sub	sp, #8
 800a4d6:	af00      	add	r7, sp, #0
 800a4d8:	6078      	str	r0, [r7, #4]
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f7ff ffed 	bl	800a4ba <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi1EEEEC1Ev>
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	3708      	adds	r7, #8
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	bd80      	pop	{r7, pc}

0800a4ea <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 800a4ea:	b580      	push	{r7, lr}
 800a4ec:	b082      	sub	sp, #8
 800a4ee:	af00      	add	r7, sp, #0
 800a4f0:	6078      	str	r0, [r7, #4]
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	f7ff ffed 	bl	800a4d2 <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1ELi3EEC1Ev>
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	3708      	adds	r7, #8
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}
	...

0800a504 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EEC1ERKS3_RKS5_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 800a504:	b590      	push	{r4, r7, lr}
 800a506:	b085      	sub	sp, #20
 800a508:	af00      	add	r7, sp, #0
 800a50a:	60f8      	str	r0, [r7, #12]
 800a50c:	60b9      	str	r1, [r7, #8]
 800a50e:	607a      	str	r2, [r7, #4]
 800a510:	68f8      	ldr	r0, [r7, #12]
 800a512:	f7ff ffea 	bl	800a4ea <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi1ENS_5DenseEEC1Ev>
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	68ba      	ldr	r2, [r7, #8]
 800a51a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a51e:	e883 0003 	stmia.w	r3, {r0, r1}
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	3308      	adds	r3, #8
 800a526:	687a      	ldr	r2, [r7, #4]
 800a528:	6812      	ldr	r2, [r2, #0]
 800a52a:	601a      	str	r2, [r3, #0]
      eigen_assert(lhs.cols() == rhs.rows()
 800a52c:	68b8      	ldr	r0, [r7, #8]
 800a52e:	f7fb fad8 	bl	8005ae2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4colsEv>
 800a532:	4604      	mov	r4, r0
 800a534:	6878      	ldr	r0, [r7, #4]
 800a536:	f7fb fae2 	bl	8005afe <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800a53a:	4603      	mov	r3, r0
 800a53c:	429c      	cmp	r4, r3
 800a53e:	d005      	beq.n	800a54c <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EEC1ERKS3_RKS5_+0x48>
 800a540:	4b05      	ldr	r3, [pc, #20]	; (800a558 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EEC1ERKS3_RKS5_+0x54>)
 800a542:	4a06      	ldr	r2, [pc, #24]	; (800a55c <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EEC1ERKS3_RKS5_+0x58>)
 800a544:	2160      	movs	r1, #96	; 0x60
 800a546:	4806      	ldr	r0, [pc, #24]	; (800a560 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EEC1ERKS3_RKS5_+0x5c>)
 800a548:	f013 fca4 	bl	801de94 <__assert_func>
 800a54c:	bf00      	nop
    }
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	4618      	mov	r0, r3
 800a552:	3714      	adds	r7, #20
 800a554:	46bd      	mov	sp, r7
 800a556:	bd90      	pop	{r4, r7, pc}
 800a558:	0801ffbc 	.word	0x0801ffbc
 800a55c:	080243b8 	.word	0x080243b8
 800a560:	0802030c 	.word	0x0802030c

0800a564 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 800a564:	b580      	push	{r7, lr}
 800a566:	b084      	sub	sp, #16
 800a568:	af00      	add	r7, sp, #0
 800a56a:	60f8      	str	r0, [r7, #12]
 800a56c:	60b9      	str	r1, [r7, #8]
 800a56e:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 800a570:	68b9      	ldr	r1, [r7, #8]
 800a572:	68f8      	ldr	r0, [r7, #12]
 800a574:	f000 fab9 	bl	800aaea <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 800a578:	687a      	ldr	r2, [r7, #4]
 800a57a:	68b9      	ldr	r1, [r7, #8]
 800a57c:	68f8      	ldr	r0, [r7, #12]
 800a57e:	f000 fb14 	bl	800abaa <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800a582:	bf00      	nop
 800a584:	3710      	adds	r7, #16
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}

0800a58a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800a58a:	b580      	push	{r7, lr}
 800a58c:	b082      	sub	sp, #8
 800a58e:	af00      	add	r7, sp, #0
 800a590:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800a592:	2201      	movs	r2, #1
 800a594:	2102      	movs	r1, #2
 800a596:	6878      	ldr	r0, [r7, #4]
 800a598:	f7fd ffb3 	bl	8008502 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a59c:	6878      	ldr	r0, [r7, #4]
 800a59e:	f000 fb3c 	bl	800ac1a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSL_>
  }
 800a5a2:	bf00      	nop
 800a5a4:	3708      	adds	r7, #8
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bd80      	pop	{r7, pc}

0800a5aa <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800a5aa:	b480      	push	{r7}
 800a5ac:	b083      	sub	sp, #12
 800a5ae:	af00      	add	r7, sp, #0
 800a5b0:	6078      	str	r0, [r7, #4]
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	370c      	adds	r7, #12
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5be:	4770      	bx	lr

0800a5c0 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800a5c0:	b480      	push	{r7}
 800a5c2:	b083      	sub	sp, #12
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	3308      	adds	r3, #8
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	370c      	adds	r7, #12
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d6:	4770      	bx	lr

0800a5d8 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1Ev>:
 800a5d8:	b480      	push	{r7}
 800a5da:	b083      	sub	sp, #12
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	370c      	adds	r7, #12
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ec:	4770      	bx	lr

0800a5ee <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_7ProductINS0_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS0_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEERKT_>:
    explicit Matrix(const T& x)
 800a5ee:	b580      	push	{r7, lr}
 800a5f0:	b082      	sub	sp, #8
 800a5f2:	af00      	add	r7, sp, #0
 800a5f4:	6078      	str	r0, [r7, #4]
 800a5f6:	6039      	str	r1, [r7, #0]
    {
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	f7fa fc75 	bl	8004eea <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
      Base::_check_template_params();
 800a600:	f7fa fc83 	bl	8004f0a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6839      	ldr	r1, [r7, #0]
 800a608:	4618      	mov	r0, r3
 800a60a:	f000 fb16 	bl	800ac3a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEESA_EEvRKNS_9DenseBaseIT0_EE>
    }
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	4618      	mov	r0, r3
 800a612:	3708      	adds	r7, #8
 800a614:	46bd      	mov	sp, r7
 800a616:	bd80      	pop	{r7, pc}

0800a618 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1INS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS8_INS0_IfLi1ELi3ELi1ELi1ELi3EEENS0_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS1_EEEEEERKT_>:
    explicit Matrix(const T& x)
 800a618:	b580      	push	{r7, lr}
 800a61a:	b082      	sub	sp, #8
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
 800a620:	6039      	str	r1, [r7, #0]
    {
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	4618      	mov	r0, r3
 800a626:	f7fa fc3d 	bl	8004ea4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
      Base::_check_template_params();
 800a62a:	f7fa fc4b 	bl	8004ec4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6839      	ldr	r1, [r7, #0]
 800a632:	4618      	mov	r0, r3
 800a634:	f000 fb0e 	bl	800ac54 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init1INS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS2_EEEESK_EEvRKNS_9DenseBaseIT0_EE>
    }
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	4618      	mov	r0, r3
 800a63c:	3708      	adds	r7, #8
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}

0800a642 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>:
  explicit evaluator(const XprType& m)
 800a642:	b580      	push	{r7, lr}
 800a644:	b082      	sub	sp, #8
 800a646:	af00      	add	r7, sp, #0
 800a648:	6078      	str	r0, [r7, #4]
 800a64a:	6039      	str	r1, [r7, #0]
    : evaluator<PlainObjectBase<XprType> >(m)
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	683a      	ldr	r2, [r7, #0]
 800a650:	4611      	mov	r1, r2
 800a652:	4618      	mov	r0, r3
 800a654:	f000 fb0b 	bl	800ac6e <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKS5_>
  { }
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	4618      	mov	r0, r3
 800a65c:	3708      	adds	r7, #8
 800a65e:	46bd      	mov	sp, r7
 800a660:	bd80      	pop	{r7, pc}

0800a662 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS6_INS6_IS9_S7_Li0EEESA_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 800a662:	b5b0      	push	{r4, r5, r7, lr}
 800a664:	b084      	sub	sp, #16
 800a666:	af00      	add	r7, sp, #0
 800a668:	6078      	str	r0, [r7, #4]
 800a66a:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	689c      	ldr	r4, [r3, #8]
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	6839      	ldr	r1, [r7, #0]
 800a676:	4618      	mov	r0, r3
 800a678:	f7fe f8d9 	bl	800882e <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi>
 800a67c:	4605      	mov	r5, r0
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	685b      	ldr	r3, [r3, #4]
 800a682:	6839      	ldr	r1, [r7, #0]
 800a684:	4618      	mov	r0, r3
 800a686:	f000 fb09 	bl	800ac9c <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEELi4ENS_10DenseShapeESL_ffE5coeffEi>
 800a68a:	eef0 7a40 	vmov.f32	s15, s0
 800a68e:	edc7 7a03 	vstr	s15, [r7, #12]
 800a692:	f107 030c 	add.w	r3, r7, #12
 800a696:	461a      	mov	r2, r3
 800a698:	4629      	mov	r1, r5
 800a69a:	4620      	mov	r0, r4
 800a69c:	f7fe f880 	bl	80087a0 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 800a6a0:	bf00      	nop
 800a6a2:	3710      	adds	r7, #16
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bdb0      	pop	{r4, r5, r7, pc}

0800a6a8 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSS_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b082      	sub	sp, #8
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800a6b0:	2101      	movs	r1, #1
 800a6b2:	6878      	ldr	r0, [r7, #4]
 800a6b4:	f7ff ffd5 	bl	800a662 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS6_INS6_IS9_S7_Li0EEESA_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a6b8:	6878      	ldr	r0, [r7, #4]
 800a6ba:	f000 fb28 	bl	800ad0e <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSS_>
  }
 800a6be:	bf00      	nop
 800a6c0:	3708      	adds	r7, #8
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}

0800a6c6 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEC1ERKSE_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800a6c6:	b580      	push	{r7, lr}
 800a6c8:	b082      	sub	sp, #8
 800a6ca:	af00      	add	r7, sp, #0
 800a6cc:	6078      	str	r0, [r7, #4]
 800a6ce:	6039      	str	r1, [r7, #0]
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	6839      	ldr	r1, [r7, #0]
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	f000 fb29 	bl	800ad2c <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEELi4ENS_10DenseShapeESF_ffEC1ERKSE_>
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	4618      	mov	r0, r3
 800a6de:	3708      	adds	r7, #8
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}

0800a6e4 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800a6e4:	b480      	push	{r7}
 800a6e6:	b083      	sub	sp, #12
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	370c      	adds	r7, #12
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f8:	4770      	bx	lr

0800a6fa <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 800a6fa:	b580      	push	{r7, lr}
 800a6fc:	b082      	sub	sp, #8
 800a6fe:	af00      	add	r7, sp, #0
 800a700:	6078      	str	r0, [r7, #4]
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	4618      	mov	r0, r3
 800a708:	f7fa fd51 	bl	80051ae <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800a70c:	4603      	mov	r3, r0
 800a70e:	4618      	mov	r0, r3
 800a710:	3708      	adds	r7, #8
 800a712:	46bd      	mov	sp, r7
 800a714:	bd80      	pop	{r7, pc}

0800a716 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 800a716:	b580      	push	{r7, lr}
 800a718:	b082      	sub	sp, #8
 800a71a:	af00      	add	r7, sp, #0
 800a71c:	6078      	str	r0, [r7, #4]
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	3304      	adds	r3, #4
 800a722:	4618      	mov	r0, r3
 800a724:	f7fc fc05 	bl	8006f32 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE4colsEv>
 800a728:	4603      	mov	r3, r0
 800a72a:	4618      	mov	r0, r3
 800a72c:	3708      	adds	r7, #8
 800a72e:	46bd      	mov	sp, r7
 800a730:	bd80      	pop	{r7, pc}
	...

0800a734 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const Functor &/*func*/)
 800a734:	b590      	push	{r4, r7, lr}
 800a736:	b085      	sub	sp, #20
 800a738:	af00      	add	r7, sp, #0
 800a73a:	60f8      	str	r0, [r7, #12]
 800a73c:	60b9      	str	r1, [r7, #8]
 800a73e:	607a      	str	r2, [r7, #4]
  eigen_assert(dst.rows() == src.rows() && dst.cols() == src.cols());
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	4618      	mov	r0, r3
 800a744:	f7fa fd33 	bl	80051ae <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800a748:	4604      	mov	r4, r0
 800a74a:	68b8      	ldr	r0, [r7, #8]
 800a74c:	f7ff ffd5 	bl	800a6fa <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE4rowsEv>
 800a750:	4603      	mov	r3, r0
 800a752:	429c      	cmp	r4, r3
 800a754:	d10a      	bne.n	800a76c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_+0x38>
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	4618      	mov	r0, r3
 800a75a:	f7fa fd1d 	bl	8005198 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800a75e:	4604      	mov	r4, r0
 800a760:	68b8      	ldr	r0, [r7, #8]
 800a762:	f7ff ffd8 	bl	800a716 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE4colsEv>
 800a766:	4603      	mov	r3, r0
 800a768:	429c      	cmp	r4, r3
 800a76a:	d006      	beq.n	800a77a <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_+0x46>
 800a76c:	4b05      	ldr	r3, [pc, #20]	; (800a784 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_+0x50>)
 800a76e:	4a06      	ldr	r2, [pc, #24]	; (800a788 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_+0x54>)
 800a770:	f240 21f2 	movw	r1, #754	; 0x2f2
 800a774:	4805      	ldr	r0, [pc, #20]	; (800a78c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_+0x58>)
 800a776:	f013 fb8d 	bl	801de94 <__assert_func>
}
 800a77a:	bf00      	nop
 800a77c:	3714      	adds	r7, #20
 800a77e:	46bd      	mov	sp, r7
 800a780:	bd90      	pop	{r4, r7, pc}
 800a782:	bf00      	nop
 800a784:	08022a90 	.word	0x08022a90
 800a788:	08024564 	.word	0x08024564
 800a78c:	08022488 	.word	0x08022488

0800a790 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductIS4_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS6_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEC1ERS5_RKSH_RKSJ_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 800a790:	b480      	push	{r7}
 800a792:	b085      	sub	sp, #20
 800a794:	af00      	add	r7, sp, #0
 800a796:	60f8      	str	r0, [r7, #12]
 800a798:	60b9      	str	r1, [r7, #8]
 800a79a:	607a      	str	r2, [r7, #4]
 800a79c:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	68ba      	ldr	r2, [r7, #8]
 800a7a2:	601a      	str	r2, [r3, #0]
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	687a      	ldr	r2, [r7, #4]
 800a7a8:	605a      	str	r2, [r3, #4]
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	683a      	ldr	r2, [r7, #0]
 800a7ae:	609a      	str	r2, [r3, #8]
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	69ba      	ldr	r2, [r7, #24]
 800a7b4:	60da      	str	r2, [r3, #12]
  }
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	3714      	adds	r7, #20
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c2:	4770      	bx	lr

0800a7c4 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi1ELi2EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b082      	sub	sp, #8
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	f000 fae6 	bl	800ad9e <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi0ELi3EE3runERSL_>
  }
 800a7d2:	bf00      	nop
 800a7d4:	3708      	adds	r7, #8
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}

0800a7da <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800a7da:	b480      	push	{r7}
 800a7dc:	b083      	sub	sp, #12
 800a7de:	af00      	add	r7, sp, #0
 800a7e0:	6078      	str	r0, [r7, #4]
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	370c      	adds	r7, #12
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ee:	4770      	bx	lr

0800a7f0 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800a7f0:	b480      	push	{r7}
 800a7f2:	b083      	sub	sp, #12
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	691b      	ldr	r3, [r3, #16]
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	370c      	adds	r7, #12
 800a800:	46bd      	mov	sp, r7
 800a802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a806:	4770      	bx	lr

0800a808 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800a808:	b480      	push	{r7}
 800a80a:	b083      	sub	sp, #12
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	4618      	mov	r0, r3
 800a814:	370c      	adds	r7, #12
 800a816:	46bd      	mov	sp, r7
 800a818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81c:	4770      	bx	lr

0800a81e <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS_7ProductINS0_IfLi3ELi1ELi0ELi3ELi1EEENS0_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEERKT_>:
    explicit Matrix(const T& x)
 800a81e:	b580      	push	{r7, lr}
 800a820:	b082      	sub	sp, #8
 800a822:	af00      	add	r7, sp, #0
 800a824:	6078      	str	r0, [r7, #4]
 800a826:	6039      	str	r1, [r7, #0]
    {
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	4618      	mov	r0, r3
 800a82c:	f7fa fb17 	bl	8004e5e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
      Base::_check_template_params();
 800a830:	f7fa fb25 	bl	8004e7e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	6839      	ldr	r1, [r7, #0]
 800a838:	4618      	mov	r0, r3
 800a83a:	f000 fabf 	bl	800adbc <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEESF_EEvRKNS_9DenseBaseIT0_EE>
    }
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	4618      	mov	r0, r3
 800a842:	3708      	adds	r7, #8
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}

0800a848 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeffByOuterInner(Index outer, Index inner)
 800a848:	b580      	push	{r7, lr}
 800a84a:	b086      	sub	sp, #24
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	60f8      	str	r0, [r7, #12]
 800a850:	60b9      	str	r1, [r7, #8]
 800a852:	607a      	str	r2, [r7, #4]
    Index row = rowIndexByOuterInner(outer, inner);
 800a854:	6879      	ldr	r1, [r7, #4]
 800a856:	68b8      	ldr	r0, [r7, #8]
 800a858:	f000 fabd 	bl	800add6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>
 800a85c:	6178      	str	r0, [r7, #20]
    Index col = colIndexByOuterInner(outer, inner);
 800a85e:	6879      	ldr	r1, [r7, #4]
 800a860:	68b8      	ldr	r0, [r7, #8]
 800a862:	f000 fac4 	bl	800adee <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>
 800a866:	6138      	str	r0, [r7, #16]
    assignCoeff(row, col);
 800a868:	693a      	ldr	r2, [r7, #16]
 800a86a:	6979      	ldr	r1, [r7, #20]
 800a86c:	68f8      	ldr	r0, [r7, #12]
 800a86e:	f000 faca 	bl	800ae06 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>
  }
 800a872:	bf00      	nop
 800a874:	3718      	adds	r7, #24
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}

0800a87a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800a87a:	b580      	push	{r7, lr}
 800a87c:	b082      	sub	sp, #8
 800a87e:	af00      	add	r7, sp, #0
 800a880:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800a882:	2201      	movs	r2, #1
 800a884:	2100      	movs	r1, #0
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	f7ff ffde 	bl	800a848 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a88c:	6878      	ldr	r0, [r7, #4]
 800a88e:	f000 fae0 	bl	800ae52 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSL_>
  }
 800a892:	bf00      	nop
 800a894:	3708      	adds	r7, #8
 800a896:	46bd      	mov	sp, r7
 800a898:	bd80      	pop	{r7, pc}

0800a89a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffEC1ERKSD_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 800a89a:	b580      	push	{r7, lr}
 800a89c:	b082      	sub	sp, #8
 800a89e:	af00      	add	r7, sp, #0
 800a8a0:	6078      	str	r0, [r7, #4]
 800a8a2:	6039      	str	r1, [r7, #0]
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	f000 fae4 	bl	800ae72 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC1Ev>
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6839      	ldr	r1, [r7, #0]
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	f000 faea 	bl	800ae88 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE4DataC1ERKSD_>
  }
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	3708      	adds	r7, #8
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bd80      	pop	{r7, pc}

0800a8be <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedEfEC1ERKS5_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 800a8be:	b590      	push	{r4, r7, lr}
 800a8c0:	b083      	sub	sp, #12
 800a8c2:	af00      	add	r7, sp, #0
 800a8c4:	6078      	str	r0, [r7, #4]
 800a8c6:	6039      	str	r1, [r7, #0]
 800a8c8:	6878      	ldr	r0, [r7, #4]
 800a8ca:	f000 fb11 	bl	800aef0 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 800a8ce:	687c      	ldr	r4, [r7, #4]
 800a8d0:	6838      	ldr	r0, [r7, #0]
 800a8d2:	f000 fb01 	bl	800aed8 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE16nestedExpressionEv>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	4619      	mov	r1, r3
 800a8da:	4620      	mov	r0, r4
 800a8dc:	f7fc f90d 	bl	8006afa <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	370c      	adds	r7, #12
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bd90      	pop	{r4, r7, pc}

0800a8ea <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index rowIndexByOuterInner(Index outer, Index inner)
 800a8ea:	b480      	push	{r7}
 800a8ec:	b083      	sub	sp, #12
 800a8ee:	af00      	add	r7, sp, #0
 800a8f0:	6078      	str	r0, [r7, #4]
 800a8f2:	6039      	str	r1, [r7, #0]
      : inner;
 800a8f4:	683b      	ldr	r3, [r7, #0]
  }
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	370c      	adds	r7, #12
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a900:	4770      	bx	lr

0800a902 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index colIndexByOuterInner(Index outer, Index inner)
 800a902:	b480      	push	{r7}
 800a904:	b083      	sub	sp, #12
 800a906:	af00      	add	r7, sp, #0
 800a908:	6078      	str	r0, [r7, #4]
 800a90a:	6039      	str	r1, [r7, #0]
      : outer;
 800a90c:	687b      	ldr	r3, [r7, #4]
  }
 800a90e:	4618      	mov	r0, r3
 800a910:	370c      	adds	r7, #12
 800a912:	46bd      	mov	sp, r7
 800a914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a918:	4770      	bx	lr

0800a91a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index row, Index col)
 800a91a:	b5b0      	push	{r4, r5, r7, lr}
 800a91c:	b086      	sub	sp, #24
 800a91e:	af00      	add	r7, sp, #0
 800a920:	60f8      	str	r0, [r7, #12]
 800a922:	60b9      	str	r1, [r7, #8]
 800a924:	607a      	str	r2, [r7, #4]
    m_functor.assignCoeff(m_dst.coeffRef(row,col), m_src.coeff(row,col));
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	689c      	ldr	r4, [r3, #8]
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	687a      	ldr	r2, [r7, #4]
 800a930:	68b9      	ldr	r1, [r7, #8]
 800a932:	4618      	mov	r0, r3
 800a934:	f7fe f9c4 	bl	8008cc0 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEii>
 800a938:	4605      	mov	r5, r0
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	685b      	ldr	r3, [r3, #4]
 800a93e:	687a      	ldr	r2, [r7, #4]
 800a940:	68b9      	ldr	r1, [r7, #8]
 800a942:	4618      	mov	r0, r3
 800a944:	f000 fadf 	bl	800af06 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEELi4ENS_10DenseShapeESI_ffE5coeffEii>
 800a948:	eef0 7a40 	vmov.f32	s15, s0
 800a94c:	edc7 7a05 	vstr	s15, [r7, #20]
 800a950:	f107 0314 	add.w	r3, r7, #20
 800a954:	461a      	mov	r2, r3
 800a956:	4629      	mov	r1, r5
 800a958:	4620      	mov	r0, r4
 800a95a:	f7fd ff21 	bl	80087a0 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 800a95e:	bf00      	nop
 800a960:	3718      	adds	r7, #24
 800a962:	46bd      	mov	sp, r7
 800a964:	bdb0      	pop	{r4, r5, r7, pc}

0800a966 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800a966:	b580      	push	{r7, lr}
 800a968:	b082      	sub	sp, #8
 800a96a:	af00      	add	r7, sp, #0
 800a96c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800a96e:	2202      	movs	r2, #2
 800a970:	2100      	movs	r1, #0
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	f7ff fca1 	bl	800a2ba <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a978:	6878      	ldr	r0, [r7, #4]
 800a97a:	f000 faf7 	bl	800af6c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSP_>
  }
 800a97e:	bf00      	nop
 800a980:	3708      	adds	r7, #8
 800a982:	46bd      	mov	sp, r7
 800a984:	bd80      	pop	{r7, pc}

0800a986 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi8ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800a986:	b580      	push	{r7, lr}
 800a988:	b082      	sub	sp, #8
 800a98a:	af00      	add	r7, sp, #0
 800a98c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800a98e:	2108      	movs	r1, #8
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	f7fd fce6 	bl	8008362 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a996:	6878      	ldr	r0, [r7, #4]
 800a998:	f000 faf8 	bl	800af8c <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi9ELi9EE3runERS9_>
  }
 800a99c:	bf00      	nop
 800a99e:	3708      	adds	r7, #8
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	bd80      	pop	{r7, pc}

0800a9a4 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEELi3ENS_10DenseShapeES7_ffE5coeffEi>:
  /* Allow index-based non-packet access. It is impossible though to allow index-based packed access,
   * which is why we don't set the LinearAccessBit.
   * TODO: this seems possible when the result is a vector
   */
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  const CoeffReturnType coeff(Index index) const
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b0a4      	sub	sp, #144	; 0x90
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
 800a9ac:	6039      	str	r1, [r7, #0]
  {
    const Index row = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? 0 : index;
 800a9ae:	683b      	ldr	r3, [r7, #0]
 800a9b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    const Index col = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? index : 0;
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	6819      	ldr	r1, [r3, #0]
 800a9be:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a9c2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	f000 faea 	bl	800afa0 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3rowEi>
 800a9cc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a9d0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800a9d4:	4611      	mov	r1, r2
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	f000 faf5 	bl	800afc6 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE9transposeEv>
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	6859      	ldr	r1, [r3, #4]
 800a9e0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	f000 fafe 	bl	800afe8 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE3colEi>
 800a9ec:	f107 030c 	add.w	r3, r7, #12
 800a9f0:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800a9f4:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	f000 fb08 	bl	800b00e <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IKNS3_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>
 800a9fe:	f107 030c 	add.w	r3, r7, #12
 800aa02:	4618      	mov	r0, r3
 800aa04:	f000 fb31 	bl	800b06a <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE3sumEv>
 800aa08:	eef0 7a40 	vmov.f32	s15, s0
  }
 800aa0c:	eeb0 0a67 	vmov.f32	s0, s15
 800aa10:	3790      	adds	r7, #144	; 0x90
 800aa12:	46bd      	mov	sp, r7
 800aa14:	bd80      	pop	{r7, pc}

0800aa16 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800aa16:	b580      	push	{r7, lr}
 800aa18:	b082      	sub	sp, #8
 800aa1a:	af00      	add	r7, sp, #0
 800aa1c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800aa1e:	2102      	movs	r1, #2
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	f7ff fca5 	bl	800a370 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f000 fb3a 	bl	800b0a0 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSD_>
  }
 800aa2c:	bf00      	nop
 800aa2e:	3708      	adds	r7, #8
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bd80      	pop	{r7, pc}

0800aa34 <_ZN5Eigen8internal11plain_arrayIfLi9ELi1ELi0EEC1Ev>:
  plain_array()
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b082      	sub	sp, #8
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
    check_static_allocation_size<T,Size>();
 800aa3c:	f7fc fbd4 	bl	80071e8 <_ZN5Eigen8internal28check_static_allocation_sizeIfLi9EEEvv>
  }
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	4618      	mov	r0, r3
 800aa44:	3708      	adds	r7, #8
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}

0800aa4a <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE6resizeEiii>:
    EIGEN_DEVICE_FUNC void resize(Index,Index,Index) {}
 800aa4a:	b480      	push	{r7}
 800aa4c:	b085      	sub	sp, #20
 800aa4e:	af00      	add	r7, sp, #0
 800aa50:	60f8      	str	r0, [r7, #12]
 800aa52:	60b9      	str	r1, [r7, #8]
 800aa54:	607a      	str	r2, [r7, #4]
 800aa56:	603b      	str	r3, [r7, #0]
 800aa58:	bf00      	nop
 800aa5a:	3714      	adds	r7, #20
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa62:	4770      	bx	lr

0800aa64 <_ZNK5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE4dataEv>:
    EIGEN_DEVICE_FUNC const T *data() const { return m_data.array; }
 800aa64:	b480      	push	{r7}
 800aa66:	b083      	sub	sp, #12
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	4618      	mov	r0, r3
 800aa70:	370c      	adds	r7, #12
 800aa72:	46bd      	mov	sp, r7
 800aa74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa78:	4770      	bx	lr

0800aa7a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800aa7a:	b480      	push	{r7}
 800aa7c:	b083      	sub	sp, #12
 800aa7e:	af00      	add	r7, sp, #0
 800aa80:	6078      	str	r0, [r7, #4]
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	4618      	mov	r0, r3
 800aa86:	370c      	adds	r7, #12
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8e:	4770      	bx	lr

0800aa90 <_ZNK5Eigen6MatrixIfLi3ELi3ELi1ELi3ELi3EE11outerStrideEv>:
    inline Index outerStride() const EIGEN_NOEXCEPT { return this->innerSize(); }
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b082      	sub	sp, #8
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	f000 fb0b 	bl	800b0b4 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE9innerSizeEv>
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	3708      	adds	r7, #8
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	bd80      	pop	{r7, pc}

0800aaa8 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800aaa8:	b480      	push	{r7}
 800aaaa:	b083      	sub	sp, #12
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
    }
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	4618      	mov	r0, r3
 800aab4:	370c      	adds	r7, #12
 800aab6:	46bd      	mov	sp, r7
 800aab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabc:	4770      	bx	lr

0800aabe <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_storage.rows(); }
 800aabe:	b580      	push	{r7, lr}
 800aac0:	b082      	sub	sp, #8
 800aac2:	af00      	add	r7, sp, #0
 800aac4:	6078      	str	r0, [r7, #4]
 800aac6:	f000 fb01 	bl	800b0cc <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE4rowsEv>
 800aaca:	4603      	mov	r3, r0
 800aacc:	4618      	mov	r0, r3
 800aace:	3708      	adds	r7, #8
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}

0800aad4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_storage.cols(); }
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b082      	sub	sp, #8
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
 800aadc:	f000 fafe 	bl	800b0dc <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE4colsEv>
 800aae0:	4603      	mov	r3, r0
 800aae2:	4618      	mov	r0, r3
 800aae4:	3708      	adds	r7, #8
 800aae6:	46bd      	mov	sp, r7
 800aae8:	bd80      	pop	{r7, pc}

0800aaea <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 800aaea:	b580      	push	{r7, lr}
 800aaec:	b082      	sub	sp, #8
 800aaee:	af00      	add	r7, sp, #0
 800aaf0:	6078      	str	r0, [r7, #4]
 800aaf2:	6039      	str	r1, [r7, #0]
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	f7ff ffe1 	bl	800aabe <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4rowsEv>
 800aafc:	4603      	mov	r3, r0
 800aafe:	2b01      	cmp	r3, #1
 800ab00:	dd08      	ble.n	800ab14 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEEEvRKT_RKT0_+0x2a>
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	4618      	mov	r0, r3
 800ab06:	f7ff ffe5 	bl	800aad4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4colsEv>
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	2b01      	cmp	r3, #1
 800ab0e:	dd01      	ble.n	800ab14 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEEEvRKT_RKT0_+0x2a>
 800ab10:	2301      	movs	r3, #1
 800ab12:	e000      	b.n	800ab16 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEEEvRKT_RKT0_+0x2c>
 800ab14:	2300      	movs	r3, #0
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d003      	beq.n	800ab22 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEEEvRKT_RKT0_+0x38>
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
 800ab1a:	6839      	ldr	r1, [r7, #0]
 800ab1c:	6878      	ldr	r0, [r7, #4]
 800ab1e:	f000 fae5 	bl	800b0ec <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEELb0EE3runERKS3_RKS9_>
}
 800ab22:	bf00      	nop
 800ab24:	3708      	adds	r7, #8
 800ab26:	46bd      	mov	sp, r7
 800ab28:	bd80      	pop	{r7, pc}

0800ab2a <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 800ab2a:	b580      	push	{r7, lr}
 800ab2c:	b082      	sub	sp, #8
 800ab2e:	af00      	add	r7, sp, #0
 800ab30:	6078      	str	r0, [r7, #4]
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	4618      	mov	r0, r3
 800ab36:	f7fc fd1c 	bl	8007572 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 800ab3a:	6878      	ldr	r0, [r7, #4]
 800ab3c:	f000 fafb 	bl	800b136 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEED1Ev>
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	4618      	mov	r0, r3
 800ab44:	3708      	adds	r7, #8
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd80      	pop	{r7, pc}

0800ab4a <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 800ab4a:	b580      	push	{r7, lr}
 800ab4c:	b082      	sub	sp, #8
 800ab4e:	af00      	add	r7, sp, #0
 800ab50:	6078      	str	r0, [r7, #4]
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	4618      	mov	r0, r3
 800ab56:	f7ff ffe8 	bl	800ab2a <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS0_10IndexBasedEfED1Ev>
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	3708      	adds	r7, #8
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bd80      	pop	{r7, pc}

0800ab64 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEELi3ENS_10DenseShapeES9_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b082      	sub	sp, #8
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	332c      	adds	r3, #44	; 0x2c
 800ab70:	4618      	mov	r0, r3
 800ab72:	f7ff ffea 	bl	800ab4a <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEED1Ev>
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	3328      	adds	r3, #40	; 0x28
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	f7fc fcf9 	bl	8007572 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 800ab80:	6878      	ldr	r0, [r7, #4]
 800ab82:	f000 facd 	bl	800b120 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEED1Ev>
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	4618      	mov	r0, r3
 800ab8a:	3708      	adds	r7, #8
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}

0800ab90 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b082      	sub	sp, #8
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	f7ff ffe2 	bl	800ab64 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEELi3ENS_10DenseShapeES9_ffED1Ev>
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	4618      	mov	r0, r3
 800aba4:	3708      	adds	r7, #8
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bd80      	pop	{r7, pc}

0800abaa <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 800abaa:	b580      	push	{r7, lr}
 800abac:	b098      	sub	sp, #96	; 0x60
 800abae:	af02      	add	r7, sp, #8
 800abb0:	60f8      	str	r0, [r7, #12]
 800abb2:	60b9      	str	r1, [r7, #8]
 800abb4:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 800abb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800abba:	68b9      	ldr	r1, [r7, #8]
 800abbc:	4618      	mov	r0, r3
 800abbe:	f000 faa0 	bl	800b102 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEEC1ERKS8_>
  resize_if_allowed(dst, src, func);
 800abc2:	687a      	ldr	r2, [r7, #4]
 800abc4:	68b9      	ldr	r1, [r7, #8]
 800abc6:	68f8      	ldr	r0, [r7, #12]
 800abc8:	f000 fadc 	bl	800b184 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 800abcc:	f107 0320 	add.w	r3, r7, #32
 800abd0:	68f9      	ldr	r1, [r7, #12]
 800abd2:	4618      	mov	r0, r3
 800abd4:	f7fe fedd 	bl	8009992 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 800abd8:	68f8      	ldr	r0, [r7, #12]
 800abda:	f000 fb1d 	bl	800b218 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE18const_cast_derivedEv>
 800abde:	4603      	mov	r3, r0
 800abe0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800abe4:	f107 0120 	add.w	r1, r7, #32
 800abe8:	f107 0010 	add.w	r0, r7, #16
 800abec:	9300      	str	r3, [sp, #0]
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	f000 fb1d 	bl	800b22e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSC_RKSE_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 800abf4:	f107 0310 	add.w	r3, r7, #16
 800abf8:	4618      	mov	r0, r3
 800abfa:	f000 fb32 	bl	800b262 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSG_>
  DstEvaluatorType dstEvaluator(dst);
 800abfe:	f107 0320 	add.w	r3, r7, #32
 800ac02:	4618      	mov	r0, r3
 800ac04:	f7fc fd8a 	bl	800771c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 800ac08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	f7ff ffbf 	bl	800ab90 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEED1Ev>
}
 800ac12:	bf00      	nop
 800ac14:	3758      	adds	r7, #88	; 0x58
 800ac16:	46bd      	mov	sp, r7
 800ac18:	bd80      	pop	{r7, pc}

0800ac1a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800ac1a:	b580      	push	{r7, lr}
 800ac1c:	b082      	sub	sp, #8
 800ac1e:	af00      	add	r7, sp, #0
 800ac20:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800ac22:	2202      	movs	r2, #2
 800ac24:	2102      	movs	r1, #2
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	f7fd fc6b 	bl	8008502 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	f000 fb23 	bl	800b278 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSL_>
  }
 800ac32:	bf00      	nop
 800ac34:	3708      	adds	r7, #8
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd80      	pop	{r7, pc}

0800ac3a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEESA_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 800ac3a:	b580      	push	{r7, lr}
 800ac3c:	b082      	sub	sp, #8
 800ac3e:	af00      	add	r7, sp, #0
 800ac40:	6078      	str	r0, [r7, #4]
 800ac42:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 800ac44:	6839      	ldr	r1, [r7, #0]
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	f000 fb20 	bl	800b28c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 800ac4c:	bf00      	nop
 800ac4e:	3708      	adds	r7, #8
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd80      	pop	{r7, pc}

0800ac54 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init1INS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS2_EEEESK_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b082      	sub	sp, #8
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
 800ac5c:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 800ac5e:	6839      	ldr	r1, [r7, #0]
 800ac60:	6878      	ldr	r0, [r7, #4]
 800ac62:	f000 fb34 	bl	800b2ce <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE12_set_noaliasINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS2_EEEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 800ac66:	bf00      	nop
 800ac68:	3708      	adds	r7, #8
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd80      	pop	{r7, pc}

0800ac6e <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKS5_>:
  explicit evaluator(const PlainObjectType& m)
 800ac6e:	b590      	push	{r4, r7, lr}
 800ac70:	b083      	sub	sp, #12
 800ac72:	af00      	add	r7, sp, #0
 800ac74:	6078      	str	r0, [r7, #4]
 800ac76:	6039      	str	r1, [r7, #0]
    : m_d(m.data(),IsVectorAtCompileTime ? 0 : m.outerStride())
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f000 fb56 	bl	800b32a <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
 800ac7e:	687c      	ldr	r4, [r7, #4]
 800ac80:	6838      	ldr	r0, [r7, #0]
 800ac82:	f000 fb45 	bl	800b310 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4dataEv>
 800ac86:	4603      	mov	r3, r0
 800ac88:	2200      	movs	r2, #0
 800ac8a:	4619      	mov	r1, r3
 800ac8c:	4620      	mov	r0, r4
 800ac8e:	f7fc fad8 	bl	8007242 <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EEC1EPKfi>
  }
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	4618      	mov	r0, r3
 800ac96:	370c      	adds	r7, #12
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bd90      	pop	{r4, r7, pc}

0800ac9c <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEELi4ENS_10DenseShapeESL_ffE5coeffEi>:
  const CoeffReturnType coeff(Index index) const
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b0a2      	sub	sp, #136	; 0x88
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
 800aca4:	6039      	str	r1, [r7, #0]
    const Index row = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? 0 : index;
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    const Index col = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? index : 0;
 800acac:	2300      	movs	r3, #0
 800acae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 800acb2:	6879      	ldr	r1, [r7, #4]
 800acb4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800acb8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800acbc:	4618      	mov	r0, r3
 800acbe:	f000 fb3f 	bl	800b340 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE3rowEi>
 800acc2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800acc6:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800acca:	4611      	mov	r1, r2
 800accc:	4618      	mov	r0, r3
 800acce:	f000 fb4a 	bl	800b366 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE9transposeEv>
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	f103 010c 	add.w	r1, r3, #12
 800acd8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800acdc:	2200      	movs	r2, #0
 800acde:	4618      	mov	r0, r3
 800ace0:	f000 fb52 	bl	800b388 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE3colEi>
 800ace4:	f107 030c 	add.w	r3, r7, #12
 800ace8:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800acec:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800acf0:	4618      	mov	r0, r3
 800acf2:	f000 fb5c 	bl	800b3ae <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE12cwiseProductINS2_IKNS3_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>
 800acf6:	f107 030c 	add.w	r3, r7, #12
 800acfa:	4618      	mov	r0, r3
 800acfc:	f000 fb85 	bl	800b40a <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE3sumEv>
 800ad00:	eef0 7a40 	vmov.f32	s15, s0
  }
 800ad04:	eeb0 0a67 	vmov.f32	s0, s15
 800ad08:	3788      	adds	r7, #136	; 0x88
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bd80      	pop	{r7, pc}

0800ad0e <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSS_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800ad0e:	b580      	push	{r7, lr}
 800ad10:	b082      	sub	sp, #8
 800ad12:	af00      	add	r7, sp, #0
 800ad14:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800ad16:	2102      	movs	r1, #2
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	f7ff fca2 	bl	800a662 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS6_INS6_IS9_S7_Li0EEESA_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	f000 fb8e 	bl	800b440 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSS_>
  }
 800ad24:	bf00      	nop
 800ad26:	3708      	adds	r7, #8
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	bd80      	pop	{r7, pc}

0800ad2c <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEELi4ENS_10DenseShapeESF_ffEC1ERKSE_>:
  explicit product_evaluator(const XprType& xpr)
 800ad2c:	b590      	push	{r4, r7, lr}
 800ad2e:	b083      	sub	sp, #12
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
 800ad34:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f000 fba4 	bl	800b484 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEC1Ev>
    : m_lhs(xpr.lhs()),
 800ad3c:	6838      	ldr	r0, [r7, #0]
 800ad3e:	f000 fb89 	bl	800b454 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE3lhsEv>
 800ad42:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	601a      	str	r2, [r3, #0]
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	1d1c      	adds	r4, r3, #4
      m_rhs(xpr.rhs()),
 800ad4c:	6838      	ldr	r0, [r7, #0]
 800ad4e:	f000 fb8d 	bl	800b46c <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE3rhsEv>
 800ad52:	4603      	mov	r3, r0
      m_innerDim(xpr.lhs().cols())
 800ad54:	4619      	mov	r1, r3
 800ad56:	4620      	mov	r0, r4
 800ad58:	f000 fb9f 	bl	800b49a <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS_7ProductINS0_IfLi1ELi3ELi1ELi1ELi3EEENS0_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEERKT_>
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	f103 0208 	add.w	r2, r3, #8
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
      m_innerDim(xpr.lhs().cols())
 800ad66:	4619      	mov	r1, r3
 800ad68:	4610      	mov	r0, r2
 800ad6a:	f7fb fec6 	bl	8006afa <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	f103 020c 	add.w	r2, r3, #12
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	3304      	adds	r3, #4
      m_innerDim(xpr.lhs().cols())
 800ad78:	4619      	mov	r1, r3
 800ad7a:	4610      	mov	r0, r2
 800ad7c:	f7ff fc61 	bl	800a642 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
 800ad80:	6838      	ldr	r0, [r7, #0]
 800ad82:	f000 fb67 	bl	800b454 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE3lhsEv>
 800ad86:	4603      	mov	r3, r0
 800ad88:	4618      	mov	r0, r3
 800ad8a:	f7fa fa05 	bl	8005198 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800ad8e:	4602      	mov	r2, r0
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	611a      	str	r2, [r3, #16]
  }
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	4618      	mov	r0, r3
 800ad98:	370c      	adds	r7, #12
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bd90      	pop	{r4, r7, pc}

0800ad9e <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi0ELi3EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800ad9e:	b580      	push	{r7, lr}
 800ada0:	b082      	sub	sp, #8
 800ada2:	af00      	add	r7, sp, #0
 800ada4:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800ada6:	2100      	movs	r1, #0
 800ada8:	6878      	ldr	r0, [r7, #4]
 800adaa:	f000 fb8b 	bl	800b4c4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductIS4_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS6_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800adae:	6878      	ldr	r0, [r7, #4]
 800adb0:	f000 fbab 	bl	800b50a <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi1ELi3EE3runERSL_>
  }
 800adb4:	bf00      	nop
 800adb6:	3708      	adds	r7, #8
 800adb8:	46bd      	mov	sp, r7
 800adba:	bd80      	pop	{r7, pc}

0800adbc <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEESF_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b082      	sub	sp, #8
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
 800adc4:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 800adc6:	6839      	ldr	r1, [r7, #0]
 800adc8:	6878      	ldr	r0, [r7, #4]
 800adca:	f000 fbad 	bl	800b528 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 800adce:	bf00      	nop
 800add0:	3708      	adds	r7, #8
 800add2:	46bd      	mov	sp, r7
 800add4:	bd80      	pop	{r7, pc}

0800add6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index rowIndexByOuterInner(Index outer, Index inner)
 800add6:	b480      	push	{r7}
 800add8:	b083      	sub	sp, #12
 800adda:	af00      	add	r7, sp, #0
 800addc:	6078      	str	r0, [r7, #4]
 800adde:	6039      	str	r1, [r7, #0]
      : inner;
 800ade0:	683b      	ldr	r3, [r7, #0]
  }
 800ade2:	4618      	mov	r0, r3
 800ade4:	370c      	adds	r7, #12
 800ade6:	46bd      	mov	sp, r7
 800ade8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adec:	4770      	bx	lr

0800adee <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index colIndexByOuterInner(Index outer, Index inner)
 800adee:	b480      	push	{r7}
 800adf0:	b083      	sub	sp, #12
 800adf2:	af00      	add	r7, sp, #0
 800adf4:	6078      	str	r0, [r7, #4]
 800adf6:	6039      	str	r1, [r7, #0]
      : outer;
 800adf8:	687b      	ldr	r3, [r7, #4]
  }
 800adfa:	4618      	mov	r0, r3
 800adfc:	370c      	adds	r7, #12
 800adfe:	46bd      	mov	sp, r7
 800ae00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae04:	4770      	bx	lr

0800ae06 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index row, Index col)
 800ae06:	b5b0      	push	{r4, r5, r7, lr}
 800ae08:	b086      	sub	sp, #24
 800ae0a:	af00      	add	r7, sp, #0
 800ae0c:	60f8      	str	r0, [r7, #12]
 800ae0e:	60b9      	str	r1, [r7, #8]
 800ae10:	607a      	str	r2, [r7, #4]
    m_functor.assignCoeff(m_dst.coeffRef(row,col), m_src.coeff(row,col));
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	689c      	ldr	r4, [r3, #8]
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	687a      	ldr	r2, [r7, #4]
 800ae1c:	68b9      	ldr	r1, [r7, #8]
 800ae1e:	4618      	mov	r0, r3
 800ae20:	f7fd ff4e 	bl	8008cc0 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEii>
 800ae24:	4605      	mov	r5, r0
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	685b      	ldr	r3, [r3, #4]
 800ae2a:	687a      	ldr	r2, [r7, #4]
 800ae2c:	68b9      	ldr	r1, [r7, #8]
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f000 fb9b 	bl	800b56a <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEELi3ENS_10DenseShapeESF_ffE5coeffEii>
 800ae34:	eef0 7a40 	vmov.f32	s15, s0
 800ae38:	edc7 7a05 	vstr	s15, [r7, #20]
 800ae3c:	f107 0314 	add.w	r3, r7, #20
 800ae40:	461a      	mov	r2, r3
 800ae42:	4629      	mov	r1, r5
 800ae44:	4620      	mov	r0, r4
 800ae46:	f7fd fcab 	bl	80087a0 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 800ae4a:	bf00      	nop
 800ae4c:	3718      	adds	r7, #24
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	bdb0      	pop	{r4, r5, r7, pc}

0800ae52 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800ae52:	b580      	push	{r7, lr}
 800ae54:	b082      	sub	sp, #8
 800ae56:	af00      	add	r7, sp, #0
 800ae58:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800ae5a:	2202      	movs	r2, #2
 800ae5c:	2100      	movs	r1, #0
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	f7ff fcf2 	bl	800a848 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	f000 fbb2 	bl	800b5ce <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSL_>
  }
 800ae6a:	bf00      	nop
 800ae6c:	3708      	adds	r7, #8
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	bd80      	pop	{r7, pc}

0800ae72 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800ae72:	b480      	push	{r7}
 800ae74:	b083      	sub	sp, #12
 800ae76:	af00      	add	r7, sp, #0
 800ae78:	6078      	str	r0, [r7, #4]
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	370c      	adds	r7, #12
 800ae80:	46bd      	mov	sp, r7
 800ae82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae86:	4770      	bx	lr

0800ae88 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE4DataC1ERKSD_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 800ae88:	b590      	push	{r4, r7, lr}
 800ae8a:	b083      	sub	sp, #12
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
 800ae90:	6039      	str	r1, [r7, #0]
 800ae92:	687c      	ldr	r4, [r7, #4]
 800ae94:	6838      	ldr	r0, [r7, #0]
 800ae96:	f000 fbaa 	bl	800b5ee <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE7functorEv>
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	4619      	mov	r1, r3
 800ae9e:	4620      	mov	r0, r4
 800aea0:	f7fa fc0a 	bl	80056b8 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	1d1c      	adds	r4, r3, #4
 800aea8:	6838      	ldr	r0, [r7, #0]
 800aeaa:	f000 fbac 	bl	800b606 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE3lhsEv>
 800aeae:	4603      	mov	r3, r0
 800aeb0:	4619      	mov	r1, r3
 800aeb2:	4620      	mov	r0, r4
 800aeb4:	f000 fbbf 	bl	800b636 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS4_>
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	f103 0408 	add.w	r4, r3, #8
 800aebe:	6838      	ldr	r0, [r7, #0]
 800aec0:	f000 fbad 	bl	800b61e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE3rhsEv>
 800aec4:	4603      	mov	r3, r0
 800aec6:	4619      	mov	r1, r3
 800aec8:	4620      	mov	r0, r4
 800aeca:	f000 fbc3 	bl	800b654 <_ZN5Eigen8internal9evaluatorIKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERS9_>
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	4618      	mov	r0, r3
 800aed2:	370c      	adds	r7, #12
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bd90      	pop	{r4, r7, pc}

0800aed8 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 800aed8:	b480      	push	{r7}
 800aeda:	b083      	sub	sp, #12
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	4618      	mov	r0, r3
 800aee6:	370c      	adds	r7, #12
 800aee8:	46bd      	mov	sp, r7
 800aeea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeee:	4770      	bx	lr

0800aef0 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800aef0:	b480      	push	{r7}
 800aef2:	b083      	sub	sp, #12
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	4618      	mov	r0, r3
 800aefc:	370c      	adds	r7, #12
 800aefe:	46bd      	mov	sp, r7
 800af00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af04:	4770      	bx	lr

0800af06 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEELi4ENS_10DenseShapeESI_ffE5coeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const CoeffReturnType coeff(Index row, Index col) const
 800af06:	b580      	push	{r7, lr}
 800af08:	b0a4      	sub	sp, #144	; 0x90
 800af0a:	af00      	add	r7, sp, #0
 800af0c:	60f8      	str	r0, [r7, #12]
 800af0e:	60b9      	str	r1, [r7, #8]
 800af10:	607a      	str	r2, [r7, #4]
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 800af12:	68f9      	ldr	r1, [r7, #12]
 800af14:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800af18:	68ba      	ldr	r2, [r7, #8]
 800af1a:	4618      	mov	r0, r3
 800af1c:	f000 fbde 	bl	800b6dc <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE3rowEi>
 800af20:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800af24:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800af28:	4611      	mov	r1, r2
 800af2a:	4618      	mov	r0, r3
 800af2c:	f000 fbf9 	bl	800b722 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE9transposeEv>
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	f103 0110 	add.w	r1, r3, #16
 800af36:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800af3a:	687a      	ldr	r2, [r7, #4]
 800af3c:	4618      	mov	r0, r3
 800af3e:	f000 fc01 	bl	800b744 <_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE3colEi>
 800af42:	f107 0310 	add.w	r3, r7, #16
 800af46:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800af4a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800af4e:	4618      	mov	r0, r3
 800af50:	f000 fc0b 	bl	800b76a <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEE12cwiseProductINS2_IKNS1_IS8_EELi1ELi1ELb0EEEEEKNS3_INS5_IfNS4_6traitsIT_E6ScalarEEEKSJ_KSQ_EERKNS0_ISQ_EE>
 800af54:	f107 0310 	add.w	r3, r7, #16
 800af58:	4618      	mov	r0, r3
 800af5a:	f000 fc34 	bl	800b7c6 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE3sumEv>
 800af5e:	eef0 7a40 	vmov.f32	s15, s0
  }
 800af62:	eeb0 0a67 	vmov.f32	s0, s15
 800af66:	3790      	adds	r7, #144	; 0x90
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd80      	pop	{r7, pc}

0800af6c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b082      	sub	sp, #8
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800af74:	2200      	movs	r2, #0
 800af76:	2101      	movs	r1, #1
 800af78:	6878      	ldr	r0, [r7, #4]
 800af7a:	f7ff f99e 	bl	800a2ba <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800af7e:	6878      	ldr	r0, [r7, #4]
 800af80:	f000 fc3c 	bl	800b7fc <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSP_>
  }
 800af84:	bf00      	nop
 800af86:	3708      	adds	r7, #8
 800af88:	46bd      	mov	sp, r7
 800af8a:	bd80      	pop	{r7, pc}

0800af8c <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi9ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 800af8c:	b480      	push	{r7}
 800af8e:	b083      	sub	sp, #12
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
 800af94:	bf00      	nop
 800af96:	370c      	adds	r7, #12
 800af98:	46bd      	mov	sp, r7
 800af9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9e:	4770      	bx	lr

0800afa0 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3rowEi>:
  return RowXpr(derived(), i);
}

/// This is the const version of row(). */
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
ConstRowXpr row(Index i) const
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b084      	sub	sp, #16
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	60f8      	str	r0, [r7, #12]
 800afa8:	60b9      	str	r1, [r7, #8]
 800afaa:	607a      	str	r2, [r7, #4]
{
  return ConstRowXpr(derived(), i);
 800afac:	68b8      	ldr	r0, [r7, #8]
 800afae:	f7fa fc62 	bl	8005876 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800afb2:	4603      	mov	r3, r0
 800afb4:	687a      	ldr	r2, [r7, #4]
 800afb6:	4619      	mov	r1, r3
 800afb8:	68f8      	ldr	r0, [r7, #12]
 800afba:	f000 fc2f 	bl	800b81c <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i>
}
 800afbe:	68f8      	ldr	r0, [r7, #12]
 800afc0:	3710      	adds	r7, #16
 800afc2:	46bd      	mov	sp, r7
 800afc4:	bd80      	pop	{r7, pc}

0800afc6 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE9transposeEv>:
DenseBase<Derived>::transpose() const
 800afc6:	b580      	push	{r7, lr}
 800afc8:	b082      	sub	sp, #8
 800afca:	af00      	add	r7, sp, #0
 800afcc:	6078      	str	r0, [r7, #4]
 800afce:	6039      	str	r1, [r7, #0]
  return ConstTransposeReturnType(derived());
 800afd0:	6838      	ldr	r0, [r7, #0]
 800afd2:	f000 fc4d 	bl	800b870 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE7derivedEv>
 800afd6:	4603      	mov	r3, r0
 800afd8:	4619      	mov	r1, r3
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	f000 fc6b 	bl	800b8b6 <_ZN5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1ERS6_>
}
 800afe0:	6878      	ldr	r0, [r7, #4]
 800afe2:	3708      	adds	r7, #8
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bd80      	pop	{r7, pc}

0800afe8 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE3colEi>:
ConstColXpr col(Index i) const
 800afe8:	b580      	push	{r7, lr}
 800afea:	b084      	sub	sp, #16
 800afec:	af00      	add	r7, sp, #0
 800afee:	60f8      	str	r0, [r7, #12]
 800aff0:	60b9      	str	r1, [r7, #8]
 800aff2:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 800aff4:	68b8      	ldr	r0, [r7, #8]
 800aff6:	f7fa fa76 	bl	80054e6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800affa:	4603      	mov	r3, r0
 800affc:	687a      	ldr	r2, [r7, #4]
 800affe:	4619      	mov	r1, r3
 800b000:	68f8      	ldr	r0, [r7, #12]
 800b002:	f000 fc6f 	bl	800b8e4 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i>
}
 800b006:	68f8      	ldr	r0, [r7, #12]
 800b008:	3710      	adds	r7, #16
 800b00a:	46bd      	mov	sp, r7
 800b00c:	bd80      	pop	{r7, pc}

0800b00e <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IKNS3_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>:
  * \sa class CwiseBinaryOp, cwiseAbs2
  */
template<typename OtherDerived>
EIGEN_DEVICE_FUNC
EIGEN_STRONG_INLINE const EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 800b00e:	b5b0      	push	{r4, r5, r7, lr}
 800b010:	b086      	sub	sp, #24
 800b012:	af00      	add	r7, sp, #0
 800b014:	60f8      	str	r0, [r7, #12]
 800b016:	60b9      	str	r1, [r7, #8]
 800b018:	607a      	str	r2, [r7, #4]
{
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 800b01a:	68b8      	ldr	r0, [r7, #8]
 800b01c:	f000 fc8a 	bl	800b934 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE7derivedEv>
 800b020:	4604      	mov	r4, r0
 800b022:	6878      	ldr	r0, [r7, #4]
 800b024:	f000 fc91 	bl	800b94a <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE7derivedEv>
 800b028:	4605      	mov	r5, r0
 800b02a:	f107 0314 	add.w	r3, r7, #20
 800b02e:	4618      	mov	r0, r3
 800b030:	f7fa fab8 	bl	80055a4 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 800b034:	f107 0314 	add.w	r3, r7, #20
 800b038:	462a      	mov	r2, r5
 800b03a:	4621      	mov	r1, r4
 800b03c:	68f8      	ldr	r0, [r7, #12]
 800b03e:	f000 fcd7 	bl	800b9f0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_>
}
 800b042:	68f8      	ldr	r0, [r7, #12]
 800b044:	3718      	adds	r7, #24
 800b046:	46bd      	mov	sp, r7
 800b048:	bdb0      	pop	{r4, r5, r7, pc}

0800b04a <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 800b04a:	b580      	push	{r7, lr}
 800b04c:	b082      	sub	sp, #8
 800b04e:	af00      	add	r7, sp, #0
 800b050:	6078      	str	r0, [r7, #4]
 800b052:	6878      	ldr	r0, [r7, #4]
 800b054:	f000 fd2a 	bl	800baac <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE7derivedEv>
 800b058:	4603      	mov	r3, r0
 800b05a:	4618      	mov	r0, r3
 800b05c:	f000 fd31 	bl	800bac2 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE4rowsEv>
 800b060:	4603      	mov	r3, r0
 800b062:	4618      	mov	r0, r3
 800b064:	3708      	adds	r7, #8
 800b066:	46bd      	mov	sp, r7
 800b068:	bd80      	pop	{r7, pc}

0800b06a <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE3sumEv>:
  *
  * \sa trace(), prod(), mean()
  */
template<typename Derived>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE typename internal::traits<Derived>::Scalar
DenseBase<Derived>::sum() const
 800b06a:	b590      	push	{r4, r7, lr}
 800b06c:	b085      	sub	sp, #20
 800b06e:	af00      	add	r7, sp, #0
 800b070:	6078      	str	r0, [r7, #4]
{
  if(SizeAtCompileTime==0 || (SizeAtCompileTime==Dynamic && size()==0))
    return Scalar(0);
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	f000 fd1a 	bl	800baac <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE7derivedEv>
 800b078:	4604      	mov	r4, r0
 800b07a:	f107 030c 	add.w	r3, r7, #12
 800b07e:	4618      	mov	r0, r3
 800b080:	f7fa fd87 	bl	8005b92 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 800b084:	f107 030c 	add.w	r3, r7, #12
 800b088:	4619      	mov	r1, r3
 800b08a:	4620      	mov	r0, r4
 800b08c:	f000 fdf4 	bl	800bc78 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 800b090:	eef0 7a40 	vmov.f32	s15, s0
 800b094:	bf00      	nop
}
 800b096:	eeb0 0a67 	vmov.f32	s0, s15
 800b09a:	3714      	adds	r7, #20
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bd90      	pop	{r4, r7, pc}

0800b0a0 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSD_>:
 800b0a0:	b480      	push	{r7}
 800b0a2:	b083      	sub	sp, #12
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
 800b0a8:	bf00      	nop
 800b0aa:	370c      	adds	r7, #12
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b2:	4770      	bx	lr

0800b0b4 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE9innerSizeEv>:
    Index innerSize() const
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b082      	sub	sp, #8
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
      return IsVectorAtCompileTime ? this->size()
 800b0bc:	6878      	ldr	r0, [r7, #4]
 800b0be:	f000 fe21 	bl	800bd04 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4colsEv>
 800b0c2:	4603      	mov	r3, r0
    }
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	3708      	adds	r7, #8
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	bd80      	pop	{r7, pc}

0800b0cc <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE4rowsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index rows(void) EIGEN_NOEXCEPT {return _Rows;}
 800b0cc:	b480      	push	{r7}
 800b0ce:	af00      	add	r7, sp, #0
 800b0d0:	2303      	movs	r3, #3
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0da:	4770      	bx	lr

0800b0dc <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE4colsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index cols(void) EIGEN_NOEXCEPT {return _Cols;}
 800b0dc:	b480      	push	{r7}
 800b0de:	af00      	add	r7, sp, #0
 800b0e0:	2303      	movs	r3, #3
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ea:	4770      	bx	lr

0800b0ec <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEELb0EE3runERKS3_RKS9_>:
    static void run(const Derived&, const OtherDerived&)
 800b0ec:	b480      	push	{r7}
 800b0ee:	b083      	sub	sp, #12
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
 800b0f4:	6039      	str	r1, [r7, #0]
    }
 800b0f6:	bf00      	nop
 800b0f8:	370c      	adds	r7, #12
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b100:	4770      	bx	lr

0800b102 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEEC1ERKS8_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800b102:	b580      	push	{r7, lr}
 800b104:	b082      	sub	sp, #8
 800b106:	af00      	add	r7, sp, #0
 800b108:	6078      	str	r0, [r7, #4]
 800b10a:	6039      	str	r1, [r7, #0]
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	6839      	ldr	r1, [r7, #0]
 800b110:	4618      	mov	r0, r3
 800b112:	f000 fe07 	bl	800bd24 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEELi3ENS_10DenseShapeES9_ffEC1ERKS8_>
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	4618      	mov	r0, r3
 800b11a:	3708      	adds	r7, #8
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bd80      	pop	{r7, pc}

0800b120 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800b120:	b480      	push	{r7}
 800b122:	b083      	sub	sp, #12
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	4618      	mov	r0, r3
 800b12c:	370c      	adds	r7, #12
 800b12e:	46bd      	mov	sp, r7
 800b130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b134:	4770      	bx	lr

0800b136 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEED1Ev>:
 800b136:	b480      	push	{r7}
 800b138:	b083      	sub	sp, #12
 800b13a:	af00      	add	r7, sp, #0
 800b13c:	6078      	str	r0, [r7, #4]
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	4618      	mov	r0, r3
 800b142:	370c      	adds	r7, #12
 800b144:	46bd      	mov	sp, r7
 800b146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14a:	4770      	bx	lr

0800b14c <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b082      	sub	sp, #8
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	4618      	mov	r0, r3
 800b158:	f7fb fdea 	bl	8006d30 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4rowsEv>
 800b15c:	4603      	mov	r3, r0
 800b15e:	4618      	mov	r0, r3
 800b160:	3708      	adds	r7, #8
 800b162:	46bd      	mov	sp, r7
 800b164:	bd80      	pop	{r7, pc}

0800b166 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 800b166:	b580      	push	{r7, lr}
 800b168:	b082      	sub	sp, #8
 800b16a:	af00      	add	r7, sp, #0
 800b16c:	6078      	str	r0, [r7, #4]
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	3308      	adds	r3, #8
 800b172:	4618      	mov	r0, r3
 800b174:	f7fb fdea 	bl	8006d4c <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800b178:	4603      	mov	r3, r0
 800b17a:	4618      	mov	r0, r3
 800b17c:	3708      	adds	r7, #8
 800b17e:	46bd      	mov	sp, r7
 800b180:	bd80      	pop	{r7, pc}
	...

0800b184 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 800b184:	b580      	push	{r7, lr}
 800b186:	b086      	sub	sp, #24
 800b188:	af00      	add	r7, sp, #0
 800b18a:	60f8      	str	r0, [r7, #12]
 800b18c:	60b9      	str	r1, [r7, #8]
 800b18e:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 800b190:	68b8      	ldr	r0, [r7, #8]
 800b192:	f7ff ffdb 	bl	800b14c <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE4rowsEv>
 800b196:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 800b198:	68b8      	ldr	r0, [r7, #8]
 800b19a:	f7ff ffe4 	bl	800b166 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE4colsEv>
 800b19e:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f7ff fc8b 	bl	800aabe <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4rowsEv>
 800b1a8:	4602      	mov	r2, r0
 800b1aa:	697b      	ldr	r3, [r7, #20]
 800b1ac:	4293      	cmp	r3, r2
 800b1ae:	d107      	bne.n	800b1c0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	f7ff fc8e 	bl	800aad4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4colsEv>
 800b1b8:	4602      	mov	r2, r0
 800b1ba:	693b      	ldr	r3, [r7, #16]
 800b1bc:	4293      	cmp	r3, r2
 800b1be:	d001      	beq.n	800b1c4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 800b1c0:	2301      	movs	r3, #1
 800b1c2:	e000      	b.n	800b1c6 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d005      	beq.n	800b1d6 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	693a      	ldr	r2, [r7, #16]
 800b1ce:	6979      	ldr	r1, [r7, #20]
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	f7ff f923 	bl	800a41c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f7ff fc70 	bl	800aabe <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4rowsEv>
 800b1de:	4602      	mov	r2, r0
 800b1e0:	697b      	ldr	r3, [r7, #20]
 800b1e2:	4293      	cmp	r3, r2
 800b1e4:	d107      	bne.n	800b1f6 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	f7ff fc73 	bl	800aad4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4colsEv>
 800b1ee:	4602      	mov	r2, r0
 800b1f0:	693b      	ldr	r3, [r7, #16]
 800b1f2:	4293      	cmp	r3, r2
 800b1f4:	d006      	beq.n	800b204 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 800b1f6:	4b05      	ldr	r3, [pc, #20]	; (800b20c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 800b1f8:	4a05      	ldr	r2, [pc, #20]	; (800b210 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 800b1fa:	f240 21fd 	movw	r1, #765	; 0x2fd
 800b1fe:	4805      	ldr	r0, [pc, #20]	; (800b214 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 800b200:	f012 fe48 	bl	801de94 <__assert_func>
}
 800b204:	bf00      	nop
 800b206:	3718      	adds	r7, #24
 800b208:	46bd      	mov	sp, r7
 800b20a:	bd80      	pop	{r7, pc}
 800b20c:	08022374 	.word	0x08022374
 800b210:	08024720 	.word	0x08024720
 800b214:	08022488 	.word	0x08022488

0800b218 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE18const_cast_derivedEv>:
  inline Derived& const_cast_derived() const
 800b218:	b480      	push	{r7}
 800b21a:	b083      	sub	sp, #12
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
  { return *static_cast<Derived*>(const_cast<EigenBase*>(this)); }
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	4618      	mov	r0, r3
 800b224:	370c      	adds	r7, #12
 800b226:	46bd      	mov	sp, r7
 800b228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22c:	4770      	bx	lr

0800b22e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSC_RKSE_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 800b22e:	b480      	push	{r7}
 800b230:	b085      	sub	sp, #20
 800b232:	af00      	add	r7, sp, #0
 800b234:	60f8      	str	r0, [r7, #12]
 800b236:	60b9      	str	r1, [r7, #8]
 800b238:	607a      	str	r2, [r7, #4]
 800b23a:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	68ba      	ldr	r2, [r7, #8]
 800b240:	601a      	str	r2, [r3, #0]
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	687a      	ldr	r2, [r7, #4]
 800b246:	605a      	str	r2, [r3, #4]
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	683a      	ldr	r2, [r7, #0]
 800b24c:	609a      	str	r2, [r3, #8]
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	69ba      	ldr	r2, [r7, #24]
 800b252:	60da      	str	r2, [r3, #12]
  }
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	4618      	mov	r0, r3
 800b258:	3714      	adds	r7, #20
 800b25a:	46bd      	mov	sp, r7
 800b25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b260:	4770      	bx	lr

0800b262 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800b262:	b580      	push	{r7, lr}
 800b264:	b082      	sub	sp, #8
 800b266:	af00      	add	r7, sp, #0
 800b268:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 800b26a:	6878      	ldr	r0, [r7, #4]
 800b26c:	f000 fd92 	bl	800bd94 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSG_>
  }
 800b270:	bf00      	nop
 800b272:	3708      	adds	r7, #8
 800b274:	46bd      	mov	sp, r7
 800b276:	bd80      	pop	{r7, pc}

0800b278 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 800b278:	b480      	push	{r7}
 800b27a:	b083      	sub	sp, #12
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
 800b280:	bf00      	nop
 800b282:	370c      	adds	r7, #12
 800b284:	46bd      	mov	sp, r7
 800b286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28a:	4770      	bx	lr

0800b28c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 800b28c:	b5b0      	push	{r4, r5, r7, lr}
 800b28e:	b084      	sub	sp, #16
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
 800b294:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	f7fa fa1a 	bl	80056d0 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800b29c:	4604      	mov	r4, r0
 800b29e:	6838      	ldr	r0, [r7, #0]
 800b2a0:	f7fa ff75 	bl	800618e <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEE7derivedEv>
 800b2a4:	4605      	mov	r5, r0
 800b2a6:	f107 030c 	add.w	r3, r7, #12
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	f7fb ff09 	bl	80070c2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800b2b0:	f107 030c 	add.w	r3, r7, #12
 800b2b4:	461a      	mov	r2, r3
 800b2b6:	4629      	mov	r1, r5
 800b2b8:	4620      	mov	r0, r4
 800b2ba:	f000 fd7b 	bl	800bdb4 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 800b2be:	6878      	ldr	r0, [r7, #4]
 800b2c0:	f7fa fa06 	bl	80056d0 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800b2c4:	4603      	mov	r3, r0
    }
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	3710      	adds	r7, #16
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bdb0      	pop	{r4, r5, r7, pc}

0800b2ce <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE12_set_noaliasINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS2_EEEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 800b2ce:	b5b0      	push	{r4, r5, r7, lr}
 800b2d0:	b084      	sub	sp, #16
 800b2d2:	af00      	add	r7, sp, #0
 800b2d4:	6078      	str	r0, [r7, #4]
 800b2d6:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 800b2d8:	6878      	ldr	r0, [r7, #4]
 800b2da:	f000 fd7c 	bl	800bdd6 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800b2de:	4604      	mov	r4, r0
 800b2e0:	6838      	ldr	r0, [r7, #0]
 800b2e2:	f7fa ff5f 	bl	80061a4 <_ZNK5Eigen9EigenBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEE7derivedEv>
 800b2e6:	4605      	mov	r5, r0
 800b2e8:	f107 030c 	add.w	r3, r7, #12
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	f7fb fee8 	bl	80070c2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800b2f2:	f107 030c 	add.w	r3, r7, #12
 800b2f6:	461a      	mov	r2, r3
 800b2f8:	4629      	mov	r1, r5
 800b2fa:	4620      	mov	r0, r4
 800b2fc:	f000 fd76 	bl	800bdec <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	f000 fd68 	bl	800bdd6 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800b306:	4603      	mov	r3, r0
    }
 800b308:	4618      	mov	r0, r3
 800b30a:	3710      	adds	r7, #16
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bdb0      	pop	{r4, r5, r7, pc}

0800b310 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4dataEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar *data() const
 800b310:	b580      	push	{r7, lr}
 800b312:	b082      	sub	sp, #8
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
    { return m_storage.data(); }
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	4618      	mov	r0, r3
 800b31c:	f000 fd77 	bl	800be0e <_ZNK5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4dataEv>
 800b320:	4603      	mov	r3, r0
 800b322:	4618      	mov	r0, r3
 800b324:	3708      	adds	r7, #8
 800b326:	46bd      	mov	sp, r7
 800b328:	bd80      	pop	{r7, pc}

0800b32a <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800b32a:	b480      	push	{r7}
 800b32c:	b083      	sub	sp, #12
 800b32e:	af00      	add	r7, sp, #0
 800b330:	6078      	str	r0, [r7, #4]
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	4618      	mov	r0, r3
 800b336:	370c      	adds	r7, #12
 800b338:	46bd      	mov	sp, r7
 800b33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33e:	4770      	bx	lr

0800b340 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE3rowEi>:
ConstRowXpr row(Index i) const
 800b340:	b580      	push	{r7, lr}
 800b342:	b084      	sub	sp, #16
 800b344:	af00      	add	r7, sp, #0
 800b346:	60f8      	str	r0, [r7, #12]
 800b348:	60b9      	str	r1, [r7, #8]
 800b34a:	607a      	str	r2, [r7, #4]
  return ConstRowXpr(derived(), i);
 800b34c:	68b8      	ldr	r0, [r7, #8]
 800b34e:	f7fa f8ca 	bl	80054e6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800b352:	4603      	mov	r3, r0
 800b354:	687a      	ldr	r2, [r7, #4]
 800b356:	4619      	mov	r1, r3
 800b358:	68f8      	ldr	r0, [r7, #12]
 800b35a:	f000 fd6f 	bl	800be3c <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEC1ERS3_i>
}
 800b35e:	68f8      	ldr	r0, [r7, #12]
 800b360:	3710      	adds	r7, #16
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}

0800b366 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE9transposeEv>:
DenseBase<Derived>::transpose() const
 800b366:	b580      	push	{r7, lr}
 800b368:	b082      	sub	sp, #8
 800b36a:	af00      	add	r7, sp, #0
 800b36c:	6078      	str	r0, [r7, #4]
 800b36e:	6039      	str	r1, [r7, #0]
  return ConstTransposeReturnType(derived());
 800b370:	6838      	ldr	r0, [r7, #0]
 800b372:	f000 fd8d 	bl	800be90 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE7derivedEv>
 800b376:	4603      	mov	r3, r0
 800b378:	4619      	mov	r1, r3
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	f000 fdab 	bl	800bed6 <_ZN5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1ERS6_>
}
 800b380:	6878      	ldr	r0, [r7, #4]
 800b382:	3708      	adds	r7, #8
 800b384:	46bd      	mov	sp, r7
 800b386:	bd80      	pop	{r7, pc}

0800b388 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE3colEi>:
ConstColXpr col(Index i) const
 800b388:	b580      	push	{r7, lr}
 800b38a:	b084      	sub	sp, #16
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	60f8      	str	r0, [r7, #12]
 800b390:	60b9      	str	r1, [r7, #8]
 800b392:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 800b394:	68b8      	ldr	r0, [r7, #8]
 800b396:	f7fa fe16 	bl	8005fc6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800b39a:	4603      	mov	r3, r0
 800b39c:	687a      	ldr	r2, [r7, #4]
 800b39e:	4619      	mov	r1, r3
 800b3a0:	68f8      	ldr	r0, [r7, #12]
 800b3a2:	f000 fdaf 	bl	800bf04 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i>
}
 800b3a6:	68f8      	ldr	r0, [r7, #12]
 800b3a8:	3710      	adds	r7, #16
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	bd80      	pop	{r7, pc}

0800b3ae <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE12cwiseProductINS2_IKNS3_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 800b3ae:	b5b0      	push	{r4, r5, r7, lr}
 800b3b0:	b086      	sub	sp, #24
 800b3b2:	af00      	add	r7, sp, #0
 800b3b4:	60f8      	str	r0, [r7, #12]
 800b3b6:	60b9      	str	r1, [r7, #8]
 800b3b8:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 800b3ba:	68b8      	ldr	r0, [r7, #8]
 800b3bc:	f000 fdd4 	bl	800bf68 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE7derivedEv>
 800b3c0:	4604      	mov	r4, r0
 800b3c2:	6878      	ldr	r0, [r7, #4]
 800b3c4:	f000 fddb 	bl	800bf7e <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE7derivedEv>
 800b3c8:	4605      	mov	r5, r0
 800b3ca:	f107 0314 	add.w	r3, r7, #20
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	f7fa f8e8 	bl	80055a4 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 800b3d4:	f107 0314 	add.w	r3, r7, #20
 800b3d8:	462a      	mov	r2, r5
 800b3da:	4621      	mov	r1, r4
 800b3dc:	68f8      	ldr	r0, [r7, #12]
 800b3de:	f000 fe21 	bl	800c024 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERSC_RSG_RKS3_>
}
 800b3e2:	68f8      	ldr	r0, [r7, #12]
 800b3e4:	3718      	adds	r7, #24
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	bdb0      	pop	{r4, r5, r7, pc}

0800b3ea <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 800b3ea:	b580      	push	{r7, lr}
 800b3ec:	b082      	sub	sp, #8
 800b3ee:	af00      	add	r7, sp, #0
 800b3f0:	6078      	str	r0, [r7, #4]
 800b3f2:	6878      	ldr	r0, [r7, #4]
 800b3f4:	f000 fe72 	bl	800c0dc <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE7derivedEv>
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	f000 fe79 	bl	800c0f2 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE4rowsEv>
 800b400:	4603      	mov	r3, r0
 800b402:	4618      	mov	r0, r3
 800b404:	3708      	adds	r7, #8
 800b406:	46bd      	mov	sp, r7
 800b408:	bd80      	pop	{r7, pc}

0800b40a <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 800b40a:	b590      	push	{r4, r7, lr}
 800b40c:	b085      	sub	sp, #20
 800b40e:	af00      	add	r7, sp, #0
 800b410:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	f000 fe62 	bl	800c0dc <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE7derivedEv>
 800b418:	4604      	mov	r4, r0
 800b41a:	f107 030c 	add.w	r3, r7, #12
 800b41e:	4618      	mov	r0, r3
 800b420:	f7fa fbb7 	bl	8005b92 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 800b424:	f107 030c 	add.w	r3, r7, #12
 800b428:	4619      	mov	r1, r3
 800b42a:	4620      	mov	r0, r4
 800b42c:	f000 ff3c 	bl	800c2a8 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 800b430:	eef0 7a40 	vmov.f32	s15, s0
 800b434:	bf00      	nop
}
 800b436:	eeb0 0a67 	vmov.f32	s0, s15
 800b43a:	3714      	adds	r7, #20
 800b43c:	46bd      	mov	sp, r7
 800b43e:	bd90      	pop	{r4, r7, pc}

0800b440 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSS_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 800b440:	b480      	push	{r7}
 800b442:	b083      	sub	sp, #12
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
 800b448:	bf00      	nop
 800b44a:	370c      	adds	r7, #12
 800b44c:	46bd      	mov	sp, r7
 800b44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b452:	4770      	bx	lr

0800b454 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800b454:	b480      	push	{r7}
 800b456:	b083      	sub	sp, #12
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	4618      	mov	r0, r3
 800b462:	370c      	adds	r7, #12
 800b464:	46bd      	mov	sp, r7
 800b466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46a:	4770      	bx	lr

0800b46c <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800b46c:	b480      	push	{r7}
 800b46e:	b083      	sub	sp, #12
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	3304      	adds	r3, #4
 800b478:	4618      	mov	r0, r3
 800b47a:	370c      	adds	r7, #12
 800b47c:	46bd      	mov	sp, r7
 800b47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b482:	4770      	bx	lr

0800b484 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEC1Ev>:
 800b484:	b480      	push	{r7}
 800b486:	b083      	sub	sp, #12
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	4618      	mov	r0, r3
 800b490:	370c      	adds	r7, #12
 800b492:	46bd      	mov	sp, r7
 800b494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b498:	4770      	bx	lr

0800b49a <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS_7ProductINS0_IfLi1ELi3ELi1ELi1ELi3EEENS0_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEERKT_>:
    explicit Matrix(const T& x)
 800b49a:	b580      	push	{r7, lr}
 800b49c:	b082      	sub	sp, #8
 800b49e:	af00      	add	r7, sp, #0
 800b4a0:	6078      	str	r0, [r7, #4]
 800b4a2:	6039      	str	r1, [r7, #0]
    {
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	f7f9 fcfc 	bl	8004ea4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
      Base::_check_template_params();
 800b4ac:	f7f9 fd0a 	bl	8004ec4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	6839      	ldr	r1, [r7, #0]
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	f000 ff3d 	bl	800c334 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEESF_EEvRKNS_9DenseBaseIT0_EE>
    }
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	4618      	mov	r0, r3
 800b4be:	3708      	adds	r7, #8
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	bd80      	pop	{r7, pc}

0800b4c4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductIS4_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS6_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 800b4c4:	b5b0      	push	{r4, r5, r7, lr}
 800b4c6:	b084      	sub	sp, #16
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
 800b4cc:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	689c      	ldr	r4, [r3, #8]
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	6839      	ldr	r1, [r7, #0]
 800b4d8:	4618      	mov	r0, r3
 800b4da:	f7fd f9a8 	bl	800882e <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi>
 800b4de:	4605      	mov	r5, r0
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	685b      	ldr	r3, [r3, #4]
 800b4e4:	6839      	ldr	r1, [r7, #0]
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	f000 ff31 	bl	800c34e <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEELi4ENS_10DenseShapeESF_ffE5coeffEi>
 800b4ec:	eef0 7a40 	vmov.f32	s15, s0
 800b4f0:	edc7 7a03 	vstr	s15, [r7, #12]
 800b4f4:	f107 030c 	add.w	r3, r7, #12
 800b4f8:	461a      	mov	r2, r3
 800b4fa:	4629      	mov	r1, r5
 800b4fc:	4620      	mov	r0, r4
 800b4fe:	f000 ff5f 	bl	800c3c0 <_ZNK5Eigen8internal13add_assign_opIffE11assignCoeffERfRKf>
  }
 800b502:	bf00      	nop
 800b504:	3710      	adds	r7, #16
 800b506:	46bd      	mov	sp, r7
 800b508:	bdb0      	pop	{r4, r5, r7, pc}

0800b50a <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi1ELi3EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800b50a:	b580      	push	{r7, lr}
 800b50c:	b082      	sub	sp, #8
 800b50e:	af00      	add	r7, sp, #0
 800b510:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800b512:	2101      	movs	r1, #1
 800b514:	6878      	ldr	r0, [r7, #4]
 800b516:	f7ff ffd5 	bl	800b4c4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductIS4_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS6_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800b51a:	6878      	ldr	r0, [r7, #4]
 800b51c:	f000 ff67 	bl	800c3ee <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi2ELi3EE3runERSL_>
  }
 800b520:	bf00      	nop
 800b522:	3708      	adds	r7, #8
 800b524:	46bd      	mov	sp, r7
 800b526:	bd80      	pop	{r7, pc}

0800b528 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 800b528:	b5b0      	push	{r4, r5, r7, lr}
 800b52a:	b084      	sub	sp, #16
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
 800b530:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 800b532:	6878      	ldr	r0, [r7, #4]
 800b534:	f7fa fa68 	bl	8005a08 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800b538:	4604      	mov	r4, r0
 800b53a:	6838      	ldr	r0, [r7, #0]
 800b53c:	f7fb f98e 	bl	800685c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEE7derivedEv>
 800b540:	4605      	mov	r5, r0
 800b542:	f107 030c 	add.w	r3, r7, #12
 800b546:	4618      	mov	r0, r3
 800b548:	f7fb fdbb 	bl	80070c2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800b54c:	f107 030c 	add.w	r3, r7, #12
 800b550:	461a      	mov	r2, r3
 800b552:	4629      	mov	r1, r5
 800b554:	4620      	mov	r0, r4
 800b556:	f000 ff59 	bl	800c40c <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 800b55a:	6878      	ldr	r0, [r7, #4]
 800b55c:	f7fa fa54 	bl	8005a08 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800b560:	4603      	mov	r3, r0
    }
 800b562:	4618      	mov	r0, r3
 800b564:	3710      	adds	r7, #16
 800b566:	46bd      	mov	sp, r7
 800b568:	bdb0      	pop	{r4, r5, r7, pc}

0800b56a <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEELi3ENS_10DenseShapeESF_ffE5coeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const CoeffReturnType coeff(Index row, Index col) const
 800b56a:	b580      	push	{r7, lr}
 800b56c:	b0a4      	sub	sp, #144	; 0x90
 800b56e:	af00      	add	r7, sp, #0
 800b570:	60f8      	str	r0, [r7, #12]
 800b572:	60b9      	str	r1, [r7, #8]
 800b574:	607a      	str	r2, [r7, #4]
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 800b576:	68f9      	ldr	r1, [r7, #12]
 800b578:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b57c:	68ba      	ldr	r2, [r7, #8]
 800b57e:	4618      	mov	r0, r3
 800b580:	f7ff fd0e 	bl	800afa0 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3rowEi>
 800b584:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800b588:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800b58c:	4611      	mov	r1, r2
 800b58e:	4618      	mov	r0, r3
 800b590:	f7ff fd19 	bl	800afc6 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE9transposeEv>
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800b598:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800b59c:	687a      	ldr	r2, [r7, #4]
 800b59e:	4618      	mov	r0, r3
 800b5a0:	f000 ff45 	bl	800c42e <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3colEi>
 800b5a4:	f107 0314 	add.w	r3, r7, #20
 800b5a8:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800b5ac:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	f000 ff4f 	bl	800c454 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IS5_Li3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSD_6traitsIT_E6ScalarEEEKS8_KSG_EERKNS0_ISG_EE>
 800b5b6:	f107 0314 	add.w	r3, r7, #20
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	f000 ff78 	bl	800c4b0 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE3sumEv>
 800b5c0:	eef0 7a40 	vmov.f32	s15, s0
  }
 800b5c4:	eeb0 0a67 	vmov.f32	s0, s15
 800b5c8:	3790      	adds	r7, #144	; 0x90
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	bd80      	pop	{r7, pc}

0800b5ce <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800b5ce:	b580      	push	{r7, lr}
 800b5d0:	b082      	sub	sp, #8
 800b5d2:	af00      	add	r7, sp, #0
 800b5d4:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	2101      	movs	r1, #1
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	f7ff f934 	bl	800a848 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800b5e0:	6878      	ldr	r0, [r7, #4]
 800b5e2:	f000 ff80 	bl	800c4e6 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSL_>
  }
 800b5e6:	bf00      	nop
 800b5e8:	3708      	adds	r7, #8
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	bd80      	pop	{r7, pc}

0800b5ee <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 800b5ee:	b480      	push	{r7}
 800b5f0:	b083      	sub	sp, #12
 800b5f2:	af00      	add	r7, sp, #0
 800b5f4:	6078      	str	r0, [r7, #4]
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	330c      	adds	r3, #12
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	370c      	adds	r7, #12
 800b5fe:	46bd      	mov	sp, r7
 800b600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b604:	4770      	bx	lr

0800b606 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800b606:	b480      	push	{r7}
 800b608:	b083      	sub	sp, #12
 800b60a:	af00      	add	r7, sp, #0
 800b60c:	6078      	str	r0, [r7, #4]
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	4618      	mov	r0, r3
 800b614:	370c      	adds	r7, #12
 800b616:	46bd      	mov	sp, r7
 800b618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61c:	4770      	bx	lr

0800b61e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800b61e:	b480      	push	{r7}
 800b620:	b083      	sub	sp, #12
 800b622:	af00      	add	r7, sp, #0
 800b624:	6078      	str	r0, [r7, #4]
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	3304      	adds	r3, #4
 800b62a:	4618      	mov	r0, r3
 800b62c:	370c      	adds	r7, #12
 800b62e:	46bd      	mov	sp, r7
 800b630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b634:	4770      	bx	lr

0800b636 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS4_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 800b636:	b580      	push	{r7, lr}
 800b638:	b082      	sub	sp, #8
 800b63a:	af00      	add	r7, sp, #0
 800b63c:	6078      	str	r0, [r7, #4]
 800b63e:	6039      	str	r1, [r7, #0]
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	6839      	ldr	r1, [r7, #0]
 800b644:	4618      	mov	r0, r3
 800b646:	f7fb fa58 	bl	8006afa <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	4618      	mov	r0, r3
 800b64e:	3708      	adds	r7, #8
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}

0800b654 <_ZN5Eigen8internal9evaluatorIKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERS9_>:
 800b654:	b580      	push	{r7, lr}
 800b656:	b082      	sub	sp, #8
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
 800b65c:	6039      	str	r1, [r7, #0]
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	6839      	ldr	r1, [r7, #0]
 800b662:	4618      	mov	r0, r3
 800b664:	f000 ff4f 	bl	800c506 <_ZN5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKS8_>
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	4618      	mov	r0, r3
 800b66c:	3708      	adds	r7, #8
 800b66e:	46bd      	mov	sp, r7
 800b670:	bd80      	pop	{r7, pc}

0800b672 <_ZN5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EEC1ERKSF_>:
    typedef typename internal::ref_selector<XprType>::non_const_type XprTypeNested;
  public:

    typedef typename internal::dense_xpr_base<BlockType>::type Base;
    EIGEN_DENSE_PUBLIC_INTERFACE(BlockType)
    EIGEN_INHERIT_ASSIGNMENT_OPERATORS(BlockImpl_dense)
 800b672:	b580      	push	{r7, lr}
 800b674:	b082      	sub	sp, #8
 800b676:	af00      	add	r7, sp, #0
 800b678:	6078      	str	r0, [r7, #4]
 800b67a:	6039      	str	r1, [r7, #0]
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	683a      	ldr	r2, [r7, #0]
 800b680:	4611      	mov	r1, r2
 800b682:	4618      	mov	r0, r3
 800b684:	f7f9 f8aa 	bl	80047dc <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERKSC_>
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	3310      	adds	r3, #16
 800b68c:	683a      	ldr	r2, [r7, #0]
 800b68e:	6912      	ldr	r2, [r2, #16]
 800b690:	601a      	str	r2, [r3, #0]
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	4618      	mov	r0, r3
 800b696:	3708      	adds	r7, #8
 800b698:	46bd      	mov	sp, r7
 800b69a:	bd80      	pop	{r7, pc}

0800b69c <_ZN5Eigen9BlockImplIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ENS_5DenseEEC1ERKSG_>:
    EIGEN_INHERIT_ASSIGNMENT_OPERATORS(BlockImpl)
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b082      	sub	sp, #8
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
 800b6a4:	6039      	str	r1, [r7, #0]
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	683a      	ldr	r2, [r7, #0]
 800b6aa:	4611      	mov	r1, r2
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	f7ff ffe0 	bl	800b672 <_ZN5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EEC1ERKSF_>
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	3708      	adds	r7, #8
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bd80      	pop	{r7, pc}

0800b6bc <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERKSF_>:
    EIGEN_INHERIT_ASSIGNMENT_OPERATORS(Block)
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b082      	sub	sp, #8
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
 800b6c4:	6039      	str	r1, [r7, #0]
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	683a      	ldr	r2, [r7, #0]
 800b6ca:	4611      	mov	r1, r2
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	f7ff ffe5 	bl	800b69c <_ZN5Eigen9BlockImplIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ENS_5DenseEEC1ERKSG_>
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	3708      	adds	r7, #8
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	bd80      	pop	{r7, pc}

0800b6dc <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE3rowEi>:
ConstRowXpr row(Index i) const
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b084      	sub	sp, #16
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	60f8      	str	r0, [r7, #12]
 800b6e4:	60b9      	str	r1, [r7, #8]
 800b6e6:	607a      	str	r2, [r7, #4]
  return ConstRowXpr(derived(), i);
 800b6e8:	68b8      	ldr	r0, [r7, #8]
 800b6ea:	f7fa f824 	bl	8005736 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE7derivedEv>
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	687a      	ldr	r2, [r7, #4]
 800b6f2:	4619      	mov	r1, r3
 800b6f4:	68f8      	ldr	r0, [r7, #12]
 800b6f6:	f000 ff1d 	bl	800c534 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERSE_i>
}
 800b6fa:	68f8      	ldr	r0, [r7, #12]
 800b6fc:	3710      	adds	r7, #16
 800b6fe:	46bd      	mov	sp, r7
 800b700:	bd80      	pop	{r7, pc}

0800b702 <_ZN5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERKSI_>:
    EIGEN_INHERIT_ASSIGNMENT_OPERATORS(Transpose)
 800b702:	b580      	push	{r7, lr}
 800b704:	b082      	sub	sp, #8
 800b706:	af00      	add	r7, sp, #0
 800b708:	6078      	str	r0, [r7, #4]
 800b70a:	6039      	str	r1, [r7, #0]
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	683a      	ldr	r2, [r7, #0]
 800b710:	4611      	mov	r1, r2
 800b712:	4618      	mov	r0, r3
 800b714:	f7ff ffd2 	bl	800b6bc <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERKSF_>
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	4618      	mov	r0, r3
 800b71c:	3708      	adds	r7, #8
 800b71e:	46bd      	mov	sp, r7
 800b720:	bd80      	pop	{r7, pc}

0800b722 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE9transposeEv>:
DenseBase<Derived>::transpose() const
 800b722:	b580      	push	{r7, lr}
 800b724:	b082      	sub	sp, #8
 800b726:	af00      	add	r7, sp, #0
 800b728:	6078      	str	r0, [r7, #4]
 800b72a:	6039      	str	r1, [r7, #0]
  return ConstTransposeReturnType(derived());
 800b72c:	6838      	ldr	r0, [r7, #0]
 800b72e:	f000 ff29 	bl	800c584 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE7derivedEv>
 800b732:	4603      	mov	r3, r0
 800b734:	4619      	mov	r1, r3
 800b736:	6878      	ldr	r0, [r7, #4]
 800b738:	f000 ff47 	bl	800c5ca <_ZN5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERSH_>
}
 800b73c:	6878      	ldr	r0, [r7, #4]
 800b73e:	3708      	adds	r7, #8
 800b740:	46bd      	mov	sp, r7
 800b742:	bd80      	pop	{r7, pc}

0800b744 <_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE3colEi>:
ConstColXpr col(Index i) const
 800b744:	b580      	push	{r7, lr}
 800b746:	b084      	sub	sp, #16
 800b748:	af00      	add	r7, sp, #0
 800b74a:	60f8      	str	r0, [r7, #12]
 800b74c:	60b9      	str	r1, [r7, #8]
 800b74e:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 800b750:	68b8      	ldr	r0, [r7, #8]
 800b752:	f7f9 fffb 	bl	800574c <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 800b756:	4603      	mov	r3, r0
 800b758:	687a      	ldr	r2, [r7, #4]
 800b75a:	4619      	mov	r1, r3
 800b75c:	68f8      	ldr	r0, [r7, #12]
 800b75e:	f000 ff47 	bl	800c5f0 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEC1ERS5_i>
}
 800b762:	68f8      	ldr	r0, [r7, #12]
 800b764:	3710      	adds	r7, #16
 800b766:	46bd      	mov	sp, r7
 800b768:	bd80      	pop	{r7, pc}

0800b76a <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEE12cwiseProductINS2_IKNS1_IS8_EELi1ELi1ELb0EEEEEKNS3_INS5_IfNS4_6traitsIT_E6ScalarEEEKSJ_KSQ_EERKNS0_ISQ_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 800b76a:	b5b0      	push	{r4, r5, r7, lr}
 800b76c:	b086      	sub	sp, #24
 800b76e:	af00      	add	r7, sp, #0
 800b770:	60f8      	str	r0, [r7, #12]
 800b772:	60b9      	str	r1, [r7, #8]
 800b774:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 800b776:	68b8      	ldr	r0, [r7, #8]
 800b778:	f000 ff62 	bl	800c640 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEE7derivedEv>
 800b77c:	4604      	mov	r4, r0
 800b77e:	6878      	ldr	r0, [r7, #4]
 800b780:	f000 ff69 	bl	800c656 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEE7derivedEv>
 800b784:	4605      	mov	r5, r0
 800b786:	f107 0314 	add.w	r3, r7, #20
 800b78a:	4618      	mov	r0, r3
 800b78c:	f7f9 ff0a 	bl	80055a4 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 800b790:	f107 0314 	add.w	r3, r7, #20
 800b794:	462a      	mov	r2, r5
 800b796:	4621      	mov	r1, r4
 800b798:	68f8      	ldr	r0, [r7, #12]
 800b79a:	f000 ffaf 	bl	800c6fc <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEEC1ERSJ_RSN_RKS3_>
}
 800b79e:	68f8      	ldr	r0, [r7, #12]
 800b7a0:	3718      	adds	r7, #24
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bdb0      	pop	{r4, r5, r7, pc}

0800b7a6 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE4rowsEv>:
 800b7a6:	b580      	push	{r7, lr}
 800b7a8:	b082      	sub	sp, #8
 800b7aa:	af00      	add	r7, sp, #0
 800b7ac:	6078      	str	r0, [r7, #4]
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f000 fffe 	bl	800c7b0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE7derivedEv>
 800b7b4:	4603      	mov	r3, r0
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	f001 f805 	bl	800c7c6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE4rowsEv>
 800b7bc:	4603      	mov	r3, r0
 800b7be:	4618      	mov	r0, r3
 800b7c0:	3708      	adds	r7, #8
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	bd80      	pop	{r7, pc}

0800b7c6 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 800b7c6:	b590      	push	{r4, r7, lr}
 800b7c8:	b085      	sub	sp, #20
 800b7ca:	af00      	add	r7, sp, #0
 800b7cc:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 800b7ce:	6878      	ldr	r0, [r7, #4]
 800b7d0:	f000 ffee 	bl	800c7b0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE7derivedEv>
 800b7d4:	4604      	mov	r4, r0
 800b7d6:	f107 030c 	add.w	r3, r7, #12
 800b7da:	4618      	mov	r0, r3
 800b7dc:	f7fa f9d9 	bl	8005b92 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 800b7e0:	f107 030c 	add.w	r3, r7, #12
 800b7e4:	4619      	mov	r1, r3
 800b7e6:	4620      	mov	r0, r4
 800b7e8:	f001 f8da 	bl	800c9a0 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 800b7ec:	eef0 7a40 	vmov.f32	s15, s0
 800b7f0:	bf00      	nop
}
 800b7f2:	eeb0 0a67 	vmov.f32	s0, s15
 800b7f6:	3714      	adds	r7, #20
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	bd90      	pop	{r4, r7, pc}

0800b7fc <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b082      	sub	sp, #8
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800b804:	2201      	movs	r2, #1
 800b806:	2101      	movs	r1, #1
 800b808:	6878      	ldr	r0, [r7, #4]
 800b80a:	f7fe fd56 	bl	800a2ba <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800b80e:	6878      	ldr	r0, [r7, #4]
 800b810:	f001 f90c 	bl	800ca2c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSP_>
  }
 800b814:	bf00      	nop
 800b816:	3708      	adds	r7, #8
 800b818:	46bd      	mov	sp, r7
 800b81a:	bd80      	pop	{r7, pc}

0800b81c <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b084      	sub	sp, #16
 800b820:	af00      	add	r7, sp, #0
 800b822:	60f8      	str	r0, [r7, #12]
 800b824:	60b9      	str	r1, [r7, #8]
 800b826:	607a      	str	r2, [r7, #4]
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	687a      	ldr	r2, [r7, #4]
 800b82c:	68b9      	ldr	r1, [r7, #8]
 800b82e:	4618      	mov	r0, r3
 800b830:	f001 f90c 	bl	800ca4c <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2b00      	cmp	r3, #0
 800b838:	db07      	blt.n	800b84a <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i+0x2e>
 800b83a:	68bb      	ldr	r3, [r7, #8]
 800b83c:	4618      	mov	r0, r3
 800b83e:	f7f9 fc10 	bl	8005062 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800b842:	4602      	mov	r2, r0
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	4293      	cmp	r3, r2
 800b848:	db05      	blt.n	800b856 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i+0x3a>
 800b84a:	4b06      	ldr	r3, [pc, #24]	; (800b864 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i+0x48>)
 800b84c:	4a06      	ldr	r2, [pc, #24]	; (800b868 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i+0x4c>)
 800b84e:	2178      	movs	r1, #120	; 0x78
 800b850:	4806      	ldr	r0, [pc, #24]	; (800b86c <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i+0x50>)
 800b852:	f012 fb1f 	bl	801de94 <__assert_func>
 800b856:	bf00      	nop
    }
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	4618      	mov	r0, r3
 800b85c:	3710      	adds	r7, #16
 800b85e:	46bd      	mov	sp, r7
 800b860:	bd80      	pop	{r7, pc}
 800b862:	bf00      	nop
 800b864:	08024880 	.word	0x08024880
 800b868:	08024928 	.word	0x08024928
 800b86c:	08024a04 	.word	0x08024a04

0800b870 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800b870:	b480      	push	{r7}
 800b872:	b083      	sub	sp, #12
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	4618      	mov	r0, r3
 800b87c:	370c      	adds	r7, #12
 800b87e:	46bd      	mov	sp, r7
 800b880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b884:	4770      	bx	lr

0800b886 <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>:
 800b886:	b580      	push	{r7, lr}
 800b888:	b082      	sub	sp, #8
 800b88a:	af00      	add	r7, sp, #0
 800b88c:	6078      	str	r0, [r7, #4]
 800b88e:	6878      	ldr	r0, [r7, #4]
 800b890:	f001 f8ed 	bl	800ca6e <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	4618      	mov	r0, r3
 800b898:	3708      	adds	r7, #8
 800b89a:	46bd      	mov	sp, r7
 800b89c:	bd80      	pop	{r7, pc}

0800b89e <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 800b89e:	b580      	push	{r7, lr}
 800b8a0:	b082      	sub	sp, #8
 800b8a2:	af00      	add	r7, sp, #0
 800b8a4:	6078      	str	r0, [r7, #4]
 800b8a6:	6878      	ldr	r0, [r7, #4]
 800b8a8:	f7ff ffed 	bl	800b886 <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	3708      	adds	r7, #8
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	bd80      	pop	{r7, pc}

0800b8b6 <_ZN5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1ERS6_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 800b8b6:	b5b0      	push	{r4, r5, r7, lr}
 800b8b8:	b082      	sub	sp, #8
 800b8ba:	af00      	add	r7, sp, #0
 800b8bc:	6078      	str	r0, [r7, #4]
 800b8be:	6039      	str	r1, [r7, #0]
 800b8c0:	6878      	ldr	r0, [r7, #4]
 800b8c2:	f7ff ffec 	bl	800b89e <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS_5DenseEEC1Ev>
 800b8c6:	687a      	ldr	r2, [r7, #4]
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	4614      	mov	r4, r2
 800b8cc:	461d      	mov	r5, r3
 800b8ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b8d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b8d2:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b8d6:	e884 0003 	stmia.w	r4, {r0, r1}
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	4618      	mov	r0, r3
 800b8de:	3708      	adds	r7, #8
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	bdb0      	pop	{r4, r5, r7, pc}

0800b8e4 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b084      	sub	sp, #16
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	60f8      	str	r0, [r7, #12]
 800b8ec:	60b9      	str	r1, [r7, #8]
 800b8ee:	607a      	str	r2, [r7, #4]
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	687a      	ldr	r2, [r7, #4]
 800b8f4:	68b9      	ldr	r1, [r7, #8]
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	f001 f8c4 	bl	800ca84 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	db07      	blt.n	800b912 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i+0x2e>
 800b902:	68bb      	ldr	r3, [r7, #8]
 800b904:	4618      	mov	r0, r3
 800b906:	f7f9 fc47 	bl	8005198 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800b90a:	4602      	mov	r2, r0
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	4293      	cmp	r3, r2
 800b910:	db05      	blt.n	800b91e <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i+0x3a>
 800b912:	4b05      	ldr	r3, [pc, #20]	; (800b928 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i+0x44>)
 800b914:	4a05      	ldr	r2, [pc, #20]	; (800b92c <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i+0x48>)
 800b916:	2178      	movs	r1, #120	; 0x78
 800b918:	4805      	ldr	r0, [pc, #20]	; (800b930 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i+0x4c>)
 800b91a:	f012 fabb 	bl	801de94 <__assert_func>
    }
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	4618      	mov	r0, r3
 800b922:	3710      	adds	r7, #16
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}
 800b928:	08024880 	.word	0x08024880
 800b92c:	08024a58 	.word	0x08024a58
 800b930:	08024a04 	.word	0x08024a04

0800b934 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE7derivedEv>:
 800b934:	b480      	push	{r7}
 800b936:	b083      	sub	sp, #12
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	4618      	mov	r0, r3
 800b940:	370c      	adds	r7, #12
 800b942:	46bd      	mov	sp, r7
 800b944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b948:	4770      	bx	lr

0800b94a <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE7derivedEv>:
 800b94a:	b480      	push	{r7}
 800b94c:	b083      	sub	sp, #12
 800b94e:	af00      	add	r7, sp, #0
 800b950:	6078      	str	r0, [r7, #4]
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	4618      	mov	r0, r3
 800b956:	370c      	adds	r7, #12
 800b958:	46bd      	mov	sp, r7
 800b95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95e:	4770      	bx	lr

0800b960 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1Ev>:
 800b960:	b580      	push	{r7, lr}
 800b962:	b082      	sub	sp, #8
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
 800b968:	6878      	ldr	r0, [r7, #4]
 800b96a:	f001 f89c 	bl	800caa6 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1Ev>
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	4618      	mov	r0, r3
 800b972:	3708      	adds	r7, #8
 800b974:	46bd      	mov	sp, r7
 800b976:	bd80      	pop	{r7, pc}

0800b978 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 800b978:	b580      	push	{r7, lr}
 800b97a:	b082      	sub	sp, #8
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
 800b980:	6878      	ldr	r0, [r7, #4]
 800b982:	f7ff ffed 	bl	800b960 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1Ev>
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	4618      	mov	r0, r3
 800b98a:	3708      	adds	r7, #8
 800b98c:	46bd      	mov	sp, r7
 800b98e:	bd80      	pop	{r7, pc}

0800b990 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 800b990:	b580      	push	{r7, lr}
 800b992:	b082      	sub	sp, #8
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	4618      	mov	r0, r3
 800b99c:	f001 f88e 	bl	800cabc <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4colsEv>
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	3708      	adds	r7, #8
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	bd80      	pop	{r7, pc}

0800b9aa <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 800b9aa:	b580      	push	{r7, lr}
 800b9ac:	b082      	sub	sp, #8
 800b9ae:	af00      	add	r7, sp, #0
 800b9b0:	6078      	str	r0, [r7, #4]
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	f001 f88c 	bl	800cad2 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4rowsEv>
 800b9ba:	4603      	mov	r3, r0
 800b9bc:	4618      	mov	r0, r3
 800b9be:	3708      	adds	r7, #8
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	bd80      	pop	{r7, pc}

0800b9c4 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4rowsEv>:

    typedef typename Base::CoeffReturnType CoeffReturnType;

    /** \copydoc DenseBase::rows() */
    EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b082      	sub	sp, #8
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
 800b9cc:	f7fb f913 	bl	8006bf6 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 800b9d0:	4603      	mov	r3, r0
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	3708      	adds	r7, #8
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bd80      	pop	{r7, pc}

0800b9da <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4colsEv>:
    /** \copydoc DenseBase::cols() */
    EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 800b9da:	b580      	push	{r7, lr}
 800b9dc:	b082      	sub	sp, #8
 800b9de:	af00      	add	r7, sp, #0
 800b9e0:	6078      	str	r0, [r7, #4]
 800b9e2:	f7fb f910 	bl	8006c06 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	3708      	adds	r7, #8
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	bd80      	pop	{r7, pc}

0800b9f0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 800b9f0:	b5b0      	push	{r4, r5, r7, lr}
 800b9f2:	b084      	sub	sp, #16
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	60f8      	str	r0, [r7, #12]
 800b9f8:	60b9      	str	r1, [r7, #8]
 800b9fa:	607a      	str	r2, [r7, #4]
 800b9fc:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 800b9fe:	68f8      	ldr	r0, [r7, #12]
 800ba00:	f7ff ffba 	bl	800b978 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEENS_5DenseEEC1Ev>
 800ba04:	68fa      	ldr	r2, [r7, #12]
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	4614      	mov	r4, r2
 800ba0a:	461d      	mov	r5, r3
 800ba0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ba0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ba10:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ba14:	e884 0003 	stmia.w	r4, {r0, r1}
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	f103 0218 	add.w	r2, r3, #24
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	4614      	mov	r4, r2
 800ba22:	461d      	mov	r5, r3
 800ba24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ba26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ba28:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ba2c:	e884 0003 	stmia.w	r4, {r0, r1}
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	3330      	adds	r3, #48	; 0x30
 800ba34:	6839      	ldr	r1, [r7, #0]
 800ba36:	4618      	mov	r0, r3
 800ba38:	f7f9 fe3e 	bl	80056b8 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 800ba3c:	68b8      	ldr	r0, [r7, #8]
 800ba3e:	f7ff ffa7 	bl	800b990 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 800ba42:	4604      	mov	r4, r0
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	4618      	mov	r0, r3
 800ba48:	f7ff ffbc 	bl	800b9c4 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4rowsEv>
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	429c      	cmp	r4, r3
 800ba50:	d10a      	bne.n	800ba68 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x78>
 800ba52:	68b8      	ldr	r0, [r7, #8]
 800ba54:	f7ff ffa9 	bl	800b9aa <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 800ba58:	4604      	mov	r4, r0
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	f7ff ffbc 	bl	800b9da <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4colsEv>
 800ba62:	4603      	mov	r3, r0
 800ba64:	429c      	cmp	r4, r3
 800ba66:	d005      	beq.n	800ba74 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x84>
 800ba68:	4b05      	ldr	r3, [pc, #20]	; (800ba80 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x90>)
 800ba6a:	4a06      	ldr	r2, [pc, #24]	; (800ba84 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x94>)
 800ba6c:	2174      	movs	r1, #116	; 0x74
 800ba6e:	4806      	ldr	r0, [pc, #24]	; (800ba88 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x98>)
 800ba70:	f012 fa10 	bl	801de94 <__assert_func>
    }
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	4618      	mov	r0, r3
 800ba78:	3710      	adds	r7, #16
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	bdb0      	pop	{r4, r5, r7, pc}
 800ba7e:	bf00      	nop
 800ba80:	0801fcfc 	.word	0x0801fcfc
 800ba84:	08024b34 	.word	0x08024b34
 800ba88:	0801ff60 	.word	0x0801ff60

0800ba8c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b082      	sub	sp, #8
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
 800ba94:	6878      	ldr	r0, [r7, #4]
 800ba96:	f000 f809 	bl	800baac <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE7derivedEv>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	f001 f823 	bl	800cae8 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE4colsEv>
 800baa2:	4603      	mov	r3, r0
 800baa4:	4618      	mov	r0, r3
 800baa6:	3708      	adds	r7, #8
 800baa8:	46bd      	mov	sp, r7
 800baaa:	bd80      	pop	{r7, pc}

0800baac <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800baac:	b480      	push	{r7}
 800baae:	b083      	sub	sp, #12
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	4618      	mov	r0, r3
 800bab8:	370c      	adds	r7, #12
 800baba:	46bd      	mov	sp, r7
 800babc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac0:	4770      	bx	lr

0800bac2 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 800bac2:	b580      	push	{r7, lr}
 800bac4:	b082      	sub	sp, #8
 800bac6:	af00      	add	r7, sp, #0
 800bac8:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	4618      	mov	r0, r3
 800bace:	f7ff ff5f 	bl	800b990 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 800bad2:	4603      	mov	r3, r0
    }
 800bad4:	4618      	mov	r0, r3
 800bad6:	3708      	adds	r7, #8
 800bad8:	46bd      	mov	sp, r7
 800bada:	bd80      	pop	{r7, pc}

0800badc <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEED1Ev>:
// but that might complicate template specialization
template<typename Derived, typename PlainObjectType>
struct mapbase_evaluator;

template<typename Derived, typename PlainObjectType>
struct mapbase_evaluator : evaluator_base<Derived>
 800badc:	b580      	push	{r7, lr}
 800bade:	b082      	sub	sp, #8
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
 800bae4:	6878      	ldr	r0, [r7, #4]
 800bae6:	f001 f831 	bl	800cb4c <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEED1Ev>
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	4618      	mov	r0, r3
 800baee:	3708      	adds	r7, #8
 800baf0:	46bd      	mov	sp, r7
 800baf2:	bd80      	pop	{r7, pc}

0800baf4 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EED1Ev>:

// TODO: This evaluator does not actually use the child evaluator;
// all action is via the data() as returned by the Block expression.

template<typename ArgType, int BlockRows, int BlockCols, bool InnerPanel>
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b082      	sub	sp, #8
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	4618      	mov	r0, r3
 800bb00:	f7ff ffec 	bl	800badc <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	4618      	mov	r0, r3
 800bb08:	3708      	adds	r7, #8
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bd80      	pop	{r7, pc}

0800bb0e <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800bb0e:	b580      	push	{r7, lr}
 800bb10:	b082      	sub	sp, #8
 800bb12:	af00      	add	r7, sp, #0
 800bb14:	6078      	str	r0, [r7, #4]
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	4618      	mov	r0, r3
 800bb1a:	f7ff ffeb 	bl	800baf4 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EED1Ev>
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	4618      	mov	r0, r3
 800bb22:	3708      	adds	r7, #8
 800bb24:	46bd      	mov	sp, r7
 800bb26:	bd80      	pop	{r7, pc}

0800bb28 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEED1Ev>:
struct evaluator<const T>
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b082      	sub	sp, #8
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	4618      	mov	r0, r3
 800bb34:	f7ff ffeb 	bl	800bb0e <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEED1Ev>
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	3708      	adds	r7, #8
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	bd80      	pop	{r7, pc}

0800bb42 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 800bb42:	b580      	push	{r7, lr}
 800bb44:	b082      	sub	sp, #8
 800bb46:	af00      	add	r7, sp, #0
 800bb48:	6078      	str	r0, [r7, #4]
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	f7ff ffeb 	bl	800bb28 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEED1Ev>
 800bb52:	6878      	ldr	r0, [r7, #4]
 800bb54:	f000 ffef 	bl	800cb36 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	3708      	adds	r7, #8
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	bd80      	pop	{r7, pc}

0800bb62 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 800bb62:	b580      	push	{r7, lr}
 800bb64:	b082      	sub	sp, #8
 800bb66:	af00      	add	r7, sp, #0
 800bb68:	6078      	str	r0, [r7, #4]
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	f7ff ffe8 	bl	800bb42 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfED1Ev>
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	4618      	mov	r0, r3
 800bb76:	3708      	adds	r7, #8
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	bd80      	pop	{r7, pc}

0800bb7c <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>:
struct evaluator<const T>
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b082      	sub	sp, #8
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	4618      	mov	r0, r3
 800bb88:	f7ff ffeb 	bl	800bb62 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	4618      	mov	r0, r3
 800bb90:	3708      	adds	r7, #8
 800bb92:	46bd      	mov	sp, r7
 800bb94:	bd80      	pop	{r7, pc}

0800bb96 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_ED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 800bb96:	b580      	push	{r7, lr}
 800bb98:	b082      	sub	sp, #8
 800bb9a:	af00      	add	r7, sp, #0
 800bb9c:	6078      	str	r0, [r7, #4]
 800bb9e:	6878      	ldr	r0, [r7, #4]
 800bba0:	f000 ffdf 	bl	800cb62 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEED1Ev>
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	4618      	mov	r0, r3
 800bba8:	3708      	adds	r7, #8
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	bd80      	pop	{r7, pc}

0800bbae <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800bbae:	b580      	push	{r7, lr}
 800bbb0:	b082      	sub	sp, #8
 800bbb2:	af00      	add	r7, sp, #0
 800bbb4:	6078      	str	r0, [r7, #4]
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	4618      	mov	r0, r3
 800bbba:	f7ff ffec 	bl	800bb96 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_ED1Ev>
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	3708      	adds	r7, #8
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	bd80      	pop	{r7, pc}

0800bbc8 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b082      	sub	sp, #8
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	f7ff ffeb 	bl	800bbae <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EED1Ev>
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	4618      	mov	r0, r3
 800bbdc:	3708      	adds	r7, #8
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	bd80      	pop	{r7, pc}

0800bbe2 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEED1Ev>:
struct evaluator<const T>
 800bbe2:	b580      	push	{r7, lr}
 800bbe4:	b082      	sub	sp, #8
 800bbe6:	af00      	add	r7, sp, #0
 800bbe8:	6078      	str	r0, [r7, #4]
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	4618      	mov	r0, r3
 800bbee:	f7ff ffeb 	bl	800bbc8 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEED1Ev>
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	3708      	adds	r7, #8
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	bd80      	pop	{r7, pc}

0800bbfc <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>:
  struct Data
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b082      	sub	sp, #8
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	330c      	adds	r3, #12
 800bc08:	4618      	mov	r0, r3
 800bc0a:	f7ff ffea 	bl	800bbe2 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEED1Ev>
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	3304      	adds	r3, #4
 800bc12:	4618      	mov	r0, r3
 800bc14:	f7ff ffb2 	bl	800bb7c <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	3708      	adds	r7, #8
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	bd80      	pop	{r7, pc}

0800bc22 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 800bc22:	b580      	push	{r7, lr}
 800bc24:	b082      	sub	sp, #8
 800bc26:	af00      	add	r7, sp, #0
 800bc28:	6078      	str	r0, [r7, #4]
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	f7ff ffe5 	bl	800bbfc <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>
 800bc32:	6878      	ldr	r0, [r7, #4]
 800bc34:	f000 ff74 	bl	800cb20 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEED1Ev>
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	3708      	adds	r7, #8
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bd80      	pop	{r7, pc}

0800bc42 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 800bc42:	b580      	push	{r7, lr}
 800bc44:	b082      	sub	sp, #8
 800bc46:	af00      	add	r7, sp, #0
 800bc48:	6078      	str	r0, [r7, #4]
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	f7ff ffe8 	bl	800bc22 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffED1Ev>
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	4618      	mov	r0, r3
 800bc56:	3708      	adds	r7, #8
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	bd80      	pop	{r7, pc}

0800bc5c <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b082      	sub	sp, #8
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	4618      	mov	r0, r3
 800bc68:	f7ff ffeb 	bl	800bc42 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEED1Ev>
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	4618      	mov	r0, r3
 800bc70:	3708      	adds	r7, #8
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd80      	pop	{r7, pc}
	...

0800bc78 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	ed2d 8b02 	vpush	{d8}
 800bc7e:	b088      	sub	sp, #32
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
 800bc84:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 800bc86:	6878      	ldr	r0, [r7, #4]
 800bc88:	f7ff f9df 	bl	800b04a <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE4rowsEv>
 800bc8c:	4603      	mov	r3, r0
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	dd05      	ble.n	800bc9e <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 800bc92:	6878      	ldr	r0, [r7, #4]
 800bc94:	f7ff fefa 	bl	800ba8c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE4colsEv>
 800bc98:	4603      	mov	r3, r0
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	dc06      	bgt.n	800bcac <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 800bc9e:	4b16      	ldr	r3, [pc, #88]	; (800bcf8 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 800bca0:	4a16      	ldr	r2, [pc, #88]	; (800bcfc <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 800bca2:	f240 119b 	movw	r1, #411	; 0x19b
 800bca6:	4816      	ldr	r0, [pc, #88]	; (800bd00 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 800bca8:	f012 f8f4 	bl	801de94 <__assert_func>
 800bcac:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800bcae:	6878      	ldr	r0, [r7, #4]
 800bcb0:	f7ff fefc 	bl	800baac <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE7derivedEv>
 800bcb4:	4602      	mov	r2, r0
 800bcb6:	f107 030c 	add.w	r3, r7, #12
 800bcba:	4611      	mov	r1, r2
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	f000 ff20 	bl	800cb02 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1ERKSI_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800bcc2:	6878      	ldr	r0, [r7, #4]
 800bcc4:	f7ff fef2 	bl	800baac <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE7derivedEv>
 800bcc8:	4602      	mov	r2, r0
 800bcca:	f107 030c 	add.w	r3, r7, #12
 800bcce:	6839      	ldr	r1, [r7, #0]
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	f000 ff51 	bl	800cb78 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>
 800bcd6:	eeb0 8a40 	vmov.f32	s16, s0
 800bcda:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800bcdc:	f107 030c 	add.w	r3, r7, #12
 800bce0:	4618      	mov	r0, r3
 800bce2:	f7ff ffbb 	bl	800bc5c <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800bce6:	eef0 7a48 	vmov.f32	s15, s16
}
 800bcea:	eeb0 0a67 	vmov.f32	s0, s15
 800bcee:	3720      	adds	r7, #32
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	ecbd 8b02 	vpop	{d8}
 800bcf6:	bd80      	pop	{r7, pc}
 800bcf8:	08024d7c 	.word	0x08024d7c
 800bcfc:	08024dc0 	.word	0x08024dc0
 800bd00:	08024f88 	.word	0x08024f88

0800bd04 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b082      	sub	sp, #8
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
 800bd0c:	6878      	ldr	r0, [r7, #4]
 800bd0e:	f7fe feb4 	bl	800aa7a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE7derivedEv>
 800bd12:	4603      	mov	r3, r0
 800bd14:	4618      	mov	r0, r3
 800bd16:	f7fe fedd 	bl	800aad4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4colsEv>
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	3708      	adds	r7, #8
 800bd20:	46bd      	mov	sp, r7
 800bd22:	bd80      	pop	{r7, pc}

0800bd24 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEELi3ENS_10DenseShapeES9_ffEC1ERKS8_>:
  explicit product_evaluator(const XprType& xpr)
 800bd24:	b590      	push	{r4, r7, lr}
 800bd26:	b083      	sub	sp, #12
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
 800bd2c:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 800bd2e:	6878      	ldr	r0, [r7, #4]
 800bd30:	f000 ff4a 	bl	800cbc8 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEEC1Ev>
 800bd34:	687c      	ldr	r4, [r7, #4]
    : m_lhs(xpr.lhs()),
 800bd36:	6838      	ldr	r0, [r7, #0]
 800bd38:	f000 ff2f 	bl	800cb9a <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE3lhsEv>
 800bd3c:	4603      	mov	r3, r0
      m_innerDim(xpr.lhs().cols())
 800bd3e:	4619      	mov	r1, r3
 800bd40:	4620      	mov	r0, r4
 800bd42:	f000 ff4c 	bl	800cbde <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_7ProductIS1_S1_Li0EEEEERKT_>
      m_rhs(xpr.rhs()),
 800bd46:	6838      	ldr	r0, [r7, #0]
 800bd48:	f000 ff32 	bl	800cbb0 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE3rhsEv>
 800bd4c:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	3324      	adds	r3, #36	; 0x24
 800bd52:	6812      	ldr	r2, [r2, #0]
 800bd54:	601a      	str	r2, [r3, #0]
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	3328      	adds	r3, #40	; 0x28
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 800bd5a:	687a      	ldr	r2, [r7, #4]
      m_innerDim(xpr.lhs().cols())
 800bd5c:	4611      	mov	r1, r2
 800bd5e:	4618      	mov	r0, r3
 800bd60:	f7fb fe16 	bl	8007990 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	f103 022c 	add.w	r2, r3, #44	; 0x2c
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	3324      	adds	r3, #36	; 0x24
      m_innerDim(xpr.lhs().cols())
 800bd6e:	4619      	mov	r1, r3
 800bd70:	4610      	mov	r0, r2
 800bd72:	f000 ff49 	bl	800cc08 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1ERKS5_>
 800bd76:	6838      	ldr	r0, [r7, #0]
 800bd78:	f000 ff0f 	bl	800cb9a <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE3lhsEv>
 800bd7c:	4603      	mov	r3, r0
 800bd7e:	4618      	mov	r0, r3
 800bd80:	f7f9 feaf 	bl	8005ae2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4colsEv>
 800bd84:	4602      	mov	r2, r0
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	631a      	str	r2, [r3, #48]	; 0x30
  }
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	370c      	adds	r7, #12
 800bd90:	46bd      	mov	sp, r7
 800bd92:	bd90      	pop	{r4, r7, pc}

0800bd94 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b082      	sub	sp, #8
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	2100      	movs	r1, #0
 800bda0:	6878      	ldr	r0, [r7, #4]
 800bda2:	f000 ff40 	bl	800cc26 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800bda6:	6878      	ldr	r0, [r7, #4]
 800bda8:	f000 ff56 	bl	800cc58 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSG_>
  }
 800bdac:	bf00      	nop
 800bdae:	3708      	adds	r7, #8
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	bd80      	pop	{r7, pc}

0800bdb4 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b086      	sub	sp, #24
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	60f8      	str	r0, [r7, #12]
 800bdbc:	60b9      	str	r1, [r7, #8]
 800bdbe:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800bdc4:	687a      	ldr	r2, [r7, #4]
 800bdc6:	68b9      	ldr	r1, [r7, #8]
 800bdc8:	6978      	ldr	r0, [r7, #20]
 800bdca:	f000 ff55 	bl	800cc78 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_>
}
 800bdce:	bf00      	nop
 800bdd0:	3718      	adds	r7, #24
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bd80      	pop	{r7, pc}

0800bdd6 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>:
  Derived& derived() { return *static_cast<Derived*>(this); }
 800bdd6:	b480      	push	{r7}
 800bdd8:	b083      	sub	sp, #12
 800bdda:	af00      	add	r7, sp, #0
 800bddc:	6078      	str	r0, [r7, #4]
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	4618      	mov	r0, r3
 800bde2:	370c      	adds	r7, #12
 800bde4:	46bd      	mov	sp, r7
 800bde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdea:	4770      	bx	lr

0800bdec <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b086      	sub	sp, #24
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	60f8      	str	r0, [r7, #12]
 800bdf4:	60b9      	str	r1, [r7, #8]
 800bdf6:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800bdfc:	687a      	ldr	r2, [r7, #4]
 800bdfe:	68b9      	ldr	r1, [r7, #8]
 800be00:	6978      	ldr	r0, [r7, #20]
 800be02:	f000 ff73 	bl	800ccec <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_>
}
 800be06:	bf00      	nop
 800be08:	3718      	adds	r7, #24
 800be0a:	46bd      	mov	sp, r7
 800be0c:	bd80      	pop	{r7, pc}

0800be0e <_ZNK5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC const T *data() const { return m_data.array; }
 800be0e:	b480      	push	{r7}
 800be10:	b083      	sub	sp, #12
 800be12:	af00      	add	r7, sp, #0
 800be14:	6078      	str	r0, [r7, #4]
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	4618      	mov	r0, r3
 800be1a:	370c      	adds	r7, #12
 800be1c:	46bd      	mov	sp, r7
 800be1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be22:	4770      	bx	lr

0800be24 <_ZNK5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EE11outerStrideEv>:
    inline Index outerStride() const EIGEN_NOEXCEPT { return this->innerSize(); }
 800be24:	b580      	push	{r7, lr}
 800be26:	b082      	sub	sp, #8
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
 800be2c:	6878      	ldr	r0, [r7, #4]
 800be2e:	f000 ff9c 	bl	800cd6a <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE9innerSizeEv>
 800be32:	4603      	mov	r3, r0
 800be34:	4618      	mov	r0, r3
 800be36:	3708      	adds	r7, #8
 800be38:	46bd      	mov	sp, r7
 800be3a:	bd80      	pop	{r7, pc}

0800be3c <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b084      	sub	sp, #16
 800be40:	af00      	add	r7, sp, #0
 800be42:	60f8      	str	r0, [r7, #12]
 800be44:	60b9      	str	r1, [r7, #8]
 800be46:	607a      	str	r2, [r7, #4]
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	687a      	ldr	r2, [r7, #4]
 800be4c:	68b9      	ldr	r1, [r7, #8]
 800be4e:	4618      	mov	r0, r3
 800be50:	f000 ff97 	bl	800cd82 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	2b00      	cmp	r3, #0
 800be58:	db07      	blt.n	800be6a <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEC1ERS3_i+0x2e>
 800be5a:	68bb      	ldr	r3, [r7, #8]
 800be5c:	4618      	mov	r0, r3
 800be5e:	f7f9 f9a6 	bl	80051ae <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800be62:	4602      	mov	r2, r0
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	4293      	cmp	r3, r2
 800be68:	db05      	blt.n	800be76 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEC1ERS3_i+0x3a>
 800be6a:	4b06      	ldr	r3, [pc, #24]	; (800be84 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEC1ERS3_i+0x48>)
 800be6c:	4a06      	ldr	r2, [pc, #24]	; (800be88 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEC1ERS3_i+0x4c>)
 800be6e:	2178      	movs	r1, #120	; 0x78
 800be70:	4806      	ldr	r0, [pc, #24]	; (800be8c <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEC1ERS3_i+0x50>)
 800be72:	f012 f80f 	bl	801de94 <__assert_func>
 800be76:	bf00      	nop
    }
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	4618      	mov	r0, r3
 800be7c:	3710      	adds	r7, #16
 800be7e:	46bd      	mov	sp, r7
 800be80:	bd80      	pop	{r7, pc}
 800be82:	bf00      	nop
 800be84:	08024880 	.word	0x08024880
 800be88:	08024fdc 	.word	0x08024fdc
 800be8c:	08024a04 	.word	0x08024a04

0800be90 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800be90:	b480      	push	{r7}
 800be92:	b083      	sub	sp, #12
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	4618      	mov	r0, r3
 800be9c:	370c      	adds	r7, #12
 800be9e:	46bd      	mov	sp, r7
 800bea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea4:	4770      	bx	lr

0800bea6 <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1Ev>:
 800bea6:	b580      	push	{r7, lr}
 800bea8:	b082      	sub	sp, #8
 800beaa:	af00      	add	r7, sp, #0
 800beac:	6078      	str	r0, [r7, #4]
 800beae:	6878      	ldr	r0, [r7, #4]
 800beb0:	f000 ff78 	bl	800cda4 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1Ev>
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	4618      	mov	r0, r3
 800beb8:	3708      	adds	r7, #8
 800beba:	46bd      	mov	sp, r7
 800bebc:	bd80      	pop	{r7, pc}

0800bebe <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 800bebe:	b580      	push	{r7, lr}
 800bec0:	b082      	sub	sp, #8
 800bec2:	af00      	add	r7, sp, #0
 800bec4:	6078      	str	r0, [r7, #4]
 800bec6:	6878      	ldr	r0, [r7, #4]
 800bec8:	f7ff ffed 	bl	800bea6 <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1Ev>
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	4618      	mov	r0, r3
 800bed0:	3708      	adds	r7, #8
 800bed2:	46bd      	mov	sp, r7
 800bed4:	bd80      	pop	{r7, pc}

0800bed6 <_ZN5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1ERS6_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 800bed6:	b5b0      	push	{r4, r5, r7, lr}
 800bed8:	b082      	sub	sp, #8
 800beda:	af00      	add	r7, sp, #0
 800bedc:	6078      	str	r0, [r7, #4]
 800bede:	6039      	str	r1, [r7, #0]
 800bee0:	6878      	ldr	r0, [r7, #4]
 800bee2:	f7ff ffec 	bl	800bebe <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS_5DenseEEC1Ev>
 800bee6:	687a      	ldr	r2, [r7, #4]
 800bee8:	683b      	ldr	r3, [r7, #0]
 800beea:	4614      	mov	r4, r2
 800beec:	461d      	mov	r5, r3
 800beee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bef0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bef2:	e895 0003 	ldmia.w	r5, {r0, r1}
 800bef6:	e884 0003 	stmia.w	r4, {r0, r1}
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	4618      	mov	r0, r3
 800befe:	3708      	adds	r7, #8
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bdb0      	pop	{r4, r5, r7, pc}

0800bf04 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b084      	sub	sp, #16
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	60f8      	str	r0, [r7, #12]
 800bf0c:	60b9      	str	r1, [r7, #8]
 800bf0e:	607a      	str	r2, [r7, #4]
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	687a      	ldr	r2, [r7, #4]
 800bf14:	68b9      	ldr	r1, [r7, #8]
 800bf16:	4618      	mov	r0, r3
 800bf18:	f000 ff4f 	bl	800cdba <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	db0f      	blt.n	800bf42 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i+0x3e>
 800bf22:	68bb      	ldr	r3, [r7, #8]
 800bf24:	4618      	mov	r0, r3
 800bf26:	f7fa f88c 	bl	8006042 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800bf2a:	4602      	mov	r2, r0
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	4293      	cmp	r3, r2
 800bf30:	db0d      	blt.n	800bf4e <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i+0x4a>
 800bf32:	68bb      	ldr	r3, [r7, #8]
 800bf34:	4618      	mov	r0, r3
 800bf36:	f7fa f88f 	bl	8006058 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800bf3a:	4602      	mov	r2, r0
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	4293      	cmp	r3, r2
 800bf40:	db05      	blt.n	800bf4e <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i+0x4a>
 800bf42:	4b06      	ldr	r3, [pc, #24]	; (800bf5c <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i+0x58>)
 800bf44:	4a06      	ldr	r2, [pc, #24]	; (800bf60 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i+0x5c>)
 800bf46:	2178      	movs	r1, #120	; 0x78
 800bf48:	4806      	ldr	r0, [pc, #24]	; (800bf64 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i+0x60>)
 800bf4a:	f011 ffa3 	bl	801de94 <__assert_func>
 800bf4e:	bf00      	nop
    }
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	4618      	mov	r0, r3
 800bf54:	3710      	adds	r7, #16
 800bf56:	46bd      	mov	sp, r7
 800bf58:	bd80      	pop	{r7, pc}
 800bf5a:	bf00      	nop
 800bf5c:	08024880 	.word	0x08024880
 800bf60:	080250b8 	.word	0x080250b8
 800bf64:	08024a04 	.word	0x08024a04

0800bf68 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE7derivedEv>:
 800bf68:	b480      	push	{r7}
 800bf6a:	b083      	sub	sp, #12
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	4618      	mov	r0, r3
 800bf74:	370c      	adds	r7, #12
 800bf76:	46bd      	mov	sp, r7
 800bf78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7c:	4770      	bx	lr

0800bf7e <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE7derivedEv>:
 800bf7e:	b480      	push	{r7}
 800bf80:	b083      	sub	sp, #12
 800bf82:	af00      	add	r7, sp, #0
 800bf84:	6078      	str	r0, [r7, #4]
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	4618      	mov	r0, r3
 800bf8a:	370c      	adds	r7, #12
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf92:	4770      	bx	lr

0800bf94 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1Ev>:
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b082      	sub	sp, #8
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
 800bf9c:	6878      	ldr	r0, [r7, #4]
 800bf9e:	f000 ff1d 	bl	800cddc <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1Ev>
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	3708      	adds	r7, #8
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	bd80      	pop	{r7, pc}

0800bfac <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b082      	sub	sp, #8
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]
 800bfb4:	6878      	ldr	r0, [r7, #4]
 800bfb6:	f7ff ffed 	bl	800bf94 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1Ev>
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	3708      	adds	r7, #8
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd80      	pop	{r7, pc}

0800bfc4 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b082      	sub	sp, #8
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	4618      	mov	r0, r3
 800bfd0:	f000 ff0f 	bl	800cdf2 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE4colsEv>
 800bfd4:	4603      	mov	r3, r0
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	3708      	adds	r7, #8
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bd80      	pop	{r7, pc}

0800bfde <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 800bfde:	b580      	push	{r7, lr}
 800bfe0:	b082      	sub	sp, #8
 800bfe2:	af00      	add	r7, sp, #0
 800bfe4:	6078      	str	r0, [r7, #4]
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	4618      	mov	r0, r3
 800bfea:	f000 ff0d 	bl	800ce08 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE4rowsEv>
 800bfee:	4603      	mov	r3, r0
 800bff0:	4618      	mov	r0, r3
 800bff2:	3708      	adds	r7, #8
 800bff4:	46bd      	mov	sp, r7
 800bff6:	bd80      	pop	{r7, pc}

0800bff8 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b082      	sub	sp, #8
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
 800c000:	f7fa fe01 	bl	8006c06 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800c004:	4603      	mov	r3, r0
 800c006:	4618      	mov	r0, r3
 800c008:	3708      	adds	r7, #8
 800c00a:	46bd      	mov	sp, r7
 800c00c:	bd80      	pop	{r7, pc}

0800c00e <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 800c00e:	b580      	push	{r7, lr}
 800c010:	b082      	sub	sp, #8
 800c012:	af00      	add	r7, sp, #0
 800c014:	6078      	str	r0, [r7, #4]
 800c016:	f7fa fdf6 	bl	8006c06 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800c01a:	4603      	mov	r3, r0
 800c01c:	4618      	mov	r0, r3
 800c01e:	3708      	adds	r7, #8
 800c020:	46bd      	mov	sp, r7
 800c022:	bd80      	pop	{r7, pc}

0800c024 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERSC_RSG_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 800c024:	b5b0      	push	{r4, r5, r7, lr}
 800c026:	b084      	sub	sp, #16
 800c028:	af00      	add	r7, sp, #0
 800c02a:	60f8      	str	r0, [r7, #12]
 800c02c:	60b9      	str	r1, [r7, #8]
 800c02e:	607a      	str	r2, [r7, #4]
 800c030:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 800c032:	68f8      	ldr	r0, [r7, #12]
 800c034:	f7ff ffba 	bl	800bfac <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEENS_5DenseEEC1Ev>
 800c038:	68fa      	ldr	r2, [r7, #12]
 800c03a:	68bb      	ldr	r3, [r7, #8]
 800c03c:	4614      	mov	r4, r2
 800c03e:	461d      	mov	r5, r3
 800c040:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c042:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c044:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c048:	e884 0003 	stmia.w	r4, {r0, r1}
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	f103 0218 	add.w	r2, r3, #24
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	4614      	mov	r4, r2
 800c056:	461d      	mov	r5, r3
 800c058:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c05a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c05c:	682b      	ldr	r3, [r5, #0]
 800c05e:	6023      	str	r3, [r4, #0]
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	332c      	adds	r3, #44	; 0x2c
 800c064:	6839      	ldr	r1, [r7, #0]
 800c066:	4618      	mov	r0, r3
 800c068:	f7f9 fb26 	bl	80056b8 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 800c06c:	68b8      	ldr	r0, [r7, #8]
 800c06e:	f7ff ffa9 	bl	800bfc4 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4rowsEv>
 800c072:	4604      	mov	r4, r0
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	4618      	mov	r0, r3
 800c078:	f7ff ffbe 	bl	800bff8 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE4rowsEv>
 800c07c:	4603      	mov	r3, r0
 800c07e:	429c      	cmp	r4, r3
 800c080:	d10a      	bne.n	800c098 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x74>
 800c082:	68b8      	ldr	r0, [r7, #8]
 800c084:	f7ff ffab 	bl	800bfde <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4colsEv>
 800c088:	4604      	mov	r4, r0
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	4618      	mov	r0, r3
 800c08e:	f7ff ffbe 	bl	800c00e <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE4colsEv>
 800c092:	4603      	mov	r3, r0
 800c094:	429c      	cmp	r4, r3
 800c096:	d005      	beq.n	800c0a4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x80>
 800c098:	4b05      	ldr	r3, [pc, #20]	; (800c0b0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x8c>)
 800c09a:	4a06      	ldr	r2, [pc, #24]	; (800c0b4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x90>)
 800c09c:	2174      	movs	r1, #116	; 0x74
 800c09e:	4806      	ldr	r0, [pc, #24]	; (800c0b8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x94>)
 800c0a0:	f011 fef8 	bl	801de94 <__assert_func>
    }
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	3710      	adds	r7, #16
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	bdb0      	pop	{r4, r5, r7, pc}
 800c0ae:	bf00      	nop
 800c0b0:	0801fcfc 	.word	0x0801fcfc
 800c0b4:	08025194 	.word	0x08025194
 800c0b8:	0801ff60 	.word	0x0801ff60

0800c0bc <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b082      	sub	sp, #8
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	6078      	str	r0, [r7, #4]
 800c0c4:	6878      	ldr	r0, [r7, #4]
 800c0c6:	f000 f809 	bl	800c0dc <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE7derivedEv>
 800c0ca:	4603      	mov	r3, r0
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	f000 fea6 	bl	800ce1e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE4colsEv>
 800c0d2:	4603      	mov	r3, r0
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	3708      	adds	r7, #8
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	bd80      	pop	{r7, pc}

0800c0dc <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800c0dc:	b480      	push	{r7}
 800c0de:	b083      	sub	sp, #12
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	370c      	adds	r7, #12
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f0:	4770      	bx	lr

0800c0f2 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 800c0f2:	b580      	push	{r7, lr}
 800c0f4:	b082      	sub	sp, #8
 800c0f6:	af00      	add	r7, sp, #0
 800c0f8:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	f7ff ff61 	bl	800bfc4 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4rowsEv>
 800c102:	4603      	mov	r3, r0
    }
 800c104:	4618      	mov	r0, r3
 800c106:	3708      	adds	r7, #8
 800c108:	46bd      	mov	sp, r7
 800c10a:	bd80      	pop	{r7, pc}

0800c10c <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b082      	sub	sp, #8
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
 800c114:	6878      	ldr	r0, [r7, #4]
 800c116:	f000 feb4 	bl	800ce82 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEED1Ev>
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	4618      	mov	r0, r3
 800c11e:	3708      	adds	r7, #8
 800c120:	46bd      	mov	sp, r7
 800c122:	bd80      	pop	{r7, pc}

0800c124 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800c124:	b580      	push	{r7, lr}
 800c126:	b082      	sub	sp, #8
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	4618      	mov	r0, r3
 800c130:	f7ff ffec 	bl	800c10c <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	4618      	mov	r0, r3
 800c138:	3708      	adds	r7, #8
 800c13a:	46bd      	mov	sp, r7
 800c13c:	bd80      	pop	{r7, pc}

0800c13e <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800c13e:	b580      	push	{r7, lr}
 800c140:	b082      	sub	sp, #8
 800c142:	af00      	add	r7, sp, #0
 800c144:	6078      	str	r0, [r7, #4]
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	4618      	mov	r0, r3
 800c14a:	f7ff ffeb 	bl	800c124 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EED1Ev>
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	4618      	mov	r0, r3
 800c152:	3708      	adds	r7, #8
 800c154:	46bd      	mov	sp, r7
 800c156:	bd80      	pop	{r7, pc}

0800c158 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<const T>
 800c158:	b580      	push	{r7, lr}
 800c15a:	b082      	sub	sp, #8
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	4618      	mov	r0, r3
 800c164:	f7ff ffeb 	bl	800c13e <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEED1Ev>
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	4618      	mov	r0, r3
 800c16c:	3708      	adds	r7, #8
 800c16e:	46bd      	mov	sp, r7
 800c170:	bd80      	pop	{r7, pc}

0800c172 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 800c172:	b580      	push	{r7, lr}
 800c174:	b082      	sub	sp, #8
 800c176:	af00      	add	r7, sp, #0
 800c178:	6078      	str	r0, [r7, #4]
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	4618      	mov	r0, r3
 800c17e:	f7ff ffeb 	bl	800c158 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEED1Ev>
 800c182:	6878      	ldr	r0, [r7, #4]
 800c184:	f000 fe72 	bl	800ce6c <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEED1Ev>
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	4618      	mov	r0, r3
 800c18c:	3708      	adds	r7, #8
 800c18e:	46bd      	mov	sp, r7
 800c190:	bd80      	pop	{r7, pc}

0800c192 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 800c192:	b580      	push	{r7, lr}
 800c194:	b082      	sub	sp, #8
 800c196:	af00      	add	r7, sp, #0
 800c198:	6078      	str	r0, [r7, #4]
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	4618      	mov	r0, r3
 800c19e:	f7ff ffe8 	bl	800c172 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEENS0_10IndexBasedEfED1Ev>
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	3708      	adds	r7, #8
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	bd80      	pop	{r7, pc}

0800c1ac <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEED1Ev>:
struct evaluator<const T>
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b082      	sub	sp, #8
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	f7ff ffeb 	bl	800c192 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEED1Ev>
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	4618      	mov	r0, r3
 800c1c0:	3708      	adds	r7, #8
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	bd80      	pop	{r7, pc}

0800c1c6 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_ED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 800c1c6:	b580      	push	{r7, lr}
 800c1c8:	b082      	sub	sp, #8
 800c1ca:	af00      	add	r7, sp, #0
 800c1cc:	6078      	str	r0, [r7, #4]
 800c1ce:	6878      	ldr	r0, [r7, #4]
 800c1d0:	f000 fe62 	bl	800ce98 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEED1Ev>
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	3708      	adds	r7, #8
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	bd80      	pop	{r7, pc}

0800c1de <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800c1de:	b580      	push	{r7, lr}
 800c1e0:	b082      	sub	sp, #8
 800c1e2:	af00      	add	r7, sp, #0
 800c1e4:	6078      	str	r0, [r7, #4]
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	f7ff ffec 	bl	800c1c6 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_ED1Ev>
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	3708      	adds	r7, #8
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	bd80      	pop	{r7, pc}

0800c1f8 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b082      	sub	sp, #8
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	4618      	mov	r0, r3
 800c204:	f7ff ffeb 	bl	800c1de <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EED1Ev>
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	4618      	mov	r0, r3
 800c20c:	3708      	adds	r7, #8
 800c20e:	46bd      	mov	sp, r7
 800c210:	bd80      	pop	{r7, pc}

0800c212 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEED1Ev>:
struct evaluator<const T>
 800c212:	b580      	push	{r7, lr}
 800c214:	b082      	sub	sp, #8
 800c216:	af00      	add	r7, sp, #0
 800c218:	6078      	str	r0, [r7, #4]
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	4618      	mov	r0, r3
 800c21e:	f7ff ffeb 	bl	800c1f8 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEED1Ev>
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	4618      	mov	r0, r3
 800c226:	3708      	adds	r7, #8
 800c228:	46bd      	mov	sp, r7
 800c22a:	bd80      	pop	{r7, pc}

0800c22c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>:
  struct Data
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b082      	sub	sp, #8
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	330c      	adds	r3, #12
 800c238:	4618      	mov	r0, r3
 800c23a:	f7ff ffea 	bl	800c212 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEED1Ev>
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	3304      	adds	r3, #4
 800c242:	4618      	mov	r0, r3
 800c244:	f7ff ffb2 	bl	800c1ac <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEED1Ev>
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	4618      	mov	r0, r3
 800c24c:	3708      	adds	r7, #8
 800c24e:	46bd      	mov	sp, r7
 800c250:	bd80      	pop	{r7, pc}

0800c252 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 800c252:	b580      	push	{r7, lr}
 800c254:	b082      	sub	sp, #8
 800c256:	af00      	add	r7, sp, #0
 800c258:	6078      	str	r0, [r7, #4]
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	4618      	mov	r0, r3
 800c25e:	f7ff ffe5 	bl	800c22c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>
 800c262:	6878      	ldr	r0, [r7, #4]
 800c264:	f000 fdf7 	bl	800ce56 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEED1Ev>
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	4618      	mov	r0, r3
 800c26c:	3708      	adds	r7, #8
 800c26e:	46bd      	mov	sp, r7
 800c270:	bd80      	pop	{r7, pc}

0800c272 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 800c272:	b580      	push	{r7, lr}
 800c274:	b082      	sub	sp, #8
 800c276:	af00      	add	r7, sp, #0
 800c278:	6078      	str	r0, [r7, #4]
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	4618      	mov	r0, r3
 800c27e:	f7ff ffe8 	bl	800c252 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffED1Ev>
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	4618      	mov	r0, r3
 800c286:	3708      	adds	r7, #8
 800c288:	46bd      	mov	sp, r7
 800c28a:	bd80      	pop	{r7, pc}

0800c28c <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b082      	sub	sp, #8
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	4618      	mov	r0, r3
 800c298:	f7ff ffeb 	bl	800c272 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEED1Ev>
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	4618      	mov	r0, r3
 800c2a0:	3708      	adds	r7, #8
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	bd80      	pop	{r7, pc}
	...

0800c2a8 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	ed2d 8b02 	vpush	{d8}
 800c2ae:	b088      	sub	sp, #32
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
 800c2b4:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 800c2b6:	6878      	ldr	r0, [r7, #4]
 800c2b8:	f7ff f897 	bl	800b3ea <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE4rowsEv>
 800c2bc:	4603      	mov	r3, r0
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	dd05      	ble.n	800c2ce <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 800c2c2:	6878      	ldr	r0, [r7, #4]
 800c2c4:	f7ff fefa 	bl	800c0bc <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE4colsEv>
 800c2c8:	4603      	mov	r3, r0
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	dc06      	bgt.n	800c2dc <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 800c2ce:	4b16      	ldr	r3, [pc, #88]	; (800c328 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 800c2d0:	4a16      	ldr	r2, [pc, #88]	; (800c32c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 800c2d2:	f240 119b 	movw	r1, #411	; 0x19b
 800c2d6:	4816      	ldr	r0, [pc, #88]	; (800c330 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 800c2d8:	f011 fddc 	bl	801de94 <__assert_func>
 800c2dc:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800c2de:	6878      	ldr	r0, [r7, #4]
 800c2e0:	f7ff fefc 	bl	800c0dc <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE7derivedEv>
 800c2e4:	4602      	mov	r2, r0
 800c2e6:	f107 030c 	add.w	r3, r7, #12
 800c2ea:	4611      	mov	r1, r2
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	f000 fda3 	bl	800ce38 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1ERKSI_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800c2f2:	6878      	ldr	r0, [r7, #4]
 800c2f4:	f7ff fef2 	bl	800c0dc <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE7derivedEv>
 800c2f8:	4602      	mov	r2, r0
 800c2fa:	f107 030c 	add.w	r3, r7, #12
 800c2fe:	6839      	ldr	r1, [r7, #0]
 800c300:	4618      	mov	r0, r3
 800c302:	f000 fdd4 	bl	800ceae <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>
 800c306:	eeb0 8a40 	vmov.f32	s16, s0
 800c30a:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800c30c:	f107 030c 	add.w	r3, r7, #12
 800c310:	4618      	mov	r0, r3
 800c312:	f7ff ffbb 	bl	800c28c <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800c316:	eef0 7a48 	vmov.f32	s15, s16
}
 800c31a:	eeb0 0a67 	vmov.f32	s0, s15
 800c31e:	3720      	adds	r7, #32
 800c320:	46bd      	mov	sp, r7
 800c322:	ecbd 8b02 	vpop	{d8}
 800c326:	bd80      	pop	{r7, pc}
 800c328:	08024d7c 	.word	0x08024d7c
 800c32c:	080253dc 	.word	0x080253dc
 800c330:	08024f88 	.word	0x08024f88

0800c334 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEESF_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 800c334:	b580      	push	{r7, lr}
 800c336:	b082      	sub	sp, #8
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
 800c33c:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 800c33e:	6839      	ldr	r1, [r7, #0]
 800c340:	6878      	ldr	r0, [r7, #4]
 800c342:	f000 fdc5 	bl	800ced0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 800c346:	bf00      	nop
 800c348:	3708      	adds	r7, #8
 800c34a:	46bd      	mov	sp, r7
 800c34c:	bd80      	pop	{r7, pc}

0800c34e <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEELi4ENS_10DenseShapeESF_ffE5coeffEi>:
  const CoeffReturnType coeff(Index index) const
 800c34e:	b580      	push	{r7, lr}
 800c350:	b0a2      	sub	sp, #136	; 0x88
 800c352:	af00      	add	r7, sp, #0
 800c354:	6078      	str	r0, [r7, #4]
 800c356:	6039      	str	r1, [r7, #0]
    const Index row = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? 0 : index;
 800c358:	683b      	ldr	r3, [r7, #0]
 800c35a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    const Index col = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? index : 0;
 800c35e:	2300      	movs	r3, #0
 800c360:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	6819      	ldr	r1, [r3, #0]
 800c368:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800c36c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c370:	4618      	mov	r0, r3
 800c372:	f7fe ffe5 	bl	800b340 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE3rowEi>
 800c376:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c37a:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800c37e:	4611      	mov	r1, r2
 800c380:	4618      	mov	r0, r3
 800c382:	f7fe fff0 	bl	800b366 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE9transposeEv>
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	1d19      	adds	r1, r3, #4
 800c38a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800c38e:	2200      	movs	r2, #0
 800c390:	4618      	mov	r0, r3
 800c392:	f7fe fff9 	bl	800b388 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE3colEi>
 800c396:	f107 030c 	add.w	r3, r7, #12
 800c39a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800c39e:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	f7ff f803 	bl	800b3ae <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE12cwiseProductINS2_IKNS3_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>
 800c3a8:	f107 030c 	add.w	r3, r7, #12
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	f7ff f82c 	bl	800b40a <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE3sumEv>
 800c3b2:	eef0 7a40 	vmov.f32	s15, s0
  }
 800c3b6:	eeb0 0a67 	vmov.f32	s0, s15
 800c3ba:	3788      	adds	r7, #136	; 0x88
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	bd80      	pop	{r7, pc}

0800c3c0 <_ZNK5Eigen8internal13add_assign_opIffE11assignCoeffERfRKf>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a += b; }
 800c3c0:	b480      	push	{r7}
 800c3c2:	b085      	sub	sp, #20
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	60f8      	str	r0, [r7, #12]
 800c3c8:	60b9      	str	r1, [r7, #8]
 800c3ca:	607a      	str	r2, [r7, #4]
 800c3cc:	68bb      	ldr	r3, [r7, #8]
 800c3ce:	ed93 7a00 	vldr	s14, [r3]
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	edd3 7a00 	vldr	s15, [r3]
 800c3d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c3dc:	68bb      	ldr	r3, [r7, #8]
 800c3de:	edc3 7a00 	vstr	s15, [r3]
 800c3e2:	bf00      	nop
 800c3e4:	3714      	adds	r7, #20
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ec:	4770      	bx	lr

0800c3ee <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi2ELi3EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800c3ee:	b580      	push	{r7, lr}
 800c3f0:	b082      	sub	sp, #8
 800c3f2:	af00      	add	r7, sp, #0
 800c3f4:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800c3f6:	2102      	movs	r1, #2
 800c3f8:	6878      	ldr	r0, [r7, #4]
 800c3fa:	f7ff f863 	bl	800b4c4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductIS4_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS6_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800c3fe:	6878      	ldr	r0, [r7, #4]
 800c400:	f000 fd87 	bl	800cf12 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi3ELi3EE3runERSL_>
  }
 800c404:	bf00      	nop
 800c406:	3708      	adds	r7, #8
 800c408:	46bd      	mov	sp, r7
 800c40a:	bd80      	pop	{r7, pc}

0800c40c <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800c40c:	b580      	push	{r7, lr}
 800c40e:	b086      	sub	sp, #24
 800c410:	af00      	add	r7, sp, #0
 800c412:	60f8      	str	r0, [r7, #12]
 800c414:	60b9      	str	r1, [r7, #8]
 800c416:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800c41c:	687a      	ldr	r2, [r7, #4]
 800c41e:	68b9      	ldr	r1, [r7, #8]
 800c420:	6978      	ldr	r0, [r7, #20]
 800c422:	f000 fd80 	bl	800cf26 <_ZN5Eigen8internal30assignment_from_xpr_op_productINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_9assign_opIffEENS0_13sub_assign_opIffEEE3runINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KS7_EES9_EEvRS3_RKT_RKT0_>
}
 800c426:	bf00      	nop
 800c428:	3718      	adds	r7, #24
 800c42a:	46bd      	mov	sp, r7
 800c42c:	bd80      	pop	{r7, pc}

0800c42e <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3colEi>:
ConstColXpr col(Index i) const
 800c42e:	b580      	push	{r7, lr}
 800c430:	b084      	sub	sp, #16
 800c432:	af00      	add	r7, sp, #0
 800c434:	60f8      	str	r0, [r7, #12]
 800c436:	60b9      	str	r1, [r7, #8]
 800c438:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 800c43a:	68b8      	ldr	r0, [r7, #8]
 800c43c:	f7f9 fa1b 	bl	8005876 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800c440:	4603      	mov	r3, r0
 800c442:	687a      	ldr	r2, [r7, #4]
 800c444:	4619      	mov	r1, r3
 800c446:	68f8      	ldr	r0, [r7, #12]
 800c448:	f000 fd98 	bl	800cf7c <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i>
}
 800c44c:	68f8      	ldr	r0, [r7, #12]
 800c44e:	3710      	adds	r7, #16
 800c450:	46bd      	mov	sp, r7
 800c452:	bd80      	pop	{r7, pc}

0800c454 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IS5_Li3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSD_6traitsIT_E6ScalarEEEKS8_KSG_EERKNS0_ISG_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 800c454:	b5b0      	push	{r4, r5, r7, lr}
 800c456:	b086      	sub	sp, #24
 800c458:	af00      	add	r7, sp, #0
 800c45a:	60f8      	str	r0, [r7, #12]
 800c45c:	60b9      	str	r1, [r7, #8]
 800c45e:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 800c460:	68b8      	ldr	r0, [r7, #8]
 800c462:	f7ff fa67 	bl	800b934 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE7derivedEv>
 800c466:	4604      	mov	r4, r0
 800c468:	6878      	ldr	r0, [r7, #4]
 800c46a:	f000 fdaf 	bl	800cfcc <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE7derivedEv>
 800c46e:	4605      	mov	r5, r0
 800c470:	f107 0314 	add.w	r3, r7, #20
 800c474:	4618      	mov	r0, r3
 800c476:	f7f9 f895 	bl	80055a4 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 800c47a:	f107 0314 	add.w	r3, r7, #20
 800c47e:	462a      	mov	r2, r5
 800c480:	4621      	mov	r1, r4
 800c482:	68f8      	ldr	r0, [r7, #12]
 800c484:	f000 fddc 	bl	800d040 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEEC1ERSC_RSE_RKS3_>
}
 800c488:	68f8      	ldr	r0, [r7, #12]
 800c48a:	3718      	adds	r7, #24
 800c48c:	46bd      	mov	sp, r7
 800c48e:	bdb0      	pop	{r4, r5, r7, pc}

0800c490 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 800c490:	b580      	push	{r7, lr}
 800c492:	b082      	sub	sp, #8
 800c494:	af00      	add	r7, sp, #0
 800c496:	6078      	str	r0, [r7, #4]
 800c498:	6878      	ldr	r0, [r7, #4]
 800c49a:	f000 fe2f 	bl	800d0fc <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE7derivedEv>
 800c49e:	4603      	mov	r3, r0
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	f000 fe36 	bl	800d112 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE4rowsEv>
 800c4a6:	4603      	mov	r3, r0
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	3708      	adds	r7, #8
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	bd80      	pop	{r7, pc}

0800c4b0 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 800c4b0:	b590      	push	{r4, r7, lr}
 800c4b2:	b085      	sub	sp, #20
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 800c4b8:	6878      	ldr	r0, [r7, #4]
 800c4ba:	f000 fe1f 	bl	800d0fc <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE7derivedEv>
 800c4be:	4604      	mov	r4, r0
 800c4c0:	f107 030c 	add.w	r3, r7, #12
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	f7f9 fb64 	bl	8005b92 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 800c4ca:	f107 030c 	add.w	r3, r7, #12
 800c4ce:	4619      	mov	r1, r3
 800c4d0:	4620      	mov	r0, r4
 800c4d2:	f000 fe9b 	bl	800d20c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 800c4d6:	eef0 7a40 	vmov.f32	s15, s0
 800c4da:	bf00      	nop
}
 800c4dc:	eeb0 0a67 	vmov.f32	s0, s15
 800c4e0:	3714      	adds	r7, #20
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	bd90      	pop	{r4, r7, pc}

0800c4e6 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800c4e6:	b580      	push	{r7, lr}
 800c4e8:	b082      	sub	sp, #8
 800c4ea:	af00      	add	r7, sp, #0
 800c4ec:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800c4ee:	2201      	movs	r2, #1
 800c4f0:	2101      	movs	r1, #1
 800c4f2:	6878      	ldr	r0, [r7, #4]
 800c4f4:	f7fe f9a8 	bl	800a848 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800c4f8:	6878      	ldr	r0, [r7, #4]
 800c4fa:	f000 fecd 	bl	800d298 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSL_>
  }
 800c4fe:	bf00      	nop
 800c500:	3708      	adds	r7, #8
 800c502:	46bd      	mov	sp, r7
 800c504:	bd80      	pop	{r7, pc}

0800c506 <_ZN5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKS8_>:
  EIGEN_DEVICE_FUNC explicit evaluator(const XprType& n)
 800c506:	b590      	push	{r4, r7, lr}
 800c508:	b083      	sub	sp, #12
 800c50a:	af00      	add	r7, sp, #0
 800c50c:	6078      	str	r0, [r7, #4]
 800c50e:	6039      	str	r1, [r7, #0]
    : m_functor(n.functor()), m_wrapper()
 800c510:	6878      	ldr	r0, [r7, #4]
 800c512:	f000 fedd 	bl	800d2d0 <_ZN5Eigen8internal14evaluator_baseINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 800c516:	687c      	ldr	r4, [r7, #4]
 800c518:	6838      	ldr	r0, [r7, #0]
 800c51a:	f000 fecd 	bl	800d2b8 <_ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7functorEv>
 800c51e:	4603      	mov	r3, r0
 800c520:	4619      	mov	r1, r3
 800c522:	4620      	mov	r0, r4
 800c524:	f7f9 f8b8 	bl	8005698 <_ZN5Eigen8internal18scalar_constant_opIfEC1ERKS2_>
  }
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	4618      	mov	r0, r3
 800c52c:	370c      	adds	r7, #12
 800c52e:	46bd      	mov	sp, r7
 800c530:	bd90      	pop	{r4, r7, pc}
	...

0800c534 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERSE_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800c534:	b580      	push	{r7, lr}
 800c536:	b084      	sub	sp, #16
 800c538:	af00      	add	r7, sp, #0
 800c53a:	60f8      	str	r0, [r7, #12]
 800c53c:	60b9      	str	r1, [r7, #8]
 800c53e:	607a      	str	r2, [r7, #4]
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	687a      	ldr	r2, [r7, #4]
 800c544:	68b9      	ldr	r1, [r7, #8]
 800c546:	4618      	mov	r0, r3
 800c548:	f000 fecd 	bl	800d2e6 <_ZN5Eigen9BlockImplIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ENS_5DenseEEC1ERSE_i>
      eigen_assert( (i>=0) && (
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	db06      	blt.n	800c560 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERSE_i+0x2c>
 800c552:	68b8      	ldr	r0, [r7, #8]
 800c554:	f7fb fe6d 	bl	8008232 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4rowsEv>
 800c558:	4602      	mov	r2, r0
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	4293      	cmp	r3, r2
 800c55e:	db05      	blt.n	800c56c <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERSE_i+0x38>
 800c560:	4b05      	ldr	r3, [pc, #20]	; (800c578 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERSE_i+0x44>)
 800c562:	4a06      	ldr	r2, [pc, #24]	; (800c57c <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERSE_i+0x48>)
 800c564:	2178      	movs	r1, #120	; 0x78
 800c566:	4806      	ldr	r0, [pc, #24]	; (800c580 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERSE_i+0x4c>)
 800c568:	f011 fc94 	bl	801de94 <__assert_func>
 800c56c:	bf00      	nop
    }
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	4618      	mov	r0, r3
 800c572:	3710      	adds	r7, #16
 800c574:	46bd      	mov	sp, r7
 800c576:	bd80      	pop	{r7, pc}
 800c578:	08024880 	.word	0x08024880
 800c57c:	080255a4 	.word	0x080255a4
 800c580:	08024a04 	.word	0x08024a04

0800c584 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800c584:	b480      	push	{r7}
 800c586:	b083      	sub	sp, #12
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	4618      	mov	r0, r3
 800c590:	370c      	adds	r7, #12
 800c592:	46bd      	mov	sp, r7
 800c594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c598:	4770      	bx	lr

0800c59a <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1Ev>:
 800c59a:	b580      	push	{r7, lr}
 800c59c:	b082      	sub	sp, #8
 800c59e:	af00      	add	r7, sp, #0
 800c5a0:	6078      	str	r0, [r7, #4]
 800c5a2:	6878      	ldr	r0, [r7, #4]
 800c5a4:	f000 feb0 	bl	800d308 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1Ev>
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	3708      	adds	r7, #8
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	bd80      	pop	{r7, pc}

0800c5b2 <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 800c5b2:	b580      	push	{r7, lr}
 800c5b4:	b082      	sub	sp, #8
 800c5b6:	af00      	add	r7, sp, #0
 800c5b8:	6078      	str	r0, [r7, #4]
 800c5ba:	6878      	ldr	r0, [r7, #4]
 800c5bc:	f7ff ffed 	bl	800c59a <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1Ev>
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	3708      	adds	r7, #8
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	bd80      	pop	{r7, pc}

0800c5ca <_ZN5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERSH_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 800c5ca:	b580      	push	{r7, lr}
 800c5cc:	b082      	sub	sp, #8
 800c5ce:	af00      	add	r7, sp, #0
 800c5d0:	6078      	str	r0, [r7, #4]
 800c5d2:	6039      	str	r1, [r7, #0]
 800c5d4:	6878      	ldr	r0, [r7, #4]
 800c5d6:	f7ff ffec 	bl	800c5b2 <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS_5DenseEEC1Ev>
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	6839      	ldr	r1, [r7, #0]
 800c5de:	4618      	mov	r0, r3
 800c5e0:	f7ff f86c 	bl	800b6bc <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERKSF_>
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	3708      	adds	r7, #8
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	bd80      	pop	{r7, pc}
	...

0800c5f0 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEC1ERS5_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	b084      	sub	sp, #16
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	60f8      	str	r0, [r7, #12]
 800c5f8:	60b9      	str	r1, [r7, #8]
 800c5fa:	607a      	str	r2, [r7, #4]
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	687a      	ldr	r2, [r7, #4]
 800c600:	68b9      	ldr	r1, [r7, #8]
 800c602:	4618      	mov	r0, r3
 800c604:	f000 fe8b 	bl	800d31e <_ZN5Eigen9BlockImplIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ENS_5DenseEEC1ERS5_i>
      eigen_assert( (i>=0) && (
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	db06      	blt.n	800c61c <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEC1ERS5_i+0x2c>
 800c60e:	68b8      	ldr	r0, [r7, #8]
 800c610:	f7fb fe1d 	bl	800824e <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800c614:	4602      	mov	r2, r0
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	4293      	cmp	r3, r2
 800c61a:	db05      	blt.n	800c628 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEC1ERS5_i+0x38>
 800c61c:	4b05      	ldr	r3, [pc, #20]	; (800c634 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEC1ERS5_i+0x44>)
 800c61e:	4a06      	ldr	r2, [pc, #24]	; (800c638 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEC1ERS5_i+0x48>)
 800c620:	2178      	movs	r1, #120	; 0x78
 800c622:	4806      	ldr	r0, [pc, #24]	; (800c63c <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEC1ERS5_i+0x4c>)
 800c624:	f011 fc36 	bl	801de94 <__assert_func>
    }
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	4618      	mov	r0, r3
 800c62c:	3710      	adds	r7, #16
 800c62e:	46bd      	mov	sp, r7
 800c630:	bd80      	pop	{r7, pc}
 800c632:	bf00      	nop
 800c634:	08024880 	.word	0x08024880
 800c638:	0802573c 	.word	0x0802573c
 800c63c:	08024a04 	.word	0x08024a04

0800c640 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEE7derivedEv>:
 800c640:	b480      	push	{r7}
 800c642:	b083      	sub	sp, #12
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	4618      	mov	r0, r3
 800c64c:	370c      	adds	r7, #12
 800c64e:	46bd      	mov	sp, r7
 800c650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c654:	4770      	bx	lr

0800c656 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEE7derivedEv>:
 800c656:	b480      	push	{r7}
 800c658:	b083      	sub	sp, #12
 800c65a:	af00      	add	r7, sp, #0
 800c65c:	6078      	str	r0, [r7, #4]
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	4618      	mov	r0, r3
 800c662:	370c      	adds	r7, #12
 800c664:	46bd      	mov	sp, r7
 800c666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66a:	4770      	bx	lr

0800c66c <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1Ev>:
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b082      	sub	sp, #8
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
 800c674:	6878      	ldr	r0, [r7, #4]
 800c676:	f000 fe63 	bl	800d340 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1Ev>
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	4618      	mov	r0, r3
 800c67e:	3708      	adds	r7, #8
 800c680:	46bd      	mov	sp, r7
 800c682:	bd80      	pop	{r7, pc}

0800c684 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpIS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS8_EELi1ELi1ELb0EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 800c684:	b580      	push	{r7, lr}
 800c686:	b082      	sub	sp, #8
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
 800c68c:	6878      	ldr	r0, [r7, #4]
 800c68e:	f7ff ffed 	bl	800c66c <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1Ev>
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	4618      	mov	r0, r3
 800c696:	3708      	adds	r7, #8
 800c698:	46bd      	mov	sp, r7
 800c69a:	bd80      	pop	{r7, pc}

0800c69c <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b082      	sub	sp, #8
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	f000 fe55 	bl	800d356 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE4colsEv>
 800c6ac:	4603      	mov	r3, r0
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	3708      	adds	r7, #8
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	bd80      	pop	{r7, pc}

0800c6b6 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 800c6b6:	b580      	push	{r7, lr}
 800c6b8:	b082      	sub	sp, #8
 800c6ba:	af00      	add	r7, sp, #0
 800c6bc:	6078      	str	r0, [r7, #4]
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	f000 fe53 	bl	800d36c <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE4rowsEv>
 800c6c6:	4603      	mov	r3, r0
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	3708      	adds	r7, #8
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	bd80      	pop	{r7, pc}

0800c6d0 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b082      	sub	sp, #8
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	6078      	str	r0, [r7, #4]
 800c6d8:	f7fa fa95 	bl	8006c06 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800c6dc:	4603      	mov	r3, r0
 800c6de:	4618      	mov	r0, r3
 800c6e0:	3708      	adds	r7, #8
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	bd80      	pop	{r7, pc}

0800c6e6 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 800c6e6:	b580      	push	{r7, lr}
 800c6e8:	b082      	sub	sp, #8
 800c6ea:	af00      	add	r7, sp, #0
 800c6ec:	6078      	str	r0, [r7, #4]
 800c6ee:	f7fa fa8a 	bl	8006c06 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800c6f2:	4603      	mov	r3, r0
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	3708      	adds	r7, #8
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	bd80      	pop	{r7, pc}

0800c6fc <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEEC1ERSJ_RSN_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 800c6fc:	b5b0      	push	{r4, r5, r7, lr}
 800c6fe:	b084      	sub	sp, #16
 800c700:	af00      	add	r7, sp, #0
 800c702:	60f8      	str	r0, [r7, #12]
 800c704:	60b9      	str	r1, [r7, #8]
 800c706:	607a      	str	r2, [r7, #4]
 800c708:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 800c70a:	68f8      	ldr	r0, [r7, #12]
 800c70c:	f7ff ffba 	bl	800c684 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpIS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS8_EELi1ELi1ELb0EEENS_5DenseEEC1Ev>
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	3304      	adds	r3, #4
 800c714:	68b9      	ldr	r1, [r7, #8]
 800c716:	4618      	mov	r0, r3
 800c718:	f7fe fff3 	bl	800b702 <_ZN5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERKSI_>
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	f103 021c 	add.w	r2, r3, #28
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	4614      	mov	r4, r2
 800c726:	461d      	mov	r5, r3
 800c728:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c72a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c72c:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c730:	e884 0003 	stmia.w	r4, {r0, r1}
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	3334      	adds	r3, #52	; 0x34
 800c738:	6839      	ldr	r1, [r7, #0]
 800c73a:	4618      	mov	r0, r3
 800c73c:	f7f8 ffbc 	bl	80056b8 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 800c740:	68b8      	ldr	r0, [r7, #8]
 800c742:	f7ff ffab 	bl	800c69c <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE4rowsEv>
 800c746:	4604      	mov	r4, r0
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	4618      	mov	r0, r3
 800c74c:	f7ff ffc0 	bl	800c6d0 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE4rowsEv>
 800c750:	4603      	mov	r3, r0
 800c752:	429c      	cmp	r4, r3
 800c754:	d10a      	bne.n	800c76c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEEC1ERSJ_RSN_RKS3_+0x70>
 800c756:	68b8      	ldr	r0, [r7, #8]
 800c758:	f7ff ffad 	bl	800c6b6 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE4colsEv>
 800c75c:	4604      	mov	r4, r0
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	4618      	mov	r0, r3
 800c762:	f7ff ffc0 	bl	800c6e6 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE4colsEv>
 800c766:	4603      	mov	r3, r0
 800c768:	429c      	cmp	r4, r3
 800c76a:	d005      	beq.n	800c778 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEEC1ERSJ_RSN_RKS3_+0x7c>
 800c76c:	4b05      	ldr	r3, [pc, #20]	; (800c784 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEEC1ERSJ_RSN_RKS3_+0x88>)
 800c76e:	4a06      	ldr	r2, [pc, #24]	; (800c788 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEEC1ERSJ_RSN_RKS3_+0x8c>)
 800c770:	2174      	movs	r1, #116	; 0x74
 800c772:	4806      	ldr	r0, [pc, #24]	; (800c78c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEEC1ERSJ_RSN_RKS3_+0x90>)
 800c774:	f011 fb8e 	bl	801de94 <__assert_func>
    }
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	4618      	mov	r0, r3
 800c77c:	3710      	adds	r7, #16
 800c77e:	46bd      	mov	sp, r7
 800c780:	bdb0      	pop	{r4, r5, r7, pc}
 800c782:	bf00      	nop
 800c784:	0801fcfc 	.word	0x0801fcfc
 800c788:	0802582c 	.word	0x0802582c
 800c78c:	0801ff60 	.word	0x0801ff60

0800c790 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800c790:	b580      	push	{r7, lr}
 800c792:	b082      	sub	sp, #8
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
 800c798:	6878      	ldr	r0, [r7, #4]
 800c79a:	f000 f809 	bl	800c7b0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE7derivedEv>
 800c79e:	4603      	mov	r3, r0
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	f000 fdee 	bl	800d382 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE4colsEv>
 800c7a6:	4603      	mov	r3, r0
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	3708      	adds	r7, #8
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bd80      	pop	{r7, pc}

0800c7b0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800c7b0:	b480      	push	{r7}
 800c7b2:	b083      	sub	sp, #12
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	370c      	adds	r7, #12
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c4:	4770      	bx	lr

0800c7c6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 800c7c6:	b580      	push	{r7, lr}
 800c7c8:	b082      	sub	sp, #8
 800c7ca:	af00      	add	r7, sp, #0
 800c7cc:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	3304      	adds	r3, #4
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	f7ff ff62 	bl	800c69c <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE4rowsEv>
 800c7d8:	4603      	mov	r3, r0
    }
 800c7da:	4618      	mov	r0, r3
 800c7dc:	3708      	adds	r7, #8
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	bd80      	pop	{r7, pc}

0800c7e2 <_ZN5Eigen8internal9evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED1Ev>:
struct evaluator<const T>
 800c7e2:	b580      	push	{r7, lr}
 800c7e4:	b082      	sub	sp, #8
 800c7e6:	af00      	add	r7, sp, #0
 800c7e8:	6078      	str	r0, [r7, #4]
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	f7fc fc30 	bl	8009052 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED1Ev>
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	3708      	adds	r7, #8
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	bd80      	pop	{r7, pc}

0800c7fc <_ZN5Eigen8internal15unary_evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel>, IndexBased>
 800c7fc:	b580      	push	{r7, lr}
 800c7fe:	b082      	sub	sp, #8
 800c800:	af00      	add	r7, sp, #0
 800c802:	6078      	str	r0, [r7, #4]
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	4618      	mov	r0, r3
 800c808:	f7ff ffeb 	bl	800c7e2 <_ZN5Eigen8internal9evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED1Ev>
 800c80c:	6878      	ldr	r0, [r7, #4]
 800c80e:	f000 fdeb 	bl	800d3e8 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEED1Ev>
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	4618      	mov	r0, r3
 800c816:	3708      	adds	r7, #8
 800c818:	46bd      	mov	sp, r7
 800c81a:	bd80      	pop	{r7, pc}

0800c81c <_ZN5Eigen8internal15block_evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /*HasDirectAccess*/ false>
 800c81c:	b580      	push	{r7, lr}
 800c81e:	b082      	sub	sp, #8
 800c820:	af00      	add	r7, sp, #0
 800c822:	6078      	str	r0, [r7, #4]
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	4618      	mov	r0, r3
 800c828:	f7ff ffe8 	bl	800c7fc <_ZN5Eigen8internal15unary_evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS0_10IndexBasedEfED1Ev>
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	4618      	mov	r0, r3
 800c830:	3708      	adds	r7, #8
 800c832:	46bd      	mov	sp, r7
 800c834:	bd80      	pop	{r7, pc}

0800c836 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800c836:	b580      	push	{r7, lr}
 800c838:	b082      	sub	sp, #8
 800c83a:	af00      	add	r7, sp, #0
 800c83c:	6078      	str	r0, [r7, #4]
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	4618      	mov	r0, r3
 800c842:	f7ff ffeb 	bl	800c81c <_ZN5Eigen8internal15block_evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EED1Ev>
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	4618      	mov	r0, r3
 800c84a:	3708      	adds	r7, #8
 800c84c:	46bd      	mov	sp, r7
 800c84e:	bd80      	pop	{r7, pc}

0800c850 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<const T>
 800c850:	b580      	push	{r7, lr}
 800c852:	b082      	sub	sp, #8
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	4618      	mov	r0, r3
 800c85c:	f7ff ffeb 	bl	800c836 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEED1Ev>
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	4618      	mov	r0, r3
 800c864:	3708      	adds	r7, #8
 800c866:	46bd      	mov	sp, r7
 800c868:	bd80      	pop	{r7, pc}

0800c86a <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 800c86a:	b580      	push	{r7, lr}
 800c86c:	b082      	sub	sp, #8
 800c86e:	af00      	add	r7, sp, #0
 800c870:	6078      	str	r0, [r7, #4]
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	4618      	mov	r0, r3
 800c876:	f7ff ffeb 	bl	800c850 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEED1Ev>
 800c87a:	6878      	ldr	r0, [r7, #4]
 800c87c:	f000 fda9 	bl	800d3d2 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEED1Ev>
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	4618      	mov	r0, r3
 800c884:	3708      	adds	r7, #8
 800c886:	46bd      	mov	sp, r7
 800c888:	bd80      	pop	{r7, pc}

0800c88a <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 800c88a:	b580      	push	{r7, lr}
 800c88c:	b082      	sub	sp, #8
 800c88e:	af00      	add	r7, sp, #0
 800c890:	6078      	str	r0, [r7, #4]
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	4618      	mov	r0, r3
 800c896:	f7ff ffe8 	bl	800c86a <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEENS0_10IndexBasedEfED1Ev>
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	4618      	mov	r0, r3
 800c89e:	3708      	adds	r7, #8
 800c8a0:	46bd      	mov	sp, r7
 800c8a2:	bd80      	pop	{r7, pc}

0800c8a4 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEED1Ev>:
struct evaluator<const T>
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b082      	sub	sp, #8
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	6078      	str	r0, [r7, #4]
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	f7ff ffeb 	bl	800c88a <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEED1Ev>
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	3708      	adds	r7, #8
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	bd80      	pop	{r7, pc}

0800c8be <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 800c8be:	b580      	push	{r7, lr}
 800c8c0:	b082      	sub	sp, #8
 800c8c2:	af00      	add	r7, sp, #0
 800c8c4:	6078      	str	r0, [r7, #4]
 800c8c6:	6878      	ldr	r0, [r7, #4]
 800c8c8:	f000 fd99 	bl	800d3fe <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEED1Ev>
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	3708      	adds	r7, #8
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	bd80      	pop	{r7, pc}

0800c8d6 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800c8d6:	b580      	push	{r7, lr}
 800c8d8:	b082      	sub	sp, #8
 800c8da:	af00      	add	r7, sp, #0
 800c8dc:	6078      	str	r0, [r7, #4]
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	f7ff ffec 	bl	800c8be <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEED1Ev>
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	3708      	adds	r7, #8
 800c8ec:	46bd      	mov	sp, r7
 800c8ee:	bd80      	pop	{r7, pc}

0800c8f0 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	b082      	sub	sp, #8
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	f7ff ffeb 	bl	800c8d6 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EED1Ev>
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	4618      	mov	r0, r3
 800c904:	3708      	adds	r7, #8
 800c906:	46bd      	mov	sp, r7
 800c908:	bd80      	pop	{r7, pc}

0800c90a <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<const T>
 800c90a:	b580      	push	{r7, lr}
 800c90c:	b082      	sub	sp, #8
 800c90e:	af00      	add	r7, sp, #0
 800c910:	6078      	str	r0, [r7, #4]
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	4618      	mov	r0, r3
 800c916:	f7ff ffeb 	bl	800c8f0 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEED1Ev>
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	4618      	mov	r0, r3
 800c91e:	3708      	adds	r7, #8
 800c920:	46bd      	mov	sp, r7
 800c922:	bd80      	pop	{r7, pc}

0800c924 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE4DataD1Ev>:
  struct Data
 800c924:	b580      	push	{r7, lr}
 800c926:	b082      	sub	sp, #8
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	3320      	adds	r3, #32
 800c930:	4618      	mov	r0, r3
 800c932:	f7ff ffea 	bl	800c90a <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEED1Ev>
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	3304      	adds	r3, #4
 800c93a:	4618      	mov	r0, r3
 800c93c:	f7ff ffb2 	bl	800c8a4 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEED1Ev>
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	4618      	mov	r0, r3
 800c944:	3708      	adds	r7, #8
 800c946:	46bd      	mov	sp, r7
 800c948:	bd80      	pop	{r7, pc}

0800c94a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 800c94a:	b580      	push	{r7, lr}
 800c94c:	b082      	sub	sp, #8
 800c94e:	af00      	add	r7, sp, #0
 800c950:	6078      	str	r0, [r7, #4]
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	4618      	mov	r0, r3
 800c956:	f7ff ffe5 	bl	800c924 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE4DataD1Ev>
 800c95a:	6878      	ldr	r0, [r7, #4]
 800c95c:	f000 fd2e 	bl	800d3bc <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEED1Ev>
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	4618      	mov	r0, r3
 800c964:	3708      	adds	r7, #8
 800c966:	46bd      	mov	sp, r7
 800c968:	bd80      	pop	{r7, pc}

0800c96a <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 800c96a:	b580      	push	{r7, lr}
 800c96c:	b082      	sub	sp, #8
 800c96e:	af00      	add	r7, sp, #0
 800c970:	6078      	str	r0, [r7, #4]
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	4618      	mov	r0, r3
 800c976:	f7ff ffe8 	bl	800c94a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffED1Ev>
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	4618      	mov	r0, r3
 800c97e:	3708      	adds	r7, #8
 800c980:	46bd      	mov	sp, r7
 800c982:	bd80      	pop	{r7, pc}

0800c984 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 800c984:	b580      	push	{r7, lr}
 800c986:	b082      	sub	sp, #8
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	4618      	mov	r0, r3
 800c990:	f7ff ffeb 	bl	800c96a <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEED1Ev>
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	4618      	mov	r0, r3
 800c998:	3708      	adds	r7, #8
 800c99a:	46bd      	mov	sp, r7
 800c99c:	bd80      	pop	{r7, pc}
	...

0800c9a0 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	ed2d 8b02 	vpush	{d8}
 800c9a6:	b08c      	sub	sp, #48	; 0x30
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
 800c9ac:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 800c9ae:	6878      	ldr	r0, [r7, #4]
 800c9b0:	f7fe fef9 	bl	800b7a6 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE4rowsEv>
 800c9b4:	4603      	mov	r3, r0
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	dd05      	ble.n	800c9c6 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 800c9ba:	6878      	ldr	r0, [r7, #4]
 800c9bc:	f7ff fee8 	bl	800c790 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE4colsEv>
 800c9c0:	4603      	mov	r3, r0
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	dc06      	bgt.n	800c9d4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 800c9c6:	4b16      	ldr	r3, [pc, #88]	; (800ca20 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 800c9c8:	4a16      	ldr	r2, [pc, #88]	; (800ca24 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 800c9ca:	f240 119b 	movw	r1, #411	; 0x19b
 800c9ce:	4816      	ldr	r0, [pc, #88]	; (800ca28 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 800c9d0:	f011 fa60 	bl	801de94 <__assert_func>
 800c9d4:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800c9d6:	6878      	ldr	r0, [r7, #4]
 800c9d8:	f7ff feea 	bl	800c7b0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE7derivedEv>
 800c9dc:	4602      	mov	r2, r0
 800c9de:	f107 0308 	add.w	r3, r7, #8
 800c9e2:	4611      	mov	r1, r2
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	f000 fcda 	bl	800d39e <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1ERKSP_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800c9ea:	6878      	ldr	r0, [r7, #4]
 800c9ec:	f7ff fee0 	bl	800c7b0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE7derivedEv>
 800c9f0:	4602      	mov	r2, r0
 800c9f2:	f107 0308 	add.w	r3, r7, #8
 800c9f6:	6839      	ldr	r1, [r7, #0]
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	f000 fd0b 	bl	800d414 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS5_IS7_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEELi1ELi1ELb0EEEEEKNS9_IKNS8_ISB_EELi1ELi1ELb0EEEEEEELi0ELi2EE3runISS_EEfRKST_RKS3_RKT_>
 800c9fe:	eeb0 8a40 	vmov.f32	s16, s0
 800ca02:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800ca04:	f107 0308 	add.w	r3, r7, #8
 800ca08:	4618      	mov	r0, r3
 800ca0a:	f7ff ffbb 	bl	800c984 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800ca0e:	eef0 7a48 	vmov.f32	s15, s16
}
 800ca12:	eeb0 0a67 	vmov.f32	s0, s15
 800ca16:	3730      	adds	r7, #48	; 0x30
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	ecbd 8b02 	vpop	{d8}
 800ca1e:	bd80      	pop	{r7, pc}
 800ca20:	08024d7c 	.word	0x08024d7c
 800ca24:	08025c14 	.word	0x08025c14
 800ca28:	08024f88 	.word	0x08024f88

0800ca2c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	b082      	sub	sp, #8
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800ca34:	2202      	movs	r2, #2
 800ca36:	2101      	movs	r1, #1
 800ca38:	6878      	ldr	r0, [r7, #4]
 800ca3a:	f7fd fc3e 	bl	800a2ba <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800ca3e:	6878      	ldr	r0, [r7, #4]
 800ca40:	f000 fcf9 	bl	800d436 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSP_>
  }
 800ca44:	bf00      	nop
 800ca46:	3708      	adds	r7, #8
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	bd80      	pop	{r7, pc}

0800ca4c <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ENS_5DenseEEC1ERS3_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b084      	sub	sp, #16
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	60f8      	str	r0, [r7, #12]
 800ca54:	60b9      	str	r1, [r7, #8]
 800ca56:	607a      	str	r2, [r7, #4]
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	687a      	ldr	r2, [r7, #4]
 800ca5c:	68b9      	ldr	r1, [r7, #8]
 800ca5e:	4618      	mov	r0, r3
 800ca60:	f000 fcf9 	bl	800d456 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EEC1ERS4_i>
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	4618      	mov	r0, r3
 800ca68:	3710      	adds	r7, #16
 800ca6a:	46bd      	mov	sp, r7
 800ca6c:	bd80      	pop	{r7, pc}

0800ca6e <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800ca6e:	b480      	push	{r7}
 800ca70:	b083      	sub	sp, #12
 800ca72:	af00      	add	r7, sp, #0
 800ca74:	6078      	str	r0, [r7, #4]
    }
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	4618      	mov	r0, r3
 800ca7a:	370c      	adds	r7, #12
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca82:	4770      	bx	lr

0800ca84 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ENS_5DenseEEC1ERS3_i>:
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b084      	sub	sp, #16
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	60f8      	str	r0, [r7, #12]
 800ca8c:	60b9      	str	r1, [r7, #8]
 800ca8e:	607a      	str	r2, [r7, #4]
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	687a      	ldr	r2, [r7, #4]
 800ca94:	68b9      	ldr	r1, [r7, #8]
 800ca96:	4618      	mov	r0, r3
 800ca98:	f000 fd13 	bl	800d4c2 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EEC1ERS4_i>
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	4618      	mov	r0, r3
 800caa0:	3710      	adds	r7, #16
 800caa2:	46bd      	mov	sp, r7
 800caa4:	bd80      	pop	{r7, pc}

0800caa6 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800caa6:	b480      	push	{r7}
 800caa8:	b083      	sub	sp, #12
 800caaa:	af00      	add	r7, sp, #0
 800caac:	6078      	str	r0, [r7, #4]
    }
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	4618      	mov	r0, r3
 800cab2:	370c      	adds	r7, #12
 800cab4:	46bd      	mov	sp, r7
 800cab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caba:	4770      	bx	lr

0800cabc <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4colsEv>:
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b082      	sub	sp, #8
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	6078      	str	r0, [r7, #4]
 800cac4:	f7fa f897 	bl	8006bf6 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 800cac8:	4603      	mov	r3, r0
 800caca:	4618      	mov	r0, r3
 800cacc:	3708      	adds	r7, #8
 800cace:	46bd      	mov	sp, r7
 800cad0:	bd80      	pop	{r7, pc}

0800cad2 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 800cad2:	b580      	push	{r7, lr}
 800cad4:	b082      	sub	sp, #8
 800cad6:	af00      	add	r7, sp, #0
 800cad8:	6078      	str	r0, [r7, #4]
 800cada:	f7fa f894 	bl	8006c06 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800cade:	4603      	mov	r3, r0
 800cae0:	4618      	mov	r0, r3
 800cae2:	3708      	adds	r7, #8
 800cae4:	46bd      	mov	sp, r7
 800cae6:	bd80      	pop	{r7, pc}

0800cae8 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 800cae8:	b580      	push	{r7, lr}
 800caea:	b082      	sub	sp, #8
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	4618      	mov	r0, r3
 800caf4:	f7fe ff59 	bl	800b9aa <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 800caf8:	4603      	mov	r3, r0
    }
 800cafa:	4618      	mov	r0, r3
 800cafc:	3708      	adds	r7, #8
 800cafe:	46bd      	mov	sp, r7
 800cb00:	bd80      	pop	{r7, pc}

0800cb02 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1ERKSI_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 800cb02:	b580      	push	{r7, lr}
 800cb04:	b082      	sub	sp, #8
 800cb06:	af00      	add	r7, sp, #0
 800cb08:	6078      	str	r0, [r7, #4]
 800cb0a:	6039      	str	r1, [r7, #0]
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	6839      	ldr	r1, [r7, #0]
 800cb10:	4618      	mov	r0, r3
 800cb12:	f000 fd0c 	bl	800d52e <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1ERKSI_>
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	4618      	mov	r0, r3
 800cb1a:	3708      	adds	r7, #8
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	bd80      	pop	{r7, pc}

0800cb20 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800cb20:	b480      	push	{r7}
 800cb22:	b083      	sub	sp, #12
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	6078      	str	r0, [r7, #4]
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	370c      	adds	r7, #12
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb34:	4770      	bx	lr

0800cb36 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>:
 800cb36:	b480      	push	{r7}
 800cb38:	b083      	sub	sp, #12
 800cb3a:	af00      	add	r7, sp, #0
 800cb3c:	6078      	str	r0, [r7, #4]
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	4618      	mov	r0, r3
 800cb42:	370c      	adds	r7, #12
 800cb44:	46bd      	mov	sp, r7
 800cb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4a:	4770      	bx	lr

0800cb4c <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEED1Ev>:
 800cb4c:	b480      	push	{r7}
 800cb4e:	b083      	sub	sp, #12
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	4618      	mov	r0, r3
 800cb58:	370c      	adds	r7, #12
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb60:	4770      	bx	lr

0800cb62 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEED1Ev>:
 800cb62:	b480      	push	{r7}
 800cb64:	b083      	sub	sp, #12
 800cb66:	af00      	add	r7, sp, #0
 800cb68:	6078      	str	r0, [r7, #4]
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	370c      	adds	r7, #12
 800cb70:	46bd      	mov	sp, r7
 800cb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb76:	4770      	bx	lr

0800cb78 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b084      	sub	sp, #16
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	60f8      	str	r0, [r7, #12]
 800cb80:	60b9      	str	r1, [r7, #8]
 800cb82:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 800cb84:	68b9      	ldr	r1, [r7, #8]
 800cb86:	68f8      	ldr	r0, [r7, #12]
 800cb88:	f000 fce0 	bl	800d54c <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi0ELi3EE3runERKSM_RKS3_>
 800cb8c:	eef0 7a40 	vmov.f32	s15, s0
  }
 800cb90:	eeb0 0a67 	vmov.f32	s0, s15
 800cb94:	3710      	adds	r7, #16
 800cb96:	46bd      	mov	sp, r7
 800cb98:	bd80      	pop	{r7, pc}

0800cb9a <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800cb9a:	b480      	push	{r7}
 800cb9c:	b083      	sub	sp, #12
 800cb9e:	af00      	add	r7, sp, #0
 800cba0:	6078      	str	r0, [r7, #4]
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	4618      	mov	r0, r3
 800cba6:	370c      	adds	r7, #12
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbae:	4770      	bx	lr

0800cbb0 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800cbb0:	b480      	push	{r7}
 800cbb2:	b083      	sub	sp, #12
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	3308      	adds	r3, #8
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	370c      	adds	r7, #12
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc6:	4770      	bx	lr

0800cbc8 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800cbc8:	b480      	push	{r7}
 800cbca:	b083      	sub	sp, #12
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	6078      	str	r0, [r7, #4]
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	370c      	adds	r7, #12
 800cbd6:	46bd      	mov	sp, r7
 800cbd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbdc:	4770      	bx	lr

0800cbde <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_7ProductIS1_S1_Li0EEEEERKT_>:
    explicit Matrix(const T& x)
 800cbde:	b580      	push	{r7, lr}
 800cbe0:	b082      	sub	sp, #8
 800cbe2:	af00      	add	r7, sp, #0
 800cbe4:	6078      	str	r0, [r7, #4]
 800cbe6:	6039      	str	r1, [r7, #0]
    {
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	4618      	mov	r0, r3
 800cbec:	f7f8 f937 	bl	8004e5e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
      Base::_check_template_params();
 800cbf0:	f7f8 f945 	bl	8004e7e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	6839      	ldr	r1, [r7, #0]
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	f000 fccb 	bl	800d594 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_7ProductIS2_S2_Li0EEES6_EEvRKNS_9DenseBaseIT0_EE>
    }
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	4618      	mov	r0, r3
 800cc02:	3708      	adds	r7, #8
 800cc04:	46bd      	mov	sp, r7
 800cc06:	bd80      	pop	{r7, pc}

0800cc08 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1ERKS5_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	b082      	sub	sp, #8
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	6078      	str	r0, [r7, #4]
 800cc10:	6039      	str	r1, [r7, #0]
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	6839      	ldr	r1, [r7, #0]
 800cc16:	4618      	mov	r0, r3
 800cc18:	f000 fcc9 	bl	800d5ae <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS0_10IndexBasedEfEC1ERKS5_>
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	4618      	mov	r0, r3
 800cc20:	3708      	adds	r7, #8
 800cc22:	46bd      	mov	sp, r7
 800cc24:	bd80      	pop	{r7, pc}

0800cc26 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeffByOuterInner(Index outer, Index inner)
 800cc26:	b580      	push	{r7, lr}
 800cc28:	b086      	sub	sp, #24
 800cc2a:	af00      	add	r7, sp, #0
 800cc2c:	60f8      	str	r0, [r7, #12]
 800cc2e:	60b9      	str	r1, [r7, #8]
 800cc30:	607a      	str	r2, [r7, #4]
    Index row = rowIndexByOuterInner(outer, inner);
 800cc32:	6879      	ldr	r1, [r7, #4]
 800cc34:	68b8      	ldr	r0, [r7, #8]
 800cc36:	f000 fcd0 	bl	800d5da <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>
 800cc3a:	6178      	str	r0, [r7, #20]
    Index col = colIndexByOuterInner(outer, inner);
 800cc3c:	6879      	ldr	r1, [r7, #4]
 800cc3e:	68b8      	ldr	r0, [r7, #8]
 800cc40:	f000 fcd7 	bl	800d5f2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>
 800cc44:	6138      	str	r0, [r7, #16]
    assignCoeff(row, col);
 800cc46:	693a      	ldr	r2, [r7, #16]
 800cc48:	6979      	ldr	r1, [r7, #20]
 800cc4a:	68f8      	ldr	r0, [r7, #12]
 800cc4c:	f000 fcdd 	bl	800d60a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>
  }
 800cc50:	bf00      	nop
 800cc52:	3718      	adds	r7, #24
 800cc54:	46bd      	mov	sp, r7
 800cc56:	bd80      	pop	{r7, pc}

0800cc58 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b082      	sub	sp, #8
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800cc60:	2201      	movs	r2, #1
 800cc62:	2100      	movs	r1, #0
 800cc64:	6878      	ldr	r0, [r7, #4]
 800cc66:	f7ff ffde 	bl	800cc26 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800cc6a:	6878      	ldr	r0, [r7, #4]
 800cc6c:	f000 fcf3 	bl	800d656 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSG_>
  }
 800cc70:	bf00      	nop
 800cc72:	3708      	adds	r7, #8
 800cc74:	46bd      	mov	sp, r7
 800cc76:	bd80      	pop	{r7, pc}

0800cc78 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<Scalar,Scalar> &)
 800cc78:	b590      	push	{r4, r7, lr}
 800cc7a:	b087      	sub	sp, #28
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	60f8      	str	r0, [r7, #12]
 800cc80:	60b9      	str	r1, [r7, #8]
 800cc82:	607a      	str	r2, [r7, #4]
    Index dstRows = src.rows();
 800cc84:	68b8      	ldr	r0, [r7, #8]
 800cc86:	f7fb fc65 	bl	8008554 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4rowsEv>
 800cc8a:	6178      	str	r0, [r7, #20]
    Index dstCols = src.cols();
 800cc8c:	68b8      	ldr	r0, [r7, #8]
 800cc8e:	f7f9 fab8 	bl	8006202 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4colsEv>
 800cc92:	6138      	str	r0, [r7, #16]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	4618      	mov	r0, r3
 800cc98:	f7f8 fa89 	bl	80051ae <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800cc9c:	4602      	mov	r2, r0
 800cc9e:	697b      	ldr	r3, [r7, #20]
 800cca0:	4293      	cmp	r3, r2
 800cca2:	d107      	bne.n	800ccb4 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_+0x3c>
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	4618      	mov	r0, r3
 800cca8:	f7f8 fa76 	bl	8005198 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800ccac:	4602      	mov	r2, r0
 800ccae:	693b      	ldr	r3, [r7, #16]
 800ccb0:	4293      	cmp	r3, r2
 800ccb2:	d001      	beq.n	800ccb8 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_+0x40>
 800ccb4:	2301      	movs	r3, #1
 800ccb6:	e000      	b.n	800ccba <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_+0x42>
 800ccb8:	2300      	movs	r3, #0
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d005      	beq.n	800ccca <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_+0x52>
      dst.resize(dstRows, dstCols);
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	693a      	ldr	r2, [r7, #16]
 800ccc2:	6979      	ldr	r1, [r7, #20]
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	f7fb f97d 	bl	8007fc4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
    generic_product_impl<Lhs, Rhs>::evalTo(dst, src.lhs(), src.rhs());
 800ccca:	68b8      	ldr	r0, [r7, #8]
 800cccc:	f000 fcd3 	bl	800d676 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE3lhsEv>
 800ccd0:	4604      	mov	r4, r0
 800ccd2:	68b8      	ldr	r0, [r7, #8]
 800ccd4:	f000 fcdb 	bl	800d68e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE3rhsEv>
 800ccd8:	4603      	mov	r3, r0
 800ccda:	461a      	mov	r2, r3
 800ccdc:	4621      	mov	r1, r4
 800ccde:	68f8      	ldr	r0, [r7, #12]
 800cce0:	f000 fce1 	bl	800d6a6 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEENS_10DenseShapeES7_Li3EE6evalToINS2_IfLi3ELi1ELi0ELi3ELi1EEEEEvRT_RKS3_RKS6_>
  }
 800cce4:	bf00      	nop
 800cce6:	371c      	adds	r7, #28
 800cce8:	46bd      	mov	sp, r7
 800ccea:	bd90      	pop	{r4, r7, pc}

0800ccec <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_>:
  static void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<typename DstXprType::Scalar,typename XprType::Scalar> &)
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b088      	sub	sp, #32
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	60f8      	str	r0, [r7, #12]
 800ccf4:	60b9      	str	r1, [r7, #8]
 800ccf6:	607a      	str	r2, [r7, #4]
    Index dstRows = src.rows();
 800ccf8:	68b8      	ldr	r0, [r7, #8]
 800ccfa:	f7f9 fa90 	bl	800621e <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4rowsEv>
 800ccfe:	61f8      	str	r0, [r7, #28]
    Index dstCols = src.cols();
 800cd00:	68b8      	ldr	r0, [r7, #8]
 800cd02:	f7fb fc35 	bl	8008570 <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4colsEv>
 800cd06:	61b8      	str	r0, [r7, #24]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	f7f9 f999 	bl	8006042 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800cd10:	4602      	mov	r2, r0
 800cd12:	69fb      	ldr	r3, [r7, #28]
 800cd14:	4293      	cmp	r3, r2
 800cd16:	d107      	bne.n	800cd28 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x3c>
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	f7f9 f99c 	bl	8006058 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800cd20:	4602      	mov	r2, r0
 800cd22:	69bb      	ldr	r3, [r7, #24]
 800cd24:	4293      	cmp	r3, r2
 800cd26:	d001      	beq.n	800cd2c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x40>
 800cd28:	2301      	movs	r3, #1
 800cd2a:	e000      	b.n	800cd2e <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x42>
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d005      	beq.n	800cd3e <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x52>
      dst.resize(dstRows, dstCols);
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	69ba      	ldr	r2, [r7, #24]
 800cd36:	69f9      	ldr	r1, [r7, #28]
 800cd38:	4618      	mov	r0, r3
 800cd3a:	f000 fcd3 	bl	800d6e4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii>
    const int Size = EIGEN_PLAIN_ENUM_MIN(XprType::ColsAtCompileTime,DstXprType::ColsAtCompileTime);
 800cd3e:	2301      	movs	r3, #1
 800cd40:	617b      	str	r3, [r7, #20]
    ActualXprType actual_xpr(src.nestedExpression());
 800cd42:	68b8      	ldr	r0, [r7, #8]
 800cd44:	f000 fd00 	bl	800d748 <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE16nestedExpressionEv>
 800cd48:	4602      	mov	r2, r0
 800cd4a:	f107 0310 	add.w	r3, r7, #16
 800cd4e:	4611      	mov	r1, r2
 800cd50:	4618      	mov	r0, r3
 800cd52:	f000 fd04 	bl	800d75e <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS7_INS0_IfLi1ELi3ELi1ELi1ELi3EEENS0_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS1_EEEERKT_>
    compute_inverse<ActualXprTypeCleanded, DstXprType>::run(actual_xpr, dst);
 800cd56:	f107 0310 	add.w	r3, r7, #16
 800cd5a:	68f9      	ldr	r1, [r7, #12]
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	f000 fd13 	bl	800d788 <_ZN5Eigen8internal15compute_inverseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_Li1EE3runERKS3_RS3_>
  }
 800cd62:	bf00      	nop
 800cd64:	3720      	adds	r7, #32
 800cd66:	46bd      	mov	sp, r7
 800cd68:	bd80      	pop	{r7, pc}

0800cd6a <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE9innerSizeEv>:
    Index innerSize() const
 800cd6a:	b580      	push	{r7, lr}
 800cd6c:	b082      	sub	sp, #8
 800cd6e:	af00      	add	r7, sp, #0
 800cd70:	6078      	str	r0, [r7, #4]
      return IsVectorAtCompileTime ? this->size()
 800cd72:	6878      	ldr	r0, [r7, #4]
 800cd74:	f000 fd47 	bl	800d806 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4sizeEv>
 800cd78:	4603      	mov	r3, r0
    }
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	3708      	adds	r7, #8
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	bd80      	pop	{r7, pc}

0800cd82 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ENS_5DenseEEC1ERS3_i>:
 800cd82:	b580      	push	{r7, lr}
 800cd84:	b084      	sub	sp, #16
 800cd86:	af00      	add	r7, sp, #0
 800cd88:	60f8      	str	r0, [r7, #12]
 800cd8a:	60b9      	str	r1, [r7, #8]
 800cd8c:	607a      	str	r2, [r7, #4]
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	687a      	ldr	r2, [r7, #4]
 800cd92:	68b9      	ldr	r1, [r7, #8]
 800cd94:	4618      	mov	r0, r3
 800cd96:	f000 fd58 	bl	800d84a <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EEC1ERS4_i>
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	3710      	adds	r7, #16
 800cda0:	46bd      	mov	sp, r7
 800cda2:	bd80      	pop	{r7, pc}

0800cda4 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800cda4:	b480      	push	{r7}
 800cda6:	b083      	sub	sp, #12
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]
    }
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	4618      	mov	r0, r3
 800cdb0:	370c      	adds	r7, #12
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb8:	4770      	bx	lr

0800cdba <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ENS_5DenseEEC1ERS3_i>:
 800cdba:	b580      	push	{r7, lr}
 800cdbc:	b084      	sub	sp, #16
 800cdbe:	af00      	add	r7, sp, #0
 800cdc0:	60f8      	str	r0, [r7, #12]
 800cdc2:	60b9      	str	r1, [r7, #8]
 800cdc4:	607a      	str	r2, [r7, #4]
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	687a      	ldr	r2, [r7, #4]
 800cdca:	68b9      	ldr	r1, [r7, #8]
 800cdcc:	4618      	mov	r0, r3
 800cdce:	f000 fd6d 	bl	800d8ac <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EEC1ERS4_i>
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	3710      	adds	r7, #16
 800cdd8:	46bd      	mov	sp, r7
 800cdda:	bd80      	pop	{r7, pc}

0800cddc <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800cddc:	b480      	push	{r7}
 800cdde:	b083      	sub	sp, #12
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	6078      	str	r0, [r7, #4]
    }
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	4618      	mov	r0, r3
 800cde8:	370c      	adds	r7, #12
 800cdea:	46bd      	mov	sp, r7
 800cdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf0:	4770      	bx	lr

0800cdf2 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 800cdf2:	b580      	push	{r7, lr}
 800cdf4:	b082      	sub	sp, #8
 800cdf6:	af00      	add	r7, sp, #0
 800cdf8:	6078      	str	r0, [r7, #4]
 800cdfa:	f7f9 ff04 	bl	8006c06 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800cdfe:	4603      	mov	r3, r0
 800ce00:	4618      	mov	r0, r3
 800ce02:	3708      	adds	r7, #8
 800ce04:	46bd      	mov	sp, r7
 800ce06:	bd80      	pop	{r7, pc}

0800ce08 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b082      	sub	sp, #8
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
 800ce10:	f7f9 fef9 	bl	8006c06 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800ce14:	4603      	mov	r3, r0
 800ce16:	4618      	mov	r0, r3
 800ce18:	3708      	adds	r7, #8
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	bd80      	pop	{r7, pc}

0800ce1e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 800ce1e:	b580      	push	{r7, lr}
 800ce20:	b082      	sub	sp, #8
 800ce22:	af00      	add	r7, sp, #0
 800ce24:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	4618      	mov	r0, r3
 800ce2a:	f7ff f8d8 	bl	800bfde <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4colsEv>
 800ce2e:	4603      	mov	r3, r0
    }
 800ce30:	4618      	mov	r0, r3
 800ce32:	3708      	adds	r7, #8
 800ce34:	46bd      	mov	sp, r7
 800ce36:	bd80      	pop	{r7, pc}

0800ce38 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1ERKSI_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b082      	sub	sp, #8
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
 800ce40:	6039      	str	r1, [r7, #0]
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	6839      	ldr	r1, [r7, #0]
 800ce46:	4618      	mov	r0, r3
 800ce48:	f000 fd61 	bl	800d90e <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1ERKSI_>
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	4618      	mov	r0, r3
 800ce50:	3708      	adds	r7, #8
 800ce52:	46bd      	mov	sp, r7
 800ce54:	bd80      	pop	{r7, pc}

0800ce56 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800ce56:	b480      	push	{r7}
 800ce58:	b083      	sub	sp, #12
 800ce5a:	af00      	add	r7, sp, #0
 800ce5c:	6078      	str	r0, [r7, #4]
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	4618      	mov	r0, r3
 800ce62:	370c      	adds	r7, #12
 800ce64:	46bd      	mov	sp, r7
 800ce66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6a:	4770      	bx	lr

0800ce6c <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEED1Ev>:
 800ce6c:	b480      	push	{r7}
 800ce6e:	b083      	sub	sp, #12
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	6078      	str	r0, [r7, #4]
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	4618      	mov	r0, r3
 800ce78:	370c      	adds	r7, #12
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce80:	4770      	bx	lr

0800ce82 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEED1Ev>:
 800ce82:	b480      	push	{r7}
 800ce84:	b083      	sub	sp, #12
 800ce86:	af00      	add	r7, sp, #0
 800ce88:	6078      	str	r0, [r7, #4]
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	370c      	adds	r7, #12
 800ce90:	46bd      	mov	sp, r7
 800ce92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce96:	4770      	bx	lr

0800ce98 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEED1Ev>:
 800ce98:	b480      	push	{r7}
 800ce9a:	b083      	sub	sp, #12
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	4618      	mov	r0, r3
 800cea4:	370c      	adds	r7, #12
 800cea6:	46bd      	mov	sp, r7
 800cea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceac:	4770      	bx	lr

0800ceae <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 800ceae:	b580      	push	{r7, lr}
 800ceb0:	b084      	sub	sp, #16
 800ceb2:	af00      	add	r7, sp, #0
 800ceb4:	60f8      	str	r0, [r7, #12]
 800ceb6:	60b9      	str	r1, [r7, #8]
 800ceb8:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 800ceba:	68b9      	ldr	r1, [r7, #8]
 800cebc:	68f8      	ldr	r0, [r7, #12]
 800cebe:	f000 fd35 	bl	800d92c <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEELi0ELi1EE3runERKSM_RKS3_>
 800cec2:	eef0 7a40 	vmov.f32	s15, s0
  }
 800cec6:	eeb0 0a67 	vmov.f32	s0, s15
 800ceca:	3710      	adds	r7, #16
 800cecc:	46bd      	mov	sp, r7
 800cece:	bd80      	pop	{r7, pc}

0800ced0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 800ced0:	b5b0      	push	{r4, r5, r7, lr}
 800ced2:	b084      	sub	sp, #16
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
 800ced8:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 800ceda:	6878      	ldr	r0, [r7, #4]
 800cedc:	f7fe ff7b 	bl	800bdd6 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800cee0:	4604      	mov	r4, r0
 800cee2:	6838      	ldr	r0, [r7, #0]
 800cee4:	f7f9 fade 	bl	80064a4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEE7derivedEv>
 800cee8:	4605      	mov	r5, r0
 800ceea:	f107 030c 	add.w	r3, r7, #12
 800ceee:	4618      	mov	r0, r3
 800cef0:	f7fa f8e7 	bl	80070c2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800cef4:	f107 030c 	add.w	r3, r7, #12
 800cef8:	461a      	mov	r2, r3
 800cefa:	4629      	mov	r1, r5
 800cefc:	4620      	mov	r0, r4
 800cefe:	f000 fd26 	bl	800d94e <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 800cf02:	6878      	ldr	r0, [r7, #4]
 800cf04:	f7fe ff67 	bl	800bdd6 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800cf08:	4603      	mov	r3, r0
    }
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	3710      	adds	r7, #16
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	bdb0      	pop	{r4, r5, r7, pc}

0800cf12 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi3ELi3EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 800cf12:	b480      	push	{r7}
 800cf14:	b083      	sub	sp, #12
 800cf16:	af00      	add	r7, sp, #0
 800cf18:	6078      	str	r0, [r7, #4]
 800cf1a:	bf00      	nop
 800cf1c:	370c      	adds	r7, #12
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf24:	4770      	bx	lr

0800cf26 <_ZN5Eigen8internal30assignment_from_xpr_op_productINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_9assign_opIffEENS0_13sub_assign_opIffEEE3runINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KS7_EES9_EEvRS3_RKT_RKT0_>:
  void run(DstXprType &dst, const SrcXprType &src, const InitialFunc& /*func*/)
 800cf26:	b590      	push	{r4, r7, lr}
 800cf28:	b087      	sub	sp, #28
 800cf2a:	af00      	add	r7, sp, #0
 800cf2c:	60f8      	str	r0, [r7, #12]
 800cf2e:	60b9      	str	r1, [r7, #8]
 800cf30:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, src.lhs(), Func1());
 800cf32:	68b8      	ldr	r0, [r7, #8]
 800cf34:	f000 fd1c 	bl	800d970 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE3lhsEv>
 800cf38:	4604      	mov	r4, r0
 800cf3a:	f107 0310 	add.w	r3, r7, #16
 800cf3e:	4618      	mov	r0, r3
 800cf40:	f7fa f8bf 	bl	80070c2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800cf44:	f107 0310 	add.w	r3, r7, #16
 800cf48:	461a      	mov	r2, r3
 800cf4a:	4621      	mov	r1, r4
 800cf4c:	68f8      	ldr	r0, [r7, #12]
 800cf4e:	f7fa f99f 	bl	8007290 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
    call_assignment_no_alias(dst, src.rhs(), Func2());
 800cf52:	68b8      	ldr	r0, [r7, #8]
 800cf54:	f000 fd18 	bl	800d988 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE3rhsEv>
 800cf58:	4604      	mov	r4, r0
 800cf5a:	f107 0314 	add.w	r3, r7, #20
 800cf5e:	4618      	mov	r0, r3
 800cf60:	f000 fd1e 	bl	800d9a0 <_ZN5Eigen8internal13sub_assign_opIffEC1Ev>
 800cf64:	f107 0314 	add.w	r3, r7, #20
 800cf68:	461a      	mov	r2, r3
 800cf6a:	4621      	mov	r1, r4
 800cf6c:	68f8      	ldr	r0, [r7, #12]
 800cf6e:	f000 fd22 	bl	800d9b6 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800cf72:	bf00      	nop
 800cf74:	371c      	adds	r7, #28
 800cf76:	46bd      	mov	sp, r7
 800cf78:	bd90      	pop	{r4, r7, pc}
	...

0800cf7c <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b084      	sub	sp, #16
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	60f8      	str	r0, [r7, #12]
 800cf84:	60b9      	str	r1, [r7, #8]
 800cf86:	607a      	str	r2, [r7, #4]
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	687a      	ldr	r2, [r7, #4]
 800cf8c:	68b9      	ldr	r1, [r7, #8]
 800cf8e:	4618      	mov	r0, r3
 800cf90:	f000 fd22 	bl	800d9d8 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	db07      	blt.n	800cfaa <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i+0x2e>
 800cf9a:	68bb      	ldr	r3, [r7, #8]
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	f7f8 f855 	bl	800504c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800cfa2:	4602      	mov	r2, r0
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	4293      	cmp	r3, r2
 800cfa8:	db05      	blt.n	800cfb6 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i+0x3a>
 800cfaa:	4b05      	ldr	r3, [pc, #20]	; (800cfc0 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i+0x44>)
 800cfac:	4a05      	ldr	r2, [pc, #20]	; (800cfc4 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i+0x48>)
 800cfae:	2178      	movs	r1, #120	; 0x78
 800cfb0:	4805      	ldr	r0, [pc, #20]	; (800cfc8 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i+0x4c>)
 800cfb2:	f010 ff6f 	bl	801de94 <__assert_func>
    }
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	4618      	mov	r0, r3
 800cfba:	3710      	adds	r7, #16
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	bd80      	pop	{r7, pc}
 800cfc0:	08024880 	.word	0x08024880
 800cfc4:	08025ea8 	.word	0x08025ea8
 800cfc8:	08024a04 	.word	0x08024a04

0800cfcc <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE7derivedEv>:
 800cfcc:	b480      	push	{r7}
 800cfce:	b083      	sub	sp, #12
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	6078      	str	r0, [r7, #4]
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	370c      	adds	r7, #12
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe0:	4770      	bx	lr

0800cfe2 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1Ev>:
 800cfe2:	b580      	push	{r7, lr}
 800cfe4:	b082      	sub	sp, #8
 800cfe6:	af00      	add	r7, sp, #0
 800cfe8:	6078      	str	r0, [r7, #4]
 800cfea:	6878      	ldr	r0, [r7, #4]
 800cfec:	f000 fd05 	bl	800d9fa <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1Ev>
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	4618      	mov	r0, r3
 800cff4:	3708      	adds	r7, #8
 800cff6:	46bd      	mov	sp, r7
 800cff8:	bd80      	pop	{r7, pc}

0800cffa <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 800cffa:	b580      	push	{r7, lr}
 800cffc:	b082      	sub	sp, #8
 800cffe:	af00      	add	r7, sp, #0
 800d000:	6078      	str	r0, [r7, #4]
 800d002:	6878      	ldr	r0, [r7, #4]
 800d004:	f7ff ffed 	bl	800cfe2 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1Ev>
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	4618      	mov	r0, r3
 800d00c:	3708      	adds	r7, #8
 800d00e:	46bd      	mov	sp, r7
 800d010:	bd80      	pop	{r7, pc}

0800d012 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4rowsEv>:
 800d012:	b580      	push	{r7, lr}
 800d014:	b082      	sub	sp, #8
 800d016:	af00      	add	r7, sp, #0
 800d018:	6078      	str	r0, [r7, #4]
 800d01a:	f7f9 fdec 	bl	8006bf6 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 800d01e:	4603      	mov	r3, r0
 800d020:	4618      	mov	r0, r3
 800d022:	3708      	adds	r7, #8
 800d024:	46bd      	mov	sp, r7
 800d026:	bd80      	pop	{r7, pc}

0800d028 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 800d028:	b580      	push	{r7, lr}
 800d02a:	b082      	sub	sp, #8
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	6078      	str	r0, [r7, #4]
 800d030:	f7f9 fde9 	bl	8006c06 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800d034:	4603      	mov	r3, r0
 800d036:	4618      	mov	r0, r3
 800d038:	3708      	adds	r7, #8
 800d03a:	46bd      	mov	sp, r7
 800d03c:	bd80      	pop	{r7, pc}
	...

0800d040 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEEC1ERSC_RSE_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 800d040:	b5b0      	push	{r4, r5, r7, lr}
 800d042:	b084      	sub	sp, #16
 800d044:	af00      	add	r7, sp, #0
 800d046:	60f8      	str	r0, [r7, #12]
 800d048:	60b9      	str	r1, [r7, #8]
 800d04a:	607a      	str	r2, [r7, #4]
 800d04c:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 800d04e:	68f8      	ldr	r0, [r7, #12]
 800d050:	f7ff ffd3 	bl	800cffa <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEENS_5DenseEEC1Ev>
 800d054:	68fa      	ldr	r2, [r7, #12]
 800d056:	68bb      	ldr	r3, [r7, #8]
 800d058:	4614      	mov	r4, r2
 800d05a:	461d      	mov	r5, r3
 800d05c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d05e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d060:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d064:	e884 0003 	stmia.w	r4, {r0, r1}
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	f103 0218 	add.w	r2, r3, #24
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	4614      	mov	r4, r2
 800d072:	461d      	mov	r5, r3
 800d074:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d076:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d078:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d07c:	e884 0003 	stmia.w	r4, {r0, r1}
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	3330      	adds	r3, #48	; 0x30
 800d084:	6839      	ldr	r1, [r7, #0]
 800d086:	4618      	mov	r0, r3
 800d088:	f7f8 fb16 	bl	80056b8 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 800d08c:	68b8      	ldr	r0, [r7, #8]
 800d08e:	f7fe fc7f 	bl	800b990 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 800d092:	4604      	mov	r4, r0
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	4618      	mov	r0, r3
 800d098:	f7ff ffbb 	bl	800d012 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4rowsEv>
 800d09c:	4603      	mov	r3, r0
 800d09e:	429c      	cmp	r4, r3
 800d0a0:	d10a      	bne.n	800d0b8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEEC1ERSC_RSE_RKS3_+0x78>
 800d0a2:	68b8      	ldr	r0, [r7, #8]
 800d0a4:	f7fe fc81 	bl	800b9aa <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 800d0a8:	4604      	mov	r4, r0
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	f7ff ffbb 	bl	800d028 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4colsEv>
 800d0b2:	4603      	mov	r3, r0
 800d0b4:	429c      	cmp	r4, r3
 800d0b6:	d005      	beq.n	800d0c4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEEC1ERSC_RSE_RKS3_+0x84>
 800d0b8:	4b05      	ldr	r3, [pc, #20]	; (800d0d0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEEC1ERSC_RSE_RKS3_+0x90>)
 800d0ba:	4a06      	ldr	r2, [pc, #24]	; (800d0d4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEEC1ERSC_RSE_RKS3_+0x94>)
 800d0bc:	2174      	movs	r1, #116	; 0x74
 800d0be:	4806      	ldr	r0, [pc, #24]	; (800d0d8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEEC1ERSC_RSE_RKS3_+0x98>)
 800d0c0:	f010 fee8 	bl	801de94 <__assert_func>
    }
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	3710      	adds	r7, #16
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	bdb0      	pop	{r4, r5, r7, pc}
 800d0ce:	bf00      	nop
 800d0d0:	0801fcfc 	.word	0x0801fcfc
 800d0d4:	08025f84 	.word	0x08025f84
 800d0d8:	0801ff60 	.word	0x0801ff60

0800d0dc <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b082      	sub	sp, #8
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	6078      	str	r0, [r7, #4]
 800d0e4:	6878      	ldr	r0, [r7, #4]
 800d0e6:	f000 f809 	bl	800d0fc <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE7derivedEv>
 800d0ea:	4603      	mov	r3, r0
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	f000 fc8f 	bl	800da10 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE4colsEv>
 800d0f2:	4603      	mov	r3, r0
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	3708      	adds	r7, #8
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	bd80      	pop	{r7, pc}

0800d0fc <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800d0fc:	b480      	push	{r7}
 800d0fe:	b083      	sub	sp, #12
 800d100:	af00      	add	r7, sp, #0
 800d102:	6078      	str	r0, [r7, #4]
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	4618      	mov	r0, r3
 800d108:	370c      	adds	r7, #12
 800d10a:	46bd      	mov	sp, r7
 800d10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d110:	4770      	bx	lr

0800d112 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 800d112:	b580      	push	{r7, lr}
 800d114:	b082      	sub	sp, #8
 800d116:	af00      	add	r7, sp, #0
 800d118:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	4618      	mov	r0, r3
 800d11e:	f7fe fc37 	bl	800b990 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 800d122:	4603      	mov	r3, r0
    }
 800d124:	4618      	mov	r0, r3
 800d126:	3708      	adds	r7, #8
 800d128:	46bd      	mov	sp, r7
 800d12a:	bd80      	pop	{r7, pc}

0800d12c <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b082      	sub	sp, #8
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
 800d134:	6878      	ldr	r0, [r7, #4]
 800d136:	f000 fc92 	bl	800da5e <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	4618      	mov	r0, r3
 800d13e:	3708      	adds	r7, #8
 800d140:	46bd      	mov	sp, r7
 800d142:	bd80      	pop	{r7, pc}

0800d144 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800d144:	b580      	push	{r7, lr}
 800d146:	b082      	sub	sp, #8
 800d148:	af00      	add	r7, sp, #0
 800d14a:	6078      	str	r0, [r7, #4]
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	4618      	mov	r0, r3
 800d150:	f7ff ffec 	bl	800d12c <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	4618      	mov	r0, r3
 800d158:	3708      	adds	r7, #8
 800d15a:	46bd      	mov	sp, r7
 800d15c:	bd80      	pop	{r7, pc}

0800d15e <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800d15e:	b580      	push	{r7, lr}
 800d160:	b082      	sub	sp, #8
 800d162:	af00      	add	r7, sp, #0
 800d164:	6078      	str	r0, [r7, #4]
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	4618      	mov	r0, r3
 800d16a:	f7ff ffeb 	bl	800d144 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EED1Ev>
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	4618      	mov	r0, r3
 800d172:	3708      	adds	r7, #8
 800d174:	46bd      	mov	sp, r7
 800d176:	bd80      	pop	{r7, pc}

0800d178 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>:
struct evaluator<const T>
 800d178:	b580      	push	{r7, lr}
 800d17a:	b082      	sub	sp, #8
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	4618      	mov	r0, r3
 800d184:	f7ff ffeb 	bl	800d15e <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	4618      	mov	r0, r3
 800d18c:	3708      	adds	r7, #8
 800d18e:	46bd      	mov	sp, r7
 800d190:	bd80      	pop	{r7, pc}

0800d192 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE4DataD1Ev>:
  struct Data
 800d192:	b580      	push	{r7, lr}
 800d194:	b082      	sub	sp, #8
 800d196:	af00      	add	r7, sp, #0
 800d198:	6078      	str	r0, [r7, #4]
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	330c      	adds	r3, #12
 800d19e:	4618      	mov	r0, r3
 800d1a0:	f7ff ffea 	bl	800d178 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	3304      	adds	r3, #4
 800d1a8:	4618      	mov	r0, r3
 800d1aa:	f7fe fce7 	bl	800bb7c <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	3708      	adds	r7, #8
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	bd80      	pop	{r7, pc}

0800d1b8 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b082      	sub	sp, #8
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	f7ff ffe5 	bl	800d192 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE4DataD1Ev>
 800d1c8:	6878      	ldr	r0, [r7, #4]
 800d1ca:	f000 fc3d 	bl	800da48 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEED1Ev>
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	3708      	adds	r7, #8
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	bd80      	pop	{r7, pc}

0800d1d8 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	b082      	sub	sp, #8
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	f7ff ffe8 	bl	800d1b8 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffED1Ev>
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	3708      	adds	r7, #8
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	bd80      	pop	{r7, pc}

0800d1f2 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 800d1f2:	b580      	push	{r7, lr}
 800d1f4:	b082      	sub	sp, #8
 800d1f6:	af00      	add	r7, sp, #0
 800d1f8:	6078      	str	r0, [r7, #4]
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	f7ff ffeb 	bl	800d1d8 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEED1Ev>
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	4618      	mov	r0, r3
 800d206:	3708      	adds	r7, #8
 800d208:	46bd      	mov	sp, r7
 800d20a:	bd80      	pop	{r7, pc}

0800d20c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 800d20c:	b580      	push	{r7, lr}
 800d20e:	ed2d 8b02 	vpush	{d8}
 800d212:	b088      	sub	sp, #32
 800d214:	af00      	add	r7, sp, #0
 800d216:	6078      	str	r0, [r7, #4]
 800d218:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 800d21a:	6878      	ldr	r0, [r7, #4]
 800d21c:	f7ff f938 	bl	800c490 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE4rowsEv>
 800d220:	4603      	mov	r3, r0
 800d222:	2b00      	cmp	r3, #0
 800d224:	dd05      	ble.n	800d232 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 800d226:	6878      	ldr	r0, [r7, #4]
 800d228:	f7ff ff58 	bl	800d0dc <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE4colsEv>
 800d22c:	4603      	mov	r3, r0
 800d22e:	2b00      	cmp	r3, #0
 800d230:	dc06      	bgt.n	800d240 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 800d232:	4b16      	ldr	r3, [pc, #88]	; (800d28c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 800d234:	4a16      	ldr	r2, [pc, #88]	; (800d290 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 800d236:	f240 119b 	movw	r1, #411	; 0x19b
 800d23a:	4816      	ldr	r0, [pc, #88]	; (800d294 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 800d23c:	f010 fe2a 	bl	801de94 <__assert_func>
 800d240:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800d242:	6878      	ldr	r0, [r7, #4]
 800d244:	f7ff ff5a 	bl	800d0fc <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE7derivedEv>
 800d248:	4602      	mov	r2, r0
 800d24a:	f107 030c 	add.w	r3, r7, #12
 800d24e:	4611      	mov	r1, r2
 800d250:	4618      	mov	r0, r3
 800d252:	f000 fbea 	bl	800da2a <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1ERKSG_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800d256:	6878      	ldr	r0, [r7, #4]
 800d258:	f7ff ff50 	bl	800d0fc <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE7derivedEv>
 800d25c:	4602      	mov	r2, r0
 800d25e:	f107 030c 	add.w	r3, r7, #12
 800d262:	6839      	ldr	r1, [r7, #0]
 800d264:	4618      	mov	r0, r3
 800d266:	f000 fc05 	bl	800da74 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi0ELi2EE3runISJ_EEfRKSK_RKS3_RKT_>
 800d26a:	eeb0 8a40 	vmov.f32	s16, s0
 800d26e:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800d270:	f107 030c 	add.w	r3, r7, #12
 800d274:	4618      	mov	r0, r3
 800d276:	f7ff ffbc 	bl	800d1f2 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800d27a:	eef0 7a48 	vmov.f32	s15, s16
}
 800d27e:	eeb0 0a67 	vmov.f32	s0, s15
 800d282:	3720      	adds	r7, #32
 800d284:	46bd      	mov	sp, r7
 800d286:	ecbd 8b02 	vpop	{d8}
 800d28a:	bd80      	pop	{r7, pc}
 800d28c:	08024d7c 	.word	0x08024d7c
 800d290:	080261cc 	.word	0x080261cc
 800d294:	08024f88 	.word	0x08024f88

0800d298 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800d298:	b580      	push	{r7, lr}
 800d29a:	b082      	sub	sp, #8
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800d2a0:	2202      	movs	r2, #2
 800d2a2:	2101      	movs	r1, #1
 800d2a4:	6878      	ldr	r0, [r7, #4]
 800d2a6:	f7fd facf 	bl	800a848 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800d2aa:	6878      	ldr	r0, [r7, #4]
 800d2ac:	f000 fbf3 	bl	800da96 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSL_>
  }
 800d2b0:	bf00      	nop
 800d2b2:	3708      	adds	r7, #8
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	bd80      	pop	{r7, pc}

0800d2b8 <_ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7functorEv>:

    /** \returns the functor representing the nullary operation */
    EIGEN_DEVICE_FUNC
    const NullaryOp& functor() const { return m_functor; }
 800d2b8:	b480      	push	{r7}
 800d2ba:	b083      	sub	sp, #12
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	6078      	str	r0, [r7, #4]
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	3304      	adds	r3, #4
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	370c      	adds	r7, #12
 800d2c8:	46bd      	mov	sp, r7
 800d2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ce:	4770      	bx	lr

0800d2d0 <_ZN5Eigen8internal14evaluator_baseINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800d2d0:	b480      	push	{r7}
 800d2d2:	b083      	sub	sp, #12
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	6078      	str	r0, [r7, #4]
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	4618      	mov	r0, r3
 800d2dc:	370c      	adds	r7, #12
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e4:	4770      	bx	lr

0800d2e6 <_ZN5Eigen9BlockImplIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ENS_5DenseEEC1ERSE_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 800d2e6:	b580      	push	{r7, lr}
 800d2e8:	b084      	sub	sp, #16
 800d2ea:	af00      	add	r7, sp, #0
 800d2ec:	60f8      	str	r0, [r7, #12]
 800d2ee:	60b9      	str	r1, [r7, #8]
 800d2f0:	607a      	str	r2, [r7, #4]
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	687a      	ldr	r2, [r7, #4]
 800d2f6:	68b9      	ldr	r1, [r7, #8]
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	f000 fbe8 	bl	800dace <_ZN5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EEC1ERSE_i>
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	4618      	mov	r0, r3
 800d302:	3710      	adds	r7, #16
 800d304:	46bd      	mov	sp, r7
 800d306:	bd80      	pop	{r7, pc}

0800d308 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800d308:	b480      	push	{r7}
 800d30a:	b083      	sub	sp, #12
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	6078      	str	r0, [r7, #4]
    }
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	4618      	mov	r0, r3
 800d314:	370c      	adds	r7, #12
 800d316:	46bd      	mov	sp, r7
 800d318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d31c:	4770      	bx	lr

0800d31e <_ZN5Eigen9BlockImplIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ENS_5DenseEEC1ERS5_i>:
 800d31e:	b580      	push	{r7, lr}
 800d320:	b084      	sub	sp, #16
 800d322:	af00      	add	r7, sp, #0
 800d324:	60f8      	str	r0, [r7, #12]
 800d326:	60b9      	str	r1, [r7, #8]
 800d328:	607a      	str	r2, [r7, #4]
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	687a      	ldr	r2, [r7, #4]
 800d32e:	68b9      	ldr	r1, [r7, #8]
 800d330:	4618      	mov	r0, r3
 800d332:	f000 fbf7 	bl	800db24 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EEC1ERS6_i>
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	4618      	mov	r0, r3
 800d33a:	3710      	adds	r7, #16
 800d33c:	46bd      	mov	sp, r7
 800d33e:	bd80      	pop	{r7, pc}

0800d340 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800d340:	b480      	push	{r7}
 800d342:	b083      	sub	sp, #12
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
    }
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	4618      	mov	r0, r3
 800d34c:	370c      	adds	r7, #12
 800d34e:	46bd      	mov	sp, r7
 800d350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d354:	4770      	bx	lr

0800d356 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE4colsEv>:
      : m_xpr(xpr), m_startRow(startRow), m_startCol(startCol),
                    m_blockRows(blockRows), m_blockCols(blockCols)
    {}

    EIGEN_DEVICE_FUNC inline Index rows() const { return m_blockRows.value(); }
    EIGEN_DEVICE_FUNC inline Index cols() const { return m_blockCols.value(); }
 800d356:	b580      	push	{r7, lr}
 800d358:	b082      	sub	sp, #8
 800d35a:	af00      	add	r7, sp, #0
 800d35c:	6078      	str	r0, [r7, #4]
 800d35e:	f7f9 fc52 	bl	8006c06 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800d362:	4603      	mov	r3, r0
 800d364:	4618      	mov	r0, r3
 800d366:	3708      	adds	r7, #8
 800d368:	46bd      	mov	sp, r7
 800d36a:	bd80      	pop	{r7, pc}

0800d36c <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE4rowsEv>:
    EIGEN_DEVICE_FUNC inline Index rows() const { return m_blockRows.value(); }
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b082      	sub	sp, #8
 800d370:	af00      	add	r7, sp, #0
 800d372:	6078      	str	r0, [r7, #4]
 800d374:	f7f9 fc47 	bl	8006c06 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800d378:	4603      	mov	r3, r0
 800d37a:	4618      	mov	r0, r3
 800d37c:	3708      	adds	r7, #8
 800d37e:	46bd      	mov	sp, r7
 800d380:	bd80      	pop	{r7, pc}

0800d382 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 800d382:	b580      	push	{r7, lr}
 800d384:	b082      	sub	sp, #8
 800d386:	af00      	add	r7, sp, #0
 800d388:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	3304      	adds	r3, #4
 800d38e:	4618      	mov	r0, r3
 800d390:	f7ff f991 	bl	800c6b6 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE4colsEv>
 800d394:	4603      	mov	r3, r0
    }
 800d396:	4618      	mov	r0, r3
 800d398:	3708      	adds	r7, #8
 800d39a:	46bd      	mov	sp, r7
 800d39c:	bd80      	pop	{r7, pc}

0800d39e <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1ERKSP_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 800d39e:	b580      	push	{r7, lr}
 800d3a0:	b082      	sub	sp, #8
 800d3a2:	af00      	add	r7, sp, #0
 800d3a4:	6078      	str	r0, [r7, #4]
 800d3a6:	6039      	str	r1, [r7, #0]
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	6839      	ldr	r1, [r7, #0]
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	f000 fbeb 	bl	800db88 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1ERKSP_>
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	3708      	adds	r7, #8
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	bd80      	pop	{r7, pc}

0800d3bc <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800d3bc:	b480      	push	{r7}
 800d3be:	b083      	sub	sp, #12
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	370c      	adds	r7, #12
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d0:	4770      	bx	lr

0800d3d2 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEED1Ev>:
 800d3d2:	b480      	push	{r7}
 800d3d4:	b083      	sub	sp, #12
 800d3d6:	af00      	add	r7, sp, #0
 800d3d8:	6078      	str	r0, [r7, #4]
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	4618      	mov	r0, r3
 800d3de:	370c      	adds	r7, #12
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e6:	4770      	bx	lr

0800d3e8 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEED1Ev>:
 800d3e8:	b480      	push	{r7}
 800d3ea:	b083      	sub	sp, #12
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	6078      	str	r0, [r7, #4]
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	370c      	adds	r7, #12
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3fc:	4770      	bx	lr

0800d3fe <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEED1Ev>:
 800d3fe:	b480      	push	{r7}
 800d400:	b083      	sub	sp, #12
 800d402:	af00      	add	r7, sp, #0
 800d404:	6078      	str	r0, [r7, #4]
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	4618      	mov	r0, r3
 800d40a:	370c      	adds	r7, #12
 800d40c:	46bd      	mov	sp, r7
 800d40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d412:	4770      	bx	lr

0800d414 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS5_IS7_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEELi1ELi1ELb0EEEEEKNS9_IKNS8_ISB_EELi1ELi1ELb0EEEEEEELi0ELi2EE3runISS_EEfRKST_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 800d414:	b580      	push	{r7, lr}
 800d416:	b084      	sub	sp, #16
 800d418:	af00      	add	r7, sp, #0
 800d41a:	60f8      	str	r0, [r7, #12]
 800d41c:	60b9      	str	r1, [r7, #8]
 800d41e:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 800d420:	68b9      	ldr	r1, [r7, #8]
 800d422:	68f8      	ldr	r0, [r7, #12]
 800d424:	f000 fbbf 	bl	800dba6 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS5_IS7_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEELi1ELi1ELb0EEEEEKNS9_IKNS8_ISB_EELi1ELi1ELb0EEEEEEELi0ELi1EE3runERKST_RKS3_>
 800d428:	eef0 7a40 	vmov.f32	s15, s0
  }
 800d42c:	eeb0 0a67 	vmov.f32	s0, s15
 800d430:	3710      	adds	r7, #16
 800d432:	46bd      	mov	sp, r7
 800d434:	bd80      	pop	{r7, pc}

0800d436 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800d436:	b580      	push	{r7, lr}
 800d438:	b082      	sub	sp, #8
 800d43a:	af00      	add	r7, sp, #0
 800d43c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800d43e:	2200      	movs	r2, #0
 800d440:	2102      	movs	r1, #2
 800d442:	6878      	ldr	r0, [r7, #4]
 800d444:	f7fc ff39 	bl	800a2ba <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800d448:	6878      	ldr	r0, [r7, #4]
 800d44a:	f000 fbbd 	bl	800dbc8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSP_>
  }
 800d44e:	bf00      	nop
 800d450:	3708      	adds	r7, #8
 800d452:	46bd      	mov	sp, r7
 800d454:	bd80      	pop	{r7, pc}

0800d456 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EEC1ERS4_i>:
    EIGEN_INHERIT_ASSIGNMENT_OPERATORS(BlockImpl_dense)

    /** Column or Row constructor
      */
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    BlockImpl_dense(XprType& xpr, Index i)
 800d456:	b5b0      	push	{r4, r5, r7, lr}
 800d458:	b084      	sub	sp, #16
 800d45a:	af00      	add	r7, sp, #0
 800d45c:	60f8      	str	r0, [r7, #12]
 800d45e:	60b9      	str	r1, [r7, #8]
 800d460:	607a      	str	r2, [r7, #4]
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
             BlockRows==1 ? 1 : xpr.rows(),
             BlockCols==1 ? 1 : xpr.cols()),
        m_xpr(xpr),
        m_startRow( (BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) ? i : 0),
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800d462:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800d464:	68bb      	ldr	r3, [r7, #8]
 800d466:	4618      	mov	r0, r3
 800d468:	f7fa ff34 	bl	80082d4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4dataEv>
 800d46c:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 800d46e:	68b8      	ldr	r0, [r7, #8]
 800d470:	f000 fbba 	bl	800dbe8 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11innerStrideEv>
 800d474:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	fb02 f303 	mul.w	r3, r2, r3
 800d47c:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800d47e:	441d      	add	r5, r3
 800d480:	68bb      	ldr	r3, [r7, #8]
 800d482:	4618      	mov	r0, r3
 800d484:	f7f7 fde2 	bl	800504c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800d488:	4603      	mov	r3, r0
 800d48a:	2201      	movs	r2, #1
 800d48c:	4629      	mov	r1, r5
 800d48e:	4620      	mov	r0, r4
 800d490:	f000 fbc2 	bl	800dc18 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii>
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	68ba      	ldr	r2, [r7, #8]
 800d498:	609a      	str	r2, [r3, #8]
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	330c      	adds	r3, #12
 800d49e:	6879      	ldr	r1, [r7, #4]
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	f000 fbf7 	bl	800dc94 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	3310      	adds	r3, #16
 800d4aa:	2100      	movs	r1, #0
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	f000 fbf1 	bl	800dc94 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
    {
      init();
 800d4b2:	68f8      	ldr	r0, [r7, #12]
 800d4b4:	f000 fbfd 	bl	800dcb2 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE4initEv>
    }
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	3710      	adds	r7, #16
 800d4be:	46bd      	mov	sp, r7
 800d4c0:	bdb0      	pop	{r4, r5, r7, pc}

0800d4c2 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EEC1ERS4_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 800d4c2:	b5b0      	push	{r4, r5, r7, lr}
 800d4c4:	b084      	sub	sp, #16
 800d4c6:	af00      	add	r7, sp, #0
 800d4c8:	60f8      	str	r0, [r7, #12]
 800d4ca:	60b9      	str	r1, [r7, #8]
 800d4cc:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800d4ce:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800d4d0:	68bb      	ldr	r3, [r7, #8]
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	f7f9 fe9d 	bl	8007212 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4dataEv>
 800d4d8:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 800d4da:	68b8      	ldr	r0, [r7, #8]
 800d4dc:	f7f9 ff6a 	bl	80073b4 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>
 800d4e0:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	fb02 f303 	mul.w	r3, r2, r3
 800d4e8:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800d4ea:	441d      	add	r5, r3
 800d4ec:	68bb      	ldr	r3, [r7, #8]
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	f7f7 fe5d 	bl	80051ae <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800d4f4:	4602      	mov	r2, r0
 800d4f6:	2301      	movs	r3, #1
 800d4f8:	4629      	mov	r1, r5
 800d4fa:	4620      	mov	r0, r4
 800d4fc:	f000 fc00 	bl	800dd00 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii>
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	68ba      	ldr	r2, [r7, #8]
 800d504:	609a      	str	r2, [r3, #8]
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	330c      	adds	r3, #12
 800d50a:	2100      	movs	r1, #0
 800d50c:	4618      	mov	r0, r3
 800d50e:	f000 fbc1 	bl	800dc94 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	3310      	adds	r3, #16
 800d516:	6879      	ldr	r1, [r7, #4]
 800d518:	4618      	mov	r0, r3
 800d51a:	f000 fc2f 	bl	800dd7c <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
      init();
 800d51e:	68f8      	ldr	r0, [r7, #12]
 800d520:	f000 fc46 	bl	800ddb0 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EE4initEv>
    }
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	4618      	mov	r0, r3
 800d528:	3710      	adds	r7, #16
 800d52a:	46bd      	mov	sp, r7
 800d52c:	bdb0      	pop	{r4, r5, r7, pc}

0800d52e <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1ERKSI_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800d52e:	b580      	push	{r7, lr}
 800d530:	b082      	sub	sp, #8
 800d532:	af00      	add	r7, sp, #0
 800d534:	6078      	str	r0, [r7, #4]
 800d536:	6039      	str	r1, [r7, #0]
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	6839      	ldr	r1, [r7, #0]
 800d53c:	4618      	mov	r0, r3
 800d53e:	f000 fc47 	bl	800ddd0 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	4618      	mov	r0, r3
 800d546:	3708      	adds	r7, #8
 800d548:	46bd      	mov	sp, r7
 800d54a:	bd80      	pop	{r7, pc}

0800d54c <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi0ELi3EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b084      	sub	sp, #16
 800d550:	af00      	add	r7, sp, #0
 800d552:	6078      	str	r0, [r7, #4]
 800d554:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800d556:	6839      	ldr	r1, [r7, #0]
 800d558:	6878      	ldr	r0, [r7, #4]
 800d55a:	f000 fc4b 	bl	800ddf4 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi0ELi1EE3runERKSM_RKS3_>
 800d55e:	eef0 7a40 	vmov.f32	s15, s0
 800d562:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 800d566:	6839      	ldr	r1, [r7, #0]
 800d568:	6878      	ldr	r0, [r7, #4]
 800d56a:	f000 fc54 	bl	800de16 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi1ELi2EE3runERKSM_RKS3_>
 800d56e:	eef0 7a40 	vmov.f32	s15, s0
 800d572:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800d576:	f107 020c 	add.w	r2, r7, #12
 800d57a:	f107 0308 	add.w	r3, r7, #8
 800d57e:	4619      	mov	r1, r3
 800d580:	6838      	ldr	r0, [r7, #0]
 800d582:	f7fb fefe 	bl	8009382 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 800d586:	eef0 7a40 	vmov.f32	s15, s0
  }
 800d58a:	eeb0 0a67 	vmov.f32	s0, s15
 800d58e:	3710      	adds	r7, #16
 800d590:	46bd      	mov	sp, r7
 800d592:	bd80      	pop	{r7, pc}

0800d594 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_7ProductIS2_S2_Li0EEES6_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 800d594:	b580      	push	{r7, lr}
 800d596:	b082      	sub	sp, #8
 800d598:	af00      	add	r7, sp, #0
 800d59a:	6078      	str	r0, [r7, #4]
 800d59c:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 800d59e:	6839      	ldr	r1, [r7, #0]
 800d5a0:	6878      	ldr	r0, [r7, #4]
 800d5a2:	f000 fc5c 	bl	800de5e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_7ProductIS2_S2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 800d5a6:	bf00      	nop
 800d5a8:	3708      	adds	r7, #8
 800d5aa:	46bd      	mov	sp, r7
 800d5ac:	bd80      	pop	{r7, pc}

0800d5ae <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS0_10IndexBasedEfEC1ERKS5_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 800d5ae:	b590      	push	{r4, r7, lr}
 800d5b0:	b083      	sub	sp, #12
 800d5b2:	af00      	add	r7, sp, #0
 800d5b4:	6078      	str	r0, [r7, #4]
 800d5b6:	6039      	str	r1, [r7, #0]
 800d5b8:	6878      	ldr	r0, [r7, #4]
 800d5ba:	f000 fc7d 	bl	800deb8 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1Ev>
 800d5be:	687c      	ldr	r4, [r7, #4]
 800d5c0:	6838      	ldr	r0, [r7, #0]
 800d5c2:	f000 fc6d 	bl	800dea0 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE16nestedExpressionEv>
 800d5c6:	4603      	mov	r3, r0
 800d5c8:	4619      	mov	r1, r3
 800d5ca:	4620      	mov	r0, r4
 800d5cc:	f7fa f9e0 	bl	8007990 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	370c      	adds	r7, #12
 800d5d6:	46bd      	mov	sp, r7
 800d5d8:	bd90      	pop	{r4, r7, pc}

0800d5da <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index rowIndexByOuterInner(Index outer, Index inner)
 800d5da:	b480      	push	{r7}
 800d5dc:	b083      	sub	sp, #12
 800d5de:	af00      	add	r7, sp, #0
 800d5e0:	6078      	str	r0, [r7, #4]
 800d5e2:	6039      	str	r1, [r7, #0]
      : inner;
 800d5e4:	687b      	ldr	r3, [r7, #4]
  }
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	370c      	adds	r7, #12
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f0:	4770      	bx	lr

0800d5f2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index colIndexByOuterInner(Index outer, Index inner)
 800d5f2:	b480      	push	{r7}
 800d5f4:	b083      	sub	sp, #12
 800d5f6:	af00      	add	r7, sp, #0
 800d5f8:	6078      	str	r0, [r7, #4]
 800d5fa:	6039      	str	r1, [r7, #0]
      : outer;
 800d5fc:	683b      	ldr	r3, [r7, #0]
  }
 800d5fe:	4618      	mov	r0, r3
 800d600:	370c      	adds	r7, #12
 800d602:	46bd      	mov	sp, r7
 800d604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d608:	4770      	bx	lr

0800d60a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index row, Index col)
 800d60a:	b5b0      	push	{r4, r5, r7, lr}
 800d60c:	b086      	sub	sp, #24
 800d60e:	af00      	add	r7, sp, #0
 800d610:	60f8      	str	r0, [r7, #12]
 800d612:	60b9      	str	r1, [r7, #8]
 800d614:	607a      	str	r2, [r7, #4]
    m_functor.assignCoeff(m_dst.coeffRef(row,col), m_src.coeff(row,col));
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	689c      	ldr	r4, [r3, #8]
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	687a      	ldr	r2, [r7, #4]
 800d620:	68b9      	ldr	r1, [r7, #8]
 800d622:	4618      	mov	r0, r3
 800d624:	f000 fc53 	bl	800dece <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEE8coeffRefEii>
 800d628:	4605      	mov	r5, r0
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	685b      	ldr	r3, [r3, #4]
 800d62e:	687a      	ldr	r2, [r7, #4]
 800d630:	68b9      	ldr	r1, [r7, #8]
 800d632:	4618      	mov	r0, r3
 800d634:	f000 fc63 	bl	800defe <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEELi3ENS_10DenseShapeES9_ffE5coeffEii>
 800d638:	eef0 7a40 	vmov.f32	s15, s0
 800d63c:	edc7 7a05 	vstr	s15, [r7, #20]
 800d640:	f107 0314 	add.w	r3, r7, #20
 800d644:	461a      	mov	r2, r3
 800d646:	4629      	mov	r1, r5
 800d648:	4620      	mov	r0, r4
 800d64a:	f7fb f8a9 	bl	80087a0 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 800d64e:	bf00      	nop
 800d650:	3718      	adds	r7, #24
 800d652:	46bd      	mov	sp, r7
 800d654:	bdb0      	pop	{r4, r5, r7, pc}

0800d656 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800d656:	b580      	push	{r7, lr}
 800d658:	b082      	sub	sp, #8
 800d65a:	af00      	add	r7, sp, #0
 800d65c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800d65e:	2202      	movs	r2, #2
 800d660:	2100      	movs	r1, #0
 800d662:	6878      	ldr	r0, [r7, #4]
 800d664:	f7ff fadf 	bl	800cc26 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800d668:	6878      	ldr	r0, [r7, #4]
 800d66a:	f000 fc7b 	bl	800df64 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSG_>
  }
 800d66e:	bf00      	nop
 800d670:	3708      	adds	r7, #8
 800d672:	46bd      	mov	sp, r7
 800d674:	bd80      	pop	{r7, pc}

0800d676 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800d676:	b480      	push	{r7}
 800d678:	b083      	sub	sp, #12
 800d67a:	af00      	add	r7, sp, #0
 800d67c:	6078      	str	r0, [r7, #4]
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	4618      	mov	r0, r3
 800d684:	370c      	adds	r7, #12
 800d686:	46bd      	mov	sp, r7
 800d688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d68c:	4770      	bx	lr

0800d68e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800d68e:	b480      	push	{r7}
 800d690:	b083      	sub	sp, #12
 800d692:	af00      	add	r7, sp, #0
 800d694:	6078      	str	r0, [r7, #4]
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	3304      	adds	r3, #4
 800d69a:	4618      	mov	r0, r3
 800d69c:	370c      	adds	r7, #12
 800d69e:	46bd      	mov	sp, r7
 800d6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a4:	4770      	bx	lr

0800d6a6 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEENS_10DenseShapeES7_Li3EE6evalToINS2_IfLi3ELi1ELi0ELi3ELi1EEEEEvRT_RKS3_RKS6_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 800d6a6:	b580      	push	{r7, lr}
 800d6a8:	b088      	sub	sp, #32
 800d6aa:	af00      	add	r7, sp, #0
 800d6ac:	60f8      	str	r0, [r7, #12]
 800d6ae:	60b9      	str	r1, [r7, #8]
 800d6b0:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 800d6b2:	f107 0314 	add.w	r3, r7, #20
 800d6b6:	687a      	ldr	r2, [r7, #4]
 800d6b8:	68b9      	ldr	r1, [r7, #8]
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	f000 fc62 	bl	800df84 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE11lazyProductINS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS9_EE>
 800d6c0:	f107 031c 	add.w	r3, r7, #28
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	f7f9 fcfc 	bl	80070c2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800d6ca:	f107 021c 	add.w	r2, r7, #28
 800d6ce:	f107 0314 	add.w	r3, r7, #20
 800d6d2:	4619      	mov	r1, r3
 800d6d4:	68f8      	ldr	r0, [r7, #12]
 800d6d6:	f000 fc6c 	bl	800dfb2 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800d6da:	bf00      	nop
 800d6dc:	3720      	adds	r7, #32
 800d6de:	46bd      	mov	sp, r7
 800d6e0:	bd80      	pop	{r7, pc}
	...

0800d6e4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii>:
    EIGEN_STRONG_INLINE void resize(Index rows, Index cols)
 800d6e4:	b580      	push	{r7, lr}
 800d6e6:	b086      	sub	sp, #24
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	60f8      	str	r0, [r7, #12]
 800d6ec:	60b9      	str	r1, [r7, #8]
 800d6ee:	607a      	str	r2, [r7, #4]
      eigen_assert(   EIGEN_IMPLIES(RowsAtCompileTime!=Dynamic,rows==RowsAtCompileTime)
 800d6f0:	68bb      	ldr	r3, [r7, #8]
 800d6f2:	2b01      	cmp	r3, #1
 800d6f4:	d108      	bne.n	800d708 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii+0x24>
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	2b01      	cmp	r3, #1
 800d6fa:	d105      	bne.n	800d708 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii+0x24>
 800d6fc:	68bb      	ldr	r3, [r7, #8]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	db02      	blt.n	800d708 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii+0x24>
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	2b00      	cmp	r3, #0
 800d706:	da06      	bge.n	800d716 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii+0x32>
 800d708:	4b0c      	ldr	r3, [pc, #48]	; (800d73c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii+0x58>)
 800d70a:	4a0d      	ldr	r2, [pc, #52]	; (800d740 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii+0x5c>)
 800d70c:	f240 1111 	movw	r1, #273	; 0x111
 800d710:	480c      	ldr	r0, [pc, #48]	; (800d744 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii+0x60>)
 800d712:	f010 fbbf 	bl	801de94 <__assert_func>
 800d716:	68bb      	ldr	r3, [r7, #8]
 800d718:	617b      	str	r3, [r7, #20]
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	613b      	str	r3, [r7, #16]
  }
 800d71e:	bf00      	nop
        m_storage.resize(rows*cols, rows, cols);
 800d720:	68f8      	ldr	r0, [r7, #12]
 800d722:	68bb      	ldr	r3, [r7, #8]
 800d724:	687a      	ldr	r2, [r7, #4]
 800d726:	fb02 f103 	mul.w	r1, r2, r3
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	68ba      	ldr	r2, [r7, #8]
 800d72e:	f000 fc51 	bl	800dfd4 <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE6resizeEiii>
    }
 800d732:	bf00      	nop
 800d734:	3718      	adds	r7, #24
 800d736:	46bd      	mov	sp, r7
 800d738:	bd80      	pop	{r7, pc}
 800d73a:	bf00      	nop
 800d73c:	0802278c 	.word	0x0802278c
 800d740:	08026394 	.word	0x08026394
 800d744:	080229a8 	.word	0x080229a8

0800d748 <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE16nestedExpressionEv>:
  EIGEN_DEVICE_FUNC const XprTypeNestedCleaned& nestedExpression() const { return m_xpr; }
 800d748:	b480      	push	{r7}
 800d74a:	b083      	sub	sp, #12
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	6078      	str	r0, [r7, #4]
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	4618      	mov	r0, r3
 800d754:	370c      	adds	r7, #12
 800d756:	46bd      	mov	sp, r7
 800d758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d75c:	4770      	bx	lr

0800d75e <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS7_INS0_IfLi1ELi3ELi1ELi1ELi3EEENS0_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS1_EEEERKT_>:
    explicit Matrix(const T& x)
 800d75e:	b580      	push	{r7, lr}
 800d760:	b082      	sub	sp, #8
 800d762:	af00      	add	r7, sp, #0
 800d764:	6078      	str	r0, [r7, #4]
 800d766:	6039      	str	r1, [r7, #0]
    {
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	4618      	mov	r0, r3
 800d76c:	f7f7 fb9a 	bl	8004ea4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
      Base::_check_template_params();
 800d770:	f7f7 fba8 	bl	8004ec4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	6839      	ldr	r1, [r7, #0]
 800d778:	4618      	mov	r0, r3
 800d77a:	f000 fc38 	bl	800dfee <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS9_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS2_EESI_EEvRKNS_9DenseBaseIT0_EE>
    }
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	4618      	mov	r0, r3
 800d782:	3708      	adds	r7, #8
 800d784:	46bd      	mov	sp, r7
 800d786:	bd80      	pop	{r7, pc}

0800d788 <_ZN5Eigen8internal15compute_inverseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_Li1EE3runERKS3_RS3_>:
  static inline void run(const MatrixType& matrix, ResultType& result)
 800d788:	b580      	push	{r7, lr}
 800d78a:	ed2d 8b02 	vpush	{d8}
 800d78e:	b084      	sub	sp, #16
 800d790:	af00      	add	r7, sp, #0
 800d792:	6078      	str	r0, [r7, #4]
 800d794:	6039      	str	r1, [r7, #0]
    internal::evaluator<MatrixType> matrixEval(matrix);
 800d796:	f107 030c 	add.w	r3, r7, #12
 800d79a:	6879      	ldr	r1, [r7, #4]
 800d79c:	4618      	mov	r0, r3
 800d79e:	f7fc ff50 	bl	800a642 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
    result.coeffRef(0,0) = Scalar(1) / matrixEval.coeff(0,0);
 800d7a2:	f107 030c 	add.w	r3, r7, #12
 800d7a6:	2200      	movs	r2, #0
 800d7a8:	2100      	movs	r1, #0
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	f000 fc2c 	bl	800e008 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE5coeffEii>
 800d7b0:	4603      	mov	r3, r0
 800d7b2:	ed93 8a00 	vldr	s16, [r3]
 800d7b6:	683b      	ldr	r3, [r7, #0]
 800d7b8:	2200      	movs	r2, #0
 800d7ba:	2100      	movs	r1, #0
 800d7bc:	4618      	mov	r0, r3
 800d7be:	f7f9 f968 	bl	8006a92 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8coeffRefEii>
 800d7c2:	4603      	mov	r3, r0
 800d7c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d7c8:	eec7 7a08 	vdiv.f32	s15, s14, s16
 800d7cc:	edc3 7a00 	vstr	s15, [r3]
    internal::evaluator<MatrixType> matrixEval(matrix);
 800d7d0:	f107 030c 	add.w	r3, r7, #12
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	f7fb fe1b 	bl	8009410 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
  }
 800d7da:	bf00      	nop
 800d7dc:	3710      	adds	r7, #16
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	ecbd 8b02 	vpop	{d8}
 800d7e4:	bd80      	pop	{r7, pc}

0800d7e6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 800d7e6:	b580      	push	{r7, lr}
 800d7e8:	b082      	sub	sp, #8
 800d7ea:	af00      	add	r7, sp, #0
 800d7ec:	6078      	str	r0, [r7, #4]
 800d7ee:	6878      	ldr	r0, [r7, #4]
 800d7f0:	f7f8 fbe9 	bl	8005fc6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800d7f4:	4603      	mov	r3, r0
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	f7f8 fc23 	bl	8006042 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800d7fc:	4603      	mov	r3, r0
 800d7fe:	4618      	mov	r0, r3
 800d800:	3708      	adds	r7, #8
 800d802:	46bd      	mov	sp, r7
 800d804:	bd80      	pop	{r7, pc}

0800d806 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4sizeEv>:
  inline Index size() const EIGEN_NOEXCEPT { return rows() * cols(); }
 800d806:	b590      	push	{r4, r7, lr}
 800d808:	b083      	sub	sp, #12
 800d80a:	af00      	add	r7, sp, #0
 800d80c:	6078      	str	r0, [r7, #4]
 800d80e:	6878      	ldr	r0, [r7, #4]
 800d810:	f7ff ffe9 	bl	800d7e6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800d814:	4604      	mov	r4, r0
 800d816:	6878      	ldr	r0, [r7, #4]
 800d818:	f000 f807 	bl	800d82a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800d81c:	4603      	mov	r3, r0
 800d81e:	fb04 f303 	mul.w	r3, r4, r3
 800d822:	4618      	mov	r0, r3
 800d824:	370c      	adds	r7, #12
 800d826:	46bd      	mov	sp, r7
 800d828:	bd90      	pop	{r4, r7, pc}

0800d82a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800d82a:	b580      	push	{r7, lr}
 800d82c:	b082      	sub	sp, #8
 800d82e:	af00      	add	r7, sp, #0
 800d830:	6078      	str	r0, [r7, #4]
 800d832:	6878      	ldr	r0, [r7, #4]
 800d834:	f7f8 fbc7 	bl	8005fc6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800d838:	4603      	mov	r3, r0
 800d83a:	4618      	mov	r0, r3
 800d83c:	f7f8 fc0c 	bl	8006058 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800d840:	4603      	mov	r3, r0
 800d842:	4618      	mov	r0, r3
 800d844:	3708      	adds	r7, #8
 800d846:	46bd      	mov	sp, r7
 800d848:	bd80      	pop	{r7, pc}

0800d84a <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EEC1ERS4_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 800d84a:	b5b0      	push	{r4, r5, r7, lr}
 800d84c:	b084      	sub	sp, #16
 800d84e:	af00      	add	r7, sp, #0
 800d850:	60f8      	str	r0, [r7, #12]
 800d852:	60b9      	str	r1, [r7, #8]
 800d854:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800d856:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800d858:	68bb      	ldr	r3, [r7, #8]
 800d85a:	4618      	mov	r0, r3
 800d85c:	f7f9 fcd9 	bl	8007212 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4dataEv>
 800d860:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 800d862:	68b8      	ldr	r0, [r7, #8]
 800d864:	f000 fa35 	bl	800dcd2 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11innerStrideEv>
 800d868:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	fb02 f303 	mul.w	r3, r2, r3
 800d870:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800d872:	18e9      	adds	r1, r5, r3
 800d874:	2301      	movs	r3, #1
 800d876:	2201      	movs	r2, #1
 800d878:	4620      	mov	r0, r4
 800d87a:	f000 fbe9 	bl	800e050 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii>
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	68ba      	ldr	r2, [r7, #8]
 800d882:	609a      	str	r2, [r3, #8]
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	330c      	adds	r3, #12
 800d888:	6879      	ldr	r1, [r7, #4]
 800d88a:	4618      	mov	r0, r3
 800d88c:	f000 fa02 	bl	800dc94 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	3310      	adds	r3, #16
 800d894:	2100      	movs	r1, #0
 800d896:	4618      	mov	r0, r3
 800d898:	f000 fa70 	bl	800dd7c <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
      init();
 800d89c:	68f8      	ldr	r0, [r7, #12]
 800d89e:	f000 fc15 	bl	800e0cc <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EE4initEv>
    }
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	3710      	adds	r7, #16
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	bdb0      	pop	{r4, r5, r7, pc}

0800d8ac <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EEC1ERS4_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 800d8ac:	b5b0      	push	{r4, r5, r7, lr}
 800d8ae:	b084      	sub	sp, #16
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	60f8      	str	r0, [r7, #12]
 800d8b4:	60b9      	str	r1, [r7, #8]
 800d8b6:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800d8b8:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800d8ba:	68bb      	ldr	r3, [r7, #8]
 800d8bc:	4618      	mov	r0, r3
 800d8be:	f7fd fd27 	bl	800b310 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4dataEv>
 800d8c2:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 800d8c4:	68b8      	ldr	r0, [r7, #8]
 800d8c6:	f000 fc11 	bl	800e0ec <_ZNK5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EE11innerStrideEv>
 800d8ca:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	fb02 f303 	mul.w	r3, r2, r3
 800d8d2:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800d8d4:	18e9      	adds	r1, r5, r3
 800d8d6:	2301      	movs	r3, #1
 800d8d8:	2201      	movs	r2, #1
 800d8da:	4620      	mov	r0, r4
 800d8dc:	f000 fc1e 	bl	800e11c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii>
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	68ba      	ldr	r2, [r7, #8]
 800d8e4:	609a      	str	r2, [r3, #8]
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	330c      	adds	r3, #12
 800d8ea:	6879      	ldr	r1, [r7, #4]
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	f000 fa45 	bl	800dd7c <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	330d      	adds	r3, #13
 800d8f6:	6879      	ldr	r1, [r7, #4]
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	f000 fa3f 	bl	800dd7c <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
      init();
 800d8fe:	68f8      	ldr	r0, [r7, #12]
 800d900:	f000 fc4a 	bl	800e198 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EE4initEv>
    }
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	4618      	mov	r0, r3
 800d908:	3710      	adds	r7, #16
 800d90a:	46bd      	mov	sp, r7
 800d90c:	bdb0      	pop	{r4, r5, r7, pc}

0800d90e <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1ERKSI_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800d90e:	b580      	push	{r7, lr}
 800d910:	b082      	sub	sp, #8
 800d912:	af00      	add	r7, sp, #0
 800d914:	6078      	str	r0, [r7, #4]
 800d916:	6039      	str	r1, [r7, #0]
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	6839      	ldr	r1, [r7, #0]
 800d91c:	4618      	mov	r0, r3
 800d91e:	f000 fc4b 	bl	800e1b8 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	4618      	mov	r0, r3
 800d926:	3708      	adds	r7, #8
 800d928:	46bd      	mov	sp, r7
 800d92a:	bd80      	pop	{r7, pc}

0800d92c <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEELi0ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800d92c:	b580      	push	{r7, lr}
 800d92e:	b082      	sub	sp, #8
 800d930:	af00      	add	r7, sp, #0
 800d932:	6078      	str	r0, [r7, #4]
 800d934:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800d936:	2200      	movs	r2, #0
 800d938:	2100      	movs	r1, #0
 800d93a:	6878      	ldr	r0, [r7, #4]
 800d93c:	f000 fc4e 	bl	800e1dc <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 800d940:	eef0 7a40 	vmov.f32	s15, s0
  }
 800d944:	eeb0 0a67 	vmov.f32	s0, s15
 800d948:	3708      	adds	r7, #8
 800d94a:	46bd      	mov	sp, r7
 800d94c:	bd80      	pop	{r7, pc}

0800d94e <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800d94e:	b580      	push	{r7, lr}
 800d950:	b086      	sub	sp, #24
 800d952:	af00      	add	r7, sp, #0
 800d954:	60f8      	str	r0, [r7, #12]
 800d956:	60b9      	str	r1, [r7, #8]
 800d958:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800d95e:	687a      	ldr	r2, [r7, #4]
 800d960:	68b9      	ldr	r1, [r7, #8]
 800d962:	6978      	ldr	r0, [r7, #20]
 800d964:	f000 fc4d 	bl	800e202 <_ZN5Eigen8internal30assignment_from_xpr_op_productINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_9assign_opIffEENS0_13sub_assign_opIffEEE3runINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KS7_EES9_EEvRS3_RKT_RKT0_>
}
 800d968:	bf00      	nop
 800d96a:	3718      	adds	r7, #24
 800d96c:	46bd      	mov	sp, r7
 800d96e:	bd80      	pop	{r7, pc}

0800d970 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800d970:	b480      	push	{r7}
 800d972:	b083      	sub	sp, #12
 800d974:	af00      	add	r7, sp, #0
 800d976:	6078      	str	r0, [r7, #4]
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	4618      	mov	r0, r3
 800d97e:	370c      	adds	r7, #12
 800d980:	46bd      	mov	sp, r7
 800d982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d986:	4770      	bx	lr

0800d988 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800d988:	b480      	push	{r7}
 800d98a:	b083      	sub	sp, #12
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	3304      	adds	r3, #4
 800d994:	4618      	mov	r0, r3
 800d996:	370c      	adds	r7, #12
 800d998:	46bd      	mov	sp, r7
 800d99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99e:	4770      	bx	lr

0800d9a0 <_ZN5Eigen8internal13sub_assign_opIffEC1Ev>:
  * \brief Template functor for scalar/packet assignment with subtraction
  *
  */
template<typename DstScalar,typename SrcScalar> struct sub_assign_op {

  EIGEN_EMPTY_STRUCT_CTOR(sub_assign_op)
 800d9a0:	b480      	push	{r7}
 800d9a2:	b083      	sub	sp, #12
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	6078      	str	r0, [r7, #4]
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	370c      	adds	r7, #12
 800d9ae:	46bd      	mov	sp, r7
 800d9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b4:	4770      	bx	lr

0800d9b6 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800d9b6:	b580      	push	{r7, lr}
 800d9b8:	b086      	sub	sp, #24
 800d9ba:	af00      	add	r7, sp, #0
 800d9bc:	60f8      	str	r0, [r7, #12]
 800d9be:	60b9      	str	r1, [r7, #8]
 800d9c0:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800d9c6:	687a      	ldr	r2, [r7, #4]
 800d9c8:	68b9      	ldr	r1, [r7, #8]
 800d9ca:	6978      	ldr	r0, [r7, #20]
 800d9cc:	f000 fc44 	bl	800e258 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_>
}
 800d9d0:	bf00      	nop
 800d9d2:	3718      	adds	r7, #24
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	bd80      	pop	{r7, pc}

0800d9d8 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ENS_5DenseEEC1ERS3_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b084      	sub	sp, #16
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	60f8      	str	r0, [r7, #12]
 800d9e0:	60b9      	str	r1, [r7, #8]
 800d9e2:	607a      	str	r2, [r7, #4]
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	687a      	ldr	r2, [r7, #4]
 800d9e8:	68b9      	ldr	r1, [r7, #8]
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	f000 fc6e 	bl	800e2cc <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EEC1ERS4_i>
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	3710      	adds	r7, #16
 800d9f6:	46bd      	mov	sp, r7
 800d9f8:	bd80      	pop	{r7, pc}

0800d9fa <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800d9fa:	b480      	push	{r7}
 800d9fc:	b083      	sub	sp, #12
 800d9fe:	af00      	add	r7, sp, #0
 800da00:	6078      	str	r0, [r7, #4]
    }
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	4618      	mov	r0, r3
 800da06:	370c      	adds	r7, #12
 800da08:	46bd      	mov	sp, r7
 800da0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da0e:	4770      	bx	lr

0800da10 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 800da10:	b580      	push	{r7, lr}
 800da12:	b082      	sub	sp, #8
 800da14:	af00      	add	r7, sp, #0
 800da16:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	4618      	mov	r0, r3
 800da1c:	f7fd ffc5 	bl	800b9aa <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 800da20:	4603      	mov	r3, r0
    }
 800da22:	4618      	mov	r0, r3
 800da24:	3708      	adds	r7, #8
 800da26:	46bd      	mov	sp, r7
 800da28:	bd80      	pop	{r7, pc}

0800da2a <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1ERKSG_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 800da2a:	b580      	push	{r7, lr}
 800da2c:	b082      	sub	sp, #8
 800da2e:	af00      	add	r7, sp, #0
 800da30:	6078      	str	r0, [r7, #4]
 800da32:	6039      	str	r1, [r7, #0]
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	6839      	ldr	r1, [r7, #0]
 800da38:	4618      	mov	r0, r3
 800da3a:	f000 fc7d 	bl	800e338 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1ERKSG_>
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	4618      	mov	r0, r3
 800da42:	3708      	adds	r7, #8
 800da44:	46bd      	mov	sp, r7
 800da46:	bd80      	pop	{r7, pc}

0800da48 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800da48:	b480      	push	{r7}
 800da4a:	b083      	sub	sp, #12
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	4618      	mov	r0, r3
 800da54:	370c      	adds	r7, #12
 800da56:	46bd      	mov	sp, r7
 800da58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da5c:	4770      	bx	lr

0800da5e <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>:
 800da5e:	b480      	push	{r7}
 800da60:	b083      	sub	sp, #12
 800da62:	af00      	add	r7, sp, #0
 800da64:	6078      	str	r0, [r7, #4]
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	4618      	mov	r0, r3
 800da6a:	370c      	adds	r7, #12
 800da6c:	46bd      	mov	sp, r7
 800da6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da72:	4770      	bx	lr

0800da74 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi0ELi2EE3runISJ_EEfRKSK_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 800da74:	b580      	push	{r7, lr}
 800da76:	b084      	sub	sp, #16
 800da78:	af00      	add	r7, sp, #0
 800da7a:	60f8      	str	r0, [r7, #12]
 800da7c:	60b9      	str	r1, [r7, #8]
 800da7e:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 800da80:	68b9      	ldr	r1, [r7, #8]
 800da82:	68f8      	ldr	r0, [r7, #12]
 800da84:	f000 fc67 	bl	800e356 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi0ELi3EE3runERKSK_RKS3_>
 800da88:	eef0 7a40 	vmov.f32	s15, s0
  }
 800da8c:	eeb0 0a67 	vmov.f32	s0, s15
 800da90:	3710      	adds	r7, #16
 800da92:	46bd      	mov	sp, r7
 800da94:	bd80      	pop	{r7, pc}

0800da96 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800da96:	b580      	push	{r7, lr}
 800da98:	b082      	sub	sp, #8
 800da9a:	af00      	add	r7, sp, #0
 800da9c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800da9e:	2200      	movs	r2, #0
 800daa0:	2102      	movs	r1, #2
 800daa2:	6878      	ldr	r0, [r7, #4]
 800daa4:	f7fc fed0 	bl	800a848 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800daa8:	6878      	ldr	r0, [r7, #4]
 800daaa:	f000 fc78 	bl	800e39e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSL_>
  }
 800daae:	bf00      	nop
 800dab0:	3708      	adds	r7, #8
 800dab2:	46bd      	mov	sp, r7
 800dab4:	bd80      	pop	{r7, pc}

0800dab6 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1Ev>:
 800dab6:	b580      	push	{r7, lr}
 800dab8:	b082      	sub	sp, #8
 800daba:	af00      	add	r7, sp, #0
 800dabc:	6078      	str	r0, [r7, #4]
 800dabe:	6878      	ldr	r0, [r7, #4]
 800dac0:	f000 fc7d 	bl	800e3be <_ZN5Eigen9DenseBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1Ev>
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	4618      	mov	r0, r3
 800dac8:	3708      	adds	r7, #8
 800daca:	46bd      	mov	sp, r7
 800dacc:	bd80      	pop	{r7, pc}

0800dace <_ZN5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EEC1ERSE_i>:
    inline BlockImpl_dense(XprType& xpr, Index i)
 800dace:	b580      	push	{r7, lr}
 800dad0:	b084      	sub	sp, #16
 800dad2:	af00      	add	r7, sp, #0
 800dad4:	60f8      	str	r0, [r7, #12]
 800dad6:	60b9      	str	r1, [r7, #8]
 800dad8:	607a      	str	r2, [r7, #4]
        m_blockCols(BlockCols==1 ? 1 : xpr.cols())
 800dada:	68f8      	ldr	r0, [r7, #12]
 800dadc:	f7ff ffeb 	bl	800dab6 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1Ev>
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	68b9      	ldr	r1, [r7, #8]
 800dae4:	4618      	mov	r0, r3
 800dae6:	f7f6 fe79 	bl	80047dc <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERKSC_>
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	3310      	adds	r3, #16
 800daee:	6879      	ldr	r1, [r7, #4]
 800daf0:	4618      	mov	r0, r3
 800daf2:	f000 f8cf 	bl	800dc94 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	3314      	adds	r3, #20
 800dafa:	2100      	movs	r1, #0
 800dafc:	4618      	mov	r0, r3
 800dafe:	f000 f93d 	bl	800dd7c <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	3315      	adds	r3, #21
 800db06:	2101      	movs	r1, #1
 800db08:	4618      	mov	r0, r3
 800db0a:	f7f9 f84f 	bl	8006bac <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	3316      	adds	r3, #22
 800db12:	2101      	movs	r1, #1
 800db14:	4618      	mov	r0, r3
 800db16:	f7f9 f849 	bl	8006bac <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
    {}
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	4618      	mov	r0, r3
 800db1e:	3710      	adds	r7, #16
 800db20:	46bd      	mov	sp, r7
 800db22:	bd80      	pop	{r7, pc}

0800db24 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EEC1ERS6_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 800db24:	b5b0      	push	{r4, r5, r7, lr}
 800db26:	b084      	sub	sp, #16
 800db28:	af00      	add	r7, sp, #0
 800db2a:	60f8      	str	r0, [r7, #12]
 800db2c:	60b9      	str	r1, [r7, #8]
 800db2e:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800db30:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800db32:	68b8      	ldr	r0, [r7, #8]
 800db34:	f000 fc4e 	bl	800e3d4 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE4dataEv>
 800db38:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 800db3a:	68b8      	ldr	r0, [r7, #8]
 800db3c:	f000 fc5e 	bl	800e3fc <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE11innerStrideEv>
 800db40:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	fb02 f303 	mul.w	r3, r2, r3
 800db48:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800db4a:	18e9      	adds	r1, r5, r3
 800db4c:	2301      	movs	r3, #1
 800db4e:	2201      	movs	r2, #1
 800db50:	4620      	mov	r0, r4
 800db52:	f000 fc87 	bl	800e464 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii>
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	3308      	adds	r3, #8
 800db5a:	68ba      	ldr	r2, [r7, #8]
 800db5c:	6812      	ldr	r2, [r2, #0]
 800db5e:	601a      	str	r2, [r3, #0]
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	330c      	adds	r3, #12
 800db64:	2100      	movs	r1, #0
 800db66:	4618      	mov	r0, r3
 800db68:	f000 f908 	bl	800dd7c <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	3310      	adds	r3, #16
 800db70:	6879      	ldr	r1, [r7, #4]
 800db72:	4618      	mov	r0, r3
 800db74:	f000 f88e 	bl	800dc94 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
      init();
 800db78:	68f8      	ldr	r0, [r7, #12]
 800db7a:	f000 fcb1 	bl	800e4e0 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EE4initEv>
    }
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	4618      	mov	r0, r3
 800db82:	3710      	adds	r7, #16
 800db84:	46bd      	mov	sp, r7
 800db86:	bdb0      	pop	{r4, r5, r7, pc}

0800db88 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1ERKSP_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800db88:	b580      	push	{r7, lr}
 800db8a:	b082      	sub	sp, #8
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	6078      	str	r0, [r7, #4]
 800db90:	6039      	str	r1, [r7, #0]
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	6839      	ldr	r1, [r7, #0]
 800db96:	4618      	mov	r0, r3
 800db98:	f000 fcb2 	bl	800e500 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffEC1ERKSP_>
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	4618      	mov	r0, r3
 800dba0:	3708      	adds	r7, #8
 800dba2:	46bd      	mov	sp, r7
 800dba4:	bd80      	pop	{r7, pc}

0800dba6 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS5_IS7_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEELi1ELi1ELb0EEEEEKNS9_IKNS8_ISB_EELi1ELi1ELb0EEEEEEELi0ELi1EE3runERKST_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800dba6:	b580      	push	{r7, lr}
 800dba8:	b082      	sub	sp, #8
 800dbaa:	af00      	add	r7, sp, #0
 800dbac:	6078      	str	r0, [r7, #4]
 800dbae:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800dbb0:	2200      	movs	r2, #0
 800dbb2:	2100      	movs	r1, #0
 800dbb4:	6878      	ldr	r0, [r7, #4]
 800dbb6:	f000 fcb5 	bl	800e524 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE17coeffByOuterInnerEii>
 800dbba:	eef0 7a40 	vmov.f32	s15, s0
  }
 800dbbe:	eeb0 0a67 	vmov.f32	s0, s15
 800dbc2:	3708      	adds	r7, #8
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	bd80      	pop	{r7, pc}

0800dbc8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800dbc8:	b580      	push	{r7, lr}
 800dbca:	b082      	sub	sp, #8
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800dbd0:	2201      	movs	r2, #1
 800dbd2:	2102      	movs	r1, #2
 800dbd4:	6878      	ldr	r0, [r7, #4]
 800dbd6:	f7fc fb70 	bl	800a2ba <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800dbda:	6878      	ldr	r0, [r7, #4]
 800dbdc:	f000 fcb5 	bl	800e54a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSP_>
  }
 800dbe0:	bf00      	nop
 800dbe2:	3708      	adds	r7, #8
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	bd80      	pop	{r7, pc}

0800dbe8 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11innerStrideEv>:
    inline Index innerStride() const EIGEN_NOEXCEPT { return 1; }
 800dbe8:	b480      	push	{r7}
 800dbea:	b083      	sub	sp, #12
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
 800dbf0:	2301      	movs	r3, #1
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	370c      	adds	r7, #12
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbfc:	4770      	bx	lr

0800dbfe <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>:
 800dbfe:	b580      	push	{r7, lr}
 800dc00:	b082      	sub	sp, #8
 800dc02:	af00      	add	r7, sp, #0
 800dc04:	6078      	str	r0, [r7, #4]
 800dc06:	6878      	ldr	r0, [r7, #4]
 800dc08:	f000 fcaf 	bl	800e56a <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	4618      	mov	r0, r3
 800dc10:	3708      	adds	r7, #8
 800dc12:	46bd      	mov	sp, r7
 800dc14:	bd80      	pop	{r7, pc}
	...

0800dc18 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii>:
      checkSanity<Derived>();
    }

    /** \internal Constructor for dynamically sized matrices */
    EIGEN_DEVICE_FUNC
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	b084      	sub	sp, #16
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	60f8      	str	r0, [r7, #12]
 800dc20:	60b9      	str	r1, [r7, #8]
 800dc22:	607a      	str	r2, [r7, #4]
 800dc24:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 800dc26:	68f8      	ldr	r0, [r7, #12]
 800dc28:	f7ff ffe9 	bl	800dbfe <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	68ba      	ldr	r2, [r7, #8]
 800dc30:	601a      	str	r2, [r3, #0]
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	3304      	adds	r3, #4
 800dc36:	6879      	ldr	r1, [r7, #4]
 800dc38:	4618      	mov	r0, r3
 800dc3a:	f7f8 ffb7 	bl	8006bac <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	3305      	adds	r3, #5
 800dc42:	6839      	ldr	r1, [r7, #0]
 800dc44:	4618      	mov	r0, r3
 800dc46:	f7f8 ff97 	bl	8006b78 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
    {
      eigen_assert( (dataPtr == 0)
 800dc4a:	68bb      	ldr	r3, [r7, #8]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d011      	beq.n	800dc74 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x5c>
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	db08      	blt.n	800dc68 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x50>
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	2b01      	cmp	r3, #1
 800dc5a:	d105      	bne.n	800dc68 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x50>
 800dc5c:	683b      	ldr	r3, [r7, #0]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	db02      	blt.n	800dc68 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x50>
 800dc62:	683b      	ldr	r3, [r7, #0]
 800dc64:	2b03      	cmp	r3, #3
 800dc66:	d005      	beq.n	800dc74 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x5c>
 800dc68:	4b07      	ldr	r3, [pc, #28]	; (800dc88 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x70>)
 800dc6a:	4a08      	ldr	r2, [pc, #32]	; (800dc8c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x74>)
 800dc6c:	21b0      	movs	r1, #176	; 0xb0
 800dc6e:	4808      	ldr	r0, [pc, #32]	; (800dc90 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x78>)
 800dc70:	f010 f910 	bl	801de94 <__assert_func>
              || (   rows >= 0 && (RowsAtCompileTime == Dynamic || RowsAtCompileTime == rows)
                  && cols >= 0 && (ColsAtCompileTime == Dynamic || ColsAtCompileTime == cols)));
      checkSanity<Derived>();
 800dc74:	2100      	movs	r1, #0
 800dc76:	68f8      	ldr	r0, [r7, #12]
 800dc78:	f000 fc82 	bl	800e580 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	4618      	mov	r0, r3
 800dc80:	3710      	adds	r7, #16
 800dc82:	46bd      	mov	sp, r7
 800dc84:	bd80      	pop	{r7, pc}
 800dc86:	bf00      	nop
 800dc88:	08026420 	.word	0x08026420
 800dc8c:	080264cc 	.word	0x080264cc
 800dc90:	080265d0 	.word	0x080265d0

0800dc94 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>:

template<typename T> class variable_if_dynamic<T, Dynamic>
{
    T m_value;
  public:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit variable_if_dynamic(T value = 0) EIGEN_NO_THROW : m_value(value) {}
 800dc94:	b480      	push	{r7}
 800dc96:	b083      	sub	sp, #12
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
 800dc9c:	6039      	str	r1, [r7, #0]
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	683a      	ldr	r2, [r7, #0]
 800dca2:	601a      	str	r2, [r3, #0]
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	4618      	mov	r0, r3
 800dca8:	370c      	adds	r7, #12
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb0:	4770      	bx	lr

0800dcb2 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE4initEv>:
    }
    #endif

  protected:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    void init()
 800dcb2:	b580      	push	{r7, lr}
 800dcb4:	b082      	sub	sp, #8
 800dcb6:	af00      	add	r7, sp, #0
 800dcb8:	6078      	str	r0, [r7, #4]
    {
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
                    ? m_xpr.outerStride()
                    : m_xpr.innerStride();
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	689b      	ldr	r3, [r3, #8]
                    ? m_xpr.outerStride()
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	f7ff ff92 	bl	800dbe8 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11innerStrideEv>
 800dcc4:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	615a      	str	r2, [r3, #20]
    }
 800dcca:	bf00      	nop
 800dccc:	3708      	adds	r7, #8
 800dcce:	46bd      	mov	sp, r7
 800dcd0:	bd80      	pop	{r7, pc}

0800dcd2 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11innerStrideEv>:
 800dcd2:	b480      	push	{r7}
 800dcd4:	b083      	sub	sp, #12
 800dcd6:	af00      	add	r7, sp, #0
 800dcd8:	6078      	str	r0, [r7, #4]
 800dcda:	2301      	movs	r3, #1
 800dcdc:	4618      	mov	r0, r3
 800dcde:	370c      	adds	r7, #12
 800dce0:	46bd      	mov	sp, r7
 800dce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce6:	4770      	bx	lr

0800dce8 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1Ev>:
 800dce8:	b580      	push	{r7, lr}
 800dcea:	b082      	sub	sp, #8
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	6078      	str	r0, [r7, #4]
 800dcf0:	6878      	ldr	r0, [r7, #4]
 800dcf2:	f000 fc50 	bl	800e596 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1Ev>
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	4618      	mov	r0, r3
 800dcfa:	3708      	adds	r7, #8
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	bd80      	pop	{r7, pc}

0800dd00 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b084      	sub	sp, #16
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	60f8      	str	r0, [r7, #12]
 800dd08:	60b9      	str	r1, [r7, #8]
 800dd0a:	607a      	str	r2, [r7, #4]
 800dd0c:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 800dd0e:	68f8      	ldr	r0, [r7, #12]
 800dd10:	f7ff ffea 	bl	800dce8 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1Ev>
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	68ba      	ldr	r2, [r7, #8]
 800dd18:	601a      	str	r2, [r3, #0]
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	3304      	adds	r3, #4
 800dd1e:	6879      	ldr	r1, [r7, #4]
 800dd20:	4618      	mov	r0, r3
 800dd22:	f7f8 ff29 	bl	8006b78 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	3305      	adds	r3, #5
 800dd2a:	6839      	ldr	r1, [r7, #0]
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	f7f8 ff3d 	bl	8006bac <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 800dd32:	68bb      	ldr	r3, [r7, #8]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d011      	beq.n	800dd5c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	db08      	blt.n	800dd50 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	2b03      	cmp	r3, #3
 800dd42:	d105      	bne.n	800dd50 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800dd44:	683b      	ldr	r3, [r7, #0]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	db02      	blt.n	800dd50 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800dd4a:	683b      	ldr	r3, [r7, #0]
 800dd4c:	2b01      	cmp	r3, #1
 800dd4e:	d005      	beq.n	800dd5c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 800dd50:	4b07      	ldr	r3, [pc, #28]	; (800dd70 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x70>)
 800dd52:	4a08      	ldr	r2, [pc, #32]	; (800dd74 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x74>)
 800dd54:	21b0      	movs	r1, #176	; 0xb0
 800dd56:	4808      	ldr	r0, [pc, #32]	; (800dd78 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x78>)
 800dd58:	f010 f89c 	bl	801de94 <__assert_func>
      checkSanity<Derived>();
 800dd5c:	2100      	movs	r1, #0
 800dd5e:	68f8      	ldr	r0, [r7, #12]
 800dd60:	f000 fc24 	bl	800e5ac <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	4618      	mov	r0, r3
 800dd68:	3710      	adds	r7, #16
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	bd80      	pop	{r7, pc}
 800dd6e:	bf00      	nop
 800dd70:	08026420 	.word	0x08026420
 800dd74:	08026624 	.word	0x08026624
 800dd78:	080265d0 	.word	0x080265d0

0800dd7c <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit variable_if_dynamic(T v) { EIGEN_ONLY_USED_FOR_DEBUG(v); eigen_assert(v == T(Value)); }
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	b082      	sub	sp, #8
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	6078      	str	r0, [r7, #4]
 800dd84:	6039      	str	r1, [r7, #0]
 800dd86:	683b      	ldr	r3, [r7, #0]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d005      	beq.n	800dd98 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei+0x1c>
 800dd8c:	4b05      	ldr	r3, [pc, #20]	; (800dda4 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei+0x28>)
 800dd8e:	4a06      	ldr	r2, [pc, #24]	; (800dda8 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei+0x2c>)
 800dd90:	2185      	movs	r1, #133	; 0x85
 800dd92:	4806      	ldr	r0, [pc, #24]	; (800ddac <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei+0x30>)
 800dd94:	f010 f87e 	bl	801de94 <__assert_func>
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	3708      	adds	r7, #8
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	bd80      	pop	{r7, pc}
 800dda2:	bf00      	nop
 800dda4:	08022238 	.word	0x08022238
 800dda8:	08026728 	.word	0x08026728
 800ddac:	080222b0 	.word	0x080222b0

0800ddb0 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EE4initEv>:
    void init()
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b082      	sub	sp, #8
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	689b      	ldr	r3, [r3, #8]
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	f7f9 faf9 	bl	80073b4 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>
 800ddc2:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	615a      	str	r2, [r3, #20]
    }
 800ddc8:	bf00      	nop
 800ddca:	3708      	adds	r7, #8
 800ddcc:	46bd      	mov	sp, r7
 800ddce:	bd80      	pop	{r7, pc}

0800ddd0 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 800ddd0:	b580      	push	{r7, lr}
 800ddd2:	b082      	sub	sp, #8
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	6078      	str	r0, [r7, #4]
 800ddd8:	6039      	str	r1, [r7, #0]
 800ddda:	6878      	ldr	r0, [r7, #4]
 800dddc:	f000 fbf1 	bl	800e5c2 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1Ev>
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	6839      	ldr	r1, [r7, #0]
 800dde4:	4618      	mov	r0, r3
 800dde6:	f000 fbf7 	bl	800e5d8 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>
  }
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	4618      	mov	r0, r3
 800ddee:	3708      	adds	r7, #8
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	bd80      	pop	{r7, pc}

0800ddf4 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi0ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800ddf4:	b580      	push	{r7, lr}
 800ddf6:	b082      	sub	sp, #8
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	6078      	str	r0, [r7, #4]
 800ddfc:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800ddfe:	2200      	movs	r2, #0
 800de00:	2100      	movs	r1, #0
 800de02:	6878      	ldr	r0, [r7, #4]
 800de04:	f000 fc10 	bl	800e628 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 800de08:	eef0 7a40 	vmov.f32	s15, s0
  }
 800de0c:	eeb0 0a67 	vmov.f32	s0, s15
 800de10:	3708      	adds	r7, #8
 800de12:	46bd      	mov	sp, r7
 800de14:	bd80      	pop	{r7, pc}

0800de16 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi1ELi2EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 800de16:	b580      	push	{r7, lr}
 800de18:	b084      	sub	sp, #16
 800de1a:	af00      	add	r7, sp, #0
 800de1c:	6078      	str	r0, [r7, #4]
 800de1e:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800de20:	6839      	ldr	r1, [r7, #0]
 800de22:	6878      	ldr	r0, [r7, #4]
 800de24:	f000 fc13 	bl	800e64e <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi1ELi1EE3runERKSM_RKS3_>
 800de28:	eef0 7a40 	vmov.f32	s15, s0
 800de2c:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 800de30:	6839      	ldr	r1, [r7, #0]
 800de32:	6878      	ldr	r0, [r7, #4]
 800de34:	f000 fc1c 	bl	800e670 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi2ELi1EE3runERKSM_RKS3_>
 800de38:	eef0 7a40 	vmov.f32	s15, s0
 800de3c:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800de40:	f107 020c 	add.w	r2, r7, #12
 800de44:	f107 0308 	add.w	r3, r7, #8
 800de48:	4619      	mov	r1, r3
 800de4a:	6838      	ldr	r0, [r7, #0]
 800de4c:	f7fb fa99 	bl	8009382 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 800de50:	eef0 7a40 	vmov.f32	s15, s0
  }
 800de54:	eeb0 0a67 	vmov.f32	s0, s15
 800de58:	3710      	adds	r7, #16
 800de5a:	46bd      	mov	sp, r7
 800de5c:	bd80      	pop	{r7, pc}

0800de5e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_7ProductIS2_S2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 800de5e:	b5b0      	push	{r4, r5, r7, lr}
 800de60:	b084      	sub	sp, #16
 800de62:	af00      	add	r7, sp, #0
 800de64:	6078      	str	r0, [r7, #4]
 800de66:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 800de68:	6878      	ldr	r0, [r7, #4]
 800de6a:	f7f7 fdcd 	bl	8005a08 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800de6e:	4604      	mov	r4, r0
 800de70:	6838      	ldr	r0, [r7, #0]
 800de72:	f7f7 fdfc 	bl	8005a6e <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEE7derivedEv>
 800de76:	4605      	mov	r5, r0
 800de78:	f107 030c 	add.w	r3, r7, #12
 800de7c:	4618      	mov	r0, r3
 800de7e:	f7f9 f920 	bl	80070c2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800de82:	f107 030c 	add.w	r3, r7, #12
 800de86:	461a      	mov	r2, r3
 800de88:	4629      	mov	r1, r5
 800de8a:	4620      	mov	r0, r4
 800de8c:	f000 fc01 	bl	800e692 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 800de90:	6878      	ldr	r0, [r7, #4]
 800de92:	f7f7 fdb9 	bl	8005a08 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800de96:	4603      	mov	r3, r0
    }
 800de98:	4618      	mov	r0, r3
 800de9a:	3710      	adds	r7, #16
 800de9c:	46bd      	mov	sp, r7
 800de9e:	bdb0      	pop	{r4, r5, r7, pc}

0800dea0 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 800dea0:	b480      	push	{r7}
 800dea2:	b083      	sub	sp, #12
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	6078      	str	r0, [r7, #4]
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	4618      	mov	r0, r3
 800deae:	370c      	adds	r7, #12
 800deb0:	46bd      	mov	sp, r7
 800deb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb6:	4770      	bx	lr

0800deb8 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800deb8:	b480      	push	{r7}
 800deba:	b083      	sub	sp, #12
 800debc:	af00      	add	r7, sp, #0
 800debe:	6078      	str	r0, [r7, #4]
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	4618      	mov	r0, r3
 800dec4:	370c      	adds	r7, #12
 800dec6:	46bd      	mov	sp, r7
 800dec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800decc:	4770      	bx	lr

0800dece <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEE8coeffRefEii>:
  Scalar& coeffRef(Index row, Index col)
 800dece:	b590      	push	{r4, r7, lr}
 800ded0:	b085      	sub	sp, #20
 800ded2:	af00      	add	r7, sp, #0
 800ded4:	60f8      	str	r0, [r7, #12]
 800ded6:	60b9      	str	r1, [r7, #8]
 800ded8:	607a      	str	r2, [r7, #4]
      return const_cast<Scalar*>(m_d.data)[row * m_d.outerStride() + col];
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	681c      	ldr	r4, [r3, #0]
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	4618      	mov	r0, r3
 800dee2:	f7fb fa08 	bl	80092f6 <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EE11outerStrideEv>
 800dee6:	4602      	mov	r2, r0
 800dee8:	68bb      	ldr	r3, [r7, #8]
 800deea:	fb03 f202 	mul.w	r2, r3, r2
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	4413      	add	r3, r2
 800def2:	009b      	lsls	r3, r3, #2
 800def4:	4423      	add	r3, r4
  }
 800def6:	4618      	mov	r0, r3
 800def8:	3714      	adds	r7, #20
 800defa:	46bd      	mov	sp, r7
 800defc:	bd90      	pop	{r4, r7, pc}

0800defe <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEELi3ENS_10DenseShapeES9_ffE5coeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const CoeffReturnType coeff(Index row, Index col) const
 800defe:	b580      	push	{r7, lr}
 800df00:	b0a4      	sub	sp, #144	; 0x90
 800df02:	af00      	add	r7, sp, #0
 800df04:	60f8      	str	r0, [r7, #12]
 800df06:	60b9      	str	r1, [r7, #8]
 800df08:	607a      	str	r2, [r7, #4]
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 800df0a:	68f9      	ldr	r1, [r7, #12]
 800df0c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800df10:	68ba      	ldr	r2, [r7, #8]
 800df12:	4618      	mov	r0, r3
 800df14:	f7fd f844 	bl	800afa0 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3rowEi>
 800df18:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800df1c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800df20:	4611      	mov	r1, r2
 800df22:	4618      	mov	r0, r3
 800df24:	f7fd f84f 	bl	800afc6 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE9transposeEv>
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800df2e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800df32:	687a      	ldr	r2, [r7, #4]
 800df34:	4618      	mov	r0, r3
 800df36:	f000 fbbd 	bl	800e6b4 <_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE3colEi>
 800df3a:	f107 0314 	add.w	r3, r7, #20
 800df3e:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800df42:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800df46:	4618      	mov	r0, r3
 800df48:	f000 fbc7 	bl	800e6da <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IKNS1_IS4_EELi3ELi1ELb0EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>
 800df4c:	f107 0314 	add.w	r3, r7, #20
 800df50:	4618      	mov	r0, r3
 800df52:	f000 fbf0 	bl	800e736 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE3sumEv>
 800df56:	eef0 7a40 	vmov.f32	s15, s0
  }
 800df5a:	eeb0 0a67 	vmov.f32	s0, s15
 800df5e:	3790      	adds	r7, #144	; 0x90
 800df60:	46bd      	mov	sp, r7
 800df62:	bd80      	pop	{r7, pc}

0800df64 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800df64:	b580      	push	{r7, lr}
 800df66:	b082      	sub	sp, #8
 800df68:	af00      	add	r7, sp, #0
 800df6a:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800df6c:	2200      	movs	r2, #0
 800df6e:	2101      	movs	r1, #1
 800df70:	6878      	ldr	r0, [r7, #4]
 800df72:	f7fe fe58 	bl	800cc26 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800df76:	6878      	ldr	r0, [r7, #4]
 800df78:	f000 fbf8 	bl	800e76c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSG_>
  }
 800df7c:	bf00      	nop
 800df7e:	3708      	adds	r7, #8
 800df80:	46bd      	mov	sp, r7
 800df82:	bd80      	pop	{r7, pc}

0800df84 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE11lazyProductINS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS9_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 800df84:	b590      	push	{r4, r7, lr}
 800df86:	b085      	sub	sp, #20
 800df88:	af00      	add	r7, sp, #0
 800df8a:	60f8      	str	r0, [r7, #12]
 800df8c:	60b9      	str	r1, [r7, #8]
 800df8e:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 800df90:	68b8      	ldr	r0, [r7, #8]
 800df92:	f7f7 fc70 	bl	8005876 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800df96:	4604      	mov	r4, r0
 800df98:	6878      	ldr	r0, [r7, #4]
 800df9a:	f7f7 fed1 	bl	8005d40 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 800df9e:	4603      	mov	r3, r0
 800dfa0:	461a      	mov	r2, r3
 800dfa2:	4621      	mov	r1, r4
 800dfa4:	68f8      	ldr	r0, [r7, #12]
 800dfa6:	f000 fc15 	bl	800e7d4 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEC1ERKS2_RKS5_>
}
 800dfaa:	68f8      	ldr	r0, [r7, #12]
 800dfac:	3714      	adds	r7, #20
 800dfae:	46bd      	mov	sp, r7
 800dfb0:	bd90      	pop	{r4, r7, pc}

0800dfb2 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800dfb2:	b580      	push	{r7, lr}
 800dfb4:	b086      	sub	sp, #24
 800dfb6:	af00      	add	r7, sp, #0
 800dfb8:	60f8      	str	r0, [r7, #12]
 800dfba:	60b9      	str	r1, [r7, #8]
 800dfbc:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800dfc2:	687a      	ldr	r2, [r7, #4]
 800dfc4:	68b9      	ldr	r1, [r7, #8]
 800dfc6:	6978      	ldr	r0, [r7, #20]
 800dfc8:	f000 fc32 	bl	800e830 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_>
}
 800dfcc:	bf00      	nop
 800dfce:	3718      	adds	r7, #24
 800dfd0:	46bd      	mov	sp, r7
 800dfd2:	bd80      	pop	{r7, pc}

0800dfd4 <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE6resizeEiii>:
    EIGEN_DEVICE_FUNC void resize(Index,Index,Index) {}
 800dfd4:	b480      	push	{r7}
 800dfd6:	b085      	sub	sp, #20
 800dfd8:	af00      	add	r7, sp, #0
 800dfda:	60f8      	str	r0, [r7, #12]
 800dfdc:	60b9      	str	r1, [r7, #8]
 800dfde:	607a      	str	r2, [r7, #4]
 800dfe0:	603b      	str	r3, [r7, #0]
 800dfe2:	bf00      	nop
 800dfe4:	3714      	adds	r7, #20
 800dfe6:	46bd      	mov	sp, r7
 800dfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfec:	4770      	bx	lr

0800dfee <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS9_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS2_EESI_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 800dfee:	b580      	push	{r7, lr}
 800dff0:	b082      	sub	sp, #8
 800dff2:	af00      	add	r7, sp, #0
 800dff4:	6078      	str	r0, [r7, #4]
 800dff6:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 800dff8:	6839      	ldr	r1, [r7, #0]
 800dffa:	6878      	ldr	r0, [r7, #4]
 800dffc:	f000 fc2b 	bl	800e856 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS9_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS2_EEEERS2_RKNS_9DenseBaseIT_EE>
    }
 800e000:	bf00      	nop
 800e002:	3708      	adds	r7, #8
 800e004:	46bd      	mov	sp, r7
 800e006:	bd80      	pop	{r7, pc}

0800e008 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800e008:	b590      	push	{r4, r7, lr}
 800e00a:	b085      	sub	sp, #20
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	60f8      	str	r0, [r7, #12]
 800e010:	60b9      	str	r1, [r7, #8]
 800e012:	607a      	str	r2, [r7, #4]
      return m_d.data[row + col * m_d.outerStride()];
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	681c      	ldr	r4, [r3, #0]
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	4618      	mov	r0, r3
 800e01c:	f7f9 f846 	bl	80070ac <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EE11outerStrideEv>
 800e020:	4602      	mov	r2, r0
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	fb03 f202 	mul.w	r2, r3, r2
 800e028:	68bb      	ldr	r3, [r7, #8]
 800e02a:	4413      	add	r3, r2
 800e02c:	009b      	lsls	r3, r3, #2
 800e02e:	4423      	add	r3, r4
  }
 800e030:	4618      	mov	r0, r3
 800e032:	3714      	adds	r7, #20
 800e034:	46bd      	mov	sp, r7
 800e036:	bd90      	pop	{r4, r7, pc}

0800e038 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1Ev>:
 800e038:	b580      	push	{r7, lr}
 800e03a:	b082      	sub	sp, #8
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	6078      	str	r0, [r7, #4]
 800e040:	6878      	ldr	r0, [r7, #4]
 800e042:	f000 fc29 	bl	800e898 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1Ev>
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	4618      	mov	r0, r3
 800e04a:	3708      	adds	r7, #8
 800e04c:	46bd      	mov	sp, r7
 800e04e:	bd80      	pop	{r7, pc}

0800e050 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 800e050:	b580      	push	{r7, lr}
 800e052:	b084      	sub	sp, #16
 800e054:	af00      	add	r7, sp, #0
 800e056:	60f8      	str	r0, [r7, #12]
 800e058:	60b9      	str	r1, [r7, #8]
 800e05a:	607a      	str	r2, [r7, #4]
 800e05c:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 800e05e:	68f8      	ldr	r0, [r7, #12]
 800e060:	f7ff ffea 	bl	800e038 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1Ev>
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	68ba      	ldr	r2, [r7, #8]
 800e068:	601a      	str	r2, [r3, #0]
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	3304      	adds	r3, #4
 800e06e:	6879      	ldr	r1, [r7, #4]
 800e070:	4618      	mov	r0, r3
 800e072:	f7f8 fd9b 	bl	8006bac <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	3305      	adds	r3, #5
 800e07a:	6839      	ldr	r1, [r7, #0]
 800e07c:	4618      	mov	r0, r3
 800e07e:	f7f8 fd95 	bl	8006bac <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 800e082:	68bb      	ldr	r3, [r7, #8]
 800e084:	2b00      	cmp	r3, #0
 800e086:	d011      	beq.n	800e0ac <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	db08      	blt.n	800e0a0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	2b01      	cmp	r3, #1
 800e092:	d105      	bne.n	800e0a0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 800e094:	683b      	ldr	r3, [r7, #0]
 800e096:	2b00      	cmp	r3, #0
 800e098:	db02      	blt.n	800e0a0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 800e09a:	683b      	ldr	r3, [r7, #0]
 800e09c:	2b01      	cmp	r3, #1
 800e09e:	d005      	beq.n	800e0ac <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 800e0a0:	4b07      	ldr	r3, [pc, #28]	; (800e0c0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x70>)
 800e0a2:	4a08      	ldr	r2, [pc, #32]	; (800e0c4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x74>)
 800e0a4:	21b0      	movs	r1, #176	; 0xb0
 800e0a6:	4808      	ldr	r0, [pc, #32]	; (800e0c8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x78>)
 800e0a8:	f00f fef4 	bl	801de94 <__assert_func>
      checkSanity<Derived>();
 800e0ac:	2100      	movs	r1, #0
 800e0ae:	68f8      	ldr	r0, [r7, #12]
 800e0b0:	f000 fbfd 	bl	800e8ae <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	3710      	adds	r7, #16
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	bd80      	pop	{r7, pc}
 800e0be:	bf00      	nop
 800e0c0:	08026420 	.word	0x08026420
 800e0c4:	08026790 	.word	0x08026790
 800e0c8:	080265d0 	.word	0x080265d0

0800e0cc <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EE4initEv>:
    void init()
 800e0cc:	b580      	push	{r7, lr}
 800e0ce:	b082      	sub	sp, #8
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	689b      	ldr	r3, [r3, #8]
 800e0d8:	4618      	mov	r0, r3
 800e0da:	f7f9 f96b 	bl	80073b4 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>
 800e0de:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	615a      	str	r2, [r3, #20]
    }
 800e0e4:	bf00      	nop
 800e0e6:	3708      	adds	r7, #8
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	bd80      	pop	{r7, pc}

0800e0ec <_ZNK5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EE11innerStrideEv>:
 800e0ec:	b480      	push	{r7}
 800e0ee:	b083      	sub	sp, #12
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	6078      	str	r0, [r7, #4]
 800e0f4:	2301      	movs	r3, #1
 800e0f6:	4618      	mov	r0, r3
 800e0f8:	370c      	adds	r7, #12
 800e0fa:	46bd      	mov	sp, r7
 800e0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e100:	4770      	bx	lr

0800e102 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1Ev>:
 800e102:	b580      	push	{r7, lr}
 800e104:	b082      	sub	sp, #8
 800e106:	af00      	add	r7, sp, #0
 800e108:	6078      	str	r0, [r7, #4]
 800e10a:	6878      	ldr	r0, [r7, #4]
 800e10c:	f000 fbda 	bl	800e8c4 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1Ev>
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	4618      	mov	r0, r3
 800e114:	3708      	adds	r7, #8
 800e116:	46bd      	mov	sp, r7
 800e118:	bd80      	pop	{r7, pc}
	...

0800e11c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 800e11c:	b580      	push	{r7, lr}
 800e11e:	b084      	sub	sp, #16
 800e120:	af00      	add	r7, sp, #0
 800e122:	60f8      	str	r0, [r7, #12]
 800e124:	60b9      	str	r1, [r7, #8]
 800e126:	607a      	str	r2, [r7, #4]
 800e128:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 800e12a:	68f8      	ldr	r0, [r7, #12]
 800e12c:	f7ff ffe9 	bl	800e102 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1Ev>
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	68ba      	ldr	r2, [r7, #8]
 800e134:	601a      	str	r2, [r3, #0]
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	3304      	adds	r3, #4
 800e13a:	6879      	ldr	r1, [r7, #4]
 800e13c:	4618      	mov	r0, r3
 800e13e:	f7f8 fd35 	bl	8006bac <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	3305      	adds	r3, #5
 800e146:	6839      	ldr	r1, [r7, #0]
 800e148:	4618      	mov	r0, r3
 800e14a:	f7f8 fd2f 	bl	8006bac <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 800e14e:	68bb      	ldr	r3, [r7, #8]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d011      	beq.n	800e178 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	2b00      	cmp	r3, #0
 800e158:	db08      	blt.n	800e16c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	2b01      	cmp	r3, #1
 800e15e:	d105      	bne.n	800e16c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800e160:	683b      	ldr	r3, [r7, #0]
 800e162:	2b00      	cmp	r3, #0
 800e164:	db02      	blt.n	800e16c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800e166:	683b      	ldr	r3, [r7, #0]
 800e168:	2b01      	cmp	r3, #1
 800e16a:	d005      	beq.n	800e178 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 800e16c:	4b07      	ldr	r3, [pc, #28]	; (800e18c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x70>)
 800e16e:	4a08      	ldr	r2, [pc, #32]	; (800e190 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x74>)
 800e170:	21b0      	movs	r1, #176	; 0xb0
 800e172:	4808      	ldr	r0, [pc, #32]	; (800e194 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x78>)
 800e174:	f00f fe8e 	bl	801de94 <__assert_func>
      checkSanity<Derived>();
 800e178:	2100      	movs	r1, #0
 800e17a:	68f8      	ldr	r0, [r7, #12]
 800e17c:	f000 fbad 	bl	800e8da <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	4618      	mov	r0, r3
 800e184:	3710      	adds	r7, #16
 800e186:	46bd      	mov	sp, r7
 800e188:	bd80      	pop	{r7, pc}
 800e18a:	bf00      	nop
 800e18c:	08026420 	.word	0x08026420
 800e190:	08026894 	.word	0x08026894
 800e194:	080265d0 	.word	0x080265d0

0800e198 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EE4initEv>:
    void init()
 800e198:	b580      	push	{r7, lr}
 800e19a:	b082      	sub	sp, #8
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	689b      	ldr	r3, [r3, #8]
 800e1a4:	4618      	mov	r0, r3
 800e1a6:	f7fd fe3d 	bl	800be24 <_ZNK5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EE11outerStrideEv>
 800e1aa:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	611a      	str	r2, [r3, #16]
    }
 800e1b0:	bf00      	nop
 800e1b2:	3708      	adds	r7, #8
 800e1b4:	46bd      	mov	sp, r7
 800e1b6:	bd80      	pop	{r7, pc}

0800e1b8 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	b082      	sub	sp, #8
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	6078      	str	r0, [r7, #4]
 800e1c0:	6039      	str	r1, [r7, #0]
 800e1c2:	6878      	ldr	r0, [r7, #4]
 800e1c4:	f000 fb94 	bl	800e8f0 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1Ev>
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	6839      	ldr	r1, [r7, #0]
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	f000 fb9a 	bl	800e906 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>
  }
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	3708      	adds	r7, #8
 800e1d8:	46bd      	mov	sp, r7
 800e1da:	bd80      	pop	{r7, pc}

0800e1dc <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 800e1dc:	b580      	push	{r7, lr}
 800e1de:	b084      	sub	sp, #16
 800e1e0:	af00      	add	r7, sp, #0
 800e1e2:	60f8      	str	r0, [r7, #12]
 800e1e4:	60b9      	str	r1, [r7, #8]
 800e1e6:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	687a      	ldr	r2, [r7, #4]
 800e1ec:	68b9      	ldr	r1, [r7, #8]
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	f000 fbb1 	bl	800e956 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE5coeffEii>
 800e1f4:	eef0 7a40 	vmov.f32	s15, s0
 800e1f8:	eeb0 0a67 	vmov.f32	s0, s15
 800e1fc:	3710      	adds	r7, #16
 800e1fe:	46bd      	mov	sp, r7
 800e200:	bd80      	pop	{r7, pc}

0800e202 <_ZN5Eigen8internal30assignment_from_xpr_op_productINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_9assign_opIffEENS0_13sub_assign_opIffEEE3runINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KS7_EES9_EEvRS3_RKT_RKT0_>:
  void run(DstXprType &dst, const SrcXprType &src, const InitialFunc& /*func*/)
 800e202:	b590      	push	{r4, r7, lr}
 800e204:	b087      	sub	sp, #28
 800e206:	af00      	add	r7, sp, #0
 800e208:	60f8      	str	r0, [r7, #12]
 800e20a:	60b9      	str	r1, [r7, #8]
 800e20c:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, src.lhs(), Func1());
 800e20e:	68b8      	ldr	r0, [r7, #8]
 800e210:	f000 fbd1 	bl	800e9b6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE3lhsEv>
 800e214:	4604      	mov	r4, r0
 800e216:	f107 0310 	add.w	r3, r7, #16
 800e21a:	4618      	mov	r0, r3
 800e21c:	f7f8 ff51 	bl	80070c2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800e220:	f107 0310 	add.w	r3, r7, #16
 800e224:	461a      	mov	r2, r3
 800e226:	4621      	mov	r1, r4
 800e228:	68f8      	ldr	r0, [r7, #12]
 800e22a:	f000 fbd0 	bl	800e9ce <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
    call_assignment_no_alias(dst, src.rhs(), Func2());
 800e22e:	68b8      	ldr	r0, [r7, #8]
 800e230:	f000 fbde 	bl	800e9f0 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE3rhsEv>
 800e234:	4604      	mov	r4, r0
 800e236:	f107 0314 	add.w	r3, r7, #20
 800e23a:	4618      	mov	r0, r3
 800e23c:	f7ff fbb0 	bl	800d9a0 <_ZN5Eigen8internal13sub_assign_opIffEC1Ev>
 800e240:	f107 0314 	add.w	r3, r7, #20
 800e244:	461a      	mov	r2, r3
 800e246:	4621      	mov	r1, r4
 800e248:	68f8      	ldr	r0, [r7, #12]
 800e24a:	f000 fbdd 	bl	800ea08 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800e24e:	bf00      	nop
 800e250:	371c      	adds	r7, #28
 800e252:	46bd      	mov	sp, r7
 800e254:	bd90      	pop	{r4, r7, pc}
	...

0800e258 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::sub_assign_op<Scalar,Scalar> &)
 800e258:	b590      	push	{r4, r7, lr}
 800e25a:	b085      	sub	sp, #20
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	60f8      	str	r0, [r7, #12]
 800e260:	60b9      	str	r1, [r7, #8]
 800e262:	607a      	str	r2, [r7, #4]
    eigen_assert(dst.rows() == src.rows() && dst.cols() == src.cols());
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	4618      	mov	r0, r3
 800e268:	f7f6 fefb 	bl	8005062 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800e26c:	4604      	mov	r4, r0
 800e26e:	68b8      	ldr	r0, [r7, #8]
 800e270:	f7f8 fa95 	bl	800679e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE4rowsEv>
 800e274:	4603      	mov	r3, r0
 800e276:	429c      	cmp	r4, r3
 800e278:	d10a      	bne.n	800e290 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x38>
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	4618      	mov	r0, r3
 800e27e:	f7f6 fee5 	bl	800504c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800e282:	4604      	mov	r4, r0
 800e284:	68b8      	ldr	r0, [r7, #8]
 800e286:	f7f8 fa98 	bl	80067ba <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE4colsEv>
 800e28a:	4603      	mov	r3, r0
 800e28c:	429c      	cmp	r4, r3
 800e28e:	d005      	beq.n	800e29c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x44>
 800e290:	4b0b      	ldr	r3, [pc, #44]	; (800e2c0 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x68>)
 800e292:	4a0c      	ldr	r2, [pc, #48]	; (800e2c4 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x6c>)
 800e294:	21b0      	movs	r1, #176	; 0xb0
 800e296:	480c      	ldr	r0, [pc, #48]	; (800e2c8 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x70>)
 800e298:	f00f fdfc 	bl	801de94 <__assert_func>
    generic_product_impl<Lhs, Rhs>::subTo(dst, src.lhs(), src.rhs());
 800e29c:	68b8      	ldr	r0, [r7, #8]
 800e29e:	f000 fbc4 	bl	800ea2a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE3lhsEv>
 800e2a2:	4604      	mov	r4, r0
 800e2a4:	68b8      	ldr	r0, [r7, #8]
 800e2a6:	f000 fbcc 	bl	800ea42 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE3rhsEv>
 800e2aa:	4603      	mov	r3, r0
 800e2ac:	461a      	mov	r2, r3
 800e2ae:	4621      	mov	r1, r4
 800e2b0:	68f8      	ldr	r0, [r7, #12]
 800e2b2:	f000 fbd2 	bl	800ea5a <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEENS_10DenseShapeES5_Li3EE5subToINS2_IfLi3ELi3ELi0ELi3ELi3EEEEEvRT_RKS3_RKS4_>
  }
 800e2b6:	bf00      	nop
 800e2b8:	3714      	adds	r7, #20
 800e2ba:	46bd      	mov	sp, r7
 800e2bc:	bd90      	pop	{r4, r7, pc}
 800e2be:	bf00      	nop
 800e2c0:	08022a90 	.word	0x08022a90
 800e2c4:	08026998 	.word	0x08026998
 800e2c8:	08022f88 	.word	0x08022f88

0800e2cc <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EEC1ERS4_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 800e2cc:	b5b0      	push	{r4, r5, r7, lr}
 800e2ce:	b084      	sub	sp, #16
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	60f8      	str	r0, [r7, #12]
 800e2d4:	60b9      	str	r1, [r7, #8]
 800e2d6:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800e2d8:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800e2da:	68bb      	ldr	r3, [r7, #8]
 800e2dc:	4618      	mov	r0, r3
 800e2de:	f7f9 fff9 	bl	80082d4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4dataEv>
 800e2e2:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 800e2e4:	68b8      	ldr	r0, [r7, #8]
 800e2e6:	f7fa fa2f 	bl	8008748 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>
 800e2ea:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	fb02 f303 	mul.w	r3, r2, r3
 800e2f2:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800e2f4:	441d      	add	r5, r3
 800e2f6:	68bb      	ldr	r3, [r7, #8]
 800e2f8:	4618      	mov	r0, r3
 800e2fa:	f7f6 feb2 	bl	8005062 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800e2fe:	4602      	mov	r2, r0
 800e300:	2301      	movs	r3, #1
 800e302:	4629      	mov	r1, r5
 800e304:	4620      	mov	r0, r4
 800e306:	f000 fbd3 	bl	800eab0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii>
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	68ba      	ldr	r2, [r7, #8]
 800e30e:	609a      	str	r2, [r3, #8]
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	330c      	adds	r3, #12
 800e314:	2100      	movs	r1, #0
 800e316:	4618      	mov	r0, r3
 800e318:	f7ff fcbc 	bl	800dc94 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	3310      	adds	r3, #16
 800e320:	6879      	ldr	r1, [r7, #4]
 800e322:	4618      	mov	r0, r3
 800e324:	f7ff fcb6 	bl	800dc94 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
      init();
 800e328:	68f8      	ldr	r0, [r7, #12]
 800e32a:	f000 fbff 	bl	800eb2c <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EE4initEv>
    }
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	4618      	mov	r0, r3
 800e332:	3710      	adds	r7, #16
 800e334:	46bd      	mov	sp, r7
 800e336:	bdb0      	pop	{r4, r5, r7, pc}

0800e338 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1ERKSG_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800e338:	b580      	push	{r7, lr}
 800e33a:	b082      	sub	sp, #8
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	6078      	str	r0, [r7, #4]
 800e340:	6039      	str	r1, [r7, #0]
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	6839      	ldr	r1, [r7, #0]
 800e346:	4618      	mov	r0, r3
 800e348:	f000 fc00 	bl	800eb4c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffEC1ERKSG_>
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	4618      	mov	r0, r3
 800e350:	3708      	adds	r7, #8
 800e352:	46bd      	mov	sp, r7
 800e354:	bd80      	pop	{r7, pc}

0800e356 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi0ELi3EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 800e356:	b580      	push	{r7, lr}
 800e358:	b084      	sub	sp, #16
 800e35a:	af00      	add	r7, sp, #0
 800e35c:	6078      	str	r0, [r7, #4]
 800e35e:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800e360:	6839      	ldr	r1, [r7, #0]
 800e362:	6878      	ldr	r0, [r7, #4]
 800e364:	f000 fc04 	bl	800eb70 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi0ELi1EE3runERKSK_RKS3_>
 800e368:	eef0 7a40 	vmov.f32	s15, s0
 800e36c:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 800e370:	6839      	ldr	r1, [r7, #0]
 800e372:	6878      	ldr	r0, [r7, #4]
 800e374:	f000 fc0d 	bl	800eb92 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi1ELi2EE3runERKSK_RKS3_>
 800e378:	eef0 7a40 	vmov.f32	s15, s0
 800e37c:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800e380:	f107 020c 	add.w	r2, r7, #12
 800e384:	f107 0308 	add.w	r3, r7, #8
 800e388:	4619      	mov	r1, r3
 800e38a:	6838      	ldr	r0, [r7, #0]
 800e38c:	f7fa fff9 	bl	8009382 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 800e390:	eef0 7a40 	vmov.f32	s15, s0
  }
 800e394:	eeb0 0a67 	vmov.f32	s0, s15
 800e398:	3710      	adds	r7, #16
 800e39a:	46bd      	mov	sp, r7
 800e39c:	bd80      	pop	{r7, pc}

0800e39e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800e39e:	b580      	push	{r7, lr}
 800e3a0:	b082      	sub	sp, #8
 800e3a2:	af00      	add	r7, sp, #0
 800e3a4:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800e3a6:	2201      	movs	r2, #1
 800e3a8:	2102      	movs	r1, #2
 800e3aa:	6878      	ldr	r0, [r7, #4]
 800e3ac:	f7fc fa4c 	bl	800a848 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800e3b0:	6878      	ldr	r0, [r7, #4]
 800e3b2:	f000 fc12 	bl	800ebda <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSL_>
  }
 800e3b6:	bf00      	nop
 800e3b8:	3708      	adds	r7, #8
 800e3ba:	46bd      	mov	sp, r7
 800e3bc:	bd80      	pop	{r7, pc}

0800e3be <_ZN5Eigen9DenseBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800e3be:	b480      	push	{r7}
 800e3c0:	b083      	sub	sp, #12
 800e3c2:	af00      	add	r7, sp, #0
 800e3c4:	6078      	str	r0, [r7, #4]
    }
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	370c      	adds	r7, #12
 800e3cc:	46bd      	mov	sp, r7
 800e3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d2:	4770      	bx	lr

0800e3d4 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE4dataEv>:
    const Scalar* data() const { return derived().nestedExpression().data(); }
 800e3d4:	b580      	push	{r7, lr}
 800e3d6:	b082      	sub	sp, #8
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	6078      	str	r0, [r7, #4]
 800e3dc:	6878      	ldr	r0, [r7, #4]
 800e3de:	f7f7 f9b5 	bl	800574c <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 800e3e2:	4603      	mov	r3, r0
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	f7fc fd77 	bl	800aed8 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE16nestedExpressionEv>
 800e3ea:	4603      	mov	r3, r0
 800e3ec:	4618      	mov	r0, r3
 800e3ee:	f7f8 ff10 	bl	8007212 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4dataEv>
 800e3f2:	4603      	mov	r3, r0
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	3708      	adds	r7, #8
 800e3f8:	46bd      	mov	sp, r7
 800e3fa:	bd80      	pop	{r7, pc}

0800e3fc <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE11innerStrideEv>:
    Index innerStride() const { return derived().nestedExpression().innerStride(); }
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b082      	sub	sp, #8
 800e400:	af00      	add	r7, sp, #0
 800e402:	6078      	str	r0, [r7, #4]
 800e404:	6878      	ldr	r0, [r7, #4]
 800e406:	f7f7 f9a1 	bl	800574c <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 800e40a:	4603      	mov	r3, r0
 800e40c:	4618      	mov	r0, r3
 800e40e:	f7fc fd63 	bl	800aed8 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE16nestedExpressionEv>
 800e412:	4603      	mov	r3, r0
 800e414:	4618      	mov	r0, r3
 800e416:	f7ff fc5c 	bl	800dcd2 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11innerStrideEv>
 800e41a:	4603      	mov	r3, r0
 800e41c:	4618      	mov	r0, r3
 800e41e:	3708      	adds	r7, #8
 800e420:	46bd      	mov	sp, r7
 800e422:	bd80      	pop	{r7, pc}

0800e424 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE11outerStrideEv>:
    Index outerStride() const { return derived().nestedExpression().outerStride(); }
 800e424:	b580      	push	{r7, lr}
 800e426:	b082      	sub	sp, #8
 800e428:	af00      	add	r7, sp, #0
 800e42a:	6078      	str	r0, [r7, #4]
 800e42c:	6878      	ldr	r0, [r7, #4]
 800e42e:	f7f7 f98d 	bl	800574c <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 800e432:	4603      	mov	r3, r0
 800e434:	4618      	mov	r0, r3
 800e436:	f7fc fd4f 	bl	800aed8 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE16nestedExpressionEv>
 800e43a:	4603      	mov	r3, r0
 800e43c:	4618      	mov	r0, r3
 800e43e:	f7f8 ffb9 	bl	80073b4 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>
 800e442:	4603      	mov	r3, r0
 800e444:	4618      	mov	r0, r3
 800e446:	3708      	adds	r7, #8
 800e448:	46bd      	mov	sp, r7
 800e44a:	bd80      	pop	{r7, pc}

0800e44c <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1Ev>:
 800e44c:	b580      	push	{r7, lr}
 800e44e:	b082      	sub	sp, #8
 800e450:	af00      	add	r7, sp, #0
 800e452:	6078      	str	r0, [r7, #4]
 800e454:	6878      	ldr	r0, [r7, #4]
 800e456:	f000 fbd0 	bl	800ebfa <_ZN5Eigen9DenseBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1Ev>
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	4618      	mov	r0, r3
 800e45e:	3708      	adds	r7, #8
 800e460:	46bd      	mov	sp, r7
 800e462:	bd80      	pop	{r7, pc}

0800e464 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 800e464:	b580      	push	{r7, lr}
 800e466:	b084      	sub	sp, #16
 800e468:	af00      	add	r7, sp, #0
 800e46a:	60f8      	str	r0, [r7, #12]
 800e46c:	60b9      	str	r1, [r7, #8]
 800e46e:	607a      	str	r2, [r7, #4]
 800e470:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 800e472:	68f8      	ldr	r0, [r7, #12]
 800e474:	f7ff ffea 	bl	800e44c <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1Ev>
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	68ba      	ldr	r2, [r7, #8]
 800e47c:	601a      	str	r2, [r3, #0]
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	3304      	adds	r3, #4
 800e482:	6879      	ldr	r1, [r7, #4]
 800e484:	4618      	mov	r0, r3
 800e486:	f7f8 fb91 	bl	8006bac <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	3305      	adds	r3, #5
 800e48e:	6839      	ldr	r1, [r7, #0]
 800e490:	4618      	mov	r0, r3
 800e492:	f7f8 fb8b 	bl	8006bac <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 800e496:	68bb      	ldr	r3, [r7, #8]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d011      	beq.n	800e4c0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	db08      	blt.n	800e4b4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	2b01      	cmp	r3, #1
 800e4a6:	d105      	bne.n	800e4b4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 800e4a8:	683b      	ldr	r3, [r7, #0]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	db02      	blt.n	800e4b4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 800e4ae:	683b      	ldr	r3, [r7, #0]
 800e4b0:	2b01      	cmp	r3, #1
 800e4b2:	d005      	beq.n	800e4c0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 800e4b4:	4b07      	ldr	r3, [pc, #28]	; (800e4d4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x70>)
 800e4b6:	4a08      	ldr	r2, [pc, #32]	; (800e4d8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x74>)
 800e4b8:	21b0      	movs	r1, #176	; 0xb0
 800e4ba:	4808      	ldr	r0, [pc, #32]	; (800e4dc <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x78>)
 800e4bc:	f00f fcea 	bl	801de94 <__assert_func>
      checkSanity<Derived>();
 800e4c0:	2100      	movs	r1, #0
 800e4c2:	68f8      	ldr	r0, [r7, #12]
 800e4c4:	f000 fba4 	bl	800ec10 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE11checkSanityIS7_EEvNS_8internal9enable_ifIXeqsrNSA_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	3710      	adds	r7, #16
 800e4ce:	46bd      	mov	sp, r7
 800e4d0:	bd80      	pop	{r7, pc}
 800e4d2:	bf00      	nop
 800e4d4:	08026420 	.word	0x08026420
 800e4d8:	08026d14 	.word	0x08026d14
 800e4dc:	080265d0 	.word	0x080265d0

0800e4e0 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EE4initEv>:
    void init()
 800e4e0:	b580      	push	{r7, lr}
 800e4e2:	b082      	sub	sp, #8
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	3308      	adds	r3, #8
 800e4ec:	4618      	mov	r0, r3
 800e4ee:	f7ff ff99 	bl	800e424 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE11outerStrideEv>
 800e4f2:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	615a      	str	r2, [r3, #20]
    }
 800e4f8:	bf00      	nop
 800e4fa:	3708      	adds	r7, #8
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	bd80      	pop	{r7, pc}

0800e500 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffEC1ERKSP_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 800e500:	b580      	push	{r7, lr}
 800e502:	b082      	sub	sp, #8
 800e504:	af00      	add	r7, sp, #0
 800e506:	6078      	str	r0, [r7, #4]
 800e508:	6039      	str	r1, [r7, #0]
 800e50a:	6878      	ldr	r0, [r7, #4]
 800e50c:	f000 fb8b 	bl	800ec26 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1Ev>
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	6839      	ldr	r1, [r7, #0]
 800e514:	4618      	mov	r0, r3
 800e516:	f000 fb91 	bl	800ec3c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE4DataC1ERKSP_>
  }
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	4618      	mov	r0, r3
 800e51e:	3708      	adds	r7, #8
 800e520:	46bd      	mov	sp, r7
 800e522:	bd80      	pop	{r7, pc}

0800e524 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 800e524:	b580      	push	{r7, lr}
 800e526:	b084      	sub	sp, #16
 800e528:	af00      	add	r7, sp, #0
 800e52a:	60f8      	str	r0, [r7, #12]
 800e52c:	60b9      	str	r1, [r7, #8]
 800e52e:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	687a      	ldr	r2, [r7, #4]
 800e534:	68b9      	ldr	r1, [r7, #8]
 800e536:	4618      	mov	r0, r3
 800e538:	f000 fba8 	bl	800ec8c <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE5coeffEii>
 800e53c:	eef0 7a40 	vmov.f32	s15, s0
 800e540:	eeb0 0a67 	vmov.f32	s0, s15
 800e544:	3710      	adds	r7, #16
 800e546:	46bd      	mov	sp, r7
 800e548:	bd80      	pop	{r7, pc}

0800e54a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800e54a:	b580      	push	{r7, lr}
 800e54c:	b082      	sub	sp, #8
 800e54e:	af00      	add	r7, sp, #0
 800e550:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800e552:	2202      	movs	r2, #2
 800e554:	2102      	movs	r1, #2
 800e556:	6878      	ldr	r0, [r7, #4]
 800e558:	f7fb feaf 	bl	800a2ba <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800e55c:	6878      	ldr	r0, [r7, #4]
 800e55e:	f000 fbc5 	bl	800ecec <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSP_>
  }
 800e562:	bf00      	nop
 800e564:	3708      	adds	r7, #8
 800e566:	46bd      	mov	sp, r7
 800e568:	bd80      	pop	{r7, pc}

0800e56a <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800e56a:	b480      	push	{r7}
 800e56c:	b083      	sub	sp, #12
 800e56e:	af00      	add	r7, sp, #0
 800e570:	6078      	str	r0, [r7, #4]
    }
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	4618      	mov	r0, r3
 800e576:	370c      	adds	r7, #12
 800e578:	46bd      	mov	sp, r7
 800e57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e57e:	4770      	bx	lr

0800e580 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
#endif
    }

    template<typename T>
    EIGEN_DEVICE_FUNC
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 800e580:	b480      	push	{r7}
 800e582:	b083      	sub	sp, #12
 800e584:	af00      	add	r7, sp, #0
 800e586:	6078      	str	r0, [r7, #4]
 800e588:	6039      	str	r1, [r7, #0]
    {}
 800e58a:	bf00      	nop
 800e58c:	370c      	adds	r7, #12
 800e58e:	46bd      	mov	sp, r7
 800e590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e594:	4770      	bx	lr

0800e596 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800e596:	b480      	push	{r7}
 800e598:	b083      	sub	sp, #12
 800e59a:	af00      	add	r7, sp, #0
 800e59c:	6078      	str	r0, [r7, #4]
    }
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	370c      	adds	r7, #12
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5aa:	4770      	bx	lr

0800e5ac <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 800e5ac:	b480      	push	{r7}
 800e5ae:	b083      	sub	sp, #12
 800e5b0:	af00      	add	r7, sp, #0
 800e5b2:	6078      	str	r0, [r7, #4]
 800e5b4:	6039      	str	r1, [r7, #0]
    {}
 800e5b6:	bf00      	nop
 800e5b8:	370c      	adds	r7, #12
 800e5ba:	46bd      	mov	sp, r7
 800e5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5c0:	4770      	bx	lr

0800e5c2 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800e5c2:	b480      	push	{r7}
 800e5c4:	b083      	sub	sp, #12
 800e5c6:	af00      	add	r7, sp, #0
 800e5c8:	6078      	str	r0, [r7, #4]
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	370c      	adds	r7, #12
 800e5d0:	46bd      	mov	sp, r7
 800e5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d6:	4770      	bx	lr

0800e5d8 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 800e5d8:	b590      	push	{r4, r7, lr}
 800e5da:	b083      	sub	sp, #12
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	6078      	str	r0, [r7, #4]
 800e5e0:	6039      	str	r1, [r7, #0]
 800e5e2:	687c      	ldr	r4, [r7, #4]
 800e5e4:	6838      	ldr	r0, [r7, #0]
 800e5e6:	f000 fb8b 	bl	800ed00 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE7functorEv>
 800e5ea:	4603      	mov	r3, r0
 800e5ec:	4619      	mov	r1, r3
 800e5ee:	4620      	mov	r0, r4
 800e5f0:	f7f7 f862 	bl	80056b8 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	1d1c      	adds	r4, r3, #4
 800e5f8:	6838      	ldr	r0, [r7, #0]
 800e5fa:	f000 fb8d 	bl	800ed18 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE3lhsEv>
 800e5fe:	4603      	mov	r3, r0
 800e600:	4619      	mov	r1, r3
 800e602:	4620      	mov	r0, r4
 800e604:	f000 fb9f 	bl	800ed46 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERSA_>
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	f103 040c 	add.w	r4, r3, #12
 800e60e:	6838      	ldr	r0, [r7, #0]
 800e610:	f000 fb8d 	bl	800ed2e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE3rhsEv>
 800e614:	4603      	mov	r3, r0
 800e616:	4619      	mov	r1, r3
 800e618:	4620      	mov	r0, r4
 800e61a:	f000 fba3 	bl	800ed64 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERS7_>
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	4618      	mov	r0, r3
 800e622:	370c      	adds	r7, #12
 800e624:	46bd      	mov	sp, r7
 800e626:	bd90      	pop	{r4, r7, pc}

0800e628 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 800e628:	b580      	push	{r7, lr}
 800e62a:	b084      	sub	sp, #16
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	60f8      	str	r0, [r7, #12]
 800e630:	60b9      	str	r1, [r7, #8]
 800e632:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	68ba      	ldr	r2, [r7, #8]
 800e638:	6879      	ldr	r1, [r7, #4]
 800e63a:	4618      	mov	r0, r3
 800e63c:	f000 fba1 	bl	800ed82 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE5coeffEii>
 800e640:	eef0 7a40 	vmov.f32	s15, s0
 800e644:	eeb0 0a67 	vmov.f32	s0, s15
 800e648:	3710      	adds	r7, #16
 800e64a:	46bd      	mov	sp, r7
 800e64c:	bd80      	pop	{r7, pc}

0800e64e <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi1ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800e64e:	b580      	push	{r7, lr}
 800e650:	b082      	sub	sp, #8
 800e652:	af00      	add	r7, sp, #0
 800e654:	6078      	str	r0, [r7, #4]
 800e656:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800e658:	2201      	movs	r2, #1
 800e65a:	2100      	movs	r1, #0
 800e65c:	6878      	ldr	r0, [r7, #4]
 800e65e:	f7ff ffe3 	bl	800e628 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 800e662:	eef0 7a40 	vmov.f32	s15, s0
  }
 800e666:	eeb0 0a67 	vmov.f32	s0, s15
 800e66a:	3708      	adds	r7, #8
 800e66c:	46bd      	mov	sp, r7
 800e66e:	bd80      	pop	{r7, pc}

0800e670 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi2ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800e670:	b580      	push	{r7, lr}
 800e672:	b082      	sub	sp, #8
 800e674:	af00      	add	r7, sp, #0
 800e676:	6078      	str	r0, [r7, #4]
 800e678:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800e67a:	2202      	movs	r2, #2
 800e67c:	2100      	movs	r1, #0
 800e67e:	6878      	ldr	r0, [r7, #4]
 800e680:	f7ff ffd2 	bl	800e628 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 800e684:	eef0 7a40 	vmov.f32	s15, s0
  }
 800e688:	eeb0 0a67 	vmov.f32	s0, s15
 800e68c:	3708      	adds	r7, #8
 800e68e:	46bd      	mov	sp, r7
 800e690:	bd80      	pop	{r7, pc}

0800e692 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800e692:	b580      	push	{r7, lr}
 800e694:	b086      	sub	sp, #24
 800e696:	af00      	add	r7, sp, #0
 800e698:	60f8      	str	r0, [r7, #12]
 800e69a:	60b9      	str	r1, [r7, #8]
 800e69c:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800e6a2:	687a      	ldr	r2, [r7, #4]
 800e6a4:	68b9      	ldr	r1, [r7, #8]
 800e6a6:	6978      	ldr	r0, [r7, #20]
 800e6a8:	f000 fb9b 	bl	800ede2 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_>
}
 800e6ac:	bf00      	nop
 800e6ae:	3718      	adds	r7, #24
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	bd80      	pop	{r7, pc}

0800e6b4 <_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE3colEi>:
ConstColXpr col(Index i) const
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b084      	sub	sp, #16
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	60f8      	str	r0, [r7, #12]
 800e6bc:	60b9      	str	r1, [r7, #8]
 800e6be:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 800e6c0:	68b8      	ldr	r0, [r7, #8]
 800e6c2:	f7f7 f9df 	bl	8005a84 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>
 800e6c6:	4603      	mov	r3, r0
 800e6c8:	687a      	ldr	r2, [r7, #4]
 800e6ca:	4619      	mov	r1, r3
 800e6cc:	68f8      	ldr	r0, [r7, #12]
 800e6ce:	f000 fbc3 	bl	800ee58 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEC1ERS5_i>
}
 800e6d2:	68f8      	ldr	r0, [r7, #12]
 800e6d4:	3710      	adds	r7, #16
 800e6d6:	46bd      	mov	sp, r7
 800e6d8:	bd80      	pop	{r7, pc}

0800e6da <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IKNS1_IS4_EELi3ELi1ELb0EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 800e6da:	b5b0      	push	{r4, r5, r7, lr}
 800e6dc:	b086      	sub	sp, #24
 800e6de:	af00      	add	r7, sp, #0
 800e6e0:	60f8      	str	r0, [r7, #12]
 800e6e2:	60b9      	str	r1, [r7, #8]
 800e6e4:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 800e6e6:	68b8      	ldr	r0, [r7, #8]
 800e6e8:	f7fd f924 	bl	800b934 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE7derivedEv>
 800e6ec:	4604      	mov	r4, r0
 800e6ee:	6878      	ldr	r0, [r7, #4]
 800e6f0:	f000 fbda 	bl	800eea8 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEE7derivedEv>
 800e6f4:	4605      	mov	r5, r0
 800e6f6:	f107 0314 	add.w	r3, r7, #20
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	f7f6 ff52 	bl	80055a4 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 800e700:	f107 0314 	add.w	r3, r7, #20
 800e704:	462a      	mov	r2, r5
 800e706:	4621      	mov	r1, r4
 800e708:	68f8      	ldr	r0, [r7, #12]
 800e70a:	f000 fc07 	bl	800ef1c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEEC1ERSC_RSG_RKS3_>
}
 800e70e:	68f8      	ldr	r0, [r7, #12]
 800e710:	3718      	adds	r7, #24
 800e712:	46bd      	mov	sp, r7
 800e714:	bdb0      	pop	{r4, r5, r7, pc}

0800e716 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 800e716:	b580      	push	{r7, lr}
 800e718:	b082      	sub	sp, #8
 800e71a:	af00      	add	r7, sp, #0
 800e71c:	6078      	str	r0, [r7, #4]
 800e71e:	6878      	ldr	r0, [r7, #4]
 800e720:	f000 fc5a 	bl	800efd8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE7derivedEv>
 800e724:	4603      	mov	r3, r0
 800e726:	4618      	mov	r0, r3
 800e728:	f000 fc61 	bl	800efee <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE4rowsEv>
 800e72c:	4603      	mov	r3, r0
 800e72e:	4618      	mov	r0, r3
 800e730:	3708      	adds	r7, #8
 800e732:	46bd      	mov	sp, r7
 800e734:	bd80      	pop	{r7, pc}

0800e736 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 800e736:	b590      	push	{r4, r7, lr}
 800e738:	b085      	sub	sp, #20
 800e73a:	af00      	add	r7, sp, #0
 800e73c:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 800e73e:	6878      	ldr	r0, [r7, #4]
 800e740:	f000 fc4a 	bl	800efd8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE7derivedEv>
 800e744:	4604      	mov	r4, r0
 800e746:	f107 030c 	add.w	r3, r7, #12
 800e74a:	4618      	mov	r0, r3
 800e74c:	f7f7 fa21 	bl	8005b92 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 800e750:	f107 030c 	add.w	r3, r7, #12
 800e754:	4619      	mov	r1, r3
 800e756:	4620      	mov	r0, r4
 800e758:	f000 fcc6 	bl	800f0e8 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 800e75c:	eef0 7a40 	vmov.f32	s15, s0
 800e760:	bf00      	nop
}
 800e762:	eeb0 0a67 	vmov.f32	s0, s15
 800e766:	3714      	adds	r7, #20
 800e768:	46bd      	mov	sp, r7
 800e76a:	bd90      	pop	{r4, r7, pc}

0800e76c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800e76c:	b580      	push	{r7, lr}
 800e76e:	b082      	sub	sp, #8
 800e770:	af00      	add	r7, sp, #0
 800e772:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800e774:	2201      	movs	r2, #1
 800e776:	2101      	movs	r1, #1
 800e778:	6878      	ldr	r0, [r7, #4]
 800e77a:	f7fe fa54 	bl	800cc26 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800e77e:	6878      	ldr	r0, [r7, #4]
 800e780:	f000 fcf8 	bl	800f174 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSG_>
  }
 800e784:	bf00      	nop
 800e786:	3708      	adds	r7, #8
 800e788:	46bd      	mov	sp, r7
 800e78a:	bd80      	pop	{r7, pc}

0800e78c <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1Ev>:
 800e78c:	b580      	push	{r7, lr}
 800e78e:	b082      	sub	sp, #8
 800e790:	af00      	add	r7, sp, #0
 800e792:	6078      	str	r0, [r7, #4]
 800e794:	6878      	ldr	r0, [r7, #4]
 800e796:	f000 fcfd 	bl	800f194 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1Ev>
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	4618      	mov	r0, r3
 800e79e:	3708      	adds	r7, #8
 800e7a0:	46bd      	mov	sp, r7
 800e7a2:	bd80      	pop	{r7, pc}

0800e7a4 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1ELi3EEC1Ev>:
class dense_product_base
 800e7a4:	b580      	push	{r7, lr}
 800e7a6:	b082      	sub	sp, #8
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	6078      	str	r0, [r7, #4]
 800e7ac:	6878      	ldr	r0, [r7, #4]
 800e7ae:	f7ff ffed 	bl	800e78c <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1Ev>
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	3708      	adds	r7, #8
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	bd80      	pop	{r7, pc}

0800e7bc <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 800e7bc:	b580      	push	{r7, lr}
 800e7be:	b082      	sub	sp, #8
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	6078      	str	r0, [r7, #4]
 800e7c4:	6878      	ldr	r0, [r7, #4]
 800e7c6:	f7ff ffed 	bl	800e7a4 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1ELi3EEC1Ev>
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	3708      	adds	r7, #8
 800e7d0:	46bd      	mov	sp, r7
 800e7d2:	bd80      	pop	{r7, pc}

0800e7d4 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEC1ERKS2_RKS5_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 800e7d4:	b590      	push	{r4, r7, lr}
 800e7d6:	b085      	sub	sp, #20
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	60f8      	str	r0, [r7, #12]
 800e7dc:	60b9      	str	r1, [r7, #8]
 800e7de:	607a      	str	r2, [r7, #4]
 800e7e0:	68f8      	ldr	r0, [r7, #12]
 800e7e2:	f7ff ffeb 	bl	800e7bc <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1ENS_5DenseEEC1Ev>
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	68ba      	ldr	r2, [r7, #8]
 800e7ea:	601a      	str	r2, [r3, #0]
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	3304      	adds	r3, #4
 800e7f0:	687a      	ldr	r2, [r7, #4]
 800e7f2:	6812      	ldr	r2, [r2, #0]
 800e7f4:	601a      	str	r2, [r3, #0]
      eigen_assert(lhs.cols() == rhs.rows()
 800e7f6:	68bb      	ldr	r3, [r7, #8]
 800e7f8:	4618      	mov	r0, r3
 800e7fa:	f7f6 fc27 	bl	800504c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800e7fe:	4604      	mov	r4, r0
 800e800:	6878      	ldr	r0, [r7, #4]
 800e802:	f7f7 facc 	bl	8005d9e <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 800e806:	4603      	mov	r3, r0
 800e808:	429c      	cmp	r4, r3
 800e80a:	d005      	beq.n	800e818 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEC1ERKS2_RKS5_+0x44>
 800e80c:	4b05      	ldr	r3, [pc, #20]	; (800e824 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEC1ERKS2_RKS5_+0x50>)
 800e80e:	4a06      	ldr	r2, [pc, #24]	; (800e828 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEC1ERKS2_RKS5_+0x54>)
 800e810:	2160      	movs	r1, #96	; 0x60
 800e812:	4806      	ldr	r0, [pc, #24]	; (800e82c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEC1ERKS2_RKS5_+0x58>)
 800e814:	f00f fb3e 	bl	801de94 <__assert_func>
 800e818:	bf00      	nop
    }
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	4618      	mov	r0, r3
 800e81e:	3714      	adds	r7, #20
 800e820:	46bd      	mov	sp, r7
 800e822:	bd90      	pop	{r4, r7, pc}
 800e824:	0801ffbc 	.word	0x0801ffbc
 800e828:	08026e2c 	.word	0x08026e2c
 800e82c:	0802030c 	.word	0x0802030c

0800e830 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 800e830:	b580      	push	{r7, lr}
 800e832:	b084      	sub	sp, #16
 800e834:	af00      	add	r7, sp, #0
 800e836:	60f8      	str	r0, [r7, #12]
 800e838:	60b9      	str	r1, [r7, #8]
 800e83a:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 800e83c:	68b9      	ldr	r1, [r7, #8]
 800e83e:	68f8      	ldr	r0, [r7, #12]
 800e840:	f000 fcb3 	bl	800f1aa <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 800e844:	687a      	ldr	r2, [r7, #4]
 800e846:	68b9      	ldr	r1, [r7, #8]
 800e848:	68f8      	ldr	r0, [r7, #12]
 800e84a:	f000 fd12 	bl	800f272 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800e84e:	bf00      	nop
 800e850:	3710      	adds	r7, #16
 800e852:	46bd      	mov	sp, r7
 800e854:	bd80      	pop	{r7, pc}

0800e856 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS9_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS2_EEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 800e856:	b5b0      	push	{r4, r5, r7, lr}
 800e858:	b084      	sub	sp, #16
 800e85a:	af00      	add	r7, sp, #0
 800e85c:	6078      	str	r0, [r7, #4]
 800e85e:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 800e860:	6878      	ldr	r0, [r7, #4]
 800e862:	f7fd fab8 	bl	800bdd6 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800e866:	4604      	mov	r4, r0
 800e868:	6838      	ldr	r0, [r7, #0]
 800e86a:	f7f7 fc41 	bl	80060f0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7derivedEv>
 800e86e:	4605      	mov	r5, r0
 800e870:	f107 030c 	add.w	r3, r7, #12
 800e874:	4618      	mov	r0, r3
 800e876:	f7f8 fc24 	bl	80070c2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800e87a:	f107 030c 	add.w	r3, r7, #12
 800e87e:	461a      	mov	r2, r3
 800e880:	4629      	mov	r1, r5
 800e882:	4620      	mov	r0, r4
 800e884:	f000 fd2d 	bl	800f2e2 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 800e888:	6878      	ldr	r0, [r7, #4]
 800e88a:	f7fd faa4 	bl	800bdd6 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800e88e:	4603      	mov	r3, r0
    }
 800e890:	4618      	mov	r0, r3
 800e892:	3710      	adds	r7, #16
 800e894:	46bd      	mov	sp, r7
 800e896:	bdb0      	pop	{r4, r5, r7, pc}

0800e898 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800e898:	b480      	push	{r7}
 800e89a:	b083      	sub	sp, #12
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	6078      	str	r0, [r7, #4]
    }
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	4618      	mov	r0, r3
 800e8a4:	370c      	adds	r7, #12
 800e8a6:	46bd      	mov	sp, r7
 800e8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ac:	4770      	bx	lr

0800e8ae <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 800e8ae:	b480      	push	{r7}
 800e8b0:	b083      	sub	sp, #12
 800e8b2:	af00      	add	r7, sp, #0
 800e8b4:	6078      	str	r0, [r7, #4]
 800e8b6:	6039      	str	r1, [r7, #0]
    {}
 800e8b8:	bf00      	nop
 800e8ba:	370c      	adds	r7, #12
 800e8bc:	46bd      	mov	sp, r7
 800e8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c2:	4770      	bx	lr

0800e8c4 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800e8c4:	b480      	push	{r7}
 800e8c6:	b083      	sub	sp, #12
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	6078      	str	r0, [r7, #4]
    }
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	370c      	adds	r7, #12
 800e8d2:	46bd      	mov	sp, r7
 800e8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d8:	4770      	bx	lr

0800e8da <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 800e8da:	b480      	push	{r7}
 800e8dc:	b083      	sub	sp, #12
 800e8de:	af00      	add	r7, sp, #0
 800e8e0:	6078      	str	r0, [r7, #4]
 800e8e2:	6039      	str	r1, [r7, #0]
    {}
 800e8e4:	bf00      	nop
 800e8e6:	370c      	adds	r7, #12
 800e8e8:	46bd      	mov	sp, r7
 800e8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ee:	4770      	bx	lr

0800e8f0 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800e8f0:	b480      	push	{r7}
 800e8f2:	b083      	sub	sp, #12
 800e8f4:	af00      	add	r7, sp, #0
 800e8f6:	6078      	str	r0, [r7, #4]
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	370c      	adds	r7, #12
 800e8fe:	46bd      	mov	sp, r7
 800e900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e904:	4770      	bx	lr

0800e906 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 800e906:	b590      	push	{r4, r7, lr}
 800e908:	b083      	sub	sp, #12
 800e90a:	af00      	add	r7, sp, #0
 800e90c:	6078      	str	r0, [r7, #4]
 800e90e:	6039      	str	r1, [r7, #0]
 800e910:	687c      	ldr	r4, [r7, #4]
 800e912:	6838      	ldr	r0, [r7, #0]
 800e914:	f000 fcf6 	bl	800f304 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE7functorEv>
 800e918:	4603      	mov	r3, r0
 800e91a:	4619      	mov	r1, r3
 800e91c:	4620      	mov	r0, r4
 800e91e:	f7f6 fecb 	bl	80056b8 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	1d1c      	adds	r4, r3, #4
 800e926:	6838      	ldr	r0, [r7, #0]
 800e928:	f000 fcf8 	bl	800f31c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE3lhsEv>
 800e92c:	4603      	mov	r3, r0
 800e92e:	4619      	mov	r1, r3
 800e930:	4620      	mov	r0, r4
 800e932:	f000 fd0a 	bl	800f34a <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1ERSA_>
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	f103 040c 	add.w	r4, r3, #12
 800e93c:	6838      	ldr	r0, [r7, #0]
 800e93e:	f000 fcf8 	bl	800f332 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE3rhsEv>
 800e942:	4603      	mov	r3, r0
 800e944:	4619      	mov	r1, r3
 800e946:	4620      	mov	r0, r4
 800e948:	f000 fd0e 	bl	800f368 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERS7_>
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	4618      	mov	r0, r3
 800e950:	370c      	adds	r7, #12
 800e952:	46bd      	mov	sp, r7
 800e954:	bd90      	pop	{r4, r7, pc}

0800e956 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800e956:	b590      	push	{r4, r7, lr}
 800e958:	b087      	sub	sp, #28
 800e95a:	af00      	add	r7, sp, #0
 800e95c:	60f8      	str	r0, [r7, #12]
 800e95e:	60b9      	str	r1, [r7, #8]
 800e960:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	4618      	mov	r0, r3
 800e966:	f000 fd0e 	bl	800f386 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>
 800e96a:	4604      	mov	r4, r0
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	3304      	adds	r3, #4
 800e970:	687a      	ldr	r2, [r7, #4]
 800e972:	68b9      	ldr	r1, [r7, #8]
 800e974:	4618      	mov	r0, r3
 800e976:	f000 fd11 	bl	800f39c <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEENS0_10IndexBasedEfE5coeffEii>
 800e97a:	eef0 7a40 	vmov.f32	s15, s0
 800e97e:	edc7 7a04 	vstr	s15, [r7, #16]
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	330c      	adds	r3, #12
 800e986:	687a      	ldr	r2, [r7, #4]
 800e988:	68b9      	ldr	r1, [r7, #8]
 800e98a:	4618      	mov	r0, r3
 800e98c:	f000 fd19 	bl	800f3c2 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_E5coeffEii>
 800e990:	eef0 7a40 	vmov.f32	s15, s0
 800e994:	edc7 7a05 	vstr	s15, [r7, #20]
 800e998:	f107 0214 	add.w	r2, r7, #20
 800e99c:	f107 0310 	add.w	r3, r7, #16
 800e9a0:	4619      	mov	r1, r3
 800e9a2:	4620      	mov	r0, r4
 800e9a4:	f000 fd2e 	bl	800f404 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 800e9a8:	eef0 7a40 	vmov.f32	s15, s0
  }
 800e9ac:	eeb0 0a67 	vmov.f32	s0, s15
 800e9b0:	371c      	adds	r7, #28
 800e9b2:	46bd      	mov	sp, r7
 800e9b4:	bd90      	pop	{r4, r7, pc}

0800e9b6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800e9b6:	b480      	push	{r7}
 800e9b8:	b083      	sub	sp, #12
 800e9ba:	af00      	add	r7, sp, #0
 800e9bc:	6078      	str	r0, [r7, #4]
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	4618      	mov	r0, r3
 800e9c4:	370c      	adds	r7, #12
 800e9c6:	46bd      	mov	sp, r7
 800e9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9cc:	4770      	bx	lr

0800e9ce <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800e9ce:	b580      	push	{r7, lr}
 800e9d0:	b086      	sub	sp, #24
 800e9d2:	af00      	add	r7, sp, #0
 800e9d4:	60f8      	str	r0, [r7, #12]
 800e9d6:	60b9      	str	r1, [r7, #8]
 800e9d8:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800e9de:	687a      	ldr	r2, [r7, #4]
 800e9e0:	68b9      	ldr	r1, [r7, #8]
 800e9e2:	6978      	ldr	r0, [r7, #20]
 800e9e4:	f000 fd23 	bl	800f42e <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS3_RKS5_>
}
 800e9e8:	bf00      	nop
 800e9ea:	3718      	adds	r7, #24
 800e9ec:	46bd      	mov	sp, r7
 800e9ee:	bd80      	pop	{r7, pc}

0800e9f0 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800e9f0:	b480      	push	{r7}
 800e9f2:	b083      	sub	sp, #12
 800e9f4:	af00      	add	r7, sp, #0
 800e9f6:	6078      	str	r0, [r7, #4]
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	3304      	adds	r3, #4
 800e9fc:	4618      	mov	r0, r3
 800e9fe:	370c      	adds	r7, #12
 800ea00:	46bd      	mov	sp, r7
 800ea02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea06:	4770      	bx	lr

0800ea08 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800ea08:	b580      	push	{r7, lr}
 800ea0a:	b086      	sub	sp, #24
 800ea0c:	af00      	add	r7, sp, #0
 800ea0e:	60f8      	str	r0, [r7, #12]
 800ea10:	60b9      	str	r1, [r7, #8]
 800ea12:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800ea18:	687a      	ldr	r2, [r7, #4]
 800ea1a:	68b9      	ldr	r1, [r7, #8]
 800ea1c:	6978      	ldr	r0, [r7, #20]
 800ea1e:	f000 fd19 	bl	800f454 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_>
}
 800ea22:	bf00      	nop
 800ea24:	3718      	adds	r7, #24
 800ea26:	46bd      	mov	sp, r7
 800ea28:	bd80      	pop	{r7, pc}

0800ea2a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800ea2a:	b480      	push	{r7}
 800ea2c:	b083      	sub	sp, #12
 800ea2e:	af00      	add	r7, sp, #0
 800ea30:	6078      	str	r0, [r7, #4]
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	4618      	mov	r0, r3
 800ea38:	370c      	adds	r7, #12
 800ea3a:	46bd      	mov	sp, r7
 800ea3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea40:	4770      	bx	lr

0800ea42 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800ea42:	b480      	push	{r7}
 800ea44:	b083      	sub	sp, #12
 800ea46:	af00      	add	r7, sp, #0
 800ea48:	6078      	str	r0, [r7, #4]
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	685b      	ldr	r3, [r3, #4]
 800ea4e:	4618      	mov	r0, r3
 800ea50:	370c      	adds	r7, #12
 800ea52:	46bd      	mov	sp, r7
 800ea54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea58:	4770      	bx	lr

0800ea5a <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEENS_10DenseShapeES5_Li3EE5subToINS2_IfLi3ELi3ELi0ELi3ELi3EEEEEvRT_RKS3_RKS4_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void subTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 800ea5a:	b580      	push	{r7, lr}
 800ea5c:	b088      	sub	sp, #32
 800ea5e:	af00      	add	r7, sp, #0
 800ea60:	60f8      	str	r0, [r7, #12]
 800ea62:	60b9      	str	r1, [r7, #8]
 800ea64:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::sub_assign_op<typename Dst::Scalar,Scalar>());
 800ea66:	f107 0314 	add.w	r3, r7, #20
 800ea6a:	687a      	ldr	r2, [r7, #4]
 800ea6c:	68b9      	ldr	r1, [r7, #8]
 800ea6e:	4618      	mov	r0, r3
 800ea70:	f000 fd2a 	bl	800f4c8 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE11lazyProductINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS7_EE>
 800ea74:	f107 031c 	add.w	r3, r7, #28
 800ea78:	4618      	mov	r0, r3
 800ea7a:	f7fe ff91 	bl	800d9a0 <_ZN5Eigen8internal13sub_assign_opIffEC1Ev>
 800ea7e:	f107 021c 	add.w	r2, r7, #28
 800ea82:	f107 0314 	add.w	r3, r7, #20
 800ea86:	4619      	mov	r1, r3
 800ea88:	68f8      	ldr	r0, [r7, #12]
 800ea8a:	f000 fd34 	bl	800f4f6 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800ea8e:	bf00      	nop
 800ea90:	3720      	adds	r7, #32
 800ea92:	46bd      	mov	sp, r7
 800ea94:	bd80      	pop	{r7, pc}

0800ea96 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1Ev>:
 800ea96:	b580      	push	{r7, lr}
 800ea98:	b082      	sub	sp, #8
 800ea9a:	af00      	add	r7, sp, #0
 800ea9c:	6078      	str	r0, [r7, #4]
 800ea9e:	6878      	ldr	r0, [r7, #4]
 800eaa0:	f000 fd3a 	bl	800f518 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1Ev>
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	3708      	adds	r7, #8
 800eaaa:	46bd      	mov	sp, r7
 800eaac:	bd80      	pop	{r7, pc}
	...

0800eab0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 800eab0:	b580      	push	{r7, lr}
 800eab2:	b084      	sub	sp, #16
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	60f8      	str	r0, [r7, #12]
 800eab8:	60b9      	str	r1, [r7, #8]
 800eaba:	607a      	str	r2, [r7, #4]
 800eabc:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 800eabe:	68f8      	ldr	r0, [r7, #12]
 800eac0:	f7ff ffe9 	bl	800ea96 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1Ev>
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	68ba      	ldr	r2, [r7, #8]
 800eac8:	601a      	str	r2, [r3, #0]
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	3304      	adds	r3, #4
 800eace:	6879      	ldr	r1, [r7, #4]
 800ead0:	4618      	mov	r0, r3
 800ead2:	f7f8 f851 	bl	8006b78 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	3305      	adds	r3, #5
 800eada:	6839      	ldr	r1, [r7, #0]
 800eadc:	4618      	mov	r0, r3
 800eade:	f7f8 f865 	bl	8006bac <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 800eae2:	68bb      	ldr	r3, [r7, #8]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d011      	beq.n	800eb0c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	db08      	blt.n	800eb00 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	2b03      	cmp	r3, #3
 800eaf2:	d105      	bne.n	800eb00 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800eaf4:	683b      	ldr	r3, [r7, #0]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	db02      	blt.n	800eb00 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800eafa:	683b      	ldr	r3, [r7, #0]
 800eafc:	2b01      	cmp	r3, #1
 800eafe:	d005      	beq.n	800eb0c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 800eb00:	4b07      	ldr	r3, [pc, #28]	; (800eb20 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x70>)
 800eb02:	4a08      	ldr	r2, [pc, #32]	; (800eb24 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x74>)
 800eb04:	21b0      	movs	r1, #176	; 0xb0
 800eb06:	4808      	ldr	r0, [pc, #32]	; (800eb28 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x78>)
 800eb08:	f00f f9c4 	bl	801de94 <__assert_func>
      checkSanity<Derived>();
 800eb0c:	2100      	movs	r1, #0
 800eb0e:	68f8      	ldr	r0, [r7, #12]
 800eb10:	f000 fd0d 	bl	800f52e <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	4618      	mov	r0, r3
 800eb18:	3710      	adds	r7, #16
 800eb1a:	46bd      	mov	sp, r7
 800eb1c:	bd80      	pop	{r7, pc}
 800eb1e:	bf00      	nop
 800eb20:	08026420 	.word	0x08026420
 800eb24:	08026f78 	.word	0x08026f78
 800eb28:	080265d0 	.word	0x080265d0

0800eb2c <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EE4initEv>:
    void init()
 800eb2c:	b580      	push	{r7, lr}
 800eb2e:	b082      	sub	sp, #8
 800eb30:	af00      	add	r7, sp, #0
 800eb32:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	689b      	ldr	r3, [r3, #8]
 800eb38:	4618      	mov	r0, r3
 800eb3a:	f7f9 fe05 	bl	8008748 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>
 800eb3e:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	615a      	str	r2, [r3, #20]
    }
 800eb44:	bf00      	nop
 800eb46:	3708      	adds	r7, #8
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	bd80      	pop	{r7, pc}

0800eb4c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffEC1ERKSG_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 800eb4c:	b580      	push	{r7, lr}
 800eb4e:	b082      	sub	sp, #8
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	6078      	str	r0, [r7, #4]
 800eb54:	6039      	str	r1, [r7, #0]
 800eb56:	6878      	ldr	r0, [r7, #4]
 800eb58:	f000 fcf4 	bl	800f544 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1Ev>
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	6839      	ldr	r1, [r7, #0]
 800eb60:	4618      	mov	r0, r3
 800eb62:	f000 fcfa 	bl	800f55a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE4DataC1ERKSG_>
  }
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	4618      	mov	r0, r3
 800eb6a:	3708      	adds	r7, #8
 800eb6c:	46bd      	mov	sp, r7
 800eb6e:	bd80      	pop	{r7, pc}

0800eb70 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi0ELi1EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800eb70:	b580      	push	{r7, lr}
 800eb72:	b082      	sub	sp, #8
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	6078      	str	r0, [r7, #4]
 800eb78:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800eb7a:	2200      	movs	r2, #0
 800eb7c:	2100      	movs	r1, #0
 800eb7e:	6878      	ldr	r0, [r7, #4]
 800eb80:	f000 fd13 	bl	800f5aa <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 800eb84:	eef0 7a40 	vmov.f32	s15, s0
  }
 800eb88:	eeb0 0a67 	vmov.f32	s0, s15
 800eb8c:	3708      	adds	r7, #8
 800eb8e:	46bd      	mov	sp, r7
 800eb90:	bd80      	pop	{r7, pc}

0800eb92 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi1ELi2EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 800eb92:	b580      	push	{r7, lr}
 800eb94:	b084      	sub	sp, #16
 800eb96:	af00      	add	r7, sp, #0
 800eb98:	6078      	str	r0, [r7, #4]
 800eb9a:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800eb9c:	6839      	ldr	r1, [r7, #0]
 800eb9e:	6878      	ldr	r0, [r7, #4]
 800eba0:	f000 fd16 	bl	800f5d0 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi1ELi1EE3runERKSK_RKS3_>
 800eba4:	eef0 7a40 	vmov.f32	s15, s0
 800eba8:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 800ebac:	6839      	ldr	r1, [r7, #0]
 800ebae:	6878      	ldr	r0, [r7, #4]
 800ebb0:	f000 fd1f 	bl	800f5f2 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi2ELi1EE3runERKSK_RKS3_>
 800ebb4:	eef0 7a40 	vmov.f32	s15, s0
 800ebb8:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800ebbc:	f107 020c 	add.w	r2, r7, #12
 800ebc0:	f107 0308 	add.w	r3, r7, #8
 800ebc4:	4619      	mov	r1, r3
 800ebc6:	6838      	ldr	r0, [r7, #0]
 800ebc8:	f7fa fbdb 	bl	8009382 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 800ebcc:	eef0 7a40 	vmov.f32	s15, s0
  }
 800ebd0:	eeb0 0a67 	vmov.f32	s0, s15
 800ebd4:	3710      	adds	r7, #16
 800ebd6:	46bd      	mov	sp, r7
 800ebd8:	bd80      	pop	{r7, pc}

0800ebda <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800ebda:	b580      	push	{r7, lr}
 800ebdc:	b082      	sub	sp, #8
 800ebde:	af00      	add	r7, sp, #0
 800ebe0:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800ebe2:	2202      	movs	r2, #2
 800ebe4:	2102      	movs	r1, #2
 800ebe6:	6878      	ldr	r0, [r7, #4]
 800ebe8:	f7fb fe2e 	bl	800a848 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800ebec:	6878      	ldr	r0, [r7, #4]
 800ebee:	f000 fd11 	bl	800f614 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSL_>
  }
 800ebf2:	bf00      	nop
 800ebf4:	3708      	adds	r7, #8
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	bd80      	pop	{r7, pc}

0800ebfa <_ZN5Eigen9DenseBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800ebfa:	b480      	push	{r7}
 800ebfc:	b083      	sub	sp, #12
 800ebfe:	af00      	add	r7, sp, #0
 800ec00:	6078      	str	r0, [r7, #4]
    }
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	4618      	mov	r0, r3
 800ec06:	370c      	adds	r7, #12
 800ec08:	46bd      	mov	sp, r7
 800ec0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec0e:	4770      	bx	lr

0800ec10 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE11checkSanityIS7_EEvNS_8internal9enable_ifIXeqsrNSA_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 800ec10:	b480      	push	{r7}
 800ec12:	b083      	sub	sp, #12
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	6078      	str	r0, [r7, #4]
 800ec18:	6039      	str	r1, [r7, #0]
    {}
 800ec1a:	bf00      	nop
 800ec1c:	370c      	adds	r7, #12
 800ec1e:	46bd      	mov	sp, r7
 800ec20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec24:	4770      	bx	lr

0800ec26 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800ec26:	b480      	push	{r7}
 800ec28:	b083      	sub	sp, #12
 800ec2a:	af00      	add	r7, sp, #0
 800ec2c:	6078      	str	r0, [r7, #4]
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	4618      	mov	r0, r3
 800ec32:	370c      	adds	r7, #12
 800ec34:	46bd      	mov	sp, r7
 800ec36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec3a:	4770      	bx	lr

0800ec3c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE4DataC1ERKSP_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 800ec3c:	b590      	push	{r4, r7, lr}
 800ec3e:	b083      	sub	sp, #12
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6078      	str	r0, [r7, #4]
 800ec44:	6039      	str	r1, [r7, #0]
 800ec46:	687c      	ldr	r4, [r7, #4]
 800ec48:	6838      	ldr	r0, [r7, #0]
 800ec4a:	f000 fced 	bl	800f628 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE7functorEv>
 800ec4e:	4603      	mov	r3, r0
 800ec50:	4619      	mov	r1, r3
 800ec52:	4620      	mov	r0, r4
 800ec54:	f7f6 fd30 	bl	80056b8 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	1d1c      	adds	r4, r3, #4
 800ec5c:	6838      	ldr	r0, [r7, #0]
 800ec5e:	f000 fcef 	bl	800f640 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE3lhsEv>
 800ec62:	4603      	mov	r3, r0
 800ec64:	4619      	mov	r1, r3
 800ec66:	4620      	mov	r0, r4
 800ec68:	f000 fd02 	bl	800f670 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1ERSK_>
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	f103 0420 	add.w	r4, r3, #32
 800ec72:	6838      	ldr	r0, [r7, #0]
 800ec74:	f000 fcf0 	bl	800f658 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE3rhsEv>
 800ec78:	4603      	mov	r3, r0
 800ec7a:	4619      	mov	r1, r3
 800ec7c:	4620      	mov	r0, r4
 800ec7e:	f000 fd06 	bl	800f68e <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1ERS9_>
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	4618      	mov	r0, r3
 800ec86:	370c      	adds	r7, #12
 800ec88:	46bd      	mov	sp, r7
 800ec8a:	bd90      	pop	{r4, r7, pc}

0800ec8c <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800ec8c:	b590      	push	{r4, r7, lr}
 800ec8e:	b087      	sub	sp, #28
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	60f8      	str	r0, [r7, #12]
 800ec94:	60b9      	str	r1, [r7, #8]
 800ec96:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	f000 fd06 	bl	800f6ac <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE4Data4funcEv>
 800eca0:	4604      	mov	r4, r0
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	3304      	adds	r3, #4
 800eca6:	687a      	ldr	r2, [r7, #4]
 800eca8:	68b9      	ldr	r1, [r7, #8]
 800ecaa:	4618      	mov	r0, r3
 800ecac:	f000 fd09 	bl	800f6c2 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEENS0_10IndexBasedEfE5coeffEii>
 800ecb0:	eef0 7a40 	vmov.f32	s15, s0
 800ecb4:	edc7 7a04 	vstr	s15, [r7, #16]
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	3320      	adds	r3, #32
 800ecbc:	687a      	ldr	r2, [r7, #4]
 800ecbe:	68b9      	ldr	r1, [r7, #8]
 800ecc0:	4618      	mov	r0, r3
 800ecc2:	f000 fd11 	bl	800f6e8 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEE5coeffEii>
 800ecc6:	eef0 7a40 	vmov.f32	s15, s0
 800ecca:	edc7 7a05 	vstr	s15, [r7, #20]
 800ecce:	f107 0214 	add.w	r2, r7, #20
 800ecd2:	f107 0310 	add.w	r3, r7, #16
 800ecd6:	4619      	mov	r1, r3
 800ecd8:	4620      	mov	r0, r4
 800ecda:	f000 fb93 	bl	800f404 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 800ecde:	eef0 7a40 	vmov.f32	s15, s0
  }
 800ece2:	eeb0 0a67 	vmov.f32	s0, s15
 800ece6:	371c      	adds	r7, #28
 800ece8:	46bd      	mov	sp, r7
 800ecea:	bd90      	pop	{r4, r7, pc}

0800ecec <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 800ecec:	b480      	push	{r7}
 800ecee:	b083      	sub	sp, #12
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	6078      	str	r0, [r7, #4]
 800ecf4:	bf00      	nop
 800ecf6:	370c      	adds	r7, #12
 800ecf8:	46bd      	mov	sp, r7
 800ecfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecfe:	4770      	bx	lr

0800ed00 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 800ed00:	b480      	push	{r7}
 800ed02:	b083      	sub	sp, #12
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	6078      	str	r0, [r7, #4]
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	3330      	adds	r3, #48	; 0x30
 800ed0c:	4618      	mov	r0, r3
 800ed0e:	370c      	adds	r7, #12
 800ed10:	46bd      	mov	sp, r7
 800ed12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed16:	4770      	bx	lr

0800ed18 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800ed18:	b480      	push	{r7}
 800ed1a:	b083      	sub	sp, #12
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	6078      	str	r0, [r7, #4]
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	4618      	mov	r0, r3
 800ed24:	370c      	adds	r7, #12
 800ed26:	46bd      	mov	sp, r7
 800ed28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed2c:	4770      	bx	lr

0800ed2e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800ed2e:	b480      	push	{r7}
 800ed30:	b083      	sub	sp, #12
 800ed32:	af00      	add	r7, sp, #0
 800ed34:	6078      	str	r0, [r7, #4]
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	3318      	adds	r3, #24
 800ed3a:	4618      	mov	r0, r3
 800ed3c:	370c      	adds	r7, #12
 800ed3e:	46bd      	mov	sp, r7
 800ed40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed44:	4770      	bx	lr

0800ed46 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERSA_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 800ed46:	b580      	push	{r7, lr}
 800ed48:	b082      	sub	sp, #8
 800ed4a:	af00      	add	r7, sp, #0
 800ed4c:	6078      	str	r0, [r7, #4]
 800ed4e:	6039      	str	r1, [r7, #0]
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	6839      	ldr	r1, [r7, #0]
 800ed54:	4618      	mov	r0, r3
 800ed56:	f000 fce8 	bl	800f72a <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERKS9_>
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	4618      	mov	r0, r3
 800ed5e:	3708      	adds	r7, #8
 800ed60:	46bd      	mov	sp, r7
 800ed62:	bd80      	pop	{r7, pc}

0800ed64 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERS7_>:
 800ed64:	b580      	push	{r7, lr}
 800ed66:	b082      	sub	sp, #8
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	6078      	str	r0, [r7, #4]
 800ed6c:	6039      	str	r1, [r7, #0]
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	6839      	ldr	r1, [r7, #0]
 800ed72:	4618      	mov	r0, r3
 800ed74:	f000 fce8 	bl	800f748 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERKS6_>
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	4618      	mov	r0, r3
 800ed7c:	3708      	adds	r7, #8
 800ed7e:	46bd      	mov	sp, r7
 800ed80:	bd80      	pop	{r7, pc}

0800ed82 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800ed82:	b590      	push	{r4, r7, lr}
 800ed84:	b087      	sub	sp, #28
 800ed86:	af00      	add	r7, sp, #0
 800ed88:	60f8      	str	r0, [r7, #12]
 800ed8a:	60b9      	str	r1, [r7, #8]
 800ed8c:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	4618      	mov	r0, r3
 800ed92:	f000 fce8 	bl	800f766 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>
 800ed96:	4604      	mov	r4, r0
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	3304      	adds	r3, #4
 800ed9c:	687a      	ldr	r2, [r7, #4]
 800ed9e:	68b9      	ldr	r1, [r7, #8]
 800eda0:	4618      	mov	r0, r3
 800eda2:	f000 fceb 	bl	800f77c <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfE5coeffEii>
 800eda6:	eef0 7a40 	vmov.f32	s15, s0
 800edaa:	edc7 7a04 	vstr	s15, [r7, #16]
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	330c      	adds	r3, #12
 800edb2:	687a      	ldr	r2, [r7, #4]
 800edb4:	68b9      	ldr	r1, [r7, #8]
 800edb6:	4618      	mov	r0, r3
 800edb8:	f000 fcf3 	bl	800f7a2 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_E5coeffEii>
 800edbc:	eef0 7a40 	vmov.f32	s15, s0
 800edc0:	edc7 7a05 	vstr	s15, [r7, #20]
 800edc4:	f107 0214 	add.w	r2, r7, #20
 800edc8:	f107 0310 	add.w	r3, r7, #16
 800edcc:	4619      	mov	r1, r3
 800edce:	4620      	mov	r0, r4
 800edd0:	f000 fb18 	bl	800f404 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 800edd4:	eef0 7a40 	vmov.f32	s15, s0
  }
 800edd8:	eeb0 0a67 	vmov.f32	s0, s15
 800eddc:	371c      	adds	r7, #28
 800edde:	46bd      	mov	sp, r7
 800ede0:	bd90      	pop	{r4, r7, pc}

0800ede2 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<Scalar,Scalar> &)
 800ede2:	b590      	push	{r4, r7, lr}
 800ede4:	b087      	sub	sp, #28
 800ede6:	af00      	add	r7, sp, #0
 800ede8:	60f8      	str	r0, [r7, #12]
 800edea:	60b9      	str	r1, [r7, #8]
 800edec:	607a      	str	r2, [r7, #4]
    Index dstRows = src.rows();
 800edee:	68b8      	ldr	r0, [r7, #8]
 800edf0:	f7f7 ff9e 	bl	8006d30 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4rowsEv>
 800edf4:	6178      	str	r0, [r7, #20]
    Index dstCols = src.cols();
 800edf6:	68b8      	ldr	r0, [r7, #8]
 800edf8:	f7f6 fe73 	bl	8005ae2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4colsEv>
 800edfc:	6138      	str	r0, [r7, #16]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	4618      	mov	r0, r3
 800ee02:	f7f6 f92e 	bl	8005062 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800ee06:	4602      	mov	r2, r0
 800ee08:	697b      	ldr	r3, [r7, #20]
 800ee0a:	4293      	cmp	r3, r2
 800ee0c:	d107      	bne.n	800ee1e <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_+0x3c>
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	4618      	mov	r0, r3
 800ee12:	f7f6 f91b 	bl	800504c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800ee16:	4602      	mov	r2, r0
 800ee18:	693b      	ldr	r3, [r7, #16]
 800ee1a:	4293      	cmp	r3, r2
 800ee1c:	d001      	beq.n	800ee22 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_+0x40>
 800ee1e:	2301      	movs	r3, #1
 800ee20:	e000      	b.n	800ee24 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_+0x42>
 800ee22:	2300      	movs	r3, #0
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d005      	beq.n	800ee34 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_+0x52>
      dst.resize(dstRows, dstCols);
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	693a      	ldr	r2, [r7, #16]
 800ee2c:	6979      	ldr	r1, [r7, #20]
 800ee2e:	4618      	mov	r0, r3
 800ee30:	f7f9 f830 	bl	8007e94 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
    generic_product_impl<Lhs, Rhs>::evalTo(dst, src.lhs(), src.rhs());
 800ee34:	68b8      	ldr	r0, [r7, #8]
 800ee36:	f000 fcd5 	bl	800f7e4 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE3lhsEv>
 800ee3a:	4604      	mov	r4, r0
 800ee3c:	68b8      	ldr	r0, [r7, #8]
 800ee3e:	f000 fcdd 	bl	800f7fc <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE3rhsEv>
 800ee42:	4603      	mov	r3, r0
 800ee44:	461a      	mov	r2, r3
 800ee46:	4621      	mov	r1, r4
 800ee48:	68f8      	ldr	r0, [r7, #12]
 800ee4a:	f000 fce3 	bl	800f814 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS_10DenseShapeES4_Li3EE6evalToIS3_EEvRT_RKS3_SA_>
  }
 800ee4e:	bf00      	nop
 800ee50:	371c      	adds	r7, #28
 800ee52:	46bd      	mov	sp, r7
 800ee54:	bd90      	pop	{r4, r7, pc}
	...

0800ee58 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEC1ERS5_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800ee58:	b580      	push	{r7, lr}
 800ee5a:	b084      	sub	sp, #16
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	60f8      	str	r0, [r7, #12]
 800ee60:	60b9      	str	r1, [r7, #8]
 800ee62:	607a      	str	r2, [r7, #4]
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	687a      	ldr	r2, [r7, #4]
 800ee68:	68b9      	ldr	r1, [r7, #8]
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	f000 fcf0 	bl	800f850 <_ZN5Eigen9BlockImplIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ENS_5DenseEEC1ERS5_i>
      eigen_assert( (i>=0) && (
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	db06      	blt.n	800ee84 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEC1ERS5_i+0x2c>
 800ee76:	68b8      	ldr	r0, [r7, #8]
 800ee78:	f7f7 ff68 	bl	8006d4c <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800ee7c:	4602      	mov	r2, r0
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	4293      	cmp	r3, r2
 800ee82:	db05      	blt.n	800ee90 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEC1ERS5_i+0x38>
 800ee84:	4b05      	ldr	r3, [pc, #20]	; (800ee9c <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEC1ERS5_i+0x44>)
 800ee86:	4a06      	ldr	r2, [pc, #24]	; (800eea0 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEC1ERS5_i+0x48>)
 800ee88:	2178      	movs	r1, #120	; 0x78
 800ee8a:	4806      	ldr	r0, [pc, #24]	; (800eea4 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEC1ERS5_i+0x4c>)
 800ee8c:	f00f f802 	bl	801de94 <__assert_func>
    }
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	4618      	mov	r0, r3
 800ee94:	3710      	adds	r7, #16
 800ee96:	46bd      	mov	sp, r7
 800ee98:	bd80      	pop	{r7, pc}
 800ee9a:	bf00      	nop
 800ee9c:	08024880 	.word	0x08024880
 800eea0:	0802707c 	.word	0x0802707c
 800eea4:	08024a04 	.word	0x08024a04

0800eea8 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800eea8:	b480      	push	{r7}
 800eeaa:	b083      	sub	sp, #12
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	6078      	str	r0, [r7, #4]
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	370c      	adds	r7, #12
 800eeb6:	46bd      	mov	sp, r7
 800eeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eebc:	4770      	bx	lr

0800eebe <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1Ev>:
 800eebe:	b580      	push	{r7, lr}
 800eec0:	b082      	sub	sp, #8
 800eec2:	af00      	add	r7, sp, #0
 800eec4:	6078      	str	r0, [r7, #4]
 800eec6:	6878      	ldr	r0, [r7, #4]
 800eec8:	f000 fcd3 	bl	800f872 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1Ev>
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	4618      	mov	r0, r3
 800eed0:	3708      	adds	r7, #8
 800eed2:	46bd      	mov	sp, r7
 800eed4:	bd80      	pop	{r7, pc}

0800eed6 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 800eed6:	b580      	push	{r7, lr}
 800eed8:	b082      	sub	sp, #8
 800eeda:	af00      	add	r7, sp, #0
 800eedc:	6078      	str	r0, [r7, #4]
 800eede:	6878      	ldr	r0, [r7, #4]
 800eee0:	f7ff ffed 	bl	800eebe <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1Ev>
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	4618      	mov	r0, r3
 800eee8:	3708      	adds	r7, #8
 800eeea:	46bd      	mov	sp, r7
 800eeec:	bd80      	pop	{r7, pc}

0800eeee <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 800eeee:	b580      	push	{r7, lr}
 800eef0:	b082      	sub	sp, #8
 800eef2:	af00      	add	r7, sp, #0
 800eef4:	6078      	str	r0, [r7, #4]
 800eef6:	f7f7 fe7e 	bl	8006bf6 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 800eefa:	4603      	mov	r3, r0
 800eefc:	4618      	mov	r0, r3
 800eefe:	3708      	adds	r7, #8
 800ef00:	46bd      	mov	sp, r7
 800ef02:	bd80      	pop	{r7, pc}

0800ef04 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 800ef04:	b580      	push	{r7, lr}
 800ef06:	b082      	sub	sp, #8
 800ef08:	af00      	add	r7, sp, #0
 800ef0a:	6078      	str	r0, [r7, #4]
 800ef0c:	f7f7 fe7b 	bl	8006c06 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800ef10:	4603      	mov	r3, r0
 800ef12:	4618      	mov	r0, r3
 800ef14:	3708      	adds	r7, #8
 800ef16:	46bd      	mov	sp, r7
 800ef18:	bd80      	pop	{r7, pc}
	...

0800ef1c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEEC1ERSC_RSG_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 800ef1c:	b5b0      	push	{r4, r5, r7, lr}
 800ef1e:	b084      	sub	sp, #16
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	60f8      	str	r0, [r7, #12]
 800ef24:	60b9      	str	r1, [r7, #8]
 800ef26:	607a      	str	r2, [r7, #4]
 800ef28:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 800ef2a:	68f8      	ldr	r0, [r7, #12]
 800ef2c:	f7ff ffd3 	bl	800eed6 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEENS_5DenseEEC1Ev>
 800ef30:	68fa      	ldr	r2, [r7, #12]
 800ef32:	68bb      	ldr	r3, [r7, #8]
 800ef34:	4614      	mov	r4, r2
 800ef36:	461d      	mov	r5, r3
 800ef38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ef3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ef3c:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ef40:	e884 0003 	stmia.w	r4, {r0, r1}
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	f103 0218 	add.w	r2, r3, #24
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	4614      	mov	r4, r2
 800ef4e:	461d      	mov	r5, r3
 800ef50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ef52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ef54:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ef58:	e884 0003 	stmia.w	r4, {r0, r1}
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	3330      	adds	r3, #48	; 0x30
 800ef60:	6839      	ldr	r1, [r7, #0]
 800ef62:	4618      	mov	r0, r3
 800ef64:	f7f6 fba8 	bl	80056b8 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 800ef68:	68b8      	ldr	r0, [r7, #8]
 800ef6a:	f7fc fd11 	bl	800b990 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 800ef6e:	4604      	mov	r4, r0
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	4618      	mov	r0, r3
 800ef74:	f7ff ffbb 	bl	800eeee <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE4rowsEv>
 800ef78:	4603      	mov	r3, r0
 800ef7a:	429c      	cmp	r4, r3
 800ef7c:	d10a      	bne.n	800ef94 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x78>
 800ef7e:	68b8      	ldr	r0, [r7, #8]
 800ef80:	f7fc fd13 	bl	800b9aa <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 800ef84:	4604      	mov	r4, r0
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	4618      	mov	r0, r3
 800ef8a:	f7ff ffbb 	bl	800ef04 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE4colsEv>
 800ef8e:	4603      	mov	r3, r0
 800ef90:	429c      	cmp	r4, r3
 800ef92:	d005      	beq.n	800efa0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x84>
 800ef94:	4b05      	ldr	r3, [pc, #20]	; (800efac <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x90>)
 800ef96:	4a06      	ldr	r2, [pc, #24]	; (800efb0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x94>)
 800ef98:	2174      	movs	r1, #116	; 0x74
 800ef9a:	4806      	ldr	r0, [pc, #24]	; (800efb4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x98>)
 800ef9c:	f00e ff7a 	bl	801de94 <__assert_func>
    }
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	4618      	mov	r0, r3
 800efa4:	3710      	adds	r7, #16
 800efa6:	46bd      	mov	sp, r7
 800efa8:	bdb0      	pop	{r4, r5, r7, pc}
 800efaa:	bf00      	nop
 800efac:	0801fcfc 	.word	0x0801fcfc
 800efb0:	0802716c 	.word	0x0802716c
 800efb4:	0801ff60 	.word	0x0801ff60

0800efb8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800efb8:	b580      	push	{r7, lr}
 800efba:	b082      	sub	sp, #8
 800efbc:	af00      	add	r7, sp, #0
 800efbe:	6078      	str	r0, [r7, #4]
 800efc0:	6878      	ldr	r0, [r7, #4]
 800efc2:	f000 f809 	bl	800efd8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE7derivedEv>
 800efc6:	4603      	mov	r3, r0
 800efc8:	4618      	mov	r0, r3
 800efca:	f000 fc5d 	bl	800f888 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE4colsEv>
 800efce:	4603      	mov	r3, r0
 800efd0:	4618      	mov	r0, r3
 800efd2:	3708      	adds	r7, #8
 800efd4:	46bd      	mov	sp, r7
 800efd6:	bd80      	pop	{r7, pc}

0800efd8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800efd8:	b480      	push	{r7}
 800efda:	b083      	sub	sp, #12
 800efdc:	af00      	add	r7, sp, #0
 800efde:	6078      	str	r0, [r7, #4]
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	4618      	mov	r0, r3
 800efe4:	370c      	adds	r7, #12
 800efe6:	46bd      	mov	sp, r7
 800efe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efec:	4770      	bx	lr

0800efee <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 800efee:	b580      	push	{r7, lr}
 800eff0:	b082      	sub	sp, #8
 800eff2:	af00      	add	r7, sp, #0
 800eff4:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	4618      	mov	r0, r3
 800effa:	f7fc fcc9 	bl	800b990 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 800effe:	4603      	mov	r3, r0
    }
 800f000:	4618      	mov	r0, r3
 800f002:	3708      	adds	r7, #8
 800f004:	46bd      	mov	sp, r7
 800f006:	bd80      	pop	{r7, pc}

0800f008 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 800f008:	b580      	push	{r7, lr}
 800f00a:	b082      	sub	sp, #8
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	6078      	str	r0, [r7, #4]
 800f010:	6878      	ldr	r0, [r7, #4]
 800f012:	f000 fc60 	bl	800f8d6 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEED1Ev>
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	4618      	mov	r0, r3
 800f01a:	3708      	adds	r7, #8
 800f01c:	46bd      	mov	sp, r7
 800f01e:	bd80      	pop	{r7, pc}

0800f020 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800f020:	b580      	push	{r7, lr}
 800f022:	b082      	sub	sp, #8
 800f024:	af00      	add	r7, sp, #0
 800f026:	6078      	str	r0, [r7, #4]
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	4618      	mov	r0, r3
 800f02c:	f7ff ffec 	bl	800f008 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	4618      	mov	r0, r3
 800f034:	3708      	adds	r7, #8
 800f036:	46bd      	mov	sp, r7
 800f038:	bd80      	pop	{r7, pc}

0800f03a <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800f03a:	b580      	push	{r7, lr}
 800f03c:	b082      	sub	sp, #8
 800f03e:	af00      	add	r7, sp, #0
 800f040:	6078      	str	r0, [r7, #4]
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	4618      	mov	r0, r3
 800f046:	f7ff ffeb 	bl	800f020 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EED1Ev>
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	4618      	mov	r0, r3
 800f04e:	3708      	adds	r7, #8
 800f050:	46bd      	mov	sp, r7
 800f052:	bd80      	pop	{r7, pc}

0800f054 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEED1Ev>:
struct evaluator<const T>
 800f054:	b580      	push	{r7, lr}
 800f056:	b082      	sub	sp, #8
 800f058:	af00      	add	r7, sp, #0
 800f05a:	6078      	str	r0, [r7, #4]
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	4618      	mov	r0, r3
 800f060:	f7ff ffeb 	bl	800f03a <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEED1Ev>
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	4618      	mov	r0, r3
 800f068:	3708      	adds	r7, #8
 800f06a:	46bd      	mov	sp, r7
 800f06c:	bd80      	pop	{r7, pc}

0800f06e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>:
  struct Data
 800f06e:	b580      	push	{r7, lr}
 800f070:	b082      	sub	sp, #8
 800f072:	af00      	add	r7, sp, #0
 800f074:	6078      	str	r0, [r7, #4]
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	330c      	adds	r3, #12
 800f07a:	4618      	mov	r0, r3
 800f07c:	f7ff ffea 	bl	800f054 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEED1Ev>
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	3304      	adds	r3, #4
 800f084:	4618      	mov	r0, r3
 800f086:	f7fc fd79 	bl	800bb7c <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	4618      	mov	r0, r3
 800f08e:	3708      	adds	r7, #8
 800f090:	46bd      	mov	sp, r7
 800f092:	bd80      	pop	{r7, pc}

0800f094 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 800f094:	b580      	push	{r7, lr}
 800f096:	b082      	sub	sp, #8
 800f098:	af00      	add	r7, sp, #0
 800f09a:	6078      	str	r0, [r7, #4]
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	4618      	mov	r0, r3
 800f0a0:	f7ff ffe5 	bl	800f06e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>
 800f0a4:	6878      	ldr	r0, [r7, #4]
 800f0a6:	f000 fc0b 	bl	800f8c0 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEED1Ev>
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	4618      	mov	r0, r3
 800f0ae:	3708      	adds	r7, #8
 800f0b0:	46bd      	mov	sp, r7
 800f0b2:	bd80      	pop	{r7, pc}

0800f0b4 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 800f0b4:	b580      	push	{r7, lr}
 800f0b6:	b082      	sub	sp, #8
 800f0b8:	af00      	add	r7, sp, #0
 800f0ba:	6078      	str	r0, [r7, #4]
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	4618      	mov	r0, r3
 800f0c0:	f7ff ffe8 	bl	800f094 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffED1Ev>
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	3708      	adds	r7, #8
 800f0ca:	46bd      	mov	sp, r7
 800f0cc:	bd80      	pop	{r7, pc}

0800f0ce <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 800f0ce:	b580      	push	{r7, lr}
 800f0d0:	b082      	sub	sp, #8
 800f0d2:	af00      	add	r7, sp, #0
 800f0d4:	6078      	str	r0, [r7, #4]
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	4618      	mov	r0, r3
 800f0da:	f7ff ffeb 	bl	800f0b4 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEED1Ev>
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	4618      	mov	r0, r3
 800f0e2:	3708      	adds	r7, #8
 800f0e4:	46bd      	mov	sp, r7
 800f0e6:	bd80      	pop	{r7, pc}

0800f0e8 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 800f0e8:	b580      	push	{r7, lr}
 800f0ea:	ed2d 8b02 	vpush	{d8}
 800f0ee:	b088      	sub	sp, #32
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	6078      	str	r0, [r7, #4]
 800f0f4:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 800f0f6:	6878      	ldr	r0, [r7, #4]
 800f0f8:	f7ff fb0d 	bl	800e716 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE4rowsEv>
 800f0fc:	4603      	mov	r3, r0
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	dd05      	ble.n	800f10e <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 800f102:	6878      	ldr	r0, [r7, #4]
 800f104:	f7ff ff58 	bl	800efb8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE4colsEv>
 800f108:	4603      	mov	r3, r0
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	dc06      	bgt.n	800f11c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 800f10e:	4b16      	ldr	r3, [pc, #88]	; (800f168 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 800f110:	4a16      	ldr	r2, [pc, #88]	; (800f16c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 800f112:	f240 119b 	movw	r1, #411	; 0x19b
 800f116:	4816      	ldr	r0, [pc, #88]	; (800f170 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 800f118:	f00e febc 	bl	801de94 <__assert_func>
 800f11c:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800f11e:	6878      	ldr	r0, [r7, #4]
 800f120:	f7ff ff5a 	bl	800efd8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE7derivedEv>
 800f124:	4602      	mov	r2, r0
 800f126:	f107 030c 	add.w	r3, r7, #12
 800f12a:	4611      	mov	r1, r2
 800f12c:	4618      	mov	r0, r3
 800f12e:	f000 fbb8 	bl	800f8a2 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1ERKSI_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800f132:	6878      	ldr	r0, [r7, #4]
 800f134:	f7ff ff50 	bl	800efd8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE7derivedEv>
 800f138:	4602      	mov	r2, r0
 800f13a:	f107 030c 	add.w	r3, r7, #12
 800f13e:	6839      	ldr	r1, [r7, #0]
 800f140:	4618      	mov	r0, r3
 800f142:	f000 fbd3 	bl	800f8ec <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>
 800f146:	eeb0 8a40 	vmov.f32	s16, s0
 800f14a:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800f14c:	f107 030c 	add.w	r3, r7, #12
 800f150:	4618      	mov	r0, r3
 800f152:	f7ff ffbc 	bl	800f0ce <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800f156:	eef0 7a48 	vmov.f32	s15, s16
}
 800f15a:	eeb0 0a67 	vmov.f32	s0, s15
 800f15e:	3720      	adds	r7, #32
 800f160:	46bd      	mov	sp, r7
 800f162:	ecbd 8b02 	vpop	{d8}
 800f166:	bd80      	pop	{r7, pc}
 800f168:	08024d7c 	.word	0x08024d7c
 800f16c:	080273dc 	.word	0x080273dc
 800f170:	08024f88 	.word	0x08024f88

0800f174 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800f174:	b580      	push	{r7, lr}
 800f176:	b082      	sub	sp, #8
 800f178:	af00      	add	r7, sp, #0
 800f17a:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800f17c:	2202      	movs	r2, #2
 800f17e:	2101      	movs	r1, #1
 800f180:	6878      	ldr	r0, [r7, #4]
 800f182:	f7fd fd50 	bl	800cc26 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800f186:	6878      	ldr	r0, [r7, #4]
 800f188:	f000 fbc1 	bl	800f90e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSG_>
  }
 800f18c:	bf00      	nop
 800f18e:	3708      	adds	r7, #8
 800f190:	46bd      	mov	sp, r7
 800f192:	bd80      	pop	{r7, pc}

0800f194 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800f194:	b480      	push	{r7}
 800f196:	b083      	sub	sp, #12
 800f198:	af00      	add	r7, sp, #0
 800f19a:	6078      	str	r0, [r7, #4]
    }
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	4618      	mov	r0, r3
 800f1a0:	370c      	adds	r7, #12
 800f1a2:	46bd      	mov	sp, r7
 800f1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a8:	4770      	bx	lr

0800f1aa <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 800f1aa:	b480      	push	{r7}
 800f1ac:	b083      	sub	sp, #12
 800f1ae:	af00      	add	r7, sp, #0
 800f1b0:	6078      	str	r0, [r7, #4]
 800f1b2:	6039      	str	r1, [r7, #0]
}
 800f1b4:	bf00      	nop
 800f1b6:	370c      	adds	r7, #12
 800f1b8:	46bd      	mov	sp, r7
 800f1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1be:	4770      	bx	lr

0800f1c0 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>:
struct evaluator<PlainObjectBase<Derived> >
 800f1c0:	b580      	push	{r7, lr}
 800f1c2:	b082      	sub	sp, #8
 800f1c4:	af00      	add	r7, sp, #0
 800f1c6:	6078      	str	r0, [r7, #4]
 800f1c8:	6878      	ldr	r0, [r7, #4]
 800f1ca:	f000 fbd5 	bl	800f978 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	4618      	mov	r0, r3
 800f1d2:	3708      	adds	r7, #8
 800f1d4:	46bd      	mov	sp, r7
 800f1d6:	bd80      	pop	{r7, pc}

0800f1d8 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>:
struct evaluator<Matrix<Scalar, Rows, Cols, Options, MaxRows, MaxCols> >
 800f1d8:	b580      	push	{r7, lr}
 800f1da:	b082      	sub	sp, #8
 800f1dc:	af00      	add	r7, sp, #0
 800f1de:	6078      	str	r0, [r7, #4]
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	4618      	mov	r0, r3
 800f1e4:	f7ff ffec 	bl	800f1c0 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	3708      	adds	r7, #8
 800f1ee:	46bd      	mov	sp, r7
 800f1f0:	bd80      	pop	{r7, pc}

0800f1f2 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 800f1f2:	b580      	push	{r7, lr}
 800f1f4:	b082      	sub	sp, #8
 800f1f6:	af00      	add	r7, sp, #0
 800f1f8:	6078      	str	r0, [r7, #4]
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	4618      	mov	r0, r3
 800f1fe:	f7ff ffeb 	bl	800f1d8 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 800f202:	6878      	ldr	r0, [r7, #4]
 800f204:	f000 fbad 	bl	800f962 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	4618      	mov	r0, r3
 800f20c:	3708      	adds	r7, #8
 800f20e:	46bd      	mov	sp, r7
 800f210:	bd80      	pop	{r7, pc}

0800f212 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 800f212:	b580      	push	{r7, lr}
 800f214:	b082      	sub	sp, #8
 800f216:	af00      	add	r7, sp, #0
 800f218:	6078      	str	r0, [r7, #4]
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	4618      	mov	r0, r3
 800f21e:	f7ff ffe8 	bl	800f1f2 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfED1Ev>
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	4618      	mov	r0, r3
 800f226:	3708      	adds	r7, #8
 800f228:	46bd      	mov	sp, r7
 800f22a:	bd80      	pop	{r7, pc}

0800f22c <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEELi3ENS_10DenseShapeES9_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 800f22c:	b580      	push	{r7, lr}
 800f22e:	b082      	sub	sp, #8
 800f230:	af00      	add	r7, sp, #0
 800f232:	6078      	str	r0, [r7, #4]
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	330c      	adds	r3, #12
 800f238:	4618      	mov	r0, r3
 800f23a:	f7ff ffea 	bl	800f212 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	3308      	adds	r3, #8
 800f242:	4618      	mov	r0, r3
 800f244:	f7f8 f995 	bl	8007572 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 800f248:	6878      	ldr	r0, [r7, #4]
 800f24a:	f000 fb7f 	bl	800f94c <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEED1Ev>
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	4618      	mov	r0, r3
 800f252:	3708      	adds	r7, #8
 800f254:	46bd      	mov	sp, r7
 800f256:	bd80      	pop	{r7, pc}

0800f258 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 800f258:	b580      	push	{r7, lr}
 800f25a:	b082      	sub	sp, #8
 800f25c:	af00      	add	r7, sp, #0
 800f25e:	6078      	str	r0, [r7, #4]
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	4618      	mov	r0, r3
 800f264:	f7ff ffe2 	bl	800f22c <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEELi3ENS_10DenseShapeES9_ffED1Ev>
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	4618      	mov	r0, r3
 800f26c:	3708      	adds	r7, #8
 800f26e:	46bd      	mov	sp, r7
 800f270:	bd80      	pop	{r7, pc}

0800f272 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 800f272:	b580      	push	{r7, lr}
 800f274:	b090      	sub	sp, #64	; 0x40
 800f276:	af02      	add	r7, sp, #8
 800f278:	60f8      	str	r0, [r7, #12]
 800f27a:	60b9      	str	r1, [r7, #8]
 800f27c:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 800f27e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f282:	68b9      	ldr	r1, [r7, #8]
 800f284:	4618      	mov	r0, r3
 800f286:	f000 fb52 	bl	800f92e <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1ERKS8_>
  resize_if_allowed(dst, src, func);
 800f28a:	687a      	ldr	r2, [r7, #4]
 800f28c:	68b9      	ldr	r1, [r7, #8]
 800f28e:	68f8      	ldr	r0, [r7, #12]
 800f290:	f000 fb9a 	bl	800f9c8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 800f294:	f107 0320 	add.w	r3, r7, #32
 800f298:	68f9      	ldr	r1, [r7, #12]
 800f29a:	4618      	mov	r0, r3
 800f29c:	f7f7 fc2d 	bl	8006afa <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 800f2a0:	68f8      	ldr	r0, [r7, #12]
 800f2a2:	f7f8 fc6b 	bl	8007b7c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv>
 800f2a6:	4603      	mov	r3, r0
 800f2a8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800f2ac:	f107 0120 	add.w	r1, r7, #32
 800f2b0:	f107 0010 	add.w	r0, r7, #16
 800f2b4:	9300      	str	r3, [sp, #0]
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	f000 fbd0 	bl	800fa5c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSC_RKSE_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 800f2bc:	f107 0310 	add.w	r3, r7, #16
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	f000 fbe5 	bl	800fa90 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSG_>
  DstEvaluatorType dstEvaluator(dst);
 800f2c6:	f107 0320 	add.w	r3, r7, #32
 800f2ca:	4618      	mov	r0, r3
 800f2cc:	f7f6 f8db 	bl	8005486 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 800f2d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f2d4:	4618      	mov	r0, r3
 800f2d6:	f7ff ffbf 	bl	800f258 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEED1Ev>
}
 800f2da:	bf00      	nop
 800f2dc:	3738      	adds	r7, #56	; 0x38
 800f2de:	46bd      	mov	sp, r7
 800f2e0:	bd80      	pop	{r7, pc}

0800f2e2 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800f2e2:	b580      	push	{r7, lr}
 800f2e4:	b086      	sub	sp, #24
 800f2e6:	af00      	add	r7, sp, #0
 800f2e8:	60f8      	str	r0, [r7, #12]
 800f2ea:	60b9      	str	r1, [r7, #8]
 800f2ec:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800f2f2:	687a      	ldr	r2, [r7, #4]
 800f2f4:	68b9      	ldr	r1, [r7, #8]
 800f2f6:	6978      	ldr	r0, [r7, #20]
 800f2f8:	f000 fbd5 	bl	800faa6 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSG_RKSI_>
}
 800f2fc:	bf00      	nop
 800f2fe:	3718      	adds	r7, #24
 800f300:	46bd      	mov	sp, r7
 800f302:	bd80      	pop	{r7, pc}

0800f304 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 800f304:	b480      	push	{r7}
 800f306:	b083      	sub	sp, #12
 800f308:	af00      	add	r7, sp, #0
 800f30a:	6078      	str	r0, [r7, #4]
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	332c      	adds	r3, #44	; 0x2c
 800f310:	4618      	mov	r0, r3
 800f312:	370c      	adds	r7, #12
 800f314:	46bd      	mov	sp, r7
 800f316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f31a:	4770      	bx	lr

0800f31c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800f31c:	b480      	push	{r7}
 800f31e:	b083      	sub	sp, #12
 800f320:	af00      	add	r7, sp, #0
 800f322:	6078      	str	r0, [r7, #4]
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	4618      	mov	r0, r3
 800f328:	370c      	adds	r7, #12
 800f32a:	46bd      	mov	sp, r7
 800f32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f330:	4770      	bx	lr

0800f332 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800f332:	b480      	push	{r7}
 800f334:	b083      	sub	sp, #12
 800f336:	af00      	add	r7, sp, #0
 800f338:	6078      	str	r0, [r7, #4]
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	3318      	adds	r3, #24
 800f33e:	4618      	mov	r0, r3
 800f340:	370c      	adds	r7, #12
 800f342:	46bd      	mov	sp, r7
 800f344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f348:	4770      	bx	lr

0800f34a <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1ERSA_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 800f34a:	b580      	push	{r7, lr}
 800f34c:	b082      	sub	sp, #8
 800f34e:	af00      	add	r7, sp, #0
 800f350:	6078      	str	r0, [r7, #4]
 800f352:	6039      	str	r1, [r7, #0]
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	6839      	ldr	r1, [r7, #0]
 800f358:	4618      	mov	r0, r3
 800f35a:	f000 fbb7 	bl	800facc <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1ERKS9_>
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	4618      	mov	r0, r3
 800f362:	3708      	adds	r7, #8
 800f364:	46bd      	mov	sp, r7
 800f366:	bd80      	pop	{r7, pc}

0800f368 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERS7_>:
 800f368:	b580      	push	{r7, lr}
 800f36a:	b082      	sub	sp, #8
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	6078      	str	r0, [r7, #4]
 800f370:	6039      	str	r1, [r7, #0]
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	6839      	ldr	r1, [r7, #0]
 800f376:	4618      	mov	r0, r3
 800f378:	f000 fbb7 	bl	800faea <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERKS6_>
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	4618      	mov	r0, r3
 800f380:	3708      	adds	r7, #8
 800f382:	46bd      	mov	sp, r7
 800f384:	bd80      	pop	{r7, pc}

0800f386 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 800f386:	b480      	push	{r7}
 800f388:	b083      	sub	sp, #12
 800f38a:	af00      	add	r7, sp, #0
 800f38c:	6078      	str	r0, [r7, #4]
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	4618      	mov	r0, r3
 800f392:	370c      	adds	r7, #12
 800f394:	46bd      	mov	sp, r7
 800f396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f39a:	4770      	bx	lr

0800f39c <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800f39c:	b580      	push	{r7, lr}
 800f39e:	b084      	sub	sp, #16
 800f3a0:	af00      	add	r7, sp, #0
 800f3a2:	60f8      	str	r0, [r7, #12]
 800f3a4:	60b9      	str	r1, [r7, #8]
 800f3a6:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	68ba      	ldr	r2, [r7, #8]
 800f3ac:	6879      	ldr	r1, [r7, #4]
 800f3ae:	4618      	mov	r0, r3
 800f3b0:	f000 fbaa 	bl	800fb08 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEE5coeffEii>
 800f3b4:	eef0 7a40 	vmov.f32	s15, s0
  }
 800f3b8:	eeb0 0a67 	vmov.f32	s0, s15
 800f3bc:	3710      	adds	r7, #16
 800f3be:	46bd      	mov	sp, r7
 800f3c0:	bd80      	pop	{r7, pc}

0800f3c2 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_E5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800f3c2:	b5b0      	push	{r4, r5, r7, lr}
 800f3c4:	b084      	sub	sp, #16
 800f3c6:	af00      	add	r7, sp, #0
 800f3c8:	60f8      	str	r0, [r7, #12]
 800f3ca:	60b9      	str	r1, [r7, #8]
 800f3cc:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	681c      	ldr	r4, [r3, #0]
 800f3d2:	68f8      	ldr	r0, [r7, #12]
 800f3d4:	f000 fbb9 	bl	800fb4a <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_E9colStrideEv>
 800f3d8:	4602      	mov	r2, r0
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	fb03 f502 	mul.w	r5, r3, r2
 800f3e0:	68f8      	ldr	r0, [r7, #12]
 800f3e2:	f000 fbbd 	bl	800fb60 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_E9rowStrideEv>
 800f3e6:	4602      	mov	r2, r0
 800f3e8:	68bb      	ldr	r3, [r7, #8]
 800f3ea:	fb02 f303 	mul.w	r3, r2, r3
 800f3ee:	442b      	add	r3, r5
 800f3f0:	009b      	lsls	r3, r3, #2
 800f3f2:	4423      	add	r3, r4
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	ee07 3a90 	vmov	s15, r3
  }
 800f3fa:	eeb0 0a67 	vmov.f32	s0, s15
 800f3fe:	3710      	adds	r7, #16
 800f400:	46bd      	mov	sp, r7
 800f402:	bdb0      	pop	{r4, r5, r7, pc}

0800f404 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 800f404:	b480      	push	{r7}
 800f406:	b085      	sub	sp, #20
 800f408:	af00      	add	r7, sp, #0
 800f40a:	60f8      	str	r0, [r7, #12]
 800f40c:	60b9      	str	r1, [r7, #8]
 800f40e:	607a      	str	r2, [r7, #4]
 800f410:	68bb      	ldr	r3, [r7, #8]
 800f412:	ed93 7a00 	vldr	s14, [r3]
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	edd3 7a00 	vldr	s15, [r3]
 800f41c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f420:	eeb0 0a67 	vmov.f32	s0, s15
 800f424:	3714      	adds	r7, #20
 800f426:	46bd      	mov	sp, r7
 800f428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f42c:	4770      	bx	lr

0800f42e <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS3_RKS5_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 800f42e:	b580      	push	{r7, lr}
 800f430:	b084      	sub	sp, #16
 800f432:	af00      	add	r7, sp, #0
 800f434:	60f8      	str	r0, [r7, #12]
 800f436:	60b9      	str	r1, [r7, #8]
 800f438:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 800f43a:	68b9      	ldr	r1, [r7, #8]
 800f43c:	68f8      	ldr	r0, [r7, #12]
 800f43e:	f000 fb9a 	bl	800fb76 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_EEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 800f442:	687a      	ldr	r2, [r7, #4]
 800f444:	68b9      	ldr	r1, [r7, #8]
 800f446:	68f8      	ldr	r0, [r7, #12]
 800f448:	f000 fba0 	bl	800fb8c <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800f44c:	bf00      	nop
 800f44e:	3710      	adds	r7, #16
 800f450:	46bd      	mov	sp, r7
 800f452:	bd80      	pop	{r7, pc}

0800f454 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::sub_assign_op<Scalar,Scalar> &)
 800f454:	b590      	push	{r4, r7, lr}
 800f456:	b085      	sub	sp, #20
 800f458:	af00      	add	r7, sp, #0
 800f45a:	60f8      	str	r0, [r7, #12]
 800f45c:	60b9      	str	r1, [r7, #8]
 800f45e:	607a      	str	r2, [r7, #4]
    eigen_assert(dst.rows() == src.rows() && dst.cols() == src.cols());
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	4618      	mov	r0, r3
 800f464:	f7f6 fded 	bl	8006042 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800f468:	4604      	mov	r4, r0
 800f46a:	68b8      	ldr	r0, [r7, #8]
 800f46c:	f7f6 ffb0 	bl	80063d0 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4rowsEv>
 800f470:	4603      	mov	r3, r0
 800f472:	429c      	cmp	r4, r3
 800f474:	d10a      	bne.n	800f48c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x38>
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	4618      	mov	r0, r3
 800f47a:	f7f6 fded 	bl	8006058 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800f47e:	4604      	mov	r4, r0
 800f480:	68b8      	ldr	r0, [r7, #8]
 800f482:	f7f6 ffb3 	bl	80063ec <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4colsEv>
 800f486:	4603      	mov	r3, r0
 800f488:	429c      	cmp	r4, r3
 800f48a:	d005      	beq.n	800f498 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x44>
 800f48c:	4b0b      	ldr	r3, [pc, #44]	; (800f4bc <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x68>)
 800f48e:	4a0c      	ldr	r2, [pc, #48]	; (800f4c0 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x6c>)
 800f490:	21b0      	movs	r1, #176	; 0xb0
 800f492:	480c      	ldr	r0, [pc, #48]	; (800f4c4 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x70>)
 800f494:	f00e fcfe 	bl	801de94 <__assert_func>
    generic_product_impl<Lhs, Rhs>::subTo(dst, src.lhs(), src.rhs());
 800f498:	68b8      	ldr	r0, [r7, #8]
 800f49a:	f000 fbaf 	bl	800fbfc <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3lhsEv>
 800f49e:	4604      	mov	r4, r0
 800f4a0:	68b8      	ldr	r0, [r7, #8]
 800f4a2:	f000 fbb7 	bl	800fc14 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3rhsEv>
 800f4a6:	4603      	mov	r3, r0
 800f4a8:	461a      	mov	r2, r3
 800f4aa:	4621      	mov	r1, r4
 800f4ac:	68f8      	ldr	r0, [r7, #12]
 800f4ae:	f000 fbbd 	bl	800fc2c <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEENS_10DenseShapeES5_Li6EE5subToINS2_IfLi1ELi1ELi0ELi1ELi1EEEEEvRT_RKS3_RKS4_>
  }
 800f4b2:	bf00      	nop
 800f4b4:	3714      	adds	r7, #20
 800f4b6:	46bd      	mov	sp, r7
 800f4b8:	bd90      	pop	{r4, r7, pc}
 800f4ba:	bf00      	nop
 800f4bc:	08022a90 	.word	0x08022a90
 800f4c0:	080275b8 	.word	0x080275b8
 800f4c4:	08022f88 	.word	0x08022f88

0800f4c8 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE11lazyProductINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS7_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 800f4c8:	b590      	push	{r4, r7, lr}
 800f4ca:	b085      	sub	sp, #20
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	60f8      	str	r0, [r7, #12]
 800f4d0:	60b9      	str	r1, [r7, #8]
 800f4d2:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 800f4d4:	68b8      	ldr	r0, [r7, #8]
 800f4d6:	f7f6 f806 	bl	80054e6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800f4da:	4604      	mov	r4, r0
 800f4dc:	6878      	ldr	r0, [r7, #4]
 800f4de:	f7f6 fc9b 	bl	8005e18 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 800f4e2:	4603      	mov	r3, r0
 800f4e4:	461a      	mov	r2, r3
 800f4e6:	4621      	mov	r1, r4
 800f4e8:	68f8      	ldr	r0, [r7, #12]
 800f4ea:	f000 fbf3 	bl	800fcd4 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EEC1ERKS2_RKS3_>
}
 800f4ee:	68f8      	ldr	r0, [r7, #12]
 800f4f0:	3714      	adds	r7, #20
 800f4f2:	46bd      	mov	sp, r7
 800f4f4:	bd90      	pop	{r4, r7, pc}

0800f4f6 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800f4f6:	b580      	push	{r7, lr}
 800f4f8:	b086      	sub	sp, #24
 800f4fa:	af00      	add	r7, sp, #0
 800f4fc:	60f8      	str	r0, [r7, #12]
 800f4fe:	60b9      	str	r1, [r7, #8]
 800f500:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800f506:	687a      	ldr	r2, [r7, #4]
 800f508:	68b9      	ldr	r1, [r7, #8]
 800f50a:	6978      	ldr	r0, [r7, #20]
 800f50c:	f000 fc10 	bl	800fd30 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_>
}
 800f510:	bf00      	nop
 800f512:	3718      	adds	r7, #24
 800f514:	46bd      	mov	sp, r7
 800f516:	bd80      	pop	{r7, pc}

0800f518 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800f518:	b480      	push	{r7}
 800f51a:	b083      	sub	sp, #12
 800f51c:	af00      	add	r7, sp, #0
 800f51e:	6078      	str	r0, [r7, #4]
    }
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	4618      	mov	r0, r3
 800f524:	370c      	adds	r7, #12
 800f526:	46bd      	mov	sp, r7
 800f528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f52c:	4770      	bx	lr

0800f52e <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 800f52e:	b480      	push	{r7}
 800f530:	b083      	sub	sp, #12
 800f532:	af00      	add	r7, sp, #0
 800f534:	6078      	str	r0, [r7, #4]
 800f536:	6039      	str	r1, [r7, #0]
    {}
 800f538:	bf00      	nop
 800f53a:	370c      	adds	r7, #12
 800f53c:	46bd      	mov	sp, r7
 800f53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f542:	4770      	bx	lr

0800f544 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800f544:	b480      	push	{r7}
 800f546:	b083      	sub	sp, #12
 800f548:	af00      	add	r7, sp, #0
 800f54a:	6078      	str	r0, [r7, #4]
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	4618      	mov	r0, r3
 800f550:	370c      	adds	r7, #12
 800f552:	46bd      	mov	sp, r7
 800f554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f558:	4770      	bx	lr

0800f55a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE4DataC1ERKSG_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 800f55a:	b590      	push	{r4, r7, lr}
 800f55c:	b083      	sub	sp, #12
 800f55e:	af00      	add	r7, sp, #0
 800f560:	6078      	str	r0, [r7, #4]
 800f562:	6039      	str	r1, [r7, #0]
 800f564:	687c      	ldr	r4, [r7, #4]
 800f566:	6838      	ldr	r0, [r7, #0]
 800f568:	f000 fbf5 	bl	800fd56 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE7functorEv>
 800f56c:	4603      	mov	r3, r0
 800f56e:	4619      	mov	r1, r3
 800f570:	4620      	mov	r0, r4
 800f572:	f7f6 f8a1 	bl	80056b8 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	1d1c      	adds	r4, r3, #4
 800f57a:	6838      	ldr	r0, [r7, #0]
 800f57c:	f000 fbf7 	bl	800fd6e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE3lhsEv>
 800f580:	4603      	mov	r3, r0
 800f582:	4619      	mov	r1, r3
 800f584:	4620      	mov	r0, r4
 800f586:	f7ff fbde 	bl	800ed46 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERSA_>
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	f103 040c 	add.w	r4, r3, #12
 800f590:	6838      	ldr	r0, [r7, #0]
 800f592:	f000 fbf7 	bl	800fd84 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE3rhsEv>
 800f596:	4603      	mov	r3, r0
 800f598:	4619      	mov	r1, r3
 800f59a:	4620      	mov	r0, r4
 800f59c:	f000 fbfe 	bl	800fd9c <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERS7_>
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	370c      	adds	r7, #12
 800f5a6:	46bd      	mov	sp, r7
 800f5a8:	bd90      	pop	{r4, r7, pc}

0800f5aa <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 800f5aa:	b580      	push	{r7, lr}
 800f5ac:	b084      	sub	sp, #16
 800f5ae:	af00      	add	r7, sp, #0
 800f5b0:	60f8      	str	r0, [r7, #12]
 800f5b2:	60b9      	str	r1, [r7, #8]
 800f5b4:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	68ba      	ldr	r2, [r7, #8]
 800f5ba:	6879      	ldr	r1, [r7, #4]
 800f5bc:	4618      	mov	r0, r3
 800f5be:	f000 fbfc 	bl	800fdba <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE5coeffEii>
 800f5c2:	eef0 7a40 	vmov.f32	s15, s0
 800f5c6:	eeb0 0a67 	vmov.f32	s0, s15
 800f5ca:	3710      	adds	r7, #16
 800f5cc:	46bd      	mov	sp, r7
 800f5ce:	bd80      	pop	{r7, pc}

0800f5d0 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi1ELi1EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800f5d0:	b580      	push	{r7, lr}
 800f5d2:	b082      	sub	sp, #8
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	6078      	str	r0, [r7, #4]
 800f5d8:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800f5da:	2201      	movs	r2, #1
 800f5dc:	2100      	movs	r1, #0
 800f5de:	6878      	ldr	r0, [r7, #4]
 800f5e0:	f7ff ffe3 	bl	800f5aa <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 800f5e4:	eef0 7a40 	vmov.f32	s15, s0
  }
 800f5e8:	eeb0 0a67 	vmov.f32	s0, s15
 800f5ec:	3708      	adds	r7, #8
 800f5ee:	46bd      	mov	sp, r7
 800f5f0:	bd80      	pop	{r7, pc}

0800f5f2 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi2ELi1EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800f5f2:	b580      	push	{r7, lr}
 800f5f4:	b082      	sub	sp, #8
 800f5f6:	af00      	add	r7, sp, #0
 800f5f8:	6078      	str	r0, [r7, #4]
 800f5fa:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800f5fc:	2202      	movs	r2, #2
 800f5fe:	2100      	movs	r1, #0
 800f600:	6878      	ldr	r0, [r7, #4]
 800f602:	f7ff ffd2 	bl	800f5aa <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 800f606:	eef0 7a40 	vmov.f32	s15, s0
  }
 800f60a:	eeb0 0a67 	vmov.f32	s0, s15
 800f60e:	3708      	adds	r7, #8
 800f610:	46bd      	mov	sp, r7
 800f612:	bd80      	pop	{r7, pc}

0800f614 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 800f614:	b480      	push	{r7}
 800f616:	b083      	sub	sp, #12
 800f618:	af00      	add	r7, sp, #0
 800f61a:	6078      	str	r0, [r7, #4]
 800f61c:	bf00      	nop
 800f61e:	370c      	adds	r7, #12
 800f620:	46bd      	mov	sp, r7
 800f622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f626:	4770      	bx	lr

0800f628 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 800f628:	b480      	push	{r7}
 800f62a:	b083      	sub	sp, #12
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	6078      	str	r0, [r7, #4]
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	3334      	adds	r3, #52	; 0x34
 800f634:	4618      	mov	r0, r3
 800f636:	370c      	adds	r7, #12
 800f638:	46bd      	mov	sp, r7
 800f63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f63e:	4770      	bx	lr

0800f640 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800f640:	b480      	push	{r7}
 800f642:	b083      	sub	sp, #12
 800f644:	af00      	add	r7, sp, #0
 800f646:	6078      	str	r0, [r7, #4]
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	3304      	adds	r3, #4
 800f64c:	4618      	mov	r0, r3
 800f64e:	370c      	adds	r7, #12
 800f650:	46bd      	mov	sp, r7
 800f652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f656:	4770      	bx	lr

0800f658 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800f658:	b480      	push	{r7}
 800f65a:	b083      	sub	sp, #12
 800f65c:	af00      	add	r7, sp, #0
 800f65e:	6078      	str	r0, [r7, #4]
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	331c      	adds	r3, #28
 800f664:	4618      	mov	r0, r3
 800f666:	370c      	adds	r7, #12
 800f668:	46bd      	mov	sp, r7
 800f66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f66e:	4770      	bx	lr

0800f670 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1ERSK_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 800f670:	b580      	push	{r7, lr}
 800f672:	b082      	sub	sp, #8
 800f674:	af00      	add	r7, sp, #0
 800f676:	6078      	str	r0, [r7, #4]
 800f678:	6039      	str	r1, [r7, #0]
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	6839      	ldr	r1, [r7, #0]
 800f67e:	4618      	mov	r0, r3
 800f680:	f000 fbcb 	bl	800fe1a <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1ERKSJ_>
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	4618      	mov	r0, r3
 800f688:	3708      	adds	r7, #8
 800f68a:	46bd      	mov	sp, r7
 800f68c:	bd80      	pop	{r7, pc}

0800f68e <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1ERS9_>:
 800f68e:	b580      	push	{r7, lr}
 800f690:	b082      	sub	sp, #8
 800f692:	af00      	add	r7, sp, #0
 800f694:	6078      	str	r0, [r7, #4]
 800f696:	6039      	str	r1, [r7, #0]
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	6839      	ldr	r1, [r7, #0]
 800f69c:	4618      	mov	r0, r3
 800f69e:	f000 fbcb 	bl	800fe38 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1ERKS8_>
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	3708      	adds	r7, #8
 800f6a8:	46bd      	mov	sp, r7
 800f6aa:	bd80      	pop	{r7, pc}

0800f6ac <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 800f6ac:	b480      	push	{r7}
 800f6ae:	b083      	sub	sp, #12
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	6078      	str	r0, [r7, #4]
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	370c      	adds	r7, #12
 800f6ba:	46bd      	mov	sp, r7
 800f6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c0:	4770      	bx	lr

0800f6c2 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800f6c2:	b580      	push	{r7, lr}
 800f6c4:	b084      	sub	sp, #16
 800f6c6:	af00      	add	r7, sp, #0
 800f6c8:	60f8      	str	r0, [r7, #12]
 800f6ca:	60b9      	str	r1, [r7, #8]
 800f6cc:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	68ba      	ldr	r2, [r7, #8]
 800f6d2:	6879      	ldr	r1, [r7, #4]
 800f6d4:	4618      	mov	r0, r3
 800f6d6:	f000 fbc6 	bl	800fe66 <_ZNK5Eigen8internal15unary_evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS0_10IndexBasedEfE5coeffEii>
 800f6da:	eef0 7a40 	vmov.f32	s15, s0
  }
 800f6de:	eeb0 0a67 	vmov.f32	s0, s15
 800f6e2:	3710      	adds	r7, #16
 800f6e4:	46bd      	mov	sp, r7
 800f6e6:	bd80      	pop	{r7, pc}

0800f6e8 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800f6e8:	b5b0      	push	{r4, r5, r7, lr}
 800f6ea:	b084      	sub	sp, #16
 800f6ec:	af00      	add	r7, sp, #0
 800f6ee:	60f8      	str	r0, [r7, #12]
 800f6f0:	60b9      	str	r1, [r7, #8]
 800f6f2:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	681c      	ldr	r4, [r3, #0]
 800f6f8:	68f8      	ldr	r0, [r7, #12]
 800f6fa:	f000 fbd4 	bl	800fea6 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEE9colStrideEv>
 800f6fe:	4602      	mov	r2, r0
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	fb03 f502 	mul.w	r5, r3, r2
 800f706:	68f8      	ldr	r0, [r7, #12]
 800f708:	f000 fbd8 	bl	800febc <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEE9rowStrideEv>
 800f70c:	4602      	mov	r2, r0
 800f70e:	68bb      	ldr	r3, [r7, #8]
 800f710:	fb02 f303 	mul.w	r3, r2, r3
 800f714:	442b      	add	r3, r5
 800f716:	009b      	lsls	r3, r3, #2
 800f718:	4423      	add	r3, r4
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	ee07 3a90 	vmov	s15, r3
  }
 800f720:	eeb0 0a67 	vmov.f32	s0, s15
 800f724:	3710      	adds	r7, #16
 800f726:	46bd      	mov	sp, r7
 800f728:	bdb0      	pop	{r4, r5, r7, pc}

0800f72a <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERKS9_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 800f72a:	b580      	push	{r7, lr}
 800f72c:	b082      	sub	sp, #8
 800f72e:	af00      	add	r7, sp, #0
 800f730:	6078      	str	r0, [r7, #4]
 800f732:	6039      	str	r1, [r7, #0]
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	6839      	ldr	r1, [r7, #0]
 800f738:	4618      	mov	r0, r3
 800f73a:	f000 fbca 	bl	800fed2 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfEC1ERKS9_>
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	4618      	mov	r0, r3
 800f742:	3708      	adds	r7, #8
 800f744:	46bd      	mov	sp, r7
 800f746:	bd80      	pop	{r7, pc}

0800f748 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 800f748:	b580      	push	{r7, lr}
 800f74a:	b082      	sub	sp, #8
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	6078      	str	r0, [r7, #4]
 800f750:	6039      	str	r1, [r7, #0]
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	6839      	ldr	r1, [r7, #0]
 800f756:	4618      	mov	r0, r3
 800f758:	f000 fbd1 	bl	800fefe <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EEC1ERKNS_5BlockIS4_Li3ELi1ELb1EEE>
  }
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	4618      	mov	r0, r3
 800f760:	3708      	adds	r7, #8
 800f762:	46bd      	mov	sp, r7
 800f764:	bd80      	pop	{r7, pc}

0800f766 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 800f766:	b480      	push	{r7}
 800f768:	b083      	sub	sp, #12
 800f76a:	af00      	add	r7, sp, #0
 800f76c:	6078      	str	r0, [r7, #4]
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	4618      	mov	r0, r3
 800f772:	370c      	adds	r7, #12
 800f774:	46bd      	mov	sp, r7
 800f776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f77a:	4770      	bx	lr

0800f77c <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800f77c:	b580      	push	{r7, lr}
 800f77e:	b084      	sub	sp, #16
 800f780:	af00      	add	r7, sp, #0
 800f782:	60f8      	str	r0, [r7, #12]
 800f784:	60b9      	str	r1, [r7, #8]
 800f786:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	68ba      	ldr	r2, [r7, #8]
 800f78c:	6879      	ldr	r1, [r7, #4]
 800f78e:	4618      	mov	r0, r3
 800f790:	f000 fbc9 	bl	800ff26 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEE5coeffEii>
 800f794:	eef0 7a40 	vmov.f32	s15, s0
  }
 800f798:	eeb0 0a67 	vmov.f32	s0, s15
 800f79c:	3710      	adds	r7, #16
 800f79e:	46bd      	mov	sp, r7
 800f7a0:	bd80      	pop	{r7, pc}

0800f7a2 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_E5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800f7a2:	b5b0      	push	{r4, r5, r7, lr}
 800f7a4:	b084      	sub	sp, #16
 800f7a6:	af00      	add	r7, sp, #0
 800f7a8:	60f8      	str	r0, [r7, #12]
 800f7aa:	60b9      	str	r1, [r7, #8]
 800f7ac:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	681c      	ldr	r4, [r3, #0]
 800f7b2:	68f8      	ldr	r0, [r7, #12]
 800f7b4:	f000 fbd8 	bl	800ff68 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_E9colStrideEv>
 800f7b8:	4602      	mov	r2, r0
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	fb03 f502 	mul.w	r5, r3, r2
 800f7c0:	68f8      	ldr	r0, [r7, #12]
 800f7c2:	f000 fbdc 	bl	800ff7e <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_E9rowStrideEv>
 800f7c6:	4602      	mov	r2, r0
 800f7c8:	68bb      	ldr	r3, [r7, #8]
 800f7ca:	fb02 f303 	mul.w	r3, r2, r3
 800f7ce:	442b      	add	r3, r5
 800f7d0:	009b      	lsls	r3, r3, #2
 800f7d2:	4423      	add	r3, r4
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	ee07 3a90 	vmov	s15, r3
  }
 800f7da:	eeb0 0a67 	vmov.f32	s0, s15
 800f7de:	3710      	adds	r7, #16
 800f7e0:	46bd      	mov	sp, r7
 800f7e2:	bdb0      	pop	{r4, r5, r7, pc}

0800f7e4 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800f7e4:	b480      	push	{r7}
 800f7e6:	b083      	sub	sp, #12
 800f7e8:	af00      	add	r7, sp, #0
 800f7ea:	6078      	str	r0, [r7, #4]
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	370c      	adds	r7, #12
 800f7f4:	46bd      	mov	sp, r7
 800f7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7fa:	4770      	bx	lr

0800f7fc <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800f7fc:	b480      	push	{r7}
 800f7fe:	b083      	sub	sp, #12
 800f800:	af00      	add	r7, sp, #0
 800f802:	6078      	str	r0, [r7, #4]
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	685b      	ldr	r3, [r3, #4]
 800f808:	4618      	mov	r0, r3
 800f80a:	370c      	adds	r7, #12
 800f80c:	46bd      	mov	sp, r7
 800f80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f812:	4770      	bx	lr

0800f814 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS_10DenseShapeES4_Li3EE6evalToIS3_EEvRT_RKS3_SA_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 800f814:	b580      	push	{r7, lr}
 800f816:	b088      	sub	sp, #32
 800f818:	af00      	add	r7, sp, #0
 800f81a:	60f8      	str	r0, [r7, #12]
 800f81c:	60b9      	str	r1, [r7, #8]
 800f81e:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 800f820:	f107 0314 	add.w	r3, r7, #20
 800f824:	687a      	ldr	r2, [r7, #4]
 800f826:	68b9      	ldr	r1, [r7, #8]
 800f828:	4618      	mov	r0, r3
 800f82a:	f000 fbb3 	bl	800ff94 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE11lazyProductIS2_EEKNS_7ProductIS2_T_Li1EEERKNS0_IS6_EE>
 800f82e:	f107 031c 	add.w	r3, r7, #28
 800f832:	4618      	mov	r0, r3
 800f834:	f7f7 fc45 	bl	80070c2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800f838:	f107 021c 	add.w	r2, r7, #28
 800f83c:	f107 0314 	add.w	r3, r7, #20
 800f840:	4619      	mov	r1, r3
 800f842:	68f8      	ldr	r0, [r7, #12]
 800f844:	f000 fbbd 	bl	800ffc2 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800f848:	bf00      	nop
 800f84a:	3720      	adds	r7, #32
 800f84c:	46bd      	mov	sp, r7
 800f84e:	bd80      	pop	{r7, pc}

0800f850 <_ZN5Eigen9BlockImplIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ENS_5DenseEEC1ERS5_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 800f850:	b580      	push	{r7, lr}
 800f852:	b084      	sub	sp, #16
 800f854:	af00      	add	r7, sp, #0
 800f856:	60f8      	str	r0, [r7, #12]
 800f858:	60b9      	str	r1, [r7, #8]
 800f85a:	607a      	str	r2, [r7, #4]
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	687a      	ldr	r2, [r7, #4]
 800f860:	68b9      	ldr	r1, [r7, #8]
 800f862:	4618      	mov	r0, r3
 800f864:	f000 fbbe 	bl	800ffe4 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EEC1ERS6_i>
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	4618      	mov	r0, r3
 800f86c:	3710      	adds	r7, #16
 800f86e:	46bd      	mov	sp, r7
 800f870:	bd80      	pop	{r7, pc}

0800f872 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800f872:	b480      	push	{r7}
 800f874:	b083      	sub	sp, #12
 800f876:	af00      	add	r7, sp, #0
 800f878:	6078      	str	r0, [r7, #4]
    }
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	4618      	mov	r0, r3
 800f87e:	370c      	adds	r7, #12
 800f880:	46bd      	mov	sp, r7
 800f882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f886:	4770      	bx	lr

0800f888 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 800f888:	b580      	push	{r7, lr}
 800f88a:	b082      	sub	sp, #8
 800f88c:	af00      	add	r7, sp, #0
 800f88e:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	4618      	mov	r0, r3
 800f894:	f7fc f889 	bl	800b9aa <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 800f898:	4603      	mov	r3, r0
    }
 800f89a:	4618      	mov	r0, r3
 800f89c:	3708      	adds	r7, #8
 800f89e:	46bd      	mov	sp, r7
 800f8a0:	bd80      	pop	{r7, pc}

0800f8a2 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1ERKSI_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 800f8a2:	b580      	push	{r7, lr}
 800f8a4:	b082      	sub	sp, #8
 800f8a6:	af00      	add	r7, sp, #0
 800f8a8:	6078      	str	r0, [r7, #4]
 800f8aa:	6039      	str	r1, [r7, #0]
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	6839      	ldr	r1, [r7, #0]
 800f8b0:	4618      	mov	r0, r3
 800f8b2:	f000 fbcd 	bl	8010050 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1ERKSI_>
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	4618      	mov	r0, r3
 800f8ba:	3708      	adds	r7, #8
 800f8bc:	46bd      	mov	sp, r7
 800f8be:	bd80      	pop	{r7, pc}

0800f8c0 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800f8c0:	b480      	push	{r7}
 800f8c2:	b083      	sub	sp, #12
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	6078      	str	r0, [r7, #4]
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	370c      	adds	r7, #12
 800f8ce:	46bd      	mov	sp, r7
 800f8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d4:	4770      	bx	lr

0800f8d6 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEED1Ev>:
 800f8d6:	b480      	push	{r7}
 800f8d8:	b083      	sub	sp, #12
 800f8da:	af00      	add	r7, sp, #0
 800f8dc:	6078      	str	r0, [r7, #4]
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	4618      	mov	r0, r3
 800f8e2:	370c      	adds	r7, #12
 800f8e4:	46bd      	mov	sp, r7
 800f8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ea:	4770      	bx	lr

0800f8ec <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 800f8ec:	b580      	push	{r7, lr}
 800f8ee:	b084      	sub	sp, #16
 800f8f0:	af00      	add	r7, sp, #0
 800f8f2:	60f8      	str	r0, [r7, #12]
 800f8f4:	60b9      	str	r1, [r7, #8]
 800f8f6:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 800f8f8:	68b9      	ldr	r1, [r7, #8]
 800f8fa:	68f8      	ldr	r0, [r7, #12]
 800f8fc:	f000 fbb7 	bl	801006e <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi0ELi3EE3runERKSM_RKS3_>
 800f900:	eef0 7a40 	vmov.f32	s15, s0
  }
 800f904:	eeb0 0a67 	vmov.f32	s0, s15
 800f908:	3710      	adds	r7, #16
 800f90a:	46bd      	mov	sp, r7
 800f90c:	bd80      	pop	{r7, pc}

0800f90e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800f90e:	b580      	push	{r7, lr}
 800f910:	b082      	sub	sp, #8
 800f912:	af00      	add	r7, sp, #0
 800f914:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800f916:	2200      	movs	r2, #0
 800f918:	2102      	movs	r1, #2
 800f91a:	6878      	ldr	r0, [r7, #4]
 800f91c:	f7fd f983 	bl	800cc26 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800f920:	6878      	ldr	r0, [r7, #4]
 800f922:	f000 fbc8 	bl	80100b6 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSG_>
  }
 800f926:	bf00      	nop
 800f928:	3708      	adds	r7, #8
 800f92a:	46bd      	mov	sp, r7
 800f92c:	bd80      	pop	{r7, pc}

0800f92e <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1ERKS8_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800f92e:	b580      	push	{r7, lr}
 800f930:	b082      	sub	sp, #8
 800f932:	af00      	add	r7, sp, #0
 800f934:	6078      	str	r0, [r7, #4]
 800f936:	6039      	str	r1, [r7, #0]
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	6839      	ldr	r1, [r7, #0]
 800f93c:	4618      	mov	r0, r3
 800f93e:	f000 fbca 	bl	80100d6 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEELi3ENS_10DenseShapeES9_ffEC1ERKS8_>
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	4618      	mov	r0, r3
 800f946:	3708      	adds	r7, #8
 800f948:	46bd      	mov	sp, r7
 800f94a:	bd80      	pop	{r7, pc}

0800f94c <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEED1Ev>:
 800f94c:	b480      	push	{r7}
 800f94e:	b083      	sub	sp, #12
 800f950:	af00      	add	r7, sp, #0
 800f952:	6078      	str	r0, [r7, #4]
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	4618      	mov	r0, r3
 800f958:	370c      	adds	r7, #12
 800f95a:	46bd      	mov	sp, r7
 800f95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f960:	4770      	bx	lr

0800f962 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>:
 800f962:	b480      	push	{r7}
 800f964:	b083      	sub	sp, #12
 800f966:	af00      	add	r7, sp, #0
 800f968:	6078      	str	r0, [r7, #4]
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	4618      	mov	r0, r3
 800f96e:	370c      	adds	r7, #12
 800f970:	46bd      	mov	sp, r7
 800f972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f976:	4770      	bx	lr

0800f978 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>:
 800f978:	b480      	push	{r7}
 800f97a:	b083      	sub	sp, #12
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	6078      	str	r0, [r7, #4]
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	4618      	mov	r0, r3
 800f984:	370c      	adds	r7, #12
 800f986:	46bd      	mov	sp, r7
 800f988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f98c:	4770      	bx	lr

0800f98e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 800f98e:	b580      	push	{r7, lr}
 800f990:	b082      	sub	sp, #8
 800f992:	af00      	add	r7, sp, #0
 800f994:	6078      	str	r0, [r7, #4]
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	4618      	mov	r0, r3
 800f99c:	f7f5 fb61 	bl	8005062 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800f9a0:	4603      	mov	r3, r0
 800f9a2:	4618      	mov	r0, r3
 800f9a4:	3708      	adds	r7, #8
 800f9a6:	46bd      	mov	sp, r7
 800f9a8:	bd80      	pop	{r7, pc}

0800f9aa <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 800f9aa:	b580      	push	{r7, lr}
 800f9ac:	b082      	sub	sp, #8
 800f9ae:	af00      	add	r7, sp, #0
 800f9b0:	6078      	str	r0, [r7, #4]
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	3304      	adds	r3, #4
 800f9b6:	4618      	mov	r0, r3
 800f9b8:	f7f7 fa3b 	bl	8006e32 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 800f9bc:	4603      	mov	r3, r0
 800f9be:	4618      	mov	r0, r3
 800f9c0:	3708      	adds	r7, #8
 800f9c2:	46bd      	mov	sp, r7
 800f9c4:	bd80      	pop	{r7, pc}
	...

0800f9c8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 800f9c8:	b580      	push	{r7, lr}
 800f9ca:	b086      	sub	sp, #24
 800f9cc:	af00      	add	r7, sp, #0
 800f9ce:	60f8      	str	r0, [r7, #12]
 800f9d0:	60b9      	str	r1, [r7, #8]
 800f9d2:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 800f9d4:	68b8      	ldr	r0, [r7, #8]
 800f9d6:	f7ff ffda 	bl	800f98e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE4rowsEv>
 800f9da:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 800f9dc:	68b8      	ldr	r0, [r7, #8]
 800f9de:	f7ff ffe4 	bl	800f9aa <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE4colsEv>
 800f9e2:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	4618      	mov	r0, r3
 800f9e8:	f7f5 fbe1 	bl	80051ae <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800f9ec:	4602      	mov	r2, r0
 800f9ee:	697b      	ldr	r3, [r7, #20]
 800f9f0:	4293      	cmp	r3, r2
 800f9f2:	d107      	bne.n	800fa04 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	f7f5 fbce 	bl	8005198 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800f9fc:	4602      	mov	r2, r0
 800f9fe:	693b      	ldr	r3, [r7, #16]
 800fa00:	4293      	cmp	r3, r2
 800fa02:	d001      	beq.n	800fa08 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 800fa04:	2301      	movs	r3, #1
 800fa06:	e000      	b.n	800fa0a <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 800fa08:	2300      	movs	r3, #0
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d005      	beq.n	800fa1a <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	693a      	ldr	r2, [r7, #16]
 800fa12:	6979      	ldr	r1, [r7, #20]
 800fa14:	4618      	mov	r0, r3
 800fa16:	f7f8 fad5 	bl	8007fc4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	4618      	mov	r0, r3
 800fa1e:	f7f5 fbc6 	bl	80051ae <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800fa22:	4602      	mov	r2, r0
 800fa24:	697b      	ldr	r3, [r7, #20]
 800fa26:	4293      	cmp	r3, r2
 800fa28:	d107      	bne.n	800fa3a <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	4618      	mov	r0, r3
 800fa2e:	f7f5 fbb3 	bl	8005198 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800fa32:	4602      	mov	r2, r0
 800fa34:	693b      	ldr	r3, [r7, #16]
 800fa36:	4293      	cmp	r3, r2
 800fa38:	d006      	beq.n	800fa48 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 800fa3a:	4b05      	ldr	r3, [pc, #20]	; (800fa50 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 800fa3c:	4a05      	ldr	r2, [pc, #20]	; (800fa54 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 800fa3e:	f240 21fd 	movw	r1, #765	; 0x2fd
 800fa42:	4805      	ldr	r0, [pc, #20]	; (800fa58 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 800fa44:	f00e fa26 	bl	801de94 <__assert_func>
}
 800fa48:	bf00      	nop
 800fa4a:	3718      	adds	r7, #24
 800fa4c:	46bd      	mov	sp, r7
 800fa4e:	bd80      	pop	{r7, pc}
 800fa50:	08022374 	.word	0x08022374
 800fa54:	08027934 	.word	0x08027934
 800fa58:	08022488 	.word	0x08022488

0800fa5c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSC_RKSE_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 800fa5c:	b480      	push	{r7}
 800fa5e:	b085      	sub	sp, #20
 800fa60:	af00      	add	r7, sp, #0
 800fa62:	60f8      	str	r0, [r7, #12]
 800fa64:	60b9      	str	r1, [r7, #8]
 800fa66:	607a      	str	r2, [r7, #4]
 800fa68:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	68ba      	ldr	r2, [r7, #8]
 800fa6e:	601a      	str	r2, [r3, #0]
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	687a      	ldr	r2, [r7, #4]
 800fa74:	605a      	str	r2, [r3, #4]
 800fa76:	68fb      	ldr	r3, [r7, #12]
 800fa78:	683a      	ldr	r2, [r7, #0]
 800fa7a:	609a      	str	r2, [r3, #8]
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	69ba      	ldr	r2, [r7, #24]
 800fa80:	60da      	str	r2, [r3, #12]
  }
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	4618      	mov	r0, r3
 800fa86:	3714      	adds	r7, #20
 800fa88:	46bd      	mov	sp, r7
 800fa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa8e:	4770      	bx	lr

0800fa90 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800fa90:	b580      	push	{r7, lr}
 800fa92:	b082      	sub	sp, #8
 800fa94:	af00      	add	r7, sp, #0
 800fa96:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 800fa98:	6878      	ldr	r0, [r7, #4]
 800fa9a:	f000 fb53 	bl	8010144 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSG_>
  }
 800fa9e:	bf00      	nop
 800faa0:	3708      	adds	r7, #8
 800faa2:	46bd      	mov	sp, r7
 800faa4:	bd80      	pop	{r7, pc}

0800faa6 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSG_RKSI_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 800faa6:	b580      	push	{r7, lr}
 800faa8:	b084      	sub	sp, #16
 800faaa:	af00      	add	r7, sp, #0
 800faac:	60f8      	str	r0, [r7, #12]
 800faae:	60b9      	str	r1, [r7, #8]
 800fab0:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 800fab2:	68b9      	ldr	r1, [r7, #8]
 800fab4:	68f8      	ldr	r0, [r7, #12]
 800fab6:	f000 fb54 	bl	8010162 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 800faba:	687a      	ldr	r2, [r7, #4]
 800fabc:	68b9      	ldr	r1, [r7, #8]
 800fabe:	68f8      	ldr	r0, [r7, #12]
 800fac0:	f000 fbbe 	bl	8010240 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800fac4:	bf00      	nop
 800fac6:	3710      	adds	r7, #16
 800fac8:	46bd      	mov	sp, r7
 800faca:	bd80      	pop	{r7, pc}

0800facc <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1ERKS9_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 800facc:	b580      	push	{r7, lr}
 800face:	b082      	sub	sp, #8
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	6078      	str	r0, [r7, #4]
 800fad4:	6039      	str	r1, [r7, #0]
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	6839      	ldr	r1, [r7, #0]
 800fada:	4618      	mov	r0, r3
 800fadc:	f000 fbe8 	bl	80102b0 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEENS0_10IndexBasedEfEC1ERKS9_>
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	4618      	mov	r0, r3
 800fae4:	3708      	adds	r7, #8
 800fae6:	46bd      	mov	sp, r7
 800fae8:	bd80      	pop	{r7, pc}

0800faea <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 800faea:	b580      	push	{r7, lr}
 800faec:	b082      	sub	sp, #8
 800faee:	af00      	add	r7, sp, #0
 800faf0:	6078      	str	r0, [r7, #4]
 800faf2:	6039      	str	r1, [r7, #0]
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	6839      	ldr	r1, [r7, #0]
 800faf8:	4618      	mov	r0, r3
 800fafa:	f000 fbef 	bl	80102dc <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EEC1ERKNS_5BlockIS4_Li1ELi1ELb1EEE>
  }
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	4618      	mov	r0, r3
 800fb02:	3708      	adds	r7, #8
 800fb04:	46bd      	mov	sp, r7
 800fb06:	bd80      	pop	{r7, pc}

0800fb08 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800fb08:	b5b0      	push	{r4, r5, r7, lr}
 800fb0a:	b084      	sub	sp, #16
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	60f8      	str	r0, [r7, #12]
 800fb10:	60b9      	str	r1, [r7, #8]
 800fb12:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	681c      	ldr	r4, [r3, #0]
 800fb18:	68f8      	ldr	r0, [r7, #12]
 800fb1a:	f000 fbf3 	bl	8010304 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEE9colStrideEv>
 800fb1e:	4602      	mov	r2, r0
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	fb03 f502 	mul.w	r5, r3, r2
 800fb26:	68f8      	ldr	r0, [r7, #12]
 800fb28:	f000 fbf7 	bl	801031a <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEE9rowStrideEv>
 800fb2c:	4602      	mov	r2, r0
 800fb2e:	68bb      	ldr	r3, [r7, #8]
 800fb30:	fb02 f303 	mul.w	r3, r2, r3
 800fb34:	442b      	add	r3, r5
 800fb36:	009b      	lsls	r3, r3, #2
 800fb38:	4423      	add	r3, r4
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	ee07 3a90 	vmov	s15, r3
  }
 800fb40:	eeb0 0a67 	vmov.f32	s0, s15
 800fb44:	3710      	adds	r7, #16
 800fb46:	46bd      	mov	sp, r7
 800fb48:	bdb0      	pop	{r4, r5, r7, pc}

0800fb4a <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_E9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 800fb4a:	b580      	push	{r7, lr}
 800fb4c:	b082      	sub	sp, #8
 800fb4e:	af00      	add	r7, sp, #0
 800fb50:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 800fb52:	f7f7 f858 	bl	8006c06 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800fb56:	4603      	mov	r3, r0
  }
 800fb58:	4618      	mov	r0, r3
 800fb5a:	3708      	adds	r7, #8
 800fb5c:	46bd      	mov	sp, r7
 800fb5e:	bd80      	pop	{r7, pc}

0800fb60 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_E9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 800fb60:	b580      	push	{r7, lr}
 800fb62:	b082      	sub	sp, #8
 800fb64:	af00      	add	r7, sp, #0
 800fb66:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 800fb68:	f7f7 f84d 	bl	8006c06 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800fb6c:	4603      	mov	r3, r0
  }
 800fb6e:	4618      	mov	r0, r3
 800fb70:	3708      	adds	r7, #8
 800fb72:	46bd      	mov	sp, r7
 800fb74:	bd80      	pop	{r7, pc}

0800fb76 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_EEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 800fb76:	b480      	push	{r7}
 800fb78:	b083      	sub	sp, #12
 800fb7a:	af00      	add	r7, sp, #0
 800fb7c:	6078      	str	r0, [r7, #4]
 800fb7e:	6039      	str	r1, [r7, #0]
}
 800fb80:	bf00      	nop
 800fb82:	370c      	adds	r7, #12
 800fb84:	46bd      	mov	sp, r7
 800fb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb8a:	4770      	bx	lr

0800fb8c <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 800fb8c:	b580      	push	{r7, lr}
 800fb8e:	b08c      	sub	sp, #48	; 0x30
 800fb90:	af02      	add	r7, sp, #8
 800fb92:	60f8      	str	r0, [r7, #12]
 800fb94:	60b9      	str	r1, [r7, #8]
 800fb96:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 800fb98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fb9c:	68b9      	ldr	r1, [r7, #8]
 800fb9e:	4618      	mov	r0, r3
 800fba0:	f7fa fd4f 	bl	800a642 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
  resize_if_allowed(dst, src, func);
 800fba4:	687a      	ldr	r2, [r7, #4]
 800fba6:	68b9      	ldr	r1, [r7, #8]
 800fba8:	68f8      	ldr	r0, [r7, #12]
 800fbaa:	f000 fbc1 	bl	8010330 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 800fbae:	f107 0320 	add.w	r3, r7, #32
 800fbb2:	68f9      	ldr	r1, [r7, #12]
 800fbb4:	4618      	mov	r0, r3
 800fbb6:	f7fa fd44 	bl	800a642 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 800fbba:	68f8      	ldr	r0, [r7, #12]
 800fbbc:	f000 fc04 	bl	80103c8 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE18const_cast_derivedEv>
 800fbc0:	4603      	mov	r3, r0
 800fbc2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800fbc6:	f107 0120 	add.w	r1, r7, #32
 800fbca:	f107 0010 	add.w	r0, r7, #16
 800fbce:	9300      	str	r3, [sp, #0]
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	f000 fc04 	bl	80103de <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES5_NS0_9assign_opIffEELi0EEC1ERS5_RKS5_RKS7_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 800fbd6:	f107 0310 	add.w	r3, r7, #16
 800fbda:	4618      	mov	r0, r3
 800fbdc:	f000 fc19 	bl	8010412 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi2EE3runERS9_>
  DstEvaluatorType dstEvaluator(dst);
 800fbe0:	f107 0320 	add.w	r3, r7, #32
 800fbe4:	4618      	mov	r0, r3
 800fbe6:	f7f9 fc13 	bl	8009410 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 800fbea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fbee:	4618      	mov	r0, r3
 800fbf0:	f7f9 fc0e 	bl	8009410 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
}
 800fbf4:	bf00      	nop
 800fbf6:	3728      	adds	r7, #40	; 0x28
 800fbf8:	46bd      	mov	sp, r7
 800fbfa:	bd80      	pop	{r7, pc}

0800fbfc <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800fbfc:	b480      	push	{r7}
 800fbfe:	b083      	sub	sp, #12
 800fc00:	af00      	add	r7, sp, #0
 800fc02:	6078      	str	r0, [r7, #4]
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	4618      	mov	r0, r3
 800fc0a:	370c      	adds	r7, #12
 800fc0c:	46bd      	mov	sp, r7
 800fc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc12:	4770      	bx	lr

0800fc14 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800fc14:	b480      	push	{r7}
 800fc16:	b083      	sub	sp, #12
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	6078      	str	r0, [r7, #4]
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	685b      	ldr	r3, [r3, #4]
 800fc20:	4618      	mov	r0, r3
 800fc22:	370c      	adds	r7, #12
 800fc24:	46bd      	mov	sp, r7
 800fc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc2a:	4770      	bx	lr

0800fc2c <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEENS_10DenseShapeES5_Li6EE5subToINS2_IfLi1ELi1ELi0ELi1ELi1EEEEEvRT_RKS3_RKS4_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void subTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 800fc2c:	b580      	push	{r7, lr}
 800fc2e:	ed2d 8b02 	vpush	{d8}
 800fc32:	b088      	sub	sp, #32
 800fc34:	af00      	add	r7, sp, #0
 800fc36:	60f8      	str	r0, [r7, #12]
 800fc38:	60b9      	str	r1, [r7, #8]
 800fc3a:	607a      	str	r2, [r7, #4]
  { dst.coeffRef(0,0) -= (lhs.transpose().cwiseProduct(rhs)).sum(); }
 800fc3c:	68b8      	ldr	r0, [r7, #8]
 800fc3e:	f000 fbf3 	bl	8010428 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE9transposeEv>
 800fc42:	4603      	mov	r3, r0
 800fc44:	61fb      	str	r3, [r7, #28]
 800fc46:	f107 0310 	add.w	r3, r7, #16
 800fc4a:	f107 011c 	add.w	r1, r7, #28
 800fc4e:	687a      	ldr	r2, [r7, #4]
 800fc50:	4618      	mov	r0, r3
 800fc52:	f000 fbfc 	bl	801044e <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE12cwiseProductINS2_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSA_6traitsIT_E6ScalarEEEKS5_KSD_EERKNS0_ISD_EE>
 800fc56:	f107 0310 	add.w	r3, r7, #16
 800fc5a:	4618      	mov	r0, r3
 800fc5c:	f000 fc25 	bl	80104aa <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE3sumEv>
 800fc60:	eeb0 8a40 	vmov.f32	s16, s0
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	2200      	movs	r2, #0
 800fc68:	2100      	movs	r1, #0
 800fc6a:	4618      	mov	r0, r3
 800fc6c:	f7f6 ff11 	bl	8006a92 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8coeffRefEii>
 800fc70:	4603      	mov	r3, r0
 800fc72:	edd3 7a00 	vldr	s15, [r3]
 800fc76:	ee77 7ac8 	vsub.f32	s15, s15, s16
 800fc7a:	edc3 7a00 	vstr	s15, [r3]
 800fc7e:	bf00      	nop
 800fc80:	3720      	adds	r7, #32
 800fc82:	46bd      	mov	sp, r7
 800fc84:	ecbd 8b02 	vpop	{d8}
 800fc88:	bd80      	pop	{r7, pc}

0800fc8a <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1Ev>:
 800fc8a:	b580      	push	{r7, lr}
 800fc8c:	b082      	sub	sp, #8
 800fc8e:	af00      	add	r7, sp, #0
 800fc90:	6078      	str	r0, [r7, #4]
 800fc92:	6878      	ldr	r0, [r7, #4]
 800fc94:	f000 fc24 	bl	80104e0 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1Ev>
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	4618      	mov	r0, r3
 800fc9c:	3708      	adds	r7, #8
 800fc9e:	46bd      	mov	sp, r7
 800fca0:	bd80      	pop	{r7, pc}

0800fca2 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi4EEC1Ev>:
class dense_product_base
 800fca2:	b580      	push	{r7, lr}
 800fca4:	b082      	sub	sp, #8
 800fca6:	af00      	add	r7, sp, #0
 800fca8:	6078      	str	r0, [r7, #4]
 800fcaa:	6878      	ldr	r0, [r7, #4]
 800fcac:	f7ff ffed 	bl	800fc8a <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1Ev>
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	4618      	mov	r0, r3
 800fcb4:	3708      	adds	r7, #8
 800fcb6:	46bd      	mov	sp, r7
 800fcb8:	bd80      	pop	{r7, pc}

0800fcba <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 800fcba:	b580      	push	{r7, lr}
 800fcbc:	b082      	sub	sp, #8
 800fcbe:	af00      	add	r7, sp, #0
 800fcc0:	6078      	str	r0, [r7, #4]
 800fcc2:	6878      	ldr	r0, [r7, #4]
 800fcc4:	f7ff ffed 	bl	800fca2 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi4EEC1Ev>
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	4618      	mov	r0, r3
 800fccc:	3708      	adds	r7, #8
 800fcce:	46bd      	mov	sp, r7
 800fcd0:	bd80      	pop	{r7, pc}
	...

0800fcd4 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 800fcd4:	b590      	push	{r4, r7, lr}
 800fcd6:	b085      	sub	sp, #20
 800fcd8:	af00      	add	r7, sp, #0
 800fcda:	60f8      	str	r0, [r7, #12]
 800fcdc:	60b9      	str	r1, [r7, #8]
 800fcde:	607a      	str	r2, [r7, #4]
 800fce0:	68f8      	ldr	r0, [r7, #12]
 800fce2:	f7ff ffea 	bl	800fcba <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1ENS_5DenseEEC1Ev>
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	68ba      	ldr	r2, [r7, #8]
 800fcea:	601a      	str	r2, [r3, #0]
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	687a      	ldr	r2, [r7, #4]
 800fcf0:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 800fcf2:	68bb      	ldr	r3, [r7, #8]
 800fcf4:	4618      	mov	r0, r3
 800fcf6:	f7f5 fa4f 	bl	8005198 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800fcfa:	4604      	mov	r4, r0
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	4618      	mov	r0, r3
 800fd00:	f7f5 fb71 	bl	80053e6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 800fd04:	4603      	mov	r3, r0
 800fd06:	429c      	cmp	r4, r3
 800fd08:	d005      	beq.n	800fd16 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EEC1ERKS2_RKS3_+0x42>
 800fd0a:	4b06      	ldr	r3, [pc, #24]	; (800fd24 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EEC1ERKS2_RKS3_+0x50>)
 800fd0c:	4a06      	ldr	r2, [pc, #24]	; (800fd28 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EEC1ERKS2_RKS3_+0x54>)
 800fd0e:	2160      	movs	r1, #96	; 0x60
 800fd10:	4806      	ldr	r0, [pc, #24]	; (800fd2c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EEC1ERKS2_RKS3_+0x58>)
 800fd12:	f00e f8bf 	bl	801de94 <__assert_func>
 800fd16:	bf00      	nop
    }
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	4618      	mov	r0, r3
 800fd1c:	3714      	adds	r7, #20
 800fd1e:	46bd      	mov	sp, r7
 800fd20:	bd90      	pop	{r4, r7, pc}
 800fd22:	bf00      	nop
 800fd24:	0801ffbc 	.word	0x0801ffbc
 800fd28:	08027a5c 	.word	0x08027a5c
 800fd2c:	0802030c 	.word	0x0802030c

0800fd30 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 800fd30:	b580      	push	{r7, lr}
 800fd32:	b084      	sub	sp, #16
 800fd34:	af00      	add	r7, sp, #0
 800fd36:	60f8      	str	r0, [r7, #12]
 800fd38:	60b9      	str	r1, [r7, #8]
 800fd3a:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 800fd3c:	68b9      	ldr	r1, [r7, #8]
 800fd3e:	68f8      	ldr	r0, [r7, #12]
 800fd40:	f000 fbd9 	bl	80104f6 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 800fd44:	687a      	ldr	r2, [r7, #4]
 800fd46:	68b9      	ldr	r1, [r7, #8]
 800fd48:	68f8      	ldr	r0, [r7, #12]
 800fd4a:	f000 fc17 	bl	801057c <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800fd4e:	bf00      	nop
 800fd50:	3710      	adds	r7, #16
 800fd52:	46bd      	mov	sp, r7
 800fd54:	bd80      	pop	{r7, pc}

0800fd56 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 800fd56:	b480      	push	{r7}
 800fd58:	b083      	sub	sp, #12
 800fd5a:	af00      	add	r7, sp, #0
 800fd5c:	6078      	str	r0, [r7, #4]
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	3330      	adds	r3, #48	; 0x30
 800fd62:	4618      	mov	r0, r3
 800fd64:	370c      	adds	r7, #12
 800fd66:	46bd      	mov	sp, r7
 800fd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd6c:	4770      	bx	lr

0800fd6e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800fd6e:	b480      	push	{r7}
 800fd70:	b083      	sub	sp, #12
 800fd72:	af00      	add	r7, sp, #0
 800fd74:	6078      	str	r0, [r7, #4]
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	4618      	mov	r0, r3
 800fd7a:	370c      	adds	r7, #12
 800fd7c:	46bd      	mov	sp, r7
 800fd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd82:	4770      	bx	lr

0800fd84 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800fd84:	b480      	push	{r7}
 800fd86:	b083      	sub	sp, #12
 800fd88:	af00      	add	r7, sp, #0
 800fd8a:	6078      	str	r0, [r7, #4]
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	3318      	adds	r3, #24
 800fd90:	4618      	mov	r0, r3
 800fd92:	370c      	adds	r7, #12
 800fd94:	46bd      	mov	sp, r7
 800fd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd9a:	4770      	bx	lr

0800fd9c <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 800fd9c:	b580      	push	{r7, lr}
 800fd9e:	b082      	sub	sp, #8
 800fda0:	af00      	add	r7, sp, #0
 800fda2:	6078      	str	r0, [r7, #4]
 800fda4:	6039      	str	r1, [r7, #0]
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	6839      	ldr	r1, [r7, #0]
 800fdaa:	4618      	mov	r0, r3
 800fdac:	f000 fc1e 	bl	80105ec <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERKS6_>
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	4618      	mov	r0, r3
 800fdb4:	3708      	adds	r7, #8
 800fdb6:	46bd      	mov	sp, r7
 800fdb8:	bd80      	pop	{r7, pc}

0800fdba <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800fdba:	b590      	push	{r4, r7, lr}
 800fdbc:	b087      	sub	sp, #28
 800fdbe:	af00      	add	r7, sp, #0
 800fdc0:	60f8      	str	r0, [r7, #12]
 800fdc2:	60b9      	str	r1, [r7, #8]
 800fdc4:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	4618      	mov	r0, r3
 800fdca:	f000 fc1e 	bl	801060a <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE4Data4funcEv>
 800fdce:	4604      	mov	r4, r0
 800fdd0:	68fb      	ldr	r3, [r7, #12]
 800fdd2:	3304      	adds	r3, #4
 800fdd4:	687a      	ldr	r2, [r7, #4]
 800fdd6:	68b9      	ldr	r1, [r7, #8]
 800fdd8:	4618      	mov	r0, r3
 800fdda:	f7ff fccf 	bl	800f77c <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfE5coeffEii>
 800fdde:	eef0 7a40 	vmov.f32	s15, s0
 800fde2:	edc7 7a04 	vstr	s15, [r7, #16]
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	330c      	adds	r3, #12
 800fdea:	687a      	ldr	r2, [r7, #4]
 800fdec:	68b9      	ldr	r1, [r7, #8]
 800fdee:	4618      	mov	r0, r3
 800fdf0:	f000 fc16 	bl	8010620 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>
 800fdf4:	eef0 7a40 	vmov.f32	s15, s0
 800fdf8:	edc7 7a05 	vstr	s15, [r7, #20]
 800fdfc:	f107 0214 	add.w	r2, r7, #20
 800fe00:	f107 0310 	add.w	r3, r7, #16
 800fe04:	4619      	mov	r1, r3
 800fe06:	4620      	mov	r0, r4
 800fe08:	f7ff fafc 	bl	800f404 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 800fe0c:	eef0 7a40 	vmov.f32	s15, s0
  }
 800fe10:	eeb0 0a67 	vmov.f32	s0, s15
 800fe14:	371c      	adds	r7, #28
 800fe16:	46bd      	mov	sp, r7
 800fe18:	bd90      	pop	{r4, r7, pc}

0800fe1a <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1ERKSJ_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 800fe1a:	b580      	push	{r7, lr}
 800fe1c:	b082      	sub	sp, #8
 800fe1e:	af00      	add	r7, sp, #0
 800fe20:	6078      	str	r0, [r7, #4]
 800fe22:	6039      	str	r1, [r7, #0]
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	6839      	ldr	r1, [r7, #0]
 800fe28:	4618      	mov	r0, r3
 800fe2a:	f000 fc1a 	bl	8010662 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEENS0_10IndexBasedEfEC1ERKSJ_>
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	4618      	mov	r0, r3
 800fe32:	3708      	adds	r7, #8
 800fe34:	46bd      	mov	sp, r7
 800fe36:	bd80      	pop	{r7, pc}

0800fe38 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1ERKS8_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 800fe38:	b580      	push	{r7, lr}
 800fe3a:	b082      	sub	sp, #8
 800fe3c:	af00      	add	r7, sp, #0
 800fe3e:	6078      	str	r0, [r7, #4]
 800fe40:	6039      	str	r1, [r7, #0]
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	6839      	ldr	r1, [r7, #0]
 800fe46:	4618      	mov	r0, r3
 800fe48:	f000 fc21 	bl	801068e <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EEC1ERKNS_5BlockIS6_Li1ELi1ELb0EEE>
  }
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	4618      	mov	r0, r3
 800fe50:	3708      	adds	r7, #8
 800fe52:	46bd      	mov	sp, r7
 800fe54:	bd80      	pop	{r7, pc}

0800fe56 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EE5valueEv>:
    T value() { return T(Value); }
 800fe56:	b480      	push	{r7}
 800fe58:	af00      	add	r7, sp, #0
 800fe5a:	2300      	movs	r3, #0
 800fe5c:	4618      	mov	r0, r3
 800fe5e:	46bd      	mov	sp, r7
 800fe60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe64:	4770      	bx	lr

0800fe66 <_ZNK5Eigen8internal15unary_evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800fe66:	b5b0      	push	{r4, r5, r7, lr}
 800fe68:	b084      	sub	sp, #16
 800fe6a:	af00      	add	r7, sp, #0
 800fe6c:	60f8      	str	r0, [r7, #12]
 800fe6e:	60b9      	str	r1, [r7, #8]
 800fe70:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(m_startRow.value() + row, m_startCol.value() + col);
 800fe72:	68fc      	ldr	r4, [r7, #12]
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	3310      	adds	r3, #16
 800fe78:	4618      	mov	r0, r3
 800fe7a:	f000 fc1c 	bl	80106b6 <_ZNK5Eigen8internal19variable_if_dynamicIiLin1EE5valueEv>
 800fe7e:	4602      	mov	r2, r0
 800fe80:	68bb      	ldr	r3, [r7, #8]
 800fe82:	18d5      	adds	r5, r2, r3
 800fe84:	f7ff ffe7 	bl	800fe56 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EE5valueEv>
 800fe88:	4602      	mov	r2, r0
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	4413      	add	r3, r2
 800fe8e:	461a      	mov	r2, r3
 800fe90:	4629      	mov	r1, r5
 800fe92:	4620      	mov	r0, r4
 800fe94:	f000 fc1b 	bl	80106ce <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE5coeffEii>
 800fe98:	eef0 7a40 	vmov.f32	s15, s0
  }
 800fe9c:	eeb0 0a67 	vmov.f32	s0, s15
 800fea0:	3710      	adds	r7, #16
 800fea2:	46bd      	mov	sp, r7
 800fea4:	bdb0      	pop	{r4, r5, r7, pc}

0800fea6 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 800fea6:	b580      	push	{r7, lr}
 800fea8:	b082      	sub	sp, #8
 800feaa:	af00      	add	r7, sp, #0
 800feac:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 800feae:	f7f6 feaa 	bl	8006c06 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800feb2:	4603      	mov	r3, r0
  }
 800feb4:	4618      	mov	r0, r3
 800feb6:	3708      	adds	r7, #8
 800feb8:	46bd      	mov	sp, r7
 800feba:	bd80      	pop	{r7, pc}

0800febc <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 800febc:	b580      	push	{r7, lr}
 800febe:	b082      	sub	sp, #8
 800fec0:	af00      	add	r7, sp, #0
 800fec2:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 800fec4:	f7f6 fe97 	bl	8006bf6 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 800fec8:	4603      	mov	r3, r0
  }
 800feca:	4618      	mov	r0, r3
 800fecc:	3708      	adds	r7, #8
 800fece:	46bd      	mov	sp, r7
 800fed0:	bd80      	pop	{r7, pc}

0800fed2 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfEC1ERKS9_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 800fed2:	b590      	push	{r4, r7, lr}
 800fed4:	b083      	sub	sp, #12
 800fed6:	af00      	add	r7, sp, #0
 800fed8:	6078      	str	r0, [r7, #4]
 800feda:	6039      	str	r1, [r7, #0]
 800fedc:	6878      	ldr	r0, [r7, #4]
 800fede:	f000 fc2d 	bl	801073c <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>
 800fee2:	687c      	ldr	r4, [r7, #4]
 800fee4:	6838      	ldr	r0, [r7, #0]
 800fee6:	f000 fc1e 	bl	8010726 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE16nestedExpressionEv>
 800feea:	4603      	mov	r3, r0
 800feec:	4619      	mov	r1, r3
 800feee:	4620      	mov	r0, r4
 800fef0:	f000 fc2f 	bl	8010752 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1ERS7_>
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	4618      	mov	r0, r3
 800fef8:	370c      	adds	r7, #12
 800fefa:	46bd      	mov	sp, r7
 800fefc:	bd90      	pop	{r4, r7, pc}

0800fefe <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EEC1ERKNS_5BlockIS4_Li3ELi1ELb1EEE>:
{
  typedef Block<ArgType, BlockRows, BlockCols, InnerPanel> XprType;
  typedef typename XprType::Scalar Scalar;

  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  explicit block_evaluator(const XprType& block)
 800fefe:	b580      	push	{r7, lr}
 800ff00:	b082      	sub	sp, #8
 800ff02:	af00      	add	r7, sp, #0
 800ff04:	6078      	str	r0, [r7, #4]
 800ff06:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	6839      	ldr	r1, [r7, #0]
 800ff0c:	4618      	mov	r0, r3
 800ff0e:	f000 fc2f 	bl	8010770 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_EC1ERKS6_>
  {
    // TODO: for the 3.3 release, this should be turned to an internal assertion, but let's keep it as is for the beta lifetime
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 800ff12:	683b      	ldr	r3, [r7, #0]
 800ff14:	4618      	mov	r0, r3
 800ff16:	f000 fc55 	bl	80107c4 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4dataEv>
 800ff1a:	bf00      	nop
  }
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	4618      	mov	r0, r3
 800ff20:	3708      	adds	r7, #8
 800ff22:	46bd      	mov	sp, r7
 800ff24:	bd80      	pop	{r7, pc}

0800ff26 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800ff26:	b5b0      	push	{r4, r5, r7, lr}
 800ff28:	b084      	sub	sp, #16
 800ff2a:	af00      	add	r7, sp, #0
 800ff2c:	60f8      	str	r0, [r7, #12]
 800ff2e:	60b9      	str	r1, [r7, #8]
 800ff30:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	681c      	ldr	r4, [r3, #0]
 800ff36:	68f8      	ldr	r0, [r7, #12]
 800ff38:	f000 fc50 	bl	80107dc <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEE9colStrideEv>
 800ff3c:	4602      	mov	r2, r0
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	fb03 f502 	mul.w	r5, r3, r2
 800ff44:	68f8      	ldr	r0, [r7, #12]
 800ff46:	f000 fc54 	bl	80107f2 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEE9rowStrideEv>
 800ff4a:	4602      	mov	r2, r0
 800ff4c:	68bb      	ldr	r3, [r7, #8]
 800ff4e:	fb02 f303 	mul.w	r3, r2, r3
 800ff52:	442b      	add	r3, r5
 800ff54:	009b      	lsls	r3, r3, #2
 800ff56:	4423      	add	r3, r4
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	ee07 3a90 	vmov	s15, r3
  }
 800ff5e:	eeb0 0a67 	vmov.f32	s0, s15
 800ff62:	3710      	adds	r7, #16
 800ff64:	46bd      	mov	sp, r7
 800ff66:	bdb0      	pop	{r4, r5, r7, pc}

0800ff68 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_E9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 800ff68:	b580      	push	{r7, lr}
 800ff6a:	b082      	sub	sp, #8
 800ff6c:	af00      	add	r7, sp, #0
 800ff6e:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 800ff70:	f7f6 fe41 	bl	8006bf6 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 800ff74:	4603      	mov	r3, r0
  }
 800ff76:	4618      	mov	r0, r3
 800ff78:	3708      	adds	r7, #8
 800ff7a:	46bd      	mov	sp, r7
 800ff7c:	bd80      	pop	{r7, pc}

0800ff7e <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_E9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 800ff7e:	b580      	push	{r7, lr}
 800ff80:	b082      	sub	sp, #8
 800ff82:	af00      	add	r7, sp, #0
 800ff84:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 800ff86:	f7f6 fe3e 	bl	8006c06 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800ff8a:	4603      	mov	r3, r0
  }
 800ff8c:	4618      	mov	r0, r3
 800ff8e:	3708      	adds	r7, #8
 800ff90:	46bd      	mov	sp, r7
 800ff92:	bd80      	pop	{r7, pc}

0800ff94 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE11lazyProductIS2_EEKNS_7ProductIS2_T_Li1EEERKNS0_IS6_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 800ff94:	b590      	push	{r4, r7, lr}
 800ff96:	b085      	sub	sp, #20
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	60f8      	str	r0, [r7, #12]
 800ff9c:	60b9      	str	r1, [r7, #8]
 800ff9e:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 800ffa0:	68b8      	ldr	r0, [r7, #8]
 800ffa2:	f7f5 fc68 	bl	8005876 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800ffa6:	4604      	mov	r4, r0
 800ffa8:	6878      	ldr	r0, [r7, #4]
 800ffaa:	f7f5 fc64 	bl	8005876 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800ffae:	4603      	mov	r3, r0
 800ffb0:	461a      	mov	r2, r3
 800ffb2:	4621      	mov	r1, r4
 800ffb4:	68f8      	ldr	r0, [r7, #12]
 800ffb6:	f000 fc4b 	bl	8010850 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EEC1ERKS2_S5_>
}
 800ffba:	68f8      	ldr	r0, [r7, #12]
 800ffbc:	3714      	adds	r7, #20
 800ffbe:	46bd      	mov	sp, r7
 800ffc0:	bd90      	pop	{r4, r7, pc}

0800ffc2 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800ffc2:	b580      	push	{r7, lr}
 800ffc4:	b086      	sub	sp, #24
 800ffc6:	af00      	add	r7, sp, #0
 800ffc8:	60f8      	str	r0, [r7, #12]
 800ffca:	60b9      	str	r1, [r7, #8]
 800ffcc:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800ffd2:	687a      	ldr	r2, [r7, #4]
 800ffd4:	68b9      	ldr	r1, [r7, #8]
 800ffd6:	6978      	ldr	r0, [r7, #20]
 800ffd8:	f000 fc68 	bl	80108ac <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_>
}
 800ffdc:	bf00      	nop
 800ffde:	3718      	adds	r7, #24
 800ffe0:	46bd      	mov	sp, r7
 800ffe2:	bd80      	pop	{r7, pc}

0800ffe4 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EEC1ERS6_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 800ffe4:	b5b0      	push	{r4, r5, r7, lr}
 800ffe6:	b084      	sub	sp, #16
 800ffe8:	af00      	add	r7, sp, #0
 800ffea:	60f8      	str	r0, [r7, #12]
 800ffec:	60b9      	str	r1, [r7, #8]
 800ffee:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800fff0:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800fff2:	68b8      	ldr	r0, [r7, #8]
 800fff4:	f000 fc6d 	bl	80108d2 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE4dataEv>
 800fff8:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 800fffa:	68b8      	ldr	r0, [r7, #8]
 800fffc:	f000 fc7d 	bl	80108fa <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE11innerStrideEv>
 8010000:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	fb02 f303 	mul.w	r3, r2, r3
 8010008:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 801000a:	441d      	add	r5, r3
 801000c:	68b8      	ldr	r0, [r7, #8]
 801000e:	f7f5 fd76 	bl	8005afe <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8010012:	4602      	mov	r2, r0
 8010014:	2301      	movs	r3, #1
 8010016:	4629      	mov	r1, r5
 8010018:	4620      	mov	r0, r4
 801001a:	f000 fca3 	bl	8010964 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii>
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	3308      	adds	r3, #8
 8010022:	68ba      	ldr	r2, [r7, #8]
 8010024:	6812      	ldr	r2, [r2, #0]
 8010026:	601a      	str	r2, [r3, #0]
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	330c      	adds	r3, #12
 801002c:	2100      	movs	r1, #0
 801002e:	4618      	mov	r0, r3
 8010030:	f7fd fe30 	bl	800dc94 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	3310      	adds	r3, #16
 8010038:	6879      	ldr	r1, [r7, #4]
 801003a:	4618      	mov	r0, r3
 801003c:	f7fd fe2a 	bl	800dc94 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
      init();
 8010040:	68f8      	ldr	r0, [r7, #12]
 8010042:	f000 fccd 	bl	80109e0 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EE4initEv>
    }
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	4618      	mov	r0, r3
 801004a:	3710      	adds	r7, #16
 801004c:	46bd      	mov	sp, r7
 801004e:	bdb0      	pop	{r4, r5, r7, pc}

08010050 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1ERKSI_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8010050:	b580      	push	{r7, lr}
 8010052:	b082      	sub	sp, #8
 8010054:	af00      	add	r7, sp, #0
 8010056:	6078      	str	r0, [r7, #4]
 8010058:	6039      	str	r1, [r7, #0]
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	6839      	ldr	r1, [r7, #0]
 801005e:	4618      	mov	r0, r3
 8010060:	f000 fcce 	bl	8010a00 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	4618      	mov	r0, r3
 8010068:	3708      	adds	r7, #8
 801006a:	46bd      	mov	sp, r7
 801006c:	bd80      	pop	{r7, pc}

0801006e <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi0ELi3EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 801006e:	b580      	push	{r7, lr}
 8010070:	b084      	sub	sp, #16
 8010072:	af00      	add	r7, sp, #0
 8010074:	6078      	str	r0, [r7, #4]
 8010076:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8010078:	6839      	ldr	r1, [r7, #0]
 801007a:	6878      	ldr	r0, [r7, #4]
 801007c:	f000 fcd2 	bl	8010a24 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi0ELi1EE3runERKSM_RKS3_>
 8010080:	eef0 7a40 	vmov.f32	s15, s0
 8010084:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 8010088:	6839      	ldr	r1, [r7, #0]
 801008a:	6878      	ldr	r0, [r7, #4]
 801008c:	f000 fcdb 	bl	8010a46 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi1ELi2EE3runERKSM_RKS3_>
 8010090:	eef0 7a40 	vmov.f32	s15, s0
 8010094:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8010098:	f107 020c 	add.w	r2, r7, #12
 801009c:	f107 0308 	add.w	r3, r7, #8
 80100a0:	4619      	mov	r1, r3
 80100a2:	6838      	ldr	r0, [r7, #0]
 80100a4:	f7f9 f96d 	bl	8009382 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 80100a8:	eef0 7a40 	vmov.f32	s15, s0
  }
 80100ac:	eeb0 0a67 	vmov.f32	s0, s15
 80100b0:	3710      	adds	r7, #16
 80100b2:	46bd      	mov	sp, r7
 80100b4:	bd80      	pop	{r7, pc}

080100b6 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80100b6:	b580      	push	{r7, lr}
 80100b8:	b082      	sub	sp, #8
 80100ba:	af00      	add	r7, sp, #0
 80100bc:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 80100be:	2201      	movs	r2, #1
 80100c0:	2102      	movs	r1, #2
 80100c2:	6878      	ldr	r0, [r7, #4]
 80100c4:	f7fc fdaf 	bl	800cc26 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80100c8:	6878      	ldr	r0, [r7, #4]
 80100ca:	f000 fce0 	bl	8010a8e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSG_>
  }
 80100ce:	bf00      	nop
 80100d0:	3708      	adds	r7, #8
 80100d2:	46bd      	mov	sp, r7
 80100d4:	bd80      	pop	{r7, pc}

080100d6 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEELi3ENS_10DenseShapeES9_ffEC1ERKS8_>:
  explicit product_evaluator(const XprType& xpr)
 80100d6:	b580      	push	{r7, lr}
 80100d8:	b082      	sub	sp, #8
 80100da:	af00      	add	r7, sp, #0
 80100dc:	6078      	str	r0, [r7, #4]
 80100de:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 80100e0:	6878      	ldr	r0, [r7, #4]
 80100e2:	f000 fcfc 	bl	8010ade <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1Ev>
    : m_lhs(xpr.lhs()),
 80100e6:	6838      	ldr	r0, [r7, #0]
 80100e8:	f000 fce1 	bl	8010aae <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE3lhsEv>
 80100ec:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	601a      	str	r2, [r3, #0]
      m_rhs(xpr.rhs()),
 80100f2:	6838      	ldr	r0, [r7, #0]
 80100f4:	f000 fce7 	bl	8010ac6 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE3rhsEv>
 80100f8:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	3304      	adds	r3, #4
 80100fe:	6812      	ldr	r2, [r2, #0]
 8010100:	601a      	str	r2, [r3, #0]
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	f103 0208 	add.w	r2, r3, #8
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	681b      	ldr	r3, [r3, #0]
      m_innerDim(xpr.lhs().cols())
 801010c:	4619      	mov	r1, r3
 801010e:	4610      	mov	r0, r2
 8010110:	f7f7 fc3e 	bl	8007990 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	f103 020c 	add.w	r2, r3, #12
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	3304      	adds	r3, #4
      m_innerDim(xpr.lhs().cols())
 801011e:	4619      	mov	r1, r3
 8010120:	4610      	mov	r0, r2
 8010122:	f000 fce7 	bl	8010af4 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERKS5_>
 8010126:	6838      	ldr	r0, [r7, #0]
 8010128:	f000 fcc1 	bl	8010aae <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE3lhsEv>
 801012c:	4603      	mov	r3, r0
 801012e:	4618      	mov	r0, r3
 8010130:	f7f4 ff8c 	bl	800504c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8010134:	4602      	mov	r2, r0
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	611a      	str	r2, [r3, #16]
  }
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	4618      	mov	r0, r3
 801013e:	3708      	adds	r7, #8
 8010140:	46bd      	mov	sp, r7
 8010142:	bd80      	pop	{r7, pc}

08010144 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8010144:	b580      	push	{r7, lr}
 8010146:	b082      	sub	sp, #8
 8010148:	af00      	add	r7, sp, #0
 801014a:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 801014c:	2100      	movs	r1, #0
 801014e:	6878      	ldr	r0, [r7, #4]
 8010150:	f000 fcdf 	bl	8010b12 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8010154:	6878      	ldr	r0, [r7, #4]
 8010156:	f000 fcff 	bl	8010b58 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSG_>
  }
 801015a:	bf00      	nop
 801015c:	3708      	adds	r7, #8
 801015e:	46bd      	mov	sp, r7
 8010160:	bd80      	pop	{r7, pc}

08010162 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 8010162:	b480      	push	{r7}
 8010164:	b083      	sub	sp, #12
 8010166:	af00      	add	r7, sp, #0
 8010168:	6078      	str	r0, [r7, #4]
 801016a:	6039      	str	r1, [r7, #0]
}
 801016c:	bf00      	nop
 801016e:	370c      	adds	r7, #12
 8010170:	46bd      	mov	sp, r7
 8010172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010176:	4770      	bx	lr

08010178 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEELi6ENS_10DenseShapeESA_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, Options>, ProductTag, LhsShape, RhsShape>
 8010178:	b580      	push	{r7, lr}
 801017a:	b082      	sub	sp, #8
 801017c:	af00      	add	r7, sp, #0
 801017e:	6078      	str	r0, [r7, #4]
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	4618      	mov	r0, r3
 8010184:	f7f9 f944 	bl	8009410 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	4618      	mov	r0, r3
 801018c:	3708      	adds	r7, #8
 801018e:	46bd      	mov	sp, r7
 8010190:	bd80      	pop	{r7, pc}

08010192 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 8010192:	b580      	push	{r7, lr}
 8010194:	b082      	sub	sp, #8
 8010196:	af00      	add	r7, sp, #0
 8010198:	6078      	str	r0, [r7, #4]
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	4618      	mov	r0, r3
 801019e:	f7ff ffeb 	bl	8010178 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEELi6ENS_10DenseShapeESA_ffED1Ev>
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	4618      	mov	r0, r3
 80101a6:	3708      	adds	r7, #8
 80101a8:	46bd      	mov	sp, r7
 80101aa:	bd80      	pop	{r7, pc}

080101ac <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEED1Ev>:
struct evaluator<const T>
 80101ac:	b580      	push	{r7, lr}
 80101ae:	b082      	sub	sp, #8
 80101b0:	af00      	add	r7, sp, #0
 80101b2:	6078      	str	r0, [r7, #4]
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	4618      	mov	r0, r3
 80101b8:	f7ff ffeb 	bl	8010192 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEED1Ev>
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	4618      	mov	r0, r3
 80101c0:	3708      	adds	r7, #8
 80101c2:	46bd      	mov	sp, r7
 80101c4:	bd80      	pop	{r7, pc}

080101c6 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>:
 80101c6:	b580      	push	{r7, lr}
 80101c8:	b082      	sub	sp, #8
 80101ca:	af00      	add	r7, sp, #0
 80101cc:	6078      	str	r0, [r7, #4]
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	4618      	mov	r0, r3
 80101d2:	f7f9 f91d 	bl	8009410 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	4618      	mov	r0, r3
 80101da:	3708      	adds	r7, #8
 80101dc:	46bd      	mov	sp, r7
 80101de:	bd80      	pop	{r7, pc}

080101e0 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE4DataD1Ev>:
  struct Data
 80101e0:	b580      	push	{r7, lr}
 80101e2:	b082      	sub	sp, #8
 80101e4:	af00      	add	r7, sp, #0
 80101e6:	6078      	str	r0, [r7, #4]
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	330c      	adds	r3, #12
 80101ec:	4618      	mov	r0, r3
 80101ee:	f7ff ffea 	bl	80101c6 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	3304      	adds	r3, #4
 80101f6:	4618      	mov	r0, r3
 80101f8:	f7ff ffd8 	bl	80101ac <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEED1Ev>
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	4618      	mov	r0, r3
 8010200:	3708      	adds	r7, #8
 8010202:	46bd      	mov	sp, r7
 8010204:	bd80      	pop	{r7, pc}

08010206 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 8010206:	b580      	push	{r7, lr}
 8010208:	b082      	sub	sp, #8
 801020a:	af00      	add	r7, sp, #0
 801020c:	6078      	str	r0, [r7, #4]
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	4618      	mov	r0, r3
 8010212:	f7ff ffe5 	bl	80101e0 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE4DataD1Ev>
 8010216:	6878      	ldr	r0, [r7, #4]
 8010218:	f000 fcbc 	bl	8010b94 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEED1Ev>
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	4618      	mov	r0, r3
 8010220:	3708      	adds	r7, #8
 8010222:	46bd      	mov	sp, r7
 8010224:	bd80      	pop	{r7, pc}

08010226 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 8010226:	b580      	push	{r7, lr}
 8010228:	b082      	sub	sp, #8
 801022a:	af00      	add	r7, sp, #0
 801022c:	6078      	str	r0, [r7, #4]
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	4618      	mov	r0, r3
 8010232:	f7ff ffe8 	bl	8010206 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffED1Ev>
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	4618      	mov	r0, r3
 801023a:	3708      	adds	r7, #8
 801023c:	46bd      	mov	sp, r7
 801023e:	bd80      	pop	{r7, pc}

08010240 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 8010240:	b580      	push	{r7, lr}
 8010242:	b090      	sub	sp, #64	; 0x40
 8010244:	af02      	add	r7, sp, #8
 8010246:	60f8      	str	r0, [r7, #12]
 8010248:	60b9      	str	r1, [r7, #8]
 801024a:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 801024c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010250:	68b9      	ldr	r1, [r7, #8]
 8010252:	4618      	mov	r0, r3
 8010254:	f000 fc8f 	bl	8010b76 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKSG_>
  resize_if_allowed(dst, src, func);
 8010258:	687a      	ldr	r2, [r7, #4]
 801025a:	68b9      	ldr	r1, [r7, #8]
 801025c:	68f8      	ldr	r0, [r7, #12]
 801025e:	f000 fca5 	bl	8010bac <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 8010262:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010266:	68f9      	ldr	r1, [r7, #12]
 8010268:	4618      	mov	r0, r3
 801026a:	f7fa f9ea 	bl	800a642 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 801026e:	68f8      	ldr	r0, [r7, #12]
 8010270:	f000 f8aa 	bl	80103c8 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE18const_cast_derivedEv>
 8010274:	4603      	mov	r3, r0
 8010276:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801027a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 801027e:	f107 0014 	add.w	r0, r7, #20
 8010282:	9300      	str	r3, [sp, #0]
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	f000 fcdb 	bl	8010c40 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_INS3_IfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EEC1ERS5_RKSJ_RKSL_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 801028a:	f107 0314 	add.w	r3, r7, #20
 801028e:	4618      	mov	r0, r3
 8010290:	f000 fcf0 	bl	8010c74 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_INS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSN_>
  DstEvaluatorType dstEvaluator(dst);
 8010294:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010298:	4618      	mov	r0, r3
 801029a:	f7f9 f8b9 	bl	8009410 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 801029e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80102a2:	4618      	mov	r0, r3
 80102a4:	f7ff ffbf 	bl	8010226 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEED1Ev>
}
 80102a8:	bf00      	nop
 80102aa:	3738      	adds	r7, #56	; 0x38
 80102ac:	46bd      	mov	sp, r7
 80102ae:	bd80      	pop	{r7, pc}

080102b0 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEENS0_10IndexBasedEfEC1ERKS9_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 80102b0:	b590      	push	{r4, r7, lr}
 80102b2:	b083      	sub	sp, #12
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	6078      	str	r0, [r7, #4]
 80102b8:	6039      	str	r1, [r7, #0]
 80102ba:	6878      	ldr	r0, [r7, #4]
 80102bc:	f000 fcf0 	bl	8010ca0 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1Ev>
 80102c0:	687c      	ldr	r4, [r7, #4]
 80102c2:	6838      	ldr	r0, [r7, #0]
 80102c4:	f000 fce1 	bl	8010c8a <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE16nestedExpressionEv>
 80102c8:	4603      	mov	r3, r0
 80102ca:	4619      	mov	r1, r3
 80102cc:	4620      	mov	r0, r4
 80102ce:	f000 fcf2 	bl	8010cb6 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1ERS7_>
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	4618      	mov	r0, r3
 80102d6:	370c      	adds	r7, #12
 80102d8:	46bd      	mov	sp, r7
 80102da:	bd90      	pop	{r4, r7, pc}

080102dc <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EEC1ERKNS_5BlockIS4_Li1ELi1ELb1EEE>:
  explicit block_evaluator(const XprType& block)
 80102dc:	b580      	push	{r7, lr}
 80102de:	b082      	sub	sp, #8
 80102e0:	af00      	add	r7, sp, #0
 80102e2:	6078      	str	r0, [r7, #4]
 80102e4:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	6839      	ldr	r1, [r7, #0]
 80102ea:	4618      	mov	r0, r3
 80102ec:	f000 fcf2 	bl	8010cd4 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_EC1ERKS6_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 80102f0:	683b      	ldr	r3, [r7, #0]
 80102f2:	4618      	mov	r0, r3
 80102f4:	f000 fd18 	bl	8010d28 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE4dataEv>
 80102f8:	bf00      	nop
  }
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	4618      	mov	r0, r3
 80102fe:	3708      	adds	r7, #8
 8010300:	46bd      	mov	sp, r7
 8010302:	bd80      	pop	{r7, pc}

08010304 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 8010304:	b580      	push	{r7, lr}
 8010306:	b082      	sub	sp, #8
 8010308:	af00      	add	r7, sp, #0
 801030a:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 801030c:	f7f6 fc73 	bl	8006bf6 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 8010310:	4603      	mov	r3, r0
  }
 8010312:	4618      	mov	r0, r3
 8010314:	3708      	adds	r7, #8
 8010316:	46bd      	mov	sp, r7
 8010318:	bd80      	pop	{r7, pc}

0801031a <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 801031a:	b580      	push	{r7, lr}
 801031c:	b082      	sub	sp, #8
 801031e:	af00      	add	r7, sp, #0
 8010320:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 8010322:	f7f6 fc70 	bl	8006c06 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 8010326:	4603      	mov	r3, r0
  }
 8010328:	4618      	mov	r0, r3
 801032a:	3708      	adds	r7, #8
 801032c:	46bd      	mov	sp, r7
 801032e:	bd80      	pop	{r7, pc}

08010330 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8010330:	b580      	push	{r7, lr}
 8010332:	b086      	sub	sp, #24
 8010334:	af00      	add	r7, sp, #0
 8010336:	60f8      	str	r0, [r7, #12]
 8010338:	60b9      	str	r1, [r7, #8]
 801033a:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 801033c:	68bb      	ldr	r3, [r7, #8]
 801033e:	4618      	mov	r0, r3
 8010340:	f7f5 fe7f 	bl	8006042 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8010344:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8010346:	68bb      	ldr	r3, [r7, #8]
 8010348:	4618      	mov	r0, r3
 801034a:	f7f5 fe85 	bl	8006058 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 801034e:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	4618      	mov	r0, r3
 8010354:	f7f5 fe75 	bl	8006042 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8010358:	4602      	mov	r2, r0
 801035a:	697b      	ldr	r3, [r7, #20]
 801035c:	4293      	cmp	r3, r2
 801035e:	d107      	bne.n	8010370 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	4618      	mov	r0, r3
 8010364:	f7f5 fe78 	bl	8006058 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 8010368:	4602      	mov	r2, r0
 801036a:	693b      	ldr	r3, [r7, #16]
 801036c:	4293      	cmp	r3, r2
 801036e:	d001      	beq.n	8010374 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x44>
 8010370:	2301      	movs	r3, #1
 8010372:	e000      	b.n	8010376 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x46>
 8010374:	2300      	movs	r3, #0
 8010376:	2b00      	cmp	r3, #0
 8010378:	d005      	beq.n	8010386 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x56>
    dst.resize(dstRows, dstCols);
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	693a      	ldr	r2, [r7, #16]
 801037e:	6979      	ldr	r1, [r7, #20]
 8010380:	4618      	mov	r0, r3
 8010382:	f7fd f9af 	bl	800d6e4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	4618      	mov	r0, r3
 801038a:	f7f5 fe5a 	bl	8006042 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 801038e:	4602      	mov	r2, r0
 8010390:	697b      	ldr	r3, [r7, #20]
 8010392:	4293      	cmp	r3, r2
 8010394:	d107      	bne.n	80103a6 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x76>
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	4618      	mov	r0, r3
 801039a:	f7f5 fe5d 	bl	8006058 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 801039e:	4602      	mov	r2, r0
 80103a0:	693b      	ldr	r3, [r7, #16]
 80103a2:	4293      	cmp	r3, r2
 80103a4:	d006      	beq.n	80103b4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x84>
 80103a6:	4b05      	ldr	r3, [pc, #20]	; (80103bc <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 80103a8:	4a05      	ldr	r2, [pc, #20]	; (80103c0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 80103aa:	f240 21fd 	movw	r1, #765	; 0x2fd
 80103ae:	4805      	ldr	r0, [pc, #20]	; (80103c4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x94>)
 80103b0:	f00d fd70 	bl	801de94 <__assert_func>
}
 80103b4:	bf00      	nop
 80103b6:	3718      	adds	r7, #24
 80103b8:	46bd      	mov	sp, r7
 80103ba:	bd80      	pop	{r7, pc}
 80103bc:	08022374 	.word	0x08022374
 80103c0:	08027b84 	.word	0x08027b84
 80103c4:	08022488 	.word	0x08022488

080103c8 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE18const_cast_derivedEv>:
  inline Derived& const_cast_derived() const
 80103c8:	b480      	push	{r7}
 80103ca:	b083      	sub	sp, #12
 80103cc:	af00      	add	r7, sp, #0
 80103ce:	6078      	str	r0, [r7, #4]
  { return *static_cast<Derived*>(const_cast<EigenBase*>(this)); }
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	4618      	mov	r0, r3
 80103d4:	370c      	adds	r7, #12
 80103d6:	46bd      	mov	sp, r7
 80103d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103dc:	4770      	bx	lr

080103de <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES5_NS0_9assign_opIffEELi0EEC1ERS5_RKS5_RKS7_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 80103de:	b480      	push	{r7}
 80103e0:	b085      	sub	sp, #20
 80103e2:	af00      	add	r7, sp, #0
 80103e4:	60f8      	str	r0, [r7, #12]
 80103e6:	60b9      	str	r1, [r7, #8]
 80103e8:	607a      	str	r2, [r7, #4]
 80103ea:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	68ba      	ldr	r2, [r7, #8]
 80103f0:	601a      	str	r2, [r3, #0]
 80103f2:	68fb      	ldr	r3, [r7, #12]
 80103f4:	687a      	ldr	r2, [r7, #4]
 80103f6:	605a      	str	r2, [r3, #4]
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	683a      	ldr	r2, [r7, #0]
 80103fc:	609a      	str	r2, [r3, #8]
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	69ba      	ldr	r2, [r7, #24]
 8010402:	60da      	str	r2, [r3, #12]
  }
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	4618      	mov	r0, r3
 8010408:	3714      	adds	r7, #20
 801040a:	46bd      	mov	sp, r7
 801040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010410:	4770      	bx	lr

08010412 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi2EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8010412:	b580      	push	{r7, lr}
 8010414:	b082      	sub	sp, #8
 8010416:	af00      	add	r7, sp, #0
 8010418:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 801041a:	6878      	ldr	r0, [r7, #4]
 801041c:	f000 fc90 	bl	8010d40 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi0ELi1EE3runERS9_>
  }
 8010420:	bf00      	nop
 8010422:	3708      	adds	r7, #8
 8010424:	46bd      	mov	sp, r7
 8010426:	bd80      	pop	{r7, pc}

08010428 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE9transposeEv>:
DenseBase<Derived>::transpose() const
 8010428:	b580      	push	{r7, lr}
 801042a:	b084      	sub	sp, #16
 801042c:	af00      	add	r7, sp, #0
 801042e:	6078      	str	r0, [r7, #4]
  return ConstTransposeReturnType(derived());
 8010430:	6878      	ldr	r0, [r7, #4]
 8010432:	f7f5 fcf1 	bl	8005e18 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 8010436:	4602      	mov	r2, r0
 8010438:	f107 030c 	add.w	r3, r7, #12
 801043c:	4611      	mov	r1, r2
 801043e:	4618      	mov	r0, r3
 8010440:	f000 fca5 	bl	8010d8e <_ZN5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS3_>
 8010444:	68fb      	ldr	r3, [r7, #12]
}
 8010446:	4618      	mov	r0, r3
 8010448:	3710      	adds	r7, #16
 801044a:	46bd      	mov	sp, r7
 801044c:	bd80      	pop	{r7, pc}

0801044e <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE12cwiseProductINS2_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSA_6traitsIT_E6ScalarEEEKS5_KSD_EERKNS0_ISD_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 801044e:	b5b0      	push	{r4, r5, r7, lr}
 8010450:	b086      	sub	sp, #24
 8010452:	af00      	add	r7, sp, #0
 8010454:	60f8      	str	r0, [r7, #12]
 8010456:	60b9      	str	r1, [r7, #8]
 8010458:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 801045a:	68b8      	ldr	r0, [r7, #8]
 801045c:	f000 fca7 	bl	8010dae <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 8010460:	4604      	mov	r4, r0
 8010462:	6878      	ldr	r0, [r7, #4]
 8010464:	f7f5 f83f 	bl	80054e6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8010468:	4605      	mov	r5, r0
 801046a:	f107 0314 	add.w	r3, r7, #20
 801046e:	4618      	mov	r0, r3
 8010470:	f7f5 f898 	bl	80055a4 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 8010474:	f107 0314 	add.w	r3, r7, #20
 8010478:	462a      	mov	r2, r5
 801047a:	4621      	mov	r1, r4
 801047c:	68f8      	ldr	r0, [r7, #12]
 801047e:	f000 fcd5 	bl	8010e2c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERS9_RSB_RKS3_>
}
 8010482:	68f8      	ldr	r0, [r7, #12]
 8010484:	3718      	adds	r7, #24
 8010486:	46bd      	mov	sp, r7
 8010488:	bdb0      	pop	{r4, r5, r7, pc}

0801048a <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 801048a:	b580      	push	{r7, lr}
 801048c:	b082      	sub	sp, #8
 801048e:	af00      	add	r7, sp, #0
 8010490:	6078      	str	r0, [r7, #4]
 8010492:	6878      	ldr	r0, [r7, #4]
 8010494:	f000 fd18 	bl	8010ec8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 8010498:	4603      	mov	r3, r0
 801049a:	4618      	mov	r0, r3
 801049c:	f000 fd1f 	bl	8010ede <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80104a0:	4603      	mov	r3, r0
 80104a2:	4618      	mov	r0, r3
 80104a4:	3708      	adds	r7, #8
 80104a6:	46bd      	mov	sp, r7
 80104a8:	bd80      	pop	{r7, pc}

080104aa <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 80104aa:	b590      	push	{r4, r7, lr}
 80104ac:	b085      	sub	sp, #20
 80104ae:	af00      	add	r7, sp, #0
 80104b0:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 80104b2:	6878      	ldr	r0, [r7, #4]
 80104b4:	f000 fd08 	bl	8010ec8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 80104b8:	4604      	mov	r4, r0
 80104ba:	f107 030c 	add.w	r3, r7, #12
 80104be:	4618      	mov	r0, r3
 80104c0:	f7f5 fb67 	bl	8005b92 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 80104c4:	f107 030c 	add.w	r3, r7, #12
 80104c8:	4619      	mov	r1, r3
 80104ca:	4620      	mov	r0, r4
 80104cc:	f000 fd88 	bl	8010fe0 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 80104d0:	eef0 7a40 	vmov.f32	s15, s0
 80104d4:	bf00      	nop
}
 80104d6:	eeb0 0a67 	vmov.f32	s0, s15
 80104da:	3714      	adds	r7, #20
 80104dc:	46bd      	mov	sp, r7
 80104de:	bd90      	pop	{r4, r7, pc}

080104e0 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80104e0:	b480      	push	{r7}
 80104e2:	b083      	sub	sp, #12
 80104e4:	af00      	add	r7, sp, #0
 80104e6:	6078      	str	r0, [r7, #4]
    }
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	4618      	mov	r0, r3
 80104ec:	370c      	adds	r7, #12
 80104ee:	46bd      	mov	sp, r7
 80104f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f4:	4770      	bx	lr

080104f6 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 80104f6:	b580      	push	{r7, lr}
 80104f8:	b082      	sub	sp, #8
 80104fa:	af00      	add	r7, sp, #0
 80104fc:	6078      	str	r0, [r7, #4]
 80104fe:	6039      	str	r1, [r7, #0]
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	4618      	mov	r0, r3
 8010504:	f7f4 fdad 	bl	8005062 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8010508:	4603      	mov	r3, r0
 801050a:	2b01      	cmp	r3, #1
 801050c:	dd08      	ble.n	8010520 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEEvRKT_RKT0_+0x2a>
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	4618      	mov	r0, r3
 8010512:	f7f4 fd9b 	bl	800504c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8010516:	4603      	mov	r3, r0
 8010518:	2b01      	cmp	r3, #1
 801051a:	dd01      	ble.n	8010520 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEEvRKT_RKT0_+0x2a>
 801051c:	2301      	movs	r3, #1
 801051e:	e000      	b.n	8010522 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEEvRKT_RKT0_+0x2c>
 8010520:	2300      	movs	r3, #0
 8010522:	2b00      	cmp	r3, #0
 8010524:	d003      	beq.n	801052e <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEEvRKT_RKT0_+0x38>
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
 8010526:	6839      	ldr	r1, [r7, #0]
 8010528:	6878      	ldr	r0, [r7, #4]
 801052a:	f000 fd9f 	bl	801106c <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELb0EE3runERKS3_RKS7_>
}
 801052e:	bf00      	nop
 8010530:	3708      	adds	r7, #8
 8010532:	46bd      	mov	sp, r7
 8010534:	bd80      	pop	{r7, pc}

08010536 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELi4ENS_10DenseShapeES7_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 8010536:	b580      	push	{r7, lr}
 8010538:	b082      	sub	sp, #8
 801053a:	af00      	add	r7, sp, #0
 801053c:	6078      	str	r0, [r7, #4]
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	330c      	adds	r3, #12
 8010542:	4618      	mov	r0, r3
 8010544:	f7fe fe48 	bl	800f1d8 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	3308      	adds	r3, #8
 801054c:	4618      	mov	r0, r3
 801054e:	f7f4 ff9a 	bl	8005486 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8010552:	6878      	ldr	r0, [r7, #4]
 8010554:	f000 fda4 	bl	80110a0 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEED1Ev>
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	4618      	mov	r0, r3
 801055c:	3708      	adds	r7, #8
 801055e:	46bd      	mov	sp, r7
 8010560:	bd80      	pop	{r7, pc}

08010562 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 8010562:	b580      	push	{r7, lr}
 8010564:	b082      	sub	sp, #8
 8010566:	af00      	add	r7, sp, #0
 8010568:	6078      	str	r0, [r7, #4]
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	4618      	mov	r0, r3
 801056e:	f7ff ffe2 	bl	8010536 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELi4ENS_10DenseShapeES7_ffED1Ev>
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	4618      	mov	r0, r3
 8010576:	3708      	adds	r7, #8
 8010578:	46bd      	mov	sp, r7
 801057a:	bd80      	pop	{r7, pc}

0801057c <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 801057c:	b580      	push	{r7, lr}
 801057e:	b090      	sub	sp, #64	; 0x40
 8010580:	af02      	add	r7, sp, #8
 8010582:	60f8      	str	r0, [r7, #12]
 8010584:	60b9      	str	r1, [r7, #8]
 8010586:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 8010588:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801058c:	68b9      	ldr	r1, [r7, #8]
 801058e:	4618      	mov	r0, r3
 8010590:	f000 fd77 	bl	8011082 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1ERKS6_>
  resize_if_allowed(dst, src, func);
 8010594:	687a      	ldr	r2, [r7, #4]
 8010596:	68b9      	ldr	r1, [r7, #8]
 8010598:	68f8      	ldr	r0, [r7, #12]
 801059a:	f000 fda9 	bl	80110f0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>
  DstEvaluatorType dstEvaluator(dst);
 801059e:	f107 0320 	add.w	r3, r7, #32
 80105a2:	68f9      	ldr	r1, [r7, #12]
 80105a4:	4618      	mov	r0, r3
 80105a6:	f7f7 f9f3 	bl	8007990 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 80105aa:	68f8      	ldr	r0, [r7, #12]
 80105ac:	f7f7 fa58 	bl	8007a60 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE18const_cast_derivedEv>
 80105b0:	4603      	mov	r3, r0
 80105b2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80105b6:	f107 0120 	add.w	r1, r7, #32
 80105ba:	f107 0010 	add.w	r0, r7, #16
 80105be:	9300      	str	r3, [sp, #0]
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	f000 fdc3 	bl	801114c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEC1ERS5_RKSA_RKSC_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 80105c6:	f107 0310 	add.w	r3, r7, #16
 80105ca:	4618      	mov	r0, r3
 80105cc:	f000 fdd8 	bl	8011180 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi0ELi2EE3runERSE_>
  DstEvaluatorType dstEvaluator(dst);
 80105d0:	f107 0320 	add.w	r3, r7, #32
 80105d4:	4618      	mov	r0, r3
 80105d6:	f7f6 ffcc 	bl	8007572 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 80105da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80105de:	4618      	mov	r0, r3
 80105e0:	f7ff ffbf 	bl	8010562 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEED1Ev>
}
 80105e4:	bf00      	nop
 80105e6:	3738      	adds	r7, #56	; 0x38
 80105e8:	46bd      	mov	sp, r7
 80105ea:	bd80      	pop	{r7, pc}

080105ec <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 80105ec:	b580      	push	{r7, lr}
 80105ee:	b082      	sub	sp, #8
 80105f0:	af00      	add	r7, sp, #0
 80105f2:	6078      	str	r0, [r7, #4]
 80105f4:	6039      	str	r1, [r7, #0]
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	6839      	ldr	r1, [r7, #0]
 80105fa:	4618      	mov	r0, r3
 80105fc:	f000 fdcb 	bl	8011196 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EEC1ERKNS_5BlockIS4_Li3ELi1ELb1EEE>
  }
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	4618      	mov	r0, r3
 8010604:	3708      	adds	r7, #8
 8010606:	46bd      	mov	sp, r7
 8010608:	bd80      	pop	{r7, pc}

0801060a <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 801060a:	b480      	push	{r7}
 801060c:	b083      	sub	sp, #12
 801060e:	af00      	add	r7, sp, #0
 8010610:	6078      	str	r0, [r7, #4]
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	4618      	mov	r0, r3
 8010616:	370c      	adds	r7, #12
 8010618:	46bd      	mov	sp, r7
 801061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801061e:	4770      	bx	lr

08010620 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8010620:	b5b0      	push	{r4, r5, r7, lr}
 8010622:	b084      	sub	sp, #16
 8010624:	af00      	add	r7, sp, #0
 8010626:	60f8      	str	r0, [r7, #12]
 8010628:	60b9      	str	r1, [r7, #8]
 801062a:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	681c      	ldr	r4, [r3, #0]
 8010630:	68f8      	ldr	r0, [r7, #12]
 8010632:	f000 fdc4 	bl	80111be <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEE9colStrideEv>
 8010636:	4602      	mov	r2, r0
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	fb03 f502 	mul.w	r5, r3, r2
 801063e:	68f8      	ldr	r0, [r7, #12]
 8010640:	f000 fdc8 	bl	80111d4 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEE9rowStrideEv>
 8010644:	4602      	mov	r2, r0
 8010646:	68bb      	ldr	r3, [r7, #8]
 8010648:	fb02 f303 	mul.w	r3, r2, r3
 801064c:	442b      	add	r3, r5
 801064e:	009b      	lsls	r3, r3, #2
 8010650:	4423      	add	r3, r4
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	ee07 3a90 	vmov	s15, r3
  }
 8010658:	eeb0 0a67 	vmov.f32	s0, s15
 801065c:	3710      	adds	r7, #16
 801065e:	46bd      	mov	sp, r7
 8010660:	bdb0      	pop	{r4, r5, r7, pc}

08010662 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEENS0_10IndexBasedEfEC1ERKSJ_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 8010662:	b590      	push	{r4, r7, lr}
 8010664:	b083      	sub	sp, #12
 8010666:	af00      	add	r7, sp, #0
 8010668:	6078      	str	r0, [r7, #4]
 801066a:	6039      	str	r1, [r7, #0]
 801066c:	6878      	ldr	r0, [r7, #4]
 801066e:	f000 fdc7 	bl	8011200 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1Ev>
 8010672:	687c      	ldr	r4, [r7, #4]
 8010674:	6838      	ldr	r0, [r7, #0]
 8010676:	f000 fdb8 	bl	80111ea <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE16nestedExpressionEv>
 801067a:	4603      	mov	r3, r0
 801067c:	4619      	mov	r1, r3
 801067e:	4620      	mov	r0, r4
 8010680:	f000 fdc9 	bl	8011216 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERSH_>
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	4618      	mov	r0, r3
 8010688:	370c      	adds	r7, #12
 801068a:	46bd      	mov	sp, r7
 801068c:	bd90      	pop	{r4, r7, pc}

0801068e <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EEC1ERKNS_5BlockIS6_Li1ELi1ELb0EEE>:
  explicit block_evaluator(const XprType& block)
 801068e:	b580      	push	{r7, lr}
 8010690:	b082      	sub	sp, #8
 8010692:	af00      	add	r7, sp, #0
 8010694:	6078      	str	r0, [r7, #4]
 8010696:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	6839      	ldr	r1, [r7, #0]
 801069c:	4618      	mov	r0, r3
 801069e:	f000 fdc9 	bl	8011234 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEEC1ERKS8_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 80106a2:	683b      	ldr	r3, [r7, #0]
 80106a4:	4618      	mov	r0, r3
 80106a6:	f000 fdef 	bl	8011288 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE4dataEv>
 80106aa:	bf00      	nop
  }
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	4618      	mov	r0, r3
 80106b0:	3708      	adds	r7, #8
 80106b2:	46bd      	mov	sp, r7
 80106b4:	bd80      	pop	{r7, pc}

080106b6 <_ZNK5Eigen8internal19variable_if_dynamicIiLin1EE5valueEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE T value() const { return m_value; }
 80106b6:	b480      	push	{r7}
 80106b8:	b083      	sub	sp, #12
 80106ba:	af00      	add	r7, sp, #0
 80106bc:	6078      	str	r0, [r7, #4]
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	4618      	mov	r0, r3
 80106c4:	370c      	adds	r7, #12
 80106c6:	46bd      	mov	sp, r7
 80106c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106cc:	4770      	bx	lr

080106ce <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 80106ce:	b5b0      	push	{r4, r5, r7, lr}
 80106d0:	b086      	sub	sp, #24
 80106d2:	af00      	add	r7, sp, #0
 80106d4:	60f8      	str	r0, [r7, #12]
 80106d6:	60b9      	str	r1, [r7, #8]
 80106d8:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 80106da:	68fb      	ldr	r3, [r7, #12]
 80106dc:	4618      	mov	r0, r3
 80106de:	f000 fddf 	bl	80112a0 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE4Data4funcEv>
 80106e2:	4604      	mov	r4, r0
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	3304      	adds	r3, #4
 80106e8:	687a      	ldr	r2, [r7, #4]
 80106ea:	68b9      	ldr	r1, [r7, #8]
 80106ec:	4618      	mov	r0, r3
 80106ee:	f000 fde2 	bl	80112b6 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffEii>
 80106f2:	4605      	mov	r5, r0
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	3308      	adds	r3, #8
 80106f8:	687a      	ldr	r2, [r7, #4]
 80106fa:	68b9      	ldr	r1, [r7, #8]
 80106fc:	4618      	mov	r0, r3
 80106fe:	f000 fdf2 	bl	80112e6 <_ZNK5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffIiEEfT_SB_>
 8010702:	eef0 7a40 	vmov.f32	s15, s0
 8010706:	edc7 7a05 	vstr	s15, [r7, #20]
 801070a:	f107 0314 	add.w	r3, r7, #20
 801070e:	461a      	mov	r2, r3
 8010710:	4629      	mov	r1, r5
 8010712:	4620      	mov	r0, r4
 8010714:	f7fe fe76 	bl	800f404 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 8010718:	eef0 7a40 	vmov.f32	s15, s0
  }
 801071c:	eeb0 0a67 	vmov.f32	s0, s15
 8010720:	3718      	adds	r7, #24
 8010722:	46bd      	mov	sp, r7
 8010724:	bdb0      	pop	{r4, r5, r7, pc}

08010726 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 8010726:	b480      	push	{r7}
 8010728:	b083      	sub	sp, #12
 801072a:	af00      	add	r7, sp, #0
 801072c:	6078      	str	r0, [r7, #4]
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	4618      	mov	r0, r3
 8010732:	370c      	adds	r7, #12
 8010734:	46bd      	mov	sp, r7
 8010736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801073a:	4770      	bx	lr

0801073c <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 801073c:	b480      	push	{r7}
 801073e:	b083      	sub	sp, #12
 8010740:	af00      	add	r7, sp, #0
 8010742:	6078      	str	r0, [r7, #4]
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	4618      	mov	r0, r3
 8010748:	370c      	adds	r7, #12
 801074a:	46bd      	mov	sp, r7
 801074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010750:	4770      	bx	lr

08010752 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8010752:	b580      	push	{r7, lr}
 8010754:	b082      	sub	sp, #8
 8010756:	af00      	add	r7, sp, #0
 8010758:	6078      	str	r0, [r7, #4]
 801075a:	6039      	str	r1, [r7, #0]
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	6839      	ldr	r1, [r7, #0]
 8010760:	4618      	mov	r0, r3
 8010762:	f000 fdd4 	bl	801130e <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1ERKS6_>
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	4618      	mov	r0, r3
 801076a:	3708      	adds	r7, #8
 801076c:	46bd      	mov	sp, r7
 801076e:	bd80      	pop	{r7, pc}

08010770 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_EC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 8010770:	b590      	push	{r4, r7, lr}
 8010772:	b083      	sub	sp, #12
 8010774:	af00      	add	r7, sp, #0
 8010776:	6078      	str	r0, [r7, #4]
 8010778:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 801077a:	6878      	ldr	r0, [r7, #4]
 801077c:	f000 fdf2 	bl	8011364 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 8010780:	683b      	ldr	r3, [r7, #0]
 8010782:	4618      	mov	r0, r3
 8010784:	f000 f81e 	bl	80107c4 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4dataEv>
 8010788:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	601a      	str	r2, [r3, #0]
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	1d1c      	adds	r4, r3, #4
 8010792:	683b      	ldr	r3, [r7, #0]
 8010794:	4618      	mov	r0, r3
 8010796:	f000 fdc9 	bl	801132c <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EE11innerStrideEv>
 801079a:	4603      	mov	r3, r0
 801079c:	4619      	mov	r1, r3
 801079e:	4620      	mov	r0, r4
 80107a0:	f7f6 fa04 	bl	8006bac <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	1d5c      	adds	r4, r3, #5
 80107a8:	683b      	ldr	r3, [r7, #0]
 80107aa:	4618      	mov	r0, r3
 80107ac:	f000 fdcc 	bl	8011348 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EE11outerStrideEv>
 80107b0:	4603      	mov	r3, r0
 80107b2:	4619      	mov	r1, r3
 80107b4:	4620      	mov	r0, r4
 80107b6:	f7f6 f9df 	bl	8006b78 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	4618      	mov	r0, r3
 80107be:	370c      	adds	r7, #12
 80107c0:	46bd      	mov	sp, r7
 80107c2:	bd90      	pop	{r4, r7, pc}

080107c4 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC inline const Scalar* data() const { return m_data; }
 80107c4:	b480      	push	{r7}
 80107c6:	b083      	sub	sp, #12
 80107c8:	af00      	add	r7, sp, #0
 80107ca:	6078      	str	r0, [r7, #4]
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	4618      	mov	r0, r3
 80107d2:	370c      	adds	r7, #12
 80107d4:	46bd      	mov	sp, r7
 80107d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107da:	4770      	bx	lr

080107dc <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 80107dc:	b580      	push	{r7, lr}
 80107de:	b082      	sub	sp, #8
 80107e0:	af00      	add	r7, sp, #0
 80107e2:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 80107e4:	f7f6 fa07 	bl	8006bf6 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 80107e8:	4603      	mov	r3, r0
  }
 80107ea:	4618      	mov	r0, r3
 80107ec:	3708      	adds	r7, #8
 80107ee:	46bd      	mov	sp, r7
 80107f0:	bd80      	pop	{r7, pc}

080107f2 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 80107f2:	b580      	push	{r7, lr}
 80107f4:	b082      	sub	sp, #8
 80107f6:	af00      	add	r7, sp, #0
 80107f8:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 80107fa:	f7f6 fa04 	bl	8006c06 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 80107fe:	4603      	mov	r3, r0
  }
 8010800:	4618      	mov	r0, r3
 8010802:	3708      	adds	r7, #8
 8010804:	46bd      	mov	sp, r7
 8010806:	bd80      	pop	{r7, pc}

08010808 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEEC1Ev>:
 8010808:	b580      	push	{r7, lr}
 801080a:	b082      	sub	sp, #8
 801080c:	af00      	add	r7, sp, #0
 801080e:	6078      	str	r0, [r7, #4]
 8010810:	6878      	ldr	r0, [r7, #4]
 8010812:	f000 fdb2 	bl	801137a <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEEC1Ev>
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	4618      	mov	r0, r3
 801081a:	3708      	adds	r7, #8
 801081c:	46bd      	mov	sp, r7
 801081e:	bd80      	pop	{r7, pc}

08010820 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li1ELi3EEC1Ev>:
class dense_product_base
 8010820:	b580      	push	{r7, lr}
 8010822:	b082      	sub	sp, #8
 8010824:	af00      	add	r7, sp, #0
 8010826:	6078      	str	r0, [r7, #4]
 8010828:	6878      	ldr	r0, [r7, #4]
 801082a:	f7ff ffed 	bl	8010808 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEEC1Ev>
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	4618      	mov	r0, r3
 8010832:	3708      	adds	r7, #8
 8010834:	46bd      	mov	sp, r7
 8010836:	bd80      	pop	{r7, pc}

08010838 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8010838:	b580      	push	{r7, lr}
 801083a:	b082      	sub	sp, #8
 801083c:	af00      	add	r7, sp, #0
 801083e:	6078      	str	r0, [r7, #4]
 8010840:	6878      	ldr	r0, [r7, #4]
 8010842:	f7ff ffed 	bl	8010820 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li1ELi3EEC1Ev>
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	4618      	mov	r0, r3
 801084a:	3708      	adds	r7, #8
 801084c:	46bd      	mov	sp, r7
 801084e:	bd80      	pop	{r7, pc}

08010850 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EEC1ERKS2_S5_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8010850:	b590      	push	{r4, r7, lr}
 8010852:	b085      	sub	sp, #20
 8010854:	af00      	add	r7, sp, #0
 8010856:	60f8      	str	r0, [r7, #12]
 8010858:	60b9      	str	r1, [r7, #8]
 801085a:	607a      	str	r2, [r7, #4]
 801085c:	68f8      	ldr	r0, [r7, #12]
 801085e:	f7ff ffeb 	bl	8010838 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1ENS_5DenseEEC1Ev>
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	68ba      	ldr	r2, [r7, #8]
 8010866:	601a      	str	r2, [r3, #0]
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	687a      	ldr	r2, [r7, #4]
 801086c:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 801086e:	68bb      	ldr	r3, [r7, #8]
 8010870:	4618      	mov	r0, r3
 8010872:	f7f4 fbeb 	bl	800504c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8010876:	4604      	mov	r4, r0
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	4618      	mov	r0, r3
 801087c:	f7f4 fbf1 	bl	8005062 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8010880:	4603      	mov	r3, r0
 8010882:	429c      	cmp	r4, r3
 8010884:	d005      	beq.n	8010892 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EEC1ERKS2_S5_+0x42>
 8010886:	4b06      	ldr	r3, [pc, #24]	; (80108a0 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EEC1ERKS2_S5_+0x50>)
 8010888:	4a06      	ldr	r2, [pc, #24]	; (80108a4 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EEC1ERKS2_S5_+0x54>)
 801088a:	2160      	movs	r1, #96	; 0x60
 801088c:	4806      	ldr	r0, [pc, #24]	; (80108a8 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EEC1ERKS2_S5_+0x58>)
 801088e:	f00d fb01 	bl	801de94 <__assert_func>
 8010892:	bf00      	nop
    }
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	4618      	mov	r0, r3
 8010898:	3714      	adds	r7, #20
 801089a:	46bd      	mov	sp, r7
 801089c:	bd90      	pop	{r4, r7, pc}
 801089e:	bf00      	nop
 80108a0:	0801ffbc 	.word	0x0801ffbc
 80108a4:	08027c68 	.word	0x08027c68
 80108a8:	0802030c 	.word	0x0802030c

080108ac <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 80108ac:	b580      	push	{r7, lr}
 80108ae:	b084      	sub	sp, #16
 80108b0:	af00      	add	r7, sp, #0
 80108b2:	60f8      	str	r0, [r7, #12]
 80108b4:	60b9      	str	r1, [r7, #8]
 80108b6:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 80108b8:	68b9      	ldr	r1, [r7, #8]
 80108ba:	68f8      	ldr	r0, [r7, #12]
 80108bc:	f000 fd68 	bl	8011390 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 80108c0:	687a      	ldr	r2, [r7, #4]
 80108c2:	68b9      	ldr	r1, [r7, #8]
 80108c4:	68f8      	ldr	r0, [r7, #12]
 80108c6:	f000 fda6 	bl	8011416 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 80108ca:	bf00      	nop
 80108cc:	3710      	adds	r7, #16
 80108ce:	46bd      	mov	sp, r7
 80108d0:	bd80      	pop	{r7, pc}

080108d2 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE4dataEv>:
    const Scalar* data() const { return derived().nestedExpression().data(); }
 80108d2:	b580      	push	{r7, lr}
 80108d4:	b082      	sub	sp, #8
 80108d6:	af00      	add	r7, sp, #0
 80108d8:	6078      	str	r0, [r7, #4]
 80108da:	6878      	ldr	r0, [r7, #4]
 80108dc:	f7f5 f8d2 	bl	8005a84 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>
 80108e0:	4603      	mov	r3, r0
 80108e2:	4618      	mov	r0, r3
 80108e4:	f7fd fadc 	bl	800dea0 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE16nestedExpressionEv>
 80108e8:	4603      	mov	r3, r0
 80108ea:	4618      	mov	r0, r3
 80108ec:	f7f7 fcf2 	bl	80082d4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4dataEv>
 80108f0:	4603      	mov	r3, r0
 80108f2:	4618      	mov	r0, r3
 80108f4:	3708      	adds	r7, #8
 80108f6:	46bd      	mov	sp, r7
 80108f8:	bd80      	pop	{r7, pc}

080108fa <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE11innerStrideEv>:
    Index innerStride() const { return derived().nestedExpression().innerStride(); }
 80108fa:	b580      	push	{r7, lr}
 80108fc:	b082      	sub	sp, #8
 80108fe:	af00      	add	r7, sp, #0
 8010900:	6078      	str	r0, [r7, #4]
 8010902:	6878      	ldr	r0, [r7, #4]
 8010904:	f7f5 f8be 	bl	8005a84 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>
 8010908:	4603      	mov	r3, r0
 801090a:	4618      	mov	r0, r3
 801090c:	f7fd fac8 	bl	800dea0 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE16nestedExpressionEv>
 8010910:	4603      	mov	r3, r0
 8010912:	4618      	mov	r0, r3
 8010914:	f7fd f968 	bl	800dbe8 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11innerStrideEv>
 8010918:	4603      	mov	r3, r0
 801091a:	4618      	mov	r0, r3
 801091c:	3708      	adds	r7, #8
 801091e:	46bd      	mov	sp, r7
 8010920:	bd80      	pop	{r7, pc}

08010922 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE11outerStrideEv>:
    Index outerStride() const { return derived().nestedExpression().outerStride(); }
 8010922:	b580      	push	{r7, lr}
 8010924:	b082      	sub	sp, #8
 8010926:	af00      	add	r7, sp, #0
 8010928:	6078      	str	r0, [r7, #4]
 801092a:	6878      	ldr	r0, [r7, #4]
 801092c:	f7f5 f8aa 	bl	8005a84 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>
 8010930:	4603      	mov	r3, r0
 8010932:	4618      	mov	r0, r3
 8010934:	f7fd fab4 	bl	800dea0 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE16nestedExpressionEv>
 8010938:	4603      	mov	r3, r0
 801093a:	4618      	mov	r0, r3
 801093c:	f7f7 ff04 	bl	8008748 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>
 8010940:	4603      	mov	r3, r0
 8010942:	4618      	mov	r0, r3
 8010944:	3708      	adds	r7, #8
 8010946:	46bd      	mov	sp, r7
 8010948:	bd80      	pop	{r7, pc}

0801094a <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1Ev>:
 801094a:	b580      	push	{r7, lr}
 801094c:	b082      	sub	sp, #8
 801094e:	af00      	add	r7, sp, #0
 8010950:	6078      	str	r0, [r7, #4]
 8010952:	6878      	ldr	r0, [r7, #4]
 8010954:	f000 fd97 	bl	8011486 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1Ev>
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	4618      	mov	r0, r3
 801095c:	3708      	adds	r7, #8
 801095e:	46bd      	mov	sp, r7
 8010960:	bd80      	pop	{r7, pc}
	...

08010964 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 8010964:	b580      	push	{r7, lr}
 8010966:	b084      	sub	sp, #16
 8010968:	af00      	add	r7, sp, #0
 801096a:	60f8      	str	r0, [r7, #12]
 801096c:	60b9      	str	r1, [r7, #8]
 801096e:	607a      	str	r2, [r7, #4]
 8010970:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 8010972:	68f8      	ldr	r0, [r7, #12]
 8010974:	f7ff ffe9 	bl	801094a <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1Ev>
 8010978:	68fb      	ldr	r3, [r7, #12]
 801097a:	68ba      	ldr	r2, [r7, #8]
 801097c:	601a      	str	r2, [r3, #0]
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	3304      	adds	r3, #4
 8010982:	6879      	ldr	r1, [r7, #4]
 8010984:	4618      	mov	r0, r3
 8010986:	f7f6 f8f7 	bl	8006b78 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	3305      	adds	r3, #5
 801098e:	6839      	ldr	r1, [r7, #0]
 8010990:	4618      	mov	r0, r3
 8010992:	f7f6 f90b 	bl	8006bac <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 8010996:	68bb      	ldr	r3, [r7, #8]
 8010998:	2b00      	cmp	r3, #0
 801099a:	d011      	beq.n	80109c0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	2b00      	cmp	r3, #0
 80109a0:	db08      	blt.n	80109b4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x50>
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	2b03      	cmp	r3, #3
 80109a6:	d105      	bne.n	80109b4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x50>
 80109a8:	683b      	ldr	r3, [r7, #0]
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	db02      	blt.n	80109b4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x50>
 80109ae:	683b      	ldr	r3, [r7, #0]
 80109b0:	2b01      	cmp	r3, #1
 80109b2:	d005      	beq.n	80109c0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 80109b4:	4b07      	ldr	r3, [pc, #28]	; (80109d4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x70>)
 80109b6:	4a08      	ldr	r2, [pc, #32]	; (80109d8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x74>)
 80109b8:	21b0      	movs	r1, #176	; 0xb0
 80109ba:	4808      	ldr	r0, [pc, #32]	; (80109dc <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x78>)
 80109bc:	f00d fa6a 	bl	801de94 <__assert_func>
      checkSanity<Derived>();
 80109c0:	2100      	movs	r1, #0
 80109c2:	68f8      	ldr	r0, [r7, #12]
 80109c4:	f000 fd6a 	bl	801149c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE11checkSanityIS7_EEvNS_8internal9enable_ifIXeqsrNSA_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 80109c8:	68fb      	ldr	r3, [r7, #12]
 80109ca:	4618      	mov	r0, r3
 80109cc:	3710      	adds	r7, #16
 80109ce:	46bd      	mov	sp, r7
 80109d0:	bd80      	pop	{r7, pc}
 80109d2:	bf00      	nop
 80109d4:	08026420 	.word	0x08026420
 80109d8:	08027d90 	.word	0x08027d90
 80109dc:	080265d0 	.word	0x080265d0

080109e0 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EE4initEv>:
    void init()
 80109e0:	b580      	push	{r7, lr}
 80109e2:	b082      	sub	sp, #8
 80109e4:	af00      	add	r7, sp, #0
 80109e6:	6078      	str	r0, [r7, #4]
                    : m_xpr.innerStride();
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	3308      	adds	r3, #8
                    ? m_xpr.outerStride()
 80109ec:	4618      	mov	r0, r3
 80109ee:	f7ff ff84 	bl	80108fa <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE11innerStrideEv>
 80109f2:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	615a      	str	r2, [r3, #20]
    }
 80109f8:	bf00      	nop
 80109fa:	3708      	adds	r7, #8
 80109fc:	46bd      	mov	sp, r7
 80109fe:	bd80      	pop	{r7, pc}

08010a00 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 8010a00:	b580      	push	{r7, lr}
 8010a02:	b082      	sub	sp, #8
 8010a04:	af00      	add	r7, sp, #0
 8010a06:	6078      	str	r0, [r7, #4]
 8010a08:	6039      	str	r1, [r7, #0]
 8010a0a:	6878      	ldr	r0, [r7, #4]
 8010a0c:	f000 fd51 	bl	80114b2 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1Ev>
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	6839      	ldr	r1, [r7, #0]
 8010a14:	4618      	mov	r0, r3
 8010a16:	f000 fd57 	bl	80114c8 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>
  }
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	4618      	mov	r0, r3
 8010a1e:	3708      	adds	r7, #8
 8010a20:	46bd      	mov	sp, r7
 8010a22:	bd80      	pop	{r7, pc}

08010a24 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi0ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8010a24:	b580      	push	{r7, lr}
 8010a26:	b082      	sub	sp, #8
 8010a28:	af00      	add	r7, sp, #0
 8010a2a:	6078      	str	r0, [r7, #4]
 8010a2c:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8010a2e:	2200      	movs	r2, #0
 8010a30:	2100      	movs	r1, #0
 8010a32:	6878      	ldr	r0, [r7, #4]
 8010a34:	f000 fd70 	bl	8011518 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE17coeffByOuterInnerEii>
 8010a38:	eef0 7a40 	vmov.f32	s15, s0
  }
 8010a3c:	eeb0 0a67 	vmov.f32	s0, s15
 8010a40:	3708      	adds	r7, #8
 8010a42:	46bd      	mov	sp, r7
 8010a44:	bd80      	pop	{r7, pc}

08010a46 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi1ELi2EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 8010a46:	b580      	push	{r7, lr}
 8010a48:	b084      	sub	sp, #16
 8010a4a:	af00      	add	r7, sp, #0
 8010a4c:	6078      	str	r0, [r7, #4]
 8010a4e:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8010a50:	6839      	ldr	r1, [r7, #0]
 8010a52:	6878      	ldr	r0, [r7, #4]
 8010a54:	f000 fd73 	bl	801153e <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi1ELi1EE3runERKSM_RKS3_>
 8010a58:	eef0 7a40 	vmov.f32	s15, s0
 8010a5c:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 8010a60:	6839      	ldr	r1, [r7, #0]
 8010a62:	6878      	ldr	r0, [r7, #4]
 8010a64:	f000 fd7c 	bl	8011560 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi2ELi1EE3runERKSM_RKS3_>
 8010a68:	eef0 7a40 	vmov.f32	s15, s0
 8010a6c:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8010a70:	f107 020c 	add.w	r2, r7, #12
 8010a74:	f107 0308 	add.w	r3, r7, #8
 8010a78:	4619      	mov	r1, r3
 8010a7a:	6838      	ldr	r0, [r7, #0]
 8010a7c:	f7f8 fc81 	bl	8009382 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 8010a80:	eef0 7a40 	vmov.f32	s15, s0
  }
 8010a84:	eeb0 0a67 	vmov.f32	s0, s15
 8010a88:	3710      	adds	r7, #16
 8010a8a:	46bd      	mov	sp, r7
 8010a8c:	bd80      	pop	{r7, pc}

08010a8e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8010a8e:	b580      	push	{r7, lr}
 8010a90:	b082      	sub	sp, #8
 8010a92:	af00      	add	r7, sp, #0
 8010a94:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8010a96:	2202      	movs	r2, #2
 8010a98:	2102      	movs	r1, #2
 8010a9a:	6878      	ldr	r0, [r7, #4]
 8010a9c:	f7fc f8c3 	bl	800cc26 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8010aa0:	6878      	ldr	r0, [r7, #4]
 8010aa2:	f000 fd6e 	bl	8011582 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSG_>
  }
 8010aa6:	bf00      	nop
 8010aa8:	3708      	adds	r7, #8
 8010aaa:	46bd      	mov	sp, r7
 8010aac:	bd80      	pop	{r7, pc}

08010aae <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8010aae:	b480      	push	{r7}
 8010ab0:	b083      	sub	sp, #12
 8010ab2:	af00      	add	r7, sp, #0
 8010ab4:	6078      	str	r0, [r7, #4]
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	4618      	mov	r0, r3
 8010abc:	370c      	adds	r7, #12
 8010abe:	46bd      	mov	sp, r7
 8010ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac4:	4770      	bx	lr

08010ac6 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8010ac6:	b480      	push	{r7}
 8010ac8:	b083      	sub	sp, #12
 8010aca:	af00      	add	r7, sp, #0
 8010acc:	6078      	str	r0, [r7, #4]
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	3304      	adds	r3, #4
 8010ad2:	4618      	mov	r0, r3
 8010ad4:	370c      	adds	r7, #12
 8010ad6:	46bd      	mov	sp, r7
 8010ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010adc:	4770      	bx	lr

08010ade <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8010ade:	b480      	push	{r7}
 8010ae0:	b083      	sub	sp, #12
 8010ae2:	af00      	add	r7, sp, #0
 8010ae4:	6078      	str	r0, [r7, #4]
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	4618      	mov	r0, r3
 8010aea:	370c      	adds	r7, #12
 8010aec:	46bd      	mov	sp, r7
 8010aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010af2:	4770      	bx	lr

08010af4 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERKS5_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 8010af4:	b580      	push	{r7, lr}
 8010af6:	b082      	sub	sp, #8
 8010af8:	af00      	add	r7, sp, #0
 8010afa:	6078      	str	r0, [r7, #4]
 8010afc:	6039      	str	r1, [r7, #0]
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	6839      	ldr	r1, [r7, #0]
 8010b02:	4618      	mov	r0, r3
 8010b04:	f000 fd47 	bl	8011596 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfEC1ERKS5_>
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	4618      	mov	r0, r3
 8010b0c:	3708      	adds	r7, #8
 8010b0e:	46bd      	mov	sp, r7
 8010b10:	bd80      	pop	{r7, pc}

08010b12 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 8010b12:	b5b0      	push	{r4, r5, r7, lr}
 8010b14:	b084      	sub	sp, #16
 8010b16:	af00      	add	r7, sp, #0
 8010b18:	6078      	str	r0, [r7, #4]
 8010b1a:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	689c      	ldr	r4, [r3, #8]
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	6839      	ldr	r1, [r7, #0]
 8010b26:	4618      	mov	r0, r3
 8010b28:	f7f7 fe81 	bl	800882e <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi>
 8010b2c:	4605      	mov	r5, r0
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	685b      	ldr	r3, [r3, #4]
 8010b32:	6839      	ldr	r1, [r7, #0]
 8010b34:	4618      	mov	r0, r3
 8010b36:	f000 fd44 	bl	80115c2 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEELi3ENS_10DenseShapeES9_ffE5coeffEi>
 8010b3a:	eef0 7a40 	vmov.f32	s15, s0
 8010b3e:	edc7 7a03 	vstr	s15, [r7, #12]
 8010b42:	f107 030c 	add.w	r3, r7, #12
 8010b46:	461a      	mov	r2, r3
 8010b48:	4629      	mov	r1, r5
 8010b4a:	4620      	mov	r0, r4
 8010b4c:	f7f7 fe28 	bl	80087a0 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 8010b50:	bf00      	nop
 8010b52:	3710      	adds	r7, #16
 8010b54:	46bd      	mov	sp, r7
 8010b56:	bdb0      	pop	{r4, r5, r7, pc}

08010b58 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8010b58:	b580      	push	{r7, lr}
 8010b5a:	b082      	sub	sp, #8
 8010b5c:	af00      	add	r7, sp, #0
 8010b5e:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8010b60:	2101      	movs	r1, #1
 8010b62:	6878      	ldr	r0, [r7, #4]
 8010b64:	f7ff ffd5 	bl	8010b12 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8010b68:	6878      	ldr	r0, [r7, #4]
 8010b6a:	f000 fd63 	bl	8011634 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSG_>
  }
 8010b6e:	bf00      	nop
 8010b70:	3708      	adds	r7, #8
 8010b72:	46bd      	mov	sp, r7
 8010b74:	bd80      	pop	{r7, pc}

08010b76 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKSG_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8010b76:	b580      	push	{r7, lr}
 8010b78:	b082      	sub	sp, #8
 8010b7a:	af00      	add	r7, sp, #0
 8010b7c:	6078      	str	r0, [r7, #4]
 8010b7e:	6039      	str	r1, [r7, #0]
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	6839      	ldr	r1, [r7, #0]
 8010b84:	4618      	mov	r0, r3
 8010b86:	f000 fd64 	bl	8011652 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffEC1ERKSG_>
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	4618      	mov	r0, r3
 8010b8e:	3708      	adds	r7, #8
 8010b90:	46bd      	mov	sp, r7
 8010b92:	bd80      	pop	{r7, pc}

08010b94 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8010b94:	b480      	push	{r7}
 8010b96:	b083      	sub	sp, #12
 8010b98:	af00      	add	r7, sp, #0
 8010b9a:	6078      	str	r0, [r7, #4]
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	4618      	mov	r0, r3
 8010ba0:	370c      	adds	r7, #12
 8010ba2:	46bd      	mov	sp, r7
 8010ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ba8:	4770      	bx	lr
	...

08010bac <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8010bac:	b580      	push	{r7, lr}
 8010bae:	b086      	sub	sp, #24
 8010bb0:	af00      	add	r7, sp, #0
 8010bb2:	60f8      	str	r0, [r7, #12]
 8010bb4:	60b9      	str	r1, [r7, #8]
 8010bb6:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8010bb8:	68b8      	ldr	r0, [r7, #8]
 8010bba:	f7f5 faa4 	bl	8006106 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8010bbe:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8010bc0:	68b8      	ldr	r0, [r7, #8]
 8010bc2:	f7f5 faad 	bl	8006120 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 8010bc6:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8010bc8:	68fb      	ldr	r3, [r7, #12]
 8010bca:	4618      	mov	r0, r3
 8010bcc:	f7f5 fa39 	bl	8006042 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8010bd0:	4602      	mov	r2, r0
 8010bd2:	697b      	ldr	r3, [r7, #20]
 8010bd4:	4293      	cmp	r3, r2
 8010bd6:	d107      	bne.n	8010be8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 8010bd8:	68fb      	ldr	r3, [r7, #12]
 8010bda:	4618      	mov	r0, r3
 8010bdc:	f7f5 fa3c 	bl	8006058 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 8010be0:	4602      	mov	r2, r0
 8010be2:	693b      	ldr	r3, [r7, #16]
 8010be4:	4293      	cmp	r3, r2
 8010be6:	d001      	beq.n	8010bec <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 8010be8:	2301      	movs	r3, #1
 8010bea:	e000      	b.n	8010bee <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 8010bec:	2300      	movs	r3, #0
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d005      	beq.n	8010bfe <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	693a      	ldr	r2, [r7, #16]
 8010bf6:	6979      	ldr	r1, [r7, #20]
 8010bf8:	4618      	mov	r0, r3
 8010bfa:	f7fc fd73 	bl	800d6e4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 8010bfe:	68fb      	ldr	r3, [r7, #12]
 8010c00:	4618      	mov	r0, r3
 8010c02:	f7f5 fa1e 	bl	8006042 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8010c06:	4602      	mov	r2, r0
 8010c08:	697b      	ldr	r3, [r7, #20]
 8010c0a:	4293      	cmp	r3, r2
 8010c0c:	d107      	bne.n	8010c1e <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	4618      	mov	r0, r3
 8010c12:	f7f5 fa21 	bl	8006058 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 8010c16:	4602      	mov	r2, r0
 8010c18:	693b      	ldr	r3, [r7, #16]
 8010c1a:	4293      	cmp	r3, r2
 8010c1c:	d006      	beq.n	8010c2c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 8010c1e:	4b05      	ldr	r3, [pc, #20]	; (8010c34 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 8010c20:	4a05      	ldr	r2, [pc, #20]	; (8010c38 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 8010c22:	f240 21fd 	movw	r1, #765	; 0x2fd
 8010c26:	4805      	ldr	r0, [pc, #20]	; (8010c3c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8010c28:	f00d f934 	bl	801de94 <__assert_func>
}
 8010c2c:	bf00      	nop
 8010c2e:	3718      	adds	r7, #24
 8010c30:	46bd      	mov	sp, r7
 8010c32:	bd80      	pop	{r7, pc}
 8010c34:	08022374 	.word	0x08022374
 8010c38:	08027ea8 	.word	0x08027ea8
 8010c3c:	08022488 	.word	0x08022488

08010c40 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_INS3_IfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EEC1ERS5_RKSJ_RKSL_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8010c40:	b480      	push	{r7}
 8010c42:	b085      	sub	sp, #20
 8010c44:	af00      	add	r7, sp, #0
 8010c46:	60f8      	str	r0, [r7, #12]
 8010c48:	60b9      	str	r1, [r7, #8]
 8010c4a:	607a      	str	r2, [r7, #4]
 8010c4c:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	68ba      	ldr	r2, [r7, #8]
 8010c52:	601a      	str	r2, [r3, #0]
 8010c54:	68fb      	ldr	r3, [r7, #12]
 8010c56:	687a      	ldr	r2, [r7, #4]
 8010c58:	605a      	str	r2, [r3, #4]
 8010c5a:	68fb      	ldr	r3, [r7, #12]
 8010c5c:	683a      	ldr	r2, [r7, #0]
 8010c5e:	609a      	str	r2, [r3, #8]
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	69ba      	ldr	r2, [r7, #24]
 8010c64:	60da      	str	r2, [r3, #12]
  }
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	4618      	mov	r0, r3
 8010c6a:	3714      	adds	r7, #20
 8010c6c:	46bd      	mov	sp, r7
 8010c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c72:	4770      	bx	lr

08010c74 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_INS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSN_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8010c74:	b580      	push	{r7, lr}
 8010c76:	b082      	sub	sp, #8
 8010c78:	af00      	add	r7, sp, #0
 8010c7a:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8010c7c:	6878      	ldr	r0, [r7, #4]
 8010c7e:	f000 fcfa 	bl	8011676 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_INS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi0ELi1EE3runERSN_>
  }
 8010c82:	bf00      	nop
 8010c84:	3708      	adds	r7, #8
 8010c86:	46bd      	mov	sp, r7
 8010c88:	bd80      	pop	{r7, pc}

08010c8a <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 8010c8a:	b480      	push	{r7}
 8010c8c:	b083      	sub	sp, #12
 8010c8e:	af00      	add	r7, sp, #0
 8010c90:	6078      	str	r0, [r7, #4]
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	4618      	mov	r0, r3
 8010c96:	370c      	adds	r7, #12
 8010c98:	46bd      	mov	sp, r7
 8010c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c9e:	4770      	bx	lr

08010ca0 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8010ca0:	b480      	push	{r7}
 8010ca2:	b083      	sub	sp, #12
 8010ca4:	af00      	add	r7, sp, #0
 8010ca6:	6078      	str	r0, [r7, #4]
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	4618      	mov	r0, r3
 8010cac:	370c      	adds	r7, #12
 8010cae:	46bd      	mov	sp, r7
 8010cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cb4:	4770      	bx	lr

08010cb6 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8010cb6:	b580      	push	{r7, lr}
 8010cb8:	b082      	sub	sp, #8
 8010cba:	af00      	add	r7, sp, #0
 8010cbc:	6078      	str	r0, [r7, #4]
 8010cbe:	6039      	str	r1, [r7, #0]
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	6839      	ldr	r1, [r7, #0]
 8010cc4:	4618      	mov	r0, r3
 8010cc6:	f000 fce5 	bl	8011694 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1ERKS6_>
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	4618      	mov	r0, r3
 8010cce:	3708      	adds	r7, #8
 8010cd0:	46bd      	mov	sp, r7
 8010cd2:	bd80      	pop	{r7, pc}

08010cd4 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_EC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 8010cd4:	b590      	push	{r4, r7, lr}
 8010cd6:	b083      	sub	sp, #12
 8010cd8:	af00      	add	r7, sp, #0
 8010cda:	6078      	str	r0, [r7, #4]
 8010cdc:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 8010cde:	6878      	ldr	r0, [r7, #4]
 8010ce0:	f000 fd03 	bl	80116ea <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 8010ce4:	683b      	ldr	r3, [r7, #0]
 8010ce6:	4618      	mov	r0, r3
 8010ce8:	f000 f81e 	bl	8010d28 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE4dataEv>
 8010cec:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	601a      	str	r2, [r3, #0]
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	1d1c      	adds	r4, r3, #4
 8010cf6:	683b      	ldr	r3, [r7, #0]
 8010cf8:	4618      	mov	r0, r3
 8010cfa:	f000 fcda 	bl	80116b2 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EE11innerStrideEv>
 8010cfe:	4603      	mov	r3, r0
 8010d00:	4619      	mov	r1, r3
 8010d02:	4620      	mov	r0, r4
 8010d04:	f7f5 ff52 	bl	8006bac <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	1d5c      	adds	r4, r3, #5
 8010d0c:	683b      	ldr	r3, [r7, #0]
 8010d0e:	4618      	mov	r0, r3
 8010d10:	f000 fcdd 	bl	80116ce <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EE11outerStrideEv>
 8010d14:	4603      	mov	r3, r0
 8010d16:	4619      	mov	r1, r3
 8010d18:	4620      	mov	r0, r4
 8010d1a:	f7f5 ff47 	bl	8006bac <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
  }
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	4618      	mov	r0, r3
 8010d22:	370c      	adds	r7, #12
 8010d24:	46bd      	mov	sp, r7
 8010d26:	bd90      	pop	{r4, r7, pc}

08010d28 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC inline const Scalar* data() const { return m_data; }
 8010d28:	b480      	push	{r7}
 8010d2a:	b083      	sub	sp, #12
 8010d2c:	af00      	add	r7, sp, #0
 8010d2e:	6078      	str	r0, [r7, #4]
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	4618      	mov	r0, r3
 8010d36:	370c      	adds	r7, #12
 8010d38:	46bd      	mov	sp, r7
 8010d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d3e:	4770      	bx	lr

08010d40 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi0ELi1EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8010d40:	b580      	push	{r7, lr}
 8010d42:	b082      	sub	sp, #8
 8010d44:	af00      	add	r7, sp, #0
 8010d46:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8010d48:	2100      	movs	r1, #0
 8010d4a:	6878      	ldr	r0, [r7, #4]
 8010d4c:	f000 fcd8 	bl	8011700 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8010d50:	6878      	ldr	r0, [r7, #4]
 8010d52:	f000 fcf3 	bl	801173c <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi1EE3runERS9_>
  }
 8010d56:	bf00      	nop
 8010d58:	3708      	adds	r7, #8
 8010d5a:	46bd      	mov	sp, r7
 8010d5c:	bd80      	pop	{r7, pc}

08010d5e <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>:
 8010d5e:	b580      	push	{r7, lr}
 8010d60:	b082      	sub	sp, #8
 8010d62:	af00      	add	r7, sp, #0
 8010d64:	6078      	str	r0, [r7, #4]
 8010d66:	6878      	ldr	r0, [r7, #4]
 8010d68:	f000 fcf2 	bl	8011750 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	4618      	mov	r0, r3
 8010d70:	3708      	adds	r7, #8
 8010d72:	46bd      	mov	sp, r7
 8010d74:	bd80      	pop	{r7, pc}

08010d76 <_ZN5Eigen13TransposeImplIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 8010d76:	b580      	push	{r7, lr}
 8010d78:	b082      	sub	sp, #8
 8010d7a:	af00      	add	r7, sp, #0
 8010d7c:	6078      	str	r0, [r7, #4]
 8010d7e:	6878      	ldr	r0, [r7, #4]
 8010d80:	f7ff ffed 	bl	8010d5e <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	4618      	mov	r0, r3
 8010d88:	3708      	adds	r7, #8
 8010d8a:	46bd      	mov	sp, r7
 8010d8c:	bd80      	pop	{r7, pc}

08010d8e <_ZN5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS3_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 8010d8e:	b580      	push	{r7, lr}
 8010d90:	b082      	sub	sp, #8
 8010d92:	af00      	add	r7, sp, #0
 8010d94:	6078      	str	r0, [r7, #4]
 8010d96:	6039      	str	r1, [r7, #0]
 8010d98:	6878      	ldr	r0, [r7, #4]
 8010d9a:	f7ff ffec 	bl	8010d76 <_ZN5Eigen13TransposeImplIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEEC1Ev>
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	683a      	ldr	r2, [r7, #0]
 8010da2:	601a      	str	r2, [r3, #0]
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	4618      	mov	r0, r3
 8010da8:	3708      	adds	r7, #8
 8010daa:	46bd      	mov	sp, r7
 8010dac:	bd80      	pop	{r7, pc}

08010dae <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8010dae:	b480      	push	{r7}
 8010db0:	b083      	sub	sp, #12
 8010db2:	af00      	add	r7, sp, #0
 8010db4:	6078      	str	r0, [r7, #4]
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	4618      	mov	r0, r3
 8010dba:	370c      	adds	r7, #12
 8010dbc:	46bd      	mov	sp, r7
 8010dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dc2:	4770      	bx	lr

08010dc4 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
 8010dc4:	b580      	push	{r7, lr}
 8010dc6:	b082      	sub	sp, #8
 8010dc8:	af00      	add	r7, sp, #0
 8010dca:	6078      	str	r0, [r7, #4]
 8010dcc:	6878      	ldr	r0, [r7, #4]
 8010dce:	f000 fcca 	bl	8011766 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	4618      	mov	r0, r3
 8010dd6:	3708      	adds	r7, #8
 8010dd8:	46bd      	mov	sp, r7
 8010dda:	bd80      	pop	{r7, pc}

08010ddc <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 8010ddc:	b580      	push	{r7, lr}
 8010dde:	b082      	sub	sp, #8
 8010de0:	af00      	add	r7, sp, #0
 8010de2:	6078      	str	r0, [r7, #4]
 8010de4:	6878      	ldr	r0, [r7, #4]
 8010de6:	f7ff ffed 	bl	8010dc4 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	4618      	mov	r0, r3
 8010dee:	3708      	adds	r7, #8
 8010df0:	46bd      	mov	sp, r7
 8010df2:	bd80      	pop	{r7, pc}

08010df4 <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 8010df4:	b580      	push	{r7, lr}
 8010df6:	b082      	sub	sp, #8
 8010df8:	af00      	add	r7, sp, #0
 8010dfa:	6078      	str	r0, [r7, #4]
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	4618      	mov	r0, r3
 8010e02:	f7f4 fae5 	bl	80053d0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8010e06:	4603      	mov	r3, r0
 8010e08:	4618      	mov	r0, r3
 8010e0a:	3708      	adds	r7, #8
 8010e0c:	46bd      	mov	sp, r7
 8010e0e:	bd80      	pop	{r7, pc}

08010e10 <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 8010e10:	b580      	push	{r7, lr}
 8010e12:	b082      	sub	sp, #8
 8010e14:	af00      	add	r7, sp, #0
 8010e16:	6078      	str	r0, [r7, #4]
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	4618      	mov	r0, r3
 8010e1e:	f7f4 fae2 	bl	80053e6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8010e22:	4603      	mov	r3, r0
 8010e24:	4618      	mov	r0, r3
 8010e26:	3708      	adds	r7, #8
 8010e28:	46bd      	mov	sp, r7
 8010e2a:	bd80      	pop	{r7, pc}

08010e2c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERS9_RSB_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8010e2c:	b590      	push	{r4, r7, lr}
 8010e2e:	b085      	sub	sp, #20
 8010e30:	af00      	add	r7, sp, #0
 8010e32:	60f8      	str	r0, [r7, #12]
 8010e34:	60b9      	str	r1, [r7, #8]
 8010e36:	607a      	str	r2, [r7, #4]
 8010e38:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 8010e3a:	68f8      	ldr	r0, [r7, #12]
 8010e3c:	f7ff ffce 	bl	8010ddc <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEEC1Ev>
 8010e40:	68fb      	ldr	r3, [r7, #12]
 8010e42:	68ba      	ldr	r2, [r7, #8]
 8010e44:	6812      	ldr	r2, [r2, #0]
 8010e46:	601a      	str	r2, [r3, #0]
 8010e48:	68fb      	ldr	r3, [r7, #12]
 8010e4a:	687a      	ldr	r2, [r7, #4]
 8010e4c:	605a      	str	r2, [r3, #4]
 8010e4e:	68fb      	ldr	r3, [r7, #12]
 8010e50:	3308      	adds	r3, #8
 8010e52:	6839      	ldr	r1, [r7, #0]
 8010e54:	4618      	mov	r0, r3
 8010e56:	f7f4 fc2f 	bl	80056b8 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8010e5a:	68b8      	ldr	r0, [r7, #8]
 8010e5c:	f7ff ffca 	bl	8010df4 <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8010e60:	4604      	mov	r4, r0
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	4618      	mov	r0, r3
 8010e66:	f7f4 f9a2 	bl	80051ae <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8010e6a:	4603      	mov	r3, r0
 8010e6c:	429c      	cmp	r4, r3
 8010e6e:	d10a      	bne.n	8010e86 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERS9_RSB_RKS3_+0x5a>
 8010e70:	68b8      	ldr	r0, [r7, #8]
 8010e72:	f7ff ffcd 	bl	8010e10 <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8010e76:	4604      	mov	r4, r0
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	4618      	mov	r0, r3
 8010e7c:	f7f4 f98c 	bl	8005198 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8010e80:	4603      	mov	r3, r0
 8010e82:	429c      	cmp	r4, r3
 8010e84:	d005      	beq.n	8010e92 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERS9_RSB_RKS3_+0x66>
 8010e86:	4b05      	ldr	r3, [pc, #20]	; (8010e9c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERS9_RSB_RKS3_+0x70>)
 8010e88:	4a05      	ldr	r2, [pc, #20]	; (8010ea0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERS9_RSB_RKS3_+0x74>)
 8010e8a:	2174      	movs	r1, #116	; 0x74
 8010e8c:	4805      	ldr	r0, [pc, #20]	; (8010ea4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERS9_RSB_RKS3_+0x78>)
 8010e8e:	f00d f801 	bl	801de94 <__assert_func>
    }
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	4618      	mov	r0, r3
 8010e96:	3714      	adds	r7, #20
 8010e98:	46bd      	mov	sp, r7
 8010e9a:	bd90      	pop	{r4, r7, pc}
 8010e9c:	0801fcfc 	.word	0x0801fcfc
 8010ea0:	0802806c 	.word	0x0802806c
 8010ea4:	0801ff60 	.word	0x0801ff60

08010ea8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 8010ea8:	b580      	push	{r7, lr}
 8010eaa:	b082      	sub	sp, #8
 8010eac:	af00      	add	r7, sp, #0
 8010eae:	6078      	str	r0, [r7, #4]
 8010eb0:	6878      	ldr	r0, [r7, #4]
 8010eb2:	f000 f809 	bl	8010ec8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 8010eb6:	4603      	mov	r3, r0
 8010eb8:	4618      	mov	r0, r3
 8010eba:	f000 fc5f 	bl	801177c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8010ebe:	4603      	mov	r3, r0
 8010ec0:	4618      	mov	r0, r3
 8010ec2:	3708      	adds	r7, #8
 8010ec4:	46bd      	mov	sp, r7
 8010ec6:	bd80      	pop	{r7, pc}

08010ec8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8010ec8:	b480      	push	{r7}
 8010eca:	b083      	sub	sp, #12
 8010ecc:	af00      	add	r7, sp, #0
 8010ece:	6078      	str	r0, [r7, #4]
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	4618      	mov	r0, r3
 8010ed4:	370c      	adds	r7, #12
 8010ed6:	46bd      	mov	sp, r7
 8010ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010edc:	4770      	bx	lr

08010ede <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 8010ede:	b580      	push	{r7, lr}
 8010ee0:	b082      	sub	sp, #8
 8010ee2:	af00      	add	r7, sp, #0
 8010ee4:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	4618      	mov	r0, r3
 8010eea:	f7ff ff83 	bl	8010df4 <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8010eee:	4603      	mov	r3, r0
    }
 8010ef0:	4618      	mov	r0, r3
 8010ef2:	3708      	adds	r7, #8
 8010ef4:	46bd      	mov	sp, r7
 8010ef6:	bd80      	pop	{r7, pc}

08010ef8 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>:
struct evaluator<const T>
 8010ef8:	b580      	push	{r7, lr}
 8010efa:	b082      	sub	sp, #8
 8010efc:	af00      	add	r7, sp, #0
 8010efe:	6078      	str	r0, [r7, #4]
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	4618      	mov	r0, r3
 8010f04:	f7fe f968 	bl	800f1d8 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	4618      	mov	r0, r3
 8010f0c:	3708      	adds	r7, #8
 8010f0e:	46bd      	mov	sp, r7
 8010f10:	bd80      	pop	{r7, pc}

08010f12 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 8010f12:	b580      	push	{r7, lr}
 8010f14:	b082      	sub	sp, #8
 8010f16:	af00      	add	r7, sp, #0
 8010f18:	6078      	str	r0, [r7, #4]
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	4618      	mov	r0, r3
 8010f1e:	f7ff ffeb 	bl	8010ef8 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 8010f22:	6878      	ldr	r0, [r7, #4]
 8010f24:	f000 fc51 	bl	80117ca <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	4618      	mov	r0, r3
 8010f2c:	3708      	adds	r7, #8
 8010f2e:	46bd      	mov	sp, r7
 8010f30:	bd80      	pop	{r7, pc}

08010f32 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 8010f32:	b580      	push	{r7, lr}
 8010f34:	b082      	sub	sp, #8
 8010f36:	af00      	add	r7, sp, #0
 8010f38:	6078      	str	r0, [r7, #4]
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	4618      	mov	r0, r3
 8010f3e:	f7ff ffe8 	bl	8010f12 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfED1Ev>
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	4618      	mov	r0, r3
 8010f46:	3708      	adds	r7, #8
 8010f48:	46bd      	mov	sp, r7
 8010f4a:	bd80      	pop	{r7, pc}

08010f4c <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>:
struct evaluator<const T>
 8010f4c:	b580      	push	{r7, lr}
 8010f4e:	b082      	sub	sp, #8
 8010f50:	af00      	add	r7, sp, #0
 8010f52:	6078      	str	r0, [r7, #4]
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	4618      	mov	r0, r3
 8010f58:	f7ff ffeb 	bl	8010f32 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	4618      	mov	r0, r3
 8010f60:	3708      	adds	r7, #8
 8010f62:	46bd      	mov	sp, r7
 8010f64:	bd80      	pop	{r7, pc}

08010f66 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE4DataD1Ev>:
  struct Data
 8010f66:	b580      	push	{r7, lr}
 8010f68:	b082      	sub	sp, #8
 8010f6a:	af00      	add	r7, sp, #0
 8010f6c:	6078      	str	r0, [r7, #4]
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	3308      	adds	r3, #8
 8010f72:	4618      	mov	r0, r3
 8010f74:	f7f8 f824 	bl	8008fc0 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	3304      	adds	r3, #4
 8010f7c:	4618      	mov	r0, r3
 8010f7e:	f7ff ffe5 	bl	8010f4c <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	4618      	mov	r0, r3
 8010f86:	3708      	adds	r7, #8
 8010f88:	46bd      	mov	sp, r7
 8010f8a:	bd80      	pop	{r7, pc}

08010f8c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 8010f8c:	b580      	push	{r7, lr}
 8010f8e:	b082      	sub	sp, #8
 8010f90:	af00      	add	r7, sp, #0
 8010f92:	6078      	str	r0, [r7, #4]
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	4618      	mov	r0, r3
 8010f98:	f7ff ffe5 	bl	8010f66 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE4DataD1Ev>
 8010f9c:	6878      	ldr	r0, [r7, #4]
 8010f9e:	f000 fc09 	bl	80117b4 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	4618      	mov	r0, r3
 8010fa6:	3708      	adds	r7, #8
 8010fa8:	46bd      	mov	sp, r7
 8010faa:	bd80      	pop	{r7, pc}

08010fac <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 8010fac:	b580      	push	{r7, lr}
 8010fae:	b082      	sub	sp, #8
 8010fb0:	af00      	add	r7, sp, #0
 8010fb2:	6078      	str	r0, [r7, #4]
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	4618      	mov	r0, r3
 8010fb8:	f7ff ffe8 	bl	8010f8c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffED1Ev>
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	4618      	mov	r0, r3
 8010fc0:	3708      	adds	r7, #8
 8010fc2:	46bd      	mov	sp, r7
 8010fc4:	bd80      	pop	{r7, pc}

08010fc6 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 8010fc6:	b580      	push	{r7, lr}
 8010fc8:	b082      	sub	sp, #8
 8010fca:	af00      	add	r7, sp, #0
 8010fcc:	6078      	str	r0, [r7, #4]
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	4618      	mov	r0, r3
 8010fd2:	f7ff ffeb 	bl	8010fac <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	4618      	mov	r0, r3
 8010fda:	3708      	adds	r7, #8
 8010fdc:	46bd      	mov	sp, r7
 8010fde:	bd80      	pop	{r7, pc}

08010fe0 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 8010fe0:	b580      	push	{r7, lr}
 8010fe2:	ed2d 8b02 	vpush	{d8}
 8010fe6:	b086      	sub	sp, #24
 8010fe8:	af00      	add	r7, sp, #0
 8010fea:	6078      	str	r0, [r7, #4]
 8010fec:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 8010fee:	6878      	ldr	r0, [r7, #4]
 8010ff0:	f7ff fa4b 	bl	801048a <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE4rowsEv>
 8010ff4:	4603      	mov	r3, r0
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	dd05      	ble.n	8011006 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 8010ffa:	6878      	ldr	r0, [r7, #4]
 8010ffc:	f7ff ff54 	bl	8010ea8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE4colsEv>
 8011000:	4603      	mov	r3, r0
 8011002:	2b00      	cmp	r3, #0
 8011004:	dc06      	bgt.n	8011014 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 8011006:	4b16      	ldr	r3, [pc, #88]	; (8011060 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 8011008:	4a16      	ldr	r2, [pc, #88]	; (8011064 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 801100a:	f240 119b 	movw	r1, #411	; 0x19b
 801100e:	4816      	ldr	r0, [pc, #88]	; (8011068 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 8011010:	f00c ff40 	bl	801de94 <__assert_func>
 8011014:	bf00      	nop
  ThisEvaluator thisEval(derived());
 8011016:	6878      	ldr	r0, [r7, #4]
 8011018:	f7ff ff56 	bl	8010ec8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 801101c:	4602      	mov	r2, r0
 801101e:	f107 030c 	add.w	r3, r7, #12
 8011022:	4611      	mov	r1, r2
 8011024:	4618      	mov	r0, r3
 8011026:	f000 fbb6 	bl	8011796 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKSD_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 801102a:	6878      	ldr	r0, [r7, #4]
 801102c:	f7ff ff4c 	bl	8010ec8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 8011030:	4602      	mov	r2, r0
 8011032:	f107 030c 	add.w	r3, r7, #12
 8011036:	6839      	ldr	r1, [r7, #0]
 8011038:	4618      	mov	r0, r3
 801103a:	f000 fbd1 	bl	80117e0 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi0ELi2EE3runISG_EEfRKSH_RKS3_RKT_>
 801103e:	eeb0 8a40 	vmov.f32	s16, s0
 8011042:	bf00      	nop
  ThisEvaluator thisEval(derived());
 8011044:	f107 030c 	add.w	r3, r7, #12
 8011048:	4618      	mov	r0, r3
 801104a:	f7ff ffbc 	bl	8010fc6 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 801104e:	eef0 7a48 	vmov.f32	s15, s16
}
 8011052:	eeb0 0a67 	vmov.f32	s0, s15
 8011056:	3718      	adds	r7, #24
 8011058:	46bd      	mov	sp, r7
 801105a:	ecbd 8b02 	vpop	{d8}
 801105e:	bd80      	pop	{r7, pc}
 8011060:	08024d7c 	.word	0x08024d7c
 8011064:	08028234 	.word	0x08028234
 8011068:	08024f88 	.word	0x08024f88

0801106c <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELb0EE3runERKS3_RKS7_>:
    static void run(const Derived&, const OtherDerived&)
 801106c:	b480      	push	{r7}
 801106e:	b083      	sub	sp, #12
 8011070:	af00      	add	r7, sp, #0
 8011072:	6078      	str	r0, [r7, #4]
 8011074:	6039      	str	r1, [r7, #0]
    }
 8011076:	bf00      	nop
 8011078:	370c      	adds	r7, #12
 801107a:	46bd      	mov	sp, r7
 801107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011080:	4770      	bx	lr

08011082 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1ERKS6_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8011082:	b580      	push	{r7, lr}
 8011084:	b082      	sub	sp, #8
 8011086:	af00      	add	r7, sp, #0
 8011088:	6078      	str	r0, [r7, #4]
 801108a:	6039      	str	r1, [r7, #0]
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	6839      	ldr	r1, [r7, #0]
 8011090:	4618      	mov	r0, r3
 8011092:	f000 fbb6 	bl	8011802 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELi4ENS_10DenseShapeES7_ffEC1ERKS6_>
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	4618      	mov	r0, r3
 801109a:	3708      	adds	r7, #8
 801109c:	46bd      	mov	sp, r7
 801109e:	bd80      	pop	{r7, pc}

080110a0 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 80110a0:	b480      	push	{r7}
 80110a2:	b083      	sub	sp, #12
 80110a4:	af00      	add	r7, sp, #0
 80110a6:	6078      	str	r0, [r7, #4]
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	4618      	mov	r0, r3
 80110ac:	370c      	adds	r7, #12
 80110ae:	46bd      	mov	sp, r7
 80110b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110b4:	4770      	bx	lr

080110b6 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 80110b6:	b580      	push	{r7, lr}
 80110b8:	b082      	sub	sp, #8
 80110ba:	af00      	add	r7, sp, #0
 80110bc:	6078      	str	r0, [r7, #4]
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	681b      	ldr	r3, [r3, #0]
 80110c2:	4618      	mov	r0, r3
 80110c4:	f7f4 f873 	bl	80051ae <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80110c8:	4603      	mov	r3, r0
 80110ca:	4618      	mov	r0, r3
 80110cc:	3708      	adds	r7, #8
 80110ce:	46bd      	mov	sp, r7
 80110d0:	bd80      	pop	{r7, pc}

080110d2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 80110d2:	b580      	push	{r7, lr}
 80110d4:	b082      	sub	sp, #8
 80110d6:	af00      	add	r7, sp, #0
 80110d8:	6078      	str	r0, [r7, #4]
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	685b      	ldr	r3, [r3, #4]
 80110de:	4618      	mov	r0, r3
 80110e0:	f7f4 f976 	bl	80053d0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 80110e4:	4603      	mov	r3, r0
 80110e6:	4618      	mov	r0, r3
 80110e8:	3708      	adds	r7, #8
 80110ea:	46bd      	mov	sp, r7
 80110ec:	bd80      	pop	{r7, pc}
	...

080110f0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const Functor &/*func*/)
 80110f0:	b590      	push	{r4, r7, lr}
 80110f2:	b085      	sub	sp, #20
 80110f4:	af00      	add	r7, sp, #0
 80110f6:	60f8      	str	r0, [r7, #12]
 80110f8:	60b9      	str	r1, [r7, #8]
 80110fa:	607a      	str	r2, [r7, #4]
  eigen_assert(dst.rows() == src.rows() && dst.cols() == src.cols());
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	4618      	mov	r0, r3
 8011100:	f7f3 ffaf 	bl	8005062 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8011104:	4604      	mov	r4, r0
 8011106:	68b8      	ldr	r0, [r7, #8]
 8011108:	f7ff ffd5 	bl	80110b6 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE4rowsEv>
 801110c:	4603      	mov	r3, r0
 801110e:	429c      	cmp	r4, r3
 8011110:	d10a      	bne.n	8011128 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_+0x38>
 8011112:	68fb      	ldr	r3, [r7, #12]
 8011114:	4618      	mov	r0, r3
 8011116:	f7f3 ff99 	bl	800504c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 801111a:	4604      	mov	r4, r0
 801111c:	68b8      	ldr	r0, [r7, #8]
 801111e:	f7ff ffd8 	bl	80110d2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE4colsEv>
 8011122:	4603      	mov	r3, r0
 8011124:	429c      	cmp	r4, r3
 8011126:	d006      	beq.n	8011136 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_+0x46>
 8011128:	4b05      	ldr	r3, [pc, #20]	; (8011140 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_+0x50>)
 801112a:	4a06      	ldr	r2, [pc, #24]	; (8011144 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_+0x54>)
 801112c:	f240 21f2 	movw	r1, #754	; 0x2f2
 8011130:	4805      	ldr	r0, [pc, #20]	; (8011148 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_+0x58>)
 8011132:	f00c feaf 	bl	801de94 <__assert_func>
}
 8011136:	bf00      	nop
 8011138:	3714      	adds	r7, #20
 801113a:	46bd      	mov	sp, r7
 801113c:	bd90      	pop	{r4, r7, pc}
 801113e:	bf00      	nop
 8011140:	08022a90 	.word	0x08022a90
 8011144:	080283b8 	.word	0x080283b8
 8011148:	08022488 	.word	0x08022488

0801114c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEC1ERS5_RKSA_RKSC_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 801114c:	b480      	push	{r7}
 801114e:	b085      	sub	sp, #20
 8011150:	af00      	add	r7, sp, #0
 8011152:	60f8      	str	r0, [r7, #12]
 8011154:	60b9      	str	r1, [r7, #8]
 8011156:	607a      	str	r2, [r7, #4]
 8011158:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	68ba      	ldr	r2, [r7, #8]
 801115e:	601a      	str	r2, [r3, #0]
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	687a      	ldr	r2, [r7, #4]
 8011164:	605a      	str	r2, [r3, #4]
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	683a      	ldr	r2, [r7, #0]
 801116a:	609a      	str	r2, [r3, #8]
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	69ba      	ldr	r2, [r7, #24]
 8011170:	60da      	str	r2, [r3, #12]
  }
 8011172:	68fb      	ldr	r3, [r7, #12]
 8011174:	4618      	mov	r0, r3
 8011176:	3714      	adds	r7, #20
 8011178:	46bd      	mov	sp, r7
 801117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801117e:	4770      	bx	lr

08011180 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi0ELi2EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8011180:	b580      	push	{r7, lr}
 8011182:	b082      	sub	sp, #8
 8011184:	af00      	add	r7, sp, #0
 8011186:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8011188:	6878      	ldr	r0, [r7, #4]
 801118a:	f000 fb6f 	bl	801186c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi0ELi9EE3runERSE_>
  }
 801118e:	bf00      	nop
 8011190:	3708      	adds	r7, #8
 8011192:	46bd      	mov	sp, r7
 8011194:	bd80      	pop	{r7, pc}

08011196 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EEC1ERKNS_5BlockIS4_Li3ELi1ELb1EEE>:
  explicit block_evaluator(const XprType& block)
 8011196:	b580      	push	{r7, lr}
 8011198:	b082      	sub	sp, #8
 801119a:	af00      	add	r7, sp, #0
 801119c:	6078      	str	r0, [r7, #4]
 801119e:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	6839      	ldr	r1, [r7, #0]
 80111a4:	4618      	mov	r0, r3
 80111a6:	f000 fb71 	bl	801188c <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS6_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 80111aa:	683b      	ldr	r3, [r7, #0]
 80111ac:	4618      	mov	r0, r3
 80111ae:	f000 fb97 	bl	80118e0 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4dataEv>
 80111b2:	bf00      	nop
  }
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	4618      	mov	r0, r3
 80111b8:	3708      	adds	r7, #8
 80111ba:	46bd      	mov	sp, r7
 80111bc:	bd80      	pop	{r7, pc}

080111be <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 80111be:	b580      	push	{r7, lr}
 80111c0:	b082      	sub	sp, #8
 80111c2:	af00      	add	r7, sp, #0
 80111c4:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 80111c6:	f7f5 fd16 	bl	8006bf6 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 80111ca:	4603      	mov	r3, r0
  }
 80111cc:	4618      	mov	r0, r3
 80111ce:	3708      	adds	r7, #8
 80111d0:	46bd      	mov	sp, r7
 80111d2:	bd80      	pop	{r7, pc}

080111d4 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 80111d4:	b580      	push	{r7, lr}
 80111d6:	b082      	sub	sp, #8
 80111d8:	af00      	add	r7, sp, #0
 80111da:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 80111dc:	f7f5 fd13 	bl	8006c06 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 80111e0:	4603      	mov	r3, r0
  }
 80111e2:	4618      	mov	r0, r3
 80111e4:	3708      	adds	r7, #8
 80111e6:	46bd      	mov	sp, r7
 80111e8:	bd80      	pop	{r7, pc}

080111ea <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 80111ea:	b480      	push	{r7}
 80111ec:	b083      	sub	sp, #12
 80111ee:	af00      	add	r7, sp, #0
 80111f0:	6078      	str	r0, [r7, #4]
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	4618      	mov	r0, r3
 80111f6:	370c      	adds	r7, #12
 80111f8:	46bd      	mov	sp, r7
 80111fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111fe:	4770      	bx	lr

08011200 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8011200:	b480      	push	{r7}
 8011202:	b083      	sub	sp, #12
 8011204:	af00      	add	r7, sp, #0
 8011206:	6078      	str	r0, [r7, #4]
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	4618      	mov	r0, r3
 801120c:	370c      	adds	r7, #12
 801120e:	46bd      	mov	sp, r7
 8011210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011214:	4770      	bx	lr

08011216 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERSH_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8011216:	b580      	push	{r7, lr}
 8011218:	b082      	sub	sp, #8
 801121a:	af00      	add	r7, sp, #0
 801121c:	6078      	str	r0, [r7, #4]
 801121e:	6039      	str	r1, [r7, #0]
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	6839      	ldr	r1, [r7, #0]
 8011224:	4618      	mov	r0, r3
 8011226:	f000 fb67 	bl	80118f8 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERKSG_>
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	4618      	mov	r0, r3
 801122e:	3708      	adds	r7, #8
 8011230:	46bd      	mov	sp, r7
 8011232:	bd80      	pop	{r7, pc}

08011234 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEEC1ERKS8_>:
  explicit mapbase_evaluator(const XprType& map)
 8011234:	b590      	push	{r4, r7, lr}
 8011236:	b083      	sub	sp, #12
 8011238:	af00      	add	r7, sp, #0
 801123a:	6078      	str	r0, [r7, #4]
 801123c:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 801123e:	6878      	ldr	r0, [r7, #4]
 8011240:	f000 fb85 	bl	801194e <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 8011244:	683b      	ldr	r3, [r7, #0]
 8011246:	4618      	mov	r0, r3
 8011248:	f000 f81e 	bl	8011288 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE4dataEv>
 801124c:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	601a      	str	r2, [r3, #0]
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	1d1c      	adds	r4, r3, #4
 8011256:	683b      	ldr	r3, [r7, #0]
 8011258:	4618      	mov	r0, r3
 801125a:	f000 fb5c 	bl	8011916 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EE11innerStrideEv>
 801125e:	4603      	mov	r3, r0
 8011260:	4619      	mov	r1, r3
 8011262:	4620      	mov	r0, r4
 8011264:	f7f5 fca2 	bl	8006bac <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	1d5c      	adds	r4, r3, #5
 801126c:	683b      	ldr	r3, [r7, #0]
 801126e:	4618      	mov	r0, r3
 8011270:	f000 fb5f 	bl	8011932 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EE11outerStrideEv>
 8011274:	4603      	mov	r3, r0
 8011276:	4619      	mov	r1, r3
 8011278:	4620      	mov	r0, r4
 801127a:	f7f5 fc7d 	bl	8006b78 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	4618      	mov	r0, r3
 8011282:	370c      	adds	r7, #12
 8011284:	46bd      	mov	sp, r7
 8011286:	bd90      	pop	{r4, r7, pc}

08011288 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE4dataEv>:
 8011288:	b480      	push	{r7}
 801128a:	b083      	sub	sp, #12
 801128c:	af00      	add	r7, sp, #0
 801128e:	6078      	str	r0, [r7, #4]
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	4618      	mov	r0, r3
 8011296:	370c      	adds	r7, #12
 8011298:	46bd      	mov	sp, r7
 801129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801129e:	4770      	bx	lr

080112a0 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 80112a0:	b480      	push	{r7}
 80112a2:	b083      	sub	sp, #12
 80112a4:	af00      	add	r7, sp, #0
 80112a6:	6078      	str	r0, [r7, #4]
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	4618      	mov	r0, r3
 80112ac:	370c      	adds	r7, #12
 80112ae:	46bd      	mov	sp, r7
 80112b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112b4:	4770      	bx	lr

080112b6 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 80112b6:	b590      	push	{r4, r7, lr}
 80112b8:	b085      	sub	sp, #20
 80112ba:	af00      	add	r7, sp, #0
 80112bc:	60f8      	str	r0, [r7, #12]
 80112be:	60b9      	str	r1, [r7, #8]
 80112c0:	607a      	str	r2, [r7, #4]
      return m_d.data[row + col * m_d.outerStride()];
 80112c2:	68fb      	ldr	r3, [r7, #12]
 80112c4:	681c      	ldr	r4, [r3, #0]
 80112c6:	68fb      	ldr	r3, [r7, #12]
 80112c8:	4618      	mov	r0, r3
 80112ca:	f7f5 feef 	bl	80070ac <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EE11outerStrideEv>
 80112ce:	4602      	mov	r2, r0
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	fb03 f202 	mul.w	r2, r3, r2
 80112d6:	68bb      	ldr	r3, [r7, #8]
 80112d8:	4413      	add	r3, r2
 80112da:	009b      	lsls	r3, r3, #2
 80112dc:	4423      	add	r3, r4
  }
 80112de:	4618      	mov	r0, r3
 80112e0:	3714      	adds	r7, #20
 80112e2:	46bd      	mov	sp, r7
 80112e4:	bd90      	pop	{r4, r7, pc}

080112e6 <_ZNK5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffIiEEfT_SB_>:
  CoeffReturnType coeff(IndexType row, IndexType col) const
 80112e6:	b580      	push	{r7, lr}
 80112e8:	b084      	sub	sp, #16
 80112ea:	af00      	add	r7, sp, #0
 80112ec:	60f8      	str	r0, [r7, #12]
 80112ee:	60b9      	str	r1, [r7, #8]
 80112f0:	607a      	str	r2, [r7, #4]
    return m_wrapper(m_functor, row, col);
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	1d18      	adds	r0, r3, #4
 80112f6:	68f9      	ldr	r1, [r7, #12]
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	68ba      	ldr	r2, [r7, #8]
 80112fc:	f000 fb32 	bl	8011964 <_ZNK5Eigen8internal15nullary_wrapperIfNS0_18scalar_constant_opIfEELb1ELb0ELb0EEclIiEEfRKS3_T_S8_>
 8011300:	eef0 7a40 	vmov.f32	s15, s0
  }
 8011304:	eeb0 0a67 	vmov.f32	s0, s15
 8011308:	3710      	adds	r7, #16
 801130a:	46bd      	mov	sp, r7
 801130c:	bd80      	pop	{r7, pc}

0801130e <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 801130e:	b580      	push	{r7, lr}
 8011310:	b082      	sub	sp, #8
 8011312:	af00      	add	r7, sp, #0
 8011314:	6078      	str	r0, [r7, #4]
 8011316:	6039      	str	r1, [r7, #0]
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	6839      	ldr	r1, [r7, #0]
 801131c:	4618      	mov	r0, r3
 801131e:	f000 fb32 	bl	8011986 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EEC1ERKNS_5BlockIS4_Li1ELi3ELb0EEE>
  }
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	4618      	mov	r0, r3
 8011326:	3708      	adds	r7, #8
 8011328:	46bd      	mov	sp, r7
 801132a:	bd80      	pop	{r7, pc}

0801132c <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 801132c:	b580      	push	{r7, lr}
 801132e:	b082      	sub	sp, #8
 8011330:	af00      	add	r7, sp, #0
 8011332:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	689b      	ldr	r3, [r3, #8]
 8011338:	4618      	mov	r0, r3
 801133a:	f7fc fcca 	bl	800dcd2 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11innerStrideEv>
 801133e:	4603      	mov	r3, r0
    }
 8011340:	4618      	mov	r0, r3
 8011342:	3708      	adds	r7, #8
 8011344:	46bd      	mov	sp, r7
 8011346:	bd80      	pop	{r7, pc}

08011348 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 8011348:	b580      	push	{r7, lr}
 801134a:	b082      	sub	sp, #8
 801134c:	af00      	add	r7, sp, #0
 801134e:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	689b      	ldr	r3, [r3, #8]
 8011354:	4618      	mov	r0, r3
 8011356:	f7f6 f82d 	bl	80073b4 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>
 801135a:	4603      	mov	r3, r0
    }
 801135c:	4618      	mov	r0, r3
 801135e:	3708      	adds	r7, #8
 8011360:	46bd      	mov	sp, r7
 8011362:	bd80      	pop	{r7, pc}

08011364 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8011364:	b480      	push	{r7}
 8011366:	b083      	sub	sp, #12
 8011368:	af00      	add	r7, sp, #0
 801136a:	6078      	str	r0, [r7, #4]
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	4618      	mov	r0, r3
 8011370:	370c      	adds	r7, #12
 8011372:	46bd      	mov	sp, r7
 8011374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011378:	4770      	bx	lr

0801137a <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 801137a:	b480      	push	{r7}
 801137c:	b083      	sub	sp, #12
 801137e:	af00      	add	r7, sp, #0
 8011380:	6078      	str	r0, [r7, #4]
    }
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	4618      	mov	r0, r3
 8011386:	370c      	adds	r7, #12
 8011388:	46bd      	mov	sp, r7
 801138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801138e:	4770      	bx	lr

08011390 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 8011390:	b580      	push	{r7, lr}
 8011392:	b082      	sub	sp, #8
 8011394:	af00      	add	r7, sp, #0
 8011396:	6078      	str	r0, [r7, #4]
 8011398:	6039      	str	r1, [r7, #0]
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	4618      	mov	r0, r3
 801139e:	f7f3 fe60 	bl	8005062 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80113a2:	4603      	mov	r3, r0
 80113a4:	2b01      	cmp	r3, #1
 80113a6:	dd08      	ble.n	80113ba <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEEEvRKT_RKT0_+0x2a>
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	4618      	mov	r0, r3
 80113ac:	f7f3 fe4e 	bl	800504c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80113b0:	4603      	mov	r3, r0
 80113b2:	2b01      	cmp	r3, #1
 80113b4:	dd01      	ble.n	80113ba <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEEEvRKT_RKT0_+0x2a>
 80113b6:	2301      	movs	r3, #1
 80113b8:	e000      	b.n	80113bc <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEEEvRKT_RKT0_+0x2c>
 80113ba:	2300      	movs	r3, #0
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d003      	beq.n	80113c8 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEEEvRKT_RKT0_+0x38>
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
 80113c0:	6839      	ldr	r1, [r7, #0]
 80113c2:	6878      	ldr	r0, [r7, #4]
 80113c4:	f000 faf3 	bl	80119ae <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEELb0EE3runERKS3_RKS5_>
}
 80113c8:	bf00      	nop
 80113ca:	3708      	adds	r7, #8
 80113cc:	46bd      	mov	sp, r7
 80113ce:	bd80      	pop	{r7, pc}

080113d0 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEELi3ENS_10DenseShapeES6_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 80113d0:	b580      	push	{r7, lr}
 80113d2:	b082      	sub	sp, #8
 80113d4:	af00      	add	r7, sp, #0
 80113d6:	6078      	str	r0, [r7, #4]
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	330c      	adds	r3, #12
 80113dc:	4618      	mov	r0, r3
 80113de:	f7f6 f8c8 	bl	8007572 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	3308      	adds	r3, #8
 80113e6:	4618      	mov	r0, r3
 80113e8:	f7f6 f8c3 	bl	8007572 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 80113ec:	6878      	ldr	r0, [r7, #4]
 80113ee:	f000 faf8 	bl	80119e2 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEED1Ev>
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	4618      	mov	r0, r3
 80113f6:	3708      	adds	r7, #8
 80113f8:	46bd      	mov	sp, r7
 80113fa:	bd80      	pop	{r7, pc}

080113fc <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 80113fc:	b580      	push	{r7, lr}
 80113fe:	b082      	sub	sp, #8
 8011400:	af00      	add	r7, sp, #0
 8011402:	6078      	str	r0, [r7, #4]
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	4618      	mov	r0, r3
 8011408:	f7ff ffe2 	bl	80113d0 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEELi3ENS_10DenseShapeES6_ffED1Ev>
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	4618      	mov	r0, r3
 8011410:	3708      	adds	r7, #8
 8011412:	46bd      	mov	sp, r7
 8011414:	bd80      	pop	{r7, pc}

08011416 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 8011416:	b580      	push	{r7, lr}
 8011418:	b090      	sub	sp, #64	; 0x40
 801141a:	af02      	add	r7, sp, #8
 801141c:	60f8      	str	r0, [r7, #12]
 801141e:	60b9      	str	r1, [r7, #8]
 8011420:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 8011422:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011426:	68b9      	ldr	r1, [r7, #8]
 8011428:	4618      	mov	r0, r3
 801142a:	f000 facb 	bl	80119c4 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEC1ERKS5_>
  resize_if_allowed(dst, src, func);
 801142e:	687a      	ldr	r2, [r7, #4]
 8011430:	68b9      	ldr	r1, [r7, #8]
 8011432:	68f8      	ldr	r0, [r7, #12]
 8011434:	f000 fafc 	bl	8011a30 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 8011438:	f107 0320 	add.w	r3, r7, #32
 801143c:	68f9      	ldr	r1, [r7, #12]
 801143e:	4618      	mov	r0, r3
 8011440:	f7f6 faa6 	bl	8007990 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 8011444:	68f8      	ldr	r0, [r7, #12]
 8011446:	f7f6 fb0b 	bl	8007a60 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE18const_cast_derivedEv>
 801144a:	4603      	mov	r3, r0
 801144c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8011450:	f107 0120 	add.w	r1, r7, #32
 8011454:	f107 0010 	add.w	r0, r7, #16
 8011458:	9300      	str	r3, [sp, #0]
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	f000 fb32 	bl	8011ac4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKS8_RKSA_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 8011460:	f107 0310 	add.w	r3, r7, #16
 8011464:	4618      	mov	r0, r3
 8011466:	f000 fb47 	bl	8011af8 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSC_>
  DstEvaluatorType dstEvaluator(dst);
 801146a:	f107 0320 	add.w	r3, r7, #32
 801146e:	4618      	mov	r0, r3
 8011470:	f7f6 f87f 	bl	8007572 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 8011474:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011478:	4618      	mov	r0, r3
 801147a:	f7ff ffbf 	bl	80113fc <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEED1Ev>
}
 801147e:	bf00      	nop
 8011480:	3738      	adds	r7, #56	; 0x38
 8011482:	46bd      	mov	sp, r7
 8011484:	bd80      	pop	{r7, pc}

08011486 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8011486:	b480      	push	{r7}
 8011488:	b083      	sub	sp, #12
 801148a:	af00      	add	r7, sp, #0
 801148c:	6078      	str	r0, [r7, #4]
    }
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	4618      	mov	r0, r3
 8011492:	370c      	adds	r7, #12
 8011494:	46bd      	mov	sp, r7
 8011496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801149a:	4770      	bx	lr

0801149c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE11checkSanityIS7_EEvNS_8internal9enable_ifIXeqsrNSA_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 801149c:	b480      	push	{r7}
 801149e:	b083      	sub	sp, #12
 80114a0:	af00      	add	r7, sp, #0
 80114a2:	6078      	str	r0, [r7, #4]
 80114a4:	6039      	str	r1, [r7, #0]
    {}
 80114a6:	bf00      	nop
 80114a8:	370c      	adds	r7, #12
 80114aa:	46bd      	mov	sp, r7
 80114ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114b0:	4770      	bx	lr

080114b2 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1Ev>:
 80114b2:	b480      	push	{r7}
 80114b4:	b083      	sub	sp, #12
 80114b6:	af00      	add	r7, sp, #0
 80114b8:	6078      	str	r0, [r7, #4]
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	4618      	mov	r0, r3
 80114be:	370c      	adds	r7, #12
 80114c0:	46bd      	mov	sp, r7
 80114c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114c6:	4770      	bx	lr

080114c8 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 80114c8:	b590      	push	{r4, r7, lr}
 80114ca:	b083      	sub	sp, #12
 80114cc:	af00      	add	r7, sp, #0
 80114ce:	6078      	str	r0, [r7, #4]
 80114d0:	6039      	str	r1, [r7, #0]
 80114d2:	687c      	ldr	r4, [r7, #4]
 80114d4:	6838      	ldr	r0, [r7, #0]
 80114d6:	f000 fb1a 	bl	8011b0e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE7functorEv>
 80114da:	4603      	mov	r3, r0
 80114dc:	4619      	mov	r1, r3
 80114de:	4620      	mov	r0, r4
 80114e0:	f7f4 f8ea 	bl	80056b8 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	1d1c      	adds	r4, r3, #4
 80114e8:	6838      	ldr	r0, [r7, #0]
 80114ea:	f000 fb1c 	bl	8011b26 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE3lhsEv>
 80114ee:	4603      	mov	r3, r0
 80114f0:	4619      	mov	r1, r3
 80114f2:	4620      	mov	r0, r4
 80114f4:	f7fd fc27 	bl	800ed46 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERSA_>
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	f103 040c 	add.w	r4, r3, #12
 80114fe:	6838      	ldr	r0, [r7, #0]
 8011500:	f000 fb1c 	bl	8011b3c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE3rhsEv>
 8011504:	4603      	mov	r3, r0
 8011506:	4619      	mov	r1, r3
 8011508:	4620      	mov	r0, r4
 801150a:	f000 fb23 	bl	8011b54 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1ERS9_>
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	4618      	mov	r0, r3
 8011512:	370c      	adds	r7, #12
 8011514:	46bd      	mov	sp, r7
 8011516:	bd90      	pop	{r4, r7, pc}

08011518 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 8011518:	b580      	push	{r7, lr}
 801151a:	b084      	sub	sp, #16
 801151c:	af00      	add	r7, sp, #0
 801151e:	60f8      	str	r0, [r7, #12]
 8011520:	60b9      	str	r1, [r7, #8]
 8011522:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 8011524:	68fb      	ldr	r3, [r7, #12]
 8011526:	68ba      	ldr	r2, [r7, #8]
 8011528:	6879      	ldr	r1, [r7, #4]
 801152a:	4618      	mov	r0, r3
 801152c:	f000 fb21 	bl	8011b72 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE5coeffEii>
 8011530:	eef0 7a40 	vmov.f32	s15, s0
 8011534:	eeb0 0a67 	vmov.f32	s0, s15
 8011538:	3710      	adds	r7, #16
 801153a:	46bd      	mov	sp, r7
 801153c:	bd80      	pop	{r7, pc}

0801153e <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi1ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 801153e:	b580      	push	{r7, lr}
 8011540:	b082      	sub	sp, #8
 8011542:	af00      	add	r7, sp, #0
 8011544:	6078      	str	r0, [r7, #4]
 8011546:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8011548:	2201      	movs	r2, #1
 801154a:	2100      	movs	r1, #0
 801154c:	6878      	ldr	r0, [r7, #4]
 801154e:	f7ff ffe3 	bl	8011518 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE17coeffByOuterInnerEii>
 8011552:	eef0 7a40 	vmov.f32	s15, s0
  }
 8011556:	eeb0 0a67 	vmov.f32	s0, s15
 801155a:	3708      	adds	r7, #8
 801155c:	46bd      	mov	sp, r7
 801155e:	bd80      	pop	{r7, pc}

08011560 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi2ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8011560:	b580      	push	{r7, lr}
 8011562:	b082      	sub	sp, #8
 8011564:	af00      	add	r7, sp, #0
 8011566:	6078      	str	r0, [r7, #4]
 8011568:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 801156a:	2202      	movs	r2, #2
 801156c:	2100      	movs	r1, #0
 801156e:	6878      	ldr	r0, [r7, #4]
 8011570:	f7ff ffd2 	bl	8011518 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE17coeffByOuterInnerEii>
 8011574:	eef0 7a40 	vmov.f32	s15, s0
  }
 8011578:	eeb0 0a67 	vmov.f32	s0, s15
 801157c:	3708      	adds	r7, #8
 801157e:	46bd      	mov	sp, r7
 8011580:	bd80      	pop	{r7, pc}

08011582 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 8011582:	b480      	push	{r7}
 8011584:	b083      	sub	sp, #12
 8011586:	af00      	add	r7, sp, #0
 8011588:	6078      	str	r0, [r7, #4]
 801158a:	bf00      	nop
 801158c:	370c      	adds	r7, #12
 801158e:	46bd      	mov	sp, r7
 8011590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011594:	4770      	bx	lr

08011596 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfEC1ERKS5_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 8011596:	b590      	push	{r4, r7, lr}
 8011598:	b083      	sub	sp, #12
 801159a:	af00      	add	r7, sp, #0
 801159c:	6078      	str	r0, [r7, #4]
 801159e:	6039      	str	r1, [r7, #0]
 80115a0:	6878      	ldr	r0, [r7, #4]
 80115a2:	f000 fb22 	bl	8011bea <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>
 80115a6:	687c      	ldr	r4, [r7, #4]
 80115a8:	6838      	ldr	r0, [r7, #0]
 80115aa:	f000 fb12 	bl	8011bd2 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE16nestedExpressionEv>
 80115ae:	4603      	mov	r3, r0
 80115b0:	4619      	mov	r1, r3
 80115b2:	4620      	mov	r0, r4
 80115b4:	f000 fb24 	bl	8011c00 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS3_>
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	4618      	mov	r0, r3
 80115bc:	370c      	adds	r7, #12
 80115be:	46bd      	mov	sp, r7
 80115c0:	bd90      	pop	{r4, r7, pc}

080115c2 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEELi3ENS_10DenseShapeES9_ffE5coeffEi>:
  const CoeffReturnType coeff(Index index) const
 80115c2:	b580      	push	{r7, lr}
 80115c4:	b0a4      	sub	sp, #144	; 0x90
 80115c6:	af00      	add	r7, sp, #0
 80115c8:	6078      	str	r0, [r7, #4]
 80115ca:	6039      	str	r1, [r7, #0]
    const Index row = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? 0 : index;
 80115cc:	683b      	ldr	r3, [r7, #0]
 80115ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    const Index col = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? index : 0;
 80115d2:	2300      	movs	r3, #0
 80115d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	6819      	ldr	r1, [r3, #0]
 80115dc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80115e0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80115e4:	4618      	mov	r0, r3
 80115e6:	f7f9 fcdb 	bl	800afa0 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3rowEi>
 80115ea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80115ee:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80115f2:	4611      	mov	r1, r2
 80115f4:	4618      	mov	r0, r3
 80115f6:	f7f9 fce6 	bl	800afc6 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE9transposeEv>
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	1d19      	adds	r1, r3, #4
 80115fe:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8011602:	2200      	movs	r2, #0
 8011604:	4618      	mov	r0, r3
 8011606:	f000 fb0b 	bl	8011c20 <_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE3colEi>
 801160a:	f107 030c 	add.w	r3, r7, #12
 801160e:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8011612:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8011616:	4618      	mov	r0, r3
 8011618:	f000 fb15 	bl	8011c46 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IKNS1_INS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSG_6traitsIT_E6ScalarEEEKS8_KSJ_EERKNS0_ISJ_EE>
 801161c:	f107 030c 	add.w	r3, r7, #12
 8011620:	4618      	mov	r0, r3
 8011622:	f000 fb3e 	bl	8011ca2 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE3sumEv>
 8011626:	eef0 7a40 	vmov.f32	s15, s0
  }
 801162a:	eeb0 0a67 	vmov.f32	s0, s15
 801162e:	3790      	adds	r7, #144	; 0x90
 8011630:	46bd      	mov	sp, r7
 8011632:	bd80      	pop	{r7, pc}

08011634 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8011634:	b580      	push	{r7, lr}
 8011636:	b082      	sub	sp, #8
 8011638:	af00      	add	r7, sp, #0
 801163a:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 801163c:	2102      	movs	r1, #2
 801163e:	6878      	ldr	r0, [r7, #4]
 8011640:	f7ff fa67 	bl	8010b12 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8011644:	6878      	ldr	r0, [r7, #4]
 8011646:	f000 fb47 	bl	8011cd8 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSG_>
  }
 801164a:	bf00      	nop
 801164c:	3708      	adds	r7, #8
 801164e:	46bd      	mov	sp, r7
 8011650:	bd80      	pop	{r7, pc}

08011652 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffEC1ERKSG_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 8011652:	b580      	push	{r7, lr}
 8011654:	b082      	sub	sp, #8
 8011656:	af00      	add	r7, sp, #0
 8011658:	6078      	str	r0, [r7, #4]
 801165a:	6039      	str	r1, [r7, #0]
 801165c:	6878      	ldr	r0, [r7, #4]
 801165e:	f000 fb45 	bl	8011cec <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	6839      	ldr	r1, [r7, #0]
 8011666:	4618      	mov	r0, r3
 8011668:	f000 fb4b 	bl	8011d02 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE4DataC1ERKSG_>
  }
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	4618      	mov	r0, r3
 8011670:	3708      	adds	r7, #8
 8011672:	46bd      	mov	sp, r7
 8011674:	bd80      	pop	{r7, pc}

08011676 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_INS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi0ELi1EE3runERSN_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8011676:	b580      	push	{r7, lr}
 8011678:	b082      	sub	sp, #8
 801167a:	af00      	add	r7, sp, #0
 801167c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 801167e:	2100      	movs	r1, #0
 8011680:	6878      	ldr	r0, [r7, #4]
 8011682:	f000 fb66 	bl	8011d52 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_INS3_IfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8011686:	6878      	ldr	r0, [r7, #4]
 8011688:	f000 fb86 	bl	8011d98 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_INS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi1ELi1EE3runERSN_>
  }
 801168c:	bf00      	nop
 801168e:	3708      	adds	r7, #8
 8011690:	46bd      	mov	sp, r7
 8011692:	bd80      	pop	{r7, pc}

08011694 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 8011694:	b580      	push	{r7, lr}
 8011696:	b082      	sub	sp, #8
 8011698:	af00      	add	r7, sp, #0
 801169a:	6078      	str	r0, [r7, #4]
 801169c:	6039      	str	r1, [r7, #0]
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	6839      	ldr	r1, [r7, #0]
 80116a2:	4618      	mov	r0, r3
 80116a4:	f000 fb82 	bl	8011dac <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EEC1ERKNS_5BlockIS4_Li1ELi1ELb0EEE>
  }
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	4618      	mov	r0, r3
 80116ac:	3708      	adds	r7, #8
 80116ae:	46bd      	mov	sp, r7
 80116b0:	bd80      	pop	{r7, pc}

080116b2 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 80116b2:	b580      	push	{r7, lr}
 80116b4:	b082      	sub	sp, #8
 80116b6:	af00      	add	r7, sp, #0
 80116b8:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	689b      	ldr	r3, [r3, #8]
 80116be:	4618      	mov	r0, r3
 80116c0:	f7fc fd14 	bl	800e0ec <_ZNK5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EE11innerStrideEv>
 80116c4:	4603      	mov	r3, r0
    }
 80116c6:	4618      	mov	r0, r3
 80116c8:	3708      	adds	r7, #8
 80116ca:	46bd      	mov	sp, r7
 80116cc:	bd80      	pop	{r7, pc}

080116ce <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 80116ce:	b580      	push	{r7, lr}
 80116d0:	b082      	sub	sp, #8
 80116d2:	af00      	add	r7, sp, #0
 80116d4:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	689b      	ldr	r3, [r3, #8]
 80116da:	4618      	mov	r0, r3
 80116dc:	f7fa fba2 	bl	800be24 <_ZNK5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EE11outerStrideEv>
 80116e0:	4603      	mov	r3, r0
    }
 80116e2:	4618      	mov	r0, r3
 80116e4:	3708      	adds	r7, #8
 80116e6:	46bd      	mov	sp, r7
 80116e8:	bd80      	pop	{r7, pc}

080116ea <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 80116ea:	b480      	push	{r7}
 80116ec:	b083      	sub	sp, #12
 80116ee:	af00      	add	r7, sp, #0
 80116f0:	6078      	str	r0, [r7, #4]
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	4618      	mov	r0, r3
 80116f6:	370c      	adds	r7, #12
 80116f8:	46bd      	mov	sp, r7
 80116fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116fe:	4770      	bx	lr

08011700 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 8011700:	b5b0      	push	{r4, r5, r7, lr}
 8011702:	b082      	sub	sp, #8
 8011704:	af00      	add	r7, sp, #0
 8011706:	6078      	str	r0, [r7, #4]
 8011708:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	689c      	ldr	r4, [r3, #8]
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	681b      	ldr	r3, [r3, #0]
 8011712:	6839      	ldr	r1, [r7, #0]
 8011714:	4618      	mov	r0, r3
 8011716:	f000 fb5d 	bl	8011dd4 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE8coeffRefEi>
 801171a:	4605      	mov	r5, r0
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	685b      	ldr	r3, [r3, #4]
 8011720:	6839      	ldr	r1, [r7, #0]
 8011722:	4618      	mov	r0, r3
 8011724:	f000 fb66 	bl	8011df4 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE5coeffEi>
 8011728:	4603      	mov	r3, r0
 801172a:	461a      	mov	r2, r3
 801172c:	4629      	mov	r1, r5
 801172e:	4620      	mov	r0, r4
 8011730:	f7f7 f836 	bl	80087a0 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 8011734:	bf00      	nop
 8011736:	3708      	adds	r7, #8
 8011738:	46bd      	mov	sp, r7
 801173a:	bdb0      	pop	{r4, r5, r7, pc}

0801173c <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi1EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 801173c:	b480      	push	{r7}
 801173e:	b083      	sub	sp, #12
 8011740:	af00      	add	r7, sp, #0
 8011742:	6078      	str	r0, [r7, #4]
 8011744:	bf00      	nop
 8011746:	370c      	adds	r7, #12
 8011748:	46bd      	mov	sp, r7
 801174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801174e:	4770      	bx	lr

08011750 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8011750:	b480      	push	{r7}
 8011752:	b083      	sub	sp, #12
 8011754:	af00      	add	r7, sp, #0
 8011756:	6078      	str	r0, [r7, #4]
    }
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	4618      	mov	r0, r3
 801175c:	370c      	adds	r7, #12
 801175e:	46bd      	mov	sp, r7
 8011760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011764:	4770      	bx	lr

08011766 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8011766:	b480      	push	{r7}
 8011768:	b083      	sub	sp, #12
 801176a:	af00      	add	r7, sp, #0
 801176c:	6078      	str	r0, [r7, #4]
    }
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	4618      	mov	r0, r3
 8011772:	370c      	adds	r7, #12
 8011774:	46bd      	mov	sp, r7
 8011776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801177a:	4770      	bx	lr

0801177c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 801177c:	b580      	push	{r7, lr}
 801177e:	b082      	sub	sp, #8
 8011780:	af00      	add	r7, sp, #0
 8011782:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	4618      	mov	r0, r3
 8011788:	f7ff fb42 	bl	8010e10 <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 801178c:	4603      	mov	r3, r0
    }
 801178e:	4618      	mov	r0, r3
 8011790:	3708      	adds	r7, #8
 8011792:	46bd      	mov	sp, r7
 8011794:	bd80      	pop	{r7, pc}

08011796 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKSD_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 8011796:	b580      	push	{r7, lr}
 8011798:	b082      	sub	sp, #8
 801179a:	af00      	add	r7, sp, #0
 801179c:	6078      	str	r0, [r7, #4]
 801179e:	6039      	str	r1, [r7, #0]
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	6839      	ldr	r1, [r7, #0]
 80117a4:	4618      	mov	r0, r3
 80117a6:	f000 fb35 	bl	8011e14 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKSD_>
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	4618      	mov	r0, r3
 80117ae:	3708      	adds	r7, #8
 80117b0:	46bd      	mov	sp, r7
 80117b2:	bd80      	pop	{r7, pc}

080117b4 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 80117b4:	b480      	push	{r7}
 80117b6:	b083      	sub	sp, #12
 80117b8:	af00      	add	r7, sp, #0
 80117ba:	6078      	str	r0, [r7, #4]
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	4618      	mov	r0, r3
 80117c0:	370c      	adds	r7, #12
 80117c2:	46bd      	mov	sp, r7
 80117c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117c8:	4770      	bx	lr

080117ca <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>:
 80117ca:	b480      	push	{r7}
 80117cc:	b083      	sub	sp, #12
 80117ce:	af00      	add	r7, sp, #0
 80117d0:	6078      	str	r0, [r7, #4]
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	4618      	mov	r0, r3
 80117d6:	370c      	adds	r7, #12
 80117d8:	46bd      	mov	sp, r7
 80117da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117de:	4770      	bx	lr

080117e0 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi0ELi2EE3runISG_EEfRKSH_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 80117e0:	b580      	push	{r7, lr}
 80117e2:	b084      	sub	sp, #16
 80117e4:	af00      	add	r7, sp, #0
 80117e6:	60f8      	str	r0, [r7, #12]
 80117e8:	60b9      	str	r1, [r7, #8]
 80117ea:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 80117ec:	68b9      	ldr	r1, [r7, #8]
 80117ee:	68f8      	ldr	r0, [r7, #12]
 80117f0:	f000 fb1f 	bl	8011e32 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi0ELi3EE3runERKSH_RKS3_>
 80117f4:	eef0 7a40 	vmov.f32	s15, s0
  }
 80117f8:	eeb0 0a67 	vmov.f32	s0, s15
 80117fc:	3710      	adds	r7, #16
 80117fe:	46bd      	mov	sp, r7
 8011800:	bd80      	pop	{r7, pc}

08011802 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELi4ENS_10DenseShapeES7_ffEC1ERKS6_>:
  explicit product_evaluator(const XprType& xpr)
 8011802:	b580      	push	{r7, lr}
 8011804:	b082      	sub	sp, #8
 8011806:	af00      	add	r7, sp, #0
 8011808:	6078      	str	r0, [r7, #4]
 801180a:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 801180c:	6878      	ldr	r0, [r7, #4]
 801180e:	f000 fb4c 	bl	8011eaa <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1Ev>
    : m_lhs(xpr.lhs()),
 8011812:	6838      	ldr	r0, [r7, #0]
 8011814:	f000 fb31 	bl	8011e7a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE3lhsEv>
 8011818:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	601a      	str	r2, [r3, #0]
      m_rhs(xpr.rhs()),
 801181e:	6838      	ldr	r0, [r7, #0]
 8011820:	f000 fb37 	bl	8011e92 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE3rhsEv>
 8011824:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	605a      	str	r2, [r3, #4]
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	f103 0208 	add.w	r2, r3, #8
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	681b      	ldr	r3, [r3, #0]
      m_innerDim(xpr.lhs().cols())
 8011834:	4619      	mov	r1, r3
 8011836:	4610      	mov	r0, r2
 8011838:	f7f5 f95f 	bl	8006afa <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	f103 020c 	add.w	r2, r3, #12
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	685b      	ldr	r3, [r3, #4]
      m_innerDim(xpr.lhs().cols())
 8011846:	4619      	mov	r1, r3
 8011848:	4610      	mov	r0, r2
 801184a:	f000 f9d9 	bl	8011c00 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS3_>
 801184e:	6838      	ldr	r0, [r7, #0]
 8011850:	f000 fb13 	bl	8011e7a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE3lhsEv>
 8011854:	4603      	mov	r3, r0
 8011856:	4618      	mov	r0, r3
 8011858:	f7f3 fc9e 	bl	8005198 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 801185c:	4602      	mov	r2, r0
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	611a      	str	r2, [r3, #16]
  }
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	4618      	mov	r0, r3
 8011866:	3708      	adds	r7, #8
 8011868:	46bd      	mov	sp, r7
 801186a:	bd80      	pop	{r7, pc}

0801186c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi0ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 801186c:	b580      	push	{r7, lr}
 801186e:	b082      	sub	sp, #8
 8011870:	af00      	add	r7, sp, #0
 8011872:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8011874:	2200      	movs	r2, #0
 8011876:	2100      	movs	r1, #0
 8011878:	6878      	ldr	r0, [r7, #4]
 801187a:	f000 fb21 	bl	8011ec0 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 801187e:	6878      	ldr	r0, [r7, #4]
 8011880:	f000 fb37 	bl	8011ef2 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi1ELi9EE3runERSE_>
  }
 8011884:	bf00      	nop
 8011886:	3708      	adds	r7, #8
 8011888:	46bd      	mov	sp, r7
 801188a:	bd80      	pop	{r7, pc}

0801188c <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 801188c:	b590      	push	{r4, r7, lr}
 801188e:	b083      	sub	sp, #12
 8011890:	af00      	add	r7, sp, #0
 8011892:	6078      	str	r0, [r7, #4]
 8011894:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 8011896:	6878      	ldr	r0, [r7, #4]
 8011898:	f000 fb57 	bl	8011f4a <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 801189c:	683b      	ldr	r3, [r7, #0]
 801189e:	4618      	mov	r0, r3
 80118a0:	f000 f81e 	bl	80118e0 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4dataEv>
 80118a4:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	601a      	str	r2, [r3, #0]
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	1d1c      	adds	r4, r3, #4
 80118ae:	683b      	ldr	r3, [r7, #0]
 80118b0:	4618      	mov	r0, r3
 80118b2:	f000 fb2e 	bl	8011f12 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EE11innerStrideEv>
 80118b6:	4603      	mov	r3, r0
 80118b8:	4619      	mov	r1, r3
 80118ba:	4620      	mov	r0, r4
 80118bc:	f7f5 f976 	bl	8006bac <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	1d5c      	adds	r4, r3, #5
 80118c4:	683b      	ldr	r3, [r7, #0]
 80118c6:	4618      	mov	r0, r3
 80118c8:	f000 fb31 	bl	8011f2e <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EE11outerStrideEv>
 80118cc:	4603      	mov	r3, r0
 80118ce:	4619      	mov	r1, r3
 80118d0:	4620      	mov	r0, r4
 80118d2:	f7f5 f951 	bl	8006b78 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	4618      	mov	r0, r3
 80118da:	370c      	adds	r7, #12
 80118dc:	46bd      	mov	sp, r7
 80118de:	bd90      	pop	{r4, r7, pc}

080118e0 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC inline const Scalar* data() const { return m_data; }
 80118e0:	b480      	push	{r7}
 80118e2:	b083      	sub	sp, #12
 80118e4:	af00      	add	r7, sp, #0
 80118e6:	6078      	str	r0, [r7, #4]
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	681b      	ldr	r3, [r3, #0]
 80118ec:	4618      	mov	r0, r3
 80118ee:	370c      	adds	r7, #12
 80118f0:	46bd      	mov	sp, r7
 80118f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118f6:	4770      	bx	lr

080118f8 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERKSG_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 80118f8:	b580      	push	{r7, lr}
 80118fa:	b082      	sub	sp, #8
 80118fc:	af00      	add	r7, sp, #0
 80118fe:	6078      	str	r0, [r7, #4]
 8011900:	6039      	str	r1, [r7, #0]
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	6839      	ldr	r1, [r7, #0]
 8011906:	4618      	mov	r0, r3
 8011908:	f000 fb2a 	bl	8011f60 <_ZN5Eigen8internal15block_evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EEC1ERKNS_5BlockISE_Li1ELi1ELb0EEE>
  }
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	4618      	mov	r0, r3
 8011910:	3708      	adds	r7, #8
 8011912:	46bd      	mov	sp, r7
 8011914:	bd80      	pop	{r7, pc}

08011916 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 8011916:	b580      	push	{r7, lr}
 8011918:	b082      	sub	sp, #8
 801191a:	af00      	add	r7, sp, #0
 801191c:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	3308      	adds	r3, #8
 8011922:	4618      	mov	r0, r3
 8011924:	f7fc fd6a 	bl	800e3fc <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE11innerStrideEv>
 8011928:	4603      	mov	r3, r0
    }
 801192a:	4618      	mov	r0, r3
 801192c:	3708      	adds	r7, #8
 801192e:	46bd      	mov	sp, r7
 8011930:	bd80      	pop	{r7, pc}

08011932 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 8011932:	b580      	push	{r7, lr}
 8011934:	b082      	sub	sp, #8
 8011936:	af00      	add	r7, sp, #0
 8011938:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	3308      	adds	r3, #8
 801193e:	4618      	mov	r0, r3
 8011940:	f7fc fd70 	bl	800e424 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE11outerStrideEv>
 8011944:	4603      	mov	r3, r0
    }
 8011946:	4618      	mov	r0, r3
 8011948:	3708      	adds	r7, #8
 801194a:	46bd      	mov	sp, r7
 801194c:	bd80      	pop	{r7, pc}

0801194e <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 801194e:	b480      	push	{r7}
 8011950:	b083      	sub	sp, #12
 8011952:	af00      	add	r7, sp, #0
 8011954:	6078      	str	r0, [r7, #4]
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	4618      	mov	r0, r3
 801195a:	370c      	adds	r7, #12
 801195c:	46bd      	mov	sp, r7
 801195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011962:	4770      	bx	lr

08011964 <_ZNK5Eigen8internal15nullary_wrapperIfNS0_18scalar_constant_opIfEELb1ELb0ELb0EEclIiEEfRKS3_T_S8_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Scalar operator()(const NullaryOp& op, IndexType=0, IndexType=0) const { return op(); }
 8011964:	b580      	push	{r7, lr}
 8011966:	b084      	sub	sp, #16
 8011968:	af00      	add	r7, sp, #0
 801196a:	60f8      	str	r0, [r7, #12]
 801196c:	60b9      	str	r1, [r7, #8]
 801196e:	607a      	str	r2, [r7, #4]
 8011970:	603b      	str	r3, [r7, #0]
 8011972:	68b8      	ldr	r0, [r7, #8]
 8011974:	f000 fb03 	bl	8011f7e <_ZNK5Eigen8internal18scalar_constant_opIfEclEv>
 8011978:	eef0 7a40 	vmov.f32	s15, s0
 801197c:	eeb0 0a67 	vmov.f32	s0, s15
 8011980:	3710      	adds	r7, #16
 8011982:	46bd      	mov	sp, r7
 8011984:	bd80      	pop	{r7, pc}

08011986 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EEC1ERKNS_5BlockIS4_Li1ELi3ELb0EEE>:
  explicit block_evaluator(const XprType& block)
 8011986:	b580      	push	{r7, lr}
 8011988:	b082      	sub	sp, #8
 801198a:	af00      	add	r7, sp, #0
 801198c:	6078      	str	r0, [r7, #4]
 801198e:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	6839      	ldr	r1, [r7, #0]
 8011994:	4618      	mov	r0, r3
 8011996:	f000 fb01 	bl	8011f9c <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS6_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 801199a:	683b      	ldr	r3, [r7, #0]
 801199c:	4618      	mov	r0, r3
 801199e:	f000 fb27 	bl	8011ff0 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4dataEv>
 80119a2:	bf00      	nop
  }
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	4618      	mov	r0, r3
 80119a8:	3708      	adds	r7, #8
 80119aa:	46bd      	mov	sp, r7
 80119ac:	bd80      	pop	{r7, pc}

080119ae <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEELb0EE3runERKS3_RKS5_>:
    static void run(const Derived&, const OtherDerived&)
 80119ae:	b480      	push	{r7}
 80119b0:	b083      	sub	sp, #12
 80119b2:	af00      	add	r7, sp, #0
 80119b4:	6078      	str	r0, [r7, #4]
 80119b6:	6039      	str	r1, [r7, #0]
    }
 80119b8:	bf00      	nop
 80119ba:	370c      	adds	r7, #12
 80119bc:	46bd      	mov	sp, r7
 80119be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119c2:	4770      	bx	lr

080119c4 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEC1ERKS5_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 80119c4:	b580      	push	{r7, lr}
 80119c6:	b082      	sub	sp, #8
 80119c8:	af00      	add	r7, sp, #0
 80119ca:	6078      	str	r0, [r7, #4]
 80119cc:	6039      	str	r1, [r7, #0]
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	6839      	ldr	r1, [r7, #0]
 80119d2:	4618      	mov	r0, r3
 80119d4:	f000 fb18 	bl	8012008 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEELi3ENS_10DenseShapeES6_ffEC1ERKS5_>
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	4618      	mov	r0, r3
 80119dc:	3708      	adds	r7, #8
 80119de:	46bd      	mov	sp, r7
 80119e0:	bd80      	pop	{r7, pc}

080119e2 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 80119e2:	b480      	push	{r7}
 80119e4:	b083      	sub	sp, #12
 80119e6:	af00      	add	r7, sp, #0
 80119e8:	6078      	str	r0, [r7, #4]
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	4618      	mov	r0, r3
 80119ee:	370c      	adds	r7, #12
 80119f0:	46bd      	mov	sp, r7
 80119f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119f6:	4770      	bx	lr

080119f8 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 80119f8:	b580      	push	{r7, lr}
 80119fa:	b082      	sub	sp, #8
 80119fc:	af00      	add	r7, sp, #0
 80119fe:	6078      	str	r0, [r7, #4]
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	681b      	ldr	r3, [r3, #0]
 8011a04:	4618      	mov	r0, r3
 8011a06:	f7f3 fb2c 	bl	8005062 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8011a0a:	4603      	mov	r3, r0
 8011a0c:	4618      	mov	r0, r3
 8011a0e:	3708      	adds	r7, #8
 8011a10:	46bd      	mov	sp, r7
 8011a12:	bd80      	pop	{r7, pc}

08011a14 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8011a14:	b580      	push	{r7, lr}
 8011a16:	b082      	sub	sp, #8
 8011a18:	af00      	add	r7, sp, #0
 8011a1a:	6078      	str	r0, [r7, #4]
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	685b      	ldr	r3, [r3, #4]
 8011a20:	4618      	mov	r0, r3
 8011a22:	f7f3 fb13 	bl	800504c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8011a26:	4603      	mov	r3, r0
 8011a28:	4618      	mov	r0, r3
 8011a2a:	3708      	adds	r7, #8
 8011a2c:	46bd      	mov	sp, r7
 8011a2e:	bd80      	pop	{r7, pc}

08011a30 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8011a30:	b580      	push	{r7, lr}
 8011a32:	b086      	sub	sp, #24
 8011a34:	af00      	add	r7, sp, #0
 8011a36:	60f8      	str	r0, [r7, #12]
 8011a38:	60b9      	str	r1, [r7, #8]
 8011a3a:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8011a3c:	68b8      	ldr	r0, [r7, #8]
 8011a3e:	f7ff ffdb 	bl	80119f8 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE4rowsEv>
 8011a42:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8011a44:	68b8      	ldr	r0, [r7, #8]
 8011a46:	f7ff ffe5 	bl	8011a14 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE4colsEv>
 8011a4a:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8011a4c:	68fb      	ldr	r3, [r7, #12]
 8011a4e:	4618      	mov	r0, r3
 8011a50:	f7f3 fb07 	bl	8005062 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8011a54:	4602      	mov	r2, r0
 8011a56:	697b      	ldr	r3, [r7, #20]
 8011a58:	4293      	cmp	r3, r2
 8011a5a:	d107      	bne.n	8011a6c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 8011a5c:	68fb      	ldr	r3, [r7, #12]
 8011a5e:	4618      	mov	r0, r3
 8011a60:	f7f3 faf4 	bl	800504c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8011a64:	4602      	mov	r2, r0
 8011a66:	693b      	ldr	r3, [r7, #16]
 8011a68:	4293      	cmp	r3, r2
 8011a6a:	d001      	beq.n	8011a70 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 8011a6c:	2301      	movs	r3, #1
 8011a6e:	e000      	b.n	8011a72 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 8011a70:	2300      	movs	r3, #0
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d005      	beq.n	8011a82 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 8011a76:	68fb      	ldr	r3, [r7, #12]
 8011a78:	693a      	ldr	r2, [r7, #16]
 8011a7a:	6979      	ldr	r1, [r7, #20]
 8011a7c:	4618      	mov	r0, r3
 8011a7e:	f7f6 fa09 	bl	8007e94 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 8011a82:	68fb      	ldr	r3, [r7, #12]
 8011a84:	4618      	mov	r0, r3
 8011a86:	f7f3 faec 	bl	8005062 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8011a8a:	4602      	mov	r2, r0
 8011a8c:	697b      	ldr	r3, [r7, #20]
 8011a8e:	4293      	cmp	r3, r2
 8011a90:	d107      	bne.n	8011aa2 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 8011a92:	68fb      	ldr	r3, [r7, #12]
 8011a94:	4618      	mov	r0, r3
 8011a96:	f7f3 fad9 	bl	800504c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8011a9a:	4602      	mov	r2, r0
 8011a9c:	693b      	ldr	r3, [r7, #16]
 8011a9e:	4293      	cmp	r3, r2
 8011aa0:	d006      	beq.n	8011ab0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 8011aa2:	4b05      	ldr	r3, [pc, #20]	; (8011ab8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 8011aa4:	4a05      	ldr	r2, [pc, #20]	; (8011abc <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 8011aa6:	f240 21fd 	movw	r1, #765	; 0x2fd
 8011aaa:	4805      	ldr	r0, [pc, #20]	; (8011ac0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8011aac:	f00c f9f2 	bl	801de94 <__assert_func>
}
 8011ab0:	bf00      	nop
 8011ab2:	3718      	adds	r7, #24
 8011ab4:	46bd      	mov	sp, r7
 8011ab6:	bd80      	pop	{r7, pc}
 8011ab8:	08022374 	.word	0x08022374
 8011abc:	080284d0 	.word	0x080284d0
 8011ac0:	08022488 	.word	0x08022488

08011ac4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKS8_RKSA_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8011ac4:	b480      	push	{r7}
 8011ac6:	b085      	sub	sp, #20
 8011ac8:	af00      	add	r7, sp, #0
 8011aca:	60f8      	str	r0, [r7, #12]
 8011acc:	60b9      	str	r1, [r7, #8]
 8011ace:	607a      	str	r2, [r7, #4]
 8011ad0:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8011ad2:	68fb      	ldr	r3, [r7, #12]
 8011ad4:	68ba      	ldr	r2, [r7, #8]
 8011ad6:	601a      	str	r2, [r3, #0]
 8011ad8:	68fb      	ldr	r3, [r7, #12]
 8011ada:	687a      	ldr	r2, [r7, #4]
 8011adc:	605a      	str	r2, [r3, #4]
 8011ade:	68fb      	ldr	r3, [r7, #12]
 8011ae0:	683a      	ldr	r2, [r7, #0]
 8011ae2:	609a      	str	r2, [r3, #8]
 8011ae4:	68fb      	ldr	r3, [r7, #12]
 8011ae6:	69ba      	ldr	r2, [r7, #24]
 8011ae8:	60da      	str	r2, [r3, #12]
  }
 8011aea:	68fb      	ldr	r3, [r7, #12]
 8011aec:	4618      	mov	r0, r3
 8011aee:	3714      	adds	r7, #20
 8011af0:	46bd      	mov	sp, r7
 8011af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011af6:	4770      	bx	lr

08011af8 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8011af8:	b580      	push	{r7, lr}
 8011afa:	b082      	sub	sp, #8
 8011afc:	af00      	add	r7, sp, #0
 8011afe:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8011b00:	6878      	ldr	r0, [r7, #4]
 8011b02:	f000 fab6 	bl	8012072 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSC_>
  }
 8011b06:	bf00      	nop
 8011b08:	3708      	adds	r7, #8
 8011b0a:	46bd      	mov	sp, r7
 8011b0c:	bd80      	pop	{r7, pc}

08011b0e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 8011b0e:	b480      	push	{r7}
 8011b10:	b083      	sub	sp, #12
 8011b12:	af00      	add	r7, sp, #0
 8011b14:	6078      	str	r0, [r7, #4]
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	3330      	adds	r3, #48	; 0x30
 8011b1a:	4618      	mov	r0, r3
 8011b1c:	370c      	adds	r7, #12
 8011b1e:	46bd      	mov	sp, r7
 8011b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b24:	4770      	bx	lr

08011b26 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 8011b26:	b480      	push	{r7}
 8011b28:	b083      	sub	sp, #12
 8011b2a:	af00      	add	r7, sp, #0
 8011b2c:	6078      	str	r0, [r7, #4]
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	4618      	mov	r0, r3
 8011b32:	370c      	adds	r7, #12
 8011b34:	46bd      	mov	sp, r7
 8011b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b3a:	4770      	bx	lr

08011b3c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 8011b3c:	b480      	push	{r7}
 8011b3e:	b083      	sub	sp, #12
 8011b40:	af00      	add	r7, sp, #0
 8011b42:	6078      	str	r0, [r7, #4]
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	3318      	adds	r3, #24
 8011b48:	4618      	mov	r0, r3
 8011b4a:	370c      	adds	r7, #12
 8011b4c:	46bd      	mov	sp, r7
 8011b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b52:	4770      	bx	lr

08011b54 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1ERS9_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8011b54:	b580      	push	{r7, lr}
 8011b56:	b082      	sub	sp, #8
 8011b58:	af00      	add	r7, sp, #0
 8011b5a:	6078      	str	r0, [r7, #4]
 8011b5c:	6039      	str	r1, [r7, #0]
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	6839      	ldr	r1, [r7, #0]
 8011b62:	4618      	mov	r0, r3
 8011b64:	f000 fa95 	bl	8012092 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1ERKS8_>
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	4618      	mov	r0, r3
 8011b6c:	3708      	adds	r7, #8
 8011b6e:	46bd      	mov	sp, r7
 8011b70:	bd80      	pop	{r7, pc}

08011b72 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8011b72:	b590      	push	{r4, r7, lr}
 8011b74:	b087      	sub	sp, #28
 8011b76:	af00      	add	r7, sp, #0
 8011b78:	60f8      	str	r0, [r7, #12]
 8011b7a:	60b9      	str	r1, [r7, #8]
 8011b7c:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 8011b7e:	68fb      	ldr	r3, [r7, #12]
 8011b80:	4618      	mov	r0, r3
 8011b82:	f000 fa95 	bl	80120b0 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>
 8011b86:	4604      	mov	r4, r0
 8011b88:	68fb      	ldr	r3, [r7, #12]
 8011b8a:	3304      	adds	r3, #4
 8011b8c:	687a      	ldr	r2, [r7, #4]
 8011b8e:	68b9      	ldr	r1, [r7, #8]
 8011b90:	4618      	mov	r0, r3
 8011b92:	f7fd fdf3 	bl	800f77c <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfE5coeffEii>
 8011b96:	eef0 7a40 	vmov.f32	s15, s0
 8011b9a:	edc7 7a04 	vstr	s15, [r7, #16]
 8011b9e:	68fb      	ldr	r3, [r7, #12]
 8011ba0:	330c      	adds	r3, #12
 8011ba2:	687a      	ldr	r2, [r7, #4]
 8011ba4:	68b9      	ldr	r1, [r7, #8]
 8011ba6:	4618      	mov	r0, r3
 8011ba8:	f000 fa8d 	bl	80120c6 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>
 8011bac:	eef0 7a40 	vmov.f32	s15, s0
 8011bb0:	edc7 7a05 	vstr	s15, [r7, #20]
 8011bb4:	f107 0214 	add.w	r2, r7, #20
 8011bb8:	f107 0310 	add.w	r3, r7, #16
 8011bbc:	4619      	mov	r1, r3
 8011bbe:	4620      	mov	r0, r4
 8011bc0:	f7fd fc20 	bl	800f404 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 8011bc4:	eef0 7a40 	vmov.f32	s15, s0
  }
 8011bc8:	eeb0 0a67 	vmov.f32	s0, s15
 8011bcc:	371c      	adds	r7, #28
 8011bce:	46bd      	mov	sp, r7
 8011bd0:	bd90      	pop	{r4, r7, pc}

08011bd2 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 8011bd2:	b480      	push	{r7}
 8011bd4:	b083      	sub	sp, #12
 8011bd6:	af00      	add	r7, sp, #0
 8011bd8:	6078      	str	r0, [r7, #4]
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	4618      	mov	r0, r3
 8011be0:	370c      	adds	r7, #12
 8011be2:	46bd      	mov	sp, r7
 8011be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011be8:	4770      	bx	lr

08011bea <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8011bea:	b480      	push	{r7}
 8011bec:	b083      	sub	sp, #12
 8011bee:	af00      	add	r7, sp, #0
 8011bf0:	6078      	str	r0, [r7, #4]
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	4618      	mov	r0, r3
 8011bf6:	370c      	adds	r7, #12
 8011bf8:	46bd      	mov	sp, r7
 8011bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bfe:	4770      	bx	lr

08011c00 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS3_>:
  explicit evaluator(const XprType& m)
 8011c00:	b580      	push	{r7, lr}
 8011c02:	b082      	sub	sp, #8
 8011c04:	af00      	add	r7, sp, #0
 8011c06:	6078      	str	r0, [r7, #4]
 8011c08:	6039      	str	r1, [r7, #0]
    : evaluator<PlainObjectBase<XprType> >(m)
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	683a      	ldr	r2, [r7, #0]
 8011c0e:	4611      	mov	r1, r2
 8011c10:	4618      	mov	r0, r3
 8011c12:	f000 fa79 	bl	8012108 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERKS5_>
  { }
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	4618      	mov	r0, r3
 8011c1a:	3708      	adds	r7, #8
 8011c1c:	46bd      	mov	sp, r7
 8011c1e:	bd80      	pop	{r7, pc}

08011c20 <_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE3colEi>:
ConstColXpr col(Index i) const
 8011c20:	b580      	push	{r7, lr}
 8011c22:	b084      	sub	sp, #16
 8011c24:	af00      	add	r7, sp, #0
 8011c26:	60f8      	str	r0, [r7, #12]
 8011c28:	60b9      	str	r1, [r7, #8]
 8011c2a:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 8011c2c:	68b8      	ldr	r0, [r7, #8]
 8011c2e:	f7f4 f887 	bl	8005d40 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 8011c32:	4603      	mov	r3, r0
 8011c34:	687a      	ldr	r2, [r7, #4]
 8011c36:	4619      	mov	r1, r3
 8011c38:	68f8      	ldr	r0, [r7, #12]
 8011c3a:	f000 fa7d 	bl	8012138 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEC1ERS5_i>
}
 8011c3e:	68f8      	ldr	r0, [r7, #12]
 8011c40:	3710      	adds	r7, #16
 8011c42:	46bd      	mov	sp, r7
 8011c44:	bd80      	pop	{r7, pc}

08011c46 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IKNS1_INS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSG_6traitsIT_E6ScalarEEEKS8_KSJ_EERKNS0_ISJ_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 8011c46:	b5b0      	push	{r4, r5, r7, lr}
 8011c48:	b086      	sub	sp, #24
 8011c4a:	af00      	add	r7, sp, #0
 8011c4c:	60f8      	str	r0, [r7, #12]
 8011c4e:	60b9      	str	r1, [r7, #8]
 8011c50:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 8011c52:	68b8      	ldr	r0, [r7, #8]
 8011c54:	f7f9 fe6e 	bl	800b934 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE7derivedEv>
 8011c58:	4604      	mov	r4, r0
 8011c5a:	6878      	ldr	r0, [r7, #4]
 8011c5c:	f000 fa94 	bl	8012188 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE7derivedEv>
 8011c60:	4605      	mov	r5, r0
 8011c62:	f107 0314 	add.w	r3, r7, #20
 8011c66:	4618      	mov	r0, r3
 8011c68:	f7f3 fc9c 	bl	80055a4 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 8011c6c:	f107 0314 	add.w	r3, r7, #20
 8011c70:	462a      	mov	r2, r5
 8011c72:	4621      	mov	r1, r4
 8011c74:	68f8      	ldr	r0, [r7, #12]
 8011c76:	f000 fac1 	bl	80121fc <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERSC_RSH_RKS3_>
}
 8011c7a:	68f8      	ldr	r0, [r7, #12]
 8011c7c:	3718      	adds	r7, #24
 8011c7e:	46bd      	mov	sp, r7
 8011c80:	bdb0      	pop	{r4, r5, r7, pc}

08011c82 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 8011c82:	b580      	push	{r7, lr}
 8011c84:	b082      	sub	sp, #8
 8011c86:	af00      	add	r7, sp, #0
 8011c88:	6078      	str	r0, [r7, #4]
 8011c8a:	6878      	ldr	r0, [r7, #4]
 8011c8c:	f000 fb14 	bl	80122b8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE7derivedEv>
 8011c90:	4603      	mov	r3, r0
 8011c92:	4618      	mov	r0, r3
 8011c94:	f000 fb1b 	bl	80122ce <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE4rowsEv>
 8011c98:	4603      	mov	r3, r0
 8011c9a:	4618      	mov	r0, r3
 8011c9c:	3708      	adds	r7, #8
 8011c9e:	46bd      	mov	sp, r7
 8011ca0:	bd80      	pop	{r7, pc}

08011ca2 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 8011ca2:	b590      	push	{r4, r7, lr}
 8011ca4:	b085      	sub	sp, #20
 8011ca6:	af00      	add	r7, sp, #0
 8011ca8:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 8011caa:	6878      	ldr	r0, [r7, #4]
 8011cac:	f000 fb04 	bl	80122b8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE7derivedEv>
 8011cb0:	4604      	mov	r4, r0
 8011cb2:	f107 030c 	add.w	r3, r7, #12
 8011cb6:	4618      	mov	r0, r3
 8011cb8:	f7f3 ff6b 	bl	8005b92 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 8011cbc:	f107 030c 	add.w	r3, r7, #12
 8011cc0:	4619      	mov	r1, r3
 8011cc2:	4620      	mov	r0, r4
 8011cc4:	f000 fb80 	bl	80123c8 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 8011cc8:	eef0 7a40 	vmov.f32	s15, s0
 8011ccc:	bf00      	nop
}
 8011cce:	eeb0 0a67 	vmov.f32	s0, s15
 8011cd2:	3714      	adds	r7, #20
 8011cd4:	46bd      	mov	sp, r7
 8011cd6:	bd90      	pop	{r4, r7, pc}

08011cd8 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 8011cd8:	b480      	push	{r7}
 8011cda:	b083      	sub	sp, #12
 8011cdc:	af00      	add	r7, sp, #0
 8011cde:	6078      	str	r0, [r7, #4]
 8011ce0:	bf00      	nop
 8011ce2:	370c      	adds	r7, #12
 8011ce4:	46bd      	mov	sp, r7
 8011ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cea:	4770      	bx	lr

08011cec <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8011cec:	b480      	push	{r7}
 8011cee:	b083      	sub	sp, #12
 8011cf0:	af00      	add	r7, sp, #0
 8011cf2:	6078      	str	r0, [r7, #4]
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	4618      	mov	r0, r3
 8011cf8:	370c      	adds	r7, #12
 8011cfa:	46bd      	mov	sp, r7
 8011cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d00:	4770      	bx	lr

08011d02 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE4DataC1ERKSG_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 8011d02:	b590      	push	{r4, r7, lr}
 8011d04:	b083      	sub	sp, #12
 8011d06:	af00      	add	r7, sp, #0
 8011d08:	6078      	str	r0, [r7, #4]
 8011d0a:	6039      	str	r1, [r7, #0]
 8011d0c:	687c      	ldr	r4, [r7, #4]
 8011d0e:	6838      	ldr	r0, [r7, #0]
 8011d10:	f000 fba0 	bl	8012454 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE7functorEv>
 8011d14:	4603      	mov	r3, r0
 8011d16:	4619      	mov	r1, r3
 8011d18:	4620      	mov	r0, r4
 8011d1a:	f7f3 ffb9 	bl	8005c90 <_ZN5Eigen8internal13scalar_sum_opIffEC1ERKS2_>
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	1d1c      	adds	r4, r3, #4
 8011d22:	6838      	ldr	r0, [r7, #0]
 8011d24:	f000 fba2 	bl	801246c <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE3lhsEv>
 8011d28:	4603      	mov	r3, r0
 8011d2a:	4619      	mov	r1, r3
 8011d2c:	4620      	mov	r0, r4
 8011d2e:	f000 fbb4 	bl	801249a <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEEC1ERSA_>
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	f103 040c 	add.w	r4, r3, #12
 8011d38:	6838      	ldr	r0, [r7, #0]
 8011d3a:	f000 fba2 	bl	8012482 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE3rhsEv>
 8011d3e:	4603      	mov	r3, r0
 8011d40:	4619      	mov	r1, r3
 8011d42:	4620      	mov	r0, r4
 8011d44:	f000 fbb8 	bl	80124b8 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS4_>
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	4618      	mov	r0, r3
 8011d4c:	370c      	adds	r7, #12
 8011d4e:	46bd      	mov	sp, r7
 8011d50:	bd90      	pop	{r4, r7, pc}

08011d52 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_INS3_IfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 8011d52:	b5b0      	push	{r4, r5, r7, lr}
 8011d54:	b084      	sub	sp, #16
 8011d56:	af00      	add	r7, sp, #0
 8011d58:	6078      	str	r0, [r7, #4]
 8011d5a:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	689c      	ldr	r4, [r3, #8]
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	681b      	ldr	r3, [r3, #0]
 8011d64:	6839      	ldr	r1, [r7, #0]
 8011d66:	4618      	mov	r0, r3
 8011d68:	f000 f834 	bl	8011dd4 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE8coeffRefEi>
 8011d6c:	4605      	mov	r5, r0
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	685b      	ldr	r3, [r3, #4]
 8011d72:	6839      	ldr	r1, [r7, #0]
 8011d74:	4618      	mov	r0, r3
 8011d76:	f000 fbae 	bl	80124d6 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE5coeffEi>
 8011d7a:	eef0 7a40 	vmov.f32	s15, s0
 8011d7e:	edc7 7a03 	vstr	s15, [r7, #12]
 8011d82:	f107 030c 	add.w	r3, r7, #12
 8011d86:	461a      	mov	r2, r3
 8011d88:	4629      	mov	r1, r5
 8011d8a:	4620      	mov	r0, r4
 8011d8c:	f7f6 fd08 	bl	80087a0 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 8011d90:	bf00      	nop
 8011d92:	3710      	adds	r7, #16
 8011d94:	46bd      	mov	sp, r7
 8011d96:	bdb0      	pop	{r4, r5, r7, pc}

08011d98 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_INS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi1ELi1EE3runERSN_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 8011d98:	b480      	push	{r7}
 8011d9a:	b083      	sub	sp, #12
 8011d9c:	af00      	add	r7, sp, #0
 8011d9e:	6078      	str	r0, [r7, #4]
 8011da0:	bf00      	nop
 8011da2:	370c      	adds	r7, #12
 8011da4:	46bd      	mov	sp, r7
 8011da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011daa:	4770      	bx	lr

08011dac <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EEC1ERKNS_5BlockIS4_Li1ELi1ELb0EEE>:
  explicit block_evaluator(const XprType& block)
 8011dac:	b580      	push	{r7, lr}
 8011dae:	b082      	sub	sp, #8
 8011db0:	af00      	add	r7, sp, #0
 8011db2:	6078      	str	r0, [r7, #4]
 8011db4:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	6839      	ldr	r1, [r7, #0]
 8011dba:	4618      	mov	r0, r3
 8011dbc:	f000 fbaf 	bl	801251e <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS6_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 8011dc0:	683b      	ldr	r3, [r7, #0]
 8011dc2:	4618      	mov	r0, r3
 8011dc4:	f000 fbd5 	bl	8012572 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE4dataEv>
 8011dc8:	bf00      	nop
  }
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	4618      	mov	r0, r3
 8011dce:	3708      	adds	r7, #8
 8011dd0:	46bd      	mov	sp, r7
 8011dd2:	bd80      	pop	{r7, pc}

08011dd4 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE8coeffRefEi>:
  Scalar& coeffRef(Index index)
 8011dd4:	b480      	push	{r7}
 8011dd6:	b083      	sub	sp, #12
 8011dd8:	af00      	add	r7, sp, #0
 8011dda:	6078      	str	r0, [r7, #4]
 8011ddc:	6039      	str	r1, [r7, #0]
    return const_cast<Scalar*>(m_d.data)[index];
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	681a      	ldr	r2, [r3, #0]
 8011de2:	683b      	ldr	r3, [r7, #0]
 8011de4:	009b      	lsls	r3, r3, #2
 8011de6:	4413      	add	r3, r2
  }
 8011de8:	4618      	mov	r0, r3
 8011dea:	370c      	adds	r7, #12
 8011dec:	46bd      	mov	sp, r7
 8011dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011df2:	4770      	bx	lr

08011df4 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE5coeffEi>:
  CoeffReturnType coeff(Index index) const
 8011df4:	b480      	push	{r7}
 8011df6:	b083      	sub	sp, #12
 8011df8:	af00      	add	r7, sp, #0
 8011dfa:	6078      	str	r0, [r7, #4]
 8011dfc:	6039      	str	r1, [r7, #0]
    return m_d.data[index];
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	681a      	ldr	r2, [r3, #0]
 8011e02:	683b      	ldr	r3, [r7, #0]
 8011e04:	009b      	lsls	r3, r3, #2
 8011e06:	4413      	add	r3, r2
  }
 8011e08:	4618      	mov	r0, r3
 8011e0a:	370c      	adds	r7, #12
 8011e0c:	46bd      	mov	sp, r7
 8011e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e12:	4770      	bx	lr

08011e14 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKSD_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8011e14:	b580      	push	{r7, lr}
 8011e16:	b082      	sub	sp, #8
 8011e18:	af00      	add	r7, sp, #0
 8011e1a:	6078      	str	r0, [r7, #4]
 8011e1c:	6039      	str	r1, [r7, #0]
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	6839      	ldr	r1, [r7, #0]
 8011e22:	4618      	mov	r0, r3
 8011e24:	f000 fbb1 	bl	801258a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffEC1ERKSD_>
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	4618      	mov	r0, r3
 8011e2c:	3708      	adds	r7, #8
 8011e2e:	46bd      	mov	sp, r7
 8011e30:	bd80      	pop	{r7, pc}

08011e32 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi0ELi3EE3runERKSH_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 8011e32:	b580      	push	{r7, lr}
 8011e34:	b084      	sub	sp, #16
 8011e36:	af00      	add	r7, sp, #0
 8011e38:	6078      	str	r0, [r7, #4]
 8011e3a:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8011e3c:	6839      	ldr	r1, [r7, #0]
 8011e3e:	6878      	ldr	r0, [r7, #4]
 8011e40:	f000 fbb5 	bl	80125ae <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi0ELi1EE3runERKSH_RKS3_>
 8011e44:	eef0 7a40 	vmov.f32	s15, s0
 8011e48:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 8011e4c:	6839      	ldr	r1, [r7, #0]
 8011e4e:	6878      	ldr	r0, [r7, #4]
 8011e50:	f000 fbbe 	bl	80125d0 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi1ELi2EE3runERKSH_RKS3_>
 8011e54:	eef0 7a40 	vmov.f32	s15, s0
 8011e58:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8011e5c:	f107 020c 	add.w	r2, r7, #12
 8011e60:	f107 0308 	add.w	r3, r7, #8
 8011e64:	4619      	mov	r1, r3
 8011e66:	6838      	ldr	r0, [r7, #0]
 8011e68:	f7f7 fa8b 	bl	8009382 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 8011e6c:	eef0 7a40 	vmov.f32	s15, s0
  }
 8011e70:	eeb0 0a67 	vmov.f32	s0, s15
 8011e74:	3710      	adds	r7, #16
 8011e76:	46bd      	mov	sp, r7
 8011e78:	bd80      	pop	{r7, pc}

08011e7a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8011e7a:	b480      	push	{r7}
 8011e7c:	b083      	sub	sp, #12
 8011e7e:	af00      	add	r7, sp, #0
 8011e80:	6078      	str	r0, [r7, #4]
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	681b      	ldr	r3, [r3, #0]
 8011e86:	4618      	mov	r0, r3
 8011e88:	370c      	adds	r7, #12
 8011e8a:	46bd      	mov	sp, r7
 8011e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e90:	4770      	bx	lr

08011e92 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8011e92:	b480      	push	{r7}
 8011e94:	b083      	sub	sp, #12
 8011e96:	af00      	add	r7, sp, #0
 8011e98:	6078      	str	r0, [r7, #4]
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	685b      	ldr	r3, [r3, #4]
 8011e9e:	4618      	mov	r0, r3
 8011ea0:	370c      	adds	r7, #12
 8011ea2:	46bd      	mov	sp, r7
 8011ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ea8:	4770      	bx	lr

08011eaa <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8011eaa:	b480      	push	{r7}
 8011eac:	b083      	sub	sp, #12
 8011eae:	af00      	add	r7, sp, #0
 8011eb0:	6078      	str	r0, [r7, #4]
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	4618      	mov	r0, r3
 8011eb6:	370c      	adds	r7, #12
 8011eb8:	46bd      	mov	sp, r7
 8011eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ebe:	4770      	bx	lr

08011ec0 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeffByOuterInner(Index outer, Index inner)
 8011ec0:	b580      	push	{r7, lr}
 8011ec2:	b086      	sub	sp, #24
 8011ec4:	af00      	add	r7, sp, #0
 8011ec6:	60f8      	str	r0, [r7, #12]
 8011ec8:	60b9      	str	r1, [r7, #8]
 8011eca:	607a      	str	r2, [r7, #4]
    Index row = rowIndexByOuterInner(outer, inner);
 8011ecc:	6879      	ldr	r1, [r7, #4]
 8011ece:	68b8      	ldr	r0, [r7, #8]
 8011ed0:	f000 fba2 	bl	8012618 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE20rowIndexByOuterInnerEii>
 8011ed4:	6178      	str	r0, [r7, #20]
    Index col = colIndexByOuterInner(outer, inner);
 8011ed6:	6879      	ldr	r1, [r7, #4]
 8011ed8:	68b8      	ldr	r0, [r7, #8]
 8011eda:	f000 fba9 	bl	8012630 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE20colIndexByOuterInnerEii>
 8011ede:	6138      	str	r0, [r7, #16]
    assignCoeff(row, col);
 8011ee0:	693a      	ldr	r2, [r7, #16]
 8011ee2:	6979      	ldr	r1, [r7, #20]
 8011ee4:	68f8      	ldr	r0, [r7, #12]
 8011ee6:	f000 fbaf 	bl	8012648 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE11assignCoeffEii>
  }
 8011eea:	bf00      	nop
 8011eec:	3718      	adds	r7, #24
 8011eee:	46bd      	mov	sp, r7
 8011ef0:	bd80      	pop	{r7, pc}

08011ef2 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi1ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8011ef2:	b580      	push	{r7, lr}
 8011ef4:	b082      	sub	sp, #8
 8011ef6:	af00      	add	r7, sp, #0
 8011ef8:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8011efa:	2201      	movs	r2, #1
 8011efc:	2100      	movs	r1, #0
 8011efe:	6878      	ldr	r0, [r7, #4]
 8011f00:	f7ff ffde 	bl	8011ec0 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8011f04:	6878      	ldr	r0, [r7, #4]
 8011f06:	f000 fbc5 	bl	8012694 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi2ELi9EE3runERSE_>
  }
 8011f0a:	bf00      	nop
 8011f0c:	3708      	adds	r7, #8
 8011f0e:	46bd      	mov	sp, r7
 8011f10:	bd80      	pop	{r7, pc}

08011f12 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 8011f12:	b580      	push	{r7, lr}
 8011f14:	b082      	sub	sp, #8
 8011f16:	af00      	add	r7, sp, #0
 8011f18:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	689b      	ldr	r3, [r3, #8]
 8011f1e:	4618      	mov	r0, r3
 8011f20:	f7fb fe62 	bl	800dbe8 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11innerStrideEv>
 8011f24:	4603      	mov	r3, r0
    }
 8011f26:	4618      	mov	r0, r3
 8011f28:	3708      	adds	r7, #8
 8011f2a:	46bd      	mov	sp, r7
 8011f2c:	bd80      	pop	{r7, pc}

08011f2e <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 8011f2e:	b580      	push	{r7, lr}
 8011f30:	b082      	sub	sp, #8
 8011f32:	af00      	add	r7, sp, #0
 8011f34:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	689b      	ldr	r3, [r3, #8]
 8011f3a:	4618      	mov	r0, r3
 8011f3c:	f7f6 fc04 	bl	8008748 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>
 8011f40:	4603      	mov	r3, r0
    }
 8011f42:	4618      	mov	r0, r3
 8011f44:	3708      	adds	r7, #8
 8011f46:	46bd      	mov	sp, r7
 8011f48:	bd80      	pop	{r7, pc}

08011f4a <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1Ev>:
 8011f4a:	b480      	push	{r7}
 8011f4c:	b083      	sub	sp, #12
 8011f4e:	af00      	add	r7, sp, #0
 8011f50:	6078      	str	r0, [r7, #4]
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	4618      	mov	r0, r3
 8011f56:	370c      	adds	r7, #12
 8011f58:	46bd      	mov	sp, r7
 8011f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f5e:	4770      	bx	lr

08011f60 <_ZN5Eigen8internal15block_evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EEC1ERKNS_5BlockISE_Li1ELi1ELb0EEE>:
  explicit block_evaluator(const XprType& block)
 8011f60:	b580      	push	{r7, lr}
 8011f62:	b082      	sub	sp, #8
 8011f64:	af00      	add	r7, sp, #0
 8011f66:	6078      	str	r0, [r7, #4]
 8011f68:	6039      	str	r1, [r7, #0]
    : unary_evaluator<XprType>(block)
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	6839      	ldr	r1, [r7, #0]
 8011f6e:	4618      	mov	r0, r3
 8011f70:	f000 fbb9 	bl	80126e6 <_ZN5Eigen8internal15unary_evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS0_10IndexBasedEfEC1ERKSG_>
  {}
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	4618      	mov	r0, r3
 8011f78:	3708      	adds	r7, #8
 8011f7a:	46bd      	mov	sp, r7
 8011f7c:	bd80      	pop	{r7, pc}

08011f7e <_ZNK5Eigen8internal18scalar_constant_opIfEclEv>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar operator() () const { return m_other; }
 8011f7e:	b480      	push	{r7}
 8011f80:	b083      	sub	sp, #12
 8011f82:	af00      	add	r7, sp, #0
 8011f84:	6078      	str	r0, [r7, #4]
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	681b      	ldr	r3, [r3, #0]
 8011f8a:	ee07 3a90 	vmov	s15, r3
 8011f8e:	eeb0 0a67 	vmov.f32	s0, s15
 8011f92:	370c      	adds	r7, #12
 8011f94:	46bd      	mov	sp, r7
 8011f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f9a:	4770      	bx	lr

08011f9c <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 8011f9c:	b590      	push	{r4, r7, lr}
 8011f9e:	b083      	sub	sp, #12
 8011fa0:	af00      	add	r7, sp, #0
 8011fa2:	6078      	str	r0, [r7, #4]
 8011fa4:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 8011fa6:	6878      	ldr	r0, [r7, #4]
 8011fa8:	f000 fc05 	bl	80127b6 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 8011fac:	683b      	ldr	r3, [r7, #0]
 8011fae:	4618      	mov	r0, r3
 8011fb0:	f000 f81e 	bl	8011ff0 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4dataEv>
 8011fb4:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	601a      	str	r2, [r3, #0]
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	1d1c      	adds	r4, r3, #4
 8011fbe:	683b      	ldr	r3, [r7, #0]
 8011fc0:	4618      	mov	r0, r3
 8011fc2:	f000 fbdc 	bl	801277e <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE11innerStrideEv>
 8011fc6:	4603      	mov	r3, r0
 8011fc8:	4619      	mov	r1, r3
 8011fca:	4620      	mov	r0, r4
 8011fcc:	f7f4 fdd4 	bl	8006b78 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	1d5c      	adds	r4, r3, #5
 8011fd4:	683b      	ldr	r3, [r7, #0]
 8011fd6:	4618      	mov	r0, r3
 8011fd8:	f000 fbdf 	bl	801279a <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE11outerStrideEv>
 8011fdc:	4603      	mov	r3, r0
 8011fde:	4619      	mov	r1, r3
 8011fe0:	4620      	mov	r0, r4
 8011fe2:	f7f4 fde3 	bl	8006bac <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
  }
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	4618      	mov	r0, r3
 8011fea:	370c      	adds	r7, #12
 8011fec:	46bd      	mov	sp, r7
 8011fee:	bd90      	pop	{r4, r7, pc}

08011ff0 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4dataEv>:
 8011ff0:	b480      	push	{r7}
 8011ff2:	b083      	sub	sp, #12
 8011ff4:	af00      	add	r7, sp, #0
 8011ff6:	6078      	str	r0, [r7, #4]
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	681b      	ldr	r3, [r3, #0]
 8011ffc:	4618      	mov	r0, r3
 8011ffe:	370c      	adds	r7, #12
 8012000:	46bd      	mov	sp, r7
 8012002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012006:	4770      	bx	lr

08012008 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEELi3ENS_10DenseShapeES6_ffEC1ERKS5_>:
  explicit product_evaluator(const XprType& xpr)
 8012008:	b580      	push	{r7, lr}
 801200a:	b082      	sub	sp, #8
 801200c:	af00      	add	r7, sp, #0
 801200e:	6078      	str	r0, [r7, #4]
 8012010:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 8012012:	6878      	ldr	r0, [r7, #4]
 8012014:	f000 fbf2 	bl	80127fc <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEC1Ev>
    : m_lhs(xpr.lhs()),
 8012018:	6838      	ldr	r0, [r7, #0]
 801201a:	f000 fbd7 	bl	80127cc <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE3lhsEv>
 801201e:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	601a      	str	r2, [r3, #0]
      m_rhs(xpr.rhs()),
 8012024:	6838      	ldr	r0, [r7, #0]
 8012026:	f000 fbdd 	bl	80127e4 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE3rhsEv>
 801202a:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	605a      	str	r2, [r3, #4]
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	f103 0208 	add.w	r2, r3, #8
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	681b      	ldr	r3, [r3, #0]
      m_innerDim(xpr.lhs().cols())
 801203a:	4619      	mov	r1, r3
 801203c:	4610      	mov	r0, r2
 801203e:	f7f5 fca7 	bl	8007990 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	f103 020c 	add.w	r2, r3, #12
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	685b      	ldr	r3, [r3, #4]
      m_innerDim(xpr.lhs().cols())
 801204c:	4619      	mov	r1, r3
 801204e:	4610      	mov	r0, r2
 8012050:	f7f5 fc9e 	bl	8007990 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 8012054:	6838      	ldr	r0, [r7, #0]
 8012056:	f000 fbb9 	bl	80127cc <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE3lhsEv>
 801205a:	4603      	mov	r3, r0
 801205c:	4618      	mov	r0, r3
 801205e:	f7f2 fff5 	bl	800504c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8012062:	4602      	mov	r2, r0
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	611a      	str	r2, [r3, #16]
  }
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	4618      	mov	r0, r3
 801206c:	3708      	adds	r7, #8
 801206e:	46bd      	mov	sp, r7
 8012070:	bd80      	pop	{r7, pc}

08012072 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8012072:	b580      	push	{r7, lr}
 8012074:	b082      	sub	sp, #8
 8012076:	af00      	add	r7, sp, #0
 8012078:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 801207a:	2200      	movs	r2, #0
 801207c:	2100      	movs	r1, #0
 801207e:	6878      	ldr	r0, [r7, #4]
 8012080:	f000 fbc7 	bl	8012812 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8012084:	6878      	ldr	r0, [r7, #4]
 8012086:	f000 fbdd 	bl	8012844 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSC_>
  }
 801208a:	bf00      	nop
 801208c:	3708      	adds	r7, #8
 801208e:	46bd      	mov	sp, r7
 8012090:	bd80      	pop	{r7, pc}

08012092 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1ERKS8_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 8012092:	b580      	push	{r7, lr}
 8012094:	b082      	sub	sp, #8
 8012096:	af00      	add	r7, sp, #0
 8012098:	6078      	str	r0, [r7, #4]
 801209a:	6039      	str	r1, [r7, #0]
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	6839      	ldr	r1, [r7, #0]
 80120a0:	4618      	mov	r0, r3
 80120a2:	f000 fbdf 	bl	8012864 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EEC1ERKNS_5BlockIS6_Li3ELi1ELb0EEE>
  }
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	4618      	mov	r0, r3
 80120aa:	3708      	adds	r7, #8
 80120ac:	46bd      	mov	sp, r7
 80120ae:	bd80      	pop	{r7, pc}

080120b0 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 80120b0:	b480      	push	{r7}
 80120b2:	b083      	sub	sp, #12
 80120b4:	af00      	add	r7, sp, #0
 80120b6:	6078      	str	r0, [r7, #4]
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	4618      	mov	r0, r3
 80120bc:	370c      	adds	r7, #12
 80120be:	46bd      	mov	sp, r7
 80120c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120c4:	4770      	bx	lr

080120c6 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 80120c6:	b5b0      	push	{r4, r5, r7, lr}
 80120c8:	b084      	sub	sp, #16
 80120ca:	af00      	add	r7, sp, #0
 80120cc:	60f8      	str	r0, [r7, #12]
 80120ce:	60b9      	str	r1, [r7, #8]
 80120d0:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 80120d2:	68fb      	ldr	r3, [r7, #12]
 80120d4:	681c      	ldr	r4, [r3, #0]
 80120d6:	68f8      	ldr	r0, [r7, #12]
 80120d8:	f000 fbd8 	bl	801288c <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9colStrideEv>
 80120dc:	4602      	mov	r2, r0
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	fb03 f502 	mul.w	r5, r3, r2
 80120e4:	68f8      	ldr	r0, [r7, #12]
 80120e6:	f000 fbdc 	bl	80128a2 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9rowStrideEv>
 80120ea:	4602      	mov	r2, r0
 80120ec:	68bb      	ldr	r3, [r7, #8]
 80120ee:	fb02 f303 	mul.w	r3, r2, r3
 80120f2:	442b      	add	r3, r5
 80120f4:	009b      	lsls	r3, r3, #2
 80120f6:	4423      	add	r3, r4
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	ee07 3a90 	vmov	s15, r3
  }
 80120fe:	eeb0 0a67 	vmov.f32	s0, s15
 8012102:	3710      	adds	r7, #16
 8012104:	46bd      	mov	sp, r7
 8012106:	bdb0      	pop	{r4, r5, r7, pc}

08012108 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERKS5_>:
  explicit evaluator(const PlainObjectType& m)
 8012108:	b590      	push	{r4, r7, lr}
 801210a:	b083      	sub	sp, #12
 801210c:	af00      	add	r7, sp, #0
 801210e:	6078      	str	r0, [r7, #4]
 8012110:	6039      	str	r1, [r7, #0]
    : m_d(m.data(),IsVectorAtCompileTime ? 0 : m.outerStride())
 8012112:	6878      	ldr	r0, [r7, #4]
 8012114:	f000 fbdd 	bl	80128d2 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>
 8012118:	687c      	ldr	r4, [r7, #4]
 801211a:	6838      	ldr	r0, [r7, #0]
 801211c:	f000 fbcc 	bl	80128b8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4dataEv>
 8012120:	4603      	mov	r3, r0
 8012122:	2200      	movs	r2, #0
 8012124:	4619      	mov	r1, r3
 8012126:	4620      	mov	r0, r4
 8012128:	f7f5 f88b 	bl	8007242 <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EEC1EPKfi>
  }
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	4618      	mov	r0, r3
 8012130:	370c      	adds	r7, #12
 8012132:	46bd      	mov	sp, r7
 8012134:	bd90      	pop	{r4, r7, pc}
	...

08012138 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEC1ERS5_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 8012138:	b580      	push	{r7, lr}
 801213a:	b084      	sub	sp, #16
 801213c:	af00      	add	r7, sp, #0
 801213e:	60f8      	str	r0, [r7, #12]
 8012140:	60b9      	str	r1, [r7, #8]
 8012142:	607a      	str	r2, [r7, #4]
 8012144:	68fb      	ldr	r3, [r7, #12]
 8012146:	687a      	ldr	r2, [r7, #4]
 8012148:	68b9      	ldr	r1, [r7, #8]
 801214a:	4618      	mov	r0, r3
 801214c:	f000 fbcc 	bl	80128e8 <_ZN5Eigen9BlockImplIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ENS_5DenseEEC1ERS5_i>
      eigen_assert( (i>=0) && (
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	2b00      	cmp	r3, #0
 8012154:	db06      	blt.n	8012164 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEC1ERS5_i+0x2c>
 8012156:	68b8      	ldr	r0, [r7, #8]
 8012158:	f7f4 fe6b 	bl	8006e32 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 801215c:	4602      	mov	r2, r0
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	4293      	cmp	r3, r2
 8012162:	db05      	blt.n	8012170 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEC1ERS5_i+0x38>
 8012164:	4b05      	ldr	r3, [pc, #20]	; (801217c <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEC1ERS5_i+0x44>)
 8012166:	4a06      	ldr	r2, [pc, #24]	; (8012180 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEC1ERS5_i+0x48>)
 8012168:	2178      	movs	r1, #120	; 0x78
 801216a:	4806      	ldr	r0, [pc, #24]	; (8012184 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEC1ERS5_i+0x4c>)
 801216c:	f00b fe92 	bl	801de94 <__assert_func>
    }
 8012170:	68fb      	ldr	r3, [r7, #12]
 8012172:	4618      	mov	r0, r3
 8012174:	3710      	adds	r7, #16
 8012176:	46bd      	mov	sp, r7
 8012178:	bd80      	pop	{r7, pc}
 801217a:	bf00      	nop
 801217c:	08024880 	.word	0x08024880
 8012180:	080285e4 	.word	0x080285e4
 8012184:	08024a04 	.word	0x08024a04

08012188 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8012188:	b480      	push	{r7}
 801218a:	b083      	sub	sp, #12
 801218c:	af00      	add	r7, sp, #0
 801218e:	6078      	str	r0, [r7, #4]
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	4618      	mov	r0, r3
 8012194:	370c      	adds	r7, #12
 8012196:	46bd      	mov	sp, r7
 8012198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801219c:	4770      	bx	lr

0801219e <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1Ev>:
 801219e:	b580      	push	{r7, lr}
 80121a0:	b082      	sub	sp, #8
 80121a2:	af00      	add	r7, sp, #0
 80121a4:	6078      	str	r0, [r7, #4]
 80121a6:	6878      	ldr	r0, [r7, #4]
 80121a8:	f000 fbaf 	bl	801290a <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1Ev>
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	4618      	mov	r0, r3
 80121b0:	3708      	adds	r7, #8
 80121b2:	46bd      	mov	sp, r7
 80121b4:	bd80      	pop	{r7, pc}

080121b6 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 80121b6:	b580      	push	{r7, lr}
 80121b8:	b082      	sub	sp, #8
 80121ba:	af00      	add	r7, sp, #0
 80121bc:	6078      	str	r0, [r7, #4]
 80121be:	6878      	ldr	r0, [r7, #4]
 80121c0:	f7ff ffed 	bl	801219e <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1Ev>
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	4618      	mov	r0, r3
 80121c8:	3708      	adds	r7, #8
 80121ca:	46bd      	mov	sp, r7
 80121cc:	bd80      	pop	{r7, pc}

080121ce <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 80121ce:	b580      	push	{r7, lr}
 80121d0:	b082      	sub	sp, #8
 80121d2:	af00      	add	r7, sp, #0
 80121d4:	6078      	str	r0, [r7, #4]
 80121d6:	f7f4 fd0e 	bl	8006bf6 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 80121da:	4603      	mov	r3, r0
 80121dc:	4618      	mov	r0, r3
 80121de:	3708      	adds	r7, #8
 80121e0:	46bd      	mov	sp, r7
 80121e2:	bd80      	pop	{r7, pc}

080121e4 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 80121e4:	b580      	push	{r7, lr}
 80121e6:	b082      	sub	sp, #8
 80121e8:	af00      	add	r7, sp, #0
 80121ea:	6078      	str	r0, [r7, #4]
 80121ec:	f7f4 fd0b 	bl	8006c06 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 80121f0:	4603      	mov	r3, r0
 80121f2:	4618      	mov	r0, r3
 80121f4:	3708      	adds	r7, #8
 80121f6:	46bd      	mov	sp, r7
 80121f8:	bd80      	pop	{r7, pc}
	...

080121fc <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERSC_RSH_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 80121fc:	b5b0      	push	{r4, r5, r7, lr}
 80121fe:	b084      	sub	sp, #16
 8012200:	af00      	add	r7, sp, #0
 8012202:	60f8      	str	r0, [r7, #12]
 8012204:	60b9      	str	r1, [r7, #8]
 8012206:	607a      	str	r2, [r7, #4]
 8012208:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 801220a:	68f8      	ldr	r0, [r7, #12]
 801220c:	f7ff ffd3 	bl	80121b6 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS_5DenseEEC1Ev>
 8012210:	68fa      	ldr	r2, [r7, #12]
 8012212:	68bb      	ldr	r3, [r7, #8]
 8012214:	4614      	mov	r4, r2
 8012216:	461d      	mov	r5, r3
 8012218:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801221a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801221c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8012220:	e884 0003 	stmia.w	r4, {r0, r1}
 8012224:	68fb      	ldr	r3, [r7, #12]
 8012226:	f103 0218 	add.w	r2, r3, #24
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	4614      	mov	r4, r2
 801222e:	461d      	mov	r5, r3
 8012230:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012232:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012234:	e895 0003 	ldmia.w	r5, {r0, r1}
 8012238:	e884 0003 	stmia.w	r4, {r0, r1}
 801223c:	68fb      	ldr	r3, [r7, #12]
 801223e:	3330      	adds	r3, #48	; 0x30
 8012240:	6839      	ldr	r1, [r7, #0]
 8012242:	4618      	mov	r0, r3
 8012244:	f7f3 fa38 	bl	80056b8 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8012248:	68b8      	ldr	r0, [r7, #8]
 801224a:	f7f9 fba1 	bl	800b990 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 801224e:	4604      	mov	r4, r0
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	4618      	mov	r0, r3
 8012254:	f7ff ffbb 	bl	80121ce <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE4rowsEv>
 8012258:	4603      	mov	r3, r0
 801225a:	429c      	cmp	r4, r3
 801225c:	d10a      	bne.n	8012274 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERSC_RSH_RKS3_+0x78>
 801225e:	68b8      	ldr	r0, [r7, #8]
 8012260:	f7f9 fba3 	bl	800b9aa <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 8012264:	4604      	mov	r4, r0
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	4618      	mov	r0, r3
 801226a:	f7ff ffbb 	bl	80121e4 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE4colsEv>
 801226e:	4603      	mov	r3, r0
 8012270:	429c      	cmp	r4, r3
 8012272:	d005      	beq.n	8012280 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERSC_RSH_RKS3_+0x84>
 8012274:	4b05      	ldr	r3, [pc, #20]	; (801228c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERSC_RSH_RKS3_+0x90>)
 8012276:	4a06      	ldr	r2, [pc, #24]	; (8012290 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERSC_RSH_RKS3_+0x94>)
 8012278:	2174      	movs	r1, #116	; 0x74
 801227a:	4806      	ldr	r0, [pc, #24]	; (8012294 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERSC_RSH_RKS3_+0x98>)
 801227c:	f00b fe0a 	bl	801de94 <__assert_func>
    }
 8012280:	68fb      	ldr	r3, [r7, #12]
 8012282:	4618      	mov	r0, r3
 8012284:	3710      	adds	r7, #16
 8012286:	46bd      	mov	sp, r7
 8012288:	bdb0      	pop	{r4, r5, r7, pc}
 801228a:	bf00      	nop
 801228c:	0801fcfc 	.word	0x0801fcfc
 8012290:	080286d4 	.word	0x080286d4
 8012294:	0801ff60 	.word	0x0801ff60

08012298 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 8012298:	b580      	push	{r7, lr}
 801229a:	b082      	sub	sp, #8
 801229c:	af00      	add	r7, sp, #0
 801229e:	6078      	str	r0, [r7, #4]
 80122a0:	6878      	ldr	r0, [r7, #4]
 80122a2:	f000 f809 	bl	80122b8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE7derivedEv>
 80122a6:	4603      	mov	r3, r0
 80122a8:	4618      	mov	r0, r3
 80122aa:	f000 fb39 	bl	8012920 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE4colsEv>
 80122ae:	4603      	mov	r3, r0
 80122b0:	4618      	mov	r0, r3
 80122b2:	3708      	adds	r7, #8
 80122b4:	46bd      	mov	sp, r7
 80122b6:	bd80      	pop	{r7, pc}

080122b8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 80122b8:	b480      	push	{r7}
 80122ba:	b083      	sub	sp, #12
 80122bc:	af00      	add	r7, sp, #0
 80122be:	6078      	str	r0, [r7, #4]
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	4618      	mov	r0, r3
 80122c4:	370c      	adds	r7, #12
 80122c6:	46bd      	mov	sp, r7
 80122c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122cc:	4770      	bx	lr

080122ce <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 80122ce:	b580      	push	{r7, lr}
 80122d0:	b082      	sub	sp, #8
 80122d2:	af00      	add	r7, sp, #0
 80122d4:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	4618      	mov	r0, r3
 80122da:	f7f9 fb59 	bl	800b990 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 80122de:	4603      	mov	r3, r0
    }
 80122e0:	4618      	mov	r0, r3
 80122e2:	3708      	adds	r7, #8
 80122e4:	46bd      	mov	sp, r7
 80122e6:	bd80      	pop	{r7, pc}

080122e8 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 80122e8:	b580      	push	{r7, lr}
 80122ea:	b082      	sub	sp, #8
 80122ec:	af00      	add	r7, sp, #0
 80122ee:	6078      	str	r0, [r7, #4]
 80122f0:	6878      	ldr	r0, [r7, #4]
 80122f2:	f000 fb3c 	bl	801296e <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEED1Ev>
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	4618      	mov	r0, r3
 80122fa:	3708      	adds	r7, #8
 80122fc:	46bd      	mov	sp, r7
 80122fe:	bd80      	pop	{r7, pc}

08012300 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 8012300:	b580      	push	{r7, lr}
 8012302:	b082      	sub	sp, #8
 8012304:	af00      	add	r7, sp, #0
 8012306:	6078      	str	r0, [r7, #4]
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	4618      	mov	r0, r3
 801230c:	f7ff ffec 	bl	80122e8 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	4618      	mov	r0, r3
 8012314:	3708      	adds	r7, #8
 8012316:	46bd      	mov	sp, r7
 8012318:	bd80      	pop	{r7, pc}

0801231a <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 801231a:	b580      	push	{r7, lr}
 801231c:	b082      	sub	sp, #8
 801231e:	af00      	add	r7, sp, #0
 8012320:	6078      	str	r0, [r7, #4]
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	4618      	mov	r0, r3
 8012326:	f7ff ffeb 	bl	8012300 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EED1Ev>
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	4618      	mov	r0, r3
 801232e:	3708      	adds	r7, #8
 8012330:	46bd      	mov	sp, r7
 8012332:	bd80      	pop	{r7, pc}

08012334 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEED1Ev>:
struct evaluator<const T>
 8012334:	b580      	push	{r7, lr}
 8012336:	b082      	sub	sp, #8
 8012338:	af00      	add	r7, sp, #0
 801233a:	6078      	str	r0, [r7, #4]
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	4618      	mov	r0, r3
 8012340:	f7ff ffeb 	bl	801231a <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEED1Ev>
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	4618      	mov	r0, r3
 8012348:	3708      	adds	r7, #8
 801234a:	46bd      	mov	sp, r7
 801234c:	bd80      	pop	{r7, pc}

0801234e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE4DataD1Ev>:
  struct Data
 801234e:	b580      	push	{r7, lr}
 8012350:	b082      	sub	sp, #8
 8012352:	af00      	add	r7, sp, #0
 8012354:	6078      	str	r0, [r7, #4]
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	330c      	adds	r3, #12
 801235a:	4618      	mov	r0, r3
 801235c:	f7ff ffea 	bl	8012334 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEED1Ev>
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	3304      	adds	r3, #4
 8012364:	4618      	mov	r0, r3
 8012366:	f7f9 fc09 	bl	800bb7c <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	4618      	mov	r0, r3
 801236e:	3708      	adds	r7, #8
 8012370:	46bd      	mov	sp, r7
 8012372:	bd80      	pop	{r7, pc}

08012374 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 8012374:	b580      	push	{r7, lr}
 8012376:	b082      	sub	sp, #8
 8012378:	af00      	add	r7, sp, #0
 801237a:	6078      	str	r0, [r7, #4]
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	4618      	mov	r0, r3
 8012380:	f7ff ffe5 	bl	801234e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE4DataD1Ev>
 8012384:	6878      	ldr	r0, [r7, #4]
 8012386:	f000 fae7 	bl	8012958 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEED1Ev>
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	4618      	mov	r0, r3
 801238e:	3708      	adds	r7, #8
 8012390:	46bd      	mov	sp, r7
 8012392:	bd80      	pop	{r7, pc}

08012394 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 8012394:	b580      	push	{r7, lr}
 8012396:	b082      	sub	sp, #8
 8012398:	af00      	add	r7, sp, #0
 801239a:	6078      	str	r0, [r7, #4]
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	4618      	mov	r0, r3
 80123a0:	f7ff ffe8 	bl	8012374 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffED1Ev>
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	4618      	mov	r0, r3
 80123a8:	3708      	adds	r7, #8
 80123aa:	46bd      	mov	sp, r7
 80123ac:	bd80      	pop	{r7, pc}

080123ae <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 80123ae:	b580      	push	{r7, lr}
 80123b0:	b082      	sub	sp, #8
 80123b2:	af00      	add	r7, sp, #0
 80123b4:	6078      	str	r0, [r7, #4]
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	4618      	mov	r0, r3
 80123ba:	f7ff ffeb 	bl	8012394 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEED1Ev>
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	4618      	mov	r0, r3
 80123c2:	3708      	adds	r7, #8
 80123c4:	46bd      	mov	sp, r7
 80123c6:	bd80      	pop	{r7, pc}

080123c8 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 80123c8:	b580      	push	{r7, lr}
 80123ca:	ed2d 8b02 	vpush	{d8}
 80123ce:	b088      	sub	sp, #32
 80123d0:	af00      	add	r7, sp, #0
 80123d2:	6078      	str	r0, [r7, #4]
 80123d4:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 80123d6:	6878      	ldr	r0, [r7, #4]
 80123d8:	f7ff fc53 	bl	8011c82 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE4rowsEv>
 80123dc:	4603      	mov	r3, r0
 80123de:	2b00      	cmp	r3, #0
 80123e0:	dd05      	ble.n	80123ee <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 80123e2:	6878      	ldr	r0, [r7, #4]
 80123e4:	f7ff ff58 	bl	8012298 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE4colsEv>
 80123e8:	4603      	mov	r3, r0
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	dc06      	bgt.n	80123fc <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 80123ee:	4b16      	ldr	r3, [pc, #88]	; (8012448 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 80123f0:	4a16      	ldr	r2, [pc, #88]	; (801244c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 80123f2:	f240 119b 	movw	r1, #411	; 0x19b
 80123f6:	4816      	ldr	r0, [pc, #88]	; (8012450 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 80123f8:	f00b fd4c 	bl	801de94 <__assert_func>
 80123fc:	bf00      	nop
  ThisEvaluator thisEval(derived());
 80123fe:	6878      	ldr	r0, [r7, #4]
 8012400:	f7ff ff5a 	bl	80122b8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE7derivedEv>
 8012404:	4602      	mov	r2, r0
 8012406:	f107 030c 	add.w	r3, r7, #12
 801240a:	4611      	mov	r1, r2
 801240c:	4618      	mov	r0, r3
 801240e:	f000 fa94 	bl	801293a <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1ERKSJ_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 8012412:	6878      	ldr	r0, [r7, #4]
 8012414:	f7ff ff50 	bl	80122b8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE7derivedEv>
 8012418:	4602      	mov	r2, r0
 801241a:	f107 030c 	add.w	r3, r7, #12
 801241e:	6839      	ldr	r1, [r7, #0]
 8012420:	4618      	mov	r0, r3
 8012422:	f000 faaf 	bl	8012984 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi0ELi2EE3runISM_EEfRKSN_RKS3_RKT_>
 8012426:	eeb0 8a40 	vmov.f32	s16, s0
 801242a:	bf00      	nop
  ThisEvaluator thisEval(derived());
 801242c:	f107 030c 	add.w	r3, r7, #12
 8012430:	4618      	mov	r0, r3
 8012432:	f7ff ffbc 	bl	80123ae <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 8012436:	eef0 7a48 	vmov.f32	s15, s16
}
 801243a:	eeb0 0a67 	vmov.f32	s0, s15
 801243e:	3720      	adds	r7, #32
 8012440:	46bd      	mov	sp, r7
 8012442:	ecbd 8b02 	vpop	{d8}
 8012446:	bd80      	pop	{r7, pc}
 8012448:	08024d7c 	.word	0x08024d7c
 801244c:	08028944 	.word	0x08028944
 8012450:	08024f88 	.word	0x08024f88

08012454 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 8012454:	b480      	push	{r7}
 8012456:	b083      	sub	sp, #12
 8012458:	af00      	add	r7, sp, #0
 801245a:	6078      	str	r0, [r7, #4]
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	3310      	adds	r3, #16
 8012460:	4618      	mov	r0, r3
 8012462:	370c      	adds	r7, #12
 8012464:	46bd      	mov	sp, r7
 8012466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801246a:	4770      	bx	lr

0801246c <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 801246c:	b480      	push	{r7}
 801246e:	b083      	sub	sp, #12
 8012470:	af00      	add	r7, sp, #0
 8012472:	6078      	str	r0, [r7, #4]
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	4618      	mov	r0, r3
 8012478:	370c      	adds	r7, #12
 801247a:	46bd      	mov	sp, r7
 801247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012480:	4770      	bx	lr

08012482 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 8012482:	b480      	push	{r7}
 8012484:	b083      	sub	sp, #12
 8012486:	af00      	add	r7, sp, #0
 8012488:	6078      	str	r0, [r7, #4]
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	68db      	ldr	r3, [r3, #12]
 801248e:	4618      	mov	r0, r3
 8012490:	370c      	adds	r7, #12
 8012492:	46bd      	mov	sp, r7
 8012494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012498:	4770      	bx	lr

0801249a <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEEC1ERSA_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 801249a:	b580      	push	{r7, lr}
 801249c:	b082      	sub	sp, #8
 801249e:	af00      	add	r7, sp, #0
 80124a0:	6078      	str	r0, [r7, #4]
 80124a2:	6039      	str	r1, [r7, #0]
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	6839      	ldr	r1, [r7, #0]
 80124a8:	4618      	mov	r0, r3
 80124aa:	f000 fa7c 	bl	80129a6 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEEC1ERKS9_>
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	4618      	mov	r0, r3
 80124b2:	3708      	adds	r7, #8
 80124b4:	46bd      	mov	sp, r7
 80124b6:	bd80      	pop	{r7, pc}

080124b8 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS4_>:
 80124b8:	b580      	push	{r7, lr}
 80124ba:	b082      	sub	sp, #8
 80124bc:	af00      	add	r7, sp, #0
 80124be:	6078      	str	r0, [r7, #4]
 80124c0:	6039      	str	r1, [r7, #0]
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	6839      	ldr	r1, [r7, #0]
 80124c6:	4618      	mov	r0, r3
 80124c8:	f7f8 f8bb 	bl	800a642 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	4618      	mov	r0, r3
 80124d0:	3708      	adds	r7, #8
 80124d2:	46bd      	mov	sp, r7
 80124d4:	bd80      	pop	{r7, pc}

080124d6 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE5coeffEi>:
  CoeffReturnType coeff(Index index) const
 80124d6:	b5b0      	push	{r4, r5, r7, lr}
 80124d8:	b082      	sub	sp, #8
 80124da:	af00      	add	r7, sp, #0
 80124dc:	6078      	str	r0, [r7, #4]
 80124de:	6039      	str	r1, [r7, #0]
    return m_d.func()(m_d.lhsImpl.coeff(index), m_d.rhsImpl.coeff(index));
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	4618      	mov	r0, r3
 80124e4:	f000 fa6e 	bl	80129c4 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE4Data4funcEv>
 80124e8:	4604      	mov	r4, r0
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	3304      	adds	r3, #4
 80124ee:	6839      	ldr	r1, [r7, #0]
 80124f0:	4618      	mov	r0, r3
 80124f2:	f7ff fc7f 	bl	8011df4 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE5coeffEi>
 80124f6:	4605      	mov	r5, r0
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	330c      	adds	r3, #12
 80124fc:	6839      	ldr	r1, [r7, #0]
 80124fe:	4618      	mov	r0, r3
 8012500:	f7ff fc78 	bl	8011df4 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE5coeffEi>
 8012504:	4603      	mov	r3, r0
 8012506:	461a      	mov	r2, r3
 8012508:	4629      	mov	r1, r5
 801250a:	4620      	mov	r0, r4
 801250c:	f7f6 ff39 	bl	8009382 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 8012510:	eef0 7a40 	vmov.f32	s15, s0
  }
 8012514:	eeb0 0a67 	vmov.f32	s0, s15
 8012518:	3708      	adds	r7, #8
 801251a:	46bd      	mov	sp, r7
 801251c:	bdb0      	pop	{r4, r5, r7, pc}

0801251e <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 801251e:	b590      	push	{r4, r7, lr}
 8012520:	b083      	sub	sp, #12
 8012522:	af00      	add	r7, sp, #0
 8012524:	6078      	str	r0, [r7, #4]
 8012526:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 8012528:	6878      	ldr	r0, [r7, #4]
 801252a:	f000 fa72 	bl	8012a12 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 801252e:	683b      	ldr	r3, [r7, #0]
 8012530:	4618      	mov	r0, r3
 8012532:	f000 f81e 	bl	8012572 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE4dataEv>
 8012536:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	601a      	str	r2, [r3, #0]
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	1d1c      	adds	r4, r3, #4
 8012540:	683b      	ldr	r3, [r7, #0]
 8012542:	4618      	mov	r0, r3
 8012544:	f000 fa49 	bl	80129da <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EE11innerStrideEv>
 8012548:	4603      	mov	r3, r0
 801254a:	4619      	mov	r1, r3
 801254c:	4620      	mov	r0, r4
 801254e:	f7f4 fb2d 	bl	8006bac <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	1d5c      	adds	r4, r3, #5
 8012556:	683b      	ldr	r3, [r7, #0]
 8012558:	4618      	mov	r0, r3
 801255a:	f000 fa4c 	bl	80129f6 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EE11outerStrideEv>
 801255e:	4603      	mov	r3, r0
 8012560:	4619      	mov	r1, r3
 8012562:	4620      	mov	r0, r4
 8012564:	f7f4 fb08 	bl	8006b78 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	4618      	mov	r0, r3
 801256c:	370c      	adds	r7, #12
 801256e:	46bd      	mov	sp, r7
 8012570:	bd90      	pop	{r4, r7, pc}

08012572 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC inline const Scalar* data() const { return m_data; }
 8012572:	b480      	push	{r7}
 8012574:	b083      	sub	sp, #12
 8012576:	af00      	add	r7, sp, #0
 8012578:	6078      	str	r0, [r7, #4]
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	681b      	ldr	r3, [r3, #0]
 801257e:	4618      	mov	r0, r3
 8012580:	370c      	adds	r7, #12
 8012582:	46bd      	mov	sp, r7
 8012584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012588:	4770      	bx	lr

0801258a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffEC1ERKSD_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 801258a:	b580      	push	{r7, lr}
 801258c:	b082      	sub	sp, #8
 801258e:	af00      	add	r7, sp, #0
 8012590:	6078      	str	r0, [r7, #4]
 8012592:	6039      	str	r1, [r7, #0]
 8012594:	6878      	ldr	r0, [r7, #4]
 8012596:	f000 fa47 	bl	8012a28 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	6839      	ldr	r1, [r7, #0]
 801259e:	4618      	mov	r0, r3
 80125a0:	f000 fa4d 	bl	8012a3e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE4DataC1ERKSD_>
  }
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	4618      	mov	r0, r3
 80125a8:	3708      	adds	r7, #8
 80125aa:	46bd      	mov	sp, r7
 80125ac:	bd80      	pop	{r7, pc}

080125ae <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi0ELi1EE3runERKSH_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 80125ae:	b580      	push	{r7, lr}
 80125b0:	b082      	sub	sp, #8
 80125b2:	af00      	add	r7, sp, #0
 80125b4:	6078      	str	r0, [r7, #4]
 80125b6:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 80125b8:	2200      	movs	r2, #0
 80125ba:	2100      	movs	r1, #0
 80125bc:	6878      	ldr	r0, [r7, #4]
 80125be:	f000 fa66 	bl	8012a8e <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE17coeffByOuterInnerEii>
 80125c2:	eef0 7a40 	vmov.f32	s15, s0
  }
 80125c6:	eeb0 0a67 	vmov.f32	s0, s15
 80125ca:	3708      	adds	r7, #8
 80125cc:	46bd      	mov	sp, r7
 80125ce:	bd80      	pop	{r7, pc}

080125d0 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi1ELi2EE3runERKSH_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 80125d0:	b580      	push	{r7, lr}
 80125d2:	b084      	sub	sp, #16
 80125d4:	af00      	add	r7, sp, #0
 80125d6:	6078      	str	r0, [r7, #4]
 80125d8:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 80125da:	6839      	ldr	r1, [r7, #0]
 80125dc:	6878      	ldr	r0, [r7, #4]
 80125de:	f000 fa69 	bl	8012ab4 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi1ELi1EE3runERKSH_RKS3_>
 80125e2:	eef0 7a40 	vmov.f32	s15, s0
 80125e6:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 80125ea:	6839      	ldr	r1, [r7, #0]
 80125ec:	6878      	ldr	r0, [r7, #4]
 80125ee:	f000 fa72 	bl	8012ad6 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi2ELi1EE3runERKSH_RKS3_>
 80125f2:	eef0 7a40 	vmov.f32	s15, s0
 80125f6:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 80125fa:	f107 020c 	add.w	r2, r7, #12
 80125fe:	f107 0308 	add.w	r3, r7, #8
 8012602:	4619      	mov	r1, r3
 8012604:	6838      	ldr	r0, [r7, #0]
 8012606:	f7f6 febc 	bl	8009382 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 801260a:	eef0 7a40 	vmov.f32	s15, s0
  }
 801260e:	eeb0 0a67 	vmov.f32	s0, s15
 8012612:	3710      	adds	r7, #16
 8012614:	46bd      	mov	sp, r7
 8012616:	bd80      	pop	{r7, pc}

08012618 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE20rowIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index rowIndexByOuterInner(Index outer, Index inner)
 8012618:	b480      	push	{r7}
 801261a:	b083      	sub	sp, #12
 801261c:	af00      	add	r7, sp, #0
 801261e:	6078      	str	r0, [r7, #4]
 8012620:	6039      	str	r1, [r7, #0]
      : inner;
 8012622:	683b      	ldr	r3, [r7, #0]
  }
 8012624:	4618      	mov	r0, r3
 8012626:	370c      	adds	r7, #12
 8012628:	46bd      	mov	sp, r7
 801262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801262e:	4770      	bx	lr

08012630 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE20colIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index colIndexByOuterInner(Index outer, Index inner)
 8012630:	b480      	push	{r7}
 8012632:	b083      	sub	sp, #12
 8012634:	af00      	add	r7, sp, #0
 8012636:	6078      	str	r0, [r7, #4]
 8012638:	6039      	str	r1, [r7, #0]
      : outer;
 801263a:	687b      	ldr	r3, [r7, #4]
  }
 801263c:	4618      	mov	r0, r3
 801263e:	370c      	adds	r7, #12
 8012640:	46bd      	mov	sp, r7
 8012642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012646:	4770      	bx	lr

08012648 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE11assignCoeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index row, Index col)
 8012648:	b5b0      	push	{r4, r5, r7, lr}
 801264a:	b086      	sub	sp, #24
 801264c:	af00      	add	r7, sp, #0
 801264e:	60f8      	str	r0, [r7, #12]
 8012650:	60b9      	str	r1, [r7, #8]
 8012652:	607a      	str	r2, [r7, #4]
    m_functor.assignCoeff(m_dst.coeffRef(row,col), m_src.coeff(row,col));
 8012654:	68fb      	ldr	r3, [r7, #12]
 8012656:	689c      	ldr	r4, [r3, #8]
 8012658:	68fb      	ldr	r3, [r7, #12]
 801265a:	681b      	ldr	r3, [r3, #0]
 801265c:	687a      	ldr	r2, [r7, #4]
 801265e:	68b9      	ldr	r1, [r7, #8]
 8012660:	4618      	mov	r0, r3
 8012662:	f7f6 fb2d 	bl	8008cc0 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEii>
 8012666:	4605      	mov	r5, r0
 8012668:	68fb      	ldr	r3, [r7, #12]
 801266a:	685b      	ldr	r3, [r3, #4]
 801266c:	687a      	ldr	r2, [r7, #4]
 801266e:	68b9      	ldr	r1, [r7, #8]
 8012670:	4618      	mov	r0, r3
 8012672:	f000 fa41 	bl	8012af8 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELi4ENS_10DenseShapeES7_ffE5coeffEii>
 8012676:	eef0 7a40 	vmov.f32	s15, s0
 801267a:	edc7 7a05 	vstr	s15, [r7, #20]
 801267e:	f107 0314 	add.w	r3, r7, #20
 8012682:	461a      	mov	r2, r3
 8012684:	4629      	mov	r1, r5
 8012686:	4620      	mov	r0, r4
 8012688:	f000 fa69 	bl	8012b5e <_ZNK5Eigen8internal13sub_assign_opIffE11assignCoeffERfRKf>
  }
 801268c:	bf00      	nop
 801268e:	3718      	adds	r7, #24
 8012690:	46bd      	mov	sp, r7
 8012692:	bdb0      	pop	{r4, r5, r7, pc}

08012694 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi2ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8012694:	b580      	push	{r7, lr}
 8012696:	b082      	sub	sp, #8
 8012698:	af00      	add	r7, sp, #0
 801269a:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 801269c:	2202      	movs	r2, #2
 801269e:	2100      	movs	r1, #0
 80126a0:	6878      	ldr	r0, [r7, #4]
 80126a2:	f7ff fc0d 	bl	8011ec0 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80126a6:	6878      	ldr	r0, [r7, #4]
 80126a8:	f000 fa70 	bl	8012b8c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi3ELi9EE3runERSE_>
  }
 80126ac:	bf00      	nop
 80126ae:	3708      	adds	r7, #8
 80126b0:	46bd      	mov	sp, r7
 80126b2:	bd80      	pop	{r7, pc}

080126b4 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE8startRowEv>:
    StorageIndex startRow() const EIGEN_NOEXCEPT
 80126b4:	b580      	push	{r7, lr}
 80126b6:	b082      	sub	sp, #8
 80126b8:	af00      	add	r7, sp, #0
 80126ba:	6078      	str	r0, [r7, #4]
      return m_startRow.value();
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	3310      	adds	r3, #16
 80126c0:	4618      	mov	r0, r3
 80126c2:	f7fd fff8 	bl	80106b6 <_ZNK5Eigen8internal19variable_if_dynamicIiLin1EE5valueEv>
 80126c6:	4603      	mov	r3, r0
    }
 80126c8:	4618      	mov	r0, r3
 80126ca:	3708      	adds	r7, #8
 80126cc:	46bd      	mov	sp, r7
 80126ce:	bd80      	pop	{r7, pc}

080126d0 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE8startColEv>:
    StorageIndex startCol() const EIGEN_NOEXCEPT
 80126d0:	b580      	push	{r7, lr}
 80126d2:	b082      	sub	sp, #8
 80126d4:	af00      	add	r7, sp, #0
 80126d6:	6078      	str	r0, [r7, #4]
      return m_startCol.value();
 80126d8:	f7fd fbbd 	bl	800fe56 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EE5valueEv>
 80126dc:	4603      	mov	r3, r0
    }
 80126de:	4618      	mov	r0, r3
 80126e0:	3708      	adds	r7, #8
 80126e2:	46bd      	mov	sp, r7
 80126e4:	bd80      	pop	{r7, pc}

080126e6 <_ZN5Eigen8internal15unary_evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS0_10IndexBasedEfEC1ERKSG_>:
  explicit unary_evaluator(const XprType& block)
 80126e6:	b5b0      	push	{r4, r5, r7, lr}
 80126e8:	b082      	sub	sp, #8
 80126ea:	af00      	add	r7, sp, #0
 80126ec:	6078      	str	r0, [r7, #4]
 80126ee:	6039      	str	r1, [r7, #0]
      m_linear_offset(ForwardLinearAccess?(ArgType::IsRowMajor ? block.startRow()*block.nestedExpression().cols() + block.startCol() : block.startCol()*block.nestedExpression().rows() + block.startRow()):0)
 80126f0:	6878      	ldr	r0, [r7, #4]
 80126f2:	f000 fa66 	bl	8012bc2 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1Ev>
 80126f6:	687c      	ldr	r4, [r7, #4]
    : m_argImpl(block.nestedExpression()),
 80126f8:	683b      	ldr	r3, [r7, #0]
 80126fa:	4618      	mov	r0, r3
 80126fc:	f000 fa56 	bl	8012bac <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE16nestedExpressionEv>
 8012700:	4603      	mov	r3, r0
      m_linear_offset(ForwardLinearAccess?(ArgType::IsRowMajor ? block.startRow()*block.nestedExpression().cols() + block.startCol() : block.startCol()*block.nestedExpression().rows() + block.startRow()):0)
 8012702:	4619      	mov	r1, r3
 8012704:	4620      	mov	r0, r4
 8012706:	f000 fa67 	bl	8012bd8 <_ZN5Eigen8internal9evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC1ERSE_>
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	f103 0410 	add.w	r4, r3, #16
 8012710:	683b      	ldr	r3, [r7, #0]
 8012712:	4618      	mov	r0, r3
 8012714:	f7ff ffce 	bl	80126b4 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE8startRowEv>
 8012718:	4603      	mov	r3, r0
 801271a:	4619      	mov	r1, r3
 801271c:	4620      	mov	r0, r4
 801271e:	f7fb fab9 	bl	800dc94 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	f103 0414 	add.w	r4, r3, #20
 8012728:	683b      	ldr	r3, [r7, #0]
 801272a:	4618      	mov	r0, r3
 801272c:	f7ff ffd0 	bl	80126d0 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE8startColEv>
 8012730:	4603      	mov	r3, r0
 8012732:	4619      	mov	r1, r3
 8012734:	4620      	mov	r0, r4
 8012736:	f7fb fb21 	bl	800dd7c <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	f103 0518 	add.w	r5, r3, #24
 8012740:	683b      	ldr	r3, [r7, #0]
 8012742:	4618      	mov	r0, r3
 8012744:	f7ff ffc4 	bl	80126d0 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE8startColEv>
 8012748:	4604      	mov	r4, r0
 801274a:	683b      	ldr	r3, [r7, #0]
 801274c:	4618      	mov	r0, r3
 801274e:	f000 fa2d 	bl	8012bac <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE16nestedExpressionEv>
 8012752:	4603      	mov	r3, r0
 8012754:	4618      	mov	r0, r3
 8012756:	f7f5 fd6c 	bl	8008232 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4rowsEv>
 801275a:	4603      	mov	r3, r0
 801275c:	fb03 f404 	mul.w	r4, r3, r4
 8012760:	683b      	ldr	r3, [r7, #0]
 8012762:	4618      	mov	r0, r3
 8012764:	f7ff ffa6 	bl	80126b4 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE8startRowEv>
 8012768:	4603      	mov	r3, r0
 801276a:	4423      	add	r3, r4
 801276c:	4619      	mov	r1, r3
 801276e:	4628      	mov	r0, r5
 8012770:	f7fb fa90 	bl	800dc94 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
  { }
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	4618      	mov	r0, r3
 8012778:	3708      	adds	r7, #8
 801277a:	46bd      	mov	sp, r7
 801277c:	bdb0      	pop	{r4, r5, r7, pc}

0801277e <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 801277e:	b580      	push	{r7, lr}
 8012780:	b082      	sub	sp, #8
 8012782:	af00      	add	r7, sp, #0
 8012784:	6078      	str	r0, [r7, #4]
             : m_xpr.outerStride();
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	689b      	ldr	r3, [r3, #8]
             ? m_xpr.innerStride()
 801278a:	4618      	mov	r0, r3
 801278c:	f7f5 ffdc 	bl	8008748 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>
 8012790:	4603      	mov	r3, r0
    }
 8012792:	4618      	mov	r0, r3
 8012794:	3708      	adds	r7, #8
 8012796:	46bd      	mov	sp, r7
 8012798:	bd80      	pop	{r7, pc}

0801279a <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 801279a:	b580      	push	{r7, lr}
 801279c:	b082      	sub	sp, #8
 801279e:	af00      	add	r7, sp, #0
 80127a0:	6078      	str	r0, [r7, #4]
                    : m_xpr.innerStride();
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	689b      	ldr	r3, [r3, #8]
                    ? m_xpr.outerStride()
 80127a6:	4618      	mov	r0, r3
 80127a8:	f7fb fa1e 	bl	800dbe8 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11innerStrideEv>
 80127ac:	4603      	mov	r3, r0
    }
 80127ae:	4618      	mov	r0, r3
 80127b0:	3708      	adds	r7, #8
 80127b2:	46bd      	mov	sp, r7
 80127b4:	bd80      	pop	{r7, pc}

080127b6 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 80127b6:	b480      	push	{r7}
 80127b8:	b083      	sub	sp, #12
 80127ba:	af00      	add	r7, sp, #0
 80127bc:	6078      	str	r0, [r7, #4]
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	4618      	mov	r0, r3
 80127c2:	370c      	adds	r7, #12
 80127c4:	46bd      	mov	sp, r7
 80127c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ca:	4770      	bx	lr

080127cc <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 80127cc:	b480      	push	{r7}
 80127ce:	b083      	sub	sp, #12
 80127d0:	af00      	add	r7, sp, #0
 80127d2:	6078      	str	r0, [r7, #4]
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	681b      	ldr	r3, [r3, #0]
 80127d8:	4618      	mov	r0, r3
 80127da:	370c      	adds	r7, #12
 80127dc:	46bd      	mov	sp, r7
 80127de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127e2:	4770      	bx	lr

080127e4 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 80127e4:	b480      	push	{r7}
 80127e6:	b083      	sub	sp, #12
 80127e8:	af00      	add	r7, sp, #0
 80127ea:	6078      	str	r0, [r7, #4]
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	685b      	ldr	r3, [r3, #4]
 80127f0:	4618      	mov	r0, r3
 80127f2:	370c      	adds	r7, #12
 80127f4:	46bd      	mov	sp, r7
 80127f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127fa:	4770      	bx	lr

080127fc <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEC1Ev>:
 80127fc:	b480      	push	{r7}
 80127fe:	b083      	sub	sp, #12
 8012800:	af00      	add	r7, sp, #0
 8012802:	6078      	str	r0, [r7, #4]
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	4618      	mov	r0, r3
 8012808:	370c      	adds	r7, #12
 801280a:	46bd      	mov	sp, r7
 801280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012810:	4770      	bx	lr

08012812 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeffByOuterInner(Index outer, Index inner)
 8012812:	b580      	push	{r7, lr}
 8012814:	b086      	sub	sp, #24
 8012816:	af00      	add	r7, sp, #0
 8012818:	60f8      	str	r0, [r7, #12]
 801281a:	60b9      	str	r1, [r7, #8]
 801281c:	607a      	str	r2, [r7, #4]
    Index row = rowIndexByOuterInner(outer, inner);
 801281e:	6879      	ldr	r1, [r7, #4]
 8012820:	68b8      	ldr	r0, [r7, #8]
 8012822:	f000 f9e8 	bl	8012bf6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>
 8012826:	6178      	str	r0, [r7, #20]
    Index col = colIndexByOuterInner(outer, inner);
 8012828:	6879      	ldr	r1, [r7, #4]
 801282a:	68b8      	ldr	r0, [r7, #8]
 801282c:	f000 f9ef 	bl	8012c0e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>
 8012830:	6138      	str	r0, [r7, #16]
    assignCoeff(row, col);
 8012832:	693a      	ldr	r2, [r7, #16]
 8012834:	6979      	ldr	r1, [r7, #20]
 8012836:	68f8      	ldr	r0, [r7, #12]
 8012838:	f000 f9f5 	bl	8012c26 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>
  }
 801283c:	bf00      	nop
 801283e:	3718      	adds	r7, #24
 8012840:	46bd      	mov	sp, r7
 8012842:	bd80      	pop	{r7, pc}

08012844 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8012844:	b580      	push	{r7, lr}
 8012846:	b082      	sub	sp, #8
 8012848:	af00      	add	r7, sp, #0
 801284a:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 801284c:	2201      	movs	r2, #1
 801284e:	2100      	movs	r1, #0
 8012850:	6878      	ldr	r0, [r7, #4]
 8012852:	f7ff ffde 	bl	8012812 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8012856:	6878      	ldr	r0, [r7, #4]
 8012858:	f000 fa0b 	bl	8012c72 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSC_>
  }
 801285c:	bf00      	nop
 801285e:	3708      	adds	r7, #8
 8012860:	46bd      	mov	sp, r7
 8012862:	bd80      	pop	{r7, pc}

08012864 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EEC1ERKNS_5BlockIS6_Li3ELi1ELb0EEE>:
  explicit block_evaluator(const XprType& block)
 8012864:	b580      	push	{r7, lr}
 8012866:	b082      	sub	sp, #8
 8012868:	af00      	add	r7, sp, #0
 801286a:	6078      	str	r0, [r7, #4]
 801286c:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	6839      	ldr	r1, [r7, #0]
 8012872:	4618      	mov	r0, r3
 8012874:	f000 fa0d 	bl	8012c92 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS8_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 8012878:	683b      	ldr	r3, [r7, #0]
 801287a:	4618      	mov	r0, r3
 801287c:	f000 fa33 	bl	8012ce6 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE4dataEv>
 8012880:	bf00      	nop
  }
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	4618      	mov	r0, r3
 8012886:	3708      	adds	r7, #8
 8012888:	46bd      	mov	sp, r7
 801288a:	bd80      	pop	{r7, pc}

0801288c <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 801288c:	b580      	push	{r7, lr}
 801288e:	b082      	sub	sp, #8
 8012890:	af00      	add	r7, sp, #0
 8012892:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 8012894:	f7f4 f9b7 	bl	8006c06 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 8012898:	4603      	mov	r3, r0
  }
 801289a:	4618      	mov	r0, r3
 801289c:	3708      	adds	r7, #8
 801289e:	46bd      	mov	sp, r7
 80128a0:	bd80      	pop	{r7, pc}

080128a2 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 80128a2:	b580      	push	{r7, lr}
 80128a4:	b082      	sub	sp, #8
 80128a6:	af00      	add	r7, sp, #0
 80128a8:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 80128aa:	f7f4 f9a4 	bl	8006bf6 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 80128ae:	4603      	mov	r3, r0
  }
 80128b0:	4618      	mov	r0, r3
 80128b2:	3708      	adds	r7, #8
 80128b4:	46bd      	mov	sp, r7
 80128b6:	bd80      	pop	{r7, pc}

080128b8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4dataEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar *data() const
 80128b8:	b580      	push	{r7, lr}
 80128ba:	b082      	sub	sp, #8
 80128bc:	af00      	add	r7, sp, #0
 80128be:	6078      	str	r0, [r7, #4]
    { return m_storage.data(); }
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	4618      	mov	r0, r3
 80128c4:	f000 fa1b 	bl	8012cfe <_ZNK5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4dataEv>
 80128c8:	4603      	mov	r3, r0
 80128ca:	4618      	mov	r0, r3
 80128cc:	3708      	adds	r7, #8
 80128ce:	46bd      	mov	sp, r7
 80128d0:	bd80      	pop	{r7, pc}

080128d2 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 80128d2:	b480      	push	{r7}
 80128d4:	b083      	sub	sp, #12
 80128d6:	af00      	add	r7, sp, #0
 80128d8:	6078      	str	r0, [r7, #4]
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	4618      	mov	r0, r3
 80128de:	370c      	adds	r7, #12
 80128e0:	46bd      	mov	sp, r7
 80128e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128e6:	4770      	bx	lr

080128e8 <_ZN5Eigen9BlockImplIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ENS_5DenseEEC1ERS5_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 80128e8:	b580      	push	{r7, lr}
 80128ea:	b084      	sub	sp, #16
 80128ec:	af00      	add	r7, sp, #0
 80128ee:	60f8      	str	r0, [r7, #12]
 80128f0:	60b9      	str	r1, [r7, #8]
 80128f2:	607a      	str	r2, [r7, #4]
 80128f4:	68fb      	ldr	r3, [r7, #12]
 80128f6:	687a      	ldr	r2, [r7, #4]
 80128f8:	68b9      	ldr	r1, [r7, #8]
 80128fa:	4618      	mov	r0, r3
 80128fc:	f000 fa16 	bl	8012d2c <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EEC1ERS6_i>
 8012900:	68fb      	ldr	r3, [r7, #12]
 8012902:	4618      	mov	r0, r3
 8012904:	3710      	adds	r7, #16
 8012906:	46bd      	mov	sp, r7
 8012908:	bd80      	pop	{r7, pc}

0801290a <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 801290a:	b480      	push	{r7}
 801290c:	b083      	sub	sp, #12
 801290e:	af00      	add	r7, sp, #0
 8012910:	6078      	str	r0, [r7, #4]
    }
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	4618      	mov	r0, r3
 8012916:	370c      	adds	r7, #12
 8012918:	46bd      	mov	sp, r7
 801291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801291e:	4770      	bx	lr

08012920 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 8012920:	b580      	push	{r7, lr}
 8012922:	b082      	sub	sp, #8
 8012924:	af00      	add	r7, sp, #0
 8012926:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	4618      	mov	r0, r3
 801292c:	f7f9 f83d 	bl	800b9aa <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 8012930:	4603      	mov	r3, r0
    }
 8012932:	4618      	mov	r0, r3
 8012934:	3708      	adds	r7, #8
 8012936:	46bd      	mov	sp, r7
 8012938:	bd80      	pop	{r7, pc}

0801293a <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1ERKSJ_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 801293a:	b580      	push	{r7, lr}
 801293c:	b082      	sub	sp, #8
 801293e:	af00      	add	r7, sp, #0
 8012940:	6078      	str	r0, [r7, #4]
 8012942:	6039      	str	r1, [r7, #0]
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	6839      	ldr	r1, [r7, #0]
 8012948:	4618      	mov	r0, r3
 801294a:	f000 fa25 	bl	8012d98 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1ERKSJ_>
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	4618      	mov	r0, r3
 8012952:	3708      	adds	r7, #8
 8012954:	46bd      	mov	sp, r7
 8012956:	bd80      	pop	{r7, pc}

08012958 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8012958:	b480      	push	{r7}
 801295a:	b083      	sub	sp, #12
 801295c:	af00      	add	r7, sp, #0
 801295e:	6078      	str	r0, [r7, #4]
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	4618      	mov	r0, r3
 8012964:	370c      	adds	r7, #12
 8012966:	46bd      	mov	sp, r7
 8012968:	f85d 7b04 	ldr.w	r7, [sp], #4
 801296c:	4770      	bx	lr

0801296e <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEED1Ev>:
 801296e:	b480      	push	{r7}
 8012970:	b083      	sub	sp, #12
 8012972:	af00      	add	r7, sp, #0
 8012974:	6078      	str	r0, [r7, #4]
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	4618      	mov	r0, r3
 801297a:	370c      	adds	r7, #12
 801297c:	46bd      	mov	sp, r7
 801297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012982:	4770      	bx	lr

08012984 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi0ELi2EE3runISM_EEfRKSN_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 8012984:	b580      	push	{r7, lr}
 8012986:	b084      	sub	sp, #16
 8012988:	af00      	add	r7, sp, #0
 801298a:	60f8      	str	r0, [r7, #12]
 801298c:	60b9      	str	r1, [r7, #8]
 801298e:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 8012990:	68b9      	ldr	r1, [r7, #8]
 8012992:	68f8      	ldr	r0, [r7, #12]
 8012994:	f000 fa0f 	bl	8012db6 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi0ELi3EE3runERKSN_RKS3_>
 8012998:	eef0 7a40 	vmov.f32	s15, s0
  }
 801299c:	eeb0 0a67 	vmov.f32	s0, s15
 80129a0:	3710      	adds	r7, #16
 80129a2:	46bd      	mov	sp, r7
 80129a4:	bd80      	pop	{r7, pc}

080129a6 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEEC1ERKS9_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 80129a6:	b580      	push	{r7, lr}
 80129a8:	b082      	sub	sp, #8
 80129aa:	af00      	add	r7, sp, #0
 80129ac:	6078      	str	r0, [r7, #4]
 80129ae:	6039      	str	r1, [r7, #0]
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	6839      	ldr	r1, [r7, #0]
 80129b4:	4618      	mov	r0, r3
 80129b6:	f000 fa22 	bl	8012dfe <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEELi6ENS_10DenseShapeESA_ffEC1ERKS9_>
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	4618      	mov	r0, r3
 80129be:	3708      	adds	r7, #8
 80129c0:	46bd      	mov	sp, r7
 80129c2:	bd80      	pop	{r7, pc}

080129c4 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 80129c4:	b480      	push	{r7}
 80129c6:	b083      	sub	sp, #12
 80129c8:	af00      	add	r7, sp, #0
 80129ca:	6078      	str	r0, [r7, #4]
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	4618      	mov	r0, r3
 80129d0:	370c      	adds	r7, #12
 80129d2:	46bd      	mov	sp, r7
 80129d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129d8:	4770      	bx	lr

080129da <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 80129da:	b580      	push	{r7, lr}
 80129dc:	b082      	sub	sp, #8
 80129de:	af00      	add	r7, sp, #0
 80129e0:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	689b      	ldr	r3, [r3, #8]
 80129e6:	4618      	mov	r0, r3
 80129e8:	f7fb f973 	bl	800dcd2 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11innerStrideEv>
 80129ec:	4603      	mov	r3, r0
    }
 80129ee:	4618      	mov	r0, r3
 80129f0:	3708      	adds	r7, #8
 80129f2:	46bd      	mov	sp, r7
 80129f4:	bd80      	pop	{r7, pc}

080129f6 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 80129f6:	b580      	push	{r7, lr}
 80129f8:	b082      	sub	sp, #8
 80129fa:	af00      	add	r7, sp, #0
 80129fc:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	689b      	ldr	r3, [r3, #8]
 8012a02:	4618      	mov	r0, r3
 8012a04:	f7f4 fcd6 	bl	80073b4 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>
 8012a08:	4603      	mov	r3, r0
    }
 8012a0a:	4618      	mov	r0, r3
 8012a0c:	3708      	adds	r7, #8
 8012a0e:	46bd      	mov	sp, r7
 8012a10:	bd80      	pop	{r7, pc}

08012a12 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8012a12:	b480      	push	{r7}
 8012a14:	b083      	sub	sp, #12
 8012a16:	af00      	add	r7, sp, #0
 8012a18:	6078      	str	r0, [r7, #4]
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	4618      	mov	r0, r3
 8012a1e:	370c      	adds	r7, #12
 8012a20:	46bd      	mov	sp, r7
 8012a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a26:	4770      	bx	lr

08012a28 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
 8012a28:	b480      	push	{r7}
 8012a2a:	b083      	sub	sp, #12
 8012a2c:	af00      	add	r7, sp, #0
 8012a2e:	6078      	str	r0, [r7, #4]
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	4618      	mov	r0, r3
 8012a34:	370c      	adds	r7, #12
 8012a36:	46bd      	mov	sp, r7
 8012a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a3c:	4770      	bx	lr

08012a3e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE4DataC1ERKSD_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 8012a3e:	b590      	push	{r4, r7, lr}
 8012a40:	b083      	sub	sp, #12
 8012a42:	af00      	add	r7, sp, #0
 8012a44:	6078      	str	r0, [r7, #4]
 8012a46:	6039      	str	r1, [r7, #0]
 8012a48:	687c      	ldr	r4, [r7, #4]
 8012a4a:	6838      	ldr	r0, [r7, #0]
 8012a4c:	f000 fa14 	bl	8012e78 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE7functorEv>
 8012a50:	4603      	mov	r3, r0
 8012a52:	4619      	mov	r1, r3
 8012a54:	4620      	mov	r0, r4
 8012a56:	f7f2 fe2f 	bl	80056b8 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	1d1c      	adds	r4, r3, #4
 8012a5e:	6838      	ldr	r0, [r7, #0]
 8012a60:	f000 fa16 	bl	8012e90 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE3lhsEv>
 8012a64:	4603      	mov	r3, r0
 8012a66:	4619      	mov	r1, r3
 8012a68:	4620      	mov	r0, r4
 8012a6a:	f000 fa28 	bl	8012ebe <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERS7_>
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	f103 0408 	add.w	r4, r3, #8
 8012a74:	6838      	ldr	r0, [r7, #0]
 8012a76:	f000 fa16 	bl	8012ea6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE3rhsEv>
 8012a7a:	4603      	mov	r3, r0
 8012a7c:	4619      	mov	r1, r3
 8012a7e:	4620      	mov	r0, r4
 8012a80:	f7f8 fdd9 	bl	800b636 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS4_>
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	4618      	mov	r0, r3
 8012a88:	370c      	adds	r7, #12
 8012a8a:	46bd      	mov	sp, r7
 8012a8c:	bd90      	pop	{r4, r7, pc}

08012a8e <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 8012a8e:	b580      	push	{r7, lr}
 8012a90:	b084      	sub	sp, #16
 8012a92:	af00      	add	r7, sp, #0
 8012a94:	60f8      	str	r0, [r7, #12]
 8012a96:	60b9      	str	r1, [r7, #8]
 8012a98:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 8012a9a:	68fb      	ldr	r3, [r7, #12]
 8012a9c:	68ba      	ldr	r2, [r7, #8]
 8012a9e:	6879      	ldr	r1, [r7, #4]
 8012aa0:	4618      	mov	r0, r3
 8012aa2:	f000 fa1b 	bl	8012edc <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE5coeffEii>
 8012aa6:	eef0 7a40 	vmov.f32	s15, s0
 8012aaa:	eeb0 0a67 	vmov.f32	s0, s15
 8012aae:	3710      	adds	r7, #16
 8012ab0:	46bd      	mov	sp, r7
 8012ab2:	bd80      	pop	{r7, pc}

08012ab4 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi1ELi1EE3runERKSH_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8012ab4:	b580      	push	{r7, lr}
 8012ab6:	b082      	sub	sp, #8
 8012ab8:	af00      	add	r7, sp, #0
 8012aba:	6078      	str	r0, [r7, #4]
 8012abc:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8012abe:	2201      	movs	r2, #1
 8012ac0:	2100      	movs	r1, #0
 8012ac2:	6878      	ldr	r0, [r7, #4]
 8012ac4:	f7ff ffe3 	bl	8012a8e <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE17coeffByOuterInnerEii>
 8012ac8:	eef0 7a40 	vmov.f32	s15, s0
  }
 8012acc:	eeb0 0a67 	vmov.f32	s0, s15
 8012ad0:	3708      	adds	r7, #8
 8012ad2:	46bd      	mov	sp, r7
 8012ad4:	bd80      	pop	{r7, pc}

08012ad6 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi2ELi1EE3runERKSH_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8012ad6:	b580      	push	{r7, lr}
 8012ad8:	b082      	sub	sp, #8
 8012ada:	af00      	add	r7, sp, #0
 8012adc:	6078      	str	r0, [r7, #4]
 8012ade:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8012ae0:	2202      	movs	r2, #2
 8012ae2:	2100      	movs	r1, #0
 8012ae4:	6878      	ldr	r0, [r7, #4]
 8012ae6:	f7ff ffd2 	bl	8012a8e <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE17coeffByOuterInnerEii>
 8012aea:	eef0 7a40 	vmov.f32	s15, s0
  }
 8012aee:	eeb0 0a67 	vmov.f32	s0, s15
 8012af2:	3708      	adds	r7, #8
 8012af4:	46bd      	mov	sp, r7
 8012af6:	bd80      	pop	{r7, pc}

08012af8 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELi4ENS_10DenseShapeES7_ffE5coeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const CoeffReturnType coeff(Index row, Index col) const
 8012af8:	b580      	push	{r7, lr}
 8012afa:	b0a4      	sub	sp, #144	; 0x90
 8012afc:	af00      	add	r7, sp, #0
 8012afe:	60f8      	str	r0, [r7, #12]
 8012b00:	60b9      	str	r1, [r7, #8]
 8012b02:	607a      	str	r2, [r7, #4]
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 8012b04:	68fb      	ldr	r3, [r7, #12]
 8012b06:	6819      	ldr	r1, [r3, #0]
 8012b08:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8012b0c:	68ba      	ldr	r2, [r7, #8]
 8012b0e:	4618      	mov	r0, r3
 8012b10:	f7f8 fc16 	bl	800b340 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE3rowEi>
 8012b14:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012b18:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8012b1c:	4611      	mov	r1, r2
 8012b1e:	4618      	mov	r0, r3
 8012b20:	f7f8 fc21 	bl	800b366 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE9transposeEv>
 8012b24:	68fb      	ldr	r3, [r7, #12]
 8012b26:	6859      	ldr	r1, [r3, #4]
 8012b28:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8012b2c:	687a      	ldr	r2, [r7, #4]
 8012b2e:	4618      	mov	r0, r3
 8012b30:	f000 f9ff 	bl	8012f32 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE3colEi>
 8012b34:	f107 0314 	add.w	r3, r7, #20
 8012b38:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8012b3c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8012b40:	4618      	mov	r0, r3
 8012b42:	f000 fa09 	bl	8012f58 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE12cwiseProductINS2_IKNS3_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>
 8012b46:	f107 0314 	add.w	r3, r7, #20
 8012b4a:	4618      	mov	r0, r3
 8012b4c:	f000 fa32 	bl	8012fb4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE3sumEv>
 8012b50:	eef0 7a40 	vmov.f32	s15, s0
  }
 8012b54:	eeb0 0a67 	vmov.f32	s0, s15
 8012b58:	3790      	adds	r7, #144	; 0x90
 8012b5a:	46bd      	mov	sp, r7
 8012b5c:	bd80      	pop	{r7, pc}

08012b5e <_ZNK5Eigen8internal13sub_assign_opIffE11assignCoeffERfRKf>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a -= b; }
 8012b5e:	b480      	push	{r7}
 8012b60:	b085      	sub	sp, #20
 8012b62:	af00      	add	r7, sp, #0
 8012b64:	60f8      	str	r0, [r7, #12]
 8012b66:	60b9      	str	r1, [r7, #8]
 8012b68:	607a      	str	r2, [r7, #4]
 8012b6a:	68bb      	ldr	r3, [r7, #8]
 8012b6c:	ed93 7a00 	vldr	s14, [r3]
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	edd3 7a00 	vldr	s15, [r3]
 8012b76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012b7a:	68bb      	ldr	r3, [r7, #8]
 8012b7c:	edc3 7a00 	vstr	s15, [r3]
 8012b80:	bf00      	nop
 8012b82:	3714      	adds	r7, #20
 8012b84:	46bd      	mov	sp, r7
 8012b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b8a:	4770      	bx	lr

08012b8c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi3ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8012b8c:	b580      	push	{r7, lr}
 8012b8e:	b082      	sub	sp, #8
 8012b90:	af00      	add	r7, sp, #0
 8012b92:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8012b94:	2200      	movs	r2, #0
 8012b96:	2101      	movs	r1, #1
 8012b98:	6878      	ldr	r0, [r7, #4]
 8012b9a:	f7ff f991 	bl	8011ec0 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8012b9e:	6878      	ldr	r0, [r7, #4]
 8012ba0:	f000 fa23 	bl	8012fea <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi4ELi9EE3runERSE_>
  }
 8012ba4:	bf00      	nop
 8012ba6:	3708      	adds	r7, #8
 8012ba8:	46bd      	mov	sp, r7
 8012baa:	bd80      	pop	{r7, pc}

08012bac <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE16nestedExpressionEv>:
    const typename internal::remove_all<XprTypeNested>::type& nestedExpression() const
 8012bac:	b480      	push	{r7}
 8012bae:	b083      	sub	sp, #12
 8012bb0:	af00      	add	r7, sp, #0
 8012bb2:	6078      	str	r0, [r7, #4]
      return m_xpr;
 8012bb4:	687b      	ldr	r3, [r7, #4]
    }
 8012bb6:	4618      	mov	r0, r3
 8012bb8:	370c      	adds	r7, #12
 8012bba:	46bd      	mov	sp, r7
 8012bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bc0:	4770      	bx	lr

08012bc2 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8012bc2:	b480      	push	{r7}
 8012bc4:	b083      	sub	sp, #12
 8012bc6:	af00      	add	r7, sp, #0
 8012bc8:	6078      	str	r0, [r7, #4]
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	4618      	mov	r0, r3
 8012bce:	370c      	adds	r7, #12
 8012bd0:	46bd      	mov	sp, r7
 8012bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bd6:	4770      	bx	lr

08012bd8 <_ZN5Eigen8internal9evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC1ERSE_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8012bd8:	b580      	push	{r7, lr}
 8012bda:	b082      	sub	sp, #8
 8012bdc:	af00      	add	r7, sp, #0
 8012bde:	6078      	str	r0, [r7, #4]
 8012be0:	6039      	str	r1, [r7, #0]
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	6839      	ldr	r1, [r7, #0]
 8012be6:	4618      	mov	r0, r3
 8012be8:	f7f7 fb49 	bl	800a27e <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC1ERKSD_>
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	4618      	mov	r0, r3
 8012bf0:	3708      	adds	r7, #8
 8012bf2:	46bd      	mov	sp, r7
 8012bf4:	bd80      	pop	{r7, pc}

08012bf6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index rowIndexByOuterInner(Index outer, Index inner)
 8012bf6:	b480      	push	{r7}
 8012bf8:	b083      	sub	sp, #12
 8012bfa:	af00      	add	r7, sp, #0
 8012bfc:	6078      	str	r0, [r7, #4]
 8012bfe:	6039      	str	r1, [r7, #0]
      : inner;
 8012c00:	683b      	ldr	r3, [r7, #0]
  }
 8012c02:	4618      	mov	r0, r3
 8012c04:	370c      	adds	r7, #12
 8012c06:	46bd      	mov	sp, r7
 8012c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c0c:	4770      	bx	lr

08012c0e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index colIndexByOuterInner(Index outer, Index inner)
 8012c0e:	b480      	push	{r7}
 8012c10:	b083      	sub	sp, #12
 8012c12:	af00      	add	r7, sp, #0
 8012c14:	6078      	str	r0, [r7, #4]
 8012c16:	6039      	str	r1, [r7, #0]
      : outer;
 8012c18:	687b      	ldr	r3, [r7, #4]
  }
 8012c1a:	4618      	mov	r0, r3
 8012c1c:	370c      	adds	r7, #12
 8012c1e:	46bd      	mov	sp, r7
 8012c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c24:	4770      	bx	lr

08012c26 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index row, Index col)
 8012c26:	b5b0      	push	{r4, r5, r7, lr}
 8012c28:	b086      	sub	sp, #24
 8012c2a:	af00      	add	r7, sp, #0
 8012c2c:	60f8      	str	r0, [r7, #12]
 8012c2e:	60b9      	str	r1, [r7, #8]
 8012c30:	607a      	str	r2, [r7, #4]
    m_functor.assignCoeff(m_dst.coeffRef(row,col), m_src.coeff(row,col));
 8012c32:	68fb      	ldr	r3, [r7, #12]
 8012c34:	689c      	ldr	r4, [r3, #8]
 8012c36:	68fb      	ldr	r3, [r7, #12]
 8012c38:	681b      	ldr	r3, [r3, #0]
 8012c3a:	687a      	ldr	r2, [r7, #4]
 8012c3c:	68b9      	ldr	r1, [r7, #8]
 8012c3e:	4618      	mov	r0, r3
 8012c40:	f7f6 f83e 	bl	8008cc0 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEii>
 8012c44:	4605      	mov	r5, r0
 8012c46:	68fb      	ldr	r3, [r7, #12]
 8012c48:	685b      	ldr	r3, [r3, #4]
 8012c4a:	687a      	ldr	r2, [r7, #4]
 8012c4c:	68b9      	ldr	r1, [r7, #8]
 8012c4e:	4618      	mov	r0, r3
 8012c50:	f000 f9db 	bl	801300a <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEELi3ENS_10DenseShapeES6_ffE5coeffEii>
 8012c54:	eef0 7a40 	vmov.f32	s15, s0
 8012c58:	edc7 7a05 	vstr	s15, [r7, #20]
 8012c5c:	f107 0314 	add.w	r3, r7, #20
 8012c60:	461a      	mov	r2, r3
 8012c62:	4629      	mov	r1, r5
 8012c64:	4620      	mov	r0, r4
 8012c66:	f7f5 fd9b 	bl	80087a0 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 8012c6a:	bf00      	nop
 8012c6c:	3718      	adds	r7, #24
 8012c6e:	46bd      	mov	sp, r7
 8012c70:	bdb0      	pop	{r4, r5, r7, pc}

08012c72 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8012c72:	b580      	push	{r7, lr}
 8012c74:	b082      	sub	sp, #8
 8012c76:	af00      	add	r7, sp, #0
 8012c78:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8012c7a:	2202      	movs	r2, #2
 8012c7c:	2100      	movs	r1, #0
 8012c7e:	6878      	ldr	r0, [r7, #4]
 8012c80:	f7ff fdc7 	bl	8012812 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8012c84:	6878      	ldr	r0, [r7, #4]
 8012c86:	f000 f9f3 	bl	8013070 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSC_>
  }
 8012c8a:	bf00      	nop
 8012c8c:	3708      	adds	r7, #8
 8012c8e:	46bd      	mov	sp, r7
 8012c90:	bd80      	pop	{r7, pc}

08012c92 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS8_>:
  explicit mapbase_evaluator(const XprType& map)
 8012c92:	b590      	push	{r4, r7, lr}
 8012c94:	b083      	sub	sp, #12
 8012c96:	af00      	add	r7, sp, #0
 8012c98:	6078      	str	r0, [r7, #4]
 8012c9a:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 8012c9c:	6878      	ldr	r0, [r7, #4]
 8012c9e:	f000 fa13 	bl	80130c8 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 8012ca2:	683b      	ldr	r3, [r7, #0]
 8012ca4:	4618      	mov	r0, r3
 8012ca6:	f000 f81e 	bl	8012ce6 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE4dataEv>
 8012caa:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	601a      	str	r2, [r3, #0]
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	1d1c      	adds	r4, r3, #4
 8012cb4:	683b      	ldr	r3, [r7, #0]
 8012cb6:	4618      	mov	r0, r3
 8012cb8:	f000 f9ea 	bl	8013090 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EE11innerStrideEv>
 8012cbc:	4603      	mov	r3, r0
 8012cbe:	4619      	mov	r1, r3
 8012cc0:	4620      	mov	r0, r4
 8012cc2:	f7f3 ff59 	bl	8006b78 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	1d5c      	adds	r4, r3, #5
 8012cca:	683b      	ldr	r3, [r7, #0]
 8012ccc:	4618      	mov	r0, r3
 8012cce:	f000 f9ed 	bl	80130ac <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EE11outerStrideEv>
 8012cd2:	4603      	mov	r3, r0
 8012cd4:	4619      	mov	r1, r3
 8012cd6:	4620      	mov	r0, r4
 8012cd8:	f7f3 ff68 	bl	8006bac <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
  }
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	4618      	mov	r0, r3
 8012ce0:	370c      	adds	r7, #12
 8012ce2:	46bd      	mov	sp, r7
 8012ce4:	bd90      	pop	{r4, r7, pc}

08012ce6 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE4dataEv>:
 8012ce6:	b480      	push	{r7}
 8012ce8:	b083      	sub	sp, #12
 8012cea:	af00      	add	r7, sp, #0
 8012cec:	6078      	str	r0, [r7, #4]
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	681b      	ldr	r3, [r3, #0]
 8012cf2:	4618      	mov	r0, r3
 8012cf4:	370c      	adds	r7, #12
 8012cf6:	46bd      	mov	sp, r7
 8012cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cfc:	4770      	bx	lr

08012cfe <_ZNK5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4dataEv>:
    EIGEN_DEVICE_FUNC const T *data() const { return m_data.array; }
 8012cfe:	b480      	push	{r7}
 8012d00:	b083      	sub	sp, #12
 8012d02:	af00      	add	r7, sp, #0
 8012d04:	6078      	str	r0, [r7, #4]
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	4618      	mov	r0, r3
 8012d0a:	370c      	adds	r7, #12
 8012d0c:	46bd      	mov	sp, r7
 8012d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d12:	4770      	bx	lr

08012d14 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11outerStrideEv>:
    inline Index outerStride() const EIGEN_NOEXCEPT { return this->innerSize(); }
 8012d14:	b580      	push	{r7, lr}
 8012d16:	b082      	sub	sp, #8
 8012d18:	af00      	add	r7, sp, #0
 8012d1a:	6078      	str	r0, [r7, #4]
 8012d1c:	6878      	ldr	r0, [r7, #4]
 8012d1e:	f000 f9de 	bl	80130de <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE9innerSizeEv>
 8012d22:	4603      	mov	r3, r0
 8012d24:	4618      	mov	r0, r3
 8012d26:	3708      	adds	r7, #8
 8012d28:	46bd      	mov	sp, r7
 8012d2a:	bd80      	pop	{r7, pc}

08012d2c <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EEC1ERS6_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 8012d2c:	b5b0      	push	{r4, r5, r7, lr}
 8012d2e:	b084      	sub	sp, #16
 8012d30:	af00      	add	r7, sp, #0
 8012d32:	60f8      	str	r0, [r7, #12]
 8012d34:	60b9      	str	r1, [r7, #8]
 8012d36:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 8012d38:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 8012d3a:	68b8      	ldr	r0, [r7, #8]
 8012d3c:	f000 f9db 	bl	80130f6 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE4dataEv>
 8012d40:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 8012d42:	68b8      	ldr	r0, [r7, #8]
 8012d44:	f000 f9ff 	bl	8013146 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE11outerStrideEv>
 8012d48:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	fb02 f303 	mul.w	r3, r2, r3
 8012d50:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 8012d52:	441d      	add	r5, r3
 8012d54:	68b8      	ldr	r0, [r7, #8]
 8012d56:	f7f3 f822 	bl	8005d9e <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8012d5a:	4602      	mov	r2, r0
 8012d5c:	2301      	movs	r3, #1
 8012d5e:	4629      	mov	r1, r5
 8012d60:	4620      	mov	r0, r4
 8012d62:	f000 fa11 	bl	8013188 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii>
 8012d66:	68fb      	ldr	r3, [r7, #12]
 8012d68:	3308      	adds	r3, #8
 8012d6a:	68ba      	ldr	r2, [r7, #8]
 8012d6c:	6812      	ldr	r2, [r2, #0]
 8012d6e:	601a      	str	r2, [r3, #0]
 8012d70:	68fb      	ldr	r3, [r7, #12]
 8012d72:	330c      	adds	r3, #12
 8012d74:	2100      	movs	r1, #0
 8012d76:	4618      	mov	r0, r3
 8012d78:	f7fa ff8c 	bl	800dc94 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 8012d7c:	68fb      	ldr	r3, [r7, #12]
 8012d7e:	3310      	adds	r3, #16
 8012d80:	6879      	ldr	r1, [r7, #4]
 8012d82:	4618      	mov	r0, r3
 8012d84:	f7fa fffa 	bl	800dd7c <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
      init();
 8012d88:	68f8      	ldr	r0, [r7, #12]
 8012d8a:	f000 fa3b 	bl	8013204 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EE4initEv>
    }
 8012d8e:	68fb      	ldr	r3, [r7, #12]
 8012d90:	4618      	mov	r0, r3
 8012d92:	3710      	adds	r7, #16
 8012d94:	46bd      	mov	sp, r7
 8012d96:	bdb0      	pop	{r4, r5, r7, pc}

08012d98 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1ERKSJ_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8012d98:	b580      	push	{r7, lr}
 8012d9a:	b082      	sub	sp, #8
 8012d9c:	af00      	add	r7, sp, #0
 8012d9e:	6078      	str	r0, [r7, #4]
 8012da0:	6039      	str	r1, [r7, #0]
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	6839      	ldr	r1, [r7, #0]
 8012da6:	4618      	mov	r0, r3
 8012da8:	f000 fa3c 	bl	8013224 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffEC1ERKSJ_>
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	4618      	mov	r0, r3
 8012db0:	3708      	adds	r7, #8
 8012db2:	46bd      	mov	sp, r7
 8012db4:	bd80      	pop	{r7, pc}

08012db6 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi0ELi3EE3runERKSN_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 8012db6:	b580      	push	{r7, lr}
 8012db8:	b084      	sub	sp, #16
 8012dba:	af00      	add	r7, sp, #0
 8012dbc:	6078      	str	r0, [r7, #4]
 8012dbe:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8012dc0:	6839      	ldr	r1, [r7, #0]
 8012dc2:	6878      	ldr	r0, [r7, #4]
 8012dc4:	f000 fa40 	bl	8013248 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi0ELi1EE3runERKSN_RKS3_>
 8012dc8:	eef0 7a40 	vmov.f32	s15, s0
 8012dcc:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 8012dd0:	6839      	ldr	r1, [r7, #0]
 8012dd2:	6878      	ldr	r0, [r7, #4]
 8012dd4:	f000 fa49 	bl	801326a <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi1ELi2EE3runERKSN_RKS3_>
 8012dd8:	eef0 7a40 	vmov.f32	s15, s0
 8012ddc:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8012de0:	f107 020c 	add.w	r2, r7, #12
 8012de4:	f107 0308 	add.w	r3, r7, #8
 8012de8:	4619      	mov	r1, r3
 8012dea:	6838      	ldr	r0, [r7, #0]
 8012dec:	f7f6 fac9 	bl	8009382 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 8012df0:	eef0 7a40 	vmov.f32	s15, s0
  }
 8012df4:	eeb0 0a67 	vmov.f32	s0, s15
 8012df8:	3710      	adds	r7, #16
 8012dfa:	46bd      	mov	sp, r7
 8012dfc:	bd80      	pop	{r7, pc}

08012dfe <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEELi6ENS_10DenseShapeESA_ffEC1ERKS9_>:
  explicit product_evaluator(const XprType& xpr)
 8012dfe:	b5b0      	push	{r4, r5, r7, lr}
 8012e00:	b084      	sub	sp, #16
 8012e02:	af00      	add	r7, sp, #0
 8012e04:	6078      	str	r0, [r7, #4]
 8012e06:	6039      	str	r1, [r7, #0]
    : m_result(xpr.rows(), xpr.cols())
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	4618      	mov	r0, r3
 8012e0c:	f000 fa51 	bl	80132b2 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	1d1c      	adds	r4, r3, #4
 8012e14:	6838      	ldr	r0, [r7, #0]
 8012e16:	f7f3 f8f9 	bl	800600c <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4rowsEv>
 8012e1a:	4603      	mov	r3, r0
 8012e1c:	60bb      	str	r3, [r7, #8]
 8012e1e:	6838      	ldr	r0, [r7, #0]
 8012e20:	f7f3 f901 	bl	8006026 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4colsEv>
 8012e24:	4603      	mov	r3, r0
 8012e26:	60fb      	str	r3, [r7, #12]
 8012e28:	f107 020c 	add.w	r2, r7, #12
 8012e2c:	f107 0308 	add.w	r3, r7, #8
 8012e30:	4619      	mov	r1, r3
 8012e32:	4620      	mov	r0, r4
 8012e34:	f000 fa4a 	bl	80132cc <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1IiiEERKT_RKT0_>
    ::new (static_cast<Base*>(this)) Base(m_result);
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	4619      	mov	r1, r3
 8012e3c:	2004      	movs	r0, #4
 8012e3e:	f7ee f87d 	bl	8000f3c <_ZnwjPv>
 8012e42:	4602      	mov	r2, r0
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	3304      	adds	r3, #4
 8012e48:	4619      	mov	r1, r3
 8012e4a:	4610      	mov	r0, r2
 8012e4c:	f7f7 fbf9 	bl	800a642 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
    generic_product_impl<Lhs, Rhs, LhsShape, RhsShape, ProductTag>::evalTo(m_result, xpr.lhs(), xpr.rhs());
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	1d1c      	adds	r4, r3, #4
 8012e54:	6838      	ldr	r0, [r7, #0]
 8012e56:	f000 fa52 	bl	80132fe <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE3lhsEv>
 8012e5a:	4605      	mov	r5, r0
 8012e5c:	6838      	ldr	r0, [r7, #0]
 8012e5e:	f000 fa59 	bl	8013314 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE3rhsEv>
 8012e62:	4603      	mov	r3, r0
 8012e64:	461a      	mov	r2, r3
 8012e66:	4629      	mov	r1, r5
 8012e68:	4620      	mov	r0, r4
 8012e6a:	f000 fa5f 	bl	801332c <_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EENS_10DenseShapeES9_Li6EE6evalToINS3_IfLi1ELi1ELi0ELi1ELi1EEEEEvRT_RKS6_RKS8_>
  }
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	4618      	mov	r0, r3
 8012e72:	3710      	adds	r7, #16
 8012e74:	46bd      	mov	sp, r7
 8012e76:	bdb0      	pop	{r4, r5, r7, pc}

08012e78 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 8012e78:	b480      	push	{r7}
 8012e7a:	b083      	sub	sp, #12
 8012e7c:	af00      	add	r7, sp, #0
 8012e7e:	6078      	str	r0, [r7, #4]
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	3308      	adds	r3, #8
 8012e84:	4618      	mov	r0, r3
 8012e86:	370c      	adds	r7, #12
 8012e88:	46bd      	mov	sp, r7
 8012e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e8e:	4770      	bx	lr

08012e90 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 8012e90:	b480      	push	{r7}
 8012e92:	b083      	sub	sp, #12
 8012e94:	af00      	add	r7, sp, #0
 8012e96:	6078      	str	r0, [r7, #4]
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	4618      	mov	r0, r3
 8012e9c:	370c      	adds	r7, #12
 8012e9e:	46bd      	mov	sp, r7
 8012ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ea4:	4770      	bx	lr

08012ea6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 8012ea6:	b480      	push	{r7}
 8012ea8:	b083      	sub	sp, #12
 8012eaa:	af00      	add	r7, sp, #0
 8012eac:	6078      	str	r0, [r7, #4]
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	685b      	ldr	r3, [r3, #4]
 8012eb2:	4618      	mov	r0, r3
 8012eb4:	370c      	adds	r7, #12
 8012eb6:	46bd      	mov	sp, r7
 8012eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ebc:	4770      	bx	lr

08012ebe <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8012ebe:	b580      	push	{r7, lr}
 8012ec0:	b082      	sub	sp, #8
 8012ec2:	af00      	add	r7, sp, #0
 8012ec4:	6078      	str	r0, [r7, #4]
 8012ec6:	6039      	str	r1, [r7, #0]
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	6839      	ldr	r1, [r7, #0]
 8012ecc:	4618      	mov	r0, r3
 8012ece:	f000 fa55 	bl	801337c <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERKS6_>
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	4618      	mov	r0, r3
 8012ed6:	3708      	adds	r7, #8
 8012ed8:	46bd      	mov	sp, r7
 8012eda:	bd80      	pop	{r7, pc}

08012edc <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8012edc:	b590      	push	{r4, r7, lr}
 8012ede:	b087      	sub	sp, #28
 8012ee0:	af00      	add	r7, sp, #0
 8012ee2:	60f8      	str	r0, [r7, #12]
 8012ee4:	60b9      	str	r1, [r7, #8]
 8012ee6:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 8012ee8:	68fb      	ldr	r3, [r7, #12]
 8012eea:	4618      	mov	r0, r3
 8012eec:	f000 fa55 	bl	801339a <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE4Data4funcEv>
 8012ef0:	4604      	mov	r4, r0
 8012ef2:	68fb      	ldr	r3, [r7, #12]
 8012ef4:	3304      	adds	r3, #4
 8012ef6:	687a      	ldr	r2, [r7, #4]
 8012ef8:	68b9      	ldr	r1, [r7, #8]
 8012efa:	4618      	mov	r0, r3
 8012efc:	f000 fa58 	bl	80133b0 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfE5coeffEii>
 8012f00:	eef0 7a40 	vmov.f32	s15, s0
 8012f04:	edc7 7a05 	vstr	s15, [r7, #20]
 8012f08:	68fb      	ldr	r3, [r7, #12]
 8012f0a:	3308      	adds	r3, #8
 8012f0c:	687a      	ldr	r2, [r7, #4]
 8012f0e:	68b9      	ldr	r1, [r7, #8]
 8012f10:	4618      	mov	r0, r3
 8012f12:	f7fe f9d0 	bl	80112b6 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffEii>
 8012f16:	4602      	mov	r2, r0
 8012f18:	f107 0314 	add.w	r3, r7, #20
 8012f1c:	4619      	mov	r1, r3
 8012f1e:	4620      	mov	r0, r4
 8012f20:	f7fc fa70 	bl	800f404 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 8012f24:	eef0 7a40 	vmov.f32	s15, s0
  }
 8012f28:	eeb0 0a67 	vmov.f32	s0, s15
 8012f2c:	371c      	adds	r7, #28
 8012f2e:	46bd      	mov	sp, r7
 8012f30:	bd90      	pop	{r4, r7, pc}

08012f32 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE3colEi>:
ConstColXpr col(Index i) const
 8012f32:	b580      	push	{r7, lr}
 8012f34:	b084      	sub	sp, #16
 8012f36:	af00      	add	r7, sp, #0
 8012f38:	60f8      	str	r0, [r7, #12]
 8012f3a:	60b9      	str	r1, [r7, #8]
 8012f3c:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 8012f3e:	68b8      	ldr	r0, [r7, #8]
 8012f40:	f7f2 ff6a 	bl	8005e18 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 8012f44:	4603      	mov	r3, r0
 8012f46:	687a      	ldr	r2, [r7, #4]
 8012f48:	4619      	mov	r1, r3
 8012f4a:	68f8      	ldr	r0, [r7, #12]
 8012f4c:	f000 fa46 	bl	80133dc <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEC1ERS3_i>
}
 8012f50:	68f8      	ldr	r0, [r7, #12]
 8012f52:	3710      	adds	r7, #16
 8012f54:	46bd      	mov	sp, r7
 8012f56:	bd80      	pop	{r7, pc}

08012f58 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE12cwiseProductINS2_IKNS3_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 8012f58:	b5b0      	push	{r4, r5, r7, lr}
 8012f5a:	b086      	sub	sp, #24
 8012f5c:	af00      	add	r7, sp, #0
 8012f5e:	60f8      	str	r0, [r7, #12]
 8012f60:	60b9      	str	r1, [r7, #8]
 8012f62:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 8012f64:	68b8      	ldr	r0, [r7, #8]
 8012f66:	f7f8 ffff 	bl	800bf68 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE7derivedEv>
 8012f6a:	4604      	mov	r4, r0
 8012f6c:	6878      	ldr	r0, [r7, #4]
 8012f6e:	f000 fa5d 	bl	801342c <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE7derivedEv>
 8012f72:	4605      	mov	r5, r0
 8012f74:	f107 0314 	add.w	r3, r7, #20
 8012f78:	4618      	mov	r0, r3
 8012f7a:	f7f2 fb13 	bl	80055a4 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 8012f7e:	f107 0314 	add.w	r3, r7, #20
 8012f82:	462a      	mov	r2, r5
 8012f84:	4621      	mov	r1, r4
 8012f86:	68f8      	ldr	r0, [r7, #12]
 8012f88:	f000 fa8a 	bl	80134a0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERSC_RSG_RKS3_>
}
 8012f8c:	68f8      	ldr	r0, [r7, #12]
 8012f8e:	3718      	adds	r7, #24
 8012f90:	46bd      	mov	sp, r7
 8012f92:	bdb0      	pop	{r4, r5, r7, pc}

08012f94 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 8012f94:	b580      	push	{r7, lr}
 8012f96:	b082      	sub	sp, #8
 8012f98:	af00      	add	r7, sp, #0
 8012f9a:	6078      	str	r0, [r7, #4]
 8012f9c:	6878      	ldr	r0, [r7, #4]
 8012f9e:	f000 fadd 	bl	801355c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE7derivedEv>
 8012fa2:	4603      	mov	r3, r0
 8012fa4:	4618      	mov	r0, r3
 8012fa6:	f000 fae4 	bl	8013572 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE4rowsEv>
 8012faa:	4603      	mov	r3, r0
 8012fac:	4618      	mov	r0, r3
 8012fae:	3708      	adds	r7, #8
 8012fb0:	46bd      	mov	sp, r7
 8012fb2:	bd80      	pop	{r7, pc}

08012fb4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 8012fb4:	b590      	push	{r4, r7, lr}
 8012fb6:	b085      	sub	sp, #20
 8012fb8:	af00      	add	r7, sp, #0
 8012fba:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 8012fbc:	6878      	ldr	r0, [r7, #4]
 8012fbe:	f000 facd 	bl	801355c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE7derivedEv>
 8012fc2:	4604      	mov	r4, r0
 8012fc4:	f107 030c 	add.w	r3, r7, #12
 8012fc8:	4618      	mov	r0, r3
 8012fca:	f7f2 fde2 	bl	8005b92 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 8012fce:	f107 030c 	add.w	r3, r7, #12
 8012fd2:	4619      	mov	r1, r3
 8012fd4:	4620      	mov	r0, r4
 8012fd6:	f000 fb49 	bl	801366c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 8012fda:	eef0 7a40 	vmov.f32	s15, s0
 8012fde:	bf00      	nop
}
 8012fe0:	eeb0 0a67 	vmov.f32	s0, s15
 8012fe4:	3714      	adds	r7, #20
 8012fe6:	46bd      	mov	sp, r7
 8012fe8:	bd90      	pop	{r4, r7, pc}

08012fea <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi4ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8012fea:	b580      	push	{r7, lr}
 8012fec:	b082      	sub	sp, #8
 8012fee:	af00      	add	r7, sp, #0
 8012ff0:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8012ff2:	2201      	movs	r2, #1
 8012ff4:	2101      	movs	r1, #1
 8012ff6:	6878      	ldr	r0, [r7, #4]
 8012ff8:	f7fe ff62 	bl	8011ec0 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8012ffc:	6878      	ldr	r0, [r7, #4]
 8012ffe:	f000 fb7b 	bl	80136f8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi5ELi9EE3runERSE_>
  }
 8013002:	bf00      	nop
 8013004:	3708      	adds	r7, #8
 8013006:	46bd      	mov	sp, r7
 8013008:	bd80      	pop	{r7, pc}

0801300a <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEELi3ENS_10DenseShapeES6_ffE5coeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const CoeffReturnType coeff(Index row, Index col) const
 801300a:	b580      	push	{r7, lr}
 801300c:	b0a4      	sub	sp, #144	; 0x90
 801300e:	af00      	add	r7, sp, #0
 8013010:	60f8      	str	r0, [r7, #12]
 8013012:	60b9      	str	r1, [r7, #8]
 8013014:	607a      	str	r2, [r7, #4]
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 8013016:	68fb      	ldr	r3, [r7, #12]
 8013018:	6819      	ldr	r1, [r3, #0]
 801301a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801301e:	68ba      	ldr	r2, [r7, #8]
 8013020:	4618      	mov	r0, r3
 8013022:	f7f7 ffbd 	bl	800afa0 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3rowEi>
 8013026:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801302a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 801302e:	4611      	mov	r1, r2
 8013030:	4618      	mov	r0, r3
 8013032:	f7f7 ffc8 	bl	800afc6 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE9transposeEv>
 8013036:	68fb      	ldr	r3, [r7, #12]
 8013038:	6859      	ldr	r1, [r3, #4]
 801303a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801303e:	687a      	ldr	r2, [r7, #4]
 8013040:	4618      	mov	r0, r3
 8013042:	f7f9 f9f4 	bl	800c42e <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3colEi>
 8013046:	f107 0314 	add.w	r3, r7, #20
 801304a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 801304e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8013052:	4618      	mov	r0, r3
 8013054:	f7f9 f9fe 	bl	800c454 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IS5_Li3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSD_6traitsIT_E6ScalarEEEKS8_KSG_EERKNS0_ISG_EE>
 8013058:	f107 0314 	add.w	r3, r7, #20
 801305c:	4618      	mov	r0, r3
 801305e:	f7f9 fa27 	bl	800c4b0 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE3sumEv>
 8013062:	eef0 7a40 	vmov.f32	s15, s0
  }
 8013066:	eeb0 0a67 	vmov.f32	s0, s15
 801306a:	3790      	adds	r7, #144	; 0x90
 801306c:	46bd      	mov	sp, r7
 801306e:	bd80      	pop	{r7, pc}

08013070 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8013070:	b580      	push	{r7, lr}
 8013072:	b082      	sub	sp, #8
 8013074:	af00      	add	r7, sp, #0
 8013076:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8013078:	2200      	movs	r2, #0
 801307a:	2101      	movs	r1, #1
 801307c:	6878      	ldr	r0, [r7, #4]
 801307e:	f7ff fbc8 	bl	8012812 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8013082:	6878      	ldr	r0, [r7, #4]
 8013084:	f000 fb48 	bl	8013718 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSC_>
  }
 8013088:	bf00      	nop
 801308a:	3708      	adds	r7, #8
 801308c:	46bd      	mov	sp, r7
 801308e:	bd80      	pop	{r7, pc}

08013090 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 8013090:	b580      	push	{r7, lr}
 8013092:	b082      	sub	sp, #8
 8013094:	af00      	add	r7, sp, #0
 8013096:	6078      	str	r0, [r7, #4]
             : m_xpr.outerStride();
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	3308      	adds	r3, #8
             ? m_xpr.innerStride()
 801309c:	4618      	mov	r0, r3
 801309e:	f7fd fc40 	bl	8010922 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE11outerStrideEv>
 80130a2:	4603      	mov	r3, r0
    }
 80130a4:	4618      	mov	r0, r3
 80130a6:	3708      	adds	r7, #8
 80130a8:	46bd      	mov	sp, r7
 80130aa:	bd80      	pop	{r7, pc}

080130ac <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 80130ac:	b580      	push	{r7, lr}
 80130ae:	b082      	sub	sp, #8
 80130b0:	af00      	add	r7, sp, #0
 80130b2:	6078      	str	r0, [r7, #4]
                    : m_xpr.innerStride();
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	3308      	adds	r3, #8
                    ? m_xpr.outerStride()
 80130b8:	4618      	mov	r0, r3
 80130ba:	f7fd fc1e 	bl	80108fa <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE11innerStrideEv>
 80130be:	4603      	mov	r3, r0
    }
 80130c0:	4618      	mov	r0, r3
 80130c2:	3708      	adds	r7, #8
 80130c4:	46bd      	mov	sp, r7
 80130c6:	bd80      	pop	{r7, pc}

080130c8 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 80130c8:	b480      	push	{r7}
 80130ca:	b083      	sub	sp, #12
 80130cc:	af00      	add	r7, sp, #0
 80130ce:	6078      	str	r0, [r7, #4]
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	4618      	mov	r0, r3
 80130d4:	370c      	adds	r7, #12
 80130d6:	46bd      	mov	sp, r7
 80130d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130dc:	4770      	bx	lr

080130de <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE9innerSizeEv>:
    Index innerSize() const
 80130de:	b580      	push	{r7, lr}
 80130e0:	b082      	sub	sp, #8
 80130e2:	af00      	add	r7, sp, #0
 80130e4:	6078      	str	r0, [r7, #4]
      return IsVectorAtCompileTime ? this->size()
 80130e6:	6878      	ldr	r0, [r7, #4]
 80130e8:	f000 fb36 	bl	8013758 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4sizeEv>
 80130ec:	4603      	mov	r3, r0
    }
 80130ee:	4618      	mov	r0, r3
 80130f0:	3708      	adds	r7, #8
 80130f2:	46bd      	mov	sp, r7
 80130f4:	bd80      	pop	{r7, pc}

080130f6 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE4dataEv>:
    const Scalar* data() const { return derived().nestedExpression().data(); }
 80130f6:	b580      	push	{r7, lr}
 80130f8:	b082      	sub	sp, #8
 80130fa:	af00      	add	r7, sp, #0
 80130fc:	6078      	str	r0, [r7, #4]
 80130fe:	6878      	ldr	r0, [r7, #4]
 8013100:	f7f2 fe1e 	bl	8005d40 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 8013104:	4603      	mov	r3, r0
 8013106:	4618      	mov	r0, r3
 8013108:	f7fe fd63 	bl	8011bd2 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE16nestedExpressionEv>
 801310c:	4603      	mov	r3, r0
 801310e:	4618      	mov	r0, r3
 8013110:	f7ff fbd2 	bl	80128b8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4dataEv>
 8013114:	4603      	mov	r3, r0
 8013116:	4618      	mov	r0, r3
 8013118:	3708      	adds	r7, #8
 801311a:	46bd      	mov	sp, r7
 801311c:	bd80      	pop	{r7, pc}

0801311e <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE11innerStrideEv>:
    Index innerStride() const { return derived().nestedExpression().innerStride(); }
 801311e:	b580      	push	{r7, lr}
 8013120:	b082      	sub	sp, #8
 8013122:	af00      	add	r7, sp, #0
 8013124:	6078      	str	r0, [r7, #4]
 8013126:	6878      	ldr	r0, [r7, #4]
 8013128:	f7f2 fe0a 	bl	8005d40 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 801312c:	4603      	mov	r3, r0
 801312e:	4618      	mov	r0, r3
 8013130:	f7fe fd4f 	bl	8011bd2 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE16nestedExpressionEv>
 8013134:	4603      	mov	r3, r0
 8013136:	4618      	mov	r0, r3
 8013138:	f000 fb30 	bl	801379c <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11innerStrideEv>
 801313c:	4603      	mov	r3, r0
 801313e:	4618      	mov	r0, r3
 8013140:	3708      	adds	r7, #8
 8013142:	46bd      	mov	sp, r7
 8013144:	bd80      	pop	{r7, pc}

08013146 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE11outerStrideEv>:
    Index outerStride() const { return derived().nestedExpression().outerStride(); }
 8013146:	b580      	push	{r7, lr}
 8013148:	b082      	sub	sp, #8
 801314a:	af00      	add	r7, sp, #0
 801314c:	6078      	str	r0, [r7, #4]
 801314e:	6878      	ldr	r0, [r7, #4]
 8013150:	f7f2 fdf6 	bl	8005d40 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 8013154:	4603      	mov	r3, r0
 8013156:	4618      	mov	r0, r3
 8013158:	f7fe fd3b 	bl	8011bd2 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE16nestedExpressionEv>
 801315c:	4603      	mov	r3, r0
 801315e:	4618      	mov	r0, r3
 8013160:	f7ff fdd8 	bl	8012d14 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11outerStrideEv>
 8013164:	4603      	mov	r3, r0
 8013166:	4618      	mov	r0, r3
 8013168:	3708      	adds	r7, #8
 801316a:	46bd      	mov	sp, r7
 801316c:	bd80      	pop	{r7, pc}

0801316e <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1Ev>:
 801316e:	b580      	push	{r7, lr}
 8013170:	b082      	sub	sp, #8
 8013172:	af00      	add	r7, sp, #0
 8013174:	6078      	str	r0, [r7, #4]
 8013176:	6878      	ldr	r0, [r7, #4]
 8013178:	f000 fb1b 	bl	80137b2 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1Ev>
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	4618      	mov	r0, r3
 8013180:	3708      	adds	r7, #8
 8013182:	46bd      	mov	sp, r7
 8013184:	bd80      	pop	{r7, pc}
	...

08013188 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 8013188:	b580      	push	{r7, lr}
 801318a:	b084      	sub	sp, #16
 801318c:	af00      	add	r7, sp, #0
 801318e:	60f8      	str	r0, [r7, #12]
 8013190:	60b9      	str	r1, [r7, #8]
 8013192:	607a      	str	r2, [r7, #4]
 8013194:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 8013196:	68f8      	ldr	r0, [r7, #12]
 8013198:	f7ff ffe9 	bl	801316e <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1Ev>
 801319c:	68fb      	ldr	r3, [r7, #12]
 801319e:	68ba      	ldr	r2, [r7, #8]
 80131a0:	601a      	str	r2, [r3, #0]
 80131a2:	68fb      	ldr	r3, [r7, #12]
 80131a4:	3304      	adds	r3, #4
 80131a6:	6879      	ldr	r1, [r7, #4]
 80131a8:	4618      	mov	r0, r3
 80131aa:	f7f3 fce5 	bl	8006b78 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 80131ae:	68fb      	ldr	r3, [r7, #12]
 80131b0:	3305      	adds	r3, #5
 80131b2:	6839      	ldr	r1, [r7, #0]
 80131b4:	4618      	mov	r0, r3
 80131b6:	f7f3 fcf9 	bl	8006bac <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 80131ba:	68bb      	ldr	r3, [r7, #8]
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d011      	beq.n	80131e4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	db08      	blt.n	80131d8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	2b03      	cmp	r3, #3
 80131ca:	d105      	bne.n	80131d8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 80131cc:	683b      	ldr	r3, [r7, #0]
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	db02      	blt.n	80131d8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 80131d2:	683b      	ldr	r3, [r7, #0]
 80131d4:	2b01      	cmp	r3, #1
 80131d6:	d005      	beq.n	80131e4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 80131d8:	4b07      	ldr	r3, [pc, #28]	; (80131f8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x70>)
 80131da:	4a08      	ldr	r2, [pc, #32]	; (80131fc <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x74>)
 80131dc:	21b0      	movs	r1, #176	; 0xb0
 80131de:	4808      	ldr	r0, [pc, #32]	; (8013200 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x78>)
 80131e0:	f00a fe58 	bl	801de94 <__assert_func>
      checkSanity<Derived>();
 80131e4:	2100      	movs	r1, #0
 80131e6:	68f8      	ldr	r0, [r7, #12]
 80131e8:	f000 faee 	bl	80137c8 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE11checkSanityIS7_EEvNS_8internal9enable_ifIXeqsrNSA_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 80131ec:	68fb      	ldr	r3, [r7, #12]
 80131ee:	4618      	mov	r0, r3
 80131f0:	3710      	adds	r7, #16
 80131f2:	46bd      	mov	sp, r7
 80131f4:	bd80      	pop	{r7, pc}
 80131f6:	bf00      	nop
 80131f8:	08026420 	.word	0x08026420
 80131fc:	08028b1c 	.word	0x08028b1c
 8013200:	080265d0 	.word	0x080265d0

08013204 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EE4initEv>:
    void init()
 8013204:	b580      	push	{r7, lr}
 8013206:	b082      	sub	sp, #8
 8013208:	af00      	add	r7, sp, #0
 801320a:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	3308      	adds	r3, #8
 8013210:	4618      	mov	r0, r3
 8013212:	f7ff ff98 	bl	8013146 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE11outerStrideEv>
 8013216:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	615a      	str	r2, [r3, #20]
    }
 801321c:	bf00      	nop
 801321e:	3708      	adds	r7, #8
 8013220:	46bd      	mov	sp, r7
 8013222:	bd80      	pop	{r7, pc}

08013224 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffEC1ERKSJ_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 8013224:	b580      	push	{r7, lr}
 8013226:	b082      	sub	sp, #8
 8013228:	af00      	add	r7, sp, #0
 801322a:	6078      	str	r0, [r7, #4]
 801322c:	6039      	str	r1, [r7, #0]
 801322e:	6878      	ldr	r0, [r7, #4]
 8013230:	f000 fad5 	bl	80137de <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1Ev>
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	6839      	ldr	r1, [r7, #0]
 8013238:	4618      	mov	r0, r3
 801323a:	f000 fadb 	bl	80137f4 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE4DataC1ERKSJ_>
  }
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	4618      	mov	r0, r3
 8013242:	3708      	adds	r7, #8
 8013244:	46bd      	mov	sp, r7
 8013246:	bd80      	pop	{r7, pc}

08013248 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi0ELi1EE3runERKSN_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8013248:	b580      	push	{r7, lr}
 801324a:	b082      	sub	sp, #8
 801324c:	af00      	add	r7, sp, #0
 801324e:	6078      	str	r0, [r7, #4]
 8013250:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8013252:	2200      	movs	r2, #0
 8013254:	2100      	movs	r1, #0
 8013256:	6878      	ldr	r0, [r7, #4]
 8013258:	f000 faf4 	bl	8013844 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 801325c:	eef0 7a40 	vmov.f32	s15, s0
  }
 8013260:	eeb0 0a67 	vmov.f32	s0, s15
 8013264:	3708      	adds	r7, #8
 8013266:	46bd      	mov	sp, r7
 8013268:	bd80      	pop	{r7, pc}

0801326a <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi1ELi2EE3runERKSN_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 801326a:	b580      	push	{r7, lr}
 801326c:	b084      	sub	sp, #16
 801326e:	af00      	add	r7, sp, #0
 8013270:	6078      	str	r0, [r7, #4]
 8013272:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8013274:	6839      	ldr	r1, [r7, #0]
 8013276:	6878      	ldr	r0, [r7, #4]
 8013278:	f000 faf7 	bl	801386a <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi1ELi1EE3runERKSN_RKS3_>
 801327c:	eef0 7a40 	vmov.f32	s15, s0
 8013280:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 8013284:	6839      	ldr	r1, [r7, #0]
 8013286:	6878      	ldr	r0, [r7, #4]
 8013288:	f000 fb00 	bl	801388c <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi2ELi1EE3runERKSN_RKS3_>
 801328c:	eef0 7a40 	vmov.f32	s15, s0
 8013290:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8013294:	f107 020c 	add.w	r2, r7, #12
 8013298:	f107 0308 	add.w	r3, r7, #8
 801329c:	4619      	mov	r1, r3
 801329e:	6838      	ldr	r0, [r7, #0]
 80132a0:	f7f6 f86f 	bl	8009382 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 80132a4:	eef0 7a40 	vmov.f32	s15, s0
  }
 80132a8:	eeb0 0a67 	vmov.f32	s0, s15
 80132ac:	3710      	adds	r7, #16
 80132ae:	46bd      	mov	sp, r7
 80132b0:	bd80      	pop	{r7, pc}

080132b2 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>:
  evaluator() {}
 80132b2:	b580      	push	{r7, lr}
 80132b4:	b082      	sub	sp, #8
 80132b6:	af00      	add	r7, sp, #0
 80132b8:	6078      	str	r0, [r7, #4]
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	4618      	mov	r0, r3
 80132be:	f000 faf6 	bl	80138ae <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	4618      	mov	r0, r3
 80132c6:	3708      	adds	r7, #8
 80132c8:	46bd      	mov	sp, r7
 80132ca:	bd80      	pop	{r7, pc}

080132cc <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1IiiEERKT_RKT0_>:
    Matrix(const T0& x, const T1& y)
 80132cc:	b580      	push	{r7, lr}
 80132ce:	b084      	sub	sp, #16
 80132d0:	af00      	add	r7, sp, #0
 80132d2:	60f8      	str	r0, [r7, #12]
 80132d4:	60b9      	str	r1, [r7, #8]
 80132d6:	607a      	str	r2, [r7, #4]
    {
 80132d8:	68fb      	ldr	r3, [r7, #12]
 80132da:	4618      	mov	r0, r3
 80132dc:	f7f1 fde2 	bl	8004ea4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
      Base::_check_template_params();
 80132e0:	f7f1 fdf0 	bl	8004ec4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE22_check_template_paramsEv>
      Base::template _init2<T0,T1>(x, y);
 80132e4:	68f8      	ldr	r0, [r7, #12]
 80132e6:	68bb      	ldr	r3, [r7, #8]
 80132e8:	6819      	ldr	r1, [r3, #0]
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	681a      	ldr	r2, [r3, #0]
 80132ee:	2300      	movs	r3, #0
 80132f0:	f000 faef 	bl	80138d2 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init2IiiEEviiPNS_8internal9enable_ifILb1ET_E4typeE>
    }
 80132f4:	68fb      	ldr	r3, [r7, #12]
 80132f6:	4618      	mov	r0, r3
 80132f8:	3710      	adds	r7, #16
 80132fa:	46bd      	mov	sp, r7
 80132fc:	bd80      	pop	{r7, pc}

080132fe <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 80132fe:	b480      	push	{r7}
 8013300:	b083      	sub	sp, #12
 8013302:	af00      	add	r7, sp, #0
 8013304:	6078      	str	r0, [r7, #4]
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	4618      	mov	r0, r3
 801330a:	370c      	adds	r7, #12
 801330c:	46bd      	mov	sp, r7
 801330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013312:	4770      	bx	lr

08013314 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8013314:	b480      	push	{r7}
 8013316:	b083      	sub	sp, #12
 8013318:	af00      	add	r7, sp, #0
 801331a:	6078      	str	r0, [r7, #4]
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	3308      	adds	r3, #8
 8013320:	4618      	mov	r0, r3
 8013322:	370c      	adds	r7, #12
 8013324:	46bd      	mov	sp, r7
 8013326:	f85d 7b04 	ldr.w	r7, [sp], #4
 801332a:	4770      	bx	lr

0801332c <_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EENS_10DenseShapeES9_Li6EE6evalToINS3_IfLi1ELi1ELi0ELi1ELi1EEEEEvRT_RKS6_RKS8_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 801332c:	b590      	push	{r4, r7, lr}
 801332e:	b08b      	sub	sp, #44	; 0x2c
 8013330:	af00      	add	r7, sp, #0
 8013332:	60f8      	str	r0, [r7, #12]
 8013334:	60b9      	str	r1, [r7, #8]
 8013336:	607a      	str	r2, [r7, #4]
    dst.coeffRef(0,0) = (lhs.transpose().cwiseProduct(rhs)).sum();
 8013338:	f107 0320 	add.w	r3, r7, #32
 801333c:	68b9      	ldr	r1, [r7, #8]
 801333e:	4618      	mov	r0, r3
 8013340:	f000 fadb 	bl	80138fa <_ZNK5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE9transposeEv>
 8013344:	f107 0310 	add.w	r3, r7, #16
 8013348:	f107 0120 	add.w	r1, r7, #32
 801334c:	687a      	ldr	r2, [r7, #4]
 801334e:	4618      	mov	r0, r3
 8013350:	f000 fae4 	bl	801391c <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEE12cwiseProductINS1_IS4_EEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSD_6traitsIT_E6ScalarEEEKS8_KSG_EERKNS0_ISG_EE>
 8013354:	68fb      	ldr	r3, [r7, #12]
 8013356:	2200      	movs	r2, #0
 8013358:	2100      	movs	r1, #0
 801335a:	4618      	mov	r0, r3
 801335c:	f7f3 fb99 	bl	8006a92 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8coeffRefEii>
 8013360:	4604      	mov	r4, r0
 8013362:	f107 0310 	add.w	r3, r7, #16
 8013366:	4618      	mov	r0, r3
 8013368:	f000 fb06 	bl	8013978 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE3sumEv>
 801336c:	eef0 7a40 	vmov.f32	s15, s0
 8013370:	edc4 7a00 	vstr	s15, [r4]
  }
 8013374:	bf00      	nop
 8013376:	372c      	adds	r7, #44	; 0x2c
 8013378:	46bd      	mov	sp, r7
 801337a:	bd90      	pop	{r4, r7, pc}

0801337c <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERKS6_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 801337c:	b580      	push	{r7, lr}
 801337e:	b082      	sub	sp, #8
 8013380:	af00      	add	r7, sp, #0
 8013382:	6078      	str	r0, [r7, #4]
 8013384:	6039      	str	r1, [r7, #0]
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	6839      	ldr	r1, [r7, #0]
 801338a:	4618      	mov	r0, r3
 801338c:	f000 fb0f 	bl	80139ae <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfEC1ERKS6_>
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	4618      	mov	r0, r3
 8013394:	3708      	adds	r7, #8
 8013396:	46bd      	mov	sp, r7
 8013398:	bd80      	pop	{r7, pc}

0801339a <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 801339a:	b480      	push	{r7}
 801339c:	b083      	sub	sp, #12
 801339e:	af00      	add	r7, sp, #0
 80133a0:	6078      	str	r0, [r7, #4]
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	4618      	mov	r0, r3
 80133a6:	370c      	adds	r7, #12
 80133a8:	46bd      	mov	sp, r7
 80133aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133ae:	4770      	bx	lr

080133b0 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 80133b0:	b580      	push	{r7, lr}
 80133b2:	b084      	sub	sp, #16
 80133b4:	af00      	add	r7, sp, #0
 80133b6:	60f8      	str	r0, [r7, #12]
 80133b8:	60b9      	str	r1, [r7, #8]
 80133ba:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 80133bc:	68fb      	ldr	r3, [r7, #12]
 80133be:	68ba      	ldr	r2, [r7, #8]
 80133c0:	6879      	ldr	r1, [r7, #4]
 80133c2:	4618      	mov	r0, r3
 80133c4:	f000 fb09 	bl	80139da <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE5coeffEii>
 80133c8:	4603      	mov	r3, r0
 80133ca:	681b      	ldr	r3, [r3, #0]
 80133cc:	ee07 3a90 	vmov	s15, r3
  }
 80133d0:	eeb0 0a67 	vmov.f32	s0, s15
 80133d4:	3710      	adds	r7, #16
 80133d6:	46bd      	mov	sp, r7
 80133d8:	bd80      	pop	{r7, pc}
	...

080133dc <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 80133dc:	b580      	push	{r7, lr}
 80133de:	b084      	sub	sp, #16
 80133e0:	af00      	add	r7, sp, #0
 80133e2:	60f8      	str	r0, [r7, #12]
 80133e4:	60b9      	str	r1, [r7, #8]
 80133e6:	607a      	str	r2, [r7, #4]
 80133e8:	68fb      	ldr	r3, [r7, #12]
 80133ea:	687a      	ldr	r2, [r7, #4]
 80133ec:	68b9      	ldr	r1, [r7, #8]
 80133ee:	4618      	mov	r0, r3
 80133f0:	f000 fb0b 	bl	8013a0a <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	db07      	blt.n	801340a <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEC1ERS3_i+0x2e>
 80133fa:	68bb      	ldr	r3, [r7, #8]
 80133fc:	4618      	mov	r0, r3
 80133fe:	f7f1 ffe7 	bl	80053d0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8013402:	4602      	mov	r2, r0
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	4293      	cmp	r3, r2
 8013408:	db05      	blt.n	8013416 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEC1ERS3_i+0x3a>
 801340a:	4b05      	ldr	r3, [pc, #20]	; (8013420 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEC1ERS3_i+0x44>)
 801340c:	4a05      	ldr	r2, [pc, #20]	; (8013424 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEC1ERS3_i+0x48>)
 801340e:	2178      	movs	r1, #120	; 0x78
 8013410:	4805      	ldr	r0, [pc, #20]	; (8013428 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEC1ERS3_i+0x4c>)
 8013412:	f00a fd3f 	bl	801de94 <__assert_func>
    }
 8013416:	68fb      	ldr	r3, [r7, #12]
 8013418:	4618      	mov	r0, r3
 801341a:	3710      	adds	r7, #16
 801341c:	46bd      	mov	sp, r7
 801341e:	bd80      	pop	{r7, pc}
 8013420:	08024880 	.word	0x08024880
 8013424:	08028c30 	.word	0x08028c30
 8013428:	08024a04 	.word	0x08024a04

0801342c <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 801342c:	b480      	push	{r7}
 801342e:	b083      	sub	sp, #12
 8013430:	af00      	add	r7, sp, #0
 8013432:	6078      	str	r0, [r7, #4]
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	4618      	mov	r0, r3
 8013438:	370c      	adds	r7, #12
 801343a:	46bd      	mov	sp, r7
 801343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013440:	4770      	bx	lr

08013442 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1Ev>:
 8013442:	b580      	push	{r7, lr}
 8013444:	b082      	sub	sp, #8
 8013446:	af00      	add	r7, sp, #0
 8013448:	6078      	str	r0, [r7, #4]
 801344a:	6878      	ldr	r0, [r7, #4]
 801344c:	f000 faee 	bl	8013a2c <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1Ev>
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	4618      	mov	r0, r3
 8013454:	3708      	adds	r7, #8
 8013456:	46bd      	mov	sp, r7
 8013458:	bd80      	pop	{r7, pc}

0801345a <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 801345a:	b580      	push	{r7, lr}
 801345c:	b082      	sub	sp, #8
 801345e:	af00      	add	r7, sp, #0
 8013460:	6078      	str	r0, [r7, #4]
 8013462:	6878      	ldr	r0, [r7, #4]
 8013464:	f7ff ffed 	bl	8013442 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1Ev>
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	4618      	mov	r0, r3
 801346c:	3708      	adds	r7, #8
 801346e:	46bd      	mov	sp, r7
 8013470:	bd80      	pop	{r7, pc}

08013472 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 8013472:	b580      	push	{r7, lr}
 8013474:	b082      	sub	sp, #8
 8013476:	af00      	add	r7, sp, #0
 8013478:	6078      	str	r0, [r7, #4]
 801347a:	f7f3 fbc4 	bl	8006c06 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 801347e:	4603      	mov	r3, r0
 8013480:	4618      	mov	r0, r3
 8013482:	3708      	adds	r7, #8
 8013484:	46bd      	mov	sp, r7
 8013486:	bd80      	pop	{r7, pc}

08013488 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 8013488:	b580      	push	{r7, lr}
 801348a:	b082      	sub	sp, #8
 801348c:	af00      	add	r7, sp, #0
 801348e:	6078      	str	r0, [r7, #4]
 8013490:	f7f3 fbb9 	bl	8006c06 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 8013494:	4603      	mov	r3, r0
 8013496:	4618      	mov	r0, r3
 8013498:	3708      	adds	r7, #8
 801349a:	46bd      	mov	sp, r7
 801349c:	bd80      	pop	{r7, pc}
	...

080134a0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERSC_RSG_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 80134a0:	b5b0      	push	{r4, r5, r7, lr}
 80134a2:	b084      	sub	sp, #16
 80134a4:	af00      	add	r7, sp, #0
 80134a6:	60f8      	str	r0, [r7, #12]
 80134a8:	60b9      	str	r1, [r7, #8]
 80134aa:	607a      	str	r2, [r7, #4]
 80134ac:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 80134ae:	68f8      	ldr	r0, [r7, #12]
 80134b0:	f7ff ffd3 	bl	801345a <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS_5DenseEEC1Ev>
 80134b4:	68fa      	ldr	r2, [r7, #12]
 80134b6:	68bb      	ldr	r3, [r7, #8]
 80134b8:	4614      	mov	r4, r2
 80134ba:	461d      	mov	r5, r3
 80134bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80134be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80134c0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80134c4:	e884 0003 	stmia.w	r4, {r0, r1}
 80134c8:	68fb      	ldr	r3, [r7, #12]
 80134ca:	f103 0218 	add.w	r2, r3, #24
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	4614      	mov	r4, r2
 80134d2:	461d      	mov	r5, r3
 80134d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80134d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80134d8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80134dc:	e884 0003 	stmia.w	r4, {r0, r1}
 80134e0:	68fb      	ldr	r3, [r7, #12]
 80134e2:	3330      	adds	r3, #48	; 0x30
 80134e4:	6839      	ldr	r1, [r7, #0]
 80134e6:	4618      	mov	r0, r3
 80134e8:	f7f2 f8e6 	bl	80056b8 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 80134ec:	68b8      	ldr	r0, [r7, #8]
 80134ee:	f7f8 fd69 	bl	800bfc4 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4rowsEv>
 80134f2:	4604      	mov	r4, r0
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	4618      	mov	r0, r3
 80134f8:	f7ff ffbb 	bl	8013472 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE4rowsEv>
 80134fc:	4603      	mov	r3, r0
 80134fe:	429c      	cmp	r4, r3
 8013500:	d10a      	bne.n	8013518 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x78>
 8013502:	68b8      	ldr	r0, [r7, #8]
 8013504:	f7f8 fd6b 	bl	800bfde <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4colsEv>
 8013508:	4604      	mov	r4, r0
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	4618      	mov	r0, r3
 801350e:	f7ff ffbb 	bl	8013488 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE4colsEv>
 8013512:	4603      	mov	r3, r0
 8013514:	429c      	cmp	r4, r3
 8013516:	d005      	beq.n	8013524 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x84>
 8013518:	4b05      	ldr	r3, [pc, #20]	; (8013530 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x90>)
 801351a:	4a06      	ldr	r2, [pc, #24]	; (8013534 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x94>)
 801351c:	2174      	movs	r1, #116	; 0x74
 801351e:	4806      	ldr	r0, [pc, #24]	; (8013538 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x98>)
 8013520:	f00a fcb8 	bl	801de94 <__assert_func>
    }
 8013524:	68fb      	ldr	r3, [r7, #12]
 8013526:	4618      	mov	r0, r3
 8013528:	3710      	adds	r7, #16
 801352a:	46bd      	mov	sp, r7
 801352c:	bdb0      	pop	{r4, r5, r7, pc}
 801352e:	bf00      	nop
 8013530:	0801fcfc 	.word	0x0801fcfc
 8013534:	08028d0c 	.word	0x08028d0c
 8013538:	0801ff60 	.word	0x0801ff60

0801353c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 801353c:	b580      	push	{r7, lr}
 801353e:	b082      	sub	sp, #8
 8013540:	af00      	add	r7, sp, #0
 8013542:	6078      	str	r0, [r7, #4]
 8013544:	6878      	ldr	r0, [r7, #4]
 8013546:	f000 f809 	bl	801355c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE7derivedEv>
 801354a:	4603      	mov	r3, r0
 801354c:	4618      	mov	r0, r3
 801354e:	f000 fa78 	bl	8013a42 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE4colsEv>
 8013552:	4603      	mov	r3, r0
 8013554:	4618      	mov	r0, r3
 8013556:	3708      	adds	r7, #8
 8013558:	46bd      	mov	sp, r7
 801355a:	bd80      	pop	{r7, pc}

0801355c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 801355c:	b480      	push	{r7}
 801355e:	b083      	sub	sp, #12
 8013560:	af00      	add	r7, sp, #0
 8013562:	6078      	str	r0, [r7, #4]
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	4618      	mov	r0, r3
 8013568:	370c      	adds	r7, #12
 801356a:	46bd      	mov	sp, r7
 801356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013570:	4770      	bx	lr

08013572 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 8013572:	b580      	push	{r7, lr}
 8013574:	b082      	sub	sp, #8
 8013576:	af00      	add	r7, sp, #0
 8013578:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	4618      	mov	r0, r3
 801357e:	f7f8 fd21 	bl	800bfc4 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4rowsEv>
 8013582:	4603      	mov	r3, r0
    }
 8013584:	4618      	mov	r0, r3
 8013586:	3708      	adds	r7, #8
 8013588:	46bd      	mov	sp, r7
 801358a:	bd80      	pop	{r7, pc}

0801358c <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 801358c:	b580      	push	{r7, lr}
 801358e:	b082      	sub	sp, #8
 8013590:	af00      	add	r7, sp, #0
 8013592:	6078      	str	r0, [r7, #4]
 8013594:	6878      	ldr	r0, [r7, #4]
 8013596:	f000 fa7b 	bl	8013a90 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEED1Ev>
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	4618      	mov	r0, r3
 801359e:	3708      	adds	r7, #8
 80135a0:	46bd      	mov	sp, r7
 80135a2:	bd80      	pop	{r7, pc}

080135a4 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 80135a4:	b580      	push	{r7, lr}
 80135a6:	b082      	sub	sp, #8
 80135a8:	af00      	add	r7, sp, #0
 80135aa:	6078      	str	r0, [r7, #4]
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	4618      	mov	r0, r3
 80135b0:	f7ff ffec 	bl	801358c <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEED1Ev>
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	4618      	mov	r0, r3
 80135b8:	3708      	adds	r7, #8
 80135ba:	46bd      	mov	sp, r7
 80135bc:	bd80      	pop	{r7, pc}

080135be <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 80135be:	b580      	push	{r7, lr}
 80135c0:	b082      	sub	sp, #8
 80135c2:	af00      	add	r7, sp, #0
 80135c4:	6078      	str	r0, [r7, #4]
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	4618      	mov	r0, r3
 80135ca:	f7ff ffeb 	bl	80135a4 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EED1Ev>
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	4618      	mov	r0, r3
 80135d2:	3708      	adds	r7, #8
 80135d4:	46bd      	mov	sp, r7
 80135d6:	bd80      	pop	{r7, pc}

080135d8 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<const T>
 80135d8:	b580      	push	{r7, lr}
 80135da:	b082      	sub	sp, #8
 80135dc:	af00      	add	r7, sp, #0
 80135de:	6078      	str	r0, [r7, #4]
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	4618      	mov	r0, r3
 80135e4:	f7ff ffeb 	bl	80135be <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEED1Ev>
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	4618      	mov	r0, r3
 80135ec:	3708      	adds	r7, #8
 80135ee:	46bd      	mov	sp, r7
 80135f0:	bd80      	pop	{r7, pc}

080135f2 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>:
  struct Data
 80135f2:	b580      	push	{r7, lr}
 80135f4:	b082      	sub	sp, #8
 80135f6:	af00      	add	r7, sp, #0
 80135f8:	6078      	str	r0, [r7, #4]
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	330c      	adds	r3, #12
 80135fe:	4618      	mov	r0, r3
 8013600:	f7ff ffea 	bl	80135d8 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEED1Ev>
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	3304      	adds	r3, #4
 8013608:	4618      	mov	r0, r3
 801360a:	f7f8 fdcf 	bl	800c1ac <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEED1Ev>
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	4618      	mov	r0, r3
 8013612:	3708      	adds	r7, #8
 8013614:	46bd      	mov	sp, r7
 8013616:	bd80      	pop	{r7, pc}

08013618 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 8013618:	b580      	push	{r7, lr}
 801361a:	b082      	sub	sp, #8
 801361c:	af00      	add	r7, sp, #0
 801361e:	6078      	str	r0, [r7, #4]
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	4618      	mov	r0, r3
 8013624:	f7ff ffe5 	bl	80135f2 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>
 8013628:	6878      	ldr	r0, [r7, #4]
 801362a:	f000 fa26 	bl	8013a7a <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEED1Ev>
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	4618      	mov	r0, r3
 8013632:	3708      	adds	r7, #8
 8013634:	46bd      	mov	sp, r7
 8013636:	bd80      	pop	{r7, pc}

08013638 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 8013638:	b580      	push	{r7, lr}
 801363a:	b082      	sub	sp, #8
 801363c:	af00      	add	r7, sp, #0
 801363e:	6078      	str	r0, [r7, #4]
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	4618      	mov	r0, r3
 8013644:	f7ff ffe8 	bl	8013618 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffED1Ev>
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	4618      	mov	r0, r3
 801364c:	3708      	adds	r7, #8
 801364e:	46bd      	mov	sp, r7
 8013650:	bd80      	pop	{r7, pc}

08013652 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 8013652:	b580      	push	{r7, lr}
 8013654:	b082      	sub	sp, #8
 8013656:	af00      	add	r7, sp, #0
 8013658:	6078      	str	r0, [r7, #4]
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	4618      	mov	r0, r3
 801365e:	f7ff ffeb 	bl	8013638 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEED1Ev>
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	4618      	mov	r0, r3
 8013666:	3708      	adds	r7, #8
 8013668:	46bd      	mov	sp, r7
 801366a:	bd80      	pop	{r7, pc}

0801366c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 801366c:	b580      	push	{r7, lr}
 801366e:	ed2d 8b02 	vpush	{d8}
 8013672:	b088      	sub	sp, #32
 8013674:	af00      	add	r7, sp, #0
 8013676:	6078      	str	r0, [r7, #4]
 8013678:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 801367a:	6878      	ldr	r0, [r7, #4]
 801367c:	f7ff fc8a 	bl	8012f94 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE4rowsEv>
 8013680:	4603      	mov	r3, r0
 8013682:	2b00      	cmp	r3, #0
 8013684:	dd05      	ble.n	8013692 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 8013686:	6878      	ldr	r0, [r7, #4]
 8013688:	f7ff ff58 	bl	801353c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE4colsEv>
 801368c:	4603      	mov	r3, r0
 801368e:	2b00      	cmp	r3, #0
 8013690:	dc06      	bgt.n	80136a0 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 8013692:	4b16      	ldr	r3, [pc, #88]	; (80136ec <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 8013694:	4a16      	ldr	r2, [pc, #88]	; (80136f0 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 8013696:	f240 119b 	movw	r1, #411	; 0x19b
 801369a:	4816      	ldr	r0, [pc, #88]	; (80136f4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 801369c:	f00a fbfa 	bl	801de94 <__assert_func>
 80136a0:	bf00      	nop
  ThisEvaluator thisEval(derived());
 80136a2:	6878      	ldr	r0, [r7, #4]
 80136a4:	f7ff ff5a 	bl	801355c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE7derivedEv>
 80136a8:	4602      	mov	r2, r0
 80136aa:	f107 030c 	add.w	r3, r7, #12
 80136ae:	4611      	mov	r1, r2
 80136b0:	4618      	mov	r0, r3
 80136b2:	f000 f9d3 	bl	8013a5c <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1ERKSI_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 80136b6:	6878      	ldr	r0, [r7, #4]
 80136b8:	f7ff ff50 	bl	801355c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE7derivedEv>
 80136bc:	4602      	mov	r2, r0
 80136be:	f107 030c 	add.w	r3, r7, #12
 80136c2:	6839      	ldr	r1, [r7, #0]
 80136c4:	4618      	mov	r0, r3
 80136c6:	f000 f9ee 	bl	8013aa6 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>
 80136ca:	eeb0 8a40 	vmov.f32	s16, s0
 80136ce:	bf00      	nop
  ThisEvaluator thisEval(derived());
 80136d0:	f107 030c 	add.w	r3, r7, #12
 80136d4:	4618      	mov	r0, r3
 80136d6:	f7ff ffbc 	bl	8013652 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 80136da:	eef0 7a48 	vmov.f32	s15, s16
}
 80136de:	eeb0 0a67 	vmov.f32	s0, s15
 80136e2:	3720      	adds	r7, #32
 80136e4:	46bd      	mov	sp, r7
 80136e6:	ecbd 8b02 	vpop	{d8}
 80136ea:	bd80      	pop	{r7, pc}
 80136ec:	08024d7c 	.word	0x08024d7c
 80136f0:	08028f58 	.word	0x08028f58
 80136f4:	08024f88 	.word	0x08024f88

080136f8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi5ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80136f8:	b580      	push	{r7, lr}
 80136fa:	b082      	sub	sp, #8
 80136fc:	af00      	add	r7, sp, #0
 80136fe:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8013700:	2202      	movs	r2, #2
 8013702:	2101      	movs	r1, #1
 8013704:	6878      	ldr	r0, [r7, #4]
 8013706:	f7fe fbdb 	bl	8011ec0 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 801370a:	6878      	ldr	r0, [r7, #4]
 801370c:	f000 f9dc 	bl	8013ac8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi6ELi9EE3runERSE_>
  }
 8013710:	bf00      	nop
 8013712:	3708      	adds	r7, #8
 8013714:	46bd      	mov	sp, r7
 8013716:	bd80      	pop	{r7, pc}

08013718 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8013718:	b580      	push	{r7, lr}
 801371a:	b082      	sub	sp, #8
 801371c:	af00      	add	r7, sp, #0
 801371e:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8013720:	2201      	movs	r2, #1
 8013722:	2101      	movs	r1, #1
 8013724:	6878      	ldr	r0, [r7, #4]
 8013726:	f7ff f874 	bl	8012812 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 801372a:	6878      	ldr	r0, [r7, #4]
 801372c:	f000 f9dc 	bl	8013ae8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSC_>
  }
 8013730:	bf00      	nop
 8013732:	3708      	adds	r7, #8
 8013734:	46bd      	mov	sp, r7
 8013736:	bd80      	pop	{r7, pc}

08013738 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 8013738:	b580      	push	{r7, lr}
 801373a:	b082      	sub	sp, #8
 801373c:	af00      	add	r7, sp, #0
 801373e:	6078      	str	r0, [r7, #4]
 8013740:	6878      	ldr	r0, [r7, #4]
 8013742:	f7f2 fb69 	bl	8005e18 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 8013746:	4603      	mov	r3, r0
 8013748:	4618      	mov	r0, r3
 801374a:	f7f1 fe4c 	bl	80053e6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 801374e:	4603      	mov	r3, r0
 8013750:	4618      	mov	r0, r3
 8013752:	3708      	adds	r7, #8
 8013754:	46bd      	mov	sp, r7
 8013756:	bd80      	pop	{r7, pc}

08013758 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4sizeEv>:
  inline Index size() const EIGEN_NOEXCEPT { return rows() * cols(); }
 8013758:	b590      	push	{r4, r7, lr}
 801375a:	b083      	sub	sp, #12
 801375c:	af00      	add	r7, sp, #0
 801375e:	6078      	str	r0, [r7, #4]
 8013760:	6878      	ldr	r0, [r7, #4]
 8013762:	f7ff ffe9 	bl	8013738 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8013766:	4604      	mov	r4, r0
 8013768:	6878      	ldr	r0, [r7, #4]
 801376a:	f000 f807 	bl	801377c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 801376e:	4603      	mov	r3, r0
 8013770:	fb04 f303 	mul.w	r3, r4, r3
 8013774:	4618      	mov	r0, r3
 8013776:	370c      	adds	r7, #12
 8013778:	46bd      	mov	sp, r7
 801377a:	bd90      	pop	{r4, r7, pc}

0801377c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 801377c:	b580      	push	{r7, lr}
 801377e:	b082      	sub	sp, #8
 8013780:	af00      	add	r7, sp, #0
 8013782:	6078      	str	r0, [r7, #4]
 8013784:	6878      	ldr	r0, [r7, #4]
 8013786:	f7f2 fb47 	bl	8005e18 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 801378a:	4603      	mov	r3, r0
 801378c:	4618      	mov	r0, r3
 801378e:	f7f1 fe1f 	bl	80053d0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8013792:	4603      	mov	r3, r0
 8013794:	4618      	mov	r0, r3
 8013796:	3708      	adds	r7, #8
 8013798:	46bd      	mov	sp, r7
 801379a:	bd80      	pop	{r7, pc}

0801379c <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11innerStrideEv>:
    inline Index innerStride() const EIGEN_NOEXCEPT { return 1; }
 801379c:	b480      	push	{r7}
 801379e:	b083      	sub	sp, #12
 80137a0:	af00      	add	r7, sp, #0
 80137a2:	6078      	str	r0, [r7, #4]
 80137a4:	2301      	movs	r3, #1
 80137a6:	4618      	mov	r0, r3
 80137a8:	370c      	adds	r7, #12
 80137aa:	46bd      	mov	sp, r7
 80137ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137b0:	4770      	bx	lr

080137b2 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80137b2:	b480      	push	{r7}
 80137b4:	b083      	sub	sp, #12
 80137b6:	af00      	add	r7, sp, #0
 80137b8:	6078      	str	r0, [r7, #4]
    }
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	4618      	mov	r0, r3
 80137be:	370c      	adds	r7, #12
 80137c0:	46bd      	mov	sp, r7
 80137c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137c6:	4770      	bx	lr

080137c8 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE11checkSanityIS7_EEvNS_8internal9enable_ifIXeqsrNSA_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 80137c8:	b480      	push	{r7}
 80137ca:	b083      	sub	sp, #12
 80137cc:	af00      	add	r7, sp, #0
 80137ce:	6078      	str	r0, [r7, #4]
 80137d0:	6039      	str	r1, [r7, #0]
    {}
 80137d2:	bf00      	nop
 80137d4:	370c      	adds	r7, #12
 80137d6:	46bd      	mov	sp, r7
 80137d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137dc:	4770      	bx	lr

080137de <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 80137de:	b480      	push	{r7}
 80137e0:	b083      	sub	sp, #12
 80137e2:	af00      	add	r7, sp, #0
 80137e4:	6078      	str	r0, [r7, #4]
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	4618      	mov	r0, r3
 80137ea:	370c      	adds	r7, #12
 80137ec:	46bd      	mov	sp, r7
 80137ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137f2:	4770      	bx	lr

080137f4 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE4DataC1ERKSJ_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 80137f4:	b590      	push	{r4, r7, lr}
 80137f6:	b083      	sub	sp, #12
 80137f8:	af00      	add	r7, sp, #0
 80137fa:	6078      	str	r0, [r7, #4]
 80137fc:	6039      	str	r1, [r7, #0]
 80137fe:	687c      	ldr	r4, [r7, #4]
 8013800:	6838      	ldr	r0, [r7, #0]
 8013802:	f000 f981 	bl	8013b08 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE7functorEv>
 8013806:	4603      	mov	r3, r0
 8013808:	4619      	mov	r1, r3
 801380a:	4620      	mov	r0, r4
 801380c:	f7f1 ff54 	bl	80056b8 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	1d1c      	adds	r4, r3, #4
 8013814:	6838      	ldr	r0, [r7, #0]
 8013816:	f000 f983 	bl	8013b20 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE3lhsEv>
 801381a:	4603      	mov	r3, r0
 801381c:	4619      	mov	r1, r3
 801381e:	4620      	mov	r0, r4
 8013820:	f7fb fa91 	bl	800ed46 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERSA_>
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	f103 040c 	add.w	r4, r3, #12
 801382a:	6838      	ldr	r0, [r7, #0]
 801382c:	f000 f983 	bl	8013b36 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE3rhsEv>
 8013830:	4603      	mov	r3, r0
 8013832:	4619      	mov	r1, r3
 8013834:	4620      	mov	r0, r4
 8013836:	f000 f98a 	bl	8013b4e <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERS9_>
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	4618      	mov	r0, r3
 801383e:	370c      	adds	r7, #12
 8013840:	46bd      	mov	sp, r7
 8013842:	bd90      	pop	{r4, r7, pc}

08013844 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 8013844:	b580      	push	{r7, lr}
 8013846:	b084      	sub	sp, #16
 8013848:	af00      	add	r7, sp, #0
 801384a:	60f8      	str	r0, [r7, #12]
 801384c:	60b9      	str	r1, [r7, #8]
 801384e:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 8013850:	68fb      	ldr	r3, [r7, #12]
 8013852:	68ba      	ldr	r2, [r7, #8]
 8013854:	6879      	ldr	r1, [r7, #4]
 8013856:	4618      	mov	r0, r3
 8013858:	f000 f988 	bl	8013b6c <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE5coeffEii>
 801385c:	eef0 7a40 	vmov.f32	s15, s0
 8013860:	eeb0 0a67 	vmov.f32	s0, s15
 8013864:	3710      	adds	r7, #16
 8013866:	46bd      	mov	sp, r7
 8013868:	bd80      	pop	{r7, pc}

0801386a <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi1ELi1EE3runERKSN_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 801386a:	b580      	push	{r7, lr}
 801386c:	b082      	sub	sp, #8
 801386e:	af00      	add	r7, sp, #0
 8013870:	6078      	str	r0, [r7, #4]
 8013872:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8013874:	2201      	movs	r2, #1
 8013876:	2100      	movs	r1, #0
 8013878:	6878      	ldr	r0, [r7, #4]
 801387a:	f7ff ffe3 	bl	8013844 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 801387e:	eef0 7a40 	vmov.f32	s15, s0
  }
 8013882:	eeb0 0a67 	vmov.f32	s0, s15
 8013886:	3708      	adds	r7, #8
 8013888:	46bd      	mov	sp, r7
 801388a:	bd80      	pop	{r7, pc}

0801388c <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi2ELi1EE3runERKSN_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 801388c:	b580      	push	{r7, lr}
 801388e:	b082      	sub	sp, #8
 8013890:	af00      	add	r7, sp, #0
 8013892:	6078      	str	r0, [r7, #4]
 8013894:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8013896:	2202      	movs	r2, #2
 8013898:	2100      	movs	r1, #0
 801389a:	6878      	ldr	r0, [r7, #4]
 801389c:	f7ff ffd2 	bl	8013844 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 80138a0:	eef0 7a40 	vmov.f32	s15, s0
  }
 80138a4:	eeb0 0a67 	vmov.f32	s0, s15
 80138a8:	3708      	adds	r7, #8
 80138aa:	46bd      	mov	sp, r7
 80138ac:	bd80      	pop	{r7, pc}

080138ae <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>:
  evaluator()
 80138ae:	b580      	push	{r7, lr}
 80138b0:	b082      	sub	sp, #8
 80138b2:	af00      	add	r7, sp, #0
 80138b4:	6078      	str	r0, [r7, #4]
    : m_d(0,OuterStrideAtCompileTime)
 80138b6:	6878      	ldr	r0, [r7, #4]
 80138b8:	f7f7 fd37 	bl	800b32a <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	2200      	movs	r2, #0
 80138c0:	2100      	movs	r1, #0
 80138c2:	4618      	mov	r0, r3
 80138c4:	f7f3 fcbd 	bl	8007242 <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EEC1EPKfi>
  }
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	4618      	mov	r0, r3
 80138cc:	3708      	adds	r7, #8
 80138ce:	46bd      	mov	sp, r7
 80138d0:	bd80      	pop	{r7, pc}

080138d2 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init2IiiEEviiPNS_8internal9enable_ifILb1ET_E4typeE>:
    EIGEN_STRONG_INLINE void _init2(Index rows, Index cols, typename internal::enable_if<Base::SizeAtCompileTime!=2,T0>::type* = 0)
 80138d2:	b580      	push	{r7, lr}
 80138d4:	b086      	sub	sp, #24
 80138d6:	af00      	add	r7, sp, #0
 80138d8:	60f8      	str	r0, [r7, #12]
 80138da:	60b9      	str	r1, [r7, #8]
 80138dc:	607a      	str	r2, [r7, #4]
 80138de:	603b      	str	r3, [r7, #0]
      const bool t0_is_integer_alike = internal::is_valid_index_type<T0>::value;
 80138e0:	2301      	movs	r3, #1
 80138e2:	75fb      	strb	r3, [r7, #23]
      const bool t1_is_integer_alike = internal::is_valid_index_type<T1>::value;
 80138e4:	2301      	movs	r3, #1
 80138e6:	75bb      	strb	r3, [r7, #22]
      resize(rows,cols);
 80138e8:	687a      	ldr	r2, [r7, #4]
 80138ea:	68b9      	ldr	r1, [r7, #8]
 80138ec:	68f8      	ldr	r0, [r7, #12]
 80138ee:	f7f9 fef9 	bl	800d6e4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii>
    }
 80138f2:	bf00      	nop
 80138f4:	3718      	adds	r7, #24
 80138f6:	46bd      	mov	sp, r7
 80138f8:	bd80      	pop	{r7, pc}

080138fa <_ZNK5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE9transposeEv>:
DenseBase<Derived>::transpose() const
 80138fa:	b580      	push	{r7, lr}
 80138fc:	b082      	sub	sp, #8
 80138fe:	af00      	add	r7, sp, #0
 8013900:	6078      	str	r0, [r7, #4]
 8013902:	6039      	str	r1, [r7, #0]
  return ConstTransposeReturnType(derived());
 8013904:	6838      	ldr	r0, [r7, #0]
 8013906:	f7f2 fae5 	bl	8005ed4 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE7derivedEv>
 801390a:	4603      	mov	r3, r0
 801390c:	4619      	mov	r1, r3
 801390e:	6878      	ldr	r0, [r7, #4]
 8013910:	f000 f974 	bl	8013bfc <_ZN5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1ERS6_>
}
 8013914:	6878      	ldr	r0, [r7, #4]
 8013916:	3708      	adds	r7, #8
 8013918:	46bd      	mov	sp, r7
 801391a:	bd80      	pop	{r7, pc}

0801391c <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEE12cwiseProductINS1_IS4_EEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSD_6traitsIT_E6ScalarEEEKS8_KSG_EERKNS0_ISG_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 801391c:	b5b0      	push	{r4, r5, r7, lr}
 801391e:	b086      	sub	sp, #24
 8013920:	af00      	add	r7, sp, #0
 8013922:	60f8      	str	r0, [r7, #12]
 8013924:	60b9      	str	r1, [r7, #8]
 8013926:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 8013928:	68b8      	ldr	r0, [r7, #8]
 801392a:	f000 f97a 	bl	8013c22 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEE7derivedEv>
 801392e:	4604      	mov	r4, r0
 8013930:	6878      	ldr	r0, [r7, #4]
 8013932:	f7f2 fa05 	bl	8005d40 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 8013936:	4605      	mov	r5, r0
 8013938:	f107 0314 	add.w	r3, r7, #20
 801393c:	4618      	mov	r0, r3
 801393e:	f7f1 fe31 	bl	80055a4 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 8013942:	f107 0314 	add.w	r3, r7, #20
 8013946:	462a      	mov	r2, r5
 8013948:	4621      	mov	r1, r4
 801394a:	68f8      	ldr	r0, [r7, #12]
 801394c:	f000 f9a6 	bl	8013c9c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEEC1ERSC_RSE_RKS3_>
}
 8013950:	68f8      	ldr	r0, [r7, #12]
 8013952:	3718      	adds	r7, #24
 8013954:	46bd      	mov	sp, r7
 8013956:	bdb0      	pop	{r4, r5, r7, pc}

08013958 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 8013958:	b580      	push	{r7, lr}
 801395a:	b082      	sub	sp, #8
 801395c:	af00      	add	r7, sp, #0
 801395e:	6078      	str	r0, [r7, #4]
 8013960:	6878      	ldr	r0, [r7, #4]
 8013962:	f000 f9eb 	bl	8013d3c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE7derivedEv>
 8013966:	4603      	mov	r3, r0
 8013968:	4618      	mov	r0, r3
 801396a:	f000 f9f2 	bl	8013d52 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE4rowsEv>
 801396e:	4603      	mov	r3, r0
 8013970:	4618      	mov	r0, r3
 8013972:	3708      	adds	r7, #8
 8013974:	46bd      	mov	sp, r7
 8013976:	bd80      	pop	{r7, pc}

08013978 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE3sumEv>:
DenseBase<Derived>::sum() const
 8013978:	b590      	push	{r4, r7, lr}
 801397a:	b085      	sub	sp, #20
 801397c:	af00      	add	r7, sp, #0
 801397e:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 8013980:	6878      	ldr	r0, [r7, #4]
 8013982:	f000 f9db 	bl	8013d3c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE7derivedEv>
 8013986:	4604      	mov	r4, r0
 8013988:	f107 030c 	add.w	r3, r7, #12
 801398c:	4618      	mov	r0, r3
 801398e:	f7f2 f900 	bl	8005b92 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 8013992:	f107 030c 	add.w	r3, r7, #12
 8013996:	4619      	mov	r1, r3
 8013998:	4620      	mov	r0, r4
 801399a:	f000 fa83 	bl	8013ea4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 801399e:	eef0 7a40 	vmov.f32	s15, s0
 80139a2:	bf00      	nop
}
 80139a4:	eeb0 0a67 	vmov.f32	s0, s15
 80139a8:	3714      	adds	r7, #20
 80139aa:	46bd      	mov	sp, r7
 80139ac:	bd90      	pop	{r4, r7, pc}

080139ae <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfEC1ERKS6_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 80139ae:	b590      	push	{r4, r7, lr}
 80139b0:	b083      	sub	sp, #12
 80139b2:	af00      	add	r7, sp, #0
 80139b4:	6078      	str	r0, [r7, #4]
 80139b6:	6039      	str	r1, [r7, #0]
 80139b8:	6878      	ldr	r0, [r7, #4]
 80139ba:	f000 fac5 	bl	8013f48 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>
 80139be:	687c      	ldr	r4, [r7, #4]
 80139c0:	6838      	ldr	r0, [r7, #0]
 80139c2:	f000 fab5 	bl	8013f30 <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE16nestedExpressionEv>
 80139c6:	4603      	mov	r3, r0
 80139c8:	4619      	mov	r1, r3
 80139ca:	4620      	mov	r0, r4
 80139cc:	f000 fac7 	bl	8013f5e <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS4_>
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	4618      	mov	r0, r3
 80139d4:	370c      	adds	r7, #12
 80139d6:	46bd      	mov	sp, r7
 80139d8:	bd90      	pop	{r4, r7, pc}

080139da <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 80139da:	b590      	push	{r4, r7, lr}
 80139dc:	b085      	sub	sp, #20
 80139de:	af00      	add	r7, sp, #0
 80139e0:	60f8      	str	r0, [r7, #12]
 80139e2:	60b9      	str	r1, [r7, #8]
 80139e4:	607a      	str	r2, [r7, #4]
      return m_d.data[row * m_d.outerStride() + col];
 80139e6:	68fb      	ldr	r3, [r7, #12]
 80139e8:	681c      	ldr	r4, [r3, #0]
 80139ea:	68fb      	ldr	r3, [r7, #12]
 80139ec:	4618      	mov	r0, r3
 80139ee:	f7f3 fb5d 	bl	80070ac <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EE11outerStrideEv>
 80139f2:	4602      	mov	r2, r0
 80139f4:	68bb      	ldr	r3, [r7, #8]
 80139f6:	fb03 f202 	mul.w	r2, r3, r2
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	4413      	add	r3, r2
 80139fe:	009b      	lsls	r3, r3, #2
 8013a00:	4423      	add	r3, r4
  }
 8013a02:	4618      	mov	r0, r3
 8013a04:	3714      	adds	r7, #20
 8013a06:	46bd      	mov	sp, r7
 8013a08:	bd90      	pop	{r4, r7, pc}

08013a0a <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ENS_5DenseEEC1ERS3_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 8013a0a:	b580      	push	{r7, lr}
 8013a0c:	b084      	sub	sp, #16
 8013a0e:	af00      	add	r7, sp, #0
 8013a10:	60f8      	str	r0, [r7, #12]
 8013a12:	60b9      	str	r1, [r7, #8]
 8013a14:	607a      	str	r2, [r7, #4]
 8013a16:	68fb      	ldr	r3, [r7, #12]
 8013a18:	687a      	ldr	r2, [r7, #4]
 8013a1a:	68b9      	ldr	r1, [r7, #8]
 8013a1c:	4618      	mov	r0, r3
 8013a1e:	f000 faad 	bl	8013f7c <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EEC1ERS4_i>
 8013a22:	68fb      	ldr	r3, [r7, #12]
 8013a24:	4618      	mov	r0, r3
 8013a26:	3710      	adds	r7, #16
 8013a28:	46bd      	mov	sp, r7
 8013a2a:	bd80      	pop	{r7, pc}

08013a2c <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8013a2c:	b480      	push	{r7}
 8013a2e:	b083      	sub	sp, #12
 8013a30:	af00      	add	r7, sp, #0
 8013a32:	6078      	str	r0, [r7, #4]
    }
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	4618      	mov	r0, r3
 8013a38:	370c      	adds	r7, #12
 8013a3a:	46bd      	mov	sp, r7
 8013a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a40:	4770      	bx	lr

08013a42 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 8013a42:	b580      	push	{r7, lr}
 8013a44:	b082      	sub	sp, #8
 8013a46:	af00      	add	r7, sp, #0
 8013a48:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	4618      	mov	r0, r3
 8013a4e:	f7f8 fac6 	bl	800bfde <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4colsEv>
 8013a52:	4603      	mov	r3, r0
    }
 8013a54:	4618      	mov	r0, r3
 8013a56:	3708      	adds	r7, #8
 8013a58:	46bd      	mov	sp, r7
 8013a5a:	bd80      	pop	{r7, pc}

08013a5c <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1ERKSI_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 8013a5c:	b580      	push	{r7, lr}
 8013a5e:	b082      	sub	sp, #8
 8013a60:	af00      	add	r7, sp, #0
 8013a62:	6078      	str	r0, [r7, #4]
 8013a64:	6039      	str	r1, [r7, #0]
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	6839      	ldr	r1, [r7, #0]
 8013a6a:	4618      	mov	r0, r3
 8013a6c:	f000 fab7 	bl	8013fde <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1ERKSI_>
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	4618      	mov	r0, r3
 8013a74:	3708      	adds	r7, #8
 8013a76:	46bd      	mov	sp, r7
 8013a78:	bd80      	pop	{r7, pc}

08013a7a <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8013a7a:	b480      	push	{r7}
 8013a7c:	b083      	sub	sp, #12
 8013a7e:	af00      	add	r7, sp, #0
 8013a80:	6078      	str	r0, [r7, #4]
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	4618      	mov	r0, r3
 8013a86:	370c      	adds	r7, #12
 8013a88:	46bd      	mov	sp, r7
 8013a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a8e:	4770      	bx	lr

08013a90 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEED1Ev>:
 8013a90:	b480      	push	{r7}
 8013a92:	b083      	sub	sp, #12
 8013a94:	af00      	add	r7, sp, #0
 8013a96:	6078      	str	r0, [r7, #4]
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	4618      	mov	r0, r3
 8013a9c:	370c      	adds	r7, #12
 8013a9e:	46bd      	mov	sp, r7
 8013aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aa4:	4770      	bx	lr

08013aa6 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 8013aa6:	b580      	push	{r7, lr}
 8013aa8:	b084      	sub	sp, #16
 8013aaa:	af00      	add	r7, sp, #0
 8013aac:	60f8      	str	r0, [r7, #12]
 8013aae:	60b9      	str	r1, [r7, #8]
 8013ab0:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 8013ab2:	68b9      	ldr	r1, [r7, #8]
 8013ab4:	68f8      	ldr	r0, [r7, #12]
 8013ab6:	f000 faa1 	bl	8013ffc <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEELi0ELi1EE3runERKSM_RKS3_>
 8013aba:	eef0 7a40 	vmov.f32	s15, s0
  }
 8013abe:	eeb0 0a67 	vmov.f32	s0, s15
 8013ac2:	3710      	adds	r7, #16
 8013ac4:	46bd      	mov	sp, r7
 8013ac6:	bd80      	pop	{r7, pc}

08013ac8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi6ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8013ac8:	b580      	push	{r7, lr}
 8013aca:	b082      	sub	sp, #8
 8013acc:	af00      	add	r7, sp, #0
 8013ace:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8013ad0:	2200      	movs	r2, #0
 8013ad2:	2102      	movs	r1, #2
 8013ad4:	6878      	ldr	r0, [r7, #4]
 8013ad6:	f7fe f9f3 	bl	8011ec0 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8013ada:	6878      	ldr	r0, [r7, #4]
 8013adc:	f000 fa9f 	bl	801401e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi7ELi9EE3runERSE_>
  }
 8013ae0:	bf00      	nop
 8013ae2:	3708      	adds	r7, #8
 8013ae4:	46bd      	mov	sp, r7
 8013ae6:	bd80      	pop	{r7, pc}

08013ae8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8013ae8:	b580      	push	{r7, lr}
 8013aea:	b082      	sub	sp, #8
 8013aec:	af00      	add	r7, sp, #0
 8013aee:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8013af0:	2202      	movs	r2, #2
 8013af2:	2101      	movs	r1, #1
 8013af4:	6878      	ldr	r0, [r7, #4]
 8013af6:	f7fe fe8c 	bl	8012812 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8013afa:	6878      	ldr	r0, [r7, #4]
 8013afc:	f000 fa9f 	bl	801403e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSC_>
  }
 8013b00:	bf00      	nop
 8013b02:	3708      	adds	r7, #8
 8013b04:	46bd      	mov	sp, r7
 8013b06:	bd80      	pop	{r7, pc}

08013b08 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 8013b08:	b480      	push	{r7}
 8013b0a:	b083      	sub	sp, #12
 8013b0c:	af00      	add	r7, sp, #0
 8013b0e:	6078      	str	r0, [r7, #4]
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	3330      	adds	r3, #48	; 0x30
 8013b14:	4618      	mov	r0, r3
 8013b16:	370c      	adds	r7, #12
 8013b18:	46bd      	mov	sp, r7
 8013b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b1e:	4770      	bx	lr

08013b20 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 8013b20:	b480      	push	{r7}
 8013b22:	b083      	sub	sp, #12
 8013b24:	af00      	add	r7, sp, #0
 8013b26:	6078      	str	r0, [r7, #4]
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	4618      	mov	r0, r3
 8013b2c:	370c      	adds	r7, #12
 8013b2e:	46bd      	mov	sp, r7
 8013b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b34:	4770      	bx	lr

08013b36 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 8013b36:	b480      	push	{r7}
 8013b38:	b083      	sub	sp, #12
 8013b3a:	af00      	add	r7, sp, #0
 8013b3c:	6078      	str	r0, [r7, #4]
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	3318      	adds	r3, #24
 8013b42:	4618      	mov	r0, r3
 8013b44:	370c      	adds	r7, #12
 8013b46:	46bd      	mov	sp, r7
 8013b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b4c:	4770      	bx	lr

08013b4e <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERS9_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8013b4e:	b580      	push	{r7, lr}
 8013b50:	b082      	sub	sp, #8
 8013b52:	af00      	add	r7, sp, #0
 8013b54:	6078      	str	r0, [r7, #4]
 8013b56:	6039      	str	r1, [r7, #0]
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	6839      	ldr	r1, [r7, #0]
 8013b5c:	4618      	mov	r0, r3
 8013b5e:	f000 fa7e 	bl	801405e <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERKS8_>
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	4618      	mov	r0, r3
 8013b66:	3708      	adds	r7, #8
 8013b68:	46bd      	mov	sp, r7
 8013b6a:	bd80      	pop	{r7, pc}

08013b6c <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8013b6c:	b590      	push	{r4, r7, lr}
 8013b6e:	b087      	sub	sp, #28
 8013b70:	af00      	add	r7, sp, #0
 8013b72:	60f8      	str	r0, [r7, #12]
 8013b74:	60b9      	str	r1, [r7, #8]
 8013b76:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 8013b78:	68fb      	ldr	r3, [r7, #12]
 8013b7a:	4618      	mov	r0, r3
 8013b7c:	f000 fa7e 	bl	801407c <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE4Data4funcEv>
 8013b80:	4604      	mov	r4, r0
 8013b82:	68fb      	ldr	r3, [r7, #12]
 8013b84:	3304      	adds	r3, #4
 8013b86:	687a      	ldr	r2, [r7, #4]
 8013b88:	68b9      	ldr	r1, [r7, #8]
 8013b8a:	4618      	mov	r0, r3
 8013b8c:	f7fb fdf6 	bl	800f77c <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfE5coeffEii>
 8013b90:	eef0 7a40 	vmov.f32	s15, s0
 8013b94:	edc7 7a04 	vstr	s15, [r7, #16]
 8013b98:	68fb      	ldr	r3, [r7, #12]
 8013b9a:	330c      	adds	r3, #12
 8013b9c:	687a      	ldr	r2, [r7, #4]
 8013b9e:	68b9      	ldr	r1, [r7, #8]
 8013ba0:	4618      	mov	r0, r3
 8013ba2:	f000 fa76 	bl	8014092 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>
 8013ba6:	eef0 7a40 	vmov.f32	s15, s0
 8013baa:	edc7 7a05 	vstr	s15, [r7, #20]
 8013bae:	f107 0214 	add.w	r2, r7, #20
 8013bb2:	f107 0310 	add.w	r3, r7, #16
 8013bb6:	4619      	mov	r1, r3
 8013bb8:	4620      	mov	r0, r4
 8013bba:	f7fb fc23 	bl	800f404 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 8013bbe:	eef0 7a40 	vmov.f32	s15, s0
  }
 8013bc2:	eeb0 0a67 	vmov.f32	s0, s15
 8013bc6:	371c      	adds	r7, #28
 8013bc8:	46bd      	mov	sp, r7
 8013bca:	bd90      	pop	{r4, r7, pc}

08013bcc <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1Ev>:
 8013bcc:	b580      	push	{r7, lr}
 8013bce:	b082      	sub	sp, #8
 8013bd0:	af00      	add	r7, sp, #0
 8013bd2:	6078      	str	r0, [r7, #4]
 8013bd4:	6878      	ldr	r0, [r7, #4]
 8013bd6:	f000 fa7d 	bl	80140d4 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1Ev>
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	4618      	mov	r0, r3
 8013bde:	3708      	adds	r7, #8
 8013be0:	46bd      	mov	sp, r7
 8013be2:	bd80      	pop	{r7, pc}

08013be4 <_ZN5Eigen13TransposeImplIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 8013be4:	b580      	push	{r7, lr}
 8013be6:	b082      	sub	sp, #8
 8013be8:	af00      	add	r7, sp, #0
 8013bea:	6078      	str	r0, [r7, #4]
 8013bec:	6878      	ldr	r0, [r7, #4]
 8013bee:	f7ff ffed 	bl	8013bcc <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1Ev>
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	4618      	mov	r0, r3
 8013bf6:	3708      	adds	r7, #8
 8013bf8:	46bd      	mov	sp, r7
 8013bfa:	bd80      	pop	{r7, pc}

08013bfc <_ZN5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1ERS6_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 8013bfc:	b580      	push	{r7, lr}
 8013bfe:	b082      	sub	sp, #8
 8013c00:	af00      	add	r7, sp, #0
 8013c02:	6078      	str	r0, [r7, #4]
 8013c04:	6039      	str	r1, [r7, #0]
 8013c06:	6878      	ldr	r0, [r7, #4]
 8013c08:	f7ff ffec 	bl	8013be4 <_ZN5Eigen13TransposeImplIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_5DenseEEC1Ev>
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	683a      	ldr	r2, [r7, #0]
 8013c10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013c14:	e883 0003 	stmia.w	r3, {r0, r1}
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	4618      	mov	r0, r3
 8013c1c:	3708      	adds	r7, #8
 8013c1e:	46bd      	mov	sp, r7
 8013c20:	bd80      	pop	{r7, pc}

08013c22 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8013c22:	b480      	push	{r7}
 8013c24:	b083      	sub	sp, #12
 8013c26:	af00      	add	r7, sp, #0
 8013c28:	6078      	str	r0, [r7, #4]
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	4618      	mov	r0, r3
 8013c2e:	370c      	adds	r7, #12
 8013c30:	46bd      	mov	sp, r7
 8013c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c36:	4770      	bx	lr

08013c38 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1Ev>:
 8013c38:	b580      	push	{r7, lr}
 8013c3a:	b082      	sub	sp, #8
 8013c3c:	af00      	add	r7, sp, #0
 8013c3e:	6078      	str	r0, [r7, #4]
 8013c40:	6878      	ldr	r0, [r7, #4]
 8013c42:	f000 fa52 	bl	80140ea <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1Ev>
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	4618      	mov	r0, r3
 8013c4a:	3708      	adds	r7, #8
 8013c4c:	46bd      	mov	sp, r7
 8013c4e:	bd80      	pop	{r7, pc}

08013c50 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 8013c50:	b580      	push	{r7, lr}
 8013c52:	b082      	sub	sp, #8
 8013c54:	af00      	add	r7, sp, #0
 8013c56:	6078      	str	r0, [r7, #4]
 8013c58:	6878      	ldr	r0, [r7, #4]
 8013c5a:	f7ff ffed 	bl	8013c38 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1Ev>
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	4618      	mov	r0, r3
 8013c62:	3708      	adds	r7, #8
 8013c64:	46bd      	mov	sp, r7
 8013c66:	bd80      	pop	{r7, pc}

08013c68 <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 8013c68:	b580      	push	{r7, lr}
 8013c6a:	b082      	sub	sp, #8
 8013c6c:	af00      	add	r7, sp, #0
 8013c6e:	6078      	str	r0, [r7, #4]
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	4618      	mov	r0, r3
 8013c74:	f7f2 f95d 	bl	8005f32 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4colsEv>
 8013c78:	4603      	mov	r3, r0
 8013c7a:	4618      	mov	r0, r3
 8013c7c:	3708      	adds	r7, #8
 8013c7e:	46bd      	mov	sp, r7
 8013c80:	bd80      	pop	{r7, pc}

08013c82 <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 8013c82:	b580      	push	{r7, lr}
 8013c84:	b082      	sub	sp, #8
 8013c86:	af00      	add	r7, sp, #0
 8013c88:	6078      	str	r0, [r7, #4]
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	4618      	mov	r0, r3
 8013c8e:	f7f3 f8c2 	bl	8006e16 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4rowsEv>
 8013c92:	4603      	mov	r3, r0
 8013c94:	4618      	mov	r0, r3
 8013c96:	3708      	adds	r7, #8
 8013c98:	46bd      	mov	sp, r7
 8013c9a:	bd80      	pop	{r7, pc}

08013c9c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEEC1ERSC_RSE_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8013c9c:	b590      	push	{r4, r7, lr}
 8013c9e:	b085      	sub	sp, #20
 8013ca0:	af00      	add	r7, sp, #0
 8013ca2:	60f8      	str	r0, [r7, #12]
 8013ca4:	60b9      	str	r1, [r7, #8]
 8013ca6:	607a      	str	r2, [r7, #4]
 8013ca8:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 8013caa:	68f8      	ldr	r0, [r7, #12]
 8013cac:	f7ff ffd0 	bl	8013c50 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EENS_5DenseEEC1Ev>
 8013cb0:	68fb      	ldr	r3, [r7, #12]
 8013cb2:	68ba      	ldr	r2, [r7, #8]
 8013cb4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013cb8:	e883 0003 	stmia.w	r3, {r0, r1}
 8013cbc:	68fb      	ldr	r3, [r7, #12]
 8013cbe:	3308      	adds	r3, #8
 8013cc0:	687a      	ldr	r2, [r7, #4]
 8013cc2:	6812      	ldr	r2, [r2, #0]
 8013cc4:	601a      	str	r2, [r3, #0]
 8013cc6:	68fb      	ldr	r3, [r7, #12]
 8013cc8:	330c      	adds	r3, #12
 8013cca:	6839      	ldr	r1, [r7, #0]
 8013ccc:	4618      	mov	r0, r3
 8013cce:	f7f1 fcf3 	bl	80056b8 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8013cd2:	68b8      	ldr	r0, [r7, #8]
 8013cd4:	f7ff ffc8 	bl	8013c68 <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE4rowsEv>
 8013cd8:	4604      	mov	r4, r0
 8013cda:	6878      	ldr	r0, [r7, #4]
 8013cdc:	f7f2 f85f 	bl	8005d9e <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8013ce0:	4603      	mov	r3, r0
 8013ce2:	429c      	cmp	r4, r3
 8013ce4:	d109      	bne.n	8013cfa <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEEC1ERSC_RSE_RKS3_+0x5e>
 8013ce6:	68b8      	ldr	r0, [r7, #8]
 8013ce8:	f7ff ffcb 	bl	8013c82 <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE4colsEv>
 8013cec:	4604      	mov	r4, r0
 8013cee:	6878      	ldr	r0, [r7, #4]
 8013cf0:	f7f3 f89f 	bl	8006e32 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8013cf4:	4603      	mov	r3, r0
 8013cf6:	429c      	cmp	r4, r3
 8013cf8:	d005      	beq.n	8013d06 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEEC1ERSC_RSE_RKS3_+0x6a>
 8013cfa:	4b05      	ldr	r3, [pc, #20]	; (8013d10 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEEC1ERSC_RSE_RKS3_+0x74>)
 8013cfc:	4a05      	ldr	r2, [pc, #20]	; (8013d14 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEEC1ERSC_RSE_RKS3_+0x78>)
 8013cfe:	2174      	movs	r1, #116	; 0x74
 8013d00:	4805      	ldr	r0, [pc, #20]	; (8013d18 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEEC1ERSC_RSE_RKS3_+0x7c>)
 8013d02:	f00a f8c7 	bl	801de94 <__assert_func>
    }
 8013d06:	68fb      	ldr	r3, [r7, #12]
 8013d08:	4618      	mov	r0, r3
 8013d0a:	3714      	adds	r7, #20
 8013d0c:	46bd      	mov	sp, r7
 8013d0e:	bd90      	pop	{r4, r7, pc}
 8013d10:	0801fcfc 	.word	0x0801fcfc
 8013d14:	08029120 	.word	0x08029120
 8013d18:	0801ff60 	.word	0x0801ff60

08013d1c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 8013d1c:	b580      	push	{r7, lr}
 8013d1e:	b082      	sub	sp, #8
 8013d20:	af00      	add	r7, sp, #0
 8013d22:	6078      	str	r0, [r7, #4]
 8013d24:	6878      	ldr	r0, [r7, #4]
 8013d26:	f000 f809 	bl	8013d3c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE7derivedEv>
 8013d2a:	4603      	mov	r3, r0
 8013d2c:	4618      	mov	r0, r3
 8013d2e:	f000 f9e7 	bl	8014100 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE4colsEv>
 8013d32:	4603      	mov	r3, r0
 8013d34:	4618      	mov	r0, r3
 8013d36:	3708      	adds	r7, #8
 8013d38:	46bd      	mov	sp, r7
 8013d3a:	bd80      	pop	{r7, pc}

08013d3c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8013d3c:	b480      	push	{r7}
 8013d3e:	b083      	sub	sp, #12
 8013d40:	af00      	add	r7, sp, #0
 8013d42:	6078      	str	r0, [r7, #4]
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	4618      	mov	r0, r3
 8013d48:	370c      	adds	r7, #12
 8013d4a:	46bd      	mov	sp, r7
 8013d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d50:	4770      	bx	lr

08013d52 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 8013d52:	b580      	push	{r7, lr}
 8013d54:	b082      	sub	sp, #8
 8013d56:	af00      	add	r7, sp, #0
 8013d58:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	4618      	mov	r0, r3
 8013d5e:	f7ff ff83 	bl	8013c68 <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE4rowsEv>
 8013d62:	4603      	mov	r3, r0
    }
 8013d64:	4618      	mov	r0, r3
 8013d66:	3708      	adds	r7, #8
 8013d68:	46bd      	mov	sp, r7
 8013d6a:	bd80      	pop	{r7, pc}

08013d6c <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEELi3ENS_10DenseShapeES7_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, Options>, ProductTag, LhsShape, RhsShape>
 8013d6c:	b580      	push	{r7, lr}
 8013d6e:	b082      	sub	sp, #8
 8013d70:	af00      	add	r7, sp, #0
 8013d72:	6078      	str	r0, [r7, #4]
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	4618      	mov	r0, r3
 8013d78:	f7fb fa2e 	bl	800f1d8 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	4618      	mov	r0, r3
 8013d80:	3708      	adds	r7, #8
 8013d82:	46bd      	mov	sp, r7
 8013d84:	bd80      	pop	{r7, pc}

08013d86 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 8013d86:	b580      	push	{r7, lr}
 8013d88:	b082      	sub	sp, #8
 8013d8a:	af00      	add	r7, sp, #0
 8013d8c:	6078      	str	r0, [r7, #4]
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	4618      	mov	r0, r3
 8013d92:	f7ff ffeb 	bl	8013d6c <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEELi3ENS_10DenseShapeES7_ffED1Ev>
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	4618      	mov	r0, r3
 8013d9a:	3708      	adds	r7, #8
 8013d9c:	46bd      	mov	sp, r7
 8013d9e:	bd80      	pop	{r7, pc}

08013da0 <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEED1Ev>:
struct evaluator<const T>
 8013da0:	b580      	push	{r7, lr}
 8013da2:	b082      	sub	sp, #8
 8013da4:	af00      	add	r7, sp, #0
 8013da6:	6078      	str	r0, [r7, #4]
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	4618      	mov	r0, r3
 8013dac:	f7ff ffeb 	bl	8013d86 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEED1Ev>
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	4618      	mov	r0, r3
 8013db4:	3708      	adds	r7, #8
 8013db6:	46bd      	mov	sp, r7
 8013db8:	bd80      	pop	{r7, pc}

08013dba <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 8013dba:	b580      	push	{r7, lr}
 8013dbc:	b082      	sub	sp, #8
 8013dbe:	af00      	add	r7, sp, #0
 8013dc0:	6078      	str	r0, [r7, #4]
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	4618      	mov	r0, r3
 8013dc6:	f7ff ffeb 	bl	8013da0 <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEED1Ev>
 8013dca:	6878      	ldr	r0, [r7, #4]
 8013dcc:	f000 f9bf 	bl	801414e <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEED1Ev>
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	4618      	mov	r0, r3
 8013dd4:	3708      	adds	r7, #8
 8013dd6:	46bd      	mov	sp, r7
 8013dd8:	bd80      	pop	{r7, pc}

08013dda <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 8013dda:	b580      	push	{r7, lr}
 8013ddc:	b082      	sub	sp, #8
 8013dde:	af00      	add	r7, sp, #0
 8013de0:	6078      	str	r0, [r7, #4]
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	4618      	mov	r0, r3
 8013de6:	f7ff ffe8 	bl	8013dba <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEENS0_10IndexBasedEfED1Ev>
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	4618      	mov	r0, r3
 8013dee:	3708      	adds	r7, #8
 8013df0:	46bd      	mov	sp, r7
 8013df2:	bd80      	pop	{r7, pc}

08013df4 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEED1Ev>:
struct evaluator<const T>
 8013df4:	b580      	push	{r7, lr}
 8013df6:	b082      	sub	sp, #8
 8013df8:	af00      	add	r7, sp, #0
 8013dfa:	6078      	str	r0, [r7, #4]
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	4618      	mov	r0, r3
 8013e00:	f7ff ffeb 	bl	8013dda <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEED1Ev>
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	4618      	mov	r0, r3
 8013e08:	3708      	adds	r7, #8
 8013e0a:	46bd      	mov	sp, r7
 8013e0c:	bd80      	pop	{r7, pc}

08013e0e <_ZN5Eigen8internal9evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>:
 8013e0e:	b580      	push	{r7, lr}
 8013e10:	b082      	sub	sp, #8
 8013e12:	af00      	add	r7, sp, #0
 8013e14:	6078      	str	r0, [r7, #4]
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	4618      	mov	r0, r3
 8013e1a:	f7fb f9fa 	bl	800f212 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	4618      	mov	r0, r3
 8013e22:	3708      	adds	r7, #8
 8013e24:	46bd      	mov	sp, r7
 8013e26:	bd80      	pop	{r7, pc}

08013e28 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE4DataD1Ev>:
  struct Data
 8013e28:	b580      	push	{r7, lr}
 8013e2a:	b082      	sub	sp, #8
 8013e2c:	af00      	add	r7, sp, #0
 8013e2e:	6078      	str	r0, [r7, #4]
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	3314      	adds	r3, #20
 8013e34:	4618      	mov	r0, r3
 8013e36:	f7ff ffea 	bl	8013e0e <_ZN5Eigen8internal9evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	3304      	adds	r3, #4
 8013e3e:	4618      	mov	r0, r3
 8013e40:	f7ff ffd8 	bl	8013df4 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEED1Ev>
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	4618      	mov	r0, r3
 8013e48:	3708      	adds	r7, #8
 8013e4a:	46bd      	mov	sp, r7
 8013e4c:	bd80      	pop	{r7, pc}

08013e4e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 8013e4e:	b580      	push	{r7, lr}
 8013e50:	b082      	sub	sp, #8
 8013e52:	af00      	add	r7, sp, #0
 8013e54:	6078      	str	r0, [r7, #4]
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	4618      	mov	r0, r3
 8013e5a:	f7ff ffe5 	bl	8013e28 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE4DataD1Ev>
 8013e5e:	6878      	ldr	r0, [r7, #4]
 8013e60:	f000 f96a 	bl	8014138 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEED1Ev>
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	4618      	mov	r0, r3
 8013e68:	3708      	adds	r7, #8
 8013e6a:	46bd      	mov	sp, r7
 8013e6c:	bd80      	pop	{r7, pc}

08013e6e <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 8013e6e:	b580      	push	{r7, lr}
 8013e70:	b082      	sub	sp, #8
 8013e72:	af00      	add	r7, sp, #0
 8013e74:	6078      	str	r0, [r7, #4]
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	4618      	mov	r0, r3
 8013e7a:	f7ff ffe8 	bl	8013e4e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffED1Ev>
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	4618      	mov	r0, r3
 8013e82:	3708      	adds	r7, #8
 8013e84:	46bd      	mov	sp, r7
 8013e86:	bd80      	pop	{r7, pc}

08013e88 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 8013e88:	b580      	push	{r7, lr}
 8013e8a:	b082      	sub	sp, #8
 8013e8c:	af00      	add	r7, sp, #0
 8013e8e:	6078      	str	r0, [r7, #4]
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	4618      	mov	r0, r3
 8013e94:	f7ff ffeb 	bl	8013e6e <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEED1Ev>
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	4618      	mov	r0, r3
 8013e9c:	3708      	adds	r7, #8
 8013e9e:	46bd      	mov	sp, r7
 8013ea0:	bd80      	pop	{r7, pc}
	...

08013ea4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 8013ea4:	b580      	push	{r7, lr}
 8013ea6:	ed2d 8b02 	vpush	{d8}
 8013eaa:	b088      	sub	sp, #32
 8013eac:	af00      	add	r7, sp, #0
 8013eae:	6078      	str	r0, [r7, #4]
 8013eb0:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 8013eb2:	6878      	ldr	r0, [r7, #4]
 8013eb4:	f7ff fd50 	bl	8013958 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE4rowsEv>
 8013eb8:	4603      	mov	r3, r0
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	dd05      	ble.n	8013eca <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 8013ebe:	6878      	ldr	r0, [r7, #4]
 8013ec0:	f7ff ff2c 	bl	8013d1c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE4colsEv>
 8013ec4:	4603      	mov	r3, r0
 8013ec6:	2b00      	cmp	r3, #0
 8013ec8:	dc06      	bgt.n	8013ed8 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 8013eca:	4b16      	ldr	r3, [pc, #88]	; (8013f24 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 8013ecc:	4a16      	ldr	r2, [pc, #88]	; (8013f28 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 8013ece:	f240 119b 	movw	r1, #411	; 0x19b
 8013ed2:	4816      	ldr	r0, [pc, #88]	; (8013f2c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 8013ed4:	f009 ffde 	bl	801de94 <__assert_func>
 8013ed8:	bf00      	nop
  ThisEvaluator thisEval(derived());
 8013eda:	6878      	ldr	r0, [r7, #4]
 8013edc:	f7ff ff2e 	bl	8013d3c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE7derivedEv>
 8013ee0:	4602      	mov	r2, r0
 8013ee2:	f107 0308 	add.w	r3, r7, #8
 8013ee6:	4611      	mov	r1, r2
 8013ee8:	4618      	mov	r0, r3
 8013eea:	f000 f916 	bl	801411a <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1ERKSG_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 8013eee:	6878      	ldr	r0, [r7, #4]
 8013ef0:	f7ff ff24 	bl	8013d3c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE7derivedEv>
 8013ef4:	4602      	mov	r2, r0
 8013ef6:	f107 0308 	add.w	r3, r7, #8
 8013efa:	6839      	ldr	r1, [r7, #0]
 8013efc:	4618      	mov	r0, r3
 8013efe:	f000 f931 	bl	8014164 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi0ELi2EE3runISJ_EEfRKSK_RKS3_RKT_>
 8013f02:	eeb0 8a40 	vmov.f32	s16, s0
 8013f06:	bf00      	nop
  ThisEvaluator thisEval(derived());
 8013f08:	f107 0308 	add.w	r3, r7, #8
 8013f0c:	4618      	mov	r0, r3
 8013f0e:	f7ff ffbb 	bl	8013e88 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 8013f12:	eef0 7a48 	vmov.f32	s15, s16
}
 8013f16:	eeb0 0a67 	vmov.f32	s0, s15
 8013f1a:	3720      	adds	r7, #32
 8013f1c:	46bd      	mov	sp, r7
 8013f1e:	ecbd 8b02 	vpop	{d8}
 8013f22:	bd80      	pop	{r7, pc}
 8013f24:	08024d7c 	.word	0x08024d7c
 8013f28:	0802936c 	.word	0x0802936c
 8013f2c:	08024f88 	.word	0x08024f88

08013f30 <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 8013f30:	b480      	push	{r7}
 8013f32:	b083      	sub	sp, #12
 8013f34:	af00      	add	r7, sp, #0
 8013f36:	6078      	str	r0, [r7, #4]
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	681b      	ldr	r3, [r3, #0]
 8013f3c:	4618      	mov	r0, r3
 8013f3e:	370c      	adds	r7, #12
 8013f40:	46bd      	mov	sp, r7
 8013f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f46:	4770      	bx	lr

08013f48 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8013f48:	b480      	push	{r7}
 8013f4a:	b083      	sub	sp, #12
 8013f4c:	af00      	add	r7, sp, #0
 8013f4e:	6078      	str	r0, [r7, #4]
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	4618      	mov	r0, r3
 8013f54:	370c      	adds	r7, #12
 8013f56:	46bd      	mov	sp, r7
 8013f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f5c:	4770      	bx	lr

08013f5e <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS4_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8013f5e:	b580      	push	{r7, lr}
 8013f60:	b082      	sub	sp, #8
 8013f62:	af00      	add	r7, sp, #0
 8013f64:	6078      	str	r0, [r7, #4]
 8013f66:	6039      	str	r1, [r7, #0]
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	6839      	ldr	r1, [r7, #0]
 8013f6c:	4618      	mov	r0, r3
 8013f6e:	f7fd fe47 	bl	8011c00 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS3_>
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	4618      	mov	r0, r3
 8013f76:	3708      	adds	r7, #8
 8013f78:	46bd      	mov	sp, r7
 8013f7a:	bd80      	pop	{r7, pc}

08013f7c <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EEC1ERS4_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 8013f7c:	b5b0      	push	{r4, r5, r7, lr}
 8013f7e:	b084      	sub	sp, #16
 8013f80:	af00      	add	r7, sp, #0
 8013f82:	60f8      	str	r0, [r7, #12]
 8013f84:	60b9      	str	r1, [r7, #8]
 8013f86:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 8013f88:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 8013f8a:	68bb      	ldr	r3, [r7, #8]
 8013f8c:	4618      	mov	r0, r3
 8013f8e:	f7fe fc93 	bl	80128b8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4dataEv>
 8013f92:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 8013f94:	68b8      	ldr	r0, [r7, #8]
 8013f96:	f7ff fc01 	bl	801379c <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11innerStrideEv>
 8013f9a:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	fb02 f303 	mul.w	r3, r2, r3
 8013fa2:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 8013fa4:	18e9      	adds	r1, r5, r3
 8013fa6:	2301      	movs	r3, #1
 8013fa8:	2201      	movs	r2, #1
 8013faa:	4620      	mov	r0, r4
 8013fac:	f000 f8f8 	bl	80141a0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii>
 8013fb0:	68fb      	ldr	r3, [r7, #12]
 8013fb2:	68ba      	ldr	r2, [r7, #8]
 8013fb4:	609a      	str	r2, [r3, #8]
 8013fb6:	68fb      	ldr	r3, [r7, #12]
 8013fb8:	330c      	adds	r3, #12
 8013fba:	2100      	movs	r1, #0
 8013fbc:	4618      	mov	r0, r3
 8013fbe:	f7f9 fedd 	bl	800dd7c <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
 8013fc2:	68fb      	ldr	r3, [r7, #12]
 8013fc4:	3310      	adds	r3, #16
 8013fc6:	6879      	ldr	r1, [r7, #4]
 8013fc8:	4618      	mov	r0, r3
 8013fca:	f7f9 fe63 	bl	800dc94 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
      init();
 8013fce:	68f8      	ldr	r0, [r7, #12]
 8013fd0:	f000 f924 	bl	801421c <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EE4initEv>
    }
 8013fd4:	68fb      	ldr	r3, [r7, #12]
 8013fd6:	4618      	mov	r0, r3
 8013fd8:	3710      	adds	r7, #16
 8013fda:	46bd      	mov	sp, r7
 8013fdc:	bdb0      	pop	{r4, r5, r7, pc}

08013fde <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1ERKSI_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8013fde:	b580      	push	{r7, lr}
 8013fe0:	b082      	sub	sp, #8
 8013fe2:	af00      	add	r7, sp, #0
 8013fe4:	6078      	str	r0, [r7, #4]
 8013fe6:	6039      	str	r1, [r7, #0]
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	6839      	ldr	r1, [r7, #0]
 8013fec:	4618      	mov	r0, r3
 8013fee:	f000 f925 	bl	801423c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	4618      	mov	r0, r3
 8013ff6:	3708      	adds	r7, #8
 8013ff8:	46bd      	mov	sp, r7
 8013ffa:	bd80      	pop	{r7, pc}

08013ffc <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEELi0ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8013ffc:	b580      	push	{r7, lr}
 8013ffe:	b082      	sub	sp, #8
 8014000:	af00      	add	r7, sp, #0
 8014002:	6078      	str	r0, [r7, #4]
 8014004:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8014006:	2200      	movs	r2, #0
 8014008:	2100      	movs	r1, #0
 801400a:	6878      	ldr	r0, [r7, #4]
 801400c:	f000 f928 	bl	8014260 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE17coeffByOuterInnerEii>
 8014010:	eef0 7a40 	vmov.f32	s15, s0
  }
 8014014:	eeb0 0a67 	vmov.f32	s0, s15
 8014018:	3708      	adds	r7, #8
 801401a:	46bd      	mov	sp, r7
 801401c:	bd80      	pop	{r7, pc}

0801401e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi7ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 801401e:	b580      	push	{r7, lr}
 8014020:	b082      	sub	sp, #8
 8014022:	af00      	add	r7, sp, #0
 8014024:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8014026:	2201      	movs	r2, #1
 8014028:	2102      	movs	r1, #2
 801402a:	6878      	ldr	r0, [r7, #4]
 801402c:	f7fd ff48 	bl	8011ec0 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8014030:	6878      	ldr	r0, [r7, #4]
 8014032:	f000 f928 	bl	8014286 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi8ELi9EE3runERSE_>
  }
 8014036:	bf00      	nop
 8014038:	3708      	adds	r7, #8
 801403a:	46bd      	mov	sp, r7
 801403c:	bd80      	pop	{r7, pc}

0801403e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 801403e:	b580      	push	{r7, lr}
 8014040:	b082      	sub	sp, #8
 8014042:	af00      	add	r7, sp, #0
 8014044:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8014046:	2200      	movs	r2, #0
 8014048:	2102      	movs	r1, #2
 801404a:	6878      	ldr	r0, [r7, #4]
 801404c:	f7fe fbe1 	bl	8012812 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8014050:	6878      	ldr	r0, [r7, #4]
 8014052:	f000 f928 	bl	80142a6 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSC_>
  }
 8014056:	bf00      	nop
 8014058:	3708      	adds	r7, #8
 801405a:	46bd      	mov	sp, r7
 801405c:	bd80      	pop	{r7, pc}

0801405e <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERKS8_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 801405e:	b580      	push	{r7, lr}
 8014060:	b082      	sub	sp, #8
 8014062:	af00      	add	r7, sp, #0
 8014064:	6078      	str	r0, [r7, #4]
 8014066:	6039      	str	r1, [r7, #0]
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	6839      	ldr	r1, [r7, #0]
 801406c:	4618      	mov	r0, r3
 801406e:	f000 f92a 	bl	80142c6 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EEC1ERKNS_5BlockIS6_Li3ELi1ELb1EEE>
  }
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	4618      	mov	r0, r3
 8014076:	3708      	adds	r7, #8
 8014078:	46bd      	mov	sp, r7
 801407a:	bd80      	pop	{r7, pc}

0801407c <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 801407c:	b480      	push	{r7}
 801407e:	b083      	sub	sp, #12
 8014080:	af00      	add	r7, sp, #0
 8014082:	6078      	str	r0, [r7, #4]
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	4618      	mov	r0, r3
 8014088:	370c      	adds	r7, #12
 801408a:	46bd      	mov	sp, r7
 801408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014090:	4770      	bx	lr

08014092 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8014092:	b5b0      	push	{r4, r5, r7, lr}
 8014094:	b084      	sub	sp, #16
 8014096:	af00      	add	r7, sp, #0
 8014098:	60f8      	str	r0, [r7, #12]
 801409a:	60b9      	str	r1, [r7, #8]
 801409c:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 801409e:	68fb      	ldr	r3, [r7, #12]
 80140a0:	681c      	ldr	r4, [r3, #0]
 80140a2:	68f8      	ldr	r0, [r7, #12]
 80140a4:	f000 f923 	bl	80142ee <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9colStrideEv>
 80140a8:	4602      	mov	r2, r0
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	fb03 f502 	mul.w	r5, r3, r2
 80140b0:	68f8      	ldr	r0, [r7, #12]
 80140b2:	f000 f927 	bl	8014304 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9rowStrideEv>
 80140b6:	4602      	mov	r2, r0
 80140b8:	68bb      	ldr	r3, [r7, #8]
 80140ba:	fb02 f303 	mul.w	r3, r2, r3
 80140be:	442b      	add	r3, r5
 80140c0:	009b      	lsls	r3, r3, #2
 80140c2:	4423      	add	r3, r4
 80140c4:	681b      	ldr	r3, [r3, #0]
 80140c6:	ee07 3a90 	vmov	s15, r3
  }
 80140ca:	eeb0 0a67 	vmov.f32	s0, s15
 80140ce:	3710      	adds	r7, #16
 80140d0:	46bd      	mov	sp, r7
 80140d2:	bdb0      	pop	{r4, r5, r7, pc}

080140d4 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80140d4:	b480      	push	{r7}
 80140d6:	b083      	sub	sp, #12
 80140d8:	af00      	add	r7, sp, #0
 80140da:	6078      	str	r0, [r7, #4]
    }
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	4618      	mov	r0, r3
 80140e0:	370c      	adds	r7, #12
 80140e2:	46bd      	mov	sp, r7
 80140e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140e8:	4770      	bx	lr

080140ea <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80140ea:	b480      	push	{r7}
 80140ec:	b083      	sub	sp, #12
 80140ee:	af00      	add	r7, sp, #0
 80140f0:	6078      	str	r0, [r7, #4]
    }
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	4618      	mov	r0, r3
 80140f6:	370c      	adds	r7, #12
 80140f8:	46bd      	mov	sp, r7
 80140fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140fe:	4770      	bx	lr

08014100 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 8014100:	b580      	push	{r7, lr}
 8014102:	b082      	sub	sp, #8
 8014104:	af00      	add	r7, sp, #0
 8014106:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	4618      	mov	r0, r3
 801410c:	f7ff fdb9 	bl	8013c82 <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE4colsEv>
 8014110:	4603      	mov	r3, r0
    }
 8014112:	4618      	mov	r0, r3
 8014114:	3708      	adds	r7, #8
 8014116:	46bd      	mov	sp, r7
 8014118:	bd80      	pop	{r7, pc}

0801411a <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1ERKSG_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 801411a:	b580      	push	{r7, lr}
 801411c:	b082      	sub	sp, #8
 801411e:	af00      	add	r7, sp, #0
 8014120:	6078      	str	r0, [r7, #4]
 8014122:	6039      	str	r1, [r7, #0]
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	6839      	ldr	r1, [r7, #0]
 8014128:	4618      	mov	r0, r3
 801412a:	f000 f8f6 	bl	801431a <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1ERKSG_>
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	4618      	mov	r0, r3
 8014132:	3708      	adds	r7, #8
 8014134:	46bd      	mov	sp, r7
 8014136:	bd80      	pop	{r7, pc}

08014138 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8014138:	b480      	push	{r7}
 801413a:	b083      	sub	sp, #12
 801413c:	af00      	add	r7, sp, #0
 801413e:	6078      	str	r0, [r7, #4]
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	4618      	mov	r0, r3
 8014144:	370c      	adds	r7, #12
 8014146:	46bd      	mov	sp, r7
 8014148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801414c:	4770      	bx	lr

0801414e <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEED1Ev>:
 801414e:	b480      	push	{r7}
 8014150:	b083      	sub	sp, #12
 8014152:	af00      	add	r7, sp, #0
 8014154:	6078      	str	r0, [r7, #4]
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	4618      	mov	r0, r3
 801415a:	370c      	adds	r7, #12
 801415c:	46bd      	mov	sp, r7
 801415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014162:	4770      	bx	lr

08014164 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi0ELi2EE3runISJ_EEfRKSK_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 8014164:	b580      	push	{r7, lr}
 8014166:	b084      	sub	sp, #16
 8014168:	af00      	add	r7, sp, #0
 801416a:	60f8      	str	r0, [r7, #12]
 801416c:	60b9      	str	r1, [r7, #8]
 801416e:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 8014170:	68b9      	ldr	r1, [r7, #8]
 8014172:	68f8      	ldr	r0, [r7, #12]
 8014174:	f000 f8e0 	bl	8014338 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi0ELi3EE3runERKSK_RKS3_>
 8014178:	eef0 7a40 	vmov.f32	s15, s0
  }
 801417c:	eeb0 0a67 	vmov.f32	s0, s15
 8014180:	3710      	adds	r7, #16
 8014182:	46bd      	mov	sp, r7
 8014184:	bd80      	pop	{r7, pc}

08014186 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1Ev>:
 8014186:	b580      	push	{r7, lr}
 8014188:	b082      	sub	sp, #8
 801418a:	af00      	add	r7, sp, #0
 801418c:	6078      	str	r0, [r7, #4]
 801418e:	6878      	ldr	r0, [r7, #4]
 8014190:	f000 f8f6 	bl	8014380 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1Ev>
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	4618      	mov	r0, r3
 8014198:	3708      	adds	r7, #8
 801419a:	46bd      	mov	sp, r7
 801419c:	bd80      	pop	{r7, pc}
	...

080141a0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 80141a0:	b580      	push	{r7, lr}
 80141a2:	b084      	sub	sp, #16
 80141a4:	af00      	add	r7, sp, #0
 80141a6:	60f8      	str	r0, [r7, #12]
 80141a8:	60b9      	str	r1, [r7, #8]
 80141aa:	607a      	str	r2, [r7, #4]
 80141ac:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 80141ae:	68f8      	ldr	r0, [r7, #12]
 80141b0:	f7ff ffe9 	bl	8014186 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1Ev>
 80141b4:	68fb      	ldr	r3, [r7, #12]
 80141b6:	68ba      	ldr	r2, [r7, #8]
 80141b8:	601a      	str	r2, [r3, #0]
 80141ba:	68fb      	ldr	r3, [r7, #12]
 80141bc:	3304      	adds	r3, #4
 80141be:	6879      	ldr	r1, [r7, #4]
 80141c0:	4618      	mov	r0, r3
 80141c2:	f7f2 fcf3 	bl	8006bac <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 80141c6:	68fb      	ldr	r3, [r7, #12]
 80141c8:	3305      	adds	r3, #5
 80141ca:	6839      	ldr	r1, [r7, #0]
 80141cc:	4618      	mov	r0, r3
 80141ce:	f7f2 fced 	bl	8006bac <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 80141d2:	68bb      	ldr	r3, [r7, #8]
 80141d4:	2b00      	cmp	r3, #0
 80141d6:	d011      	beq.n	80141fc <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	2b00      	cmp	r3, #0
 80141dc:	db08      	blt.n	80141f0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 80141de:	687b      	ldr	r3, [r7, #4]
 80141e0:	2b01      	cmp	r3, #1
 80141e2:	d105      	bne.n	80141f0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 80141e4:	683b      	ldr	r3, [r7, #0]
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	db02      	blt.n	80141f0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 80141ea:	683b      	ldr	r3, [r7, #0]
 80141ec:	2b01      	cmp	r3, #1
 80141ee:	d005      	beq.n	80141fc <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 80141f0:	4b07      	ldr	r3, [pc, #28]	; (8014210 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x70>)
 80141f2:	4a08      	ldr	r2, [pc, #32]	; (8014214 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x74>)
 80141f4:	21b0      	movs	r1, #176	; 0xb0
 80141f6:	4808      	ldr	r0, [pc, #32]	; (8014218 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x78>)
 80141f8:	f009 fe4c 	bl	801de94 <__assert_func>
      checkSanity<Derived>();
 80141fc:	2100      	movs	r1, #0
 80141fe:	68f8      	ldr	r0, [r7, #12]
 8014200:	f000 f8c9 	bl	8014396 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 8014204:	68fb      	ldr	r3, [r7, #12]
 8014206:	4618      	mov	r0, r3
 8014208:	3710      	adds	r7, #16
 801420a:	46bd      	mov	sp, r7
 801420c:	bd80      	pop	{r7, pc}
 801420e:	bf00      	nop
 8014210:	08026420 	.word	0x08026420
 8014214:	08029534 	.word	0x08029534
 8014218:	080265d0 	.word	0x080265d0

0801421c <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EE4initEv>:
    void init()
 801421c:	b580      	push	{r7, lr}
 801421e:	b082      	sub	sp, #8
 8014220:	af00      	add	r7, sp, #0
 8014222:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	689b      	ldr	r3, [r3, #8]
 8014228:	4618      	mov	r0, r3
 801422a:	f7fe fd73 	bl	8012d14 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11outerStrideEv>
 801422e:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	615a      	str	r2, [r3, #20]
    }
 8014234:	bf00      	nop
 8014236:	3708      	adds	r7, #8
 8014238:	46bd      	mov	sp, r7
 801423a:	bd80      	pop	{r7, pc}

0801423c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 801423c:	b580      	push	{r7, lr}
 801423e:	b082      	sub	sp, #8
 8014240:	af00      	add	r7, sp, #0
 8014242:	6078      	str	r0, [r7, #4]
 8014244:	6039      	str	r1, [r7, #0]
 8014246:	6878      	ldr	r0, [r7, #4]
 8014248:	f000 f8b0 	bl	80143ac <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1Ev>
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	6839      	ldr	r1, [r7, #0]
 8014250:	4618      	mov	r0, r3
 8014252:	f000 f8b6 	bl	80143c2 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>
  }
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	4618      	mov	r0, r3
 801425a:	3708      	adds	r7, #8
 801425c:	46bd      	mov	sp, r7
 801425e:	bd80      	pop	{r7, pc}

08014260 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 8014260:	b580      	push	{r7, lr}
 8014262:	b084      	sub	sp, #16
 8014264:	af00      	add	r7, sp, #0
 8014266:	60f8      	str	r0, [r7, #12]
 8014268:	60b9      	str	r1, [r7, #8]
 801426a:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 801426c:	68fb      	ldr	r3, [r7, #12]
 801426e:	687a      	ldr	r2, [r7, #4]
 8014270:	68b9      	ldr	r1, [r7, #8]
 8014272:	4618      	mov	r0, r3
 8014274:	f000 f8cd 	bl	8014412 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE5coeffEii>
 8014278:	eef0 7a40 	vmov.f32	s15, s0
 801427c:	eeb0 0a67 	vmov.f32	s0, s15
 8014280:	3710      	adds	r7, #16
 8014282:	46bd      	mov	sp, r7
 8014284:	bd80      	pop	{r7, pc}

08014286 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi8ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8014286:	b580      	push	{r7, lr}
 8014288:	b082      	sub	sp, #8
 801428a:	af00      	add	r7, sp, #0
 801428c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 801428e:	2202      	movs	r2, #2
 8014290:	2102      	movs	r1, #2
 8014292:	6878      	ldr	r0, [r7, #4]
 8014294:	f7fd fe14 	bl	8011ec0 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8014298:	6878      	ldr	r0, [r7, #4]
 801429a:	f000 f8ea 	bl	8014472 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi9ELi9EE3runERSE_>
  }
 801429e:	bf00      	nop
 80142a0:	3708      	adds	r7, #8
 80142a2:	46bd      	mov	sp, r7
 80142a4:	bd80      	pop	{r7, pc}

080142a6 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80142a6:	b580      	push	{r7, lr}
 80142a8:	b082      	sub	sp, #8
 80142aa:	af00      	add	r7, sp, #0
 80142ac:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 80142ae:	2201      	movs	r2, #1
 80142b0:	2102      	movs	r1, #2
 80142b2:	6878      	ldr	r0, [r7, #4]
 80142b4:	f7fe faad 	bl	8012812 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80142b8:	6878      	ldr	r0, [r7, #4]
 80142ba:	f000 f8e4 	bl	8014486 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSC_>
  }
 80142be:	bf00      	nop
 80142c0:	3708      	adds	r7, #8
 80142c2:	46bd      	mov	sp, r7
 80142c4:	bd80      	pop	{r7, pc}

080142c6 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EEC1ERKNS_5BlockIS6_Li3ELi1ELb1EEE>:
  explicit block_evaluator(const XprType& block)
 80142c6:	b580      	push	{r7, lr}
 80142c8:	b082      	sub	sp, #8
 80142ca:	af00      	add	r7, sp, #0
 80142cc:	6078      	str	r0, [r7, #4]
 80142ce:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	6839      	ldr	r1, [r7, #0]
 80142d4:	4618      	mov	r0, r3
 80142d6:	f000 f8e6 	bl	80144a6 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS8_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 80142da:	683b      	ldr	r3, [r7, #0]
 80142dc:	4618      	mov	r0, r3
 80142de:	f000 f90c 	bl	80144fa <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE4dataEv>
 80142e2:	bf00      	nop
  }
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	4618      	mov	r0, r3
 80142e8:	3708      	adds	r7, #8
 80142ea:	46bd      	mov	sp, r7
 80142ec:	bd80      	pop	{r7, pc}

080142ee <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 80142ee:	b580      	push	{r7, lr}
 80142f0:	b082      	sub	sp, #8
 80142f2:	af00      	add	r7, sp, #0
 80142f4:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 80142f6:	f7f2 fc7e 	bl	8006bf6 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 80142fa:	4603      	mov	r3, r0
  }
 80142fc:	4618      	mov	r0, r3
 80142fe:	3708      	adds	r7, #8
 8014300:	46bd      	mov	sp, r7
 8014302:	bd80      	pop	{r7, pc}

08014304 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 8014304:	b580      	push	{r7, lr}
 8014306:	b082      	sub	sp, #8
 8014308:	af00      	add	r7, sp, #0
 801430a:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 801430c:	f7f2 fc7b 	bl	8006c06 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 8014310:	4603      	mov	r3, r0
  }
 8014312:	4618      	mov	r0, r3
 8014314:	3708      	adds	r7, #8
 8014316:	46bd      	mov	sp, r7
 8014318:	bd80      	pop	{r7, pc}

0801431a <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1ERKSG_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 801431a:	b580      	push	{r7, lr}
 801431c:	b082      	sub	sp, #8
 801431e:	af00      	add	r7, sp, #0
 8014320:	6078      	str	r0, [r7, #4]
 8014322:	6039      	str	r1, [r7, #0]
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	6839      	ldr	r1, [r7, #0]
 8014328:	4618      	mov	r0, r3
 801432a:	f000 f8f2 	bl	8014512 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffEC1ERKSG_>
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	4618      	mov	r0, r3
 8014332:	3708      	adds	r7, #8
 8014334:	46bd      	mov	sp, r7
 8014336:	bd80      	pop	{r7, pc}

08014338 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi0ELi3EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 8014338:	b580      	push	{r7, lr}
 801433a:	b084      	sub	sp, #16
 801433c:	af00      	add	r7, sp, #0
 801433e:	6078      	str	r0, [r7, #4]
 8014340:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8014342:	6839      	ldr	r1, [r7, #0]
 8014344:	6878      	ldr	r0, [r7, #4]
 8014346:	f000 f8f6 	bl	8014536 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi0ELi1EE3runERKSK_RKS3_>
 801434a:	eef0 7a40 	vmov.f32	s15, s0
 801434e:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 8014352:	6839      	ldr	r1, [r7, #0]
 8014354:	6878      	ldr	r0, [r7, #4]
 8014356:	f000 f8ff 	bl	8014558 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi1ELi2EE3runERKSK_RKS3_>
 801435a:	eef0 7a40 	vmov.f32	s15, s0
 801435e:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8014362:	f107 020c 	add.w	r2, r7, #12
 8014366:	f107 0308 	add.w	r3, r7, #8
 801436a:	4619      	mov	r1, r3
 801436c:	6838      	ldr	r0, [r7, #0]
 801436e:	f7f5 f808 	bl	8009382 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 8014372:	eef0 7a40 	vmov.f32	s15, s0
  }
 8014376:	eeb0 0a67 	vmov.f32	s0, s15
 801437a:	3710      	adds	r7, #16
 801437c:	46bd      	mov	sp, r7
 801437e:	bd80      	pop	{r7, pc}

08014380 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8014380:	b480      	push	{r7}
 8014382:	b083      	sub	sp, #12
 8014384:	af00      	add	r7, sp, #0
 8014386:	6078      	str	r0, [r7, #4]
    }
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	4618      	mov	r0, r3
 801438c:	370c      	adds	r7, #12
 801438e:	46bd      	mov	sp, r7
 8014390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014394:	4770      	bx	lr

08014396 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 8014396:	b480      	push	{r7}
 8014398:	b083      	sub	sp, #12
 801439a:	af00      	add	r7, sp, #0
 801439c:	6078      	str	r0, [r7, #4]
 801439e:	6039      	str	r1, [r7, #0]
    {}
 80143a0:	bf00      	nop
 80143a2:	370c      	adds	r7, #12
 80143a4:	46bd      	mov	sp, r7
 80143a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143aa:	4770      	bx	lr

080143ac <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 80143ac:	b480      	push	{r7}
 80143ae:	b083      	sub	sp, #12
 80143b0:	af00      	add	r7, sp, #0
 80143b2:	6078      	str	r0, [r7, #4]
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	4618      	mov	r0, r3
 80143b8:	370c      	adds	r7, #12
 80143ba:	46bd      	mov	sp, r7
 80143bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143c0:	4770      	bx	lr

080143c2 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 80143c2:	b590      	push	{r4, r7, lr}
 80143c4:	b083      	sub	sp, #12
 80143c6:	af00      	add	r7, sp, #0
 80143c8:	6078      	str	r0, [r7, #4]
 80143ca:	6039      	str	r1, [r7, #0]
 80143cc:	687c      	ldr	r4, [r7, #4]
 80143ce:	6838      	ldr	r0, [r7, #0]
 80143d0:	f000 f8e6 	bl	80145a0 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE7functorEv>
 80143d4:	4603      	mov	r3, r0
 80143d6:	4619      	mov	r1, r3
 80143d8:	4620      	mov	r0, r4
 80143da:	f7f1 f96d 	bl	80056b8 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	1d1c      	adds	r4, r3, #4
 80143e2:	6838      	ldr	r0, [r7, #0]
 80143e4:	f000 f8e8 	bl	80145b8 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE3lhsEv>
 80143e8:	4603      	mov	r3, r0
 80143ea:	4619      	mov	r1, r3
 80143ec:	4620      	mov	r0, r4
 80143ee:	f7fa ffac 	bl	800f34a <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1ERSA_>
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	f103 040c 	add.w	r4, r3, #12
 80143f8:	6838      	ldr	r0, [r7, #0]
 80143fa:	f000 f8e8 	bl	80145ce <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE3rhsEv>
 80143fe:	4603      	mov	r3, r0
 8014400:	4619      	mov	r1, r3
 8014402:	4620      	mov	r0, r4
 8014404:	f000 f8ef 	bl	80145e6 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERS7_>
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	4618      	mov	r0, r3
 801440c:	370c      	adds	r7, #12
 801440e:	46bd      	mov	sp, r7
 8014410:	bd90      	pop	{r4, r7, pc}

08014412 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8014412:	b590      	push	{r4, r7, lr}
 8014414:	b087      	sub	sp, #28
 8014416:	af00      	add	r7, sp, #0
 8014418:	60f8      	str	r0, [r7, #12]
 801441a:	60b9      	str	r1, [r7, #8]
 801441c:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 801441e:	68fb      	ldr	r3, [r7, #12]
 8014420:	4618      	mov	r0, r3
 8014422:	f000 f8ef 	bl	8014604 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>
 8014426:	4604      	mov	r4, r0
 8014428:	68fb      	ldr	r3, [r7, #12]
 801442a:	3304      	adds	r3, #4
 801442c:	687a      	ldr	r2, [r7, #4]
 801442e:	68b9      	ldr	r1, [r7, #8]
 8014430:	4618      	mov	r0, r3
 8014432:	f7fa ffb3 	bl	800f39c <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEENS0_10IndexBasedEfE5coeffEii>
 8014436:	eef0 7a40 	vmov.f32	s15, s0
 801443a:	edc7 7a04 	vstr	s15, [r7, #16]
 801443e:	68fb      	ldr	r3, [r7, #12]
 8014440:	330c      	adds	r3, #12
 8014442:	687a      	ldr	r2, [r7, #4]
 8014444:	68b9      	ldr	r1, [r7, #8]
 8014446:	4618      	mov	r0, r3
 8014448:	f000 f8e7 	bl	801461a <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEE5coeffEii>
 801444c:	eef0 7a40 	vmov.f32	s15, s0
 8014450:	edc7 7a05 	vstr	s15, [r7, #20]
 8014454:	f107 0214 	add.w	r2, r7, #20
 8014458:	f107 0310 	add.w	r3, r7, #16
 801445c:	4619      	mov	r1, r3
 801445e:	4620      	mov	r0, r4
 8014460:	f7fa ffd0 	bl	800f404 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 8014464:	eef0 7a40 	vmov.f32	s15, s0
  }
 8014468:	eeb0 0a67 	vmov.f32	s0, s15
 801446c:	371c      	adds	r7, #28
 801446e:	46bd      	mov	sp, r7
 8014470:	bd90      	pop	{r4, r7, pc}

08014472 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi9ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 8014472:	b480      	push	{r7}
 8014474:	b083      	sub	sp, #12
 8014476:	af00      	add	r7, sp, #0
 8014478:	6078      	str	r0, [r7, #4]
 801447a:	bf00      	nop
 801447c:	370c      	adds	r7, #12
 801447e:	46bd      	mov	sp, r7
 8014480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014484:	4770      	bx	lr

08014486 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8014486:	b580      	push	{r7, lr}
 8014488:	b082      	sub	sp, #8
 801448a:	af00      	add	r7, sp, #0
 801448c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 801448e:	2202      	movs	r2, #2
 8014490:	2102      	movs	r1, #2
 8014492:	6878      	ldr	r0, [r7, #4]
 8014494:	f7fe f9bd 	bl	8012812 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8014498:	6878      	ldr	r0, [r7, #4]
 801449a:	f000 f8df 	bl	801465c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSC_>
  }
 801449e:	bf00      	nop
 80144a0:	3708      	adds	r7, #8
 80144a2:	46bd      	mov	sp, r7
 80144a4:	bd80      	pop	{r7, pc}

080144a6 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS8_>:
  explicit mapbase_evaluator(const XprType& map)
 80144a6:	b590      	push	{r4, r7, lr}
 80144a8:	b083      	sub	sp, #12
 80144aa:	af00      	add	r7, sp, #0
 80144ac:	6078      	str	r0, [r7, #4]
 80144ae:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 80144b0:	6878      	ldr	r0, [r7, #4]
 80144b2:	f000 f8f9 	bl	80146a8 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 80144b6:	683b      	ldr	r3, [r7, #0]
 80144b8:	4618      	mov	r0, r3
 80144ba:	f000 f81e 	bl	80144fa <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE4dataEv>
 80144be:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	601a      	str	r2, [r3, #0]
 80144c4:	687b      	ldr	r3, [r7, #4]
 80144c6:	1d1c      	adds	r4, r3, #4
 80144c8:	683b      	ldr	r3, [r7, #0]
 80144ca:	4618      	mov	r0, r3
 80144cc:	f000 f8d0 	bl	8014670 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EE11innerStrideEv>
 80144d0:	4603      	mov	r3, r0
 80144d2:	4619      	mov	r1, r3
 80144d4:	4620      	mov	r0, r4
 80144d6:	f7f2 fb69 	bl	8006bac <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	1d5c      	adds	r4, r3, #5
 80144de:	683b      	ldr	r3, [r7, #0]
 80144e0:	4618      	mov	r0, r3
 80144e2:	f000 f8d3 	bl	801468c <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EE11outerStrideEv>
 80144e6:	4603      	mov	r3, r0
 80144e8:	4619      	mov	r1, r3
 80144ea:	4620      	mov	r0, r4
 80144ec:	f7f2 fb44 	bl	8006b78 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	4618      	mov	r0, r3
 80144f4:	370c      	adds	r7, #12
 80144f6:	46bd      	mov	sp, r7
 80144f8:	bd90      	pop	{r4, r7, pc}

080144fa <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC inline const Scalar* data() const { return m_data; }
 80144fa:	b480      	push	{r7}
 80144fc:	b083      	sub	sp, #12
 80144fe:	af00      	add	r7, sp, #0
 8014500:	6078      	str	r0, [r7, #4]
 8014502:	687b      	ldr	r3, [r7, #4]
 8014504:	681b      	ldr	r3, [r3, #0]
 8014506:	4618      	mov	r0, r3
 8014508:	370c      	adds	r7, #12
 801450a:	46bd      	mov	sp, r7
 801450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014510:	4770      	bx	lr

08014512 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffEC1ERKSG_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 8014512:	b580      	push	{r7, lr}
 8014514:	b082      	sub	sp, #8
 8014516:	af00      	add	r7, sp, #0
 8014518:	6078      	str	r0, [r7, #4]
 801451a:	6039      	str	r1, [r7, #0]
 801451c:	6878      	ldr	r0, [r7, #4]
 801451e:	f000 f8ce 	bl	80146be <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1Ev>
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	6839      	ldr	r1, [r7, #0]
 8014526:	4618      	mov	r0, r3
 8014528:	f000 f8d4 	bl	80146d4 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE4DataC1ERKSG_>
  }
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	4618      	mov	r0, r3
 8014530:	3708      	adds	r7, #8
 8014532:	46bd      	mov	sp, r7
 8014534:	bd80      	pop	{r7, pc}

08014536 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi0ELi1EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8014536:	b580      	push	{r7, lr}
 8014538:	b082      	sub	sp, #8
 801453a:	af00      	add	r7, sp, #0
 801453c:	6078      	str	r0, [r7, #4]
 801453e:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8014540:	2200      	movs	r2, #0
 8014542:	2100      	movs	r1, #0
 8014544:	6878      	ldr	r0, [r7, #4]
 8014546:	f000 f8ed 	bl	8014724 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE17coeffByOuterInnerEii>
 801454a:	eef0 7a40 	vmov.f32	s15, s0
  }
 801454e:	eeb0 0a67 	vmov.f32	s0, s15
 8014552:	3708      	adds	r7, #8
 8014554:	46bd      	mov	sp, r7
 8014556:	bd80      	pop	{r7, pc}

08014558 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi1ELi2EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 8014558:	b580      	push	{r7, lr}
 801455a:	b084      	sub	sp, #16
 801455c:	af00      	add	r7, sp, #0
 801455e:	6078      	str	r0, [r7, #4]
 8014560:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8014562:	6839      	ldr	r1, [r7, #0]
 8014564:	6878      	ldr	r0, [r7, #4]
 8014566:	f000 f8f0 	bl	801474a <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi1ELi1EE3runERKSK_RKS3_>
 801456a:	eef0 7a40 	vmov.f32	s15, s0
 801456e:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 8014572:	6839      	ldr	r1, [r7, #0]
 8014574:	6878      	ldr	r0, [r7, #4]
 8014576:	f000 f8f9 	bl	801476c <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi2ELi1EE3runERKSK_RKS3_>
 801457a:	eef0 7a40 	vmov.f32	s15, s0
 801457e:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8014582:	f107 020c 	add.w	r2, r7, #12
 8014586:	f107 0308 	add.w	r3, r7, #8
 801458a:	4619      	mov	r1, r3
 801458c:	6838      	ldr	r0, [r7, #0]
 801458e:	f7f4 fef8 	bl	8009382 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 8014592:	eef0 7a40 	vmov.f32	s15, s0
  }
 8014596:	eeb0 0a67 	vmov.f32	s0, s15
 801459a:	3710      	adds	r7, #16
 801459c:	46bd      	mov	sp, r7
 801459e:	bd80      	pop	{r7, pc}

080145a0 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 80145a0:	b480      	push	{r7}
 80145a2:	b083      	sub	sp, #12
 80145a4:	af00      	add	r7, sp, #0
 80145a6:	6078      	str	r0, [r7, #4]
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	3330      	adds	r3, #48	; 0x30
 80145ac:	4618      	mov	r0, r3
 80145ae:	370c      	adds	r7, #12
 80145b0:	46bd      	mov	sp, r7
 80145b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145b6:	4770      	bx	lr

080145b8 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 80145b8:	b480      	push	{r7}
 80145ba:	b083      	sub	sp, #12
 80145bc:	af00      	add	r7, sp, #0
 80145be:	6078      	str	r0, [r7, #4]
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	4618      	mov	r0, r3
 80145c4:	370c      	adds	r7, #12
 80145c6:	46bd      	mov	sp, r7
 80145c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145cc:	4770      	bx	lr

080145ce <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 80145ce:	b480      	push	{r7}
 80145d0:	b083      	sub	sp, #12
 80145d2:	af00      	add	r7, sp, #0
 80145d4:	6078      	str	r0, [r7, #4]
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	3318      	adds	r3, #24
 80145da:	4618      	mov	r0, r3
 80145dc:	370c      	adds	r7, #12
 80145de:	46bd      	mov	sp, r7
 80145e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145e4:	4770      	bx	lr

080145e6 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 80145e6:	b580      	push	{r7, lr}
 80145e8:	b082      	sub	sp, #8
 80145ea:	af00      	add	r7, sp, #0
 80145ec:	6078      	str	r0, [r7, #4]
 80145ee:	6039      	str	r1, [r7, #0]
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	6839      	ldr	r1, [r7, #0]
 80145f4:	4618      	mov	r0, r3
 80145f6:	f000 f8ca 	bl	801478e <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERKS6_>
 80145fa:	687b      	ldr	r3, [r7, #4]
 80145fc:	4618      	mov	r0, r3
 80145fe:	3708      	adds	r7, #8
 8014600:	46bd      	mov	sp, r7
 8014602:	bd80      	pop	{r7, pc}

08014604 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 8014604:	b480      	push	{r7}
 8014606:	b083      	sub	sp, #12
 8014608:	af00      	add	r7, sp, #0
 801460a:	6078      	str	r0, [r7, #4]
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	4618      	mov	r0, r3
 8014610:	370c      	adds	r7, #12
 8014612:	46bd      	mov	sp, r7
 8014614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014618:	4770      	bx	lr

0801461a <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 801461a:	b5b0      	push	{r4, r5, r7, lr}
 801461c:	b084      	sub	sp, #16
 801461e:	af00      	add	r7, sp, #0
 8014620:	60f8      	str	r0, [r7, #12]
 8014622:	60b9      	str	r1, [r7, #8]
 8014624:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 8014626:	68fb      	ldr	r3, [r7, #12]
 8014628:	681c      	ldr	r4, [r3, #0]
 801462a:	68f8      	ldr	r0, [r7, #12]
 801462c:	f000 f8be 	bl	80147ac <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEE9colStrideEv>
 8014630:	4602      	mov	r2, r0
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	fb03 f502 	mul.w	r5, r3, r2
 8014638:	68f8      	ldr	r0, [r7, #12]
 801463a:	f000 f8c2 	bl	80147c2 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEE9rowStrideEv>
 801463e:	4602      	mov	r2, r0
 8014640:	68bb      	ldr	r3, [r7, #8]
 8014642:	fb02 f303 	mul.w	r3, r2, r3
 8014646:	442b      	add	r3, r5
 8014648:	009b      	lsls	r3, r3, #2
 801464a:	4423      	add	r3, r4
 801464c:	681b      	ldr	r3, [r3, #0]
 801464e:	ee07 3a90 	vmov	s15, r3
  }
 8014652:	eeb0 0a67 	vmov.f32	s0, s15
 8014656:	3710      	adds	r7, #16
 8014658:	46bd      	mov	sp, r7
 801465a:	bdb0      	pop	{r4, r5, r7, pc}

0801465c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 801465c:	b480      	push	{r7}
 801465e:	b083      	sub	sp, #12
 8014660:	af00      	add	r7, sp, #0
 8014662:	6078      	str	r0, [r7, #4]
 8014664:	bf00      	nop
 8014666:	370c      	adds	r7, #12
 8014668:	46bd      	mov	sp, r7
 801466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801466e:	4770      	bx	lr

08014670 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 8014670:	b580      	push	{r7, lr}
 8014672:	b082      	sub	sp, #8
 8014674:	af00      	add	r7, sp, #0
 8014676:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	3308      	adds	r3, #8
 801467c:	4618      	mov	r0, r3
 801467e:	f7fe fd4e 	bl	801311e <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE11innerStrideEv>
 8014682:	4603      	mov	r3, r0
    }
 8014684:	4618      	mov	r0, r3
 8014686:	3708      	adds	r7, #8
 8014688:	46bd      	mov	sp, r7
 801468a:	bd80      	pop	{r7, pc}

0801468c <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 801468c:	b580      	push	{r7, lr}
 801468e:	b082      	sub	sp, #8
 8014690:	af00      	add	r7, sp, #0
 8014692:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8014694:	687b      	ldr	r3, [r7, #4]
 8014696:	3308      	adds	r3, #8
 8014698:	4618      	mov	r0, r3
 801469a:	f7fe fd54 	bl	8013146 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE11outerStrideEv>
 801469e:	4603      	mov	r3, r0
    }
 80146a0:	4618      	mov	r0, r3
 80146a2:	3708      	adds	r7, #8
 80146a4:	46bd      	mov	sp, r7
 80146a6:	bd80      	pop	{r7, pc}

080146a8 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 80146a8:	b480      	push	{r7}
 80146aa:	b083      	sub	sp, #12
 80146ac:	af00      	add	r7, sp, #0
 80146ae:	6078      	str	r0, [r7, #4]
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	4618      	mov	r0, r3
 80146b4:	370c      	adds	r7, #12
 80146b6:	46bd      	mov	sp, r7
 80146b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146bc:	4770      	bx	lr

080146be <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1Ev>:
 80146be:	b480      	push	{r7}
 80146c0:	b083      	sub	sp, #12
 80146c2:	af00      	add	r7, sp, #0
 80146c4:	6078      	str	r0, [r7, #4]
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	4618      	mov	r0, r3
 80146ca:	370c      	adds	r7, #12
 80146cc:	46bd      	mov	sp, r7
 80146ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146d2:	4770      	bx	lr

080146d4 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE4DataC1ERKSG_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 80146d4:	b590      	push	{r4, r7, lr}
 80146d6:	b083      	sub	sp, #12
 80146d8:	af00      	add	r7, sp, #0
 80146da:	6078      	str	r0, [r7, #4]
 80146dc:	6039      	str	r1, [r7, #0]
 80146de:	687c      	ldr	r4, [r7, #4]
 80146e0:	6838      	ldr	r0, [r7, #0]
 80146e2:	f000 f879 	bl	80147d8 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE7functorEv>
 80146e6:	4603      	mov	r3, r0
 80146e8:	4619      	mov	r1, r3
 80146ea:	4620      	mov	r0, r4
 80146ec:	f7f0 ffe4 	bl	80056b8 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 80146f0:	687b      	ldr	r3, [r7, #4]
 80146f2:	1d1c      	adds	r4, r3, #4
 80146f4:	6838      	ldr	r0, [r7, #0]
 80146f6:	f000 f87b 	bl	80147f0 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE3lhsEv>
 80146fa:	4603      	mov	r3, r0
 80146fc:	4619      	mov	r1, r3
 80146fe:	4620      	mov	r0, r4
 8014700:	f000 f88d 	bl	801481e <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1ERSA_>
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	f103 0414 	add.w	r4, r3, #20
 801470a:	6838      	ldr	r0, [r7, #0]
 801470c:	f000 f87b 	bl	8014806 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE3rhsEv>
 8014710:	4603      	mov	r3, r0
 8014712:	4619      	mov	r1, r3
 8014714:	4620      	mov	r0, r4
 8014716:	f000 f891 	bl	801483c <_ZN5Eigen8internal9evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERS6_>
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	4618      	mov	r0, r3
 801471e:	370c      	adds	r7, #12
 8014720:	46bd      	mov	sp, r7
 8014722:	bd90      	pop	{r4, r7, pc}

08014724 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 8014724:	b580      	push	{r7, lr}
 8014726:	b084      	sub	sp, #16
 8014728:	af00      	add	r7, sp, #0
 801472a:	60f8      	str	r0, [r7, #12]
 801472c:	60b9      	str	r1, [r7, #8]
 801472e:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 8014730:	68fb      	ldr	r3, [r7, #12]
 8014732:	68ba      	ldr	r2, [r7, #8]
 8014734:	6879      	ldr	r1, [r7, #4]
 8014736:	4618      	mov	r0, r3
 8014738:	f000 f88f 	bl	801485a <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE5coeffEii>
 801473c:	eef0 7a40 	vmov.f32	s15, s0
 8014740:	eeb0 0a67 	vmov.f32	s0, s15
 8014744:	3710      	adds	r7, #16
 8014746:	46bd      	mov	sp, r7
 8014748:	bd80      	pop	{r7, pc}

0801474a <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi1ELi1EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 801474a:	b580      	push	{r7, lr}
 801474c:	b082      	sub	sp, #8
 801474e:	af00      	add	r7, sp, #0
 8014750:	6078      	str	r0, [r7, #4]
 8014752:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8014754:	2201      	movs	r2, #1
 8014756:	2100      	movs	r1, #0
 8014758:	6878      	ldr	r0, [r7, #4]
 801475a:	f7ff ffe3 	bl	8014724 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE17coeffByOuterInnerEii>
 801475e:	eef0 7a40 	vmov.f32	s15, s0
  }
 8014762:	eeb0 0a67 	vmov.f32	s0, s15
 8014766:	3708      	adds	r7, #8
 8014768:	46bd      	mov	sp, r7
 801476a:	bd80      	pop	{r7, pc}

0801476c <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi2ELi1EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 801476c:	b580      	push	{r7, lr}
 801476e:	b082      	sub	sp, #8
 8014770:	af00      	add	r7, sp, #0
 8014772:	6078      	str	r0, [r7, #4]
 8014774:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8014776:	2202      	movs	r2, #2
 8014778:	2100      	movs	r1, #0
 801477a:	6878      	ldr	r0, [r7, #4]
 801477c:	f7ff ffd2 	bl	8014724 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE17coeffByOuterInnerEii>
 8014780:	eef0 7a40 	vmov.f32	s15, s0
  }
 8014784:	eeb0 0a67 	vmov.f32	s0, s15
 8014788:	3708      	adds	r7, #8
 801478a:	46bd      	mov	sp, r7
 801478c:	bd80      	pop	{r7, pc}

0801478e <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 801478e:	b580      	push	{r7, lr}
 8014790:	b082      	sub	sp, #8
 8014792:	af00      	add	r7, sp, #0
 8014794:	6078      	str	r0, [r7, #4]
 8014796:	6039      	str	r1, [r7, #0]
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	6839      	ldr	r1, [r7, #0]
 801479c:	4618      	mov	r0, r3
 801479e:	f000 f887 	bl	80148b0 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EEC1ERKNS_5BlockIS4_Li1ELi1ELb0EEE>
  }
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	4618      	mov	r0, r3
 80147a6:	3708      	adds	r7, #8
 80147a8:	46bd      	mov	sp, r7
 80147aa:	bd80      	pop	{r7, pc}

080147ac <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 80147ac:	b580      	push	{r7, lr}
 80147ae:	b082      	sub	sp, #8
 80147b0:	af00      	add	r7, sp, #0
 80147b2:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 80147b4:	f7f2 fa27 	bl	8006c06 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 80147b8:	4603      	mov	r3, r0
  }
 80147ba:	4618      	mov	r0, r3
 80147bc:	3708      	adds	r7, #8
 80147be:	46bd      	mov	sp, r7
 80147c0:	bd80      	pop	{r7, pc}

080147c2 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 80147c2:	b580      	push	{r7, lr}
 80147c4:	b082      	sub	sp, #8
 80147c6:	af00      	add	r7, sp, #0
 80147c8:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 80147ca:	f7f2 fa14 	bl	8006bf6 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 80147ce:	4603      	mov	r3, r0
  }
 80147d0:	4618      	mov	r0, r3
 80147d2:	3708      	adds	r7, #8
 80147d4:	46bd      	mov	sp, r7
 80147d6:	bd80      	pop	{r7, pc}

080147d8 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 80147d8:	b480      	push	{r7}
 80147da:	b083      	sub	sp, #12
 80147dc:	af00      	add	r7, sp, #0
 80147de:	6078      	str	r0, [r7, #4]
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	330c      	adds	r3, #12
 80147e4:	4618      	mov	r0, r3
 80147e6:	370c      	adds	r7, #12
 80147e8:	46bd      	mov	sp, r7
 80147ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147ee:	4770      	bx	lr

080147f0 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 80147f0:	b480      	push	{r7}
 80147f2:	b083      	sub	sp, #12
 80147f4:	af00      	add	r7, sp, #0
 80147f6:	6078      	str	r0, [r7, #4]
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	4618      	mov	r0, r3
 80147fc:	370c      	adds	r7, #12
 80147fe:	46bd      	mov	sp, r7
 8014800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014804:	4770      	bx	lr

08014806 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 8014806:	b480      	push	{r7}
 8014808:	b083      	sub	sp, #12
 801480a:	af00      	add	r7, sp, #0
 801480c:	6078      	str	r0, [r7, #4]
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	3308      	adds	r3, #8
 8014812:	4618      	mov	r0, r3
 8014814:	370c      	adds	r7, #12
 8014816:	46bd      	mov	sp, r7
 8014818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801481c:	4770      	bx	lr

0801481e <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1ERSA_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 801481e:	b580      	push	{r7, lr}
 8014820:	b082      	sub	sp, #8
 8014822:	af00      	add	r7, sp, #0
 8014824:	6078      	str	r0, [r7, #4]
 8014826:	6039      	str	r1, [r7, #0]
 8014828:	687b      	ldr	r3, [r7, #4]
 801482a:	6839      	ldr	r1, [r7, #0]
 801482c:	4618      	mov	r0, r3
 801482e:	f000 f853 	bl	80148d8 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1ERKS9_>
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	4618      	mov	r0, r3
 8014836:	3708      	adds	r7, #8
 8014838:	46bd      	mov	sp, r7
 801483a:	bd80      	pop	{r7, pc}

0801483c <_ZN5Eigen8internal9evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERS6_>:
 801483c:	b580      	push	{r7, lr}
 801483e:	b082      	sub	sp, #8
 8014840:	af00      	add	r7, sp, #0
 8014842:	6078      	str	r0, [r7, #4]
 8014844:	6039      	str	r1, [r7, #0]
 8014846:	687b      	ldr	r3, [r7, #4]
 8014848:	6839      	ldr	r1, [r7, #0]
 801484a:	4618      	mov	r0, r3
 801484c:	f7fc f952 	bl	8010af4 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERKS5_>
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	4618      	mov	r0, r3
 8014854:	3708      	adds	r7, #8
 8014856:	46bd      	mov	sp, r7
 8014858:	bd80      	pop	{r7, pc}

0801485a <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 801485a:	b590      	push	{r4, r7, lr}
 801485c:	b087      	sub	sp, #28
 801485e:	af00      	add	r7, sp, #0
 8014860:	60f8      	str	r0, [r7, #12]
 8014862:	60b9      	str	r1, [r7, #8]
 8014864:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 8014866:	68fb      	ldr	r3, [r7, #12]
 8014868:	4618      	mov	r0, r3
 801486a:	f000 f844 	bl	80148f6 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE4Data4funcEv>
 801486e:	4604      	mov	r4, r0
 8014870:	68fb      	ldr	r3, [r7, #12]
 8014872:	3304      	adds	r3, #4
 8014874:	687a      	ldr	r2, [r7, #4]
 8014876:	68b9      	ldr	r1, [r7, #8]
 8014878:	4618      	mov	r0, r3
 801487a:	f000 f847 	bl	801490c <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEENS0_10IndexBasedEfE5coeffEii>
 801487e:	eef0 7a40 	vmov.f32	s15, s0
 8014882:	edc7 7a05 	vstr	s15, [r7, #20]
 8014886:	68fb      	ldr	r3, [r7, #12]
 8014888:	3314      	adds	r3, #20
 801488a:	687a      	ldr	r2, [r7, #4]
 801488c:	68b9      	ldr	r1, [r7, #8]
 801488e:	4618      	mov	r0, r3
 8014890:	f000 f851 	bl	8014936 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfE5coeffEii>
 8014894:	4602      	mov	r2, r0
 8014896:	f107 0314 	add.w	r3, r7, #20
 801489a:	4619      	mov	r1, r3
 801489c:	4620      	mov	r0, r4
 801489e:	f7fa fdb1 	bl	800f404 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 80148a2:	eef0 7a40 	vmov.f32	s15, s0
  }
 80148a6:	eeb0 0a67 	vmov.f32	s0, s15
 80148aa:	371c      	adds	r7, #28
 80148ac:	46bd      	mov	sp, r7
 80148ae:	bd90      	pop	{r4, r7, pc}

080148b0 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EEC1ERKNS_5BlockIS4_Li1ELi1ELb0EEE>:
  explicit block_evaluator(const XprType& block)
 80148b0:	b580      	push	{r7, lr}
 80148b2:	b082      	sub	sp, #8
 80148b4:	af00      	add	r7, sp, #0
 80148b6:	6078      	str	r0, [r7, #4]
 80148b8:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	6839      	ldr	r1, [r7, #0]
 80148be:	4618      	mov	r0, r3
 80148c0:	f000 f84a 	bl	8014958 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEEC1ERKS6_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 80148c4:	683b      	ldr	r3, [r7, #0]
 80148c6:	4618      	mov	r0, r3
 80148c8:	f000 f870 	bl	80149ac <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE4dataEv>
 80148cc:	bf00      	nop
  }
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	4618      	mov	r0, r3
 80148d2:	3708      	adds	r7, #8
 80148d4:	46bd      	mov	sp, r7
 80148d6:	bd80      	pop	{r7, pc}

080148d8 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1ERKS9_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 80148d8:	b580      	push	{r7, lr}
 80148da:	b082      	sub	sp, #8
 80148dc:	af00      	add	r7, sp, #0
 80148de:	6078      	str	r0, [r7, #4]
 80148e0:	6039      	str	r1, [r7, #0]
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	6839      	ldr	r1, [r7, #0]
 80148e6:	4618      	mov	r0, r3
 80148e8:	f000 f86c 	bl	80149c4 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEENS0_10IndexBasedEfEC1ERKS9_>
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	4618      	mov	r0, r3
 80148f0:	3708      	adds	r7, #8
 80148f2:	46bd      	mov	sp, r7
 80148f4:	bd80      	pop	{r7, pc}

080148f6 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 80148f6:	b480      	push	{r7}
 80148f8:	b083      	sub	sp, #12
 80148fa:	af00      	add	r7, sp, #0
 80148fc:	6078      	str	r0, [r7, #4]
 80148fe:	687b      	ldr	r3, [r7, #4]
 8014900:	4618      	mov	r0, r3
 8014902:	370c      	adds	r7, #12
 8014904:	46bd      	mov	sp, r7
 8014906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801490a:	4770      	bx	lr

0801490c <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 801490c:	b580      	push	{r7, lr}
 801490e:	b084      	sub	sp, #16
 8014910:	af00      	add	r7, sp, #0
 8014912:	60f8      	str	r0, [r7, #12]
 8014914:	60b9      	str	r1, [r7, #8]
 8014916:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 8014918:	68fb      	ldr	r3, [r7, #12]
 801491a:	68ba      	ldr	r2, [r7, #8]
 801491c:	6879      	ldr	r1, [r7, #4]
 801491e:	4618      	mov	r0, r3
 8014920:	f7ff f85b 	bl	80139da <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE5coeffEii>
 8014924:	4603      	mov	r3, r0
 8014926:	681b      	ldr	r3, [r3, #0]
 8014928:	ee07 3a90 	vmov	s15, r3
  }
 801492c:	eeb0 0a67 	vmov.f32	s0, s15
 8014930:	3710      	adds	r7, #16
 8014932:	46bd      	mov	sp, r7
 8014934:	bd80      	pop	{r7, pc}

08014936 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8014936:	b580      	push	{r7, lr}
 8014938:	b084      	sub	sp, #16
 801493a:	af00      	add	r7, sp, #0
 801493c:	60f8      	str	r0, [r7, #12]
 801493e:	60b9      	str	r1, [r7, #8]
 8014940:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 8014942:	68fb      	ldr	r3, [r7, #12]
 8014944:	68ba      	ldr	r2, [r7, #8]
 8014946:	6879      	ldr	r1, [r7, #4]
 8014948:	4618      	mov	r0, r3
 801494a:	f7ff f846 	bl	80139da <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE5coeffEii>
 801494e:	4603      	mov	r3, r0
  }
 8014950:	4618      	mov	r0, r3
 8014952:	3710      	adds	r7, #16
 8014954:	46bd      	mov	sp, r7
 8014956:	bd80      	pop	{r7, pc}

08014958 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEEC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 8014958:	b590      	push	{r4, r7, lr}
 801495a:	b083      	sub	sp, #12
 801495c:	af00      	add	r7, sp, #0
 801495e:	6078      	str	r0, [r7, #4]
 8014960:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 8014962:	6878      	ldr	r0, [r7, #4]
 8014964:	f000 f860 	bl	8014a28 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 8014968:	683b      	ldr	r3, [r7, #0]
 801496a:	4618      	mov	r0, r3
 801496c:	f000 f81e 	bl	80149ac <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE4dataEv>
 8014970:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	601a      	str	r2, [r3, #0]
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	1d1c      	adds	r4, r3, #4
 801497a:	683b      	ldr	r3, [r7, #0]
 801497c:	4618      	mov	r0, r3
 801497e:	f000 f837 	bl	80149f0 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EE11innerStrideEv>
 8014982:	4603      	mov	r3, r0
 8014984:	4619      	mov	r1, r3
 8014986:	4620      	mov	r0, r4
 8014988:	f7f2 f910 	bl	8006bac <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	1d5c      	adds	r4, r3, #5
 8014990:	683b      	ldr	r3, [r7, #0]
 8014992:	4618      	mov	r0, r3
 8014994:	f000 f83a 	bl	8014a0c <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EE11outerStrideEv>
 8014998:	4603      	mov	r3, r0
 801499a:	4619      	mov	r1, r3
 801499c:	4620      	mov	r0, r4
 801499e:	f7f2 f8eb 	bl	8006b78 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	4618      	mov	r0, r3
 80149a6:	370c      	adds	r7, #12
 80149a8:	46bd      	mov	sp, r7
 80149aa:	bd90      	pop	{r4, r7, pc}

080149ac <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE4dataEv>:
 80149ac:	b480      	push	{r7}
 80149ae:	b083      	sub	sp, #12
 80149b0:	af00      	add	r7, sp, #0
 80149b2:	6078      	str	r0, [r7, #4]
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	681b      	ldr	r3, [r3, #0]
 80149b8:	4618      	mov	r0, r3
 80149ba:	370c      	adds	r7, #12
 80149bc:	46bd      	mov	sp, r7
 80149be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149c2:	4770      	bx	lr

080149c4 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEENS0_10IndexBasedEfEC1ERKS9_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 80149c4:	b590      	push	{r4, r7, lr}
 80149c6:	b083      	sub	sp, #12
 80149c8:	af00      	add	r7, sp, #0
 80149ca:	6078      	str	r0, [r7, #4]
 80149cc:	6039      	str	r1, [r7, #0]
 80149ce:	6878      	ldr	r0, [r7, #4]
 80149d0:	f000 f840 	bl	8014a54 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1Ev>
 80149d4:	687c      	ldr	r4, [r7, #4]
 80149d6:	6838      	ldr	r0, [r7, #0]
 80149d8:	f000 f831 	bl	8014a3e <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE16nestedExpressionEv>
 80149dc:	4603      	mov	r3, r0
 80149de:	4619      	mov	r1, r3
 80149e0:	4620      	mov	r0, r4
 80149e2:	f000 f842 	bl	8014a6a <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1ERS7_>
 80149e6:	687b      	ldr	r3, [r7, #4]
 80149e8:	4618      	mov	r0, r3
 80149ea:	370c      	adds	r7, #12
 80149ec:	46bd      	mov	sp, r7
 80149ee:	bd90      	pop	{r4, r7, pc}

080149f0 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 80149f0:	b580      	push	{r7, lr}
 80149f2:	b082      	sub	sp, #8
 80149f4:	af00      	add	r7, sp, #0
 80149f6:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	689b      	ldr	r3, [r3, #8]
 80149fc:	4618      	mov	r0, r3
 80149fe:	f7fe fecd 	bl	801379c <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11innerStrideEv>
 8014a02:	4603      	mov	r3, r0
    }
 8014a04:	4618      	mov	r0, r3
 8014a06:	3708      	adds	r7, #8
 8014a08:	46bd      	mov	sp, r7
 8014a0a:	bd80      	pop	{r7, pc}

08014a0c <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 8014a0c:	b580      	push	{r7, lr}
 8014a0e:	b082      	sub	sp, #8
 8014a10:	af00      	add	r7, sp, #0
 8014a12:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	689b      	ldr	r3, [r3, #8]
 8014a18:	4618      	mov	r0, r3
 8014a1a:	f7fe f97b 	bl	8012d14 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11outerStrideEv>
 8014a1e:	4603      	mov	r3, r0
    }
 8014a20:	4618      	mov	r0, r3
 8014a22:	3708      	adds	r7, #8
 8014a24:	46bd      	mov	sp, r7
 8014a26:	bd80      	pop	{r7, pc}

08014a28 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8014a28:	b480      	push	{r7}
 8014a2a:	b083      	sub	sp, #12
 8014a2c:	af00      	add	r7, sp, #0
 8014a2e:	6078      	str	r0, [r7, #4]
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	4618      	mov	r0, r3
 8014a34:	370c      	adds	r7, #12
 8014a36:	46bd      	mov	sp, r7
 8014a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a3c:	4770      	bx	lr

08014a3e <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE16nestedExpressionEv>:
 8014a3e:	b480      	push	{r7}
 8014a40:	b083      	sub	sp, #12
 8014a42:	af00      	add	r7, sp, #0
 8014a44:	6078      	str	r0, [r7, #4]
 8014a46:	687b      	ldr	r3, [r7, #4]
 8014a48:	4618      	mov	r0, r3
 8014a4a:	370c      	adds	r7, #12
 8014a4c:	46bd      	mov	sp, r7
 8014a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a52:	4770      	bx	lr

08014a54 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1Ev>:
 8014a54:	b480      	push	{r7}
 8014a56:	b083      	sub	sp, #12
 8014a58:	af00      	add	r7, sp, #0
 8014a5a:	6078      	str	r0, [r7, #4]
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	4618      	mov	r0, r3
 8014a60:	370c      	adds	r7, #12
 8014a62:	46bd      	mov	sp, r7
 8014a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a68:	4770      	bx	lr

08014a6a <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8014a6a:	b580      	push	{r7, lr}
 8014a6c:	b082      	sub	sp, #8
 8014a6e:	af00      	add	r7, sp, #0
 8014a70:	6078      	str	r0, [r7, #4]
 8014a72:	6039      	str	r1, [r7, #0]
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	6839      	ldr	r1, [r7, #0]
 8014a78:	4618      	mov	r0, r3
 8014a7a:	f000 f805 	bl	8014a88 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1ERKS6_>
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	4618      	mov	r0, r3
 8014a82:	3708      	adds	r7, #8
 8014a84:	46bd      	mov	sp, r7
 8014a86:	bd80      	pop	{r7, pc}

08014a88 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1ERKS6_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8014a88:	b580      	push	{r7, lr}
 8014a8a:	b082      	sub	sp, #8
 8014a8c:	af00      	add	r7, sp, #0
 8014a8e:	6078      	str	r0, [r7, #4]
 8014a90:	6039      	str	r1, [r7, #0]
 8014a92:	687b      	ldr	r3, [r7, #4]
 8014a94:	6839      	ldr	r1, [r7, #0]
 8014a96:	4618      	mov	r0, r3
 8014a98:	f000 f805 	bl	8014aa6 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEELi3ENS_10DenseShapeES7_ffEC1ERKS6_>
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	4618      	mov	r0, r3
 8014aa0:	3708      	adds	r7, #8
 8014aa2:	46bd      	mov	sp, r7
 8014aa4:	bd80      	pop	{r7, pc}

08014aa6 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEELi3ENS_10DenseShapeES7_ffEC1ERKS6_>:
  explicit product_evaluator(const XprType& xpr)
 8014aa6:	b5b0      	push	{r4, r5, r7, lr}
 8014aa8:	b084      	sub	sp, #16
 8014aaa:	af00      	add	r7, sp, #0
 8014aac:	6078      	str	r0, [r7, #4]
 8014aae:	6039      	str	r1, [r7, #0]
    : m_result(xpr.rows(), xpr.cols())
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	4618      	mov	r0, r3
 8014ab4:	f000 f834 	bl	8014b20 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	1d1c      	adds	r4, r3, #4
 8014abc:	6838      	ldr	r0, [r7, #0]
 8014abe:	f7f2 f9aa 	bl	8006e16 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4rowsEv>
 8014ac2:	4603      	mov	r3, r0
 8014ac4:	60bb      	str	r3, [r7, #8]
 8014ac6:	6838      	ldr	r0, [r7, #0]
 8014ac8:	f7f1 fa33 	bl	8005f32 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4colsEv>
 8014acc:	4603      	mov	r3, r0
 8014ace:	60fb      	str	r3, [r7, #12]
 8014ad0:	f107 020c 	add.w	r2, r7, #12
 8014ad4:	f107 0308 	add.w	r3, r7, #8
 8014ad8:	4619      	mov	r1, r3
 8014ada:	4620      	mov	r0, r4
 8014adc:	f000 f82d 	bl	8014b3a <_ZN5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EEC1IiiEERKT_RKT0_>
    ::new (static_cast<Base*>(this)) Base(m_result);
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	4619      	mov	r1, r3
 8014ae4:	2004      	movs	r0, #4
 8014ae6:	f7ec fa29 	bl	8000f3c <_ZnwjPv>
 8014aea:	4602      	mov	r2, r0
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	3304      	adds	r3, #4
 8014af0:	4619      	mov	r1, r3
 8014af2:	4610      	mov	r0, r2
 8014af4:	f7fd f884 	bl	8011c00 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS3_>
    generic_product_impl<Lhs, Rhs, LhsShape, RhsShape, ProductTag>::evalTo(m_result, xpr.lhs(), xpr.rhs());
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	1d1c      	adds	r4, r3, #4
 8014afc:	6838      	ldr	r0, [r7, #0]
 8014afe:	f000 f835 	bl	8014b6c <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE3lhsEv>
 8014b02:	4605      	mov	r5, r0
 8014b04:	6838      	ldr	r0, [r7, #0]
 8014b06:	f000 f83d 	bl	8014b84 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE3rhsEv>
 8014b0a:	4603      	mov	r3, r0
 8014b0c:	461a      	mov	r2, r3
 8014b0e:	4629      	mov	r1, r5
 8014b10:	4620      	mov	r0, r4
 8014b12:	f000 f843 	bl	8014b9c <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEENS_10DenseShapeES5_Li3EE6evalToIS3_EEvRT_RKS3_RKS4_>
  }
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	4618      	mov	r0, r3
 8014b1a:	3710      	adds	r7, #16
 8014b1c:	46bd      	mov	sp, r7
 8014b1e:	bdb0      	pop	{r4, r5, r7, pc}

08014b20 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>:
  evaluator() {}
 8014b20:	b580      	push	{r7, lr}
 8014b22:	b082      	sub	sp, #8
 8014b24:	af00      	add	r7, sp, #0
 8014b26:	6078      	str	r0, [r7, #4]
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	4618      	mov	r0, r3
 8014b2c:	f000 f854 	bl	8014bd8 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	4618      	mov	r0, r3
 8014b34:	3708      	adds	r7, #8
 8014b36:	46bd      	mov	sp, r7
 8014b38:	bd80      	pop	{r7, pc}

08014b3a <_ZN5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EEC1IiiEERKT_RKT0_>:
    Matrix(const T0& x, const T1& y)
 8014b3a:	b580      	push	{r7, lr}
 8014b3c:	b084      	sub	sp, #16
 8014b3e:	af00      	add	r7, sp, #0
 8014b40:	60f8      	str	r0, [r7, #12]
 8014b42:	60b9      	str	r1, [r7, #8]
 8014b44:	607a      	str	r2, [r7, #4]
    {
 8014b46:	68fb      	ldr	r3, [r7, #12]
 8014b48:	4618      	mov	r0, r3
 8014b4a:	f7f0 f9f1 	bl	8004f30 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>
      Base::_check_template_params();
 8014b4e:	f7f0 f9ff 	bl	8004f50 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE22_check_template_paramsEv>
      Base::template _init2<T0,T1>(x, y);
 8014b52:	68f8      	ldr	r0, [r7, #12]
 8014b54:	68bb      	ldr	r3, [r7, #8]
 8014b56:	6819      	ldr	r1, [r3, #0]
 8014b58:	687b      	ldr	r3, [r7, #4]
 8014b5a:	681a      	ldr	r2, [r3, #0]
 8014b5c:	2300      	movs	r3, #0
 8014b5e:	f000 f84d 	bl	8014bfc <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6_init2IiiEEviiPNS_8internal9enable_ifILb1ET_E4typeE>
    }
 8014b62:	68fb      	ldr	r3, [r7, #12]
 8014b64:	4618      	mov	r0, r3
 8014b66:	3710      	adds	r7, #16
 8014b68:	46bd      	mov	sp, r7
 8014b6a:	bd80      	pop	{r7, pc}

08014b6c <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8014b6c:	b480      	push	{r7}
 8014b6e:	b083      	sub	sp, #12
 8014b70:	af00      	add	r7, sp, #0
 8014b72:	6078      	str	r0, [r7, #4]
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	681b      	ldr	r3, [r3, #0]
 8014b78:	4618      	mov	r0, r3
 8014b7a:	370c      	adds	r7, #12
 8014b7c:	46bd      	mov	sp, r7
 8014b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b82:	4770      	bx	lr

08014b84 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8014b84:	b480      	push	{r7}
 8014b86:	b083      	sub	sp, #12
 8014b88:	af00      	add	r7, sp, #0
 8014b8a:	6078      	str	r0, [r7, #4]
 8014b8c:	687b      	ldr	r3, [r7, #4]
 8014b8e:	685b      	ldr	r3, [r3, #4]
 8014b90:	4618      	mov	r0, r3
 8014b92:	370c      	adds	r7, #12
 8014b94:	46bd      	mov	sp, r7
 8014b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b9a:	4770      	bx	lr

08014b9c <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEENS_10DenseShapeES5_Li3EE6evalToIS3_EEvRT_RKS3_RKS4_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 8014b9c:	b580      	push	{r7, lr}
 8014b9e:	b088      	sub	sp, #32
 8014ba0:	af00      	add	r7, sp, #0
 8014ba2:	60f8      	str	r0, [r7, #12]
 8014ba4:	60b9      	str	r1, [r7, #8]
 8014ba6:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 8014ba8:	f107 0314 	add.w	r3, r7, #20
 8014bac:	687a      	ldr	r2, [r7, #4]
 8014bae:	68b9      	ldr	r1, [r7, #8]
 8014bb0:	4618      	mov	r0, r3
 8014bb2:	f000 f837 	bl	8014c24 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE11lazyProductINS1_IfLi3ELi3ELi0ELi3ELi3EEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS7_EE>
 8014bb6:	f107 031c 	add.w	r3, r7, #28
 8014bba:	4618      	mov	r0, r3
 8014bbc:	f7f2 fa81 	bl	80070c2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8014bc0:	f107 021c 	add.w	r2, r7, #28
 8014bc4:	f107 0314 	add.w	r3, r7, #20
 8014bc8:	4619      	mov	r1, r3
 8014bca:	68f8      	ldr	r0, [r7, #12]
 8014bcc:	f000 f841 	bl	8014c52 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8014bd0:	bf00      	nop
 8014bd2:	3720      	adds	r7, #32
 8014bd4:	46bd      	mov	sp, r7
 8014bd6:	bd80      	pop	{r7, pc}

08014bd8 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>:
  evaluator()
 8014bd8:	b580      	push	{r7, lr}
 8014bda:	b082      	sub	sp, #8
 8014bdc:	af00      	add	r7, sp, #0
 8014bde:	6078      	str	r0, [r7, #4]
    : m_d(0,OuterStrideAtCompileTime)
 8014be0:	6878      	ldr	r0, [r7, #4]
 8014be2:	f7fd fe76 	bl	80128d2 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>
 8014be6:	687b      	ldr	r3, [r7, #4]
 8014be8:	2200      	movs	r2, #0
 8014bea:	2100      	movs	r1, #0
 8014bec:	4618      	mov	r0, r3
 8014bee:	f7f2 fb28 	bl	8007242 <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EEC1EPKfi>
  }
 8014bf2:	687b      	ldr	r3, [r7, #4]
 8014bf4:	4618      	mov	r0, r3
 8014bf6:	3708      	adds	r7, #8
 8014bf8:	46bd      	mov	sp, r7
 8014bfa:	bd80      	pop	{r7, pc}

08014bfc <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6_init2IiiEEviiPNS_8internal9enable_ifILb1ET_E4typeE>:
    EIGEN_STRONG_INLINE void _init2(Index rows, Index cols, typename internal::enable_if<Base::SizeAtCompileTime!=2,T0>::type* = 0)
 8014bfc:	b580      	push	{r7, lr}
 8014bfe:	b086      	sub	sp, #24
 8014c00:	af00      	add	r7, sp, #0
 8014c02:	60f8      	str	r0, [r7, #12]
 8014c04:	60b9      	str	r1, [r7, #8]
 8014c06:	607a      	str	r2, [r7, #4]
 8014c08:	603b      	str	r3, [r7, #0]
      const bool t0_is_integer_alike = internal::is_valid_index_type<T0>::value;
 8014c0a:	2301      	movs	r3, #1
 8014c0c:	75fb      	strb	r3, [r7, #23]
      const bool t1_is_integer_alike = internal::is_valid_index_type<T1>::value;
 8014c0e:	2301      	movs	r3, #1
 8014c10:	75bb      	strb	r3, [r7, #22]
      resize(rows,cols);
 8014c12:	687a      	ldr	r2, [r7, #4]
 8014c14:	68b9      	ldr	r1, [r7, #8]
 8014c16:	68f8      	ldr	r0, [r7, #12]
 8014c18:	f000 f82c 	bl	8014c74 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii>
    }
 8014c1c:	bf00      	nop
 8014c1e:	3718      	adds	r7, #24
 8014c20:	46bd      	mov	sp, r7
 8014c22:	bd80      	pop	{r7, pc}

08014c24 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE11lazyProductINS1_IfLi3ELi3ELi0ELi3ELi3EEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS7_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 8014c24:	b590      	push	{r4, r7, lr}
 8014c26:	b085      	sub	sp, #20
 8014c28:	af00      	add	r7, sp, #0
 8014c2a:	60f8      	str	r0, [r7, #12]
 8014c2c:	60b9      	str	r1, [r7, #8]
 8014c2e:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 8014c30:	68b8      	ldr	r0, [r7, #8]
 8014c32:	f7f1 f8f1 	bl	8005e18 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 8014c36:	4604      	mov	r4, r0
 8014c38:	6878      	ldr	r0, [r7, #4]
 8014c3a:	f7f0 fe1c 	bl	8005876 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8014c3e:	4603      	mov	r3, r0
 8014c40:	461a      	mov	r2, r3
 8014c42:	4621      	mov	r1, r4
 8014c44:	68f8      	ldr	r0, [r7, #12]
 8014c46:	f000 f86b 	bl	8014d20 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EEC1ERKS2_RKS3_>
}
 8014c4a:	68f8      	ldr	r0, [r7, #12]
 8014c4c:	3714      	adds	r7, #20
 8014c4e:	46bd      	mov	sp, r7
 8014c50:	bd90      	pop	{r4, r7, pc}

08014c52 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8014c52:	b580      	push	{r7, lr}
 8014c54:	b086      	sub	sp, #24
 8014c56:	af00      	add	r7, sp, #0
 8014c58:	60f8      	str	r0, [r7, #12]
 8014c5a:	60b9      	str	r1, [r7, #8]
 8014c5c:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8014c5e:	68fb      	ldr	r3, [r7, #12]
 8014c60:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8014c62:	687a      	ldr	r2, [r7, #4]
 8014c64:	68b9      	ldr	r1, [r7, #8]
 8014c66:	6978      	ldr	r0, [r7, #20]
 8014c68:	f000 f888 	bl	8014d7c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_>
}
 8014c6c:	bf00      	nop
 8014c6e:	3718      	adds	r7, #24
 8014c70:	46bd      	mov	sp, r7
 8014c72:	bd80      	pop	{r7, pc}

08014c74 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii>:
    EIGEN_STRONG_INLINE void resize(Index rows, Index cols)
 8014c74:	b580      	push	{r7, lr}
 8014c76:	b086      	sub	sp, #24
 8014c78:	af00      	add	r7, sp, #0
 8014c7a:	60f8      	str	r0, [r7, #12]
 8014c7c:	60b9      	str	r1, [r7, #8]
 8014c7e:	607a      	str	r2, [r7, #4]
      eigen_assert(   EIGEN_IMPLIES(RowsAtCompileTime!=Dynamic,rows==RowsAtCompileTime)
 8014c80:	68bb      	ldr	r3, [r7, #8]
 8014c82:	2b01      	cmp	r3, #1
 8014c84:	d108      	bne.n	8014c98 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii+0x24>
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	2b03      	cmp	r3, #3
 8014c8a:	d105      	bne.n	8014c98 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii+0x24>
 8014c8c:	68bb      	ldr	r3, [r7, #8]
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	db02      	blt.n	8014c98 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii+0x24>
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	2b00      	cmp	r3, #0
 8014c96:	da06      	bge.n	8014ca6 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii+0x32>
 8014c98:	4b0c      	ldr	r3, [pc, #48]	; (8014ccc <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii+0x58>)
 8014c9a:	4a0d      	ldr	r2, [pc, #52]	; (8014cd0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii+0x5c>)
 8014c9c:	f240 1111 	movw	r1, #273	; 0x111
 8014ca0:	480c      	ldr	r0, [pc, #48]	; (8014cd4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii+0x60>)
 8014ca2:	f009 f8f7 	bl	801de94 <__assert_func>
 8014ca6:	68bb      	ldr	r3, [r7, #8]
 8014ca8:	617b      	str	r3, [r7, #20]
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	613b      	str	r3, [r7, #16]
  }
 8014cae:	bf00      	nop
        m_storage.resize(rows*cols, rows, cols);
 8014cb0:	68f8      	ldr	r0, [r7, #12]
 8014cb2:	68bb      	ldr	r3, [r7, #8]
 8014cb4:	687a      	ldr	r2, [r7, #4]
 8014cb6:	fb02 f103 	mul.w	r1, r2, r3
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	68ba      	ldr	r2, [r7, #8]
 8014cbe:	f000 f870 	bl	8014da2 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE6resizeEiii>
    }
 8014cc2:	bf00      	nop
 8014cc4:	3718      	adds	r7, #24
 8014cc6:	46bd      	mov	sp, r7
 8014cc8:	bd80      	pop	{r7, pc}
 8014cca:	bf00      	nop
 8014ccc:	0802278c 	.word	0x0802278c
 8014cd0:	08029638 	.word	0x08029638
 8014cd4:	080229a8 	.word	0x080229a8

08014cd8 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1Ev>:
 8014cd8:	b580      	push	{r7, lr}
 8014cda:	b082      	sub	sp, #8
 8014cdc:	af00      	add	r7, sp, #0
 8014cde:	6078      	str	r0, [r7, #4]
 8014ce0:	6878      	ldr	r0, [r7, #4]
 8014ce2:	f000 f86b 	bl	8014dbc <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1Ev>
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	4618      	mov	r0, r3
 8014cea:	3708      	adds	r7, #8
 8014cec:	46bd      	mov	sp, r7
 8014cee:	bd80      	pop	{r7, pc}

08014cf0 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1ELi3EEC1Ev>:
class dense_product_base
 8014cf0:	b580      	push	{r7, lr}
 8014cf2:	b082      	sub	sp, #8
 8014cf4:	af00      	add	r7, sp, #0
 8014cf6:	6078      	str	r0, [r7, #4]
 8014cf8:	6878      	ldr	r0, [r7, #4]
 8014cfa:	f7ff ffed 	bl	8014cd8 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1Ev>
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	4618      	mov	r0, r3
 8014d02:	3708      	adds	r7, #8
 8014d04:	46bd      	mov	sp, r7
 8014d06:	bd80      	pop	{r7, pc}

08014d08 <_ZN5Eigen11ProductImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8014d08:	b580      	push	{r7, lr}
 8014d0a:	b082      	sub	sp, #8
 8014d0c:	af00      	add	r7, sp, #0
 8014d0e:	6078      	str	r0, [r7, #4]
 8014d10:	6878      	ldr	r0, [r7, #4]
 8014d12:	f7ff ffed 	bl	8014cf0 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1ELi3EEC1Ev>
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	4618      	mov	r0, r3
 8014d1a:	3708      	adds	r7, #8
 8014d1c:	46bd      	mov	sp, r7
 8014d1e:	bd80      	pop	{r7, pc}

08014d20 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8014d20:	b590      	push	{r4, r7, lr}
 8014d22:	b085      	sub	sp, #20
 8014d24:	af00      	add	r7, sp, #0
 8014d26:	60f8      	str	r0, [r7, #12]
 8014d28:	60b9      	str	r1, [r7, #8]
 8014d2a:	607a      	str	r2, [r7, #4]
 8014d2c:	68f8      	ldr	r0, [r7, #12]
 8014d2e:	f7ff ffeb 	bl	8014d08 <_ZN5Eigen11ProductImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1ENS_5DenseEEC1Ev>
 8014d32:	68fb      	ldr	r3, [r7, #12]
 8014d34:	68ba      	ldr	r2, [r7, #8]
 8014d36:	601a      	str	r2, [r3, #0]
 8014d38:	68fb      	ldr	r3, [r7, #12]
 8014d3a:	687a      	ldr	r2, [r7, #4]
 8014d3c:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 8014d3e:	68bb      	ldr	r3, [r7, #8]
 8014d40:	4618      	mov	r0, r3
 8014d42:	f7f0 fb45 	bl	80053d0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8014d46:	4604      	mov	r4, r0
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	4618      	mov	r0, r3
 8014d4c:	f7f0 f989 	bl	8005062 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8014d50:	4603      	mov	r3, r0
 8014d52:	429c      	cmp	r4, r3
 8014d54:	d005      	beq.n	8014d62 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EEC1ERKS2_RKS3_+0x42>
 8014d56:	4b06      	ldr	r3, [pc, #24]	; (8014d70 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EEC1ERKS2_RKS3_+0x50>)
 8014d58:	4a06      	ldr	r2, [pc, #24]	; (8014d74 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EEC1ERKS2_RKS3_+0x54>)
 8014d5a:	2160      	movs	r1, #96	; 0x60
 8014d5c:	4806      	ldr	r0, [pc, #24]	; (8014d78 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EEC1ERKS2_RKS3_+0x58>)
 8014d5e:	f009 f899 	bl	801de94 <__assert_func>
 8014d62:	bf00      	nop
    }
 8014d64:	68fb      	ldr	r3, [r7, #12]
 8014d66:	4618      	mov	r0, r3
 8014d68:	3714      	adds	r7, #20
 8014d6a:	46bd      	mov	sp, r7
 8014d6c:	bd90      	pop	{r4, r7, pc}
 8014d6e:	bf00      	nop
 8014d70:	0801ffbc 	.word	0x0801ffbc
 8014d74:	080296c4 	.word	0x080296c4
 8014d78:	0802030c 	.word	0x0802030c

08014d7c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 8014d7c:	b580      	push	{r7, lr}
 8014d7e:	b084      	sub	sp, #16
 8014d80:	af00      	add	r7, sp, #0
 8014d82:	60f8      	str	r0, [r7, #12]
 8014d84:	60b9      	str	r1, [r7, #8]
 8014d86:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 8014d88:	68b9      	ldr	r1, [r7, #8]
 8014d8a:	68f8      	ldr	r0, [r7, #12]
 8014d8c:	f000 f821 	bl	8014dd2 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 8014d90:	687a      	ldr	r2, [r7, #4]
 8014d92:	68b9      	ldr	r1, [r7, #8]
 8014d94:	68f8      	ldr	r0, [r7, #12]
 8014d96:	f000 f84a 	bl	8014e2e <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8014d9a:	bf00      	nop
 8014d9c:	3710      	adds	r7, #16
 8014d9e:	46bd      	mov	sp, r7
 8014da0:	bd80      	pop	{r7, pc}

08014da2 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE6resizeEiii>:
    EIGEN_DEVICE_FUNC void resize(Index,Index,Index) {}
 8014da2:	b480      	push	{r7}
 8014da4:	b085      	sub	sp, #20
 8014da6:	af00      	add	r7, sp, #0
 8014da8:	60f8      	str	r0, [r7, #12]
 8014daa:	60b9      	str	r1, [r7, #8]
 8014dac:	607a      	str	r2, [r7, #4]
 8014dae:	603b      	str	r3, [r7, #0]
 8014db0:	bf00      	nop
 8014db2:	3714      	adds	r7, #20
 8014db4:	46bd      	mov	sp, r7
 8014db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dba:	4770      	bx	lr

08014dbc <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8014dbc:	b480      	push	{r7}
 8014dbe:	b083      	sub	sp, #12
 8014dc0:	af00      	add	r7, sp, #0
 8014dc2:	6078      	str	r0, [r7, #4]
    }
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	4618      	mov	r0, r3
 8014dc8:	370c      	adds	r7, #12
 8014dca:	46bd      	mov	sp, r7
 8014dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dd0:	4770      	bx	lr

08014dd2 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 8014dd2:	b480      	push	{r7}
 8014dd4:	b083      	sub	sp, #12
 8014dd6:	af00      	add	r7, sp, #0
 8014dd8:	6078      	str	r0, [r7, #4]
 8014dda:	6039      	str	r1, [r7, #0]
}
 8014ddc:	bf00      	nop
 8014dde:	370c      	adds	r7, #12
 8014de0:	46bd      	mov	sp, r7
 8014de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014de6:	4770      	bx	lr

08014de8 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEELi3ENS_10DenseShapeES7_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 8014de8:	b580      	push	{r7, lr}
 8014dea:	b082      	sub	sp, #8
 8014dec:	af00      	add	r7, sp, #0
 8014dee:	6078      	str	r0, [r7, #4]
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	330c      	adds	r3, #12
 8014df4:	4618      	mov	r0, r3
 8014df6:	f7f2 fbbc 	bl	8007572 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 8014dfa:	687b      	ldr	r3, [r7, #4]
 8014dfc:	3308      	adds	r3, #8
 8014dfe:	4618      	mov	r0, r3
 8014e00:	f7fa f9ea 	bl	800f1d8 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 8014e04:	6878      	ldr	r0, [r7, #4]
 8014e06:	f000 f859 	bl	8014ebc <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEED1Ev>
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	4618      	mov	r0, r3
 8014e0e:	3708      	adds	r7, #8
 8014e10:	46bd      	mov	sp, r7
 8014e12:	bd80      	pop	{r7, pc}

08014e14 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 8014e14:	b580      	push	{r7, lr}
 8014e16:	b082      	sub	sp, #8
 8014e18:	af00      	add	r7, sp, #0
 8014e1a:	6078      	str	r0, [r7, #4]
 8014e1c:	687b      	ldr	r3, [r7, #4]
 8014e1e:	4618      	mov	r0, r3
 8014e20:	f7ff ffe2 	bl	8014de8 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEELi3ENS_10DenseShapeES7_ffED1Ev>
 8014e24:	687b      	ldr	r3, [r7, #4]
 8014e26:	4618      	mov	r0, r3
 8014e28:	3708      	adds	r7, #8
 8014e2a:	46bd      	mov	sp, r7
 8014e2c:	bd80      	pop	{r7, pc}

08014e2e <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 8014e2e:	b580      	push	{r7, lr}
 8014e30:	b090      	sub	sp, #64	; 0x40
 8014e32:	af02      	add	r7, sp, #8
 8014e34:	60f8      	str	r0, [r7, #12]
 8014e36:	60b9      	str	r1, [r7, #8]
 8014e38:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 8014e3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014e3e:	68b9      	ldr	r1, [r7, #8]
 8014e40:	4618      	mov	r0, r3
 8014e42:	f000 f82c 	bl	8014e9e <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1ERKS6_>
  resize_if_allowed(dst, src, func);
 8014e46:	687a      	ldr	r2, [r7, #4]
 8014e48:	68b9      	ldr	r1, [r7, #8]
 8014e4a:	68f8      	ldr	r0, [r7, #12]
 8014e4c:	f000 f85e 	bl	8014f0c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 8014e50:	f107 0320 	add.w	r3, r7, #32
 8014e54:	68f9      	ldr	r1, [r7, #12]
 8014e56:	4618      	mov	r0, r3
 8014e58:	f7fc fed2 	bl	8011c00 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 8014e5c:	68f8      	ldr	r0, [r7, #12]
 8014e5e:	f000 f89f 	bl	8014fa0 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE18const_cast_derivedEv>
 8014e62:	4603      	mov	r3, r0
 8014e64:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8014e68:	f107 0120 	add.w	r1, r7, #32
 8014e6c:	f107 0010 	add.w	r0, r7, #16
 8014e70:	9300      	str	r3, [sp, #0]
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	f000 f89f 	bl	8014fb6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS2_INS_7ProductIS4_NS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKS9_RKSB_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 8014e78:	f107 0310 	add.w	r3, r7, #16
 8014e7c:	4618      	mov	r0, r3
 8014e7e:	f000 f8b4 	bl	8014fea <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSD_>
  DstEvaluatorType dstEvaluator(dst);
 8014e82:	f107 0320 	add.w	r3, r7, #32
 8014e86:	4618      	mov	r0, r3
 8014e88:	f7fa f9a6 	bl	800f1d8 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 8014e8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014e90:	4618      	mov	r0, r3
 8014e92:	f7ff ffbf 	bl	8014e14 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEED1Ev>
}
 8014e96:	bf00      	nop
 8014e98:	3738      	adds	r7, #56	; 0x38
 8014e9a:	46bd      	mov	sp, r7
 8014e9c:	bd80      	pop	{r7, pc}

08014e9e <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1ERKS6_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8014e9e:	b580      	push	{r7, lr}
 8014ea0:	b082      	sub	sp, #8
 8014ea2:	af00      	add	r7, sp, #0
 8014ea4:	6078      	str	r0, [r7, #4]
 8014ea6:	6039      	str	r1, [r7, #0]
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	6839      	ldr	r1, [r7, #0]
 8014eac:	4618      	mov	r0, r3
 8014eae:	f000 f8a7 	bl	8015000 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEELi3ENS_10DenseShapeES7_ffEC1ERKS6_>
 8014eb2:	687b      	ldr	r3, [r7, #4]
 8014eb4:	4618      	mov	r0, r3
 8014eb6:	3708      	adds	r7, #8
 8014eb8:	46bd      	mov	sp, r7
 8014eba:	bd80      	pop	{r7, pc}

08014ebc <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8014ebc:	b480      	push	{r7}
 8014ebe:	b083      	sub	sp, #12
 8014ec0:	af00      	add	r7, sp, #0
 8014ec2:	6078      	str	r0, [r7, #4]
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	4618      	mov	r0, r3
 8014ec8:	370c      	adds	r7, #12
 8014eca:	46bd      	mov	sp, r7
 8014ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ed0:	4770      	bx	lr

08014ed2 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8014ed2:	b580      	push	{r7, lr}
 8014ed4:	b082      	sub	sp, #8
 8014ed6:	af00      	add	r7, sp, #0
 8014ed8:	6078      	str	r0, [r7, #4]
 8014eda:	687b      	ldr	r3, [r7, #4]
 8014edc:	681b      	ldr	r3, [r3, #0]
 8014ede:	4618      	mov	r0, r3
 8014ee0:	f7f0 fa81 	bl	80053e6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8014ee4:	4603      	mov	r3, r0
 8014ee6:	4618      	mov	r0, r3
 8014ee8:	3708      	adds	r7, #8
 8014eea:	46bd      	mov	sp, r7
 8014eec:	bd80      	pop	{r7, pc}

08014eee <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8014eee:	b580      	push	{r7, lr}
 8014ef0:	b082      	sub	sp, #8
 8014ef2:	af00      	add	r7, sp, #0
 8014ef4:	6078      	str	r0, [r7, #4]
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	685b      	ldr	r3, [r3, #4]
 8014efa:	4618      	mov	r0, r3
 8014efc:	f7f0 f8a6 	bl	800504c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8014f00:	4603      	mov	r3, r0
 8014f02:	4618      	mov	r0, r3
 8014f04:	3708      	adds	r7, #8
 8014f06:	46bd      	mov	sp, r7
 8014f08:	bd80      	pop	{r7, pc}
	...

08014f0c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8014f0c:	b580      	push	{r7, lr}
 8014f0e:	b086      	sub	sp, #24
 8014f10:	af00      	add	r7, sp, #0
 8014f12:	60f8      	str	r0, [r7, #12]
 8014f14:	60b9      	str	r1, [r7, #8]
 8014f16:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8014f18:	68b8      	ldr	r0, [r7, #8]
 8014f1a:	f7ff ffda 	bl	8014ed2 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE4rowsEv>
 8014f1e:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8014f20:	68b8      	ldr	r0, [r7, #8]
 8014f22:	f7ff ffe4 	bl	8014eee <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE4colsEv>
 8014f26:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8014f28:	68fb      	ldr	r3, [r7, #12]
 8014f2a:	4618      	mov	r0, r3
 8014f2c:	f7f0 fa5b 	bl	80053e6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8014f30:	4602      	mov	r2, r0
 8014f32:	697b      	ldr	r3, [r7, #20]
 8014f34:	4293      	cmp	r3, r2
 8014f36:	d107      	bne.n	8014f48 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 8014f38:	68fb      	ldr	r3, [r7, #12]
 8014f3a:	4618      	mov	r0, r3
 8014f3c:	f7f0 fa48 	bl	80053d0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8014f40:	4602      	mov	r2, r0
 8014f42:	693b      	ldr	r3, [r7, #16]
 8014f44:	4293      	cmp	r3, r2
 8014f46:	d001      	beq.n	8014f4c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 8014f48:	2301      	movs	r3, #1
 8014f4a:	e000      	b.n	8014f4e <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 8014f4c:	2300      	movs	r3, #0
 8014f4e:	2b00      	cmp	r3, #0
 8014f50:	d005      	beq.n	8014f5e <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 8014f52:	68fb      	ldr	r3, [r7, #12]
 8014f54:	693a      	ldr	r2, [r7, #16]
 8014f56:	6979      	ldr	r1, [r7, #20]
 8014f58:	4618      	mov	r0, r3
 8014f5a:	f7ff fe8b 	bl	8014c74 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 8014f5e:	68fb      	ldr	r3, [r7, #12]
 8014f60:	4618      	mov	r0, r3
 8014f62:	f7f0 fa40 	bl	80053e6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8014f66:	4602      	mov	r2, r0
 8014f68:	697b      	ldr	r3, [r7, #20]
 8014f6a:	4293      	cmp	r3, r2
 8014f6c:	d107      	bne.n	8014f7e <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 8014f6e:	68fb      	ldr	r3, [r7, #12]
 8014f70:	4618      	mov	r0, r3
 8014f72:	f7f0 fa2d 	bl	80053d0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8014f76:	4602      	mov	r2, r0
 8014f78:	693b      	ldr	r3, [r7, #16]
 8014f7a:	4293      	cmp	r3, r2
 8014f7c:	d006      	beq.n	8014f8c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 8014f7e:	4b05      	ldr	r3, [pc, #20]	; (8014f94 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 8014f80:	4a05      	ldr	r2, [pc, #20]	; (8014f98 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 8014f82:	f240 21fd 	movw	r1, #765	; 0x2fd
 8014f86:	4805      	ldr	r0, [pc, #20]	; (8014f9c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8014f88:	f008 ff84 	bl	801de94 <__assert_func>
}
 8014f8c:	bf00      	nop
 8014f8e:	3718      	adds	r7, #24
 8014f90:	46bd      	mov	sp, r7
 8014f92:	bd80      	pop	{r7, pc}
 8014f94:	08022374 	.word	0x08022374
 8014f98:	080297ec 	.word	0x080297ec
 8014f9c:	08022488 	.word	0x08022488

08014fa0 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE18const_cast_derivedEv>:
  inline Derived& const_cast_derived() const
 8014fa0:	b480      	push	{r7}
 8014fa2:	b083      	sub	sp, #12
 8014fa4:	af00      	add	r7, sp, #0
 8014fa6:	6078      	str	r0, [r7, #4]
  { return *static_cast<Derived*>(const_cast<EigenBase*>(this)); }
 8014fa8:	687b      	ldr	r3, [r7, #4]
 8014faa:	4618      	mov	r0, r3
 8014fac:	370c      	adds	r7, #12
 8014fae:	46bd      	mov	sp, r7
 8014fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fb4:	4770      	bx	lr

08014fb6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS2_INS_7ProductIS4_NS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKS9_RKSB_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8014fb6:	b480      	push	{r7}
 8014fb8:	b085      	sub	sp, #20
 8014fba:	af00      	add	r7, sp, #0
 8014fbc:	60f8      	str	r0, [r7, #12]
 8014fbe:	60b9      	str	r1, [r7, #8]
 8014fc0:	607a      	str	r2, [r7, #4]
 8014fc2:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8014fc4:	68fb      	ldr	r3, [r7, #12]
 8014fc6:	68ba      	ldr	r2, [r7, #8]
 8014fc8:	601a      	str	r2, [r3, #0]
 8014fca:	68fb      	ldr	r3, [r7, #12]
 8014fcc:	687a      	ldr	r2, [r7, #4]
 8014fce:	605a      	str	r2, [r3, #4]
 8014fd0:	68fb      	ldr	r3, [r7, #12]
 8014fd2:	683a      	ldr	r2, [r7, #0]
 8014fd4:	609a      	str	r2, [r3, #8]
 8014fd6:	68fb      	ldr	r3, [r7, #12]
 8014fd8:	69ba      	ldr	r2, [r7, #24]
 8014fda:	60da      	str	r2, [r3, #12]
  }
 8014fdc:	68fb      	ldr	r3, [r7, #12]
 8014fde:	4618      	mov	r0, r3
 8014fe0:	3714      	adds	r7, #20
 8014fe2:	46bd      	mov	sp, r7
 8014fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fe8:	4770      	bx	lr

08014fea <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8014fea:	b580      	push	{r7, lr}
 8014fec:	b082      	sub	sp, #8
 8014fee:	af00      	add	r7, sp, #0
 8014ff0:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8014ff2:	6878      	ldr	r0, [r7, #4]
 8014ff4:	f000 f839 	bl	801506a <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSD_>
  }
 8014ff8:	bf00      	nop
 8014ffa:	3708      	adds	r7, #8
 8014ffc:	46bd      	mov	sp, r7
 8014ffe:	bd80      	pop	{r7, pc}

08015000 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEELi3ENS_10DenseShapeES7_ffEC1ERKS6_>:
  explicit product_evaluator(const XprType& xpr)
 8015000:	b580      	push	{r7, lr}
 8015002:	b082      	sub	sp, #8
 8015004:	af00      	add	r7, sp, #0
 8015006:	6078      	str	r0, [r7, #4]
 8015008:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 801500a:	6878      	ldr	r0, [r7, #4]
 801500c:	f000 f854 	bl	80150b8 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1Ev>
    : m_lhs(xpr.lhs()),
 8015010:	6838      	ldr	r0, [r7, #0]
 8015012:	f000 f839 	bl	8015088 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE3lhsEv>
 8015016:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	601a      	str	r2, [r3, #0]
      m_rhs(xpr.rhs()),
 801501c:	6838      	ldr	r0, [r7, #0]
 801501e:	f000 f83f 	bl	80150a0 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE3rhsEv>
 8015022:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 8015024:	687b      	ldr	r3, [r7, #4]
 8015026:	605a      	str	r2, [r3, #4]
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	f103 0208 	add.w	r2, r3, #8
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	681b      	ldr	r3, [r3, #0]
      m_innerDim(xpr.lhs().cols())
 8015032:	4619      	mov	r1, r3
 8015034:	4610      	mov	r0, r2
 8015036:	f7fc fde3 	bl	8011c00 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS3_>
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	f103 020c 	add.w	r2, r3, #12
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	685b      	ldr	r3, [r3, #4]
      m_innerDim(xpr.lhs().cols())
 8015044:	4619      	mov	r1, r3
 8015046:	4610      	mov	r0, r2
 8015048:	f7f2 fca2 	bl	8007990 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 801504c:	6838      	ldr	r0, [r7, #0]
 801504e:	f000 f81b 	bl	8015088 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE3lhsEv>
 8015052:	4603      	mov	r3, r0
 8015054:	4618      	mov	r0, r3
 8015056:	f7f0 f9bb 	bl	80053d0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 801505a:	4602      	mov	r2, r0
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	611a      	str	r2, [r3, #16]
  }
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	4618      	mov	r0, r3
 8015064:	3708      	adds	r7, #8
 8015066:	46bd      	mov	sp, r7
 8015068:	bd80      	pop	{r7, pc}

0801506a <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 801506a:	b580      	push	{r7, lr}
 801506c:	b082      	sub	sp, #8
 801506e:	af00      	add	r7, sp, #0
 8015070:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8015072:	2100      	movs	r1, #0
 8015074:	6878      	ldr	r0, [r7, #4]
 8015076:	f000 f82a 	bl	80150ce <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS2_INS_7ProductIS4_NS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 801507a:	6878      	ldr	r0, [r7, #4]
 801507c:	f000 f84a 	bl	8015114 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSD_>
  }
 8015080:	bf00      	nop
 8015082:	3708      	adds	r7, #8
 8015084:	46bd      	mov	sp, r7
 8015086:	bd80      	pop	{r7, pc}

08015088 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8015088:	b480      	push	{r7}
 801508a:	b083      	sub	sp, #12
 801508c:	af00      	add	r7, sp, #0
 801508e:	6078      	str	r0, [r7, #4]
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	681b      	ldr	r3, [r3, #0]
 8015094:	4618      	mov	r0, r3
 8015096:	370c      	adds	r7, #12
 8015098:	46bd      	mov	sp, r7
 801509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801509e:	4770      	bx	lr

080150a0 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 80150a0:	b480      	push	{r7}
 80150a2:	b083      	sub	sp, #12
 80150a4:	af00      	add	r7, sp, #0
 80150a6:	6078      	str	r0, [r7, #4]
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	685b      	ldr	r3, [r3, #4]
 80150ac:	4618      	mov	r0, r3
 80150ae:	370c      	adds	r7, #12
 80150b0:	46bd      	mov	sp, r7
 80150b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150b6:	4770      	bx	lr

080150b8 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 80150b8:	b480      	push	{r7}
 80150ba:	b083      	sub	sp, #12
 80150bc:	af00      	add	r7, sp, #0
 80150be:	6078      	str	r0, [r7, #4]
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	4618      	mov	r0, r3
 80150c4:	370c      	adds	r7, #12
 80150c6:	46bd      	mov	sp, r7
 80150c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150cc:	4770      	bx	lr

080150ce <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS2_INS_7ProductIS4_NS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 80150ce:	b5b0      	push	{r4, r5, r7, lr}
 80150d0:	b084      	sub	sp, #16
 80150d2:	af00      	add	r7, sp, #0
 80150d4:	6078      	str	r0, [r7, #4]
 80150d6:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	689c      	ldr	r4, [r3, #8]
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	681b      	ldr	r3, [r3, #0]
 80150e0:	6839      	ldr	r1, [r7, #0]
 80150e2:	4618      	mov	r0, r3
 80150e4:	f000 f825 	bl	8015132 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE8coeffRefEi>
 80150e8:	4605      	mov	r5, r0
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	685b      	ldr	r3, [r3, #4]
 80150ee:	6839      	ldr	r1, [r7, #0]
 80150f0:	4618      	mov	r0, r3
 80150f2:	f000 f82e 	bl	8015152 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEELi3ENS_10DenseShapeES7_ffE5coeffEi>
 80150f6:	eef0 7a40 	vmov.f32	s15, s0
 80150fa:	edc7 7a03 	vstr	s15, [r7, #12]
 80150fe:	f107 030c 	add.w	r3, r7, #12
 8015102:	461a      	mov	r2, r3
 8015104:	4629      	mov	r1, r5
 8015106:	4620      	mov	r0, r4
 8015108:	f7f3 fb4a 	bl	80087a0 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 801510c:	bf00      	nop
 801510e:	3710      	adds	r7, #16
 8015110:	46bd      	mov	sp, r7
 8015112:	bdb0      	pop	{r4, r5, r7, pc}

08015114 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8015114:	b580      	push	{r7, lr}
 8015116:	b082      	sub	sp, #8
 8015118:	af00      	add	r7, sp, #0
 801511a:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 801511c:	2101      	movs	r1, #1
 801511e:	6878      	ldr	r0, [r7, #4]
 8015120:	f7ff ffd5 	bl	80150ce <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS2_INS_7ProductIS4_NS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8015124:	6878      	ldr	r0, [r7, #4]
 8015126:	f000 f84d 	bl	80151c4 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSD_>
  }
 801512a:	bf00      	nop
 801512c:	3708      	adds	r7, #8
 801512e:	46bd      	mov	sp, r7
 8015130:	bd80      	pop	{r7, pc}

08015132 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE8coeffRefEi>:
  Scalar& coeffRef(Index index)
 8015132:	b480      	push	{r7}
 8015134:	b083      	sub	sp, #12
 8015136:	af00      	add	r7, sp, #0
 8015138:	6078      	str	r0, [r7, #4]
 801513a:	6039      	str	r1, [r7, #0]
    return const_cast<Scalar*>(m_d.data)[index];
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	681a      	ldr	r2, [r3, #0]
 8015140:	683b      	ldr	r3, [r7, #0]
 8015142:	009b      	lsls	r3, r3, #2
 8015144:	4413      	add	r3, r2
  }
 8015146:	4618      	mov	r0, r3
 8015148:	370c      	adds	r7, #12
 801514a:	46bd      	mov	sp, r7
 801514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015150:	4770      	bx	lr

08015152 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEELi3ENS_10DenseShapeES7_ffE5coeffEi>:
  const CoeffReturnType coeff(Index index) const
 8015152:	b580      	push	{r7, lr}
 8015154:	b0a4      	sub	sp, #144	; 0x90
 8015156:	af00      	add	r7, sp, #0
 8015158:	6078      	str	r0, [r7, #4]
 801515a:	6039      	str	r1, [r7, #0]
    const Index row = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? 0 : index;
 801515c:	2300      	movs	r3, #0
 801515e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    const Index col = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? index : 0;
 8015162:	683b      	ldr	r3, [r7, #0]
 8015164:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 8015168:	687b      	ldr	r3, [r7, #4]
 801516a:	6819      	ldr	r1, [r3, #0]
 801516c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8015170:	2200      	movs	r2, #0
 8015172:	4618      	mov	r0, r3
 8015174:	f000 f835 	bl	80151e2 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE3rowEi>
 8015178:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801517c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8015180:	4611      	mov	r1, r2
 8015182:	4618      	mov	r0, r3
 8015184:	f000 f840 	bl	8015208 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE9transposeEv>
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	6859      	ldr	r1, [r3, #4]
 801518c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8015190:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8015194:	4618      	mov	r0, r3
 8015196:	f7f7 f94a 	bl	800c42e <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3colEi>
 801519a:	f107 030c 	add.w	r3, r7, #12
 801519e:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80151a2:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80151a6:	4618      	mov	r0, r3
 80151a8:	f000 f83f 	bl	801522a <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEE12cwiseProductINS2_IKNS3_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>
 80151ac:	f107 030c 	add.w	r3, r7, #12
 80151b0:	4618      	mov	r0, r3
 80151b2:	f000 f868 	bl	8015286 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE3sumEv>
 80151b6:	eef0 7a40 	vmov.f32	s15, s0
  }
 80151ba:	eeb0 0a67 	vmov.f32	s0, s15
 80151be:	3790      	adds	r7, #144	; 0x90
 80151c0:	46bd      	mov	sp, r7
 80151c2:	bd80      	pop	{r7, pc}

080151c4 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 80151c4:	b580      	push	{r7, lr}
 80151c6:	b082      	sub	sp, #8
 80151c8:	af00      	add	r7, sp, #0
 80151ca:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 80151cc:	2102      	movs	r1, #2
 80151ce:	6878      	ldr	r0, [r7, #4]
 80151d0:	f7ff ff7d 	bl	80150ce <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS2_INS_7ProductIS4_NS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80151d4:	6878      	ldr	r0, [r7, #4]
 80151d6:	f000 f871 	bl	80152bc <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSD_>
  }
 80151da:	bf00      	nop
 80151dc:	3708      	adds	r7, #8
 80151de:	46bd      	mov	sp, r7
 80151e0:	bd80      	pop	{r7, pc}

080151e2 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE3rowEi>:
ConstRowXpr row(Index i) const
 80151e2:	b580      	push	{r7, lr}
 80151e4:	b084      	sub	sp, #16
 80151e6:	af00      	add	r7, sp, #0
 80151e8:	60f8      	str	r0, [r7, #12]
 80151ea:	60b9      	str	r1, [r7, #8]
 80151ec:	607a      	str	r2, [r7, #4]
  return ConstRowXpr(derived(), i);
 80151ee:	68b8      	ldr	r0, [r7, #8]
 80151f0:	f7f0 fe12 	bl	8005e18 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 80151f4:	4603      	mov	r3, r0
 80151f6:	687a      	ldr	r2, [r7, #4]
 80151f8:	4619      	mov	r1, r3
 80151fa:	68f8      	ldr	r0, [r7, #12]
 80151fc:	f000 f868 	bl	80152d0 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEC1ERS3_i>
}
 8015200:	68f8      	ldr	r0, [r7, #12]
 8015202:	3710      	adds	r7, #16
 8015204:	46bd      	mov	sp, r7
 8015206:	bd80      	pop	{r7, pc}

08015208 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE9transposeEv>:
DenseBase<Derived>::transpose() const
 8015208:	b580      	push	{r7, lr}
 801520a:	b082      	sub	sp, #8
 801520c:	af00      	add	r7, sp, #0
 801520e:	6078      	str	r0, [r7, #4]
 8015210:	6039      	str	r1, [r7, #0]
  return ConstTransposeReturnType(derived());
 8015212:	6838      	ldr	r0, [r7, #0]
 8015214:	f000 f886 	bl	8015324 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE7derivedEv>
 8015218:	4603      	mov	r3, r0
 801521a:	4619      	mov	r1, r3
 801521c:	6878      	ldr	r0, [r7, #4]
 801521e:	f000 f8a4 	bl	801536a <_ZN5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1ERS6_>
}
 8015222:	6878      	ldr	r0, [r7, #4]
 8015224:	3708      	adds	r7, #8
 8015226:	46bd      	mov	sp, r7
 8015228:	bd80      	pop	{r7, pc}

0801522a <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEE12cwiseProductINS2_IKNS3_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 801522a:	b5b0      	push	{r4, r5, r7, lr}
 801522c:	b086      	sub	sp, #24
 801522e:	af00      	add	r7, sp, #0
 8015230:	60f8      	str	r0, [r7, #12]
 8015232:	60b9      	str	r1, [r7, #8]
 8015234:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 8015236:	68b8      	ldr	r0, [r7, #8]
 8015238:	f000 f8ae 	bl	8015398 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEE7derivedEv>
 801523c:	4604      	mov	r4, r0
 801523e:	6878      	ldr	r0, [r7, #4]
 8015240:	f7f7 fec4 	bl	800cfcc <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE7derivedEv>
 8015244:	4605      	mov	r5, r0
 8015246:	f107 0314 	add.w	r3, r7, #20
 801524a:	4618      	mov	r0, r3
 801524c:	f7f0 f9aa 	bl	80055a4 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 8015250:	f107 0314 	add.w	r3, r7, #20
 8015254:	462a      	mov	r2, r5
 8015256:	4621      	mov	r1, r4
 8015258:	68f8      	ldr	r0, [r7, #12]
 801525a:	f000 f8db 	bl	8015414 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_>
}
 801525e:	68f8      	ldr	r0, [r7, #12]
 8015260:	3718      	adds	r7, #24
 8015262:	46bd      	mov	sp, r7
 8015264:	bdb0      	pop	{r4, r5, r7, pc}

08015266 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 8015266:	b580      	push	{r7, lr}
 8015268:	b082      	sub	sp, #8
 801526a:	af00      	add	r7, sp, #0
 801526c:	6078      	str	r0, [r7, #4]
 801526e:	6878      	ldr	r0, [r7, #4]
 8015270:	f000 f92e 	bl	80154d0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE7derivedEv>
 8015274:	4603      	mov	r3, r0
 8015276:	4618      	mov	r0, r3
 8015278:	f000 f935 	bl	80154e6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE4rowsEv>
 801527c:	4603      	mov	r3, r0
 801527e:	4618      	mov	r0, r3
 8015280:	3708      	adds	r7, #8
 8015282:	46bd      	mov	sp, r7
 8015284:	bd80      	pop	{r7, pc}

08015286 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 8015286:	b590      	push	{r4, r7, lr}
 8015288:	b085      	sub	sp, #20
 801528a:	af00      	add	r7, sp, #0
 801528c:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 801528e:	6878      	ldr	r0, [r7, #4]
 8015290:	f000 f91e 	bl	80154d0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE7derivedEv>
 8015294:	4604      	mov	r4, r0
 8015296:	f107 030c 	add.w	r3, r7, #12
 801529a:	4618      	mov	r0, r3
 801529c:	f7f0 fc79 	bl	8005b92 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 80152a0:	f107 030c 	add.w	r3, r7, #12
 80152a4:	4619      	mov	r1, r3
 80152a6:	4620      	mov	r0, r4
 80152a8:	f000 f9c4 	bl	8015634 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 80152ac:	eef0 7a40 	vmov.f32	s15, s0
 80152b0:	bf00      	nop
}
 80152b2:	eeb0 0a67 	vmov.f32	s0, s15
 80152b6:	3714      	adds	r7, #20
 80152b8:	46bd      	mov	sp, r7
 80152ba:	bd90      	pop	{r4, r7, pc}

080152bc <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 80152bc:	b480      	push	{r7}
 80152be:	b083      	sub	sp, #12
 80152c0:	af00      	add	r7, sp, #0
 80152c2:	6078      	str	r0, [r7, #4]
 80152c4:	bf00      	nop
 80152c6:	370c      	adds	r7, #12
 80152c8:	46bd      	mov	sp, r7
 80152ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152ce:	4770      	bx	lr

080152d0 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 80152d0:	b580      	push	{r7, lr}
 80152d2:	b084      	sub	sp, #16
 80152d4:	af00      	add	r7, sp, #0
 80152d6:	60f8      	str	r0, [r7, #12]
 80152d8:	60b9      	str	r1, [r7, #8]
 80152da:	607a      	str	r2, [r7, #4]
 80152dc:	68fb      	ldr	r3, [r7, #12]
 80152de:	687a      	ldr	r2, [r7, #4]
 80152e0:	68b9      	ldr	r1, [r7, #8]
 80152e2:	4618      	mov	r0, r3
 80152e4:	f000 f9ec 	bl	80156c0 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 80152e8:	687b      	ldr	r3, [r7, #4]
 80152ea:	2b00      	cmp	r3, #0
 80152ec:	db07      	blt.n	80152fe <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEC1ERS3_i+0x2e>
 80152ee:	68bb      	ldr	r3, [r7, #8]
 80152f0:	4618      	mov	r0, r3
 80152f2:	f7f0 f878 	bl	80053e6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 80152f6:	4602      	mov	r2, r0
 80152f8:	687b      	ldr	r3, [r7, #4]
 80152fa:	4293      	cmp	r3, r2
 80152fc:	db05      	blt.n	801530a <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEC1ERS3_i+0x3a>
 80152fe:	4b06      	ldr	r3, [pc, #24]	; (8015318 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEC1ERS3_i+0x48>)
 8015300:	4a06      	ldr	r2, [pc, #24]	; (801531c <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEC1ERS3_i+0x4c>)
 8015302:	2178      	movs	r1, #120	; 0x78
 8015304:	4806      	ldr	r0, [pc, #24]	; (8015320 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEC1ERS3_i+0x50>)
 8015306:	f008 fdc5 	bl	801de94 <__assert_func>
 801530a:	bf00      	nop
    }
 801530c:	68fb      	ldr	r3, [r7, #12]
 801530e:	4618      	mov	r0, r3
 8015310:	3710      	adds	r7, #16
 8015312:	46bd      	mov	sp, r7
 8015314:	bd80      	pop	{r7, pc}
 8015316:	bf00      	nop
 8015318:	08024880 	.word	0x08024880
 801531c:	08029900 	.word	0x08029900
 8015320:	08024a04 	.word	0x08024a04

08015324 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8015324:	b480      	push	{r7}
 8015326:	b083      	sub	sp, #12
 8015328:	af00      	add	r7, sp, #0
 801532a:	6078      	str	r0, [r7, #4]
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	4618      	mov	r0, r3
 8015330:	370c      	adds	r7, #12
 8015332:	46bd      	mov	sp, r7
 8015334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015338:	4770      	bx	lr

0801533a <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1Ev>:
 801533a:	b580      	push	{r7, lr}
 801533c:	b082      	sub	sp, #8
 801533e:	af00      	add	r7, sp, #0
 8015340:	6078      	str	r0, [r7, #4]
 8015342:	6878      	ldr	r0, [r7, #4]
 8015344:	f000 f9cd 	bl	80156e2 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1Ev>
 8015348:	687b      	ldr	r3, [r7, #4]
 801534a:	4618      	mov	r0, r3
 801534c:	3708      	adds	r7, #8
 801534e:	46bd      	mov	sp, r7
 8015350:	bd80      	pop	{r7, pc}

08015352 <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 8015352:	b580      	push	{r7, lr}
 8015354:	b082      	sub	sp, #8
 8015356:	af00      	add	r7, sp, #0
 8015358:	6078      	str	r0, [r7, #4]
 801535a:	6878      	ldr	r0, [r7, #4]
 801535c:	f7ff ffed 	bl	801533a <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1Ev>
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	4618      	mov	r0, r3
 8015364:	3708      	adds	r7, #8
 8015366:	46bd      	mov	sp, r7
 8015368:	bd80      	pop	{r7, pc}

0801536a <_ZN5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1ERS6_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 801536a:	b5b0      	push	{r4, r5, r7, lr}
 801536c:	b082      	sub	sp, #8
 801536e:	af00      	add	r7, sp, #0
 8015370:	6078      	str	r0, [r7, #4]
 8015372:	6039      	str	r1, [r7, #0]
 8015374:	6878      	ldr	r0, [r7, #4]
 8015376:	f7ff ffec 	bl	8015352 <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEENS_5DenseEEC1Ev>
 801537a:	687a      	ldr	r2, [r7, #4]
 801537c:	683b      	ldr	r3, [r7, #0]
 801537e:	4614      	mov	r4, r2
 8015380:	461d      	mov	r5, r3
 8015382:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015384:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015386:	e895 0003 	ldmia.w	r5, {r0, r1}
 801538a:	e884 0003 	stmia.w	r4, {r0, r1}
 801538e:	687b      	ldr	r3, [r7, #4]
 8015390:	4618      	mov	r0, r3
 8015392:	3708      	adds	r7, #8
 8015394:	46bd      	mov	sp, r7
 8015396:	bdb0      	pop	{r4, r5, r7, pc}

08015398 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEE7derivedEv>:
 8015398:	b480      	push	{r7}
 801539a:	b083      	sub	sp, #12
 801539c:	af00      	add	r7, sp, #0
 801539e:	6078      	str	r0, [r7, #4]
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	4618      	mov	r0, r3
 80153a4:	370c      	adds	r7, #12
 80153a6:	46bd      	mov	sp, r7
 80153a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153ac:	4770      	bx	lr

080153ae <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1Ev>:
 80153ae:	b580      	push	{r7, lr}
 80153b0:	b082      	sub	sp, #8
 80153b2:	af00      	add	r7, sp, #0
 80153b4:	6078      	str	r0, [r7, #4]
 80153b6:	6878      	ldr	r0, [r7, #4]
 80153b8:	f000 f99e 	bl	80156f8 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1Ev>
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	4618      	mov	r0, r3
 80153c0:	3708      	adds	r7, #8
 80153c2:	46bd      	mov	sp, r7
 80153c4:	bd80      	pop	{r7, pc}

080153c6 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 80153c6:	b580      	push	{r7, lr}
 80153c8:	b082      	sub	sp, #8
 80153ca:	af00      	add	r7, sp, #0
 80153cc:	6078      	str	r0, [r7, #4]
 80153ce:	6878      	ldr	r0, [r7, #4]
 80153d0:	f7ff ffed 	bl	80153ae <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1Ev>
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	4618      	mov	r0, r3
 80153d8:	3708      	adds	r7, #8
 80153da:	46bd      	mov	sp, r7
 80153dc:	bd80      	pop	{r7, pc}

080153de <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 80153de:	b580      	push	{r7, lr}
 80153e0:	b082      	sub	sp, #8
 80153e2:	af00      	add	r7, sp, #0
 80153e4:	6078      	str	r0, [r7, #4]
 80153e6:	687b      	ldr	r3, [r7, #4]
 80153e8:	4618      	mov	r0, r3
 80153ea:	f000 f990 	bl	801570e <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE4colsEv>
 80153ee:	4603      	mov	r3, r0
 80153f0:	4618      	mov	r0, r3
 80153f2:	3708      	adds	r7, #8
 80153f4:	46bd      	mov	sp, r7
 80153f6:	bd80      	pop	{r7, pc}

080153f8 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 80153f8:	b580      	push	{r7, lr}
 80153fa:	b082      	sub	sp, #8
 80153fc:	af00      	add	r7, sp, #0
 80153fe:	6078      	str	r0, [r7, #4]
 8015400:	687b      	ldr	r3, [r7, #4]
 8015402:	4618      	mov	r0, r3
 8015404:	f000 f98e 	bl	8015724 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE4rowsEv>
 8015408:	4603      	mov	r3, r0
 801540a:	4618      	mov	r0, r3
 801540c:	3708      	adds	r7, #8
 801540e:	46bd      	mov	sp, r7
 8015410:	bd80      	pop	{r7, pc}
	...

08015414 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8015414:	b5b0      	push	{r4, r5, r7, lr}
 8015416:	b084      	sub	sp, #16
 8015418:	af00      	add	r7, sp, #0
 801541a:	60f8      	str	r0, [r7, #12]
 801541c:	60b9      	str	r1, [r7, #8]
 801541e:	607a      	str	r2, [r7, #4]
 8015420:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 8015422:	68f8      	ldr	r0, [r7, #12]
 8015424:	f7ff ffcf 	bl	80153c6 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS_5DenseEEC1Ev>
 8015428:	68fa      	ldr	r2, [r7, #12]
 801542a:	68bb      	ldr	r3, [r7, #8]
 801542c:	4614      	mov	r4, r2
 801542e:	461d      	mov	r5, r3
 8015430:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015432:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015434:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015438:	e884 0003 	stmia.w	r4, {r0, r1}
 801543c:	68fb      	ldr	r3, [r7, #12]
 801543e:	f103 0218 	add.w	r2, r3, #24
 8015442:	687b      	ldr	r3, [r7, #4]
 8015444:	4614      	mov	r4, r2
 8015446:	461d      	mov	r5, r3
 8015448:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801544a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801544c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015450:	e884 0003 	stmia.w	r4, {r0, r1}
 8015454:	68fb      	ldr	r3, [r7, #12]
 8015456:	3330      	adds	r3, #48	; 0x30
 8015458:	6839      	ldr	r1, [r7, #0]
 801545a:	4618      	mov	r0, r3
 801545c:	f7f0 f92c 	bl	80056b8 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8015460:	68b8      	ldr	r0, [r7, #8]
 8015462:	f7ff ffbc 	bl	80153de <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE4rowsEv>
 8015466:	4604      	mov	r4, r0
 8015468:	687b      	ldr	r3, [r7, #4]
 801546a:	4618      	mov	r0, r3
 801546c:	f7f7 fdd1 	bl	800d012 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4rowsEv>
 8015470:	4603      	mov	r3, r0
 8015472:	429c      	cmp	r4, r3
 8015474:	d10a      	bne.n	801548c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x78>
 8015476:	68b8      	ldr	r0, [r7, #8]
 8015478:	f7ff ffbe 	bl	80153f8 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE4colsEv>
 801547c:	4604      	mov	r4, r0
 801547e:	687b      	ldr	r3, [r7, #4]
 8015480:	4618      	mov	r0, r3
 8015482:	f7f7 fdd1 	bl	800d028 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4colsEv>
 8015486:	4603      	mov	r3, r0
 8015488:	429c      	cmp	r4, r3
 801548a:	d005      	beq.n	8015498 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x84>
 801548c:	4b05      	ldr	r3, [pc, #20]	; (80154a4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x90>)
 801548e:	4a06      	ldr	r2, [pc, #24]	; (80154a8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x94>)
 8015490:	2174      	movs	r1, #116	; 0x74
 8015492:	4806      	ldr	r0, [pc, #24]	; (80154ac <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x98>)
 8015494:	f008 fcfe 	bl	801de94 <__assert_func>
    }
 8015498:	68fb      	ldr	r3, [r7, #12]
 801549a:	4618      	mov	r0, r3
 801549c:	3710      	adds	r7, #16
 801549e:	46bd      	mov	sp, r7
 80154a0:	bdb0      	pop	{r4, r5, r7, pc}
 80154a2:	bf00      	nop
 80154a4:	0801fcfc 	.word	0x0801fcfc
 80154a8:	080299dc 	.word	0x080299dc
 80154ac:	0801ff60 	.word	0x0801ff60

080154b0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 80154b0:	b580      	push	{r7, lr}
 80154b2:	b082      	sub	sp, #8
 80154b4:	af00      	add	r7, sp, #0
 80154b6:	6078      	str	r0, [r7, #4]
 80154b8:	6878      	ldr	r0, [r7, #4]
 80154ba:	f000 f809 	bl	80154d0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE7derivedEv>
 80154be:	4603      	mov	r3, r0
 80154c0:	4618      	mov	r0, r3
 80154c2:	f000 f93a 	bl	801573a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE4colsEv>
 80154c6:	4603      	mov	r3, r0
 80154c8:	4618      	mov	r0, r3
 80154ca:	3708      	adds	r7, #8
 80154cc:	46bd      	mov	sp, r7
 80154ce:	bd80      	pop	{r7, pc}

080154d0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 80154d0:	b480      	push	{r7}
 80154d2:	b083      	sub	sp, #12
 80154d4:	af00      	add	r7, sp, #0
 80154d6:	6078      	str	r0, [r7, #4]
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	4618      	mov	r0, r3
 80154dc:	370c      	adds	r7, #12
 80154de:	46bd      	mov	sp, r7
 80154e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154e4:	4770      	bx	lr

080154e6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 80154e6:	b580      	push	{r7, lr}
 80154e8:	b082      	sub	sp, #8
 80154ea:	af00      	add	r7, sp, #0
 80154ec:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	4618      	mov	r0, r3
 80154f2:	f7ff ff74 	bl	80153de <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE4rowsEv>
 80154f6:	4603      	mov	r3, r0
    }
 80154f8:	4618      	mov	r0, r3
 80154fa:	3708      	adds	r7, #8
 80154fc:	46bd      	mov	sp, r7
 80154fe:	bd80      	pop	{r7, pc}

08015500 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_ED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 8015500:	b580      	push	{r7, lr}
 8015502:	b082      	sub	sp, #8
 8015504:	af00      	add	r7, sp, #0
 8015506:	6078      	str	r0, [r7, #4]
 8015508:	6878      	ldr	r0, [r7, #4]
 801550a:	f000 f948 	bl	801579e <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEED1Ev>
 801550e:	687b      	ldr	r3, [r7, #4]
 8015510:	4618      	mov	r0, r3
 8015512:	3708      	adds	r7, #8
 8015514:	46bd      	mov	sp, r7
 8015516:	bd80      	pop	{r7, pc}

08015518 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 8015518:	b580      	push	{r7, lr}
 801551a:	b082      	sub	sp, #8
 801551c:	af00      	add	r7, sp, #0
 801551e:	6078      	str	r0, [r7, #4]
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	4618      	mov	r0, r3
 8015524:	f7ff ffec 	bl	8015500 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_ED1Ev>
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	4618      	mov	r0, r3
 801552c:	3708      	adds	r7, #8
 801552e:	46bd      	mov	sp, r7
 8015530:	bd80      	pop	{r7, pc}

08015532 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 8015532:	b580      	push	{r7, lr}
 8015534:	b082      	sub	sp, #8
 8015536:	af00      	add	r7, sp, #0
 8015538:	6078      	str	r0, [r7, #4]
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	4618      	mov	r0, r3
 801553e:	f7ff ffeb 	bl	8015518 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EED1Ev>
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	4618      	mov	r0, r3
 8015546:	3708      	adds	r7, #8
 8015548:	46bd      	mov	sp, r7
 801554a:	bd80      	pop	{r7, pc}

0801554c <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEED1Ev>:
struct evaluator<const T>
 801554c:	b580      	push	{r7, lr}
 801554e:	b082      	sub	sp, #8
 8015550:	af00      	add	r7, sp, #0
 8015552:	6078      	str	r0, [r7, #4]
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	4618      	mov	r0, r3
 8015558:	f7ff ffeb 	bl	8015532 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEED1Ev>
 801555c:	687b      	ldr	r3, [r7, #4]
 801555e:	4618      	mov	r0, r3
 8015560:	3708      	adds	r7, #8
 8015562:	46bd      	mov	sp, r7
 8015564:	bd80      	pop	{r7, pc}

08015566 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 8015566:	b580      	push	{r7, lr}
 8015568:	b082      	sub	sp, #8
 801556a:	af00      	add	r7, sp, #0
 801556c:	6078      	str	r0, [r7, #4]
 801556e:	687b      	ldr	r3, [r7, #4]
 8015570:	4618      	mov	r0, r3
 8015572:	f7ff ffeb 	bl	801554c <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEED1Ev>
 8015576:	6878      	ldr	r0, [r7, #4]
 8015578:	f000 f906 	bl	8015788 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEED1Ev>
 801557c:	687b      	ldr	r3, [r7, #4]
 801557e:	4618      	mov	r0, r3
 8015580:	3708      	adds	r7, #8
 8015582:	46bd      	mov	sp, r7
 8015584:	bd80      	pop	{r7, pc}

08015586 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 8015586:	b580      	push	{r7, lr}
 8015588:	b082      	sub	sp, #8
 801558a:	af00      	add	r7, sp, #0
 801558c:	6078      	str	r0, [r7, #4]
 801558e:	687b      	ldr	r3, [r7, #4]
 8015590:	4618      	mov	r0, r3
 8015592:	f7ff ffe8 	bl	8015566 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEENS0_10IndexBasedEfED1Ev>
 8015596:	687b      	ldr	r3, [r7, #4]
 8015598:	4618      	mov	r0, r3
 801559a:	3708      	adds	r7, #8
 801559c:	46bd      	mov	sp, r7
 801559e:	bd80      	pop	{r7, pc}

080155a0 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEED1Ev>:
struct evaluator<const T>
 80155a0:	b580      	push	{r7, lr}
 80155a2:	b082      	sub	sp, #8
 80155a4:	af00      	add	r7, sp, #0
 80155a6:	6078      	str	r0, [r7, #4]
 80155a8:	687b      	ldr	r3, [r7, #4]
 80155aa:	4618      	mov	r0, r3
 80155ac:	f7ff ffeb 	bl	8015586 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEED1Ev>
 80155b0:	687b      	ldr	r3, [r7, #4]
 80155b2:	4618      	mov	r0, r3
 80155b4:	3708      	adds	r7, #8
 80155b6:	46bd      	mov	sp, r7
 80155b8:	bd80      	pop	{r7, pc}

080155ba <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>:
  struct Data
 80155ba:	b580      	push	{r7, lr}
 80155bc:	b082      	sub	sp, #8
 80155be:	af00      	add	r7, sp, #0
 80155c0:	6078      	str	r0, [r7, #4]
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	330c      	adds	r3, #12
 80155c6:	4618      	mov	r0, r3
 80155c8:	f7f7 fdd6 	bl	800d178 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	3304      	adds	r3, #4
 80155d0:	4618      	mov	r0, r3
 80155d2:	f7ff ffe5 	bl	80155a0 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEED1Ev>
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	4618      	mov	r0, r3
 80155da:	3708      	adds	r7, #8
 80155dc:	46bd      	mov	sp, r7
 80155de:	bd80      	pop	{r7, pc}

080155e0 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 80155e0:	b580      	push	{r7, lr}
 80155e2:	b082      	sub	sp, #8
 80155e4:	af00      	add	r7, sp, #0
 80155e6:	6078      	str	r0, [r7, #4]
 80155e8:	687b      	ldr	r3, [r7, #4]
 80155ea:	4618      	mov	r0, r3
 80155ec:	f7ff ffe5 	bl	80155ba <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>
 80155f0:	6878      	ldr	r0, [r7, #4]
 80155f2:	f000 f8be 	bl	8015772 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEED1Ev>
 80155f6:	687b      	ldr	r3, [r7, #4]
 80155f8:	4618      	mov	r0, r3
 80155fa:	3708      	adds	r7, #8
 80155fc:	46bd      	mov	sp, r7
 80155fe:	bd80      	pop	{r7, pc}

08015600 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 8015600:	b580      	push	{r7, lr}
 8015602:	b082      	sub	sp, #8
 8015604:	af00      	add	r7, sp, #0
 8015606:	6078      	str	r0, [r7, #4]
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	4618      	mov	r0, r3
 801560c:	f7ff ffe8 	bl	80155e0 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffED1Ev>
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	4618      	mov	r0, r3
 8015614:	3708      	adds	r7, #8
 8015616:	46bd      	mov	sp, r7
 8015618:	bd80      	pop	{r7, pc}

0801561a <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 801561a:	b580      	push	{r7, lr}
 801561c:	b082      	sub	sp, #8
 801561e:	af00      	add	r7, sp, #0
 8015620:	6078      	str	r0, [r7, #4]
 8015622:	687b      	ldr	r3, [r7, #4]
 8015624:	4618      	mov	r0, r3
 8015626:	f7ff ffeb 	bl	8015600 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEED1Ev>
 801562a:	687b      	ldr	r3, [r7, #4]
 801562c:	4618      	mov	r0, r3
 801562e:	3708      	adds	r7, #8
 8015630:	46bd      	mov	sp, r7
 8015632:	bd80      	pop	{r7, pc}

08015634 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 8015634:	b580      	push	{r7, lr}
 8015636:	ed2d 8b02 	vpush	{d8}
 801563a:	b088      	sub	sp, #32
 801563c:	af00      	add	r7, sp, #0
 801563e:	6078      	str	r0, [r7, #4]
 8015640:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 8015642:	6878      	ldr	r0, [r7, #4]
 8015644:	f7ff fe0f 	bl	8015266 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE4rowsEv>
 8015648:	4603      	mov	r3, r0
 801564a:	2b00      	cmp	r3, #0
 801564c:	dd05      	ble.n	801565a <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 801564e:	6878      	ldr	r0, [r7, #4]
 8015650:	f7ff ff2e 	bl	80154b0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE4colsEv>
 8015654:	4603      	mov	r3, r0
 8015656:	2b00      	cmp	r3, #0
 8015658:	dc06      	bgt.n	8015668 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 801565a:	4b16      	ldr	r3, [pc, #88]	; (80156b4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 801565c:	4a16      	ldr	r2, [pc, #88]	; (80156b8 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 801565e:	f240 119b 	movw	r1, #411	; 0x19b
 8015662:	4816      	ldr	r0, [pc, #88]	; (80156bc <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 8015664:	f008 fc16 	bl	801de94 <__assert_func>
 8015668:	bf00      	nop
  ThisEvaluator thisEval(derived());
 801566a:	6878      	ldr	r0, [r7, #4]
 801566c:	f7ff ff30 	bl	80154d0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE7derivedEv>
 8015670:	4602      	mov	r2, r0
 8015672:	f107 030c 	add.w	r3, r7, #12
 8015676:	4611      	mov	r1, r2
 8015678:	4618      	mov	r0, r3
 801567a:	f000 f86b 	bl	8015754 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1ERKSI_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 801567e:	6878      	ldr	r0, [r7, #4]
 8015680:	f7ff ff26 	bl	80154d0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE7derivedEv>
 8015684:	4602      	mov	r2, r0
 8015686:	f107 030c 	add.w	r3, r7, #12
 801568a:	6839      	ldr	r1, [r7, #0]
 801568c:	4618      	mov	r0, r3
 801568e:	f000 f891 	bl	80157b4 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>
 8015692:	eeb0 8a40 	vmov.f32	s16, s0
 8015696:	bf00      	nop
  ThisEvaluator thisEval(derived());
 8015698:	f107 030c 	add.w	r3, r7, #12
 801569c:	4618      	mov	r0, r3
 801569e:	f7ff ffbc 	bl	801561a <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 80156a2:	eef0 7a48 	vmov.f32	s15, s16
}
 80156a6:	eeb0 0a67 	vmov.f32	s0, s15
 80156aa:	3720      	adds	r7, #32
 80156ac:	46bd      	mov	sp, r7
 80156ae:	ecbd 8b02 	vpop	{d8}
 80156b2:	bd80      	pop	{r7, pc}
 80156b4:	08024d7c 	.word	0x08024d7c
 80156b8:	08029c24 	.word	0x08029c24
 80156bc:	08024f88 	.word	0x08024f88

080156c0 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ENS_5DenseEEC1ERS3_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 80156c0:	b580      	push	{r7, lr}
 80156c2:	b084      	sub	sp, #16
 80156c4:	af00      	add	r7, sp, #0
 80156c6:	60f8      	str	r0, [r7, #12]
 80156c8:	60b9      	str	r1, [r7, #8]
 80156ca:	607a      	str	r2, [r7, #4]
 80156cc:	68fb      	ldr	r3, [r7, #12]
 80156ce:	687a      	ldr	r2, [r7, #4]
 80156d0:	68b9      	ldr	r1, [r7, #8]
 80156d2:	4618      	mov	r0, r3
 80156d4:	f000 f87f 	bl	80157d6 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EEC1ERS4_i>
 80156d8:	68fb      	ldr	r3, [r7, #12]
 80156da:	4618      	mov	r0, r3
 80156dc:	3710      	adds	r7, #16
 80156de:	46bd      	mov	sp, r7
 80156e0:	bd80      	pop	{r7, pc}

080156e2 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80156e2:	b480      	push	{r7}
 80156e4:	b083      	sub	sp, #12
 80156e6:	af00      	add	r7, sp, #0
 80156e8:	6078      	str	r0, [r7, #4]
    }
 80156ea:	687b      	ldr	r3, [r7, #4]
 80156ec:	4618      	mov	r0, r3
 80156ee:	370c      	adds	r7, #12
 80156f0:	46bd      	mov	sp, r7
 80156f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156f6:	4770      	bx	lr

080156f8 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80156f8:	b480      	push	{r7}
 80156fa:	b083      	sub	sp, #12
 80156fc:	af00      	add	r7, sp, #0
 80156fe:	6078      	str	r0, [r7, #4]
    }
 8015700:	687b      	ldr	r3, [r7, #4]
 8015702:	4618      	mov	r0, r3
 8015704:	370c      	adds	r7, #12
 8015706:	46bd      	mov	sp, r7
 8015708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801570c:	4770      	bx	lr

0801570e <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 801570e:	b580      	push	{r7, lr}
 8015710:	b082      	sub	sp, #8
 8015712:	af00      	add	r7, sp, #0
 8015714:	6078      	str	r0, [r7, #4]
 8015716:	f7f1 fa6e 	bl	8006bf6 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 801571a:	4603      	mov	r3, r0
 801571c:	4618      	mov	r0, r3
 801571e:	3708      	adds	r7, #8
 8015720:	46bd      	mov	sp, r7
 8015722:	bd80      	pop	{r7, pc}

08015724 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 8015724:	b580      	push	{r7, lr}
 8015726:	b082      	sub	sp, #8
 8015728:	af00      	add	r7, sp, #0
 801572a:	6078      	str	r0, [r7, #4]
 801572c:	f7f1 fa6b 	bl	8006c06 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 8015730:	4603      	mov	r3, r0
 8015732:	4618      	mov	r0, r3
 8015734:	3708      	adds	r7, #8
 8015736:	46bd      	mov	sp, r7
 8015738:	bd80      	pop	{r7, pc}

0801573a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 801573a:	b580      	push	{r7, lr}
 801573c:	b082      	sub	sp, #8
 801573e:	af00      	add	r7, sp, #0
 8015740:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 8015742:	687b      	ldr	r3, [r7, #4]
 8015744:	4618      	mov	r0, r3
 8015746:	f7ff fe57 	bl	80153f8 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE4colsEv>
 801574a:	4603      	mov	r3, r0
    }
 801574c:	4618      	mov	r0, r3
 801574e:	3708      	adds	r7, #8
 8015750:	46bd      	mov	sp, r7
 8015752:	bd80      	pop	{r7, pc}

08015754 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1ERKSI_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 8015754:	b580      	push	{r7, lr}
 8015756:	b082      	sub	sp, #8
 8015758:	af00      	add	r7, sp, #0
 801575a:	6078      	str	r0, [r7, #4]
 801575c:	6039      	str	r1, [r7, #0]
 801575e:	687b      	ldr	r3, [r7, #4]
 8015760:	6839      	ldr	r1, [r7, #0]
 8015762:	4618      	mov	r0, r3
 8015764:	f000 f86d 	bl	8015842 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1ERKSI_>
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	4618      	mov	r0, r3
 801576c:	3708      	adds	r7, #8
 801576e:	46bd      	mov	sp, r7
 8015770:	bd80      	pop	{r7, pc}

08015772 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8015772:	b480      	push	{r7}
 8015774:	b083      	sub	sp, #12
 8015776:	af00      	add	r7, sp, #0
 8015778:	6078      	str	r0, [r7, #4]
 801577a:	687b      	ldr	r3, [r7, #4]
 801577c:	4618      	mov	r0, r3
 801577e:	370c      	adds	r7, #12
 8015780:	46bd      	mov	sp, r7
 8015782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015786:	4770      	bx	lr

08015788 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEED1Ev>:
 8015788:	b480      	push	{r7}
 801578a:	b083      	sub	sp, #12
 801578c:	af00      	add	r7, sp, #0
 801578e:	6078      	str	r0, [r7, #4]
 8015790:	687b      	ldr	r3, [r7, #4]
 8015792:	4618      	mov	r0, r3
 8015794:	370c      	adds	r7, #12
 8015796:	46bd      	mov	sp, r7
 8015798:	f85d 7b04 	ldr.w	r7, [sp], #4
 801579c:	4770      	bx	lr

0801579e <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEED1Ev>:
 801579e:	b480      	push	{r7}
 80157a0:	b083      	sub	sp, #12
 80157a2:	af00      	add	r7, sp, #0
 80157a4:	6078      	str	r0, [r7, #4]
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	4618      	mov	r0, r3
 80157aa:	370c      	adds	r7, #12
 80157ac:	46bd      	mov	sp, r7
 80157ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157b2:	4770      	bx	lr

080157b4 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 80157b4:	b580      	push	{r7, lr}
 80157b6:	b084      	sub	sp, #16
 80157b8:	af00      	add	r7, sp, #0
 80157ba:	60f8      	str	r0, [r7, #12]
 80157bc:	60b9      	str	r1, [r7, #8]
 80157be:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 80157c0:	68b9      	ldr	r1, [r7, #8]
 80157c2:	68f8      	ldr	r0, [r7, #12]
 80157c4:	f000 f84c 	bl	8015860 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi0ELi3EE3runERKSM_RKS3_>
 80157c8:	eef0 7a40 	vmov.f32	s15, s0
  }
 80157cc:	eeb0 0a67 	vmov.f32	s0, s15
 80157d0:	3710      	adds	r7, #16
 80157d2:	46bd      	mov	sp, r7
 80157d4:	bd80      	pop	{r7, pc}

080157d6 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EEC1ERS4_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 80157d6:	b5b0      	push	{r4, r5, r7, lr}
 80157d8:	b084      	sub	sp, #16
 80157da:	af00      	add	r7, sp, #0
 80157dc:	60f8      	str	r0, [r7, #12]
 80157de:	60b9      	str	r1, [r7, #8]
 80157e0:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 80157e2:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 80157e4:	68bb      	ldr	r3, [r7, #8]
 80157e6:	4618      	mov	r0, r3
 80157e8:	f7fd f866 	bl	80128b8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4dataEv>
 80157ec:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 80157ee:	68b8      	ldr	r0, [r7, #8]
 80157f0:	f7fd fa90 	bl	8012d14 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11outerStrideEv>
 80157f4:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	fb02 f303 	mul.w	r3, r2, r3
 80157fc:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 80157fe:	441d      	add	r5, r3
 8015800:	68bb      	ldr	r3, [r7, #8]
 8015802:	4618      	mov	r0, r3
 8015804:	f7ef fde4 	bl	80053d0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8015808:	4603      	mov	r3, r0
 801580a:	2201      	movs	r2, #1
 801580c:	4629      	mov	r1, r5
 801580e:	4620      	mov	r0, r4
 8015810:	f000 f856 	bl	80158c0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii>
 8015814:	68fb      	ldr	r3, [r7, #12]
 8015816:	68ba      	ldr	r2, [r7, #8]
 8015818:	609a      	str	r2, [r3, #8]
 801581a:	68fb      	ldr	r3, [r7, #12]
 801581c:	330c      	adds	r3, #12
 801581e:	6879      	ldr	r1, [r7, #4]
 8015820:	4618      	mov	r0, r3
 8015822:	f7f8 faab 	bl	800dd7c <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
 8015826:	68fb      	ldr	r3, [r7, #12]
 8015828:	3310      	adds	r3, #16
 801582a:	2100      	movs	r1, #0
 801582c:	4618      	mov	r0, r3
 801582e:	f7f8 fa31 	bl	800dc94 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
      init();
 8015832:	68f8      	ldr	r0, [r7, #12]
 8015834:	f000 f882 	bl	801593c <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EE4initEv>
    }
 8015838:	68fb      	ldr	r3, [r7, #12]
 801583a:	4618      	mov	r0, r3
 801583c:	3710      	adds	r7, #16
 801583e:	46bd      	mov	sp, r7
 8015840:	bdb0      	pop	{r4, r5, r7, pc}

08015842 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1ERKSI_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8015842:	b580      	push	{r7, lr}
 8015844:	b082      	sub	sp, #8
 8015846:	af00      	add	r7, sp, #0
 8015848:	6078      	str	r0, [r7, #4]
 801584a:	6039      	str	r1, [r7, #0]
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	6839      	ldr	r1, [r7, #0]
 8015850:	4618      	mov	r0, r3
 8015852:	f000 f883 	bl	801595c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>
 8015856:	687b      	ldr	r3, [r7, #4]
 8015858:	4618      	mov	r0, r3
 801585a:	3708      	adds	r7, #8
 801585c:	46bd      	mov	sp, r7
 801585e:	bd80      	pop	{r7, pc}

08015860 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi0ELi3EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 8015860:	b580      	push	{r7, lr}
 8015862:	b084      	sub	sp, #16
 8015864:	af00      	add	r7, sp, #0
 8015866:	6078      	str	r0, [r7, #4]
 8015868:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 801586a:	6839      	ldr	r1, [r7, #0]
 801586c:	6878      	ldr	r0, [r7, #4]
 801586e:	f000 f887 	bl	8015980 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi0ELi1EE3runERKSM_RKS3_>
 8015872:	eef0 7a40 	vmov.f32	s15, s0
 8015876:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 801587a:	6839      	ldr	r1, [r7, #0]
 801587c:	6878      	ldr	r0, [r7, #4]
 801587e:	f000 f890 	bl	80159a2 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi1ELi2EE3runERKSM_RKS3_>
 8015882:	eef0 7a40 	vmov.f32	s15, s0
 8015886:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 801588a:	f107 020c 	add.w	r2, r7, #12
 801588e:	f107 0308 	add.w	r3, r7, #8
 8015892:	4619      	mov	r1, r3
 8015894:	6838      	ldr	r0, [r7, #0]
 8015896:	f7f3 fd74 	bl	8009382 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 801589a:	eef0 7a40 	vmov.f32	s15, s0
  }
 801589e:	eeb0 0a67 	vmov.f32	s0, s15
 80158a2:	3710      	adds	r7, #16
 80158a4:	46bd      	mov	sp, r7
 80158a6:	bd80      	pop	{r7, pc}

080158a8 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1Ev>:
 80158a8:	b580      	push	{r7, lr}
 80158aa:	b082      	sub	sp, #8
 80158ac:	af00      	add	r7, sp, #0
 80158ae:	6078      	str	r0, [r7, #4]
 80158b0:	6878      	ldr	r0, [r7, #4]
 80158b2:	f000 f89a 	bl	80159ea <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1Ev>
 80158b6:	687b      	ldr	r3, [r7, #4]
 80158b8:	4618      	mov	r0, r3
 80158ba:	3708      	adds	r7, #8
 80158bc:	46bd      	mov	sp, r7
 80158be:	bd80      	pop	{r7, pc}

080158c0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 80158c0:	b580      	push	{r7, lr}
 80158c2:	b084      	sub	sp, #16
 80158c4:	af00      	add	r7, sp, #0
 80158c6:	60f8      	str	r0, [r7, #12]
 80158c8:	60b9      	str	r1, [r7, #8]
 80158ca:	607a      	str	r2, [r7, #4]
 80158cc:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 80158ce:	68f8      	ldr	r0, [r7, #12]
 80158d0:	f7ff ffea 	bl	80158a8 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1Ev>
 80158d4:	68fb      	ldr	r3, [r7, #12]
 80158d6:	68ba      	ldr	r2, [r7, #8]
 80158d8:	601a      	str	r2, [r3, #0]
 80158da:	68fb      	ldr	r3, [r7, #12]
 80158dc:	3304      	adds	r3, #4
 80158de:	6879      	ldr	r1, [r7, #4]
 80158e0:	4618      	mov	r0, r3
 80158e2:	f7f1 f963 	bl	8006bac <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 80158e6:	68fb      	ldr	r3, [r7, #12]
 80158e8:	3305      	adds	r3, #5
 80158ea:	6839      	ldr	r1, [r7, #0]
 80158ec:	4618      	mov	r0, r3
 80158ee:	f7f1 f943 	bl	8006b78 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
      eigen_assert( (dataPtr == 0)
 80158f2:	68bb      	ldr	r3, [r7, #8]
 80158f4:	2b00      	cmp	r3, #0
 80158f6:	d011      	beq.n	801591c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x5c>
 80158f8:	687b      	ldr	r3, [r7, #4]
 80158fa:	2b00      	cmp	r3, #0
 80158fc:	db08      	blt.n	8015910 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x50>
 80158fe:	687b      	ldr	r3, [r7, #4]
 8015900:	2b01      	cmp	r3, #1
 8015902:	d105      	bne.n	8015910 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x50>
 8015904:	683b      	ldr	r3, [r7, #0]
 8015906:	2b00      	cmp	r3, #0
 8015908:	db02      	blt.n	8015910 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x50>
 801590a:	683b      	ldr	r3, [r7, #0]
 801590c:	2b03      	cmp	r3, #3
 801590e:	d005      	beq.n	801591c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x5c>
 8015910:	4b07      	ldr	r3, [pc, #28]	; (8015930 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x70>)
 8015912:	4a08      	ldr	r2, [pc, #32]	; (8015934 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x74>)
 8015914:	21b0      	movs	r1, #176	; 0xb0
 8015916:	4808      	ldr	r0, [pc, #32]	; (8015938 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x78>)
 8015918:	f008 fabc 	bl	801de94 <__assert_func>
      checkSanity<Derived>();
 801591c:	2100      	movs	r1, #0
 801591e:	68f8      	ldr	r0, [r7, #12]
 8015920:	f000 f86e 	bl	8015a00 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 8015924:	68fb      	ldr	r3, [r7, #12]
 8015926:	4618      	mov	r0, r3
 8015928:	3710      	adds	r7, #16
 801592a:	46bd      	mov	sp, r7
 801592c:	bd80      	pop	{r7, pc}
 801592e:	bf00      	nop
 8015930:	08026420 	.word	0x08026420
 8015934:	08029de8 	.word	0x08029de8
 8015938:	080265d0 	.word	0x080265d0

0801593c <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EE4initEv>:
    void init()
 801593c:	b580      	push	{r7, lr}
 801593e:	b082      	sub	sp, #8
 8015940:	af00      	add	r7, sp, #0
 8015942:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8015944:	687b      	ldr	r3, [r7, #4]
 8015946:	689b      	ldr	r3, [r3, #8]
 8015948:	4618      	mov	r0, r3
 801594a:	f7fd f9e3 	bl	8012d14 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11outerStrideEv>
 801594e:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 8015950:	687b      	ldr	r3, [r7, #4]
 8015952:	615a      	str	r2, [r3, #20]
    }
 8015954:	bf00      	nop
 8015956:	3708      	adds	r7, #8
 8015958:	46bd      	mov	sp, r7
 801595a:	bd80      	pop	{r7, pc}

0801595c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 801595c:	b580      	push	{r7, lr}
 801595e:	b082      	sub	sp, #8
 8015960:	af00      	add	r7, sp, #0
 8015962:	6078      	str	r0, [r7, #4]
 8015964:	6039      	str	r1, [r7, #0]
 8015966:	6878      	ldr	r0, [r7, #4]
 8015968:	f000 f855 	bl	8015a16 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1Ev>
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	6839      	ldr	r1, [r7, #0]
 8015970:	4618      	mov	r0, r3
 8015972:	f000 f85b 	bl	8015a2c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>
  }
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	4618      	mov	r0, r3
 801597a:	3708      	adds	r7, #8
 801597c:	46bd      	mov	sp, r7
 801597e:	bd80      	pop	{r7, pc}

08015980 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi0ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8015980:	b580      	push	{r7, lr}
 8015982:	b082      	sub	sp, #8
 8015984:	af00      	add	r7, sp, #0
 8015986:	6078      	str	r0, [r7, #4]
 8015988:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 801598a:	2200      	movs	r2, #0
 801598c:	2100      	movs	r1, #0
 801598e:	6878      	ldr	r0, [r7, #4]
 8015990:	f000 f874 	bl	8015a7c <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 8015994:	eef0 7a40 	vmov.f32	s15, s0
  }
 8015998:	eeb0 0a67 	vmov.f32	s0, s15
 801599c:	3708      	adds	r7, #8
 801599e:	46bd      	mov	sp, r7
 80159a0:	bd80      	pop	{r7, pc}

080159a2 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi1ELi2EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 80159a2:	b580      	push	{r7, lr}
 80159a4:	b084      	sub	sp, #16
 80159a6:	af00      	add	r7, sp, #0
 80159a8:	6078      	str	r0, [r7, #4]
 80159aa:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 80159ac:	6839      	ldr	r1, [r7, #0]
 80159ae:	6878      	ldr	r0, [r7, #4]
 80159b0:	f000 f877 	bl	8015aa2 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi1ELi1EE3runERKSM_RKS3_>
 80159b4:	eef0 7a40 	vmov.f32	s15, s0
 80159b8:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 80159bc:	6839      	ldr	r1, [r7, #0]
 80159be:	6878      	ldr	r0, [r7, #4]
 80159c0:	f000 f880 	bl	8015ac4 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi2ELi1EE3runERKSM_RKS3_>
 80159c4:	eef0 7a40 	vmov.f32	s15, s0
 80159c8:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 80159cc:	f107 020c 	add.w	r2, r7, #12
 80159d0:	f107 0308 	add.w	r3, r7, #8
 80159d4:	4619      	mov	r1, r3
 80159d6:	6838      	ldr	r0, [r7, #0]
 80159d8:	f7f3 fcd3 	bl	8009382 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 80159dc:	eef0 7a40 	vmov.f32	s15, s0
  }
 80159e0:	eeb0 0a67 	vmov.f32	s0, s15
 80159e4:	3710      	adds	r7, #16
 80159e6:	46bd      	mov	sp, r7
 80159e8:	bd80      	pop	{r7, pc}

080159ea <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80159ea:	b480      	push	{r7}
 80159ec:	b083      	sub	sp, #12
 80159ee:	af00      	add	r7, sp, #0
 80159f0:	6078      	str	r0, [r7, #4]
    }
 80159f2:	687b      	ldr	r3, [r7, #4]
 80159f4:	4618      	mov	r0, r3
 80159f6:	370c      	adds	r7, #12
 80159f8:	46bd      	mov	sp, r7
 80159fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159fe:	4770      	bx	lr

08015a00 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 8015a00:	b480      	push	{r7}
 8015a02:	b083      	sub	sp, #12
 8015a04:	af00      	add	r7, sp, #0
 8015a06:	6078      	str	r0, [r7, #4]
 8015a08:	6039      	str	r1, [r7, #0]
    {}
 8015a0a:	bf00      	nop
 8015a0c:	370c      	adds	r7, #12
 8015a0e:	46bd      	mov	sp, r7
 8015a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a14:	4770      	bx	lr

08015a16 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8015a16:	b480      	push	{r7}
 8015a18:	b083      	sub	sp, #12
 8015a1a:	af00      	add	r7, sp, #0
 8015a1c:	6078      	str	r0, [r7, #4]
 8015a1e:	687b      	ldr	r3, [r7, #4]
 8015a20:	4618      	mov	r0, r3
 8015a22:	370c      	adds	r7, #12
 8015a24:	46bd      	mov	sp, r7
 8015a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a2a:	4770      	bx	lr

08015a2c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 8015a2c:	b590      	push	{r4, r7, lr}
 8015a2e:	b083      	sub	sp, #12
 8015a30:	af00      	add	r7, sp, #0
 8015a32:	6078      	str	r0, [r7, #4]
 8015a34:	6039      	str	r1, [r7, #0]
 8015a36:	687c      	ldr	r4, [r7, #4]
 8015a38:	6838      	ldr	r0, [r7, #0]
 8015a3a:	f000 f854 	bl	8015ae6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE7functorEv>
 8015a3e:	4603      	mov	r3, r0
 8015a40:	4619      	mov	r1, r3
 8015a42:	4620      	mov	r0, r4
 8015a44:	f7ef fe38 	bl	80056b8 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	1d1c      	adds	r4, r3, #4
 8015a4c:	6838      	ldr	r0, [r7, #0]
 8015a4e:	f000 f856 	bl	8015afe <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE3lhsEv>
 8015a52:	4603      	mov	r3, r0
 8015a54:	4619      	mov	r1, r3
 8015a56:	4620      	mov	r0, r4
 8015a58:	f000 f868 	bl	8015b2c <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1ERSA_>
 8015a5c:	687b      	ldr	r3, [r7, #4]
 8015a5e:	f103 040c 	add.w	r4, r3, #12
 8015a62:	6838      	ldr	r0, [r7, #0]
 8015a64:	f000 f856 	bl	8015b14 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE3rhsEv>
 8015a68:	4603      	mov	r3, r0
 8015a6a:	4619      	mov	r1, r3
 8015a6c:	4620      	mov	r0, r4
 8015a6e:	f7fa f995 	bl	800fd9c <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERS7_>
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	4618      	mov	r0, r3
 8015a76:	370c      	adds	r7, #12
 8015a78:	46bd      	mov	sp, r7
 8015a7a:	bd90      	pop	{r4, r7, pc}

08015a7c <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 8015a7c:	b580      	push	{r7, lr}
 8015a7e:	b084      	sub	sp, #16
 8015a80:	af00      	add	r7, sp, #0
 8015a82:	60f8      	str	r0, [r7, #12]
 8015a84:	60b9      	str	r1, [r7, #8]
 8015a86:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 8015a88:	68fb      	ldr	r3, [r7, #12]
 8015a8a:	68ba      	ldr	r2, [r7, #8]
 8015a8c:	6879      	ldr	r1, [r7, #4]
 8015a8e:	4618      	mov	r0, r3
 8015a90:	f000 f85b 	bl	8015b4a <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE5coeffEii>
 8015a94:	eef0 7a40 	vmov.f32	s15, s0
 8015a98:	eeb0 0a67 	vmov.f32	s0, s15
 8015a9c:	3710      	adds	r7, #16
 8015a9e:	46bd      	mov	sp, r7
 8015aa0:	bd80      	pop	{r7, pc}

08015aa2 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi1ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8015aa2:	b580      	push	{r7, lr}
 8015aa4:	b082      	sub	sp, #8
 8015aa6:	af00      	add	r7, sp, #0
 8015aa8:	6078      	str	r0, [r7, #4]
 8015aaa:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8015aac:	2201      	movs	r2, #1
 8015aae:	2100      	movs	r1, #0
 8015ab0:	6878      	ldr	r0, [r7, #4]
 8015ab2:	f7ff ffe3 	bl	8015a7c <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 8015ab6:	eef0 7a40 	vmov.f32	s15, s0
  }
 8015aba:	eeb0 0a67 	vmov.f32	s0, s15
 8015abe:	3708      	adds	r7, #8
 8015ac0:	46bd      	mov	sp, r7
 8015ac2:	bd80      	pop	{r7, pc}

08015ac4 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi2ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8015ac4:	b580      	push	{r7, lr}
 8015ac6:	b082      	sub	sp, #8
 8015ac8:	af00      	add	r7, sp, #0
 8015aca:	6078      	str	r0, [r7, #4]
 8015acc:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8015ace:	2202      	movs	r2, #2
 8015ad0:	2100      	movs	r1, #0
 8015ad2:	6878      	ldr	r0, [r7, #4]
 8015ad4:	f7ff ffd2 	bl	8015a7c <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 8015ad8:	eef0 7a40 	vmov.f32	s15, s0
  }
 8015adc:	eeb0 0a67 	vmov.f32	s0, s15
 8015ae0:	3708      	adds	r7, #8
 8015ae2:	46bd      	mov	sp, r7
 8015ae4:	bd80      	pop	{r7, pc}

08015ae6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 8015ae6:	b480      	push	{r7}
 8015ae8:	b083      	sub	sp, #12
 8015aea:	af00      	add	r7, sp, #0
 8015aec:	6078      	str	r0, [r7, #4]
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	3330      	adds	r3, #48	; 0x30
 8015af2:	4618      	mov	r0, r3
 8015af4:	370c      	adds	r7, #12
 8015af6:	46bd      	mov	sp, r7
 8015af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015afc:	4770      	bx	lr

08015afe <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 8015afe:	b480      	push	{r7}
 8015b00:	b083      	sub	sp, #12
 8015b02:	af00      	add	r7, sp, #0
 8015b04:	6078      	str	r0, [r7, #4]
 8015b06:	687b      	ldr	r3, [r7, #4]
 8015b08:	4618      	mov	r0, r3
 8015b0a:	370c      	adds	r7, #12
 8015b0c:	46bd      	mov	sp, r7
 8015b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b12:	4770      	bx	lr

08015b14 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 8015b14:	b480      	push	{r7}
 8015b16:	b083      	sub	sp, #12
 8015b18:	af00      	add	r7, sp, #0
 8015b1a:	6078      	str	r0, [r7, #4]
 8015b1c:	687b      	ldr	r3, [r7, #4]
 8015b1e:	3318      	adds	r3, #24
 8015b20:	4618      	mov	r0, r3
 8015b22:	370c      	adds	r7, #12
 8015b24:	46bd      	mov	sp, r7
 8015b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b2a:	4770      	bx	lr

08015b2c <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1ERSA_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8015b2c:	b580      	push	{r7, lr}
 8015b2e:	b082      	sub	sp, #8
 8015b30:	af00      	add	r7, sp, #0
 8015b32:	6078      	str	r0, [r7, #4]
 8015b34:	6039      	str	r1, [r7, #0]
 8015b36:	687b      	ldr	r3, [r7, #4]
 8015b38:	6839      	ldr	r1, [r7, #0]
 8015b3a:	4618      	mov	r0, r3
 8015b3c:	f000 f835 	bl	8015baa <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1ERKS9_>
 8015b40:	687b      	ldr	r3, [r7, #4]
 8015b42:	4618      	mov	r0, r3
 8015b44:	3708      	adds	r7, #8
 8015b46:	46bd      	mov	sp, r7
 8015b48:	bd80      	pop	{r7, pc}

08015b4a <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8015b4a:	b590      	push	{r4, r7, lr}
 8015b4c:	b087      	sub	sp, #28
 8015b4e:	af00      	add	r7, sp, #0
 8015b50:	60f8      	str	r0, [r7, #12]
 8015b52:	60b9      	str	r1, [r7, #8]
 8015b54:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 8015b56:	68fb      	ldr	r3, [r7, #12]
 8015b58:	4618      	mov	r0, r3
 8015b5a:	f000 f835 	bl	8015bc8 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>
 8015b5e:	4604      	mov	r4, r0
 8015b60:	68fb      	ldr	r3, [r7, #12]
 8015b62:	3304      	adds	r3, #4
 8015b64:	687a      	ldr	r2, [r7, #4]
 8015b66:	68b9      	ldr	r1, [r7, #8]
 8015b68:	4618      	mov	r0, r3
 8015b6a:	f000 f838 	bl	8015bde <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEENS0_10IndexBasedEfE5coeffEii>
 8015b6e:	eef0 7a40 	vmov.f32	s15, s0
 8015b72:	edc7 7a04 	vstr	s15, [r7, #16]
 8015b76:	68fb      	ldr	r3, [r7, #12]
 8015b78:	330c      	adds	r3, #12
 8015b7a:	687a      	ldr	r2, [r7, #4]
 8015b7c:	68b9      	ldr	r1, [r7, #8]
 8015b7e:	4618      	mov	r0, r3
 8015b80:	f7fa fd4e 	bl	8010620 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>
 8015b84:	eef0 7a40 	vmov.f32	s15, s0
 8015b88:	edc7 7a05 	vstr	s15, [r7, #20]
 8015b8c:	f107 0214 	add.w	r2, r7, #20
 8015b90:	f107 0310 	add.w	r3, r7, #16
 8015b94:	4619      	mov	r1, r3
 8015b96:	4620      	mov	r0, r4
 8015b98:	f7f9 fc34 	bl	800f404 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 8015b9c:	eef0 7a40 	vmov.f32	s15, s0
  }
 8015ba0:	eeb0 0a67 	vmov.f32	s0, s15
 8015ba4:	371c      	adds	r7, #28
 8015ba6:	46bd      	mov	sp, r7
 8015ba8:	bd90      	pop	{r4, r7, pc}

08015baa <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1ERKS9_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 8015baa:	b580      	push	{r7, lr}
 8015bac:	b082      	sub	sp, #8
 8015bae:	af00      	add	r7, sp, #0
 8015bb0:	6078      	str	r0, [r7, #4]
 8015bb2:	6039      	str	r1, [r7, #0]
 8015bb4:	687b      	ldr	r3, [r7, #4]
 8015bb6:	6839      	ldr	r1, [r7, #0]
 8015bb8:	4618      	mov	r0, r3
 8015bba:	f000 f823 	bl	8015c04 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEENS0_10IndexBasedEfEC1ERKS9_>
 8015bbe:	687b      	ldr	r3, [r7, #4]
 8015bc0:	4618      	mov	r0, r3
 8015bc2:	3708      	adds	r7, #8
 8015bc4:	46bd      	mov	sp, r7
 8015bc6:	bd80      	pop	{r7, pc}

08015bc8 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 8015bc8:	b480      	push	{r7}
 8015bca:	b083      	sub	sp, #12
 8015bcc:	af00      	add	r7, sp, #0
 8015bce:	6078      	str	r0, [r7, #4]
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	4618      	mov	r0, r3
 8015bd4:	370c      	adds	r7, #12
 8015bd6:	46bd      	mov	sp, r7
 8015bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bdc:	4770      	bx	lr

08015bde <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8015bde:	b580      	push	{r7, lr}
 8015be0:	b084      	sub	sp, #16
 8015be2:	af00      	add	r7, sp, #0
 8015be4:	60f8      	str	r0, [r7, #12]
 8015be6:	60b9      	str	r1, [r7, #8]
 8015be8:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 8015bea:	68fb      	ldr	r3, [r7, #12]
 8015bec:	68ba      	ldr	r2, [r7, #8]
 8015bee:	6879      	ldr	r1, [r7, #4]
 8015bf0:	4618      	mov	r0, r3
 8015bf2:	f000 f81d 	bl	8015c30 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_E5coeffEii>
 8015bf6:	eef0 7a40 	vmov.f32	s15, s0
  }
 8015bfa:	eeb0 0a67 	vmov.f32	s0, s15
 8015bfe:	3710      	adds	r7, #16
 8015c00:	46bd      	mov	sp, r7
 8015c02:	bd80      	pop	{r7, pc}

08015c04 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEENS0_10IndexBasedEfEC1ERKS9_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 8015c04:	b590      	push	{r4, r7, lr}
 8015c06:	b083      	sub	sp, #12
 8015c08:	af00      	add	r7, sp, #0
 8015c0a:	6078      	str	r0, [r7, #4]
 8015c0c:	6039      	str	r1, [r7, #0]
 8015c0e:	6878      	ldr	r0, [r7, #4]
 8015c10:	f000 f83a 	bl	8015c88 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1Ev>
 8015c14:	687c      	ldr	r4, [r7, #4]
 8015c16:	6838      	ldr	r0, [r7, #0]
 8015c18:	f000 f82b 	bl	8015c72 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE16nestedExpressionEv>
 8015c1c:	4603      	mov	r3, r0
 8015c1e:	4619      	mov	r1, r3
 8015c20:	4620      	mov	r0, r4
 8015c22:	f000 f83c 	bl	8015c9e <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1ERS7_>
 8015c26:	687b      	ldr	r3, [r7, #4]
 8015c28:	4618      	mov	r0, r3
 8015c2a:	370c      	adds	r7, #12
 8015c2c:	46bd      	mov	sp, r7
 8015c2e:	bd90      	pop	{r4, r7, pc}

08015c30 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_E5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8015c30:	b5b0      	push	{r4, r5, r7, lr}
 8015c32:	b084      	sub	sp, #16
 8015c34:	af00      	add	r7, sp, #0
 8015c36:	60f8      	str	r0, [r7, #12]
 8015c38:	60b9      	str	r1, [r7, #8]
 8015c3a:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 8015c3c:	68fb      	ldr	r3, [r7, #12]
 8015c3e:	681c      	ldr	r4, [r3, #0]
 8015c40:	68f8      	ldr	r0, [r7, #12]
 8015c42:	f000 f83b 	bl	8015cbc <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_E9colStrideEv>
 8015c46:	4602      	mov	r2, r0
 8015c48:	687b      	ldr	r3, [r7, #4]
 8015c4a:	fb03 f502 	mul.w	r5, r3, r2
 8015c4e:	68f8      	ldr	r0, [r7, #12]
 8015c50:	f000 f83f 	bl	8015cd2 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_E9rowStrideEv>
 8015c54:	4602      	mov	r2, r0
 8015c56:	68bb      	ldr	r3, [r7, #8]
 8015c58:	fb02 f303 	mul.w	r3, r2, r3
 8015c5c:	442b      	add	r3, r5
 8015c5e:	009b      	lsls	r3, r3, #2
 8015c60:	4423      	add	r3, r4
 8015c62:	681b      	ldr	r3, [r3, #0]
 8015c64:	ee07 3a90 	vmov	s15, r3
  }
 8015c68:	eeb0 0a67 	vmov.f32	s0, s15
 8015c6c:	3710      	adds	r7, #16
 8015c6e:	46bd      	mov	sp, r7
 8015c70:	bdb0      	pop	{r4, r5, r7, pc}

08015c72 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 8015c72:	b480      	push	{r7}
 8015c74:	b083      	sub	sp, #12
 8015c76:	af00      	add	r7, sp, #0
 8015c78:	6078      	str	r0, [r7, #4]
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	4618      	mov	r0, r3
 8015c7e:	370c      	adds	r7, #12
 8015c80:	46bd      	mov	sp, r7
 8015c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c86:	4770      	bx	lr

08015c88 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8015c88:	b480      	push	{r7}
 8015c8a:	b083      	sub	sp, #12
 8015c8c:	af00      	add	r7, sp, #0
 8015c8e:	6078      	str	r0, [r7, #4]
 8015c90:	687b      	ldr	r3, [r7, #4]
 8015c92:	4618      	mov	r0, r3
 8015c94:	370c      	adds	r7, #12
 8015c96:	46bd      	mov	sp, r7
 8015c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c9c:	4770      	bx	lr

08015c9e <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8015c9e:	b580      	push	{r7, lr}
 8015ca0:	b082      	sub	sp, #8
 8015ca2:	af00      	add	r7, sp, #0
 8015ca4:	6078      	str	r0, [r7, #4]
 8015ca6:	6039      	str	r1, [r7, #0]
 8015ca8:	687b      	ldr	r3, [r7, #4]
 8015caa:	6839      	ldr	r1, [r7, #0]
 8015cac:	4618      	mov	r0, r3
 8015cae:	f000 f81b 	bl	8015ce8 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1ERKS6_>
 8015cb2:	687b      	ldr	r3, [r7, #4]
 8015cb4:	4618      	mov	r0, r3
 8015cb6:	3708      	adds	r7, #8
 8015cb8:	46bd      	mov	sp, r7
 8015cba:	bd80      	pop	{r7, pc}

08015cbc <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_E9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 8015cbc:	b580      	push	{r7, lr}
 8015cbe:	b082      	sub	sp, #8
 8015cc0:	af00      	add	r7, sp, #0
 8015cc2:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 8015cc4:	f7f0 ff9f 	bl	8006c06 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 8015cc8:	4603      	mov	r3, r0
  }
 8015cca:	4618      	mov	r0, r3
 8015ccc:	3708      	adds	r7, #8
 8015cce:	46bd      	mov	sp, r7
 8015cd0:	bd80      	pop	{r7, pc}

08015cd2 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_E9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 8015cd2:	b580      	push	{r7, lr}
 8015cd4:	b082      	sub	sp, #8
 8015cd6:	af00      	add	r7, sp, #0
 8015cd8:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 8015cda:	f7f0 ff8c 	bl	8006bf6 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 8015cde:	4603      	mov	r3, r0
  }
 8015ce0:	4618      	mov	r0, r3
 8015ce2:	3708      	adds	r7, #8
 8015ce4:	46bd      	mov	sp, r7
 8015ce6:	bd80      	pop	{r7, pc}

08015ce8 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 8015ce8:	b580      	push	{r7, lr}
 8015cea:	b082      	sub	sp, #8
 8015cec:	af00      	add	r7, sp, #0
 8015cee:	6078      	str	r0, [r7, #4]
 8015cf0:	6039      	str	r1, [r7, #0]
 8015cf2:	687b      	ldr	r3, [r7, #4]
 8015cf4:	6839      	ldr	r1, [r7, #0]
 8015cf6:	4618      	mov	r0, r3
 8015cf8:	f000 f805 	bl	8015d06 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EEC1ERKNS_5BlockIS4_Li1ELi3ELb1EEE>
  }
 8015cfc:	687b      	ldr	r3, [r7, #4]
 8015cfe:	4618      	mov	r0, r3
 8015d00:	3708      	adds	r7, #8
 8015d02:	46bd      	mov	sp, r7
 8015d04:	bd80      	pop	{r7, pc}

08015d06 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EEC1ERKNS_5BlockIS4_Li1ELi3ELb1EEE>:
  explicit block_evaluator(const XprType& block)
 8015d06:	b580      	push	{r7, lr}
 8015d08:	b082      	sub	sp, #8
 8015d0a:	af00      	add	r7, sp, #0
 8015d0c:	6078      	str	r0, [r7, #4]
 8015d0e:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	6839      	ldr	r1, [r7, #0]
 8015d14:	4618      	mov	r0, r3
 8015d16:	f000 f80a 	bl	8015d2e <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_EC1ERKS6_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 8015d1a:	683b      	ldr	r3, [r7, #0]
 8015d1c:	4618      	mov	r0, r3
 8015d1e:	f000 f830 	bl	8015d82 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE4dataEv>
 8015d22:	bf00      	nop
  }
 8015d24:	687b      	ldr	r3, [r7, #4]
 8015d26:	4618      	mov	r0, r3
 8015d28:	3708      	adds	r7, #8
 8015d2a:	46bd      	mov	sp, r7
 8015d2c:	bd80      	pop	{r7, pc}

08015d2e <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_EC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 8015d2e:	b590      	push	{r4, r7, lr}
 8015d30:	b083      	sub	sp, #12
 8015d32:	af00      	add	r7, sp, #0
 8015d34:	6078      	str	r0, [r7, #4]
 8015d36:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 8015d38:	6878      	ldr	r0, [r7, #4]
 8015d3a:	f000 f84a 	bl	8015dd2 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 8015d3e:	683b      	ldr	r3, [r7, #0]
 8015d40:	4618      	mov	r0, r3
 8015d42:	f000 f81e 	bl	8015d82 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE4dataEv>
 8015d46:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 8015d48:	687b      	ldr	r3, [r7, #4]
 8015d4a:	601a      	str	r2, [r3, #0]
 8015d4c:	687b      	ldr	r3, [r7, #4]
 8015d4e:	1d1c      	adds	r4, r3, #4
 8015d50:	683b      	ldr	r3, [r7, #0]
 8015d52:	4618      	mov	r0, r3
 8015d54:	f000 f821 	bl	8015d9a <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EE11innerStrideEv>
 8015d58:	4603      	mov	r3, r0
 8015d5a:	4619      	mov	r1, r3
 8015d5c:	4620      	mov	r0, r4
 8015d5e:	f7f0 ff25 	bl	8006bac <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 8015d62:	687b      	ldr	r3, [r7, #4]
 8015d64:	1d5c      	adds	r4, r3, #5
 8015d66:	683b      	ldr	r3, [r7, #0]
 8015d68:	4618      	mov	r0, r3
 8015d6a:	f000 f824 	bl	8015db6 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EE11outerStrideEv>
 8015d6e:	4603      	mov	r3, r0
 8015d70:	4619      	mov	r1, r3
 8015d72:	4620      	mov	r0, r4
 8015d74:	f7f0 ff00 	bl	8006b78 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	4618      	mov	r0, r3
 8015d7c:	370c      	adds	r7, #12
 8015d7e:	46bd      	mov	sp, r7
 8015d80:	bd90      	pop	{r4, r7, pc}

08015d82 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC inline const Scalar* data() const { return m_data; }
 8015d82:	b480      	push	{r7}
 8015d84:	b083      	sub	sp, #12
 8015d86:	af00      	add	r7, sp, #0
 8015d88:	6078      	str	r0, [r7, #4]
 8015d8a:	687b      	ldr	r3, [r7, #4]
 8015d8c:	681b      	ldr	r3, [r3, #0]
 8015d8e:	4618      	mov	r0, r3
 8015d90:	370c      	adds	r7, #12
 8015d92:	46bd      	mov	sp, r7
 8015d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d98:	4770      	bx	lr

08015d9a <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 8015d9a:	b580      	push	{r7, lr}
 8015d9c:	b082      	sub	sp, #8
 8015d9e:	af00      	add	r7, sp, #0
 8015da0:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 8015da2:	687b      	ldr	r3, [r7, #4]
 8015da4:	689b      	ldr	r3, [r3, #8]
 8015da6:	4618      	mov	r0, r3
 8015da8:	f7fd fcf8 	bl	801379c <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11innerStrideEv>
 8015dac:	4603      	mov	r3, r0
    }
 8015dae:	4618      	mov	r0, r3
 8015db0:	3708      	adds	r7, #8
 8015db2:	46bd      	mov	sp, r7
 8015db4:	bd80      	pop	{r7, pc}

08015db6 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 8015db6:	b580      	push	{r7, lr}
 8015db8:	b082      	sub	sp, #8
 8015dba:	af00      	add	r7, sp, #0
 8015dbc:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8015dbe:	687b      	ldr	r3, [r7, #4]
 8015dc0:	689b      	ldr	r3, [r3, #8]
 8015dc2:	4618      	mov	r0, r3
 8015dc4:	f7fc ffa6 	bl	8012d14 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11outerStrideEv>
 8015dc8:	4603      	mov	r3, r0
    }
 8015dca:	4618      	mov	r0, r3
 8015dcc:	3708      	adds	r7, #8
 8015dce:	46bd      	mov	sp, r7
 8015dd0:	bd80      	pop	{r7, pc}

08015dd2 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8015dd2:	b480      	push	{r7}
 8015dd4:	b083      	sub	sp, #12
 8015dd6:	af00      	add	r7, sp, #0
 8015dd8:	6078      	str	r0, [r7, #4]
 8015dda:	687b      	ldr	r3, [r7, #4]
 8015ddc:	4618      	mov	r0, r3
 8015dde:	370c      	adds	r7, #12
 8015de0:	46bd      	mov	sp, r7
 8015de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015de6:	4770      	bx	lr

08015de8 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8015de8:	b590      	push	{r4, r7, lr}
 8015dea:	b083      	sub	sp, #12
 8015dec:	af00      	add	r7, sp, #0
 8015dee:	6078      	str	r0, [r7, #4]
 8015df0:	6039      	str	r1, [r7, #0]
 8015df2:	687b      	ldr	r3, [r7, #4]
 8015df4:	2b01      	cmp	r3, #1
 8015df6:	d141      	bne.n	8015e7c <_Z41__static_initialization_and_destruction_0ii+0x94>
 8015df8:	683b      	ldr	r3, [r7, #0]
 8015dfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015dfe:	4293      	cmp	r3, r2
 8015e00:	d13c      	bne.n	8015e7c <_Z41__static_initialization_and_destruction_0ii+0x94>
static const symbolic::SymbolExpr<internal::symbolic_last_tag> last; // PLEASE use Eigen::last   instead of Eigen::placeholders::last
 8015e02:	4820      	ldr	r0, [pc, #128]	; (8015e84 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8015e04:	f7ee fa1b 	bl	800423e <_ZN5Eigen8symbolic10SymbolExprINS_8internal17symbolic_last_tagEEC1Ev>

#ifndef EIGEN_PARSED_BY_DOXYGEN

#if EIGEN_HAS_CXX14_VARIABLE_TEMPLATES
template<int N>
static const internal::FixedInt<N> fix{};
 8015e08:	481f      	ldr	r0, [pc, #124]	; (8015e88 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8015e0a:	f7ee fa23 	bl	8004254 <_ZN5Eigen8internal8FixedIntILi1EEC1Ev>
static const symbolic::AddExpr<symbolic::SymbolExpr<internal::symbolic_last_tag>,symbolic::ValueExpr<Eigen::internal::FixedInt<1> > > lastp1(last+fix<1>());
 8015e0e:	481e      	ldr	r0, [pc, #120]	; (8015e88 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8015e10:	f7ee fa2b 	bl	800426a <_ZNK5Eigen8internal8FixedIntILi1EEclEv>
 8015e14:	4621      	mov	r1, r4
 8015e16:	481b      	ldr	r0, [pc, #108]	; (8015e84 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8015e18:	f7ee fa32 	bl	8004280 <_ZNK5Eigen8symbolic8BaseExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEEEplILi1EEENS0_7AddExprIS5_NS0_9ValueExprINS3_8FixedIntIXT_EEEEEEESB_>

/** \var all
  * \ingroup Core_Module
  * Can be used as a parameter to DenseBase::operator()(const RowIndices&, const ColIndices&) to index all rows or columns
  */
static const Eigen::internal::all_t all; // PLEASE use Eigen::all instead of Eigen::placeholders::all
 8015e1c:	481b      	ldr	r0, [pc, #108]	; (8015e8c <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8015e1e:	f7eb f899 	bl	8000f54 <_ZN5Eigen8internal5all_tC1Ev>
Matrix <float,3,3> A ;
 8015e22:	481b      	ldr	r0, [pc, #108]	; (8015e90 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8015e24:	f7ee fa51 	bl	80042ca <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1Ev>
Matrix <float,3,3> P ;
 8015e28:	481a      	ldr	r0, [pc, #104]	; (8015e94 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8015e2a:	f7ee fa4e 	bl	80042ca <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1Ev>
Matrix <float,3,3> O ;
 8015e2e:	481a      	ldr	r0, [pc, #104]	; (8015e98 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8015e30:	f7ee fa4b 	bl	80042ca <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1Ev>
Matrix <float,3,3> I ;
 8015e34:	4819      	ldr	r0, [pc, #100]	; (8015e9c <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8015e36:	f7ee fa48 	bl	80042ca <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1Ev>
Matrix <float,1,1> S ;
 8015e3a:	4819      	ldr	r0, [pc, #100]	; (8015ea0 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8015e3c:	f7ee fa54 	bl	80042e8 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1Ev>
Matrix <float,1,1> R ;
 8015e40:	4818      	ldr	r0, [pc, #96]	; (8015ea4 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8015e42:	f7ee fa51 	bl	80042e8 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1Ev>
Matrix <float,1,1> D ;
 8015e46:	4818      	ldr	r0, [pc, #96]	; (8015ea8 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8015e48:	f7ee fa4e 	bl	80042e8 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1Ev>
Matrix <float,1,1> Z ;
 8015e4c:	4817      	ldr	r0, [pc, #92]	; (8015eac <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8015e4e:	f7ee fa4b 	bl	80042e8 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1Ev>
Matrix <float,3,1> K ;
 8015e52:	4817      	ldr	r0, [pc, #92]	; (8015eb0 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8015e54:	f7ee fa57 	bl	8004306 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1Ev>
Matrix <float,1,3> C ;
 8015e58:	4816      	ldr	r0, [pc, #88]	; (8015eb4 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8015e5a:	f7ee fa63 	bl	8004324 <_ZN5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EEC1Ev>
Matrix <float,3,1> G ;
 8015e5e:	4816      	ldr	r0, [pc, #88]	; (8015eb8 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8015e60:	f7ee fa51 	bl	8004306 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1Ev>
Matrix <float,3,3> Q ;
 8015e64:	4815      	ldr	r0, [pc, #84]	; (8015ebc <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8015e66:	f7ee fa30 	bl	80042ca <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1Ev>
Vector3f X;
 8015e6a:	4815      	ldr	r0, [pc, #84]	; (8015ec0 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8015e6c:	f7ee fa4b 	bl	8004306 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1Ev>
Vector3f X1;
 8015e70:	4814      	ldr	r0, [pc, #80]	; (8015ec4 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8015e72:	f7ee fa48 	bl	8004306 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1Ev>
Vector3f B;
 8015e76:	4814      	ldr	r0, [pc, #80]	; (8015ec8 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8015e78:	f7ee fa45 	bl	8004306 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1Ev>
}
 8015e7c:	bf00      	nop
 8015e7e:	370c      	adds	r7, #12
 8015e80:	46bd      	mov	sp, r7
 8015e82:	bd90      	pop	{r4, r7, pc}
 8015e84:	2000026c 	.word	0x2000026c
 8015e88:	200007e4 	.word	0x200007e4
 8015e8c:	20000270 	.word	0x20000270
 8015e90:	200005b8 	.word	0x200005b8
 8015e94:	200005dc 	.word	0x200005dc
 8015e98:	20000600 	.word	0x20000600
 8015e9c:	20000624 	.word	0x20000624
 8015ea0:	20000648 	.word	0x20000648
 8015ea4:	2000064c 	.word	0x2000064c
 8015ea8:	20000650 	.word	0x20000650
 8015eac:	20000654 	.word	0x20000654
 8015eb0:	20000658 	.word	0x20000658
 8015eb4:	20000664 	.word	0x20000664
 8015eb8:	20000670 	.word	0x20000670
 8015ebc:	2000067c 	.word	0x2000067c
 8015ec0:	200006a0 	.word	0x200006a0
 8015ec4:	200006ac 	.word	0x200006ac
 8015ec8:	200006b8 	.word	0x200006b8

08015ecc <_GLOBAL__sub_I_hi2c1>:
 8015ecc:	b580      	push	{r7, lr}
 8015ece:	af00      	add	r7, sp, #0
 8015ed0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8015ed4:	2001      	movs	r0, #1
 8015ed6:	f7ff ff87 	bl	8015de8 <_Z41__static_initialization_and_destruction_0ii>
 8015eda:	bd80      	pop	{r7, pc}

08015edc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8015edc:	b580      	push	{r7, lr}
 8015ede:	b082      	sub	sp, #8
 8015ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8015ee2:	2300      	movs	r3, #0
 8015ee4:	607b      	str	r3, [r7, #4]
 8015ee6:	4b10      	ldr	r3, [pc, #64]	; (8015f28 <HAL_MspInit+0x4c>)
 8015ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015eea:	4a0f      	ldr	r2, [pc, #60]	; (8015f28 <HAL_MspInit+0x4c>)
 8015eec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8015ef0:	6453      	str	r3, [r2, #68]	; 0x44
 8015ef2:	4b0d      	ldr	r3, [pc, #52]	; (8015f28 <HAL_MspInit+0x4c>)
 8015ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015ef6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015efa:	607b      	str	r3, [r7, #4]
 8015efc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8015efe:	2300      	movs	r3, #0
 8015f00:	603b      	str	r3, [r7, #0]
 8015f02:	4b09      	ldr	r3, [pc, #36]	; (8015f28 <HAL_MspInit+0x4c>)
 8015f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f06:	4a08      	ldr	r2, [pc, #32]	; (8015f28 <HAL_MspInit+0x4c>)
 8015f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8015f0e:	4b06      	ldr	r3, [pc, #24]	; (8015f28 <HAL_MspInit+0x4c>)
 8015f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015f16:	603b      	str	r3, [r7, #0]
 8015f18:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8015f1a:	2007      	movs	r0, #7
 8015f1c:	f000 fd14 	bl	8016948 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8015f20:	bf00      	nop
 8015f22:	3708      	adds	r7, #8
 8015f24:	46bd      	mov	sp, r7
 8015f26:	bd80      	pop	{r7, pc}
 8015f28:	40023800 	.word	0x40023800

08015f2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8015f2c:	b580      	push	{r7, lr}
 8015f2e:	b08c      	sub	sp, #48	; 0x30
 8015f30:	af00      	add	r7, sp, #0
 8015f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015f34:	f107 031c 	add.w	r3, r7, #28
 8015f38:	2200      	movs	r2, #0
 8015f3a:	601a      	str	r2, [r3, #0]
 8015f3c:	605a      	str	r2, [r3, #4]
 8015f3e:	609a      	str	r2, [r3, #8]
 8015f40:	60da      	str	r2, [r3, #12]
 8015f42:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8015f44:	687b      	ldr	r3, [r7, #4]
 8015f46:	681b      	ldr	r3, [r3, #0]
 8015f48:	4a52      	ldr	r2, [pc, #328]	; (8016094 <HAL_I2C_MspInit+0x168>)
 8015f4a:	4293      	cmp	r3, r2
 8015f4c:	d13d      	bne.n	8015fca <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8015f4e:	2300      	movs	r3, #0
 8015f50:	61bb      	str	r3, [r7, #24]
 8015f52:	4b51      	ldr	r3, [pc, #324]	; (8016098 <HAL_I2C_MspInit+0x16c>)
 8015f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f56:	4a50      	ldr	r2, [pc, #320]	; (8016098 <HAL_I2C_MspInit+0x16c>)
 8015f58:	f043 0302 	orr.w	r3, r3, #2
 8015f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8015f5e:	4b4e      	ldr	r3, [pc, #312]	; (8016098 <HAL_I2C_MspInit+0x16c>)
 8015f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f62:	f003 0302 	and.w	r3, r3, #2
 8015f66:	61bb      	str	r3, [r7, #24]
 8015f68:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8015f6a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8015f6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8015f70:	2312      	movs	r3, #18
 8015f72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015f74:	2300      	movs	r3, #0
 8015f76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015f78:	2303      	movs	r3, #3
 8015f7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8015f7c:	2304      	movs	r3, #4
 8015f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8015f80:	f107 031c 	add.w	r3, r7, #28
 8015f84:	4619      	mov	r1, r3
 8015f86:	4845      	ldr	r0, [pc, #276]	; (801609c <HAL_I2C_MspInit+0x170>)
 8015f88:	f001 f930 	bl	80171ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8015f8c:	2300      	movs	r3, #0
 8015f8e:	617b      	str	r3, [r7, #20]
 8015f90:	4b41      	ldr	r3, [pc, #260]	; (8016098 <HAL_I2C_MspInit+0x16c>)
 8015f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f94:	4a40      	ldr	r2, [pc, #256]	; (8016098 <HAL_I2C_MspInit+0x16c>)
 8015f96:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8015f9a:	6413      	str	r3, [r2, #64]	; 0x40
 8015f9c:	4b3e      	ldr	r3, [pc, #248]	; (8016098 <HAL_I2C_MspInit+0x16c>)
 8015f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015fa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8015fa4:	617b      	str	r3, [r7, #20]
 8015fa6:	697b      	ldr	r3, [r7, #20]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8015fa8:	2200      	movs	r2, #0
 8015faa:	2100      	movs	r1, #0
 8015fac:	201f      	movs	r0, #31
 8015fae:	f000 fcd6 	bl	801695e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8015fb2:	201f      	movs	r0, #31
 8015fb4:	f000 fcef 	bl	8016996 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8015fb8:	2200      	movs	r2, #0
 8015fba:	2100      	movs	r1, #0
 8015fbc:	2020      	movs	r0, #32
 8015fbe:	f000 fcce 	bl	801695e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8015fc2:	2020      	movs	r0, #32
 8015fc4:	f000 fce7 	bl	8016996 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8015fc8:	e060      	b.n	801608c <HAL_I2C_MspInit+0x160>
  else if(hi2c->Instance==I2C3)
 8015fca:	687b      	ldr	r3, [r7, #4]
 8015fcc:	681b      	ldr	r3, [r3, #0]
 8015fce:	4a34      	ldr	r2, [pc, #208]	; (80160a0 <HAL_I2C_MspInit+0x174>)
 8015fd0:	4293      	cmp	r3, r2
 8015fd2:	d15b      	bne.n	801608c <HAL_I2C_MspInit+0x160>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8015fd4:	2300      	movs	r3, #0
 8015fd6:	613b      	str	r3, [r7, #16]
 8015fd8:	4b2f      	ldr	r3, [pc, #188]	; (8016098 <HAL_I2C_MspInit+0x16c>)
 8015fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015fdc:	4a2e      	ldr	r2, [pc, #184]	; (8016098 <HAL_I2C_MspInit+0x16c>)
 8015fde:	f043 0304 	orr.w	r3, r3, #4
 8015fe2:	6313      	str	r3, [r2, #48]	; 0x30
 8015fe4:	4b2c      	ldr	r3, [pc, #176]	; (8016098 <HAL_I2C_MspInit+0x16c>)
 8015fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015fe8:	f003 0304 	and.w	r3, r3, #4
 8015fec:	613b      	str	r3, [r7, #16]
 8015fee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015ff0:	2300      	movs	r3, #0
 8015ff2:	60fb      	str	r3, [r7, #12]
 8015ff4:	4b28      	ldr	r3, [pc, #160]	; (8016098 <HAL_I2C_MspInit+0x16c>)
 8015ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015ff8:	4a27      	ldr	r2, [pc, #156]	; (8016098 <HAL_I2C_MspInit+0x16c>)
 8015ffa:	f043 0301 	orr.w	r3, r3, #1
 8015ffe:	6313      	str	r3, [r2, #48]	; 0x30
 8016000:	4b25      	ldr	r3, [pc, #148]	; (8016098 <HAL_I2C_MspInit+0x16c>)
 8016002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016004:	f003 0301 	and.w	r3, r3, #1
 8016008:	60fb      	str	r3, [r7, #12]
 801600a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 801600c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016010:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8016012:	2312      	movs	r3, #18
 8016014:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016016:	2300      	movs	r3, #0
 8016018:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801601a:	2303      	movs	r3, #3
 801601c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 801601e:	2304      	movs	r3, #4
 8016020:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8016022:	f107 031c 	add.w	r3, r7, #28
 8016026:	4619      	mov	r1, r3
 8016028:	481e      	ldr	r0, [pc, #120]	; (80160a4 <HAL_I2C_MspInit+0x178>)
 801602a:	f001 f8df 	bl	80171ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 801602e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8016032:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8016034:	2312      	movs	r3, #18
 8016036:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016038:	2300      	movs	r3, #0
 801603a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801603c:	2303      	movs	r3, #3
 801603e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8016040:	2304      	movs	r3, #4
 8016042:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8016044:	f107 031c 	add.w	r3, r7, #28
 8016048:	4619      	mov	r1, r3
 801604a:	4817      	ldr	r0, [pc, #92]	; (80160a8 <HAL_I2C_MspInit+0x17c>)
 801604c:	f001 f8ce 	bl	80171ec <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8016050:	2300      	movs	r3, #0
 8016052:	60bb      	str	r3, [r7, #8]
 8016054:	4b10      	ldr	r3, [pc, #64]	; (8016098 <HAL_I2C_MspInit+0x16c>)
 8016056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016058:	4a0f      	ldr	r2, [pc, #60]	; (8016098 <HAL_I2C_MspInit+0x16c>)
 801605a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801605e:	6413      	str	r3, [r2, #64]	; 0x40
 8016060:	4b0d      	ldr	r3, [pc, #52]	; (8016098 <HAL_I2C_MspInit+0x16c>)
 8016062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016064:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8016068:	60bb      	str	r3, [r7, #8]
 801606a:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 801606c:	2200      	movs	r2, #0
 801606e:	2100      	movs	r1, #0
 8016070:	2048      	movs	r0, #72	; 0x48
 8016072:	f000 fc74 	bl	801695e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8016076:	2048      	movs	r0, #72	; 0x48
 8016078:	f000 fc8d 	bl	8016996 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 801607c:	2200      	movs	r2, #0
 801607e:	2100      	movs	r1, #0
 8016080:	2049      	movs	r0, #73	; 0x49
 8016082:	f000 fc6c 	bl	801695e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8016086:	2049      	movs	r0, #73	; 0x49
 8016088:	f000 fc85 	bl	8016996 <HAL_NVIC_EnableIRQ>
}
 801608c:	bf00      	nop
 801608e:	3730      	adds	r7, #48	; 0x30
 8016090:	46bd      	mov	sp, r7
 8016092:	bd80      	pop	{r7, pc}
 8016094:	40005400 	.word	0x40005400
 8016098:	40023800 	.word	0x40023800
 801609c:	40020400 	.word	0x40020400
 80160a0:	40005c00 	.word	0x40005c00
 80160a4:	40020800 	.word	0x40020800
 80160a8:	40020000 	.word	0x40020000

080160ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80160ac:	b580      	push	{r7, lr}
 80160ae:	b086      	sub	sp, #24
 80160b0:	af00      	add	r7, sp, #0
 80160b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80160b4:	687b      	ldr	r3, [r7, #4]
 80160b6:	681b      	ldr	r3, [r3, #0]
 80160b8:	4a26      	ldr	r2, [pc, #152]	; (8016154 <HAL_TIM_Base_MspInit+0xa8>)
 80160ba:	4293      	cmp	r3, r2
 80160bc:	d10e      	bne.n	80160dc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80160be:	2300      	movs	r3, #0
 80160c0:	617b      	str	r3, [r7, #20]
 80160c2:	4b25      	ldr	r3, [pc, #148]	; (8016158 <HAL_TIM_Base_MspInit+0xac>)
 80160c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80160c6:	4a24      	ldr	r2, [pc, #144]	; (8016158 <HAL_TIM_Base_MspInit+0xac>)
 80160c8:	f043 0304 	orr.w	r3, r3, #4
 80160cc:	6413      	str	r3, [r2, #64]	; 0x40
 80160ce:	4b22      	ldr	r3, [pc, #136]	; (8016158 <HAL_TIM_Base_MspInit+0xac>)
 80160d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80160d2:	f003 0304 	and.w	r3, r3, #4
 80160d6:	617b      	str	r3, [r7, #20]
 80160d8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80160da:	e036      	b.n	801614a <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM10)
 80160dc:	687b      	ldr	r3, [r7, #4]
 80160de:	681b      	ldr	r3, [r3, #0]
 80160e0:	4a1e      	ldr	r2, [pc, #120]	; (801615c <HAL_TIM_Base_MspInit+0xb0>)
 80160e2:	4293      	cmp	r3, r2
 80160e4:	d116      	bne.n	8016114 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80160e6:	2300      	movs	r3, #0
 80160e8:	613b      	str	r3, [r7, #16]
 80160ea:	4b1b      	ldr	r3, [pc, #108]	; (8016158 <HAL_TIM_Base_MspInit+0xac>)
 80160ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80160ee:	4a1a      	ldr	r2, [pc, #104]	; (8016158 <HAL_TIM_Base_MspInit+0xac>)
 80160f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80160f4:	6453      	str	r3, [r2, #68]	; 0x44
 80160f6:	4b18      	ldr	r3, [pc, #96]	; (8016158 <HAL_TIM_Base_MspInit+0xac>)
 80160f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80160fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80160fe:	613b      	str	r3, [r7, #16]
 8016100:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8016102:	2200      	movs	r2, #0
 8016104:	2100      	movs	r1, #0
 8016106:	2019      	movs	r0, #25
 8016108:	f000 fc29 	bl	801695e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 801610c:	2019      	movs	r0, #25
 801610e:	f000 fc42 	bl	8016996 <HAL_NVIC_EnableIRQ>
}
 8016112:	e01a      	b.n	801614a <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM11)
 8016114:	687b      	ldr	r3, [r7, #4]
 8016116:	681b      	ldr	r3, [r3, #0]
 8016118:	4a11      	ldr	r2, [pc, #68]	; (8016160 <HAL_TIM_Base_MspInit+0xb4>)
 801611a:	4293      	cmp	r3, r2
 801611c:	d115      	bne.n	801614a <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 801611e:	2300      	movs	r3, #0
 8016120:	60fb      	str	r3, [r7, #12]
 8016122:	4b0d      	ldr	r3, [pc, #52]	; (8016158 <HAL_TIM_Base_MspInit+0xac>)
 8016124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016126:	4a0c      	ldr	r2, [pc, #48]	; (8016158 <HAL_TIM_Base_MspInit+0xac>)
 8016128:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801612c:	6453      	str	r3, [r2, #68]	; 0x44
 801612e:	4b0a      	ldr	r3, [pc, #40]	; (8016158 <HAL_TIM_Base_MspInit+0xac>)
 8016130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016132:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8016136:	60fb      	str	r3, [r7, #12]
 8016138:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 801613a:	2200      	movs	r2, #0
 801613c:	2100      	movs	r1, #0
 801613e:	201a      	movs	r0, #26
 8016140:	f000 fc0d 	bl	801695e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8016144:	201a      	movs	r0, #26
 8016146:	f000 fc26 	bl	8016996 <HAL_NVIC_EnableIRQ>
}
 801614a:	bf00      	nop
 801614c:	3718      	adds	r7, #24
 801614e:	46bd      	mov	sp, r7
 8016150:	bd80      	pop	{r7, pc}
 8016152:	bf00      	nop
 8016154:	40000800 	.word	0x40000800
 8016158:	40023800 	.word	0x40023800
 801615c:	40014400 	.word	0x40014400
 8016160:	40014800 	.word	0x40014800

08016164 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8016164:	b580      	push	{r7, lr}
 8016166:	b088      	sub	sp, #32
 8016168:	af00      	add	r7, sp, #0
 801616a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801616c:	f107 030c 	add.w	r3, r7, #12
 8016170:	2200      	movs	r2, #0
 8016172:	601a      	str	r2, [r3, #0]
 8016174:	605a      	str	r2, [r3, #4]
 8016176:	609a      	str	r2, [r3, #8]
 8016178:	60da      	str	r2, [r3, #12]
 801617a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 801617c:	687b      	ldr	r3, [r7, #4]
 801617e:	681b      	ldr	r3, [r3, #0]
 8016180:	4a12      	ldr	r2, [pc, #72]	; (80161cc <HAL_TIM_MspPostInit+0x68>)
 8016182:	4293      	cmp	r3, r2
 8016184:	d11d      	bne.n	80161c2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8016186:	2300      	movs	r3, #0
 8016188:	60bb      	str	r3, [r7, #8]
 801618a:	4b11      	ldr	r3, [pc, #68]	; (80161d0 <HAL_TIM_MspPostInit+0x6c>)
 801618c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801618e:	4a10      	ldr	r2, [pc, #64]	; (80161d0 <HAL_TIM_MspPostInit+0x6c>)
 8016190:	f043 0302 	orr.w	r3, r3, #2
 8016194:	6313      	str	r3, [r2, #48]	; 0x30
 8016196:	4b0e      	ldr	r3, [pc, #56]	; (80161d0 <HAL_TIM_MspPostInit+0x6c>)
 8016198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801619a:	f003 0302 	and.w	r3, r3, #2
 801619e:	60bb      	str	r3, [r7, #8]
 80161a0:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = TIM4_CH1_PWMMOT_Pin;
 80161a2:	2340      	movs	r3, #64	; 0x40
 80161a4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80161a6:	2302      	movs	r3, #2
 80161a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80161aa:	2300      	movs	r3, #0
 80161ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80161ae:	2300      	movs	r3, #0
 80161b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80161b2:	2302      	movs	r3, #2
 80161b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIM4_CH1_PWMMOT_GPIO_Port, &GPIO_InitStruct);
 80161b6:	f107 030c 	add.w	r3, r7, #12
 80161ba:	4619      	mov	r1, r3
 80161bc:	4805      	ldr	r0, [pc, #20]	; (80161d4 <HAL_TIM_MspPostInit+0x70>)
 80161be:	f001 f815 	bl	80171ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80161c2:	bf00      	nop
 80161c4:	3720      	adds	r7, #32
 80161c6:	46bd      	mov	sp, r7
 80161c8:	bd80      	pop	{r7, pc}
 80161ca:	bf00      	nop
 80161cc:	40000800 	.word	0x40000800
 80161d0:	40023800 	.word	0x40023800
 80161d4:	40020400 	.word	0x40020400

080161d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80161d8:	b580      	push	{r7, lr}
 80161da:	b08a      	sub	sp, #40	; 0x28
 80161dc:	af00      	add	r7, sp, #0
 80161de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80161e0:	f107 0314 	add.w	r3, r7, #20
 80161e4:	2200      	movs	r2, #0
 80161e6:	601a      	str	r2, [r3, #0]
 80161e8:	605a      	str	r2, [r3, #4]
 80161ea:	609a      	str	r2, [r3, #8]
 80161ec:	60da      	str	r2, [r3, #12]
 80161ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80161f0:	687b      	ldr	r3, [r7, #4]
 80161f2:	681b      	ldr	r3, [r3, #0]
 80161f4:	4a4b      	ldr	r2, [pc, #300]	; (8016324 <HAL_UART_MspInit+0x14c>)
 80161f6:	4293      	cmp	r3, r2
 80161f8:	f040 8090 	bne.w	801631c <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80161fc:	2300      	movs	r3, #0
 80161fe:	613b      	str	r3, [r7, #16]
 8016200:	4b49      	ldr	r3, [pc, #292]	; (8016328 <HAL_UART_MspInit+0x150>)
 8016202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016204:	4a48      	ldr	r2, [pc, #288]	; (8016328 <HAL_UART_MspInit+0x150>)
 8016206:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801620a:	6413      	str	r3, [r2, #64]	; 0x40
 801620c:	4b46      	ldr	r3, [pc, #280]	; (8016328 <HAL_UART_MspInit+0x150>)
 801620e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8016214:	613b      	str	r3, [r7, #16]
 8016216:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8016218:	2300      	movs	r3, #0
 801621a:	60fb      	str	r3, [r7, #12]
 801621c:	4b42      	ldr	r3, [pc, #264]	; (8016328 <HAL_UART_MspInit+0x150>)
 801621e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016220:	4a41      	ldr	r2, [pc, #260]	; (8016328 <HAL_UART_MspInit+0x150>)
 8016222:	f043 0301 	orr.w	r3, r3, #1
 8016226:	6313      	str	r3, [r2, #48]	; 0x30
 8016228:	4b3f      	ldr	r3, [pc, #252]	; (8016328 <HAL_UART_MspInit+0x150>)
 801622a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801622c:	f003 0301 	and.w	r3, r3, #1
 8016230:	60fb      	str	r3, [r7, #12]
 8016232:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8016234:	230c      	movs	r3, #12
 8016236:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016238:	2302      	movs	r3, #2
 801623a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801623c:	2300      	movs	r3, #0
 801623e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016240:	2303      	movs	r3, #3
 8016242:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8016244:	2307      	movs	r3, #7
 8016246:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8016248:	f107 0314 	add.w	r3, r7, #20
 801624c:	4619      	mov	r1, r3
 801624e:	4837      	ldr	r0, [pc, #220]	; (801632c <HAL_UART_MspInit+0x154>)
 8016250:	f000 ffcc 	bl	80171ec <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream7;
 8016254:	4b36      	ldr	r3, [pc, #216]	; (8016330 <HAL_UART_MspInit+0x158>)
 8016256:	4a37      	ldr	r2, [pc, #220]	; (8016334 <HAL_UART_MspInit+0x15c>)
 8016258:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_6;
 801625a:	4b35      	ldr	r3, [pc, #212]	; (8016330 <HAL_UART_MspInit+0x158>)
 801625c:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8016260:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8016262:	4b33      	ldr	r3, [pc, #204]	; (8016330 <HAL_UART_MspInit+0x158>)
 8016264:	2200      	movs	r2, #0
 8016266:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8016268:	4b31      	ldr	r3, [pc, #196]	; (8016330 <HAL_UART_MspInit+0x158>)
 801626a:	2200      	movs	r2, #0
 801626c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 801626e:	4b30      	ldr	r3, [pc, #192]	; (8016330 <HAL_UART_MspInit+0x158>)
 8016270:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8016274:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8016276:	4b2e      	ldr	r3, [pc, #184]	; (8016330 <HAL_UART_MspInit+0x158>)
 8016278:	2200      	movs	r2, #0
 801627a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 801627c:	4b2c      	ldr	r3, [pc, #176]	; (8016330 <HAL_UART_MspInit+0x158>)
 801627e:	2200      	movs	r2, #0
 8016280:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8016282:	4b2b      	ldr	r3, [pc, #172]	; (8016330 <HAL_UART_MspInit+0x158>)
 8016284:	2200      	movs	r2, #0
 8016286:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8016288:	4b29      	ldr	r3, [pc, #164]	; (8016330 <HAL_UART_MspInit+0x158>)
 801628a:	2200      	movs	r2, #0
 801628c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 801628e:	4b28      	ldr	r3, [pc, #160]	; (8016330 <HAL_UART_MspInit+0x158>)
 8016290:	2200      	movs	r2, #0
 8016292:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8016294:	4826      	ldr	r0, [pc, #152]	; (8016330 <HAL_UART_MspInit+0x158>)
 8016296:	f000 fb99 	bl	80169cc <HAL_DMA_Init>
 801629a:	4603      	mov	r3, r0
 801629c:	2b00      	cmp	r3, #0
 801629e:	d001      	beq.n	80162a4 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80162a0:	f7ed ffc8 	bl	8004234 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80162a4:	687b      	ldr	r3, [r7, #4]
 80162a6:	4a22      	ldr	r2, [pc, #136]	; (8016330 <HAL_UART_MspInit+0x158>)
 80162a8:	639a      	str	r2, [r3, #56]	; 0x38
 80162aa:	4a21      	ldr	r2, [pc, #132]	; (8016330 <HAL_UART_MspInit+0x158>)
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80162b0:	4b21      	ldr	r3, [pc, #132]	; (8016338 <HAL_UART_MspInit+0x160>)
 80162b2:	4a22      	ldr	r2, [pc, #136]	; (801633c <HAL_UART_MspInit+0x164>)
 80162b4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80162b6:	4b20      	ldr	r3, [pc, #128]	; (8016338 <HAL_UART_MspInit+0x160>)
 80162b8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80162bc:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80162be:	4b1e      	ldr	r3, [pc, #120]	; (8016338 <HAL_UART_MspInit+0x160>)
 80162c0:	2240      	movs	r2, #64	; 0x40
 80162c2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80162c4:	4b1c      	ldr	r3, [pc, #112]	; (8016338 <HAL_UART_MspInit+0x160>)
 80162c6:	2200      	movs	r2, #0
 80162c8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80162ca:	4b1b      	ldr	r3, [pc, #108]	; (8016338 <HAL_UART_MspInit+0x160>)
 80162cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80162d0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80162d2:	4b19      	ldr	r3, [pc, #100]	; (8016338 <HAL_UART_MspInit+0x160>)
 80162d4:	2200      	movs	r2, #0
 80162d6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80162d8:	4b17      	ldr	r3, [pc, #92]	; (8016338 <HAL_UART_MspInit+0x160>)
 80162da:	2200      	movs	r2, #0
 80162dc:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80162de:	4b16      	ldr	r3, [pc, #88]	; (8016338 <HAL_UART_MspInit+0x160>)
 80162e0:	2200      	movs	r2, #0
 80162e2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80162e4:	4b14      	ldr	r3, [pc, #80]	; (8016338 <HAL_UART_MspInit+0x160>)
 80162e6:	2200      	movs	r2, #0
 80162e8:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80162ea:	4b13      	ldr	r3, [pc, #76]	; (8016338 <HAL_UART_MspInit+0x160>)
 80162ec:	2200      	movs	r2, #0
 80162ee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80162f0:	4811      	ldr	r0, [pc, #68]	; (8016338 <HAL_UART_MspInit+0x160>)
 80162f2:	f000 fb6b 	bl	80169cc <HAL_DMA_Init>
 80162f6:	4603      	mov	r3, r0
 80162f8:	2b00      	cmp	r3, #0
 80162fa:	d001      	beq.n	8016300 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 80162fc:	f7ed ff9a 	bl	8004234 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8016300:	687b      	ldr	r3, [r7, #4]
 8016302:	4a0d      	ldr	r2, [pc, #52]	; (8016338 <HAL_UART_MspInit+0x160>)
 8016304:	635a      	str	r2, [r3, #52]	; 0x34
 8016306:	4a0c      	ldr	r2, [pc, #48]	; (8016338 <HAL_UART_MspInit+0x160>)
 8016308:	687b      	ldr	r3, [r7, #4]
 801630a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 801630c:	2200      	movs	r2, #0
 801630e:	2100      	movs	r1, #0
 8016310:	2026      	movs	r0, #38	; 0x26
 8016312:	f000 fb24 	bl	801695e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8016316:	2026      	movs	r0, #38	; 0x26
 8016318:	f000 fb3d 	bl	8016996 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 801631c:	bf00      	nop
 801631e:	3728      	adds	r7, #40	; 0x28
 8016320:	46bd      	mov	sp, r7
 8016322:	bd80      	pop	{r7, pc}
 8016324:	40004400 	.word	0x40004400
 8016328:	40023800 	.word	0x40023800
 801632c:	40020000 	.word	0x40020000
 8016330:	20000438 	.word	0x20000438
 8016334:	400260b8 	.word	0x400260b8
 8016338:	20000498 	.word	0x20000498
 801633c:	400260a0 	.word	0x400260a0

08016340 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8016340:	b480      	push	{r7}
 8016342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8016344:	e7fe      	b.n	8016344 <NMI_Handler+0x4>

08016346 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8016346:	b480      	push	{r7}
 8016348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 801634a:	e7fe      	b.n	801634a <HardFault_Handler+0x4>

0801634c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 801634c:	b480      	push	{r7}
 801634e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8016350:	e7fe      	b.n	8016350 <MemManage_Handler+0x4>

08016352 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8016352:	b480      	push	{r7}
 8016354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8016356:	e7fe      	b.n	8016356 <BusFault_Handler+0x4>

08016358 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8016358:	b480      	push	{r7}
 801635a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 801635c:	e7fe      	b.n	801635c <UsageFault_Handler+0x4>

0801635e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 801635e:	b480      	push	{r7}
 8016360:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8016362:	bf00      	nop
 8016364:	46bd      	mov	sp, r7
 8016366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801636a:	4770      	bx	lr

0801636c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 801636c:	b480      	push	{r7}
 801636e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8016370:	bf00      	nop
 8016372:	46bd      	mov	sp, r7
 8016374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016378:	4770      	bx	lr

0801637a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 801637a:	b480      	push	{r7}
 801637c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 801637e:	bf00      	nop
 8016380:	46bd      	mov	sp, r7
 8016382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016386:	4770      	bx	lr

08016388 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8016388:	b580      	push	{r7, lr}
 801638a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 801638c:	f000 f9c8 	bl	8016720 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8016390:	bf00      	nop
 8016392:	bd80      	pop	{r7, pc}

08016394 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8016394:	b580      	push	{r7, lr}
 8016396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI2_SetZero_Pin);
 8016398:	2004      	movs	r0, #4
 801639a:	f001 f8dd 	bl	8017558 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 801639e:	bf00      	nop
 80163a0:	bd80      	pop	{r7, pc}
	...

080163a4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80163a4:	b580      	push	{r7, lr}
 80163a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80163a8:	4802      	ldr	r0, [pc, #8]	; (80163b4 <DMA1_Stream6_IRQHandler+0x10>)
 80163aa:	f000 fca7 	bl	8016cfc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80163ae:	bf00      	nop
 80163b0:	bd80      	pop	{r7, pc}
 80163b2:	bf00      	nop
 80163b4:	20000498 	.word	0x20000498

080163b8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80163b8:	b580      	push	{r7, lr}
 80163ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80163bc:	4802      	ldr	r0, [pc, #8]	; (80163c8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80163be:	f004 fdef 	bl	801afa0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80163c2:	bf00      	nop
 80163c4:	bd80      	pop	{r7, pc}
 80163c6:	bf00      	nop
 80163c8:	20000364 	.word	0x20000364

080163cc <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80163cc:	b580      	push	{r7, lr}
 80163ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80163d0:	4802      	ldr	r0, [pc, #8]	; (80163dc <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80163d2:	f004 fde5 	bl	801afa0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80163d6:	bf00      	nop
 80163d8:	bd80      	pop	{r7, pc}
 80163da:	bf00      	nop
 80163dc:	200003ac 	.word	0x200003ac

080163e0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80163e0:	b580      	push	{r7, lr}
 80163e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80163e4:	4802      	ldr	r0, [pc, #8]	; (80163f0 <I2C1_EV_IRQHandler+0x10>)
 80163e6:	f001 fef7 	bl	80181d8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80163ea:	bf00      	nop
 80163ec:	bd80      	pop	{r7, pc}
 80163ee:	bf00      	nop
 80163f0:	20000274 	.word	0x20000274

080163f4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80163f4:	b580      	push	{r7, lr}
 80163f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80163f8:	4802      	ldr	r0, [pc, #8]	; (8016404 <I2C1_ER_IRQHandler+0x10>)
 80163fa:	f002 f85e 	bl	80184ba <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80163fe:	bf00      	nop
 8016400:	bd80      	pop	{r7, pc}
 8016402:	bf00      	nop
 8016404:	20000274 	.word	0x20000274

08016408 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8016408:	b580      	push	{r7, lr}
 801640a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 801640c:	4802      	ldr	r0, [pc, #8]	; (8016418 <USART2_IRQHandler+0x10>)
 801640e:	f005 fd13 	bl	801be38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8016412:	bf00      	nop
 8016414:	bd80      	pop	{r7, pc}
 8016416:	bf00      	nop
 8016418:	200003f4 	.word	0x200003f4

0801641c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 801641c:	b580      	push	{r7, lr}
 801641e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI10_Stop_Pin);
 8016420:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8016424:	f001 f898 	bl	8017558 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EXTI11_EMER_Pin);
 8016428:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801642c:	f001 f894 	bl	8017558 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8016430:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8016434:	f001 f890 	bl	8017558 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8016438:	bf00      	nop
 801643a:	bd80      	pop	{r7, pc}

0801643c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 801643c:	b580      	push	{r7, lr}
 801643e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8016440:	4802      	ldr	r0, [pc, #8]	; (801644c <DMA1_Stream7_IRQHandler+0x10>)
 8016442:	f000 fc5b 	bl	8016cfc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8016446:	bf00      	nop
 8016448:	bd80      	pop	{r7, pc}
 801644a:	bf00      	nop
 801644c:	20000438 	.word	0x20000438

08016450 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8016450:	b580      	push	{r7, lr}
 8016452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8016454:	4802      	ldr	r0, [pc, #8]	; (8016460 <I2C3_EV_IRQHandler+0x10>)
 8016456:	f001 febf 	bl	80181d8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 801645a:	bf00      	nop
 801645c:	bd80      	pop	{r7, pc}
 801645e:	bf00      	nop
 8016460:	200002c8 	.word	0x200002c8

08016464 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8016464:	b580      	push	{r7, lr}
 8016466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8016468:	4802      	ldr	r0, [pc, #8]	; (8016474 <I2C3_ER_IRQHandler+0x10>)
 801646a:	f002 f826 	bl	80184ba <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 801646e:	bf00      	nop
 8016470:	bd80      	pop	{r7, pc}
 8016472:	bf00      	nop
 8016474:	200002c8 	.word	0x200002c8

08016478 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8016478:	b480      	push	{r7}
 801647a:	af00      	add	r7, sp, #0
	return 1;
 801647c:	2301      	movs	r3, #1
}
 801647e:	4618      	mov	r0, r3
 8016480:	46bd      	mov	sp, r7
 8016482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016486:	4770      	bx	lr

08016488 <_kill>:

int _kill(int pid, int sig)
{
 8016488:	b580      	push	{r7, lr}
 801648a:	b082      	sub	sp, #8
 801648c:	af00      	add	r7, sp, #0
 801648e:	6078      	str	r0, [r7, #4]
 8016490:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8016492:	f007 fd1d 	bl	801ded0 <__errno>
 8016496:	4603      	mov	r3, r0
 8016498:	2216      	movs	r2, #22
 801649a:	601a      	str	r2, [r3, #0]
	return -1;
 801649c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80164a0:	4618      	mov	r0, r3
 80164a2:	3708      	adds	r7, #8
 80164a4:	46bd      	mov	sp, r7
 80164a6:	bd80      	pop	{r7, pc}

080164a8 <_exit>:

void _exit (int status)
{
 80164a8:	b580      	push	{r7, lr}
 80164aa:	b082      	sub	sp, #8
 80164ac:	af00      	add	r7, sp, #0
 80164ae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80164b0:	f04f 31ff 	mov.w	r1, #4294967295
 80164b4:	6878      	ldr	r0, [r7, #4]
 80164b6:	f7ff ffe7 	bl	8016488 <_kill>
	while (1) {}		/* Make sure we hang here */
 80164ba:	e7fe      	b.n	80164ba <_exit+0x12>

080164bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80164bc:	b580      	push	{r7, lr}
 80164be:	b086      	sub	sp, #24
 80164c0:	af00      	add	r7, sp, #0
 80164c2:	60f8      	str	r0, [r7, #12]
 80164c4:	60b9      	str	r1, [r7, #8]
 80164c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80164c8:	2300      	movs	r3, #0
 80164ca:	617b      	str	r3, [r7, #20]
 80164cc:	e00a      	b.n	80164e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80164ce:	f3af 8000 	nop.w
 80164d2:	4601      	mov	r1, r0
 80164d4:	68bb      	ldr	r3, [r7, #8]
 80164d6:	1c5a      	adds	r2, r3, #1
 80164d8:	60ba      	str	r2, [r7, #8]
 80164da:	b2ca      	uxtb	r2, r1
 80164dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80164de:	697b      	ldr	r3, [r7, #20]
 80164e0:	3301      	adds	r3, #1
 80164e2:	617b      	str	r3, [r7, #20]
 80164e4:	697a      	ldr	r2, [r7, #20]
 80164e6:	687b      	ldr	r3, [r7, #4]
 80164e8:	429a      	cmp	r2, r3
 80164ea:	dbf0      	blt.n	80164ce <_read+0x12>
	}

return len;
 80164ec:	687b      	ldr	r3, [r7, #4]
}
 80164ee:	4618      	mov	r0, r3
 80164f0:	3718      	adds	r7, #24
 80164f2:	46bd      	mov	sp, r7
 80164f4:	bd80      	pop	{r7, pc}

080164f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80164f6:	b580      	push	{r7, lr}
 80164f8:	b086      	sub	sp, #24
 80164fa:	af00      	add	r7, sp, #0
 80164fc:	60f8      	str	r0, [r7, #12]
 80164fe:	60b9      	str	r1, [r7, #8]
 8016500:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8016502:	2300      	movs	r3, #0
 8016504:	617b      	str	r3, [r7, #20]
 8016506:	e009      	b.n	801651c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8016508:	68bb      	ldr	r3, [r7, #8]
 801650a:	1c5a      	adds	r2, r3, #1
 801650c:	60ba      	str	r2, [r7, #8]
 801650e:	781b      	ldrb	r3, [r3, #0]
 8016510:	4618      	mov	r0, r3
 8016512:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8016516:	697b      	ldr	r3, [r7, #20]
 8016518:	3301      	adds	r3, #1
 801651a:	617b      	str	r3, [r7, #20]
 801651c:	697a      	ldr	r2, [r7, #20]
 801651e:	687b      	ldr	r3, [r7, #4]
 8016520:	429a      	cmp	r2, r3
 8016522:	dbf1      	blt.n	8016508 <_write+0x12>
	}
	return len;
 8016524:	687b      	ldr	r3, [r7, #4]
}
 8016526:	4618      	mov	r0, r3
 8016528:	3718      	adds	r7, #24
 801652a:	46bd      	mov	sp, r7
 801652c:	bd80      	pop	{r7, pc}

0801652e <_close>:

int _close(int file)
{
 801652e:	b480      	push	{r7}
 8016530:	b083      	sub	sp, #12
 8016532:	af00      	add	r7, sp, #0
 8016534:	6078      	str	r0, [r7, #4]
	return -1;
 8016536:	f04f 33ff 	mov.w	r3, #4294967295
}
 801653a:	4618      	mov	r0, r3
 801653c:	370c      	adds	r7, #12
 801653e:	46bd      	mov	sp, r7
 8016540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016544:	4770      	bx	lr

08016546 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8016546:	b480      	push	{r7}
 8016548:	b083      	sub	sp, #12
 801654a:	af00      	add	r7, sp, #0
 801654c:	6078      	str	r0, [r7, #4]
 801654e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8016550:	683b      	ldr	r3, [r7, #0]
 8016552:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8016556:	605a      	str	r2, [r3, #4]
	return 0;
 8016558:	2300      	movs	r3, #0
}
 801655a:	4618      	mov	r0, r3
 801655c:	370c      	adds	r7, #12
 801655e:	46bd      	mov	sp, r7
 8016560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016564:	4770      	bx	lr

08016566 <_isatty>:

int _isatty(int file)
{
 8016566:	b480      	push	{r7}
 8016568:	b083      	sub	sp, #12
 801656a:	af00      	add	r7, sp, #0
 801656c:	6078      	str	r0, [r7, #4]
	return 1;
 801656e:	2301      	movs	r3, #1
}
 8016570:	4618      	mov	r0, r3
 8016572:	370c      	adds	r7, #12
 8016574:	46bd      	mov	sp, r7
 8016576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801657a:	4770      	bx	lr

0801657c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 801657c:	b480      	push	{r7}
 801657e:	b085      	sub	sp, #20
 8016580:	af00      	add	r7, sp, #0
 8016582:	60f8      	str	r0, [r7, #12]
 8016584:	60b9      	str	r1, [r7, #8]
 8016586:	607a      	str	r2, [r7, #4]
	return 0;
 8016588:	2300      	movs	r3, #0
}
 801658a:	4618      	mov	r0, r3
 801658c:	3714      	adds	r7, #20
 801658e:	46bd      	mov	sp, r7
 8016590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016594:	4770      	bx	lr
	...

08016598 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8016598:	b580      	push	{r7, lr}
 801659a:	b086      	sub	sp, #24
 801659c:	af00      	add	r7, sp, #0
 801659e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80165a0:	4a14      	ldr	r2, [pc, #80]	; (80165f4 <_sbrk+0x5c>)
 80165a2:	4b15      	ldr	r3, [pc, #84]	; (80165f8 <_sbrk+0x60>)
 80165a4:	1ad3      	subs	r3, r2, r3
 80165a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80165a8:	697b      	ldr	r3, [r7, #20]
 80165aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80165ac:	4b13      	ldr	r3, [pc, #76]	; (80165fc <_sbrk+0x64>)
 80165ae:	681b      	ldr	r3, [r3, #0]
 80165b0:	2b00      	cmp	r3, #0
 80165b2:	d102      	bne.n	80165ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80165b4:	4b11      	ldr	r3, [pc, #68]	; (80165fc <_sbrk+0x64>)
 80165b6:	4a12      	ldr	r2, [pc, #72]	; (8016600 <_sbrk+0x68>)
 80165b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80165ba:	4b10      	ldr	r3, [pc, #64]	; (80165fc <_sbrk+0x64>)
 80165bc:	681a      	ldr	r2, [r3, #0]
 80165be:	687b      	ldr	r3, [r7, #4]
 80165c0:	4413      	add	r3, r2
 80165c2:	693a      	ldr	r2, [r7, #16]
 80165c4:	429a      	cmp	r2, r3
 80165c6:	d207      	bcs.n	80165d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80165c8:	f007 fc82 	bl	801ded0 <__errno>
 80165cc:	4603      	mov	r3, r0
 80165ce:	220c      	movs	r2, #12
 80165d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80165d2:	f04f 33ff 	mov.w	r3, #4294967295
 80165d6:	e009      	b.n	80165ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80165d8:	4b08      	ldr	r3, [pc, #32]	; (80165fc <_sbrk+0x64>)
 80165da:	681b      	ldr	r3, [r3, #0]
 80165dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80165de:	4b07      	ldr	r3, [pc, #28]	; (80165fc <_sbrk+0x64>)
 80165e0:	681a      	ldr	r2, [r3, #0]
 80165e2:	687b      	ldr	r3, [r7, #4]
 80165e4:	4413      	add	r3, r2
 80165e6:	4a05      	ldr	r2, [pc, #20]	; (80165fc <_sbrk+0x64>)
 80165e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80165ea:	68fb      	ldr	r3, [r7, #12]
}
 80165ec:	4618      	mov	r0, r3
 80165ee:	3718      	adds	r7, #24
 80165f0:	46bd      	mov	sp, r7
 80165f2:	bd80      	pop	{r7, pc}
 80165f4:	20020000 	.word	0x20020000
 80165f8:	00000400 	.word	0x00000400
 80165fc:	200007e8 	.word	0x200007e8
 8016600:	20000800 	.word	0x20000800

08016604 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8016604:	b480      	push	{r7}
 8016606:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8016608:	4b06      	ldr	r3, [pc, #24]	; (8016624 <SystemInit+0x20>)
 801660a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801660e:	4a05      	ldr	r2, [pc, #20]	; (8016624 <SystemInit+0x20>)
 8016610:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8016614:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8016618:	bf00      	nop
 801661a:	46bd      	mov	sp, r7
 801661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016620:	4770      	bx	lr
 8016622:	bf00      	nop
 8016624:	e000ed00 	.word	0xe000ed00

08016628 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8016628:	f8df d034 	ldr.w	sp, [pc, #52]	; 8016660 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 801662c:	480d      	ldr	r0, [pc, #52]	; (8016664 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 801662e:	490e      	ldr	r1, [pc, #56]	; (8016668 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8016630:	4a0e      	ldr	r2, [pc, #56]	; (801666c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8016632:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8016634:	e002      	b.n	801663c <LoopCopyDataInit>

08016636 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8016636:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8016638:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801663a:	3304      	adds	r3, #4

0801663c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 801663c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801663e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8016640:	d3f9      	bcc.n	8016636 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8016642:	4a0b      	ldr	r2, [pc, #44]	; (8016670 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8016644:	4c0b      	ldr	r4, [pc, #44]	; (8016674 <LoopFillZerobss+0x26>)
  movs r3, #0
 8016646:	2300      	movs	r3, #0
  b LoopFillZerobss
 8016648:	e001      	b.n	801664e <LoopFillZerobss>

0801664a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 801664a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 801664c:	3204      	adds	r2, #4

0801664e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801664e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8016650:	d3fb      	bcc.n	801664a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8016652:	f7ff ffd7 	bl	8016604 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8016656:	f007 fc53 	bl	801df00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801665a:	f7eb f9b3 	bl	80019c4 <main>
  bx  lr    
 801665e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8016660:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8016664:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8016668:	20000250 	.word	0x20000250
  ldr r2, =_sidata
 801666c:	0802a028 	.word	0x0802a028
  ldr r2, =_sbss
 8016670:	20000250 	.word	0x20000250
  ldr r4, =_ebss
 8016674:	20000800 	.word	0x20000800

08016678 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8016678:	e7fe      	b.n	8016678 <ADC_IRQHandler>
	...

0801667c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 801667c:	b580      	push	{r7, lr}
 801667e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8016680:	4b0e      	ldr	r3, [pc, #56]	; (80166bc <HAL_Init+0x40>)
 8016682:	681b      	ldr	r3, [r3, #0]
 8016684:	4a0d      	ldr	r2, [pc, #52]	; (80166bc <HAL_Init+0x40>)
 8016686:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801668a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 801668c:	4b0b      	ldr	r3, [pc, #44]	; (80166bc <HAL_Init+0x40>)
 801668e:	681b      	ldr	r3, [r3, #0]
 8016690:	4a0a      	ldr	r2, [pc, #40]	; (80166bc <HAL_Init+0x40>)
 8016692:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8016696:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8016698:	4b08      	ldr	r3, [pc, #32]	; (80166bc <HAL_Init+0x40>)
 801669a:	681b      	ldr	r3, [r3, #0]
 801669c:	4a07      	ldr	r2, [pc, #28]	; (80166bc <HAL_Init+0x40>)
 801669e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80166a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80166a4:	2003      	movs	r0, #3
 80166a6:	f000 f94f 	bl	8016948 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80166aa:	2000      	movs	r0, #0
 80166ac:	f000 f808 	bl	80166c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80166b0:	f7ff fc14 	bl	8015edc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80166b4:	2300      	movs	r3, #0
}
 80166b6:	4618      	mov	r0, r3
 80166b8:	bd80      	pop	{r7, pc}
 80166ba:	bf00      	nop
 80166bc:	40023c00 	.word	0x40023c00

080166c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80166c0:	b580      	push	{r7, lr}
 80166c2:	b082      	sub	sp, #8
 80166c4:	af00      	add	r7, sp, #0
 80166c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80166c8:	4b12      	ldr	r3, [pc, #72]	; (8016714 <HAL_InitTick+0x54>)
 80166ca:	681a      	ldr	r2, [r3, #0]
 80166cc:	4b12      	ldr	r3, [pc, #72]	; (8016718 <HAL_InitTick+0x58>)
 80166ce:	781b      	ldrb	r3, [r3, #0]
 80166d0:	4619      	mov	r1, r3
 80166d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80166d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80166da:	fbb2 f3f3 	udiv	r3, r2, r3
 80166de:	4618      	mov	r0, r3
 80166e0:	f000 f967 	bl	80169b2 <HAL_SYSTICK_Config>
 80166e4:	4603      	mov	r3, r0
 80166e6:	2b00      	cmp	r3, #0
 80166e8:	d001      	beq.n	80166ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80166ea:	2301      	movs	r3, #1
 80166ec:	e00e      	b.n	801670c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80166ee:	687b      	ldr	r3, [r7, #4]
 80166f0:	2b0f      	cmp	r3, #15
 80166f2:	d80a      	bhi.n	801670a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80166f4:	2200      	movs	r2, #0
 80166f6:	6879      	ldr	r1, [r7, #4]
 80166f8:	f04f 30ff 	mov.w	r0, #4294967295
 80166fc:	f000 f92f 	bl	801695e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8016700:	4a06      	ldr	r2, [pc, #24]	; (801671c <HAL_InitTick+0x5c>)
 8016702:	687b      	ldr	r3, [r7, #4]
 8016704:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8016706:	2300      	movs	r3, #0
 8016708:	e000      	b.n	801670c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 801670a:	2301      	movs	r3, #1
}
 801670c:	4618      	mov	r0, r3
 801670e:	3708      	adds	r7, #8
 8016710:	46bd      	mov	sp, r7
 8016712:	bd80      	pop	{r7, pc}
 8016714:	200001e0 	.word	0x200001e0
 8016718:	200001e8 	.word	0x200001e8
 801671c:	200001e4 	.word	0x200001e4

08016720 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8016720:	b480      	push	{r7}
 8016722:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8016724:	4b06      	ldr	r3, [pc, #24]	; (8016740 <HAL_IncTick+0x20>)
 8016726:	781b      	ldrb	r3, [r3, #0]
 8016728:	461a      	mov	r2, r3
 801672a:	4b06      	ldr	r3, [pc, #24]	; (8016744 <HAL_IncTick+0x24>)
 801672c:	681b      	ldr	r3, [r3, #0]
 801672e:	4413      	add	r3, r2
 8016730:	4a04      	ldr	r2, [pc, #16]	; (8016744 <HAL_IncTick+0x24>)
 8016732:	6013      	str	r3, [r2, #0]
}
 8016734:	bf00      	nop
 8016736:	46bd      	mov	sp, r7
 8016738:	f85d 7b04 	ldr.w	r7, [sp], #4
 801673c:	4770      	bx	lr
 801673e:	bf00      	nop
 8016740:	200001e8 	.word	0x200001e8
 8016744:	200007ec 	.word	0x200007ec

08016748 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8016748:	b480      	push	{r7}
 801674a:	af00      	add	r7, sp, #0
  return uwTick;
 801674c:	4b03      	ldr	r3, [pc, #12]	; (801675c <HAL_GetTick+0x14>)
 801674e:	681b      	ldr	r3, [r3, #0]
}
 8016750:	4618      	mov	r0, r3
 8016752:	46bd      	mov	sp, r7
 8016754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016758:	4770      	bx	lr
 801675a:	bf00      	nop
 801675c:	200007ec 	.word	0x200007ec

08016760 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8016760:	b580      	push	{r7, lr}
 8016762:	b084      	sub	sp, #16
 8016764:	af00      	add	r7, sp, #0
 8016766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8016768:	f7ff ffee 	bl	8016748 <HAL_GetTick>
 801676c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801676e:	687b      	ldr	r3, [r7, #4]
 8016770:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8016772:	68fb      	ldr	r3, [r7, #12]
 8016774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016778:	d005      	beq.n	8016786 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 801677a:	4b0a      	ldr	r3, [pc, #40]	; (80167a4 <HAL_Delay+0x44>)
 801677c:	781b      	ldrb	r3, [r3, #0]
 801677e:	461a      	mov	r2, r3
 8016780:	68fb      	ldr	r3, [r7, #12]
 8016782:	4413      	add	r3, r2
 8016784:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8016786:	bf00      	nop
 8016788:	f7ff ffde 	bl	8016748 <HAL_GetTick>
 801678c:	4602      	mov	r2, r0
 801678e:	68bb      	ldr	r3, [r7, #8]
 8016790:	1ad3      	subs	r3, r2, r3
 8016792:	68fa      	ldr	r2, [r7, #12]
 8016794:	429a      	cmp	r2, r3
 8016796:	d8f7      	bhi.n	8016788 <HAL_Delay+0x28>
  {
  }
}
 8016798:	bf00      	nop
 801679a:	bf00      	nop
 801679c:	3710      	adds	r7, #16
 801679e:	46bd      	mov	sp, r7
 80167a0:	bd80      	pop	{r7, pc}
 80167a2:	bf00      	nop
 80167a4:	200001e8 	.word	0x200001e8

080167a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80167a8:	b480      	push	{r7}
 80167aa:	b085      	sub	sp, #20
 80167ac:	af00      	add	r7, sp, #0
 80167ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80167b0:	687b      	ldr	r3, [r7, #4]
 80167b2:	f003 0307 	and.w	r3, r3, #7
 80167b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80167b8:	4b0c      	ldr	r3, [pc, #48]	; (80167ec <__NVIC_SetPriorityGrouping+0x44>)
 80167ba:	68db      	ldr	r3, [r3, #12]
 80167bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80167be:	68ba      	ldr	r2, [r7, #8]
 80167c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80167c4:	4013      	ands	r3, r2
 80167c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80167c8:	68fb      	ldr	r3, [r7, #12]
 80167ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80167cc:	68bb      	ldr	r3, [r7, #8]
 80167ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80167d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80167d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80167d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80167da:	4a04      	ldr	r2, [pc, #16]	; (80167ec <__NVIC_SetPriorityGrouping+0x44>)
 80167dc:	68bb      	ldr	r3, [r7, #8]
 80167de:	60d3      	str	r3, [r2, #12]
}
 80167e0:	bf00      	nop
 80167e2:	3714      	adds	r7, #20
 80167e4:	46bd      	mov	sp, r7
 80167e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167ea:	4770      	bx	lr
 80167ec:	e000ed00 	.word	0xe000ed00

080167f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80167f0:	b480      	push	{r7}
 80167f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80167f4:	4b04      	ldr	r3, [pc, #16]	; (8016808 <__NVIC_GetPriorityGrouping+0x18>)
 80167f6:	68db      	ldr	r3, [r3, #12]
 80167f8:	0a1b      	lsrs	r3, r3, #8
 80167fa:	f003 0307 	and.w	r3, r3, #7
}
 80167fe:	4618      	mov	r0, r3
 8016800:	46bd      	mov	sp, r7
 8016802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016806:	4770      	bx	lr
 8016808:	e000ed00 	.word	0xe000ed00

0801680c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801680c:	b480      	push	{r7}
 801680e:	b083      	sub	sp, #12
 8016810:	af00      	add	r7, sp, #0
 8016812:	4603      	mov	r3, r0
 8016814:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801681a:	2b00      	cmp	r3, #0
 801681c:	db0b      	blt.n	8016836 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801681e:	79fb      	ldrb	r3, [r7, #7]
 8016820:	f003 021f 	and.w	r2, r3, #31
 8016824:	4907      	ldr	r1, [pc, #28]	; (8016844 <__NVIC_EnableIRQ+0x38>)
 8016826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801682a:	095b      	lsrs	r3, r3, #5
 801682c:	2001      	movs	r0, #1
 801682e:	fa00 f202 	lsl.w	r2, r0, r2
 8016832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8016836:	bf00      	nop
 8016838:	370c      	adds	r7, #12
 801683a:	46bd      	mov	sp, r7
 801683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016840:	4770      	bx	lr
 8016842:	bf00      	nop
 8016844:	e000e100 	.word	0xe000e100

08016848 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8016848:	b480      	push	{r7}
 801684a:	b083      	sub	sp, #12
 801684c:	af00      	add	r7, sp, #0
 801684e:	4603      	mov	r3, r0
 8016850:	6039      	str	r1, [r7, #0]
 8016852:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016858:	2b00      	cmp	r3, #0
 801685a:	db0a      	blt.n	8016872 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801685c:	683b      	ldr	r3, [r7, #0]
 801685e:	b2da      	uxtb	r2, r3
 8016860:	490c      	ldr	r1, [pc, #48]	; (8016894 <__NVIC_SetPriority+0x4c>)
 8016862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016866:	0112      	lsls	r2, r2, #4
 8016868:	b2d2      	uxtb	r2, r2
 801686a:	440b      	add	r3, r1
 801686c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8016870:	e00a      	b.n	8016888 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016872:	683b      	ldr	r3, [r7, #0]
 8016874:	b2da      	uxtb	r2, r3
 8016876:	4908      	ldr	r1, [pc, #32]	; (8016898 <__NVIC_SetPriority+0x50>)
 8016878:	79fb      	ldrb	r3, [r7, #7]
 801687a:	f003 030f 	and.w	r3, r3, #15
 801687e:	3b04      	subs	r3, #4
 8016880:	0112      	lsls	r2, r2, #4
 8016882:	b2d2      	uxtb	r2, r2
 8016884:	440b      	add	r3, r1
 8016886:	761a      	strb	r2, [r3, #24]
}
 8016888:	bf00      	nop
 801688a:	370c      	adds	r7, #12
 801688c:	46bd      	mov	sp, r7
 801688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016892:	4770      	bx	lr
 8016894:	e000e100 	.word	0xe000e100
 8016898:	e000ed00 	.word	0xe000ed00

0801689c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801689c:	b480      	push	{r7}
 801689e:	b089      	sub	sp, #36	; 0x24
 80168a0:	af00      	add	r7, sp, #0
 80168a2:	60f8      	str	r0, [r7, #12]
 80168a4:	60b9      	str	r1, [r7, #8]
 80168a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80168a8:	68fb      	ldr	r3, [r7, #12]
 80168aa:	f003 0307 	and.w	r3, r3, #7
 80168ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80168b0:	69fb      	ldr	r3, [r7, #28]
 80168b2:	f1c3 0307 	rsb	r3, r3, #7
 80168b6:	2b04      	cmp	r3, #4
 80168b8:	bf28      	it	cs
 80168ba:	2304      	movcs	r3, #4
 80168bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80168be:	69fb      	ldr	r3, [r7, #28]
 80168c0:	3304      	adds	r3, #4
 80168c2:	2b06      	cmp	r3, #6
 80168c4:	d902      	bls.n	80168cc <NVIC_EncodePriority+0x30>
 80168c6:	69fb      	ldr	r3, [r7, #28]
 80168c8:	3b03      	subs	r3, #3
 80168ca:	e000      	b.n	80168ce <NVIC_EncodePriority+0x32>
 80168cc:	2300      	movs	r3, #0
 80168ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80168d0:	f04f 32ff 	mov.w	r2, #4294967295
 80168d4:	69bb      	ldr	r3, [r7, #24]
 80168d6:	fa02 f303 	lsl.w	r3, r2, r3
 80168da:	43da      	mvns	r2, r3
 80168dc:	68bb      	ldr	r3, [r7, #8]
 80168de:	401a      	ands	r2, r3
 80168e0:	697b      	ldr	r3, [r7, #20]
 80168e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80168e4:	f04f 31ff 	mov.w	r1, #4294967295
 80168e8:	697b      	ldr	r3, [r7, #20]
 80168ea:	fa01 f303 	lsl.w	r3, r1, r3
 80168ee:	43d9      	mvns	r1, r3
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80168f4:	4313      	orrs	r3, r2
         );
}
 80168f6:	4618      	mov	r0, r3
 80168f8:	3724      	adds	r7, #36	; 0x24
 80168fa:	46bd      	mov	sp, r7
 80168fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016900:	4770      	bx	lr
	...

08016904 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8016904:	b580      	push	{r7, lr}
 8016906:	b082      	sub	sp, #8
 8016908:	af00      	add	r7, sp, #0
 801690a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801690c:	687b      	ldr	r3, [r7, #4]
 801690e:	3b01      	subs	r3, #1
 8016910:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8016914:	d301      	bcc.n	801691a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8016916:	2301      	movs	r3, #1
 8016918:	e00f      	b.n	801693a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801691a:	4a0a      	ldr	r2, [pc, #40]	; (8016944 <SysTick_Config+0x40>)
 801691c:	687b      	ldr	r3, [r7, #4]
 801691e:	3b01      	subs	r3, #1
 8016920:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8016922:	210f      	movs	r1, #15
 8016924:	f04f 30ff 	mov.w	r0, #4294967295
 8016928:	f7ff ff8e 	bl	8016848 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801692c:	4b05      	ldr	r3, [pc, #20]	; (8016944 <SysTick_Config+0x40>)
 801692e:	2200      	movs	r2, #0
 8016930:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8016932:	4b04      	ldr	r3, [pc, #16]	; (8016944 <SysTick_Config+0x40>)
 8016934:	2207      	movs	r2, #7
 8016936:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8016938:	2300      	movs	r3, #0
}
 801693a:	4618      	mov	r0, r3
 801693c:	3708      	adds	r7, #8
 801693e:	46bd      	mov	sp, r7
 8016940:	bd80      	pop	{r7, pc}
 8016942:	bf00      	nop
 8016944:	e000e010 	.word	0xe000e010

08016948 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8016948:	b580      	push	{r7, lr}
 801694a:	b082      	sub	sp, #8
 801694c:	af00      	add	r7, sp, #0
 801694e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8016950:	6878      	ldr	r0, [r7, #4]
 8016952:	f7ff ff29 	bl	80167a8 <__NVIC_SetPriorityGrouping>
}
 8016956:	bf00      	nop
 8016958:	3708      	adds	r7, #8
 801695a:	46bd      	mov	sp, r7
 801695c:	bd80      	pop	{r7, pc}

0801695e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 801695e:	b580      	push	{r7, lr}
 8016960:	b086      	sub	sp, #24
 8016962:	af00      	add	r7, sp, #0
 8016964:	4603      	mov	r3, r0
 8016966:	60b9      	str	r1, [r7, #8]
 8016968:	607a      	str	r2, [r7, #4]
 801696a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 801696c:	2300      	movs	r3, #0
 801696e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8016970:	f7ff ff3e 	bl	80167f0 <__NVIC_GetPriorityGrouping>
 8016974:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8016976:	687a      	ldr	r2, [r7, #4]
 8016978:	68b9      	ldr	r1, [r7, #8]
 801697a:	6978      	ldr	r0, [r7, #20]
 801697c:	f7ff ff8e 	bl	801689c <NVIC_EncodePriority>
 8016980:	4602      	mov	r2, r0
 8016982:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016986:	4611      	mov	r1, r2
 8016988:	4618      	mov	r0, r3
 801698a:	f7ff ff5d 	bl	8016848 <__NVIC_SetPriority>
}
 801698e:	bf00      	nop
 8016990:	3718      	adds	r7, #24
 8016992:	46bd      	mov	sp, r7
 8016994:	bd80      	pop	{r7, pc}

08016996 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8016996:	b580      	push	{r7, lr}
 8016998:	b082      	sub	sp, #8
 801699a:	af00      	add	r7, sp, #0
 801699c:	4603      	mov	r3, r0
 801699e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80169a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80169a4:	4618      	mov	r0, r3
 80169a6:	f7ff ff31 	bl	801680c <__NVIC_EnableIRQ>
}
 80169aa:	bf00      	nop
 80169ac:	3708      	adds	r7, #8
 80169ae:	46bd      	mov	sp, r7
 80169b0:	bd80      	pop	{r7, pc}

080169b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80169b2:	b580      	push	{r7, lr}
 80169b4:	b082      	sub	sp, #8
 80169b6:	af00      	add	r7, sp, #0
 80169b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80169ba:	6878      	ldr	r0, [r7, #4]
 80169bc:	f7ff ffa2 	bl	8016904 <SysTick_Config>
 80169c0:	4603      	mov	r3, r0
}
 80169c2:	4618      	mov	r0, r3
 80169c4:	3708      	adds	r7, #8
 80169c6:	46bd      	mov	sp, r7
 80169c8:	bd80      	pop	{r7, pc}
	...

080169cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80169cc:	b580      	push	{r7, lr}
 80169ce:	b086      	sub	sp, #24
 80169d0:	af00      	add	r7, sp, #0
 80169d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80169d4:	2300      	movs	r3, #0
 80169d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80169d8:	f7ff feb6 	bl	8016748 <HAL_GetTick>
 80169dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80169de:	687b      	ldr	r3, [r7, #4]
 80169e0:	2b00      	cmp	r3, #0
 80169e2:	d101      	bne.n	80169e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80169e4:	2301      	movs	r3, #1
 80169e6:	e099      	b.n	8016b1c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80169e8:	687b      	ldr	r3, [r7, #4]
 80169ea:	2202      	movs	r2, #2
 80169ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80169f0:	687b      	ldr	r3, [r7, #4]
 80169f2:	2200      	movs	r2, #0
 80169f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80169f8:	687b      	ldr	r3, [r7, #4]
 80169fa:	681b      	ldr	r3, [r3, #0]
 80169fc:	681a      	ldr	r2, [r3, #0]
 80169fe:	687b      	ldr	r3, [r7, #4]
 8016a00:	681b      	ldr	r3, [r3, #0]
 8016a02:	f022 0201 	bic.w	r2, r2, #1
 8016a06:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8016a08:	e00f      	b.n	8016a2a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8016a0a:	f7ff fe9d 	bl	8016748 <HAL_GetTick>
 8016a0e:	4602      	mov	r2, r0
 8016a10:	693b      	ldr	r3, [r7, #16]
 8016a12:	1ad3      	subs	r3, r2, r3
 8016a14:	2b05      	cmp	r3, #5
 8016a16:	d908      	bls.n	8016a2a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8016a18:	687b      	ldr	r3, [r7, #4]
 8016a1a:	2220      	movs	r2, #32
 8016a1c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8016a1e:	687b      	ldr	r3, [r7, #4]
 8016a20:	2203      	movs	r2, #3
 8016a22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8016a26:	2303      	movs	r3, #3
 8016a28:	e078      	b.n	8016b1c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8016a2a:	687b      	ldr	r3, [r7, #4]
 8016a2c:	681b      	ldr	r3, [r3, #0]
 8016a2e:	681b      	ldr	r3, [r3, #0]
 8016a30:	f003 0301 	and.w	r3, r3, #1
 8016a34:	2b00      	cmp	r3, #0
 8016a36:	d1e8      	bne.n	8016a0a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8016a38:	687b      	ldr	r3, [r7, #4]
 8016a3a:	681b      	ldr	r3, [r3, #0]
 8016a3c:	681b      	ldr	r3, [r3, #0]
 8016a3e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8016a40:	697a      	ldr	r2, [r7, #20]
 8016a42:	4b38      	ldr	r3, [pc, #224]	; (8016b24 <HAL_DMA_Init+0x158>)
 8016a44:	4013      	ands	r3, r2
 8016a46:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8016a48:	687b      	ldr	r3, [r7, #4]
 8016a4a:	685a      	ldr	r2, [r3, #4]
 8016a4c:	687b      	ldr	r3, [r7, #4]
 8016a4e:	689b      	ldr	r3, [r3, #8]
 8016a50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8016a52:	687b      	ldr	r3, [r7, #4]
 8016a54:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8016a56:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8016a58:	687b      	ldr	r3, [r7, #4]
 8016a5a:	691b      	ldr	r3, [r3, #16]
 8016a5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8016a5e:	687b      	ldr	r3, [r7, #4]
 8016a60:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8016a62:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	699b      	ldr	r3, [r3, #24]
 8016a68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8016a6a:	687b      	ldr	r3, [r7, #4]
 8016a6c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8016a6e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8016a70:	687b      	ldr	r3, [r7, #4]
 8016a72:	6a1b      	ldr	r3, [r3, #32]
 8016a74:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8016a76:	697a      	ldr	r2, [r7, #20]
 8016a78:	4313      	orrs	r3, r2
 8016a7a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8016a7c:	687b      	ldr	r3, [r7, #4]
 8016a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016a80:	2b04      	cmp	r3, #4
 8016a82:	d107      	bne.n	8016a94 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8016a84:	687b      	ldr	r3, [r7, #4]
 8016a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016a88:	687b      	ldr	r3, [r7, #4]
 8016a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016a8c:	4313      	orrs	r3, r2
 8016a8e:	697a      	ldr	r2, [r7, #20]
 8016a90:	4313      	orrs	r3, r2
 8016a92:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8016a94:	687b      	ldr	r3, [r7, #4]
 8016a96:	681b      	ldr	r3, [r3, #0]
 8016a98:	697a      	ldr	r2, [r7, #20]
 8016a9a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8016a9c:	687b      	ldr	r3, [r7, #4]
 8016a9e:	681b      	ldr	r3, [r3, #0]
 8016aa0:	695b      	ldr	r3, [r3, #20]
 8016aa2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8016aa4:	697b      	ldr	r3, [r7, #20]
 8016aa6:	f023 0307 	bic.w	r3, r3, #7
 8016aaa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8016aac:	687b      	ldr	r3, [r7, #4]
 8016aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016ab0:	697a      	ldr	r2, [r7, #20]
 8016ab2:	4313      	orrs	r3, r2
 8016ab4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8016ab6:	687b      	ldr	r3, [r7, #4]
 8016ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016aba:	2b04      	cmp	r3, #4
 8016abc:	d117      	bne.n	8016aee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8016abe:	687b      	ldr	r3, [r7, #4]
 8016ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016ac2:	697a      	ldr	r2, [r7, #20]
 8016ac4:	4313      	orrs	r3, r2
 8016ac6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8016ac8:	687b      	ldr	r3, [r7, #4]
 8016aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016acc:	2b00      	cmp	r3, #0
 8016ace:	d00e      	beq.n	8016aee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8016ad0:	6878      	ldr	r0, [r7, #4]
 8016ad2:	f000 fb0f 	bl	80170f4 <DMA_CheckFifoParam>
 8016ad6:	4603      	mov	r3, r0
 8016ad8:	2b00      	cmp	r3, #0
 8016ada:	d008      	beq.n	8016aee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8016adc:	687b      	ldr	r3, [r7, #4]
 8016ade:	2240      	movs	r2, #64	; 0x40
 8016ae0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8016ae2:	687b      	ldr	r3, [r7, #4]
 8016ae4:	2201      	movs	r2, #1
 8016ae6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8016aea:	2301      	movs	r3, #1
 8016aec:	e016      	b.n	8016b1c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8016aee:	687b      	ldr	r3, [r7, #4]
 8016af0:	681b      	ldr	r3, [r3, #0]
 8016af2:	697a      	ldr	r2, [r7, #20]
 8016af4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8016af6:	6878      	ldr	r0, [r7, #4]
 8016af8:	f000 fac6 	bl	8017088 <DMA_CalcBaseAndBitshift>
 8016afc:	4603      	mov	r3, r0
 8016afe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8016b00:	687b      	ldr	r3, [r7, #4]
 8016b02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016b04:	223f      	movs	r2, #63	; 0x3f
 8016b06:	409a      	lsls	r2, r3
 8016b08:	68fb      	ldr	r3, [r7, #12]
 8016b0a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8016b0c:	687b      	ldr	r3, [r7, #4]
 8016b0e:	2200      	movs	r2, #0
 8016b10:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8016b12:	687b      	ldr	r3, [r7, #4]
 8016b14:	2201      	movs	r2, #1
 8016b16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8016b1a:	2300      	movs	r3, #0
}
 8016b1c:	4618      	mov	r0, r3
 8016b1e:	3718      	adds	r7, #24
 8016b20:	46bd      	mov	sp, r7
 8016b22:	bd80      	pop	{r7, pc}
 8016b24:	f010803f 	.word	0xf010803f

08016b28 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8016b28:	b580      	push	{r7, lr}
 8016b2a:	b086      	sub	sp, #24
 8016b2c:	af00      	add	r7, sp, #0
 8016b2e:	60f8      	str	r0, [r7, #12]
 8016b30:	60b9      	str	r1, [r7, #8]
 8016b32:	607a      	str	r2, [r7, #4]
 8016b34:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8016b36:	2300      	movs	r3, #0
 8016b38:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8016b3a:	68fb      	ldr	r3, [r7, #12]
 8016b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016b3e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8016b40:	68fb      	ldr	r3, [r7, #12]
 8016b42:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8016b46:	2b01      	cmp	r3, #1
 8016b48:	d101      	bne.n	8016b4e <HAL_DMA_Start_IT+0x26>
 8016b4a:	2302      	movs	r3, #2
 8016b4c:	e040      	b.n	8016bd0 <HAL_DMA_Start_IT+0xa8>
 8016b4e:	68fb      	ldr	r3, [r7, #12]
 8016b50:	2201      	movs	r2, #1
 8016b52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8016b56:	68fb      	ldr	r3, [r7, #12]
 8016b58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016b5c:	b2db      	uxtb	r3, r3
 8016b5e:	2b01      	cmp	r3, #1
 8016b60:	d12f      	bne.n	8016bc2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8016b62:	68fb      	ldr	r3, [r7, #12]
 8016b64:	2202      	movs	r2, #2
 8016b66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8016b6a:	68fb      	ldr	r3, [r7, #12]
 8016b6c:	2200      	movs	r2, #0
 8016b6e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8016b70:	683b      	ldr	r3, [r7, #0]
 8016b72:	687a      	ldr	r2, [r7, #4]
 8016b74:	68b9      	ldr	r1, [r7, #8]
 8016b76:	68f8      	ldr	r0, [r7, #12]
 8016b78:	f000 fa58 	bl	801702c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8016b7c:	68fb      	ldr	r3, [r7, #12]
 8016b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016b80:	223f      	movs	r2, #63	; 0x3f
 8016b82:	409a      	lsls	r2, r3
 8016b84:	693b      	ldr	r3, [r7, #16]
 8016b86:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8016b88:	68fb      	ldr	r3, [r7, #12]
 8016b8a:	681b      	ldr	r3, [r3, #0]
 8016b8c:	681a      	ldr	r2, [r3, #0]
 8016b8e:	68fb      	ldr	r3, [r7, #12]
 8016b90:	681b      	ldr	r3, [r3, #0]
 8016b92:	f042 0216 	orr.w	r2, r2, #22
 8016b96:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8016b98:	68fb      	ldr	r3, [r7, #12]
 8016b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016b9c:	2b00      	cmp	r3, #0
 8016b9e:	d007      	beq.n	8016bb0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8016ba0:	68fb      	ldr	r3, [r7, #12]
 8016ba2:	681b      	ldr	r3, [r3, #0]
 8016ba4:	681a      	ldr	r2, [r3, #0]
 8016ba6:	68fb      	ldr	r3, [r7, #12]
 8016ba8:	681b      	ldr	r3, [r3, #0]
 8016baa:	f042 0208 	orr.w	r2, r2, #8
 8016bae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8016bb0:	68fb      	ldr	r3, [r7, #12]
 8016bb2:	681b      	ldr	r3, [r3, #0]
 8016bb4:	681a      	ldr	r2, [r3, #0]
 8016bb6:	68fb      	ldr	r3, [r7, #12]
 8016bb8:	681b      	ldr	r3, [r3, #0]
 8016bba:	f042 0201 	orr.w	r2, r2, #1
 8016bbe:	601a      	str	r2, [r3, #0]
 8016bc0:	e005      	b.n	8016bce <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8016bc2:	68fb      	ldr	r3, [r7, #12]
 8016bc4:	2200      	movs	r2, #0
 8016bc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8016bca:	2302      	movs	r3, #2
 8016bcc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8016bce:	7dfb      	ldrb	r3, [r7, #23]
}
 8016bd0:	4618      	mov	r0, r3
 8016bd2:	3718      	adds	r7, #24
 8016bd4:	46bd      	mov	sp, r7
 8016bd6:	bd80      	pop	{r7, pc}

08016bd8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8016bd8:	b580      	push	{r7, lr}
 8016bda:	b084      	sub	sp, #16
 8016bdc:	af00      	add	r7, sp, #0
 8016bde:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8016be0:	687b      	ldr	r3, [r7, #4]
 8016be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016be4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8016be6:	f7ff fdaf 	bl	8016748 <HAL_GetTick>
 8016bea:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8016bec:	687b      	ldr	r3, [r7, #4]
 8016bee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016bf2:	b2db      	uxtb	r3, r3
 8016bf4:	2b02      	cmp	r3, #2
 8016bf6:	d008      	beq.n	8016c0a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8016bf8:	687b      	ldr	r3, [r7, #4]
 8016bfa:	2280      	movs	r2, #128	; 0x80
 8016bfc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8016bfe:	687b      	ldr	r3, [r7, #4]
 8016c00:	2200      	movs	r2, #0
 8016c02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8016c06:	2301      	movs	r3, #1
 8016c08:	e052      	b.n	8016cb0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	681b      	ldr	r3, [r3, #0]
 8016c0e:	681a      	ldr	r2, [r3, #0]
 8016c10:	687b      	ldr	r3, [r7, #4]
 8016c12:	681b      	ldr	r3, [r3, #0]
 8016c14:	f022 0216 	bic.w	r2, r2, #22
 8016c18:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8016c1a:	687b      	ldr	r3, [r7, #4]
 8016c1c:	681b      	ldr	r3, [r3, #0]
 8016c1e:	695a      	ldr	r2, [r3, #20]
 8016c20:	687b      	ldr	r3, [r7, #4]
 8016c22:	681b      	ldr	r3, [r3, #0]
 8016c24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016c28:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8016c2a:	687b      	ldr	r3, [r7, #4]
 8016c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016c2e:	2b00      	cmp	r3, #0
 8016c30:	d103      	bne.n	8016c3a <HAL_DMA_Abort+0x62>
 8016c32:	687b      	ldr	r3, [r7, #4]
 8016c34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016c36:	2b00      	cmp	r3, #0
 8016c38:	d007      	beq.n	8016c4a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8016c3a:	687b      	ldr	r3, [r7, #4]
 8016c3c:	681b      	ldr	r3, [r3, #0]
 8016c3e:	681a      	ldr	r2, [r3, #0]
 8016c40:	687b      	ldr	r3, [r7, #4]
 8016c42:	681b      	ldr	r3, [r3, #0]
 8016c44:	f022 0208 	bic.w	r2, r2, #8
 8016c48:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8016c4a:	687b      	ldr	r3, [r7, #4]
 8016c4c:	681b      	ldr	r3, [r3, #0]
 8016c4e:	681a      	ldr	r2, [r3, #0]
 8016c50:	687b      	ldr	r3, [r7, #4]
 8016c52:	681b      	ldr	r3, [r3, #0]
 8016c54:	f022 0201 	bic.w	r2, r2, #1
 8016c58:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8016c5a:	e013      	b.n	8016c84 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8016c5c:	f7ff fd74 	bl	8016748 <HAL_GetTick>
 8016c60:	4602      	mov	r2, r0
 8016c62:	68bb      	ldr	r3, [r7, #8]
 8016c64:	1ad3      	subs	r3, r2, r3
 8016c66:	2b05      	cmp	r3, #5
 8016c68:	d90c      	bls.n	8016c84 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8016c6a:	687b      	ldr	r3, [r7, #4]
 8016c6c:	2220      	movs	r2, #32
 8016c6e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8016c70:	687b      	ldr	r3, [r7, #4]
 8016c72:	2203      	movs	r2, #3
 8016c74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8016c78:	687b      	ldr	r3, [r7, #4]
 8016c7a:	2200      	movs	r2, #0
 8016c7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8016c80:	2303      	movs	r3, #3
 8016c82:	e015      	b.n	8016cb0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8016c84:	687b      	ldr	r3, [r7, #4]
 8016c86:	681b      	ldr	r3, [r3, #0]
 8016c88:	681b      	ldr	r3, [r3, #0]
 8016c8a:	f003 0301 	and.w	r3, r3, #1
 8016c8e:	2b00      	cmp	r3, #0
 8016c90:	d1e4      	bne.n	8016c5c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8016c92:	687b      	ldr	r3, [r7, #4]
 8016c94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016c96:	223f      	movs	r2, #63	; 0x3f
 8016c98:	409a      	lsls	r2, r3
 8016c9a:	68fb      	ldr	r3, [r7, #12]
 8016c9c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8016c9e:	687b      	ldr	r3, [r7, #4]
 8016ca0:	2201      	movs	r2, #1
 8016ca2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8016ca6:	687b      	ldr	r3, [r7, #4]
 8016ca8:	2200      	movs	r2, #0
 8016caa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8016cae:	2300      	movs	r3, #0
}
 8016cb0:	4618      	mov	r0, r3
 8016cb2:	3710      	adds	r7, #16
 8016cb4:	46bd      	mov	sp, r7
 8016cb6:	bd80      	pop	{r7, pc}

08016cb8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8016cb8:	b480      	push	{r7}
 8016cba:	b083      	sub	sp, #12
 8016cbc:	af00      	add	r7, sp, #0
 8016cbe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8016cc0:	687b      	ldr	r3, [r7, #4]
 8016cc2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016cc6:	b2db      	uxtb	r3, r3
 8016cc8:	2b02      	cmp	r3, #2
 8016cca:	d004      	beq.n	8016cd6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8016ccc:	687b      	ldr	r3, [r7, #4]
 8016cce:	2280      	movs	r2, #128	; 0x80
 8016cd0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8016cd2:	2301      	movs	r3, #1
 8016cd4:	e00c      	b.n	8016cf0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8016cd6:	687b      	ldr	r3, [r7, #4]
 8016cd8:	2205      	movs	r2, #5
 8016cda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8016cde:	687b      	ldr	r3, [r7, #4]
 8016ce0:	681b      	ldr	r3, [r3, #0]
 8016ce2:	681a      	ldr	r2, [r3, #0]
 8016ce4:	687b      	ldr	r3, [r7, #4]
 8016ce6:	681b      	ldr	r3, [r3, #0]
 8016ce8:	f022 0201 	bic.w	r2, r2, #1
 8016cec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8016cee:	2300      	movs	r3, #0
}
 8016cf0:	4618      	mov	r0, r3
 8016cf2:	370c      	adds	r7, #12
 8016cf4:	46bd      	mov	sp, r7
 8016cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cfa:	4770      	bx	lr

08016cfc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8016cfc:	b580      	push	{r7, lr}
 8016cfe:	b086      	sub	sp, #24
 8016d00:	af00      	add	r7, sp, #0
 8016d02:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8016d04:	2300      	movs	r3, #0
 8016d06:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8016d08:	4b8e      	ldr	r3, [pc, #568]	; (8016f44 <HAL_DMA_IRQHandler+0x248>)
 8016d0a:	681b      	ldr	r3, [r3, #0]
 8016d0c:	4a8e      	ldr	r2, [pc, #568]	; (8016f48 <HAL_DMA_IRQHandler+0x24c>)
 8016d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8016d12:	0a9b      	lsrs	r3, r3, #10
 8016d14:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8016d16:	687b      	ldr	r3, [r7, #4]
 8016d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016d1a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8016d1c:	693b      	ldr	r3, [r7, #16]
 8016d1e:	681b      	ldr	r3, [r3, #0]
 8016d20:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8016d22:	687b      	ldr	r3, [r7, #4]
 8016d24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016d26:	2208      	movs	r2, #8
 8016d28:	409a      	lsls	r2, r3
 8016d2a:	68fb      	ldr	r3, [r7, #12]
 8016d2c:	4013      	ands	r3, r2
 8016d2e:	2b00      	cmp	r3, #0
 8016d30:	d01a      	beq.n	8016d68 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8016d32:	687b      	ldr	r3, [r7, #4]
 8016d34:	681b      	ldr	r3, [r3, #0]
 8016d36:	681b      	ldr	r3, [r3, #0]
 8016d38:	f003 0304 	and.w	r3, r3, #4
 8016d3c:	2b00      	cmp	r3, #0
 8016d3e:	d013      	beq.n	8016d68 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8016d40:	687b      	ldr	r3, [r7, #4]
 8016d42:	681b      	ldr	r3, [r3, #0]
 8016d44:	681a      	ldr	r2, [r3, #0]
 8016d46:	687b      	ldr	r3, [r7, #4]
 8016d48:	681b      	ldr	r3, [r3, #0]
 8016d4a:	f022 0204 	bic.w	r2, r2, #4
 8016d4e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8016d50:	687b      	ldr	r3, [r7, #4]
 8016d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016d54:	2208      	movs	r2, #8
 8016d56:	409a      	lsls	r2, r3
 8016d58:	693b      	ldr	r3, [r7, #16]
 8016d5a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8016d5c:	687b      	ldr	r3, [r7, #4]
 8016d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016d60:	f043 0201 	orr.w	r2, r3, #1
 8016d64:	687b      	ldr	r3, [r7, #4]
 8016d66:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8016d68:	687b      	ldr	r3, [r7, #4]
 8016d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016d6c:	2201      	movs	r2, #1
 8016d6e:	409a      	lsls	r2, r3
 8016d70:	68fb      	ldr	r3, [r7, #12]
 8016d72:	4013      	ands	r3, r2
 8016d74:	2b00      	cmp	r3, #0
 8016d76:	d012      	beq.n	8016d9e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8016d78:	687b      	ldr	r3, [r7, #4]
 8016d7a:	681b      	ldr	r3, [r3, #0]
 8016d7c:	695b      	ldr	r3, [r3, #20]
 8016d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016d82:	2b00      	cmp	r3, #0
 8016d84:	d00b      	beq.n	8016d9e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8016d86:	687b      	ldr	r3, [r7, #4]
 8016d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016d8a:	2201      	movs	r2, #1
 8016d8c:	409a      	lsls	r2, r3
 8016d8e:	693b      	ldr	r3, [r7, #16]
 8016d90:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8016d92:	687b      	ldr	r3, [r7, #4]
 8016d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016d96:	f043 0202 	orr.w	r2, r3, #2
 8016d9a:	687b      	ldr	r3, [r7, #4]
 8016d9c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8016d9e:	687b      	ldr	r3, [r7, #4]
 8016da0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016da2:	2204      	movs	r2, #4
 8016da4:	409a      	lsls	r2, r3
 8016da6:	68fb      	ldr	r3, [r7, #12]
 8016da8:	4013      	ands	r3, r2
 8016daa:	2b00      	cmp	r3, #0
 8016dac:	d012      	beq.n	8016dd4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8016dae:	687b      	ldr	r3, [r7, #4]
 8016db0:	681b      	ldr	r3, [r3, #0]
 8016db2:	681b      	ldr	r3, [r3, #0]
 8016db4:	f003 0302 	and.w	r3, r3, #2
 8016db8:	2b00      	cmp	r3, #0
 8016dba:	d00b      	beq.n	8016dd4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8016dbc:	687b      	ldr	r3, [r7, #4]
 8016dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016dc0:	2204      	movs	r2, #4
 8016dc2:	409a      	lsls	r2, r3
 8016dc4:	693b      	ldr	r3, [r7, #16]
 8016dc6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8016dc8:	687b      	ldr	r3, [r7, #4]
 8016dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016dcc:	f043 0204 	orr.w	r2, r3, #4
 8016dd0:	687b      	ldr	r3, [r7, #4]
 8016dd2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8016dd4:	687b      	ldr	r3, [r7, #4]
 8016dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016dd8:	2210      	movs	r2, #16
 8016dda:	409a      	lsls	r2, r3
 8016ddc:	68fb      	ldr	r3, [r7, #12]
 8016dde:	4013      	ands	r3, r2
 8016de0:	2b00      	cmp	r3, #0
 8016de2:	d043      	beq.n	8016e6c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8016de4:	687b      	ldr	r3, [r7, #4]
 8016de6:	681b      	ldr	r3, [r3, #0]
 8016de8:	681b      	ldr	r3, [r3, #0]
 8016dea:	f003 0308 	and.w	r3, r3, #8
 8016dee:	2b00      	cmp	r3, #0
 8016df0:	d03c      	beq.n	8016e6c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8016df2:	687b      	ldr	r3, [r7, #4]
 8016df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016df6:	2210      	movs	r2, #16
 8016df8:	409a      	lsls	r2, r3
 8016dfa:	693b      	ldr	r3, [r7, #16]
 8016dfc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8016dfe:	687b      	ldr	r3, [r7, #4]
 8016e00:	681b      	ldr	r3, [r3, #0]
 8016e02:	681b      	ldr	r3, [r3, #0]
 8016e04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8016e08:	2b00      	cmp	r3, #0
 8016e0a:	d018      	beq.n	8016e3e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8016e0c:	687b      	ldr	r3, [r7, #4]
 8016e0e:	681b      	ldr	r3, [r3, #0]
 8016e10:	681b      	ldr	r3, [r3, #0]
 8016e12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8016e16:	2b00      	cmp	r3, #0
 8016e18:	d108      	bne.n	8016e2c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8016e1a:	687b      	ldr	r3, [r7, #4]
 8016e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016e1e:	2b00      	cmp	r3, #0
 8016e20:	d024      	beq.n	8016e6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8016e22:	687b      	ldr	r3, [r7, #4]
 8016e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016e26:	6878      	ldr	r0, [r7, #4]
 8016e28:	4798      	blx	r3
 8016e2a:	e01f      	b.n	8016e6c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8016e2c:	687b      	ldr	r3, [r7, #4]
 8016e2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016e30:	2b00      	cmp	r3, #0
 8016e32:	d01b      	beq.n	8016e6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8016e34:	687b      	ldr	r3, [r7, #4]
 8016e36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016e38:	6878      	ldr	r0, [r7, #4]
 8016e3a:	4798      	blx	r3
 8016e3c:	e016      	b.n	8016e6c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8016e3e:	687b      	ldr	r3, [r7, #4]
 8016e40:	681b      	ldr	r3, [r3, #0]
 8016e42:	681b      	ldr	r3, [r3, #0]
 8016e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016e48:	2b00      	cmp	r3, #0
 8016e4a:	d107      	bne.n	8016e5c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8016e4c:	687b      	ldr	r3, [r7, #4]
 8016e4e:	681b      	ldr	r3, [r3, #0]
 8016e50:	681a      	ldr	r2, [r3, #0]
 8016e52:	687b      	ldr	r3, [r7, #4]
 8016e54:	681b      	ldr	r3, [r3, #0]
 8016e56:	f022 0208 	bic.w	r2, r2, #8
 8016e5a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8016e5c:	687b      	ldr	r3, [r7, #4]
 8016e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016e60:	2b00      	cmp	r3, #0
 8016e62:	d003      	beq.n	8016e6c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8016e64:	687b      	ldr	r3, [r7, #4]
 8016e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016e68:	6878      	ldr	r0, [r7, #4]
 8016e6a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8016e6c:	687b      	ldr	r3, [r7, #4]
 8016e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016e70:	2220      	movs	r2, #32
 8016e72:	409a      	lsls	r2, r3
 8016e74:	68fb      	ldr	r3, [r7, #12]
 8016e76:	4013      	ands	r3, r2
 8016e78:	2b00      	cmp	r3, #0
 8016e7a:	f000 808f 	beq.w	8016f9c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8016e7e:	687b      	ldr	r3, [r7, #4]
 8016e80:	681b      	ldr	r3, [r3, #0]
 8016e82:	681b      	ldr	r3, [r3, #0]
 8016e84:	f003 0310 	and.w	r3, r3, #16
 8016e88:	2b00      	cmp	r3, #0
 8016e8a:	f000 8087 	beq.w	8016f9c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8016e8e:	687b      	ldr	r3, [r7, #4]
 8016e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016e92:	2220      	movs	r2, #32
 8016e94:	409a      	lsls	r2, r3
 8016e96:	693b      	ldr	r3, [r7, #16]
 8016e98:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8016e9a:	687b      	ldr	r3, [r7, #4]
 8016e9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016ea0:	b2db      	uxtb	r3, r3
 8016ea2:	2b05      	cmp	r3, #5
 8016ea4:	d136      	bne.n	8016f14 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8016ea6:	687b      	ldr	r3, [r7, #4]
 8016ea8:	681b      	ldr	r3, [r3, #0]
 8016eaa:	681a      	ldr	r2, [r3, #0]
 8016eac:	687b      	ldr	r3, [r7, #4]
 8016eae:	681b      	ldr	r3, [r3, #0]
 8016eb0:	f022 0216 	bic.w	r2, r2, #22
 8016eb4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8016eb6:	687b      	ldr	r3, [r7, #4]
 8016eb8:	681b      	ldr	r3, [r3, #0]
 8016eba:	695a      	ldr	r2, [r3, #20]
 8016ebc:	687b      	ldr	r3, [r7, #4]
 8016ebe:	681b      	ldr	r3, [r3, #0]
 8016ec0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016ec4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8016ec6:	687b      	ldr	r3, [r7, #4]
 8016ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016eca:	2b00      	cmp	r3, #0
 8016ecc:	d103      	bne.n	8016ed6 <HAL_DMA_IRQHandler+0x1da>
 8016ece:	687b      	ldr	r3, [r7, #4]
 8016ed0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016ed2:	2b00      	cmp	r3, #0
 8016ed4:	d007      	beq.n	8016ee6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8016ed6:	687b      	ldr	r3, [r7, #4]
 8016ed8:	681b      	ldr	r3, [r3, #0]
 8016eda:	681a      	ldr	r2, [r3, #0]
 8016edc:	687b      	ldr	r3, [r7, #4]
 8016ede:	681b      	ldr	r3, [r3, #0]
 8016ee0:	f022 0208 	bic.w	r2, r2, #8
 8016ee4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8016ee6:	687b      	ldr	r3, [r7, #4]
 8016ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016eea:	223f      	movs	r2, #63	; 0x3f
 8016eec:	409a      	lsls	r2, r3
 8016eee:	693b      	ldr	r3, [r7, #16]
 8016ef0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8016ef2:	687b      	ldr	r3, [r7, #4]
 8016ef4:	2201      	movs	r2, #1
 8016ef6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8016efa:	687b      	ldr	r3, [r7, #4]
 8016efc:	2200      	movs	r2, #0
 8016efe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8016f02:	687b      	ldr	r3, [r7, #4]
 8016f04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016f06:	2b00      	cmp	r3, #0
 8016f08:	d07e      	beq.n	8017008 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8016f0a:	687b      	ldr	r3, [r7, #4]
 8016f0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016f0e:	6878      	ldr	r0, [r7, #4]
 8016f10:	4798      	blx	r3
        }
        return;
 8016f12:	e079      	b.n	8017008 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8016f14:	687b      	ldr	r3, [r7, #4]
 8016f16:	681b      	ldr	r3, [r3, #0]
 8016f18:	681b      	ldr	r3, [r3, #0]
 8016f1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8016f1e:	2b00      	cmp	r3, #0
 8016f20:	d01d      	beq.n	8016f5e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8016f22:	687b      	ldr	r3, [r7, #4]
 8016f24:	681b      	ldr	r3, [r3, #0]
 8016f26:	681b      	ldr	r3, [r3, #0]
 8016f28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8016f2c:	2b00      	cmp	r3, #0
 8016f2e:	d10d      	bne.n	8016f4c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8016f30:	687b      	ldr	r3, [r7, #4]
 8016f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016f34:	2b00      	cmp	r3, #0
 8016f36:	d031      	beq.n	8016f9c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8016f38:	687b      	ldr	r3, [r7, #4]
 8016f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016f3c:	6878      	ldr	r0, [r7, #4]
 8016f3e:	4798      	blx	r3
 8016f40:	e02c      	b.n	8016f9c <HAL_DMA_IRQHandler+0x2a0>
 8016f42:	bf00      	nop
 8016f44:	200001e0 	.word	0x200001e0
 8016f48:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8016f4c:	687b      	ldr	r3, [r7, #4]
 8016f4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016f50:	2b00      	cmp	r3, #0
 8016f52:	d023      	beq.n	8016f9c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8016f54:	687b      	ldr	r3, [r7, #4]
 8016f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016f58:	6878      	ldr	r0, [r7, #4]
 8016f5a:	4798      	blx	r3
 8016f5c:	e01e      	b.n	8016f9c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8016f5e:	687b      	ldr	r3, [r7, #4]
 8016f60:	681b      	ldr	r3, [r3, #0]
 8016f62:	681b      	ldr	r3, [r3, #0]
 8016f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016f68:	2b00      	cmp	r3, #0
 8016f6a:	d10f      	bne.n	8016f8c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8016f6c:	687b      	ldr	r3, [r7, #4]
 8016f6e:	681b      	ldr	r3, [r3, #0]
 8016f70:	681a      	ldr	r2, [r3, #0]
 8016f72:	687b      	ldr	r3, [r7, #4]
 8016f74:	681b      	ldr	r3, [r3, #0]
 8016f76:	f022 0210 	bic.w	r2, r2, #16
 8016f7a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8016f7c:	687b      	ldr	r3, [r7, #4]
 8016f7e:	2201      	movs	r2, #1
 8016f80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8016f84:	687b      	ldr	r3, [r7, #4]
 8016f86:	2200      	movs	r2, #0
 8016f88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8016f8c:	687b      	ldr	r3, [r7, #4]
 8016f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016f90:	2b00      	cmp	r3, #0
 8016f92:	d003      	beq.n	8016f9c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8016f94:	687b      	ldr	r3, [r7, #4]
 8016f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016f98:	6878      	ldr	r0, [r7, #4]
 8016f9a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8016f9c:	687b      	ldr	r3, [r7, #4]
 8016f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016fa0:	2b00      	cmp	r3, #0
 8016fa2:	d032      	beq.n	801700a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8016fa4:	687b      	ldr	r3, [r7, #4]
 8016fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016fa8:	f003 0301 	and.w	r3, r3, #1
 8016fac:	2b00      	cmp	r3, #0
 8016fae:	d022      	beq.n	8016ff6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8016fb0:	687b      	ldr	r3, [r7, #4]
 8016fb2:	2205      	movs	r2, #5
 8016fb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8016fb8:	687b      	ldr	r3, [r7, #4]
 8016fba:	681b      	ldr	r3, [r3, #0]
 8016fbc:	681a      	ldr	r2, [r3, #0]
 8016fbe:	687b      	ldr	r3, [r7, #4]
 8016fc0:	681b      	ldr	r3, [r3, #0]
 8016fc2:	f022 0201 	bic.w	r2, r2, #1
 8016fc6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8016fc8:	68bb      	ldr	r3, [r7, #8]
 8016fca:	3301      	adds	r3, #1
 8016fcc:	60bb      	str	r3, [r7, #8]
 8016fce:	697a      	ldr	r2, [r7, #20]
 8016fd0:	429a      	cmp	r2, r3
 8016fd2:	d307      	bcc.n	8016fe4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8016fd4:	687b      	ldr	r3, [r7, #4]
 8016fd6:	681b      	ldr	r3, [r3, #0]
 8016fd8:	681b      	ldr	r3, [r3, #0]
 8016fda:	f003 0301 	and.w	r3, r3, #1
 8016fde:	2b00      	cmp	r3, #0
 8016fe0:	d1f2      	bne.n	8016fc8 <HAL_DMA_IRQHandler+0x2cc>
 8016fe2:	e000      	b.n	8016fe6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8016fe4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8016fe6:	687b      	ldr	r3, [r7, #4]
 8016fe8:	2201      	movs	r2, #1
 8016fea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8016fee:	687b      	ldr	r3, [r7, #4]
 8016ff0:	2200      	movs	r2, #0
 8016ff2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8016ff6:	687b      	ldr	r3, [r7, #4]
 8016ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016ffa:	2b00      	cmp	r3, #0
 8016ffc:	d005      	beq.n	801700a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8016ffe:	687b      	ldr	r3, [r7, #4]
 8017000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017002:	6878      	ldr	r0, [r7, #4]
 8017004:	4798      	blx	r3
 8017006:	e000      	b.n	801700a <HAL_DMA_IRQHandler+0x30e>
        return;
 8017008:	bf00      	nop
    }
  }
}
 801700a:	3718      	adds	r7, #24
 801700c:	46bd      	mov	sp, r7
 801700e:	bd80      	pop	{r7, pc}

08017010 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8017010:	b480      	push	{r7}
 8017012:	b083      	sub	sp, #12
 8017014:	af00      	add	r7, sp, #0
 8017016:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8017018:	687b      	ldr	r3, [r7, #4]
 801701a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801701e:	b2db      	uxtb	r3, r3
}
 8017020:	4618      	mov	r0, r3
 8017022:	370c      	adds	r7, #12
 8017024:	46bd      	mov	sp, r7
 8017026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801702a:	4770      	bx	lr

0801702c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801702c:	b480      	push	{r7}
 801702e:	b085      	sub	sp, #20
 8017030:	af00      	add	r7, sp, #0
 8017032:	60f8      	str	r0, [r7, #12]
 8017034:	60b9      	str	r1, [r7, #8]
 8017036:	607a      	str	r2, [r7, #4]
 8017038:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 801703a:	68fb      	ldr	r3, [r7, #12]
 801703c:	681b      	ldr	r3, [r3, #0]
 801703e:	681a      	ldr	r2, [r3, #0]
 8017040:	68fb      	ldr	r3, [r7, #12]
 8017042:	681b      	ldr	r3, [r3, #0]
 8017044:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8017048:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 801704a:	68fb      	ldr	r3, [r7, #12]
 801704c:	681b      	ldr	r3, [r3, #0]
 801704e:	683a      	ldr	r2, [r7, #0]
 8017050:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8017052:	68fb      	ldr	r3, [r7, #12]
 8017054:	689b      	ldr	r3, [r3, #8]
 8017056:	2b40      	cmp	r3, #64	; 0x40
 8017058:	d108      	bne.n	801706c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 801705a:	68fb      	ldr	r3, [r7, #12]
 801705c:	681b      	ldr	r3, [r3, #0]
 801705e:	687a      	ldr	r2, [r7, #4]
 8017060:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8017062:	68fb      	ldr	r3, [r7, #12]
 8017064:	681b      	ldr	r3, [r3, #0]
 8017066:	68ba      	ldr	r2, [r7, #8]
 8017068:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 801706a:	e007      	b.n	801707c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 801706c:	68fb      	ldr	r3, [r7, #12]
 801706e:	681b      	ldr	r3, [r3, #0]
 8017070:	68ba      	ldr	r2, [r7, #8]
 8017072:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8017074:	68fb      	ldr	r3, [r7, #12]
 8017076:	681b      	ldr	r3, [r3, #0]
 8017078:	687a      	ldr	r2, [r7, #4]
 801707a:	60da      	str	r2, [r3, #12]
}
 801707c:	bf00      	nop
 801707e:	3714      	adds	r7, #20
 8017080:	46bd      	mov	sp, r7
 8017082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017086:	4770      	bx	lr

08017088 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8017088:	b480      	push	{r7}
 801708a:	b085      	sub	sp, #20
 801708c:	af00      	add	r7, sp, #0
 801708e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8017090:	687b      	ldr	r3, [r7, #4]
 8017092:	681b      	ldr	r3, [r3, #0]
 8017094:	b2db      	uxtb	r3, r3
 8017096:	3b10      	subs	r3, #16
 8017098:	4a14      	ldr	r2, [pc, #80]	; (80170ec <DMA_CalcBaseAndBitshift+0x64>)
 801709a:	fba2 2303 	umull	r2, r3, r2, r3
 801709e:	091b      	lsrs	r3, r3, #4
 80170a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80170a2:	4a13      	ldr	r2, [pc, #76]	; (80170f0 <DMA_CalcBaseAndBitshift+0x68>)
 80170a4:	68fb      	ldr	r3, [r7, #12]
 80170a6:	4413      	add	r3, r2
 80170a8:	781b      	ldrb	r3, [r3, #0]
 80170aa:	461a      	mov	r2, r3
 80170ac:	687b      	ldr	r3, [r7, #4]
 80170ae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80170b0:	68fb      	ldr	r3, [r7, #12]
 80170b2:	2b03      	cmp	r3, #3
 80170b4:	d909      	bls.n	80170ca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80170b6:	687b      	ldr	r3, [r7, #4]
 80170b8:	681b      	ldr	r3, [r3, #0]
 80170ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80170be:	f023 0303 	bic.w	r3, r3, #3
 80170c2:	1d1a      	adds	r2, r3, #4
 80170c4:	687b      	ldr	r3, [r7, #4]
 80170c6:	659a      	str	r2, [r3, #88]	; 0x58
 80170c8:	e007      	b.n	80170da <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80170ca:	687b      	ldr	r3, [r7, #4]
 80170cc:	681b      	ldr	r3, [r3, #0]
 80170ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80170d2:	f023 0303 	bic.w	r3, r3, #3
 80170d6:	687a      	ldr	r2, [r7, #4]
 80170d8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80170da:	687b      	ldr	r3, [r7, #4]
 80170dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80170de:	4618      	mov	r0, r3
 80170e0:	3714      	adds	r7, #20
 80170e2:	46bd      	mov	sp, r7
 80170e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170e8:	4770      	bx	lr
 80170ea:	bf00      	nop
 80170ec:	aaaaaaab 	.word	0xaaaaaaab
 80170f0:	08029f04 	.word	0x08029f04

080170f4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80170f4:	b480      	push	{r7}
 80170f6:	b085      	sub	sp, #20
 80170f8:	af00      	add	r7, sp, #0
 80170fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80170fc:	2300      	movs	r3, #0
 80170fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8017100:	687b      	ldr	r3, [r7, #4]
 8017102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017104:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8017106:	687b      	ldr	r3, [r7, #4]
 8017108:	699b      	ldr	r3, [r3, #24]
 801710a:	2b00      	cmp	r3, #0
 801710c:	d11f      	bne.n	801714e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 801710e:	68bb      	ldr	r3, [r7, #8]
 8017110:	2b03      	cmp	r3, #3
 8017112:	d856      	bhi.n	80171c2 <DMA_CheckFifoParam+0xce>
 8017114:	a201      	add	r2, pc, #4	; (adr r2, 801711c <DMA_CheckFifoParam+0x28>)
 8017116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801711a:	bf00      	nop
 801711c:	0801712d 	.word	0x0801712d
 8017120:	0801713f 	.word	0x0801713f
 8017124:	0801712d 	.word	0x0801712d
 8017128:	080171c3 	.word	0x080171c3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801712c:	687b      	ldr	r3, [r7, #4]
 801712e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017130:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8017134:	2b00      	cmp	r3, #0
 8017136:	d046      	beq.n	80171c6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8017138:	2301      	movs	r3, #1
 801713a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801713c:	e043      	b.n	80171c6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801713e:	687b      	ldr	r3, [r7, #4]
 8017140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017142:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8017146:	d140      	bne.n	80171ca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8017148:	2301      	movs	r3, #1
 801714a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801714c:	e03d      	b.n	80171ca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801714e:	687b      	ldr	r3, [r7, #4]
 8017150:	699b      	ldr	r3, [r3, #24]
 8017152:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8017156:	d121      	bne.n	801719c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8017158:	68bb      	ldr	r3, [r7, #8]
 801715a:	2b03      	cmp	r3, #3
 801715c:	d837      	bhi.n	80171ce <DMA_CheckFifoParam+0xda>
 801715e:	a201      	add	r2, pc, #4	; (adr r2, 8017164 <DMA_CheckFifoParam+0x70>)
 8017160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017164:	08017175 	.word	0x08017175
 8017168:	0801717b 	.word	0x0801717b
 801716c:	08017175 	.word	0x08017175
 8017170:	0801718d 	.word	0x0801718d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8017174:	2301      	movs	r3, #1
 8017176:	73fb      	strb	r3, [r7, #15]
      break;
 8017178:	e030      	b.n	80171dc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801717a:	687b      	ldr	r3, [r7, #4]
 801717c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801717e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8017182:	2b00      	cmp	r3, #0
 8017184:	d025      	beq.n	80171d2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8017186:	2301      	movs	r3, #1
 8017188:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801718a:	e022      	b.n	80171d2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801718c:	687b      	ldr	r3, [r7, #4]
 801718e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017190:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8017194:	d11f      	bne.n	80171d6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8017196:	2301      	movs	r3, #1
 8017198:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 801719a:	e01c      	b.n	80171d6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 801719c:	68bb      	ldr	r3, [r7, #8]
 801719e:	2b02      	cmp	r3, #2
 80171a0:	d903      	bls.n	80171aa <DMA_CheckFifoParam+0xb6>
 80171a2:	68bb      	ldr	r3, [r7, #8]
 80171a4:	2b03      	cmp	r3, #3
 80171a6:	d003      	beq.n	80171b0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80171a8:	e018      	b.n	80171dc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80171aa:	2301      	movs	r3, #1
 80171ac:	73fb      	strb	r3, [r7, #15]
      break;
 80171ae:	e015      	b.n	80171dc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80171b0:	687b      	ldr	r3, [r7, #4]
 80171b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80171b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80171b8:	2b00      	cmp	r3, #0
 80171ba:	d00e      	beq.n	80171da <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80171bc:	2301      	movs	r3, #1
 80171be:	73fb      	strb	r3, [r7, #15]
      break;
 80171c0:	e00b      	b.n	80171da <DMA_CheckFifoParam+0xe6>
      break;
 80171c2:	bf00      	nop
 80171c4:	e00a      	b.n	80171dc <DMA_CheckFifoParam+0xe8>
      break;
 80171c6:	bf00      	nop
 80171c8:	e008      	b.n	80171dc <DMA_CheckFifoParam+0xe8>
      break;
 80171ca:	bf00      	nop
 80171cc:	e006      	b.n	80171dc <DMA_CheckFifoParam+0xe8>
      break;
 80171ce:	bf00      	nop
 80171d0:	e004      	b.n	80171dc <DMA_CheckFifoParam+0xe8>
      break;
 80171d2:	bf00      	nop
 80171d4:	e002      	b.n	80171dc <DMA_CheckFifoParam+0xe8>
      break;   
 80171d6:	bf00      	nop
 80171d8:	e000      	b.n	80171dc <DMA_CheckFifoParam+0xe8>
      break;
 80171da:	bf00      	nop
    }
  } 
  
  return status; 
 80171dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80171de:	4618      	mov	r0, r3
 80171e0:	3714      	adds	r7, #20
 80171e2:	46bd      	mov	sp, r7
 80171e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171e8:	4770      	bx	lr
 80171ea:	bf00      	nop

080171ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80171ec:	b480      	push	{r7}
 80171ee:	b089      	sub	sp, #36	; 0x24
 80171f0:	af00      	add	r7, sp, #0
 80171f2:	6078      	str	r0, [r7, #4]
 80171f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80171f6:	2300      	movs	r3, #0
 80171f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80171fa:	2300      	movs	r3, #0
 80171fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80171fe:	2300      	movs	r3, #0
 8017200:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8017202:	2300      	movs	r3, #0
 8017204:	61fb      	str	r3, [r7, #28]
 8017206:	e159      	b.n	80174bc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8017208:	2201      	movs	r2, #1
 801720a:	69fb      	ldr	r3, [r7, #28]
 801720c:	fa02 f303 	lsl.w	r3, r2, r3
 8017210:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8017212:	683b      	ldr	r3, [r7, #0]
 8017214:	681b      	ldr	r3, [r3, #0]
 8017216:	697a      	ldr	r2, [r7, #20]
 8017218:	4013      	ands	r3, r2
 801721a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 801721c:	693a      	ldr	r2, [r7, #16]
 801721e:	697b      	ldr	r3, [r7, #20]
 8017220:	429a      	cmp	r2, r3
 8017222:	f040 8148 	bne.w	80174b6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8017226:	683b      	ldr	r3, [r7, #0]
 8017228:	685b      	ldr	r3, [r3, #4]
 801722a:	f003 0303 	and.w	r3, r3, #3
 801722e:	2b01      	cmp	r3, #1
 8017230:	d005      	beq.n	801723e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8017232:	683b      	ldr	r3, [r7, #0]
 8017234:	685b      	ldr	r3, [r3, #4]
 8017236:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801723a:	2b02      	cmp	r3, #2
 801723c:	d130      	bne.n	80172a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 801723e:	687b      	ldr	r3, [r7, #4]
 8017240:	689b      	ldr	r3, [r3, #8]
 8017242:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8017244:	69fb      	ldr	r3, [r7, #28]
 8017246:	005b      	lsls	r3, r3, #1
 8017248:	2203      	movs	r2, #3
 801724a:	fa02 f303 	lsl.w	r3, r2, r3
 801724e:	43db      	mvns	r3, r3
 8017250:	69ba      	ldr	r2, [r7, #24]
 8017252:	4013      	ands	r3, r2
 8017254:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8017256:	683b      	ldr	r3, [r7, #0]
 8017258:	68da      	ldr	r2, [r3, #12]
 801725a:	69fb      	ldr	r3, [r7, #28]
 801725c:	005b      	lsls	r3, r3, #1
 801725e:	fa02 f303 	lsl.w	r3, r2, r3
 8017262:	69ba      	ldr	r2, [r7, #24]
 8017264:	4313      	orrs	r3, r2
 8017266:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8017268:	687b      	ldr	r3, [r7, #4]
 801726a:	69ba      	ldr	r2, [r7, #24]
 801726c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801726e:	687b      	ldr	r3, [r7, #4]
 8017270:	685b      	ldr	r3, [r3, #4]
 8017272:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8017274:	2201      	movs	r2, #1
 8017276:	69fb      	ldr	r3, [r7, #28]
 8017278:	fa02 f303 	lsl.w	r3, r2, r3
 801727c:	43db      	mvns	r3, r3
 801727e:	69ba      	ldr	r2, [r7, #24]
 8017280:	4013      	ands	r3, r2
 8017282:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8017284:	683b      	ldr	r3, [r7, #0]
 8017286:	685b      	ldr	r3, [r3, #4]
 8017288:	091b      	lsrs	r3, r3, #4
 801728a:	f003 0201 	and.w	r2, r3, #1
 801728e:	69fb      	ldr	r3, [r7, #28]
 8017290:	fa02 f303 	lsl.w	r3, r2, r3
 8017294:	69ba      	ldr	r2, [r7, #24]
 8017296:	4313      	orrs	r3, r2
 8017298:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801729a:	687b      	ldr	r3, [r7, #4]
 801729c:	69ba      	ldr	r2, [r7, #24]
 801729e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80172a0:	683b      	ldr	r3, [r7, #0]
 80172a2:	685b      	ldr	r3, [r3, #4]
 80172a4:	f003 0303 	and.w	r3, r3, #3
 80172a8:	2b03      	cmp	r3, #3
 80172aa:	d017      	beq.n	80172dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80172ac:	687b      	ldr	r3, [r7, #4]
 80172ae:	68db      	ldr	r3, [r3, #12]
 80172b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80172b2:	69fb      	ldr	r3, [r7, #28]
 80172b4:	005b      	lsls	r3, r3, #1
 80172b6:	2203      	movs	r2, #3
 80172b8:	fa02 f303 	lsl.w	r3, r2, r3
 80172bc:	43db      	mvns	r3, r3
 80172be:	69ba      	ldr	r2, [r7, #24]
 80172c0:	4013      	ands	r3, r2
 80172c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80172c4:	683b      	ldr	r3, [r7, #0]
 80172c6:	689a      	ldr	r2, [r3, #8]
 80172c8:	69fb      	ldr	r3, [r7, #28]
 80172ca:	005b      	lsls	r3, r3, #1
 80172cc:	fa02 f303 	lsl.w	r3, r2, r3
 80172d0:	69ba      	ldr	r2, [r7, #24]
 80172d2:	4313      	orrs	r3, r2
 80172d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80172d6:	687b      	ldr	r3, [r7, #4]
 80172d8:	69ba      	ldr	r2, [r7, #24]
 80172da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80172dc:	683b      	ldr	r3, [r7, #0]
 80172de:	685b      	ldr	r3, [r3, #4]
 80172e0:	f003 0303 	and.w	r3, r3, #3
 80172e4:	2b02      	cmp	r3, #2
 80172e6:	d123      	bne.n	8017330 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80172e8:	69fb      	ldr	r3, [r7, #28]
 80172ea:	08da      	lsrs	r2, r3, #3
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	3208      	adds	r2, #8
 80172f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80172f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80172f6:	69fb      	ldr	r3, [r7, #28]
 80172f8:	f003 0307 	and.w	r3, r3, #7
 80172fc:	009b      	lsls	r3, r3, #2
 80172fe:	220f      	movs	r2, #15
 8017300:	fa02 f303 	lsl.w	r3, r2, r3
 8017304:	43db      	mvns	r3, r3
 8017306:	69ba      	ldr	r2, [r7, #24]
 8017308:	4013      	ands	r3, r2
 801730a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 801730c:	683b      	ldr	r3, [r7, #0]
 801730e:	691a      	ldr	r2, [r3, #16]
 8017310:	69fb      	ldr	r3, [r7, #28]
 8017312:	f003 0307 	and.w	r3, r3, #7
 8017316:	009b      	lsls	r3, r3, #2
 8017318:	fa02 f303 	lsl.w	r3, r2, r3
 801731c:	69ba      	ldr	r2, [r7, #24]
 801731e:	4313      	orrs	r3, r2
 8017320:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8017322:	69fb      	ldr	r3, [r7, #28]
 8017324:	08da      	lsrs	r2, r3, #3
 8017326:	687b      	ldr	r3, [r7, #4]
 8017328:	3208      	adds	r2, #8
 801732a:	69b9      	ldr	r1, [r7, #24]
 801732c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8017330:	687b      	ldr	r3, [r7, #4]
 8017332:	681b      	ldr	r3, [r3, #0]
 8017334:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8017336:	69fb      	ldr	r3, [r7, #28]
 8017338:	005b      	lsls	r3, r3, #1
 801733a:	2203      	movs	r2, #3
 801733c:	fa02 f303 	lsl.w	r3, r2, r3
 8017340:	43db      	mvns	r3, r3
 8017342:	69ba      	ldr	r2, [r7, #24]
 8017344:	4013      	ands	r3, r2
 8017346:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8017348:	683b      	ldr	r3, [r7, #0]
 801734a:	685b      	ldr	r3, [r3, #4]
 801734c:	f003 0203 	and.w	r2, r3, #3
 8017350:	69fb      	ldr	r3, [r7, #28]
 8017352:	005b      	lsls	r3, r3, #1
 8017354:	fa02 f303 	lsl.w	r3, r2, r3
 8017358:	69ba      	ldr	r2, [r7, #24]
 801735a:	4313      	orrs	r3, r2
 801735c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801735e:	687b      	ldr	r3, [r7, #4]
 8017360:	69ba      	ldr	r2, [r7, #24]
 8017362:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8017364:	683b      	ldr	r3, [r7, #0]
 8017366:	685b      	ldr	r3, [r3, #4]
 8017368:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801736c:	2b00      	cmp	r3, #0
 801736e:	f000 80a2 	beq.w	80174b6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8017372:	2300      	movs	r3, #0
 8017374:	60fb      	str	r3, [r7, #12]
 8017376:	4b57      	ldr	r3, [pc, #348]	; (80174d4 <HAL_GPIO_Init+0x2e8>)
 8017378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801737a:	4a56      	ldr	r2, [pc, #344]	; (80174d4 <HAL_GPIO_Init+0x2e8>)
 801737c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8017380:	6453      	str	r3, [r2, #68]	; 0x44
 8017382:	4b54      	ldr	r3, [pc, #336]	; (80174d4 <HAL_GPIO_Init+0x2e8>)
 8017384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017386:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801738a:	60fb      	str	r3, [r7, #12]
 801738c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801738e:	4a52      	ldr	r2, [pc, #328]	; (80174d8 <HAL_GPIO_Init+0x2ec>)
 8017390:	69fb      	ldr	r3, [r7, #28]
 8017392:	089b      	lsrs	r3, r3, #2
 8017394:	3302      	adds	r3, #2
 8017396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801739a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 801739c:	69fb      	ldr	r3, [r7, #28]
 801739e:	f003 0303 	and.w	r3, r3, #3
 80173a2:	009b      	lsls	r3, r3, #2
 80173a4:	220f      	movs	r2, #15
 80173a6:	fa02 f303 	lsl.w	r3, r2, r3
 80173aa:	43db      	mvns	r3, r3
 80173ac:	69ba      	ldr	r2, [r7, #24]
 80173ae:	4013      	ands	r3, r2
 80173b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80173b2:	687b      	ldr	r3, [r7, #4]
 80173b4:	4a49      	ldr	r2, [pc, #292]	; (80174dc <HAL_GPIO_Init+0x2f0>)
 80173b6:	4293      	cmp	r3, r2
 80173b8:	d019      	beq.n	80173ee <HAL_GPIO_Init+0x202>
 80173ba:	687b      	ldr	r3, [r7, #4]
 80173bc:	4a48      	ldr	r2, [pc, #288]	; (80174e0 <HAL_GPIO_Init+0x2f4>)
 80173be:	4293      	cmp	r3, r2
 80173c0:	d013      	beq.n	80173ea <HAL_GPIO_Init+0x1fe>
 80173c2:	687b      	ldr	r3, [r7, #4]
 80173c4:	4a47      	ldr	r2, [pc, #284]	; (80174e4 <HAL_GPIO_Init+0x2f8>)
 80173c6:	4293      	cmp	r3, r2
 80173c8:	d00d      	beq.n	80173e6 <HAL_GPIO_Init+0x1fa>
 80173ca:	687b      	ldr	r3, [r7, #4]
 80173cc:	4a46      	ldr	r2, [pc, #280]	; (80174e8 <HAL_GPIO_Init+0x2fc>)
 80173ce:	4293      	cmp	r3, r2
 80173d0:	d007      	beq.n	80173e2 <HAL_GPIO_Init+0x1f6>
 80173d2:	687b      	ldr	r3, [r7, #4]
 80173d4:	4a45      	ldr	r2, [pc, #276]	; (80174ec <HAL_GPIO_Init+0x300>)
 80173d6:	4293      	cmp	r3, r2
 80173d8:	d101      	bne.n	80173de <HAL_GPIO_Init+0x1f2>
 80173da:	2304      	movs	r3, #4
 80173dc:	e008      	b.n	80173f0 <HAL_GPIO_Init+0x204>
 80173de:	2307      	movs	r3, #7
 80173e0:	e006      	b.n	80173f0 <HAL_GPIO_Init+0x204>
 80173e2:	2303      	movs	r3, #3
 80173e4:	e004      	b.n	80173f0 <HAL_GPIO_Init+0x204>
 80173e6:	2302      	movs	r3, #2
 80173e8:	e002      	b.n	80173f0 <HAL_GPIO_Init+0x204>
 80173ea:	2301      	movs	r3, #1
 80173ec:	e000      	b.n	80173f0 <HAL_GPIO_Init+0x204>
 80173ee:	2300      	movs	r3, #0
 80173f0:	69fa      	ldr	r2, [r7, #28]
 80173f2:	f002 0203 	and.w	r2, r2, #3
 80173f6:	0092      	lsls	r2, r2, #2
 80173f8:	4093      	lsls	r3, r2
 80173fa:	69ba      	ldr	r2, [r7, #24]
 80173fc:	4313      	orrs	r3, r2
 80173fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8017400:	4935      	ldr	r1, [pc, #212]	; (80174d8 <HAL_GPIO_Init+0x2ec>)
 8017402:	69fb      	ldr	r3, [r7, #28]
 8017404:	089b      	lsrs	r3, r3, #2
 8017406:	3302      	adds	r3, #2
 8017408:	69ba      	ldr	r2, [r7, #24]
 801740a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801740e:	4b38      	ldr	r3, [pc, #224]	; (80174f0 <HAL_GPIO_Init+0x304>)
 8017410:	689b      	ldr	r3, [r3, #8]
 8017412:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8017414:	693b      	ldr	r3, [r7, #16]
 8017416:	43db      	mvns	r3, r3
 8017418:	69ba      	ldr	r2, [r7, #24]
 801741a:	4013      	ands	r3, r2
 801741c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801741e:	683b      	ldr	r3, [r7, #0]
 8017420:	685b      	ldr	r3, [r3, #4]
 8017422:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8017426:	2b00      	cmp	r3, #0
 8017428:	d003      	beq.n	8017432 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 801742a:	69ba      	ldr	r2, [r7, #24]
 801742c:	693b      	ldr	r3, [r7, #16]
 801742e:	4313      	orrs	r3, r2
 8017430:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8017432:	4a2f      	ldr	r2, [pc, #188]	; (80174f0 <HAL_GPIO_Init+0x304>)
 8017434:	69bb      	ldr	r3, [r7, #24]
 8017436:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8017438:	4b2d      	ldr	r3, [pc, #180]	; (80174f0 <HAL_GPIO_Init+0x304>)
 801743a:	68db      	ldr	r3, [r3, #12]
 801743c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801743e:	693b      	ldr	r3, [r7, #16]
 8017440:	43db      	mvns	r3, r3
 8017442:	69ba      	ldr	r2, [r7, #24]
 8017444:	4013      	ands	r3, r2
 8017446:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8017448:	683b      	ldr	r3, [r7, #0]
 801744a:	685b      	ldr	r3, [r3, #4]
 801744c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8017450:	2b00      	cmp	r3, #0
 8017452:	d003      	beq.n	801745c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8017454:	69ba      	ldr	r2, [r7, #24]
 8017456:	693b      	ldr	r3, [r7, #16]
 8017458:	4313      	orrs	r3, r2
 801745a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 801745c:	4a24      	ldr	r2, [pc, #144]	; (80174f0 <HAL_GPIO_Init+0x304>)
 801745e:	69bb      	ldr	r3, [r7, #24]
 8017460:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8017462:	4b23      	ldr	r3, [pc, #140]	; (80174f0 <HAL_GPIO_Init+0x304>)
 8017464:	685b      	ldr	r3, [r3, #4]
 8017466:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8017468:	693b      	ldr	r3, [r7, #16]
 801746a:	43db      	mvns	r3, r3
 801746c:	69ba      	ldr	r2, [r7, #24]
 801746e:	4013      	ands	r3, r2
 8017470:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8017472:	683b      	ldr	r3, [r7, #0]
 8017474:	685b      	ldr	r3, [r3, #4]
 8017476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801747a:	2b00      	cmp	r3, #0
 801747c:	d003      	beq.n	8017486 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 801747e:	69ba      	ldr	r2, [r7, #24]
 8017480:	693b      	ldr	r3, [r7, #16]
 8017482:	4313      	orrs	r3, r2
 8017484:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8017486:	4a1a      	ldr	r2, [pc, #104]	; (80174f0 <HAL_GPIO_Init+0x304>)
 8017488:	69bb      	ldr	r3, [r7, #24]
 801748a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 801748c:	4b18      	ldr	r3, [pc, #96]	; (80174f0 <HAL_GPIO_Init+0x304>)
 801748e:	681b      	ldr	r3, [r3, #0]
 8017490:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8017492:	693b      	ldr	r3, [r7, #16]
 8017494:	43db      	mvns	r3, r3
 8017496:	69ba      	ldr	r2, [r7, #24]
 8017498:	4013      	ands	r3, r2
 801749a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801749c:	683b      	ldr	r3, [r7, #0]
 801749e:	685b      	ldr	r3, [r3, #4]
 80174a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80174a4:	2b00      	cmp	r3, #0
 80174a6:	d003      	beq.n	80174b0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80174a8:	69ba      	ldr	r2, [r7, #24]
 80174aa:	693b      	ldr	r3, [r7, #16]
 80174ac:	4313      	orrs	r3, r2
 80174ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80174b0:	4a0f      	ldr	r2, [pc, #60]	; (80174f0 <HAL_GPIO_Init+0x304>)
 80174b2:	69bb      	ldr	r3, [r7, #24]
 80174b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80174b6:	69fb      	ldr	r3, [r7, #28]
 80174b8:	3301      	adds	r3, #1
 80174ba:	61fb      	str	r3, [r7, #28]
 80174bc:	69fb      	ldr	r3, [r7, #28]
 80174be:	2b0f      	cmp	r3, #15
 80174c0:	f67f aea2 	bls.w	8017208 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80174c4:	bf00      	nop
 80174c6:	bf00      	nop
 80174c8:	3724      	adds	r7, #36	; 0x24
 80174ca:	46bd      	mov	sp, r7
 80174cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174d0:	4770      	bx	lr
 80174d2:	bf00      	nop
 80174d4:	40023800 	.word	0x40023800
 80174d8:	40013800 	.word	0x40013800
 80174dc:	40020000 	.word	0x40020000
 80174e0:	40020400 	.word	0x40020400
 80174e4:	40020800 	.word	0x40020800
 80174e8:	40020c00 	.word	0x40020c00
 80174ec:	40021000 	.word	0x40021000
 80174f0:	40013c00 	.word	0x40013c00

080174f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80174f4:	b480      	push	{r7}
 80174f6:	b085      	sub	sp, #20
 80174f8:	af00      	add	r7, sp, #0
 80174fa:	6078      	str	r0, [r7, #4]
 80174fc:	460b      	mov	r3, r1
 80174fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8017500:	687b      	ldr	r3, [r7, #4]
 8017502:	691a      	ldr	r2, [r3, #16]
 8017504:	887b      	ldrh	r3, [r7, #2]
 8017506:	4013      	ands	r3, r2
 8017508:	2b00      	cmp	r3, #0
 801750a:	d002      	beq.n	8017512 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 801750c:	2301      	movs	r3, #1
 801750e:	73fb      	strb	r3, [r7, #15]
 8017510:	e001      	b.n	8017516 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8017512:	2300      	movs	r3, #0
 8017514:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8017516:	7bfb      	ldrb	r3, [r7, #15]
}
 8017518:	4618      	mov	r0, r3
 801751a:	3714      	adds	r7, #20
 801751c:	46bd      	mov	sp, r7
 801751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017522:	4770      	bx	lr

08017524 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8017524:	b480      	push	{r7}
 8017526:	b083      	sub	sp, #12
 8017528:	af00      	add	r7, sp, #0
 801752a:	6078      	str	r0, [r7, #4]
 801752c:	460b      	mov	r3, r1
 801752e:	807b      	strh	r3, [r7, #2]
 8017530:	4613      	mov	r3, r2
 8017532:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8017534:	787b      	ldrb	r3, [r7, #1]
 8017536:	2b00      	cmp	r3, #0
 8017538:	d003      	beq.n	8017542 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801753a:	887a      	ldrh	r2, [r7, #2]
 801753c:	687b      	ldr	r3, [r7, #4]
 801753e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8017540:	e003      	b.n	801754a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8017542:	887b      	ldrh	r3, [r7, #2]
 8017544:	041a      	lsls	r2, r3, #16
 8017546:	687b      	ldr	r3, [r7, #4]
 8017548:	619a      	str	r2, [r3, #24]
}
 801754a:	bf00      	nop
 801754c:	370c      	adds	r7, #12
 801754e:	46bd      	mov	sp, r7
 8017550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017554:	4770      	bx	lr
	...

08017558 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8017558:	b580      	push	{r7, lr}
 801755a:	b082      	sub	sp, #8
 801755c:	af00      	add	r7, sp, #0
 801755e:	4603      	mov	r3, r0
 8017560:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8017562:	4b08      	ldr	r3, [pc, #32]	; (8017584 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8017564:	695a      	ldr	r2, [r3, #20]
 8017566:	88fb      	ldrh	r3, [r7, #6]
 8017568:	4013      	ands	r3, r2
 801756a:	2b00      	cmp	r3, #0
 801756c:	d006      	beq.n	801757c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 801756e:	4a05      	ldr	r2, [pc, #20]	; (8017584 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8017570:	88fb      	ldrh	r3, [r7, #6]
 8017572:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8017574:	88fb      	ldrh	r3, [r7, #6]
 8017576:	4618      	mov	r0, r3
 8017578:	f7ec fdac 	bl	80040d4 <HAL_GPIO_EXTI_Callback>
  }
}
 801757c:	bf00      	nop
 801757e:	3708      	adds	r7, #8
 8017580:	46bd      	mov	sp, r7
 8017582:	bd80      	pop	{r7, pc}
 8017584:	40013c00 	.word	0x40013c00

08017588 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8017588:	b580      	push	{r7, lr}
 801758a:	b084      	sub	sp, #16
 801758c:	af00      	add	r7, sp, #0
 801758e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8017590:	687b      	ldr	r3, [r7, #4]
 8017592:	2b00      	cmp	r3, #0
 8017594:	d101      	bne.n	801759a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8017596:	2301      	movs	r3, #1
 8017598:	e12b      	b.n	80177f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801759a:	687b      	ldr	r3, [r7, #4]
 801759c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80175a0:	b2db      	uxtb	r3, r3
 80175a2:	2b00      	cmp	r3, #0
 80175a4:	d106      	bne.n	80175b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80175a6:	687b      	ldr	r3, [r7, #4]
 80175a8:	2200      	movs	r2, #0
 80175aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80175ae:	6878      	ldr	r0, [r7, #4]
 80175b0:	f7fe fcbc 	bl	8015f2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80175b4:	687b      	ldr	r3, [r7, #4]
 80175b6:	2224      	movs	r2, #36	; 0x24
 80175b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80175bc:	687b      	ldr	r3, [r7, #4]
 80175be:	681b      	ldr	r3, [r3, #0]
 80175c0:	681a      	ldr	r2, [r3, #0]
 80175c2:	687b      	ldr	r3, [r7, #4]
 80175c4:	681b      	ldr	r3, [r3, #0]
 80175c6:	f022 0201 	bic.w	r2, r2, #1
 80175ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80175cc:	687b      	ldr	r3, [r7, #4]
 80175ce:	681b      	ldr	r3, [r3, #0]
 80175d0:	681a      	ldr	r2, [r3, #0]
 80175d2:	687b      	ldr	r3, [r7, #4]
 80175d4:	681b      	ldr	r3, [r3, #0]
 80175d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80175da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80175dc:	687b      	ldr	r3, [r7, #4]
 80175de:	681b      	ldr	r3, [r3, #0]
 80175e0:	681a      	ldr	r2, [r3, #0]
 80175e2:	687b      	ldr	r3, [r7, #4]
 80175e4:	681b      	ldr	r3, [r3, #0]
 80175e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80175ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80175ec:	f003 fa9a 	bl	801ab24 <HAL_RCC_GetPCLK1Freq>
 80175f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80175f2:	687b      	ldr	r3, [r7, #4]
 80175f4:	685b      	ldr	r3, [r3, #4]
 80175f6:	4a81      	ldr	r2, [pc, #516]	; (80177fc <HAL_I2C_Init+0x274>)
 80175f8:	4293      	cmp	r3, r2
 80175fa:	d807      	bhi.n	801760c <HAL_I2C_Init+0x84>
 80175fc:	68fb      	ldr	r3, [r7, #12]
 80175fe:	4a80      	ldr	r2, [pc, #512]	; (8017800 <HAL_I2C_Init+0x278>)
 8017600:	4293      	cmp	r3, r2
 8017602:	bf94      	ite	ls
 8017604:	2301      	movls	r3, #1
 8017606:	2300      	movhi	r3, #0
 8017608:	b2db      	uxtb	r3, r3
 801760a:	e006      	b.n	801761a <HAL_I2C_Init+0x92>
 801760c:	68fb      	ldr	r3, [r7, #12]
 801760e:	4a7d      	ldr	r2, [pc, #500]	; (8017804 <HAL_I2C_Init+0x27c>)
 8017610:	4293      	cmp	r3, r2
 8017612:	bf94      	ite	ls
 8017614:	2301      	movls	r3, #1
 8017616:	2300      	movhi	r3, #0
 8017618:	b2db      	uxtb	r3, r3
 801761a:	2b00      	cmp	r3, #0
 801761c:	d001      	beq.n	8017622 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 801761e:	2301      	movs	r3, #1
 8017620:	e0e7      	b.n	80177f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8017622:	68fb      	ldr	r3, [r7, #12]
 8017624:	4a78      	ldr	r2, [pc, #480]	; (8017808 <HAL_I2C_Init+0x280>)
 8017626:	fba2 2303 	umull	r2, r3, r2, r3
 801762a:	0c9b      	lsrs	r3, r3, #18
 801762c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 801762e:	687b      	ldr	r3, [r7, #4]
 8017630:	681b      	ldr	r3, [r3, #0]
 8017632:	685b      	ldr	r3, [r3, #4]
 8017634:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8017638:	687b      	ldr	r3, [r7, #4]
 801763a:	681b      	ldr	r3, [r3, #0]
 801763c:	68ba      	ldr	r2, [r7, #8]
 801763e:	430a      	orrs	r2, r1
 8017640:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8017642:	687b      	ldr	r3, [r7, #4]
 8017644:	681b      	ldr	r3, [r3, #0]
 8017646:	6a1b      	ldr	r3, [r3, #32]
 8017648:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 801764c:	687b      	ldr	r3, [r7, #4]
 801764e:	685b      	ldr	r3, [r3, #4]
 8017650:	4a6a      	ldr	r2, [pc, #424]	; (80177fc <HAL_I2C_Init+0x274>)
 8017652:	4293      	cmp	r3, r2
 8017654:	d802      	bhi.n	801765c <HAL_I2C_Init+0xd4>
 8017656:	68bb      	ldr	r3, [r7, #8]
 8017658:	3301      	adds	r3, #1
 801765a:	e009      	b.n	8017670 <HAL_I2C_Init+0xe8>
 801765c:	68bb      	ldr	r3, [r7, #8]
 801765e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8017662:	fb02 f303 	mul.w	r3, r2, r3
 8017666:	4a69      	ldr	r2, [pc, #420]	; (801780c <HAL_I2C_Init+0x284>)
 8017668:	fba2 2303 	umull	r2, r3, r2, r3
 801766c:	099b      	lsrs	r3, r3, #6
 801766e:	3301      	adds	r3, #1
 8017670:	687a      	ldr	r2, [r7, #4]
 8017672:	6812      	ldr	r2, [r2, #0]
 8017674:	430b      	orrs	r3, r1
 8017676:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8017678:	687b      	ldr	r3, [r7, #4]
 801767a:	681b      	ldr	r3, [r3, #0]
 801767c:	69db      	ldr	r3, [r3, #28]
 801767e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8017682:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8017686:	687b      	ldr	r3, [r7, #4]
 8017688:	685b      	ldr	r3, [r3, #4]
 801768a:	495c      	ldr	r1, [pc, #368]	; (80177fc <HAL_I2C_Init+0x274>)
 801768c:	428b      	cmp	r3, r1
 801768e:	d819      	bhi.n	80176c4 <HAL_I2C_Init+0x13c>
 8017690:	68fb      	ldr	r3, [r7, #12]
 8017692:	1e59      	subs	r1, r3, #1
 8017694:	687b      	ldr	r3, [r7, #4]
 8017696:	685b      	ldr	r3, [r3, #4]
 8017698:	005b      	lsls	r3, r3, #1
 801769a:	fbb1 f3f3 	udiv	r3, r1, r3
 801769e:	1c59      	adds	r1, r3, #1
 80176a0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80176a4:	400b      	ands	r3, r1
 80176a6:	2b00      	cmp	r3, #0
 80176a8:	d00a      	beq.n	80176c0 <HAL_I2C_Init+0x138>
 80176aa:	68fb      	ldr	r3, [r7, #12]
 80176ac:	1e59      	subs	r1, r3, #1
 80176ae:	687b      	ldr	r3, [r7, #4]
 80176b0:	685b      	ldr	r3, [r3, #4]
 80176b2:	005b      	lsls	r3, r3, #1
 80176b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80176b8:	3301      	adds	r3, #1
 80176ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80176be:	e051      	b.n	8017764 <HAL_I2C_Init+0x1dc>
 80176c0:	2304      	movs	r3, #4
 80176c2:	e04f      	b.n	8017764 <HAL_I2C_Init+0x1dc>
 80176c4:	687b      	ldr	r3, [r7, #4]
 80176c6:	689b      	ldr	r3, [r3, #8]
 80176c8:	2b00      	cmp	r3, #0
 80176ca:	d111      	bne.n	80176f0 <HAL_I2C_Init+0x168>
 80176cc:	68fb      	ldr	r3, [r7, #12]
 80176ce:	1e58      	subs	r0, r3, #1
 80176d0:	687b      	ldr	r3, [r7, #4]
 80176d2:	6859      	ldr	r1, [r3, #4]
 80176d4:	460b      	mov	r3, r1
 80176d6:	005b      	lsls	r3, r3, #1
 80176d8:	440b      	add	r3, r1
 80176da:	fbb0 f3f3 	udiv	r3, r0, r3
 80176de:	3301      	adds	r3, #1
 80176e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80176e4:	2b00      	cmp	r3, #0
 80176e6:	bf0c      	ite	eq
 80176e8:	2301      	moveq	r3, #1
 80176ea:	2300      	movne	r3, #0
 80176ec:	b2db      	uxtb	r3, r3
 80176ee:	e012      	b.n	8017716 <HAL_I2C_Init+0x18e>
 80176f0:	68fb      	ldr	r3, [r7, #12]
 80176f2:	1e58      	subs	r0, r3, #1
 80176f4:	687b      	ldr	r3, [r7, #4]
 80176f6:	6859      	ldr	r1, [r3, #4]
 80176f8:	460b      	mov	r3, r1
 80176fa:	009b      	lsls	r3, r3, #2
 80176fc:	440b      	add	r3, r1
 80176fe:	0099      	lsls	r1, r3, #2
 8017700:	440b      	add	r3, r1
 8017702:	fbb0 f3f3 	udiv	r3, r0, r3
 8017706:	3301      	adds	r3, #1
 8017708:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801770c:	2b00      	cmp	r3, #0
 801770e:	bf0c      	ite	eq
 8017710:	2301      	moveq	r3, #1
 8017712:	2300      	movne	r3, #0
 8017714:	b2db      	uxtb	r3, r3
 8017716:	2b00      	cmp	r3, #0
 8017718:	d001      	beq.n	801771e <HAL_I2C_Init+0x196>
 801771a:	2301      	movs	r3, #1
 801771c:	e022      	b.n	8017764 <HAL_I2C_Init+0x1dc>
 801771e:	687b      	ldr	r3, [r7, #4]
 8017720:	689b      	ldr	r3, [r3, #8]
 8017722:	2b00      	cmp	r3, #0
 8017724:	d10e      	bne.n	8017744 <HAL_I2C_Init+0x1bc>
 8017726:	68fb      	ldr	r3, [r7, #12]
 8017728:	1e58      	subs	r0, r3, #1
 801772a:	687b      	ldr	r3, [r7, #4]
 801772c:	6859      	ldr	r1, [r3, #4]
 801772e:	460b      	mov	r3, r1
 8017730:	005b      	lsls	r3, r3, #1
 8017732:	440b      	add	r3, r1
 8017734:	fbb0 f3f3 	udiv	r3, r0, r3
 8017738:	3301      	adds	r3, #1
 801773a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801773e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8017742:	e00f      	b.n	8017764 <HAL_I2C_Init+0x1dc>
 8017744:	68fb      	ldr	r3, [r7, #12]
 8017746:	1e58      	subs	r0, r3, #1
 8017748:	687b      	ldr	r3, [r7, #4]
 801774a:	6859      	ldr	r1, [r3, #4]
 801774c:	460b      	mov	r3, r1
 801774e:	009b      	lsls	r3, r3, #2
 8017750:	440b      	add	r3, r1
 8017752:	0099      	lsls	r1, r3, #2
 8017754:	440b      	add	r3, r1
 8017756:	fbb0 f3f3 	udiv	r3, r0, r3
 801775a:	3301      	adds	r3, #1
 801775c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017760:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8017764:	6879      	ldr	r1, [r7, #4]
 8017766:	6809      	ldr	r1, [r1, #0]
 8017768:	4313      	orrs	r3, r2
 801776a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 801776c:	687b      	ldr	r3, [r7, #4]
 801776e:	681b      	ldr	r3, [r3, #0]
 8017770:	681b      	ldr	r3, [r3, #0]
 8017772:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8017776:	687b      	ldr	r3, [r7, #4]
 8017778:	69da      	ldr	r2, [r3, #28]
 801777a:	687b      	ldr	r3, [r7, #4]
 801777c:	6a1b      	ldr	r3, [r3, #32]
 801777e:	431a      	orrs	r2, r3
 8017780:	687b      	ldr	r3, [r7, #4]
 8017782:	681b      	ldr	r3, [r3, #0]
 8017784:	430a      	orrs	r2, r1
 8017786:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8017788:	687b      	ldr	r3, [r7, #4]
 801778a:	681b      	ldr	r3, [r3, #0]
 801778c:	689b      	ldr	r3, [r3, #8]
 801778e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8017792:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8017796:	687a      	ldr	r2, [r7, #4]
 8017798:	6911      	ldr	r1, [r2, #16]
 801779a:	687a      	ldr	r2, [r7, #4]
 801779c:	68d2      	ldr	r2, [r2, #12]
 801779e:	4311      	orrs	r1, r2
 80177a0:	687a      	ldr	r2, [r7, #4]
 80177a2:	6812      	ldr	r2, [r2, #0]
 80177a4:	430b      	orrs	r3, r1
 80177a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80177a8:	687b      	ldr	r3, [r7, #4]
 80177aa:	681b      	ldr	r3, [r3, #0]
 80177ac:	68db      	ldr	r3, [r3, #12]
 80177ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80177b2:	687b      	ldr	r3, [r7, #4]
 80177b4:	695a      	ldr	r2, [r3, #20]
 80177b6:	687b      	ldr	r3, [r7, #4]
 80177b8:	699b      	ldr	r3, [r3, #24]
 80177ba:	431a      	orrs	r2, r3
 80177bc:	687b      	ldr	r3, [r7, #4]
 80177be:	681b      	ldr	r3, [r3, #0]
 80177c0:	430a      	orrs	r2, r1
 80177c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80177c4:	687b      	ldr	r3, [r7, #4]
 80177c6:	681b      	ldr	r3, [r3, #0]
 80177c8:	681a      	ldr	r2, [r3, #0]
 80177ca:	687b      	ldr	r3, [r7, #4]
 80177cc:	681b      	ldr	r3, [r3, #0]
 80177ce:	f042 0201 	orr.w	r2, r2, #1
 80177d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80177d4:	687b      	ldr	r3, [r7, #4]
 80177d6:	2200      	movs	r2, #0
 80177d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80177da:	687b      	ldr	r3, [r7, #4]
 80177dc:	2220      	movs	r2, #32
 80177de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80177e2:	687b      	ldr	r3, [r7, #4]
 80177e4:	2200      	movs	r2, #0
 80177e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80177e8:	687b      	ldr	r3, [r7, #4]
 80177ea:	2200      	movs	r2, #0
 80177ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80177f0:	2300      	movs	r3, #0
}
 80177f2:	4618      	mov	r0, r3
 80177f4:	3710      	adds	r7, #16
 80177f6:	46bd      	mov	sp, r7
 80177f8:	bd80      	pop	{r7, pc}
 80177fa:	bf00      	nop
 80177fc:	000186a0 	.word	0x000186a0
 8017800:	001e847f 	.word	0x001e847f
 8017804:	003d08ff 	.word	0x003d08ff
 8017808:	431bde83 	.word	0x431bde83
 801780c:	10624dd3 	.word	0x10624dd3

08017810 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8017810:	b580      	push	{r7, lr}
 8017812:	b088      	sub	sp, #32
 8017814:	af02      	add	r7, sp, #8
 8017816:	60f8      	str	r0, [r7, #12]
 8017818:	4608      	mov	r0, r1
 801781a:	4611      	mov	r1, r2
 801781c:	461a      	mov	r2, r3
 801781e:	4603      	mov	r3, r0
 8017820:	817b      	strh	r3, [r7, #10]
 8017822:	460b      	mov	r3, r1
 8017824:	813b      	strh	r3, [r7, #8]
 8017826:	4613      	mov	r3, r2
 8017828:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 801782a:	f7fe ff8d 	bl	8016748 <HAL_GetTick>
 801782e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8017830:	68fb      	ldr	r3, [r7, #12]
 8017832:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017836:	b2db      	uxtb	r3, r3
 8017838:	2b20      	cmp	r3, #32
 801783a:	f040 80d9 	bne.w	80179f0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 801783e:	697b      	ldr	r3, [r7, #20]
 8017840:	9300      	str	r3, [sp, #0]
 8017842:	2319      	movs	r3, #25
 8017844:	2201      	movs	r2, #1
 8017846:	496d      	ldr	r1, [pc, #436]	; (80179fc <HAL_I2C_Mem_Write+0x1ec>)
 8017848:	68f8      	ldr	r0, [r7, #12]
 801784a:	f002 fad1 	bl	8019df0 <I2C_WaitOnFlagUntilTimeout>
 801784e:	4603      	mov	r3, r0
 8017850:	2b00      	cmp	r3, #0
 8017852:	d001      	beq.n	8017858 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8017854:	2302      	movs	r3, #2
 8017856:	e0cc      	b.n	80179f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8017858:	68fb      	ldr	r3, [r7, #12]
 801785a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801785e:	2b01      	cmp	r3, #1
 8017860:	d101      	bne.n	8017866 <HAL_I2C_Mem_Write+0x56>
 8017862:	2302      	movs	r3, #2
 8017864:	e0c5      	b.n	80179f2 <HAL_I2C_Mem_Write+0x1e2>
 8017866:	68fb      	ldr	r3, [r7, #12]
 8017868:	2201      	movs	r2, #1
 801786a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801786e:	68fb      	ldr	r3, [r7, #12]
 8017870:	681b      	ldr	r3, [r3, #0]
 8017872:	681b      	ldr	r3, [r3, #0]
 8017874:	f003 0301 	and.w	r3, r3, #1
 8017878:	2b01      	cmp	r3, #1
 801787a:	d007      	beq.n	801788c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801787c:	68fb      	ldr	r3, [r7, #12]
 801787e:	681b      	ldr	r3, [r3, #0]
 8017880:	681a      	ldr	r2, [r3, #0]
 8017882:	68fb      	ldr	r3, [r7, #12]
 8017884:	681b      	ldr	r3, [r3, #0]
 8017886:	f042 0201 	orr.w	r2, r2, #1
 801788a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801788c:	68fb      	ldr	r3, [r7, #12]
 801788e:	681b      	ldr	r3, [r3, #0]
 8017890:	681a      	ldr	r2, [r3, #0]
 8017892:	68fb      	ldr	r3, [r7, #12]
 8017894:	681b      	ldr	r3, [r3, #0]
 8017896:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801789a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 801789c:	68fb      	ldr	r3, [r7, #12]
 801789e:	2221      	movs	r2, #33	; 0x21
 80178a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80178a4:	68fb      	ldr	r3, [r7, #12]
 80178a6:	2240      	movs	r2, #64	; 0x40
 80178a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80178ac:	68fb      	ldr	r3, [r7, #12]
 80178ae:	2200      	movs	r2, #0
 80178b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80178b2:	68fb      	ldr	r3, [r7, #12]
 80178b4:	6a3a      	ldr	r2, [r7, #32]
 80178b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80178b8:	68fb      	ldr	r3, [r7, #12]
 80178ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80178bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80178be:	68fb      	ldr	r3, [r7, #12]
 80178c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80178c2:	b29a      	uxth	r2, r3
 80178c4:	68fb      	ldr	r3, [r7, #12]
 80178c6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80178c8:	68fb      	ldr	r3, [r7, #12]
 80178ca:	4a4d      	ldr	r2, [pc, #308]	; (8017a00 <HAL_I2C_Mem_Write+0x1f0>)
 80178cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80178ce:	88f8      	ldrh	r0, [r7, #6]
 80178d0:	893a      	ldrh	r2, [r7, #8]
 80178d2:	8979      	ldrh	r1, [r7, #10]
 80178d4:	697b      	ldr	r3, [r7, #20]
 80178d6:	9301      	str	r3, [sp, #4]
 80178d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178da:	9300      	str	r3, [sp, #0]
 80178dc:	4603      	mov	r3, r0
 80178de:	68f8      	ldr	r0, [r7, #12]
 80178e0:	f002 f860 	bl	80199a4 <I2C_RequestMemoryWrite>
 80178e4:	4603      	mov	r3, r0
 80178e6:	2b00      	cmp	r3, #0
 80178e8:	d052      	beq.n	8017990 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80178ea:	2301      	movs	r3, #1
 80178ec:	e081      	b.n	80179f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80178ee:	697a      	ldr	r2, [r7, #20]
 80178f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80178f2:	68f8      	ldr	r0, [r7, #12]
 80178f4:	f002 fb52 	bl	8019f9c <I2C_WaitOnTXEFlagUntilTimeout>
 80178f8:	4603      	mov	r3, r0
 80178fa:	2b00      	cmp	r3, #0
 80178fc:	d00d      	beq.n	801791a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80178fe:	68fb      	ldr	r3, [r7, #12]
 8017900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017902:	2b04      	cmp	r3, #4
 8017904:	d107      	bne.n	8017916 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017906:	68fb      	ldr	r3, [r7, #12]
 8017908:	681b      	ldr	r3, [r3, #0]
 801790a:	681a      	ldr	r2, [r3, #0]
 801790c:	68fb      	ldr	r3, [r7, #12]
 801790e:	681b      	ldr	r3, [r3, #0]
 8017910:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017914:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8017916:	2301      	movs	r3, #1
 8017918:	e06b      	b.n	80179f2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 801791a:	68fb      	ldr	r3, [r7, #12]
 801791c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801791e:	781a      	ldrb	r2, [r3, #0]
 8017920:	68fb      	ldr	r3, [r7, #12]
 8017922:	681b      	ldr	r3, [r3, #0]
 8017924:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8017926:	68fb      	ldr	r3, [r7, #12]
 8017928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801792a:	1c5a      	adds	r2, r3, #1
 801792c:	68fb      	ldr	r3, [r7, #12]
 801792e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8017930:	68fb      	ldr	r3, [r7, #12]
 8017932:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017934:	3b01      	subs	r3, #1
 8017936:	b29a      	uxth	r2, r3
 8017938:	68fb      	ldr	r3, [r7, #12]
 801793a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 801793c:	68fb      	ldr	r3, [r7, #12]
 801793e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017940:	b29b      	uxth	r3, r3
 8017942:	3b01      	subs	r3, #1
 8017944:	b29a      	uxth	r2, r3
 8017946:	68fb      	ldr	r3, [r7, #12]
 8017948:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 801794a:	68fb      	ldr	r3, [r7, #12]
 801794c:	681b      	ldr	r3, [r3, #0]
 801794e:	695b      	ldr	r3, [r3, #20]
 8017950:	f003 0304 	and.w	r3, r3, #4
 8017954:	2b04      	cmp	r3, #4
 8017956:	d11b      	bne.n	8017990 <HAL_I2C_Mem_Write+0x180>
 8017958:	68fb      	ldr	r3, [r7, #12]
 801795a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801795c:	2b00      	cmp	r3, #0
 801795e:	d017      	beq.n	8017990 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8017960:	68fb      	ldr	r3, [r7, #12]
 8017962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017964:	781a      	ldrb	r2, [r3, #0]
 8017966:	68fb      	ldr	r3, [r7, #12]
 8017968:	681b      	ldr	r3, [r3, #0]
 801796a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 801796c:	68fb      	ldr	r3, [r7, #12]
 801796e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017970:	1c5a      	adds	r2, r3, #1
 8017972:	68fb      	ldr	r3, [r7, #12]
 8017974:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8017976:	68fb      	ldr	r3, [r7, #12]
 8017978:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801797a:	3b01      	subs	r3, #1
 801797c:	b29a      	uxth	r2, r3
 801797e:	68fb      	ldr	r3, [r7, #12]
 8017980:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8017982:	68fb      	ldr	r3, [r7, #12]
 8017984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017986:	b29b      	uxth	r3, r3
 8017988:	3b01      	subs	r3, #1
 801798a:	b29a      	uxth	r2, r3
 801798c:	68fb      	ldr	r3, [r7, #12]
 801798e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8017990:	68fb      	ldr	r3, [r7, #12]
 8017992:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017994:	2b00      	cmp	r3, #0
 8017996:	d1aa      	bne.n	80178ee <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8017998:	697a      	ldr	r2, [r7, #20]
 801799a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801799c:	68f8      	ldr	r0, [r7, #12]
 801799e:	f002 fb3e 	bl	801a01e <I2C_WaitOnBTFFlagUntilTimeout>
 80179a2:	4603      	mov	r3, r0
 80179a4:	2b00      	cmp	r3, #0
 80179a6:	d00d      	beq.n	80179c4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80179a8:	68fb      	ldr	r3, [r7, #12]
 80179aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80179ac:	2b04      	cmp	r3, #4
 80179ae:	d107      	bne.n	80179c0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80179b0:	68fb      	ldr	r3, [r7, #12]
 80179b2:	681b      	ldr	r3, [r3, #0]
 80179b4:	681a      	ldr	r2, [r3, #0]
 80179b6:	68fb      	ldr	r3, [r7, #12]
 80179b8:	681b      	ldr	r3, [r3, #0]
 80179ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80179be:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80179c0:	2301      	movs	r3, #1
 80179c2:	e016      	b.n	80179f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80179c4:	68fb      	ldr	r3, [r7, #12]
 80179c6:	681b      	ldr	r3, [r3, #0]
 80179c8:	681a      	ldr	r2, [r3, #0]
 80179ca:	68fb      	ldr	r3, [r7, #12]
 80179cc:	681b      	ldr	r3, [r3, #0]
 80179ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80179d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80179d4:	68fb      	ldr	r3, [r7, #12]
 80179d6:	2220      	movs	r2, #32
 80179d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80179dc:	68fb      	ldr	r3, [r7, #12]
 80179de:	2200      	movs	r2, #0
 80179e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80179e4:	68fb      	ldr	r3, [r7, #12]
 80179e6:	2200      	movs	r2, #0
 80179e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80179ec:	2300      	movs	r3, #0
 80179ee:	e000      	b.n	80179f2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80179f0:	2302      	movs	r3, #2
  }
}
 80179f2:	4618      	mov	r0, r3
 80179f4:	3718      	adds	r7, #24
 80179f6:	46bd      	mov	sp, r7
 80179f8:	bd80      	pop	{r7, pc}
 80179fa:	bf00      	nop
 80179fc:	00100002 	.word	0x00100002
 8017a00:	ffff0000 	.word	0xffff0000

08017a04 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8017a04:	b580      	push	{r7, lr}
 8017a06:	b08c      	sub	sp, #48	; 0x30
 8017a08:	af02      	add	r7, sp, #8
 8017a0a:	60f8      	str	r0, [r7, #12]
 8017a0c:	4608      	mov	r0, r1
 8017a0e:	4611      	mov	r1, r2
 8017a10:	461a      	mov	r2, r3
 8017a12:	4603      	mov	r3, r0
 8017a14:	817b      	strh	r3, [r7, #10]
 8017a16:	460b      	mov	r3, r1
 8017a18:	813b      	strh	r3, [r7, #8]
 8017a1a:	4613      	mov	r3, r2
 8017a1c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8017a1e:	f7fe fe93 	bl	8016748 <HAL_GetTick>
 8017a22:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8017a24:	68fb      	ldr	r3, [r7, #12]
 8017a26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017a2a:	b2db      	uxtb	r3, r3
 8017a2c:	2b20      	cmp	r3, #32
 8017a2e:	f040 8208 	bne.w	8017e42 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8017a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a34:	9300      	str	r3, [sp, #0]
 8017a36:	2319      	movs	r3, #25
 8017a38:	2201      	movs	r2, #1
 8017a3a:	497b      	ldr	r1, [pc, #492]	; (8017c28 <HAL_I2C_Mem_Read+0x224>)
 8017a3c:	68f8      	ldr	r0, [r7, #12]
 8017a3e:	f002 f9d7 	bl	8019df0 <I2C_WaitOnFlagUntilTimeout>
 8017a42:	4603      	mov	r3, r0
 8017a44:	2b00      	cmp	r3, #0
 8017a46:	d001      	beq.n	8017a4c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8017a48:	2302      	movs	r3, #2
 8017a4a:	e1fb      	b.n	8017e44 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8017a4c:	68fb      	ldr	r3, [r7, #12]
 8017a4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017a52:	2b01      	cmp	r3, #1
 8017a54:	d101      	bne.n	8017a5a <HAL_I2C_Mem_Read+0x56>
 8017a56:	2302      	movs	r3, #2
 8017a58:	e1f4      	b.n	8017e44 <HAL_I2C_Mem_Read+0x440>
 8017a5a:	68fb      	ldr	r3, [r7, #12]
 8017a5c:	2201      	movs	r2, #1
 8017a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8017a62:	68fb      	ldr	r3, [r7, #12]
 8017a64:	681b      	ldr	r3, [r3, #0]
 8017a66:	681b      	ldr	r3, [r3, #0]
 8017a68:	f003 0301 	and.w	r3, r3, #1
 8017a6c:	2b01      	cmp	r3, #1
 8017a6e:	d007      	beq.n	8017a80 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8017a70:	68fb      	ldr	r3, [r7, #12]
 8017a72:	681b      	ldr	r3, [r3, #0]
 8017a74:	681a      	ldr	r2, [r3, #0]
 8017a76:	68fb      	ldr	r3, [r7, #12]
 8017a78:	681b      	ldr	r3, [r3, #0]
 8017a7a:	f042 0201 	orr.w	r2, r2, #1
 8017a7e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8017a80:	68fb      	ldr	r3, [r7, #12]
 8017a82:	681b      	ldr	r3, [r3, #0]
 8017a84:	681a      	ldr	r2, [r3, #0]
 8017a86:	68fb      	ldr	r3, [r7, #12]
 8017a88:	681b      	ldr	r3, [r3, #0]
 8017a8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8017a8e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8017a90:	68fb      	ldr	r3, [r7, #12]
 8017a92:	2222      	movs	r2, #34	; 0x22
 8017a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8017a98:	68fb      	ldr	r3, [r7, #12]
 8017a9a:	2240      	movs	r2, #64	; 0x40
 8017a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8017aa0:	68fb      	ldr	r3, [r7, #12]
 8017aa2:	2200      	movs	r2, #0
 8017aa4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8017aa6:	68fb      	ldr	r3, [r7, #12]
 8017aa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017aaa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8017aac:	68fb      	ldr	r3, [r7, #12]
 8017aae:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8017ab0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8017ab2:	68fb      	ldr	r3, [r7, #12]
 8017ab4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017ab6:	b29a      	uxth	r2, r3
 8017ab8:	68fb      	ldr	r3, [r7, #12]
 8017aba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8017abc:	68fb      	ldr	r3, [r7, #12]
 8017abe:	4a5b      	ldr	r2, [pc, #364]	; (8017c2c <HAL_I2C_Mem_Read+0x228>)
 8017ac0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8017ac2:	88f8      	ldrh	r0, [r7, #6]
 8017ac4:	893a      	ldrh	r2, [r7, #8]
 8017ac6:	8979      	ldrh	r1, [r7, #10]
 8017ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017aca:	9301      	str	r3, [sp, #4]
 8017acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ace:	9300      	str	r3, [sp, #0]
 8017ad0:	4603      	mov	r3, r0
 8017ad2:	68f8      	ldr	r0, [r7, #12]
 8017ad4:	f001 fffc 	bl	8019ad0 <I2C_RequestMemoryRead>
 8017ad8:	4603      	mov	r3, r0
 8017ada:	2b00      	cmp	r3, #0
 8017adc:	d001      	beq.n	8017ae2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8017ade:	2301      	movs	r3, #1
 8017ae0:	e1b0      	b.n	8017e44 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8017ae2:	68fb      	ldr	r3, [r7, #12]
 8017ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017ae6:	2b00      	cmp	r3, #0
 8017ae8:	d113      	bne.n	8017b12 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8017aea:	2300      	movs	r3, #0
 8017aec:	623b      	str	r3, [r7, #32]
 8017aee:	68fb      	ldr	r3, [r7, #12]
 8017af0:	681b      	ldr	r3, [r3, #0]
 8017af2:	695b      	ldr	r3, [r3, #20]
 8017af4:	623b      	str	r3, [r7, #32]
 8017af6:	68fb      	ldr	r3, [r7, #12]
 8017af8:	681b      	ldr	r3, [r3, #0]
 8017afa:	699b      	ldr	r3, [r3, #24]
 8017afc:	623b      	str	r3, [r7, #32]
 8017afe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017b00:	68fb      	ldr	r3, [r7, #12]
 8017b02:	681b      	ldr	r3, [r3, #0]
 8017b04:	681a      	ldr	r2, [r3, #0]
 8017b06:	68fb      	ldr	r3, [r7, #12]
 8017b08:	681b      	ldr	r3, [r3, #0]
 8017b0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017b0e:	601a      	str	r2, [r3, #0]
 8017b10:	e184      	b.n	8017e1c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8017b12:	68fb      	ldr	r3, [r7, #12]
 8017b14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017b16:	2b01      	cmp	r3, #1
 8017b18:	d11b      	bne.n	8017b52 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017b1a:	68fb      	ldr	r3, [r7, #12]
 8017b1c:	681b      	ldr	r3, [r3, #0]
 8017b1e:	681a      	ldr	r2, [r3, #0]
 8017b20:	68fb      	ldr	r3, [r7, #12]
 8017b22:	681b      	ldr	r3, [r3, #0]
 8017b24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8017b28:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8017b2a:	2300      	movs	r3, #0
 8017b2c:	61fb      	str	r3, [r7, #28]
 8017b2e:	68fb      	ldr	r3, [r7, #12]
 8017b30:	681b      	ldr	r3, [r3, #0]
 8017b32:	695b      	ldr	r3, [r3, #20]
 8017b34:	61fb      	str	r3, [r7, #28]
 8017b36:	68fb      	ldr	r3, [r7, #12]
 8017b38:	681b      	ldr	r3, [r3, #0]
 8017b3a:	699b      	ldr	r3, [r3, #24]
 8017b3c:	61fb      	str	r3, [r7, #28]
 8017b3e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017b40:	68fb      	ldr	r3, [r7, #12]
 8017b42:	681b      	ldr	r3, [r3, #0]
 8017b44:	681a      	ldr	r2, [r3, #0]
 8017b46:	68fb      	ldr	r3, [r7, #12]
 8017b48:	681b      	ldr	r3, [r3, #0]
 8017b4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017b4e:	601a      	str	r2, [r3, #0]
 8017b50:	e164      	b.n	8017e1c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8017b52:	68fb      	ldr	r3, [r7, #12]
 8017b54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017b56:	2b02      	cmp	r3, #2
 8017b58:	d11b      	bne.n	8017b92 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017b5a:	68fb      	ldr	r3, [r7, #12]
 8017b5c:	681b      	ldr	r3, [r3, #0]
 8017b5e:	681a      	ldr	r2, [r3, #0]
 8017b60:	68fb      	ldr	r3, [r7, #12]
 8017b62:	681b      	ldr	r3, [r3, #0]
 8017b64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8017b68:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8017b6a:	68fb      	ldr	r3, [r7, #12]
 8017b6c:	681b      	ldr	r3, [r3, #0]
 8017b6e:	681a      	ldr	r2, [r3, #0]
 8017b70:	68fb      	ldr	r3, [r7, #12]
 8017b72:	681b      	ldr	r3, [r3, #0]
 8017b74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8017b78:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8017b7a:	2300      	movs	r3, #0
 8017b7c:	61bb      	str	r3, [r7, #24]
 8017b7e:	68fb      	ldr	r3, [r7, #12]
 8017b80:	681b      	ldr	r3, [r3, #0]
 8017b82:	695b      	ldr	r3, [r3, #20]
 8017b84:	61bb      	str	r3, [r7, #24]
 8017b86:	68fb      	ldr	r3, [r7, #12]
 8017b88:	681b      	ldr	r3, [r3, #0]
 8017b8a:	699b      	ldr	r3, [r3, #24]
 8017b8c:	61bb      	str	r3, [r7, #24]
 8017b8e:	69bb      	ldr	r3, [r7, #24]
 8017b90:	e144      	b.n	8017e1c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8017b92:	2300      	movs	r3, #0
 8017b94:	617b      	str	r3, [r7, #20]
 8017b96:	68fb      	ldr	r3, [r7, #12]
 8017b98:	681b      	ldr	r3, [r3, #0]
 8017b9a:	695b      	ldr	r3, [r3, #20]
 8017b9c:	617b      	str	r3, [r7, #20]
 8017b9e:	68fb      	ldr	r3, [r7, #12]
 8017ba0:	681b      	ldr	r3, [r3, #0]
 8017ba2:	699b      	ldr	r3, [r3, #24]
 8017ba4:	617b      	str	r3, [r7, #20]
 8017ba6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8017ba8:	e138      	b.n	8017e1c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8017baa:	68fb      	ldr	r3, [r7, #12]
 8017bac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017bae:	2b03      	cmp	r3, #3
 8017bb0:	f200 80f1 	bhi.w	8017d96 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8017bb4:	68fb      	ldr	r3, [r7, #12]
 8017bb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017bb8:	2b01      	cmp	r3, #1
 8017bba:	d123      	bne.n	8017c04 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8017bbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017bbe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8017bc0:	68f8      	ldr	r0, [r7, #12]
 8017bc2:	f002 fa9f 	bl	801a104 <I2C_WaitOnRXNEFlagUntilTimeout>
 8017bc6:	4603      	mov	r3, r0
 8017bc8:	2b00      	cmp	r3, #0
 8017bca:	d001      	beq.n	8017bd0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8017bcc:	2301      	movs	r3, #1
 8017bce:	e139      	b.n	8017e44 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017bd0:	68fb      	ldr	r3, [r7, #12]
 8017bd2:	681b      	ldr	r3, [r3, #0]
 8017bd4:	691a      	ldr	r2, [r3, #16]
 8017bd6:	68fb      	ldr	r3, [r7, #12]
 8017bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017bda:	b2d2      	uxtb	r2, r2
 8017bdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8017bde:	68fb      	ldr	r3, [r7, #12]
 8017be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017be2:	1c5a      	adds	r2, r3, #1
 8017be4:	68fb      	ldr	r3, [r7, #12]
 8017be6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8017be8:	68fb      	ldr	r3, [r7, #12]
 8017bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017bec:	3b01      	subs	r3, #1
 8017bee:	b29a      	uxth	r2, r3
 8017bf0:	68fb      	ldr	r3, [r7, #12]
 8017bf2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8017bf4:	68fb      	ldr	r3, [r7, #12]
 8017bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017bf8:	b29b      	uxth	r3, r3
 8017bfa:	3b01      	subs	r3, #1
 8017bfc:	b29a      	uxth	r2, r3
 8017bfe:	68fb      	ldr	r3, [r7, #12]
 8017c00:	855a      	strh	r2, [r3, #42]	; 0x2a
 8017c02:	e10b      	b.n	8017e1c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8017c04:	68fb      	ldr	r3, [r7, #12]
 8017c06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017c08:	2b02      	cmp	r3, #2
 8017c0a:	d14e      	bne.n	8017caa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8017c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c0e:	9300      	str	r3, [sp, #0]
 8017c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c12:	2200      	movs	r2, #0
 8017c14:	4906      	ldr	r1, [pc, #24]	; (8017c30 <HAL_I2C_Mem_Read+0x22c>)
 8017c16:	68f8      	ldr	r0, [r7, #12]
 8017c18:	f002 f8ea 	bl	8019df0 <I2C_WaitOnFlagUntilTimeout>
 8017c1c:	4603      	mov	r3, r0
 8017c1e:	2b00      	cmp	r3, #0
 8017c20:	d008      	beq.n	8017c34 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8017c22:	2301      	movs	r3, #1
 8017c24:	e10e      	b.n	8017e44 <HAL_I2C_Mem_Read+0x440>
 8017c26:	bf00      	nop
 8017c28:	00100002 	.word	0x00100002
 8017c2c:	ffff0000 	.word	0xffff0000
 8017c30:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017c34:	68fb      	ldr	r3, [r7, #12]
 8017c36:	681b      	ldr	r3, [r3, #0]
 8017c38:	681a      	ldr	r2, [r3, #0]
 8017c3a:	68fb      	ldr	r3, [r7, #12]
 8017c3c:	681b      	ldr	r3, [r3, #0]
 8017c3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017c42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017c44:	68fb      	ldr	r3, [r7, #12]
 8017c46:	681b      	ldr	r3, [r3, #0]
 8017c48:	691a      	ldr	r2, [r3, #16]
 8017c4a:	68fb      	ldr	r3, [r7, #12]
 8017c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017c4e:	b2d2      	uxtb	r2, r2
 8017c50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8017c52:	68fb      	ldr	r3, [r7, #12]
 8017c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017c56:	1c5a      	adds	r2, r3, #1
 8017c58:	68fb      	ldr	r3, [r7, #12]
 8017c5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8017c5c:	68fb      	ldr	r3, [r7, #12]
 8017c5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017c60:	3b01      	subs	r3, #1
 8017c62:	b29a      	uxth	r2, r3
 8017c64:	68fb      	ldr	r3, [r7, #12]
 8017c66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8017c68:	68fb      	ldr	r3, [r7, #12]
 8017c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017c6c:	b29b      	uxth	r3, r3
 8017c6e:	3b01      	subs	r3, #1
 8017c70:	b29a      	uxth	r2, r3
 8017c72:	68fb      	ldr	r3, [r7, #12]
 8017c74:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017c76:	68fb      	ldr	r3, [r7, #12]
 8017c78:	681b      	ldr	r3, [r3, #0]
 8017c7a:	691a      	ldr	r2, [r3, #16]
 8017c7c:	68fb      	ldr	r3, [r7, #12]
 8017c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017c80:	b2d2      	uxtb	r2, r2
 8017c82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8017c84:	68fb      	ldr	r3, [r7, #12]
 8017c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017c88:	1c5a      	adds	r2, r3, #1
 8017c8a:	68fb      	ldr	r3, [r7, #12]
 8017c8c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8017c8e:	68fb      	ldr	r3, [r7, #12]
 8017c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017c92:	3b01      	subs	r3, #1
 8017c94:	b29a      	uxth	r2, r3
 8017c96:	68fb      	ldr	r3, [r7, #12]
 8017c98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8017c9a:	68fb      	ldr	r3, [r7, #12]
 8017c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017c9e:	b29b      	uxth	r3, r3
 8017ca0:	3b01      	subs	r3, #1
 8017ca2:	b29a      	uxth	r2, r3
 8017ca4:	68fb      	ldr	r3, [r7, #12]
 8017ca6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8017ca8:	e0b8      	b.n	8017e1c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8017caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cac:	9300      	str	r3, [sp, #0]
 8017cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017cb0:	2200      	movs	r2, #0
 8017cb2:	4966      	ldr	r1, [pc, #408]	; (8017e4c <HAL_I2C_Mem_Read+0x448>)
 8017cb4:	68f8      	ldr	r0, [r7, #12]
 8017cb6:	f002 f89b 	bl	8019df0 <I2C_WaitOnFlagUntilTimeout>
 8017cba:	4603      	mov	r3, r0
 8017cbc:	2b00      	cmp	r3, #0
 8017cbe:	d001      	beq.n	8017cc4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8017cc0:	2301      	movs	r3, #1
 8017cc2:	e0bf      	b.n	8017e44 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017cc4:	68fb      	ldr	r3, [r7, #12]
 8017cc6:	681b      	ldr	r3, [r3, #0]
 8017cc8:	681a      	ldr	r2, [r3, #0]
 8017cca:	68fb      	ldr	r3, [r7, #12]
 8017ccc:	681b      	ldr	r3, [r3, #0]
 8017cce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8017cd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017cd4:	68fb      	ldr	r3, [r7, #12]
 8017cd6:	681b      	ldr	r3, [r3, #0]
 8017cd8:	691a      	ldr	r2, [r3, #16]
 8017cda:	68fb      	ldr	r3, [r7, #12]
 8017cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017cde:	b2d2      	uxtb	r2, r2
 8017ce0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8017ce2:	68fb      	ldr	r3, [r7, #12]
 8017ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017ce6:	1c5a      	adds	r2, r3, #1
 8017ce8:	68fb      	ldr	r3, [r7, #12]
 8017cea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8017cec:	68fb      	ldr	r3, [r7, #12]
 8017cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017cf0:	3b01      	subs	r3, #1
 8017cf2:	b29a      	uxth	r2, r3
 8017cf4:	68fb      	ldr	r3, [r7, #12]
 8017cf6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8017cf8:	68fb      	ldr	r3, [r7, #12]
 8017cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017cfc:	b29b      	uxth	r3, r3
 8017cfe:	3b01      	subs	r3, #1
 8017d00:	b29a      	uxth	r2, r3
 8017d02:	68fb      	ldr	r3, [r7, #12]
 8017d04:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8017d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d08:	9300      	str	r3, [sp, #0]
 8017d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d0c:	2200      	movs	r2, #0
 8017d0e:	494f      	ldr	r1, [pc, #316]	; (8017e4c <HAL_I2C_Mem_Read+0x448>)
 8017d10:	68f8      	ldr	r0, [r7, #12]
 8017d12:	f002 f86d 	bl	8019df0 <I2C_WaitOnFlagUntilTimeout>
 8017d16:	4603      	mov	r3, r0
 8017d18:	2b00      	cmp	r3, #0
 8017d1a:	d001      	beq.n	8017d20 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8017d1c:	2301      	movs	r3, #1
 8017d1e:	e091      	b.n	8017e44 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017d20:	68fb      	ldr	r3, [r7, #12]
 8017d22:	681b      	ldr	r3, [r3, #0]
 8017d24:	681a      	ldr	r2, [r3, #0]
 8017d26:	68fb      	ldr	r3, [r7, #12]
 8017d28:	681b      	ldr	r3, [r3, #0]
 8017d2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017d2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017d30:	68fb      	ldr	r3, [r7, #12]
 8017d32:	681b      	ldr	r3, [r3, #0]
 8017d34:	691a      	ldr	r2, [r3, #16]
 8017d36:	68fb      	ldr	r3, [r7, #12]
 8017d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017d3a:	b2d2      	uxtb	r2, r2
 8017d3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8017d3e:	68fb      	ldr	r3, [r7, #12]
 8017d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017d42:	1c5a      	adds	r2, r3, #1
 8017d44:	68fb      	ldr	r3, [r7, #12]
 8017d46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8017d48:	68fb      	ldr	r3, [r7, #12]
 8017d4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017d4c:	3b01      	subs	r3, #1
 8017d4e:	b29a      	uxth	r2, r3
 8017d50:	68fb      	ldr	r3, [r7, #12]
 8017d52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8017d54:	68fb      	ldr	r3, [r7, #12]
 8017d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017d58:	b29b      	uxth	r3, r3
 8017d5a:	3b01      	subs	r3, #1
 8017d5c:	b29a      	uxth	r2, r3
 8017d5e:	68fb      	ldr	r3, [r7, #12]
 8017d60:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017d62:	68fb      	ldr	r3, [r7, #12]
 8017d64:	681b      	ldr	r3, [r3, #0]
 8017d66:	691a      	ldr	r2, [r3, #16]
 8017d68:	68fb      	ldr	r3, [r7, #12]
 8017d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017d6c:	b2d2      	uxtb	r2, r2
 8017d6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8017d70:	68fb      	ldr	r3, [r7, #12]
 8017d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017d74:	1c5a      	adds	r2, r3, #1
 8017d76:	68fb      	ldr	r3, [r7, #12]
 8017d78:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8017d7a:	68fb      	ldr	r3, [r7, #12]
 8017d7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017d7e:	3b01      	subs	r3, #1
 8017d80:	b29a      	uxth	r2, r3
 8017d82:	68fb      	ldr	r3, [r7, #12]
 8017d84:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8017d86:	68fb      	ldr	r3, [r7, #12]
 8017d88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017d8a:	b29b      	uxth	r3, r3
 8017d8c:	3b01      	subs	r3, #1
 8017d8e:	b29a      	uxth	r2, r3
 8017d90:	68fb      	ldr	r3, [r7, #12]
 8017d92:	855a      	strh	r2, [r3, #42]	; 0x2a
 8017d94:	e042      	b.n	8017e1c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8017d96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017d98:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8017d9a:	68f8      	ldr	r0, [r7, #12]
 8017d9c:	f002 f9b2 	bl	801a104 <I2C_WaitOnRXNEFlagUntilTimeout>
 8017da0:	4603      	mov	r3, r0
 8017da2:	2b00      	cmp	r3, #0
 8017da4:	d001      	beq.n	8017daa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8017da6:	2301      	movs	r3, #1
 8017da8:	e04c      	b.n	8017e44 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017daa:	68fb      	ldr	r3, [r7, #12]
 8017dac:	681b      	ldr	r3, [r3, #0]
 8017dae:	691a      	ldr	r2, [r3, #16]
 8017db0:	68fb      	ldr	r3, [r7, #12]
 8017db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017db4:	b2d2      	uxtb	r2, r2
 8017db6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8017db8:	68fb      	ldr	r3, [r7, #12]
 8017dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017dbc:	1c5a      	adds	r2, r3, #1
 8017dbe:	68fb      	ldr	r3, [r7, #12]
 8017dc0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8017dc2:	68fb      	ldr	r3, [r7, #12]
 8017dc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017dc6:	3b01      	subs	r3, #1
 8017dc8:	b29a      	uxth	r2, r3
 8017dca:	68fb      	ldr	r3, [r7, #12]
 8017dcc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8017dce:	68fb      	ldr	r3, [r7, #12]
 8017dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017dd2:	b29b      	uxth	r3, r3
 8017dd4:	3b01      	subs	r3, #1
 8017dd6:	b29a      	uxth	r2, r3
 8017dd8:	68fb      	ldr	r3, [r7, #12]
 8017dda:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8017ddc:	68fb      	ldr	r3, [r7, #12]
 8017dde:	681b      	ldr	r3, [r3, #0]
 8017de0:	695b      	ldr	r3, [r3, #20]
 8017de2:	f003 0304 	and.w	r3, r3, #4
 8017de6:	2b04      	cmp	r3, #4
 8017de8:	d118      	bne.n	8017e1c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017dea:	68fb      	ldr	r3, [r7, #12]
 8017dec:	681b      	ldr	r3, [r3, #0]
 8017dee:	691a      	ldr	r2, [r3, #16]
 8017df0:	68fb      	ldr	r3, [r7, #12]
 8017df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017df4:	b2d2      	uxtb	r2, r2
 8017df6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8017df8:	68fb      	ldr	r3, [r7, #12]
 8017dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017dfc:	1c5a      	adds	r2, r3, #1
 8017dfe:	68fb      	ldr	r3, [r7, #12]
 8017e00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8017e02:	68fb      	ldr	r3, [r7, #12]
 8017e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017e06:	3b01      	subs	r3, #1
 8017e08:	b29a      	uxth	r2, r3
 8017e0a:	68fb      	ldr	r3, [r7, #12]
 8017e0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8017e0e:	68fb      	ldr	r3, [r7, #12]
 8017e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017e12:	b29b      	uxth	r3, r3
 8017e14:	3b01      	subs	r3, #1
 8017e16:	b29a      	uxth	r2, r3
 8017e18:	68fb      	ldr	r3, [r7, #12]
 8017e1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8017e1c:	68fb      	ldr	r3, [r7, #12]
 8017e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017e20:	2b00      	cmp	r3, #0
 8017e22:	f47f aec2 	bne.w	8017baa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8017e26:	68fb      	ldr	r3, [r7, #12]
 8017e28:	2220      	movs	r2, #32
 8017e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8017e2e:	68fb      	ldr	r3, [r7, #12]
 8017e30:	2200      	movs	r2, #0
 8017e32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017e36:	68fb      	ldr	r3, [r7, #12]
 8017e38:	2200      	movs	r2, #0
 8017e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8017e3e:	2300      	movs	r3, #0
 8017e40:	e000      	b.n	8017e44 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8017e42:	2302      	movs	r3, #2
  }
}
 8017e44:	4618      	mov	r0, r3
 8017e46:	3728      	adds	r7, #40	; 0x28
 8017e48:	46bd      	mov	sp, r7
 8017e4a:	bd80      	pop	{r7, pc}
 8017e4c:	00010004 	.word	0x00010004

08017e50 <HAL_I2C_Master_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8017e50:	b480      	push	{r7}
 8017e52:	b087      	sub	sp, #28
 8017e54:	af00      	add	r7, sp, #0
 8017e56:	60f8      	str	r0, [r7, #12]
 8017e58:	607a      	str	r2, [r7, #4]
 8017e5a:	461a      	mov	r2, r3
 8017e5c:	460b      	mov	r3, r1
 8017e5e:	817b      	strh	r3, [r7, #10]
 8017e60:	4613      	mov	r3, r2
 8017e62:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 8017e64:	2300      	movs	r3, #0
 8017e66:	617b      	str	r3, [r7, #20]
  __IO uint32_t count      = 0x00U;
 8017e68:	2300      	movs	r3, #0
 8017e6a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8017e6c:	68fb      	ldr	r3, [r7, #12]
 8017e6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017e72:	b2db      	uxtb	r3, r3
 8017e74:	2b20      	cmp	r3, #32
 8017e76:	f040 80a6 	bne.w	8017fc6 <HAL_I2C_Master_Seq_Transmit_IT+0x176>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 8017e7a:	68fb      	ldr	r3, [r7, #12]
 8017e7c:	681b      	ldr	r3, [r3, #0]
 8017e7e:	681b      	ldr	r3, [r3, #0]
 8017e80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8017e84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017e88:	d005      	beq.n	8017e96 <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 8017e8a:	6a3b      	ldr	r3, [r7, #32]
 8017e8c:	2b08      	cmp	r3, #8
 8017e8e:	d002      	beq.n	8017e96 <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 8017e90:	6a3b      	ldr	r3, [r7, #32]
 8017e92:	2b01      	cmp	r3, #1
 8017e94:	d130      	bne.n	8017ef8 <HAL_I2C_Master_Seq_Transmit_IT+0xa8>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8017e96:	4b4f      	ldr	r3, [pc, #316]	; (8017fd4 <HAL_I2C_Master_Seq_Transmit_IT+0x184>)
 8017e98:	681b      	ldr	r3, [r3, #0]
 8017e9a:	08db      	lsrs	r3, r3, #3
 8017e9c:	4a4e      	ldr	r2, [pc, #312]	; (8017fd8 <HAL_I2C_Master_Seq_Transmit_IT+0x188>)
 8017e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8017ea2:	0a1a      	lsrs	r2, r3, #8
 8017ea4:	4613      	mov	r3, r2
 8017ea6:	009b      	lsls	r3, r3, #2
 8017ea8:	4413      	add	r3, r2
 8017eaa:	009a      	lsls	r2, r3, #2
 8017eac:	4413      	add	r3, r2
 8017eae:	613b      	str	r3, [r7, #16]
      do
      {
        count--;
 8017eb0:	693b      	ldr	r3, [r7, #16]
 8017eb2:	3b01      	subs	r3, #1
 8017eb4:	613b      	str	r3, [r7, #16]
        if (count == 0U)
 8017eb6:	693b      	ldr	r3, [r7, #16]
 8017eb8:	2b00      	cmp	r3, #0
 8017eba:	d116      	bne.n	8017eea <HAL_I2C_Master_Seq_Transmit_IT+0x9a>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8017ebc:	68fb      	ldr	r3, [r7, #12]
 8017ebe:	2200      	movs	r2, #0
 8017ec0:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8017ec2:	68fb      	ldr	r3, [r7, #12]
 8017ec4:	2220      	movs	r2, #32
 8017ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8017eca:	68fb      	ldr	r3, [r7, #12]
 8017ecc:	2200      	movs	r2, #0
 8017ece:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8017ed2:	68fb      	ldr	r3, [r7, #12]
 8017ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017ed6:	f043 0220 	orr.w	r2, r3, #32
 8017eda:	68fb      	ldr	r3, [r7, #12]
 8017edc:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8017ede:	68fb      	ldr	r3, [r7, #12]
 8017ee0:	2200      	movs	r2, #0
 8017ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8017ee6:	2301      	movs	r3, #1
 8017ee8:	e06e      	b.n	8017fc8 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8017eea:	68fb      	ldr	r3, [r7, #12]
 8017eec:	681b      	ldr	r3, [r3, #0]
 8017eee:	699b      	ldr	r3, [r3, #24]
 8017ef0:	f003 0302 	and.w	r3, r3, #2
 8017ef4:	2b02      	cmp	r3, #2
 8017ef6:	d0db      	beq.n	8017eb0 <HAL_I2C_Master_Seq_Transmit_IT+0x60>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8017ef8:	68fb      	ldr	r3, [r7, #12]
 8017efa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017efe:	2b01      	cmp	r3, #1
 8017f00:	d101      	bne.n	8017f06 <HAL_I2C_Master_Seq_Transmit_IT+0xb6>
 8017f02:	2302      	movs	r3, #2
 8017f04:	e060      	b.n	8017fc8 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
 8017f06:	68fb      	ldr	r3, [r7, #12]
 8017f08:	2201      	movs	r2, #1
 8017f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8017f0e:	68fb      	ldr	r3, [r7, #12]
 8017f10:	681b      	ldr	r3, [r3, #0]
 8017f12:	681b      	ldr	r3, [r3, #0]
 8017f14:	f003 0301 	and.w	r3, r3, #1
 8017f18:	2b01      	cmp	r3, #1
 8017f1a:	d007      	beq.n	8017f2c <HAL_I2C_Master_Seq_Transmit_IT+0xdc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8017f1c:	68fb      	ldr	r3, [r7, #12]
 8017f1e:	681b      	ldr	r3, [r3, #0]
 8017f20:	681a      	ldr	r2, [r3, #0]
 8017f22:	68fb      	ldr	r3, [r7, #12]
 8017f24:	681b      	ldr	r3, [r3, #0]
 8017f26:	f042 0201 	orr.w	r2, r2, #1
 8017f2a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8017f2c:	68fb      	ldr	r3, [r7, #12]
 8017f2e:	681b      	ldr	r3, [r3, #0]
 8017f30:	681a      	ldr	r2, [r3, #0]
 8017f32:	68fb      	ldr	r3, [r7, #12]
 8017f34:	681b      	ldr	r3, [r3, #0]
 8017f36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8017f3a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8017f3c:	68fb      	ldr	r3, [r7, #12]
 8017f3e:	2221      	movs	r2, #33	; 0x21
 8017f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8017f44:	68fb      	ldr	r3, [r7, #12]
 8017f46:	2210      	movs	r2, #16
 8017f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8017f4c:	68fb      	ldr	r3, [r7, #12]
 8017f4e:	2200      	movs	r2, #0
 8017f50:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8017f52:	68fb      	ldr	r3, [r7, #12]
 8017f54:	687a      	ldr	r2, [r7, #4]
 8017f56:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8017f58:	68fb      	ldr	r3, [r7, #12]
 8017f5a:	893a      	ldrh	r2, [r7, #8]
 8017f5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8017f5e:	68fb      	ldr	r3, [r7, #12]
 8017f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017f62:	b29a      	uxth	r2, r3
 8017f64:	68fb      	ldr	r3, [r7, #12]
 8017f66:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8017f68:	68fb      	ldr	r3, [r7, #12]
 8017f6a:	6a3a      	ldr	r2, [r7, #32]
 8017f6c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8017f6e:	897a      	ldrh	r2, [r7, #10]
 8017f70:	68fb      	ldr	r3, [r7, #12]
 8017f72:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 8017f74:	68fb      	ldr	r3, [r7, #12]
 8017f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017f78:	617b      	str	r3, [r7, #20]

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 8017f7a:	697b      	ldr	r3, [r7, #20]
 8017f7c:	2b11      	cmp	r3, #17
 8017f7e:	d10c      	bne.n	8017f9a <HAL_I2C_Master_Seq_Transmit_IT+0x14a>
 8017f80:	6a3b      	ldr	r3, [r7, #32]
 8017f82:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8017f86:	d003      	beq.n	8017f90 <HAL_I2C_Master_Seq_Transmit_IT+0x140>
 8017f88:	6a3b      	ldr	r3, [r7, #32]
 8017f8a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8017f8e:	d101      	bne.n	8017f94 <HAL_I2C_Master_Seq_Transmit_IT+0x144>
 8017f90:	2301      	movs	r3, #1
 8017f92:	e000      	b.n	8017f96 <HAL_I2C_Master_Seq_Transmit_IT+0x146>
 8017f94:	2300      	movs	r3, #0
 8017f96:	2b01      	cmp	r3, #1
 8017f98:	d107      	bne.n	8017faa <HAL_I2C_Master_Seq_Transmit_IT+0x15a>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8017f9a:	68fb      	ldr	r3, [r7, #12]
 8017f9c:	681b      	ldr	r3, [r3, #0]
 8017f9e:	681a      	ldr	r2, [r3, #0]
 8017fa0:	68fb      	ldr	r3, [r7, #12]
 8017fa2:	681b      	ldr	r3, [r3, #0]
 8017fa4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017fa8:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017faa:	68fb      	ldr	r3, [r7, #12]
 8017fac:	2200      	movs	r2, #0
 8017fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8017fb2:	68fb      	ldr	r3, [r7, #12]
 8017fb4:	681b      	ldr	r3, [r3, #0]
 8017fb6:	685a      	ldr	r2, [r3, #4]
 8017fb8:	68fb      	ldr	r3, [r7, #12]
 8017fba:	681b      	ldr	r3, [r3, #0]
 8017fbc:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8017fc0:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8017fc2:	2300      	movs	r3, #0
 8017fc4:	e000      	b.n	8017fc8 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
  }
  else
  {
    return HAL_BUSY;
 8017fc6:	2302      	movs	r3, #2
  }
}
 8017fc8:	4618      	mov	r0, r3
 8017fca:	371c      	adds	r7, #28
 8017fcc:	46bd      	mov	sp, r7
 8017fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fd2:	4770      	bx	lr
 8017fd4:	200001e0 	.word	0x200001e0
 8017fd8:	14f8b589 	.word	0x14f8b589

08017fdc <HAL_I2C_Master_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8017fdc:	b480      	push	{r7}
 8017fde:	b089      	sub	sp, #36	; 0x24
 8017fe0:	af00      	add	r7, sp, #0
 8017fe2:	60f8      	str	r0, [r7, #12]
 8017fe4:	607a      	str	r2, [r7, #4]
 8017fe6:	461a      	mov	r2, r3
 8017fe8:	460b      	mov	r3, r1
 8017fea:	817b      	strh	r3, [r7, #10]
 8017fec:	4613      	mov	r3, r2
 8017fee:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 8017ff0:	2300      	movs	r3, #0
 8017ff2:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8017ff4:	2300      	movs	r3, #0
 8017ff6:	617b      	str	r3, [r7, #20]
  uint32_t enableIT = (I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8017ff8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8017ffc:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8017ffe:	68fb      	ldr	r3, [r7, #12]
 8018000:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018004:	b2db      	uxtb	r3, r3
 8018006:	2b20      	cmp	r3, #32
 8018008:	f040 80da 	bne.w	80181c0 <HAL_I2C_Master_Seq_Receive_IT+0x1e4>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 801800c:	68fb      	ldr	r3, [r7, #12]
 801800e:	681b      	ldr	r3, [r3, #0]
 8018010:	681b      	ldr	r3, [r3, #0]
 8018012:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8018016:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801801a:	d005      	beq.n	8018028 <HAL_I2C_Master_Seq_Receive_IT+0x4c>
 801801c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801801e:	2b08      	cmp	r3, #8
 8018020:	d002      	beq.n	8018028 <HAL_I2C_Master_Seq_Receive_IT+0x4c>
 8018022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018024:	2b01      	cmp	r3, #1
 8018026:	d130      	bne.n	801808a <HAL_I2C_Master_Seq_Receive_IT+0xae>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8018028:	4b69      	ldr	r3, [pc, #420]	; (80181d0 <HAL_I2C_Master_Seq_Receive_IT+0x1f4>)
 801802a:	681b      	ldr	r3, [r3, #0]
 801802c:	08db      	lsrs	r3, r3, #3
 801802e:	4a69      	ldr	r2, [pc, #420]	; (80181d4 <HAL_I2C_Master_Seq_Receive_IT+0x1f8>)
 8018030:	fba2 2303 	umull	r2, r3, r2, r3
 8018034:	0a1a      	lsrs	r2, r3, #8
 8018036:	4613      	mov	r3, r2
 8018038:	009b      	lsls	r3, r3, #2
 801803a:	4413      	add	r3, r2
 801803c:	009a      	lsls	r2, r3, #2
 801803e:	4413      	add	r3, r2
 8018040:	617b      	str	r3, [r7, #20]
      do
      {
        count--;
 8018042:	697b      	ldr	r3, [r7, #20]
 8018044:	3b01      	subs	r3, #1
 8018046:	617b      	str	r3, [r7, #20]
        if (count == 0U)
 8018048:	697b      	ldr	r3, [r7, #20]
 801804a:	2b00      	cmp	r3, #0
 801804c:	d116      	bne.n	801807c <HAL_I2C_Master_Seq_Receive_IT+0xa0>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 801804e:	68fb      	ldr	r3, [r7, #12]
 8018050:	2200      	movs	r2, #0
 8018052:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8018054:	68fb      	ldr	r3, [r7, #12]
 8018056:	2220      	movs	r2, #32
 8018058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 801805c:	68fb      	ldr	r3, [r7, #12]
 801805e:	2200      	movs	r2, #0
 8018060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8018064:	68fb      	ldr	r3, [r7, #12]
 8018066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018068:	f043 0220 	orr.w	r2, r3, #32
 801806c:	68fb      	ldr	r3, [r7, #12]
 801806e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8018070:	68fb      	ldr	r3, [r7, #12]
 8018072:	2200      	movs	r2, #0
 8018074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8018078:	2301      	movs	r3, #1
 801807a:	e0a2      	b.n	80181c2 <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 801807c:	68fb      	ldr	r3, [r7, #12]
 801807e:	681b      	ldr	r3, [r3, #0]
 8018080:	699b      	ldr	r3, [r3, #24]
 8018082:	f003 0302 	and.w	r3, r3, #2
 8018086:	2b02      	cmp	r3, #2
 8018088:	d0db      	beq.n	8018042 <HAL_I2C_Master_Seq_Receive_IT+0x66>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801808a:	68fb      	ldr	r3, [r7, #12]
 801808c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8018090:	2b01      	cmp	r3, #1
 8018092:	d101      	bne.n	8018098 <HAL_I2C_Master_Seq_Receive_IT+0xbc>
 8018094:	2302      	movs	r3, #2
 8018096:	e094      	b.n	80181c2 <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
 8018098:	68fb      	ldr	r3, [r7, #12]
 801809a:	2201      	movs	r2, #1
 801809c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80180a0:	68fb      	ldr	r3, [r7, #12]
 80180a2:	681b      	ldr	r3, [r3, #0]
 80180a4:	681b      	ldr	r3, [r3, #0]
 80180a6:	f003 0301 	and.w	r3, r3, #1
 80180aa:	2b01      	cmp	r3, #1
 80180ac:	d007      	beq.n	80180be <HAL_I2C_Master_Seq_Receive_IT+0xe2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80180ae:	68fb      	ldr	r3, [r7, #12]
 80180b0:	681b      	ldr	r3, [r3, #0]
 80180b2:	681a      	ldr	r2, [r3, #0]
 80180b4:	68fb      	ldr	r3, [r7, #12]
 80180b6:	681b      	ldr	r3, [r3, #0]
 80180b8:	f042 0201 	orr.w	r2, r2, #1
 80180bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80180be:	68fb      	ldr	r3, [r7, #12]
 80180c0:	681b      	ldr	r3, [r3, #0]
 80180c2:	681a      	ldr	r2, [r3, #0]
 80180c4:	68fb      	ldr	r3, [r7, #12]
 80180c6:	681b      	ldr	r3, [r3, #0]
 80180c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80180cc:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80180ce:	68fb      	ldr	r3, [r7, #12]
 80180d0:	2222      	movs	r2, #34	; 0x22
 80180d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80180d6:	68fb      	ldr	r3, [r7, #12]
 80180d8:	2210      	movs	r2, #16
 80180da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80180de:	68fb      	ldr	r3, [r7, #12]
 80180e0:	2200      	movs	r2, #0
 80180e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80180e4:	68fb      	ldr	r3, [r7, #12]
 80180e6:	687a      	ldr	r2, [r7, #4]
 80180e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80180ea:	68fb      	ldr	r3, [r7, #12]
 80180ec:	893a      	ldrh	r2, [r7, #8]
 80180ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80180f0:	68fb      	ldr	r3, [r7, #12]
 80180f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80180f4:	b29a      	uxth	r2, r3
 80180f6:	68fb      	ldr	r3, [r7, #12]
 80180f8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 80180fa:	68fb      	ldr	r3, [r7, #12]
 80180fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80180fe:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8018100:	897a      	ldrh	r2, [r7, #10]
 8018102:	68fb      	ldr	r3, [r7, #12]
 8018104:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 8018106:	68fb      	ldr	r3, [r7, #12]
 8018108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801810a:	61bb      	str	r3, [r7, #24]

    if ((hi2c->XferCount == 2U) && ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP)))
 801810c:	68fb      	ldr	r3, [r7, #12]
 801810e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018110:	b29b      	uxth	r3, r3
 8018112:	2b02      	cmp	r3, #2
 8018114:	d126      	bne.n	8018164 <HAL_I2C_Master_Seq_Receive_IT+0x188>
 8018116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018118:	2b20      	cmp	r3, #32
 801811a:	d002      	beq.n	8018122 <HAL_I2C_Master_Seq_Receive_IT+0x146>
 801811c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801811e:	2b10      	cmp	r3, #16
 8018120:	d120      	bne.n	8018164 <HAL_I2C_Master_Seq_Receive_IT+0x188>
    {
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8018122:	69bb      	ldr	r3, [r7, #24]
 8018124:	2b12      	cmp	r3, #18
 8018126:	d114      	bne.n	8018152 <HAL_I2C_Master_Seq_Receive_IT+0x176>
      {
        /* Disable Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018128:	68fb      	ldr	r3, [r7, #12]
 801812a:	681b      	ldr	r3, [r3, #0]
 801812c:	681a      	ldr	r2, [r3, #0]
 801812e:	68fb      	ldr	r3, [r7, #12]
 8018130:	681b      	ldr	r3, [r3, #0]
 8018132:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018136:	601a      	str	r2, [r3, #0]

        /* Enable Pos */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8018138:	68fb      	ldr	r3, [r7, #12]
 801813a:	681b      	ldr	r3, [r3, #0]
 801813c:	681a      	ldr	r2, [r3, #0]
 801813e:	68fb      	ldr	r3, [r7, #12]
 8018140:	681b      	ldr	r3, [r3, #0]
 8018142:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8018146:	601a      	str	r2, [r3, #0]

        /* Remove Enabling of IT_BUF, mean RXNE treatment, treat the 2 bytes through BTF */
        enableIT &= ~I2C_IT_BUF;
 8018148:	69fb      	ldr	r3, [r7, #28]
 801814a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801814e:	61fb      	str	r3, [r7, #28]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8018150:	e010      	b.n	8018174 <HAL_I2C_Master_Seq_Receive_IT+0x198>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018152:	68fb      	ldr	r3, [r7, #12]
 8018154:	681b      	ldr	r3, [r3, #0]
 8018156:	681a      	ldr	r2, [r3, #0]
 8018158:	68fb      	ldr	r3, [r7, #12]
 801815a:	681b      	ldr	r3, [r3, #0]
 801815c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8018160:	601a      	str	r2, [r3, #0]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8018162:	e007      	b.n	8018174 <HAL_I2C_Master_Seq_Receive_IT+0x198>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018164:	68fb      	ldr	r3, [r7, #12]
 8018166:	681b      	ldr	r3, [r3, #0]
 8018168:	681a      	ldr	r2, [r3, #0]
 801816a:	68fb      	ldr	r3, [r7, #12]
 801816c:	681b      	ldr	r3, [r3, #0]
 801816e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8018172:	601a      	str	r2, [r3, #0]
    }

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 8018174:	69bb      	ldr	r3, [r7, #24]
 8018176:	2b12      	cmp	r3, #18
 8018178:	d10c      	bne.n	8018194 <HAL_I2C_Master_Seq_Receive_IT+0x1b8>
 801817a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801817c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8018180:	d003      	beq.n	801818a <HAL_I2C_Master_Seq_Receive_IT+0x1ae>
 8018182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018184:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8018188:	d101      	bne.n	801818e <HAL_I2C_Master_Seq_Receive_IT+0x1b2>
 801818a:	2301      	movs	r3, #1
 801818c:	e000      	b.n	8018190 <HAL_I2C_Master_Seq_Receive_IT+0x1b4>
 801818e:	2300      	movs	r3, #0
 8018190:	2b01      	cmp	r3, #1
 8018192:	d107      	bne.n	80181a4 <HAL_I2C_Master_Seq_Receive_IT+0x1c8>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8018194:	68fb      	ldr	r3, [r7, #12]
 8018196:	681b      	ldr	r3, [r3, #0]
 8018198:	681a      	ldr	r2, [r3, #0]
 801819a:	68fb      	ldr	r3, [r7, #12]
 801819c:	681b      	ldr	r3, [r3, #0]
 801819e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80181a2:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80181a4:	68fb      	ldr	r3, [r7, #12]
 80181a6:	2200      	movs	r2, #0
 80181a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable interrupts */
    __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 80181ac:	68fb      	ldr	r3, [r7, #12]
 80181ae:	681b      	ldr	r3, [r3, #0]
 80181b0:	6859      	ldr	r1, [r3, #4]
 80181b2:	68fb      	ldr	r3, [r7, #12]
 80181b4:	681b      	ldr	r3, [r3, #0]
 80181b6:	69fa      	ldr	r2, [r7, #28]
 80181b8:	430a      	orrs	r2, r1
 80181ba:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80181bc:	2300      	movs	r3, #0
 80181be:	e000      	b.n	80181c2 <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
  }
  else
  {
    return HAL_BUSY;
 80181c0:	2302      	movs	r3, #2
  }
}
 80181c2:	4618      	mov	r0, r3
 80181c4:	3724      	adds	r7, #36	; 0x24
 80181c6:	46bd      	mov	sp, r7
 80181c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181cc:	4770      	bx	lr
 80181ce:	bf00      	nop
 80181d0:	200001e0 	.word	0x200001e0
 80181d4:	14f8b589 	.word	0x14f8b589

080181d8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80181d8:	b580      	push	{r7, lr}
 80181da:	b088      	sub	sp, #32
 80181dc:	af00      	add	r7, sp, #0
 80181de:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80181e0:	2300      	movs	r3, #0
 80181e2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80181e4:	687b      	ldr	r3, [r7, #4]
 80181e6:	681b      	ldr	r3, [r3, #0]
 80181e8:	685b      	ldr	r3, [r3, #4]
 80181ea:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80181ec:	687b      	ldr	r3, [r7, #4]
 80181ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80181f0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80181f2:	687b      	ldr	r3, [r7, #4]
 80181f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80181f8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80181fa:	687b      	ldr	r3, [r7, #4]
 80181fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018200:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8018202:	7bfb      	ldrb	r3, [r7, #15]
 8018204:	2b10      	cmp	r3, #16
 8018206:	d003      	beq.n	8018210 <HAL_I2C_EV_IRQHandler+0x38>
 8018208:	7bfb      	ldrb	r3, [r7, #15]
 801820a:	2b40      	cmp	r3, #64	; 0x40
 801820c:	f040 80c1 	bne.w	8018392 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8018210:	687b      	ldr	r3, [r7, #4]
 8018212:	681b      	ldr	r3, [r3, #0]
 8018214:	699b      	ldr	r3, [r3, #24]
 8018216:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8018218:	687b      	ldr	r3, [r7, #4]
 801821a:	681b      	ldr	r3, [r3, #0]
 801821c:	695b      	ldr	r3, [r3, #20]
 801821e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8018220:	69fb      	ldr	r3, [r7, #28]
 8018222:	f003 0301 	and.w	r3, r3, #1
 8018226:	2b00      	cmp	r3, #0
 8018228:	d10d      	bne.n	8018246 <HAL_I2C_EV_IRQHandler+0x6e>
 801822a:	693b      	ldr	r3, [r7, #16]
 801822c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8018230:	d003      	beq.n	801823a <HAL_I2C_EV_IRQHandler+0x62>
 8018232:	693b      	ldr	r3, [r7, #16]
 8018234:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8018238:	d101      	bne.n	801823e <HAL_I2C_EV_IRQHandler+0x66>
 801823a:	2301      	movs	r3, #1
 801823c:	e000      	b.n	8018240 <HAL_I2C_EV_IRQHandler+0x68>
 801823e:	2300      	movs	r3, #0
 8018240:	2b01      	cmp	r3, #1
 8018242:	f000 8132 	beq.w	80184aa <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8018246:	69fb      	ldr	r3, [r7, #28]
 8018248:	f003 0301 	and.w	r3, r3, #1
 801824c:	2b00      	cmp	r3, #0
 801824e:	d00c      	beq.n	801826a <HAL_I2C_EV_IRQHandler+0x92>
 8018250:	697b      	ldr	r3, [r7, #20]
 8018252:	0a5b      	lsrs	r3, r3, #9
 8018254:	f003 0301 	and.w	r3, r3, #1
 8018258:	2b00      	cmp	r3, #0
 801825a:	d006      	beq.n	801826a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 801825c:	6878      	ldr	r0, [r7, #4]
 801825e:	f001 ffd6 	bl	801a20e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8018262:	6878      	ldr	r0, [r7, #4]
 8018264:	f000 fd83 	bl	8018d6e <I2C_Master_SB>
 8018268:	e092      	b.n	8018390 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801826a:	69fb      	ldr	r3, [r7, #28]
 801826c:	08db      	lsrs	r3, r3, #3
 801826e:	f003 0301 	and.w	r3, r3, #1
 8018272:	2b00      	cmp	r3, #0
 8018274:	d009      	beq.n	801828a <HAL_I2C_EV_IRQHandler+0xb2>
 8018276:	697b      	ldr	r3, [r7, #20]
 8018278:	0a5b      	lsrs	r3, r3, #9
 801827a:	f003 0301 	and.w	r3, r3, #1
 801827e:	2b00      	cmp	r3, #0
 8018280:	d003      	beq.n	801828a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8018282:	6878      	ldr	r0, [r7, #4]
 8018284:	f000 fdf9 	bl	8018e7a <I2C_Master_ADD10>
 8018288:	e082      	b.n	8018390 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801828a:	69fb      	ldr	r3, [r7, #28]
 801828c:	085b      	lsrs	r3, r3, #1
 801828e:	f003 0301 	and.w	r3, r3, #1
 8018292:	2b00      	cmp	r3, #0
 8018294:	d009      	beq.n	80182aa <HAL_I2C_EV_IRQHandler+0xd2>
 8018296:	697b      	ldr	r3, [r7, #20]
 8018298:	0a5b      	lsrs	r3, r3, #9
 801829a:	f003 0301 	and.w	r3, r3, #1
 801829e:	2b00      	cmp	r3, #0
 80182a0:	d003      	beq.n	80182aa <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80182a2:	6878      	ldr	r0, [r7, #4]
 80182a4:	f000 fe13 	bl	8018ece <I2C_Master_ADDR>
 80182a8:	e072      	b.n	8018390 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80182aa:	69bb      	ldr	r3, [r7, #24]
 80182ac:	089b      	lsrs	r3, r3, #2
 80182ae:	f003 0301 	and.w	r3, r3, #1
 80182b2:	2b00      	cmp	r3, #0
 80182b4:	d03b      	beq.n	801832e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80182b6:	687b      	ldr	r3, [r7, #4]
 80182b8:	681b      	ldr	r3, [r3, #0]
 80182ba:	685b      	ldr	r3, [r3, #4]
 80182bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80182c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80182c4:	f000 80f3 	beq.w	80184ae <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80182c8:	69fb      	ldr	r3, [r7, #28]
 80182ca:	09db      	lsrs	r3, r3, #7
 80182cc:	f003 0301 	and.w	r3, r3, #1
 80182d0:	2b00      	cmp	r3, #0
 80182d2:	d00f      	beq.n	80182f4 <HAL_I2C_EV_IRQHandler+0x11c>
 80182d4:	697b      	ldr	r3, [r7, #20]
 80182d6:	0a9b      	lsrs	r3, r3, #10
 80182d8:	f003 0301 	and.w	r3, r3, #1
 80182dc:	2b00      	cmp	r3, #0
 80182de:	d009      	beq.n	80182f4 <HAL_I2C_EV_IRQHandler+0x11c>
 80182e0:	69fb      	ldr	r3, [r7, #28]
 80182e2:	089b      	lsrs	r3, r3, #2
 80182e4:	f003 0301 	and.w	r3, r3, #1
 80182e8:	2b00      	cmp	r3, #0
 80182ea:	d103      	bne.n	80182f4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80182ec:	6878      	ldr	r0, [r7, #4]
 80182ee:	f000 f9f3 	bl	80186d8 <I2C_MasterTransmit_TXE>
 80182f2:	e04d      	b.n	8018390 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80182f4:	69fb      	ldr	r3, [r7, #28]
 80182f6:	089b      	lsrs	r3, r3, #2
 80182f8:	f003 0301 	and.w	r3, r3, #1
 80182fc:	2b00      	cmp	r3, #0
 80182fe:	f000 80d6 	beq.w	80184ae <HAL_I2C_EV_IRQHandler+0x2d6>
 8018302:	697b      	ldr	r3, [r7, #20]
 8018304:	0a5b      	lsrs	r3, r3, #9
 8018306:	f003 0301 	and.w	r3, r3, #1
 801830a:	2b00      	cmp	r3, #0
 801830c:	f000 80cf 	beq.w	80184ae <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8018310:	7bbb      	ldrb	r3, [r7, #14]
 8018312:	2b21      	cmp	r3, #33	; 0x21
 8018314:	d103      	bne.n	801831e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8018316:	6878      	ldr	r0, [r7, #4]
 8018318:	f000 fa7a 	bl	8018810 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801831c:	e0c7      	b.n	80184ae <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 801831e:	7bfb      	ldrb	r3, [r7, #15]
 8018320:	2b40      	cmp	r3, #64	; 0x40
 8018322:	f040 80c4 	bne.w	80184ae <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8018326:	6878      	ldr	r0, [r7, #4]
 8018328:	f000 fae8 	bl	80188fc <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801832c:	e0bf      	b.n	80184ae <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 801832e:	687b      	ldr	r3, [r7, #4]
 8018330:	681b      	ldr	r3, [r3, #0]
 8018332:	685b      	ldr	r3, [r3, #4]
 8018334:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018338:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801833c:	f000 80b7 	beq.w	80184ae <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8018340:	69fb      	ldr	r3, [r7, #28]
 8018342:	099b      	lsrs	r3, r3, #6
 8018344:	f003 0301 	and.w	r3, r3, #1
 8018348:	2b00      	cmp	r3, #0
 801834a:	d00f      	beq.n	801836c <HAL_I2C_EV_IRQHandler+0x194>
 801834c:	697b      	ldr	r3, [r7, #20]
 801834e:	0a9b      	lsrs	r3, r3, #10
 8018350:	f003 0301 	and.w	r3, r3, #1
 8018354:	2b00      	cmp	r3, #0
 8018356:	d009      	beq.n	801836c <HAL_I2C_EV_IRQHandler+0x194>
 8018358:	69fb      	ldr	r3, [r7, #28]
 801835a:	089b      	lsrs	r3, r3, #2
 801835c:	f003 0301 	and.w	r3, r3, #1
 8018360:	2b00      	cmp	r3, #0
 8018362:	d103      	bne.n	801836c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8018364:	6878      	ldr	r0, [r7, #4]
 8018366:	f000 fb5d 	bl	8018a24 <I2C_MasterReceive_RXNE>
 801836a:	e011      	b.n	8018390 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801836c:	69fb      	ldr	r3, [r7, #28]
 801836e:	089b      	lsrs	r3, r3, #2
 8018370:	f003 0301 	and.w	r3, r3, #1
 8018374:	2b00      	cmp	r3, #0
 8018376:	f000 809a 	beq.w	80184ae <HAL_I2C_EV_IRQHandler+0x2d6>
 801837a:	697b      	ldr	r3, [r7, #20]
 801837c:	0a5b      	lsrs	r3, r3, #9
 801837e:	f003 0301 	and.w	r3, r3, #1
 8018382:	2b00      	cmp	r3, #0
 8018384:	f000 8093 	beq.w	80184ae <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8018388:	6878      	ldr	r0, [r7, #4]
 801838a:	f000 fc06 	bl	8018b9a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801838e:	e08e      	b.n	80184ae <HAL_I2C_EV_IRQHandler+0x2d6>
 8018390:	e08d      	b.n	80184ae <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8018392:	687b      	ldr	r3, [r7, #4]
 8018394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018396:	2b00      	cmp	r3, #0
 8018398:	d004      	beq.n	80183a4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 801839a:	687b      	ldr	r3, [r7, #4]
 801839c:	681b      	ldr	r3, [r3, #0]
 801839e:	695b      	ldr	r3, [r3, #20]
 80183a0:	61fb      	str	r3, [r7, #28]
 80183a2:	e007      	b.n	80183b4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80183a4:	687b      	ldr	r3, [r7, #4]
 80183a6:	681b      	ldr	r3, [r3, #0]
 80183a8:	699b      	ldr	r3, [r3, #24]
 80183aa:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80183ac:	687b      	ldr	r3, [r7, #4]
 80183ae:	681b      	ldr	r3, [r3, #0]
 80183b0:	695b      	ldr	r3, [r3, #20]
 80183b2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80183b4:	69fb      	ldr	r3, [r7, #28]
 80183b6:	085b      	lsrs	r3, r3, #1
 80183b8:	f003 0301 	and.w	r3, r3, #1
 80183bc:	2b00      	cmp	r3, #0
 80183be:	d012      	beq.n	80183e6 <HAL_I2C_EV_IRQHandler+0x20e>
 80183c0:	697b      	ldr	r3, [r7, #20]
 80183c2:	0a5b      	lsrs	r3, r3, #9
 80183c4:	f003 0301 	and.w	r3, r3, #1
 80183c8:	2b00      	cmp	r3, #0
 80183ca:	d00c      	beq.n	80183e6 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80183cc:	687b      	ldr	r3, [r7, #4]
 80183ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80183d0:	2b00      	cmp	r3, #0
 80183d2:	d003      	beq.n	80183dc <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80183d4:	687b      	ldr	r3, [r7, #4]
 80183d6:	681b      	ldr	r3, [r3, #0]
 80183d8:	699b      	ldr	r3, [r3, #24]
 80183da:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80183dc:	69b9      	ldr	r1, [r7, #24]
 80183de:	6878      	ldr	r0, [r7, #4]
 80183e0:	f000 ffc4 	bl	801936c <I2C_Slave_ADDR>
 80183e4:	e066      	b.n	80184b4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80183e6:	69fb      	ldr	r3, [r7, #28]
 80183e8:	091b      	lsrs	r3, r3, #4
 80183ea:	f003 0301 	and.w	r3, r3, #1
 80183ee:	2b00      	cmp	r3, #0
 80183f0:	d009      	beq.n	8018406 <HAL_I2C_EV_IRQHandler+0x22e>
 80183f2:	697b      	ldr	r3, [r7, #20]
 80183f4:	0a5b      	lsrs	r3, r3, #9
 80183f6:	f003 0301 	and.w	r3, r3, #1
 80183fa:	2b00      	cmp	r3, #0
 80183fc:	d003      	beq.n	8018406 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80183fe:	6878      	ldr	r0, [r7, #4]
 8018400:	f000 fffe 	bl	8019400 <I2C_Slave_STOPF>
 8018404:	e056      	b.n	80184b4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8018406:	7bbb      	ldrb	r3, [r7, #14]
 8018408:	2b21      	cmp	r3, #33	; 0x21
 801840a:	d002      	beq.n	8018412 <HAL_I2C_EV_IRQHandler+0x23a>
 801840c:	7bbb      	ldrb	r3, [r7, #14]
 801840e:	2b29      	cmp	r3, #41	; 0x29
 8018410:	d125      	bne.n	801845e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8018412:	69fb      	ldr	r3, [r7, #28]
 8018414:	09db      	lsrs	r3, r3, #7
 8018416:	f003 0301 	and.w	r3, r3, #1
 801841a:	2b00      	cmp	r3, #0
 801841c:	d00f      	beq.n	801843e <HAL_I2C_EV_IRQHandler+0x266>
 801841e:	697b      	ldr	r3, [r7, #20]
 8018420:	0a9b      	lsrs	r3, r3, #10
 8018422:	f003 0301 	and.w	r3, r3, #1
 8018426:	2b00      	cmp	r3, #0
 8018428:	d009      	beq.n	801843e <HAL_I2C_EV_IRQHandler+0x266>
 801842a:	69fb      	ldr	r3, [r7, #28]
 801842c:	089b      	lsrs	r3, r3, #2
 801842e:	f003 0301 	and.w	r3, r3, #1
 8018432:	2b00      	cmp	r3, #0
 8018434:	d103      	bne.n	801843e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8018436:	6878      	ldr	r0, [r7, #4]
 8018438:	f000 feda 	bl	80191f0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801843c:	e039      	b.n	80184b2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801843e:	69fb      	ldr	r3, [r7, #28]
 8018440:	089b      	lsrs	r3, r3, #2
 8018442:	f003 0301 	and.w	r3, r3, #1
 8018446:	2b00      	cmp	r3, #0
 8018448:	d033      	beq.n	80184b2 <HAL_I2C_EV_IRQHandler+0x2da>
 801844a:	697b      	ldr	r3, [r7, #20]
 801844c:	0a5b      	lsrs	r3, r3, #9
 801844e:	f003 0301 	and.w	r3, r3, #1
 8018452:	2b00      	cmp	r3, #0
 8018454:	d02d      	beq.n	80184b2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8018456:	6878      	ldr	r0, [r7, #4]
 8018458:	f000 ff07 	bl	801926a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801845c:	e029      	b.n	80184b2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801845e:	69fb      	ldr	r3, [r7, #28]
 8018460:	099b      	lsrs	r3, r3, #6
 8018462:	f003 0301 	and.w	r3, r3, #1
 8018466:	2b00      	cmp	r3, #0
 8018468:	d00f      	beq.n	801848a <HAL_I2C_EV_IRQHandler+0x2b2>
 801846a:	697b      	ldr	r3, [r7, #20]
 801846c:	0a9b      	lsrs	r3, r3, #10
 801846e:	f003 0301 	and.w	r3, r3, #1
 8018472:	2b00      	cmp	r3, #0
 8018474:	d009      	beq.n	801848a <HAL_I2C_EV_IRQHandler+0x2b2>
 8018476:	69fb      	ldr	r3, [r7, #28]
 8018478:	089b      	lsrs	r3, r3, #2
 801847a:	f003 0301 	and.w	r3, r3, #1
 801847e:	2b00      	cmp	r3, #0
 8018480:	d103      	bne.n	801848a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8018482:	6878      	ldr	r0, [r7, #4]
 8018484:	f000 ff12 	bl	80192ac <I2C_SlaveReceive_RXNE>
 8018488:	e014      	b.n	80184b4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801848a:	69fb      	ldr	r3, [r7, #28]
 801848c:	089b      	lsrs	r3, r3, #2
 801848e:	f003 0301 	and.w	r3, r3, #1
 8018492:	2b00      	cmp	r3, #0
 8018494:	d00e      	beq.n	80184b4 <HAL_I2C_EV_IRQHandler+0x2dc>
 8018496:	697b      	ldr	r3, [r7, #20]
 8018498:	0a5b      	lsrs	r3, r3, #9
 801849a:	f003 0301 	and.w	r3, r3, #1
 801849e:	2b00      	cmp	r3, #0
 80184a0:	d008      	beq.n	80184b4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80184a2:	6878      	ldr	r0, [r7, #4]
 80184a4:	f000 ff40 	bl	8019328 <I2C_SlaveReceive_BTF>
 80184a8:	e004      	b.n	80184b4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80184aa:	bf00      	nop
 80184ac:	e002      	b.n	80184b4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80184ae:	bf00      	nop
 80184b0:	e000      	b.n	80184b4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80184b2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80184b4:	3720      	adds	r7, #32
 80184b6:	46bd      	mov	sp, r7
 80184b8:	bd80      	pop	{r7, pc}

080184ba <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80184ba:	b580      	push	{r7, lr}
 80184bc:	b08a      	sub	sp, #40	; 0x28
 80184be:	af00      	add	r7, sp, #0
 80184c0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80184c2:	687b      	ldr	r3, [r7, #4]
 80184c4:	681b      	ldr	r3, [r3, #0]
 80184c6:	695b      	ldr	r3, [r3, #20]
 80184c8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80184ca:	687b      	ldr	r3, [r7, #4]
 80184cc:	681b      	ldr	r3, [r3, #0]
 80184ce:	685b      	ldr	r3, [r3, #4]
 80184d0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80184d2:	2300      	movs	r3, #0
 80184d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80184d6:	687b      	ldr	r3, [r7, #4]
 80184d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80184dc:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80184de:	6a3b      	ldr	r3, [r7, #32]
 80184e0:	0a1b      	lsrs	r3, r3, #8
 80184e2:	f003 0301 	and.w	r3, r3, #1
 80184e6:	2b00      	cmp	r3, #0
 80184e8:	d00e      	beq.n	8018508 <HAL_I2C_ER_IRQHandler+0x4e>
 80184ea:	69fb      	ldr	r3, [r7, #28]
 80184ec:	0a1b      	lsrs	r3, r3, #8
 80184ee:	f003 0301 	and.w	r3, r3, #1
 80184f2:	2b00      	cmp	r3, #0
 80184f4:	d008      	beq.n	8018508 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80184f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184f8:	f043 0301 	orr.w	r3, r3, #1
 80184fc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80184fe:	687b      	ldr	r3, [r7, #4]
 8018500:	681b      	ldr	r3, [r3, #0]
 8018502:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8018506:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8018508:	6a3b      	ldr	r3, [r7, #32]
 801850a:	0a5b      	lsrs	r3, r3, #9
 801850c:	f003 0301 	and.w	r3, r3, #1
 8018510:	2b00      	cmp	r3, #0
 8018512:	d00e      	beq.n	8018532 <HAL_I2C_ER_IRQHandler+0x78>
 8018514:	69fb      	ldr	r3, [r7, #28]
 8018516:	0a1b      	lsrs	r3, r3, #8
 8018518:	f003 0301 	and.w	r3, r3, #1
 801851c:	2b00      	cmp	r3, #0
 801851e:	d008      	beq.n	8018532 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8018520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018522:	f043 0302 	orr.w	r3, r3, #2
 8018526:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8018528:	687b      	ldr	r3, [r7, #4]
 801852a:	681b      	ldr	r3, [r3, #0]
 801852c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8018530:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8018532:	6a3b      	ldr	r3, [r7, #32]
 8018534:	0a9b      	lsrs	r3, r3, #10
 8018536:	f003 0301 	and.w	r3, r3, #1
 801853a:	2b00      	cmp	r3, #0
 801853c:	d03f      	beq.n	80185be <HAL_I2C_ER_IRQHandler+0x104>
 801853e:	69fb      	ldr	r3, [r7, #28]
 8018540:	0a1b      	lsrs	r3, r3, #8
 8018542:	f003 0301 	and.w	r3, r3, #1
 8018546:	2b00      	cmp	r3, #0
 8018548:	d039      	beq.n	80185be <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 801854a:	7efb      	ldrb	r3, [r7, #27]
 801854c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 801854e:	687b      	ldr	r3, [r7, #4]
 8018550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018552:	b29b      	uxth	r3, r3
 8018554:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8018556:	687b      	ldr	r3, [r7, #4]
 8018558:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801855c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 801855e:	687b      	ldr	r3, [r7, #4]
 8018560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018562:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8018564:	7ebb      	ldrb	r3, [r7, #26]
 8018566:	2b20      	cmp	r3, #32
 8018568:	d112      	bne.n	8018590 <HAL_I2C_ER_IRQHandler+0xd6>
 801856a:	697b      	ldr	r3, [r7, #20]
 801856c:	2b00      	cmp	r3, #0
 801856e:	d10f      	bne.n	8018590 <HAL_I2C_ER_IRQHandler+0xd6>
 8018570:	7cfb      	ldrb	r3, [r7, #19]
 8018572:	2b21      	cmp	r3, #33	; 0x21
 8018574:	d008      	beq.n	8018588 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8018576:	7cfb      	ldrb	r3, [r7, #19]
 8018578:	2b29      	cmp	r3, #41	; 0x29
 801857a:	d005      	beq.n	8018588 <HAL_I2C_ER_IRQHandler+0xce>
 801857c:	7cfb      	ldrb	r3, [r7, #19]
 801857e:	2b28      	cmp	r3, #40	; 0x28
 8018580:	d106      	bne.n	8018590 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8018582:	68fb      	ldr	r3, [r7, #12]
 8018584:	2b21      	cmp	r3, #33	; 0x21
 8018586:	d103      	bne.n	8018590 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8018588:	6878      	ldr	r0, [r7, #4]
 801858a:	f001 f869 	bl	8019660 <I2C_Slave_AF>
 801858e:	e016      	b.n	80185be <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8018590:	687b      	ldr	r3, [r7, #4]
 8018592:	681b      	ldr	r3, [r3, #0]
 8018594:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8018598:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 801859a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801859c:	f043 0304 	orr.w	r3, r3, #4
 80185a0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80185a2:	7efb      	ldrb	r3, [r7, #27]
 80185a4:	2b10      	cmp	r3, #16
 80185a6:	d002      	beq.n	80185ae <HAL_I2C_ER_IRQHandler+0xf4>
 80185a8:	7efb      	ldrb	r3, [r7, #27]
 80185aa:	2b40      	cmp	r3, #64	; 0x40
 80185ac:	d107      	bne.n	80185be <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80185ae:	687b      	ldr	r3, [r7, #4]
 80185b0:	681b      	ldr	r3, [r3, #0]
 80185b2:	681a      	ldr	r2, [r3, #0]
 80185b4:	687b      	ldr	r3, [r7, #4]
 80185b6:	681b      	ldr	r3, [r3, #0]
 80185b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80185bc:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80185be:	6a3b      	ldr	r3, [r7, #32]
 80185c0:	0adb      	lsrs	r3, r3, #11
 80185c2:	f003 0301 	and.w	r3, r3, #1
 80185c6:	2b00      	cmp	r3, #0
 80185c8:	d00e      	beq.n	80185e8 <HAL_I2C_ER_IRQHandler+0x12e>
 80185ca:	69fb      	ldr	r3, [r7, #28]
 80185cc:	0a1b      	lsrs	r3, r3, #8
 80185ce:	f003 0301 	and.w	r3, r3, #1
 80185d2:	2b00      	cmp	r3, #0
 80185d4:	d008      	beq.n	80185e8 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80185d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185d8:	f043 0308 	orr.w	r3, r3, #8
 80185dc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80185de:	687b      	ldr	r3, [r7, #4]
 80185e0:	681b      	ldr	r3, [r3, #0]
 80185e2:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80185e6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80185e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185ea:	2b00      	cmp	r3, #0
 80185ec:	d008      	beq.n	8018600 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80185ee:	687b      	ldr	r3, [r7, #4]
 80185f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80185f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185f4:	431a      	orrs	r2, r3
 80185f6:	687b      	ldr	r3, [r7, #4]
 80185f8:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80185fa:	6878      	ldr	r0, [r7, #4]
 80185fc:	f001 f8a0 	bl	8019740 <I2C_ITError>
  }
}
 8018600:	bf00      	nop
 8018602:	3728      	adds	r7, #40	; 0x28
 8018604:	46bd      	mov	sp, r7
 8018606:	bd80      	pop	{r7, pc}

08018608 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8018608:	b480      	push	{r7}
 801860a:	b083      	sub	sp, #12
 801860c:	af00      	add	r7, sp, #0
 801860e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8018610:	bf00      	nop
 8018612:	370c      	adds	r7, #12
 8018614:	46bd      	mov	sp, r7
 8018616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801861a:	4770      	bx	lr

0801861c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801861c:	b480      	push	{r7}
 801861e:	b083      	sub	sp, #12
 8018620:	af00      	add	r7, sp, #0
 8018622:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8018624:	bf00      	nop
 8018626:	370c      	adds	r7, #12
 8018628:	46bd      	mov	sp, r7
 801862a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801862e:	4770      	bx	lr

08018630 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8018630:	b480      	push	{r7}
 8018632:	b083      	sub	sp, #12
 8018634:	af00      	add	r7, sp, #0
 8018636:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8018638:	bf00      	nop
 801863a:	370c      	adds	r7, #12
 801863c:	46bd      	mov	sp, r7
 801863e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018642:	4770      	bx	lr

08018644 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8018644:	b480      	push	{r7}
 8018646:	b083      	sub	sp, #12
 8018648:	af00      	add	r7, sp, #0
 801864a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 801864c:	bf00      	nop
 801864e:	370c      	adds	r7, #12
 8018650:	46bd      	mov	sp, r7
 8018652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018656:	4770      	bx	lr

08018658 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8018658:	b480      	push	{r7}
 801865a:	b083      	sub	sp, #12
 801865c:	af00      	add	r7, sp, #0
 801865e:	6078      	str	r0, [r7, #4]
 8018660:	460b      	mov	r3, r1
 8018662:	70fb      	strb	r3, [r7, #3]
 8018664:	4613      	mov	r3, r2
 8018666:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8018668:	bf00      	nop
 801866a:	370c      	adds	r7, #12
 801866c:	46bd      	mov	sp, r7
 801866e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018672:	4770      	bx	lr

08018674 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8018674:	b480      	push	{r7}
 8018676:	b083      	sub	sp, #12
 8018678:	af00      	add	r7, sp, #0
 801867a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 801867c:	bf00      	nop
 801867e:	370c      	adds	r7, #12
 8018680:	46bd      	mov	sp, r7
 8018682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018686:	4770      	bx	lr

08018688 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8018688:	b480      	push	{r7}
 801868a:	b083      	sub	sp, #12
 801868c:	af00      	add	r7, sp, #0
 801868e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8018690:	bf00      	nop
 8018692:	370c      	adds	r7, #12
 8018694:	46bd      	mov	sp, r7
 8018696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801869a:	4770      	bx	lr

0801869c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801869c:	b480      	push	{r7}
 801869e:	b083      	sub	sp, #12
 80186a0:	af00      	add	r7, sp, #0
 80186a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80186a4:	bf00      	nop
 80186a6:	370c      	adds	r7, #12
 80186a8:	46bd      	mov	sp, r7
 80186aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186ae:	4770      	bx	lr

080186b0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80186b0:	b480      	push	{r7}
 80186b2:	b083      	sub	sp, #12
 80186b4:	af00      	add	r7, sp, #0
 80186b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80186b8:	bf00      	nop
 80186ba:	370c      	adds	r7, #12
 80186bc:	46bd      	mov	sp, r7
 80186be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186c2:	4770      	bx	lr

080186c4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80186c4:	b480      	push	{r7}
 80186c6:	b083      	sub	sp, #12
 80186c8:	af00      	add	r7, sp, #0
 80186ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80186cc:	bf00      	nop
 80186ce:	370c      	adds	r7, #12
 80186d0:	46bd      	mov	sp, r7
 80186d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186d6:	4770      	bx	lr

080186d8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80186d8:	b580      	push	{r7, lr}
 80186da:	b084      	sub	sp, #16
 80186dc:	af00      	add	r7, sp, #0
 80186de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80186e0:	687b      	ldr	r3, [r7, #4]
 80186e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80186e6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80186e8:	687b      	ldr	r3, [r7, #4]
 80186ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80186ee:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80186f0:	687b      	ldr	r3, [r7, #4]
 80186f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80186f4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80186f6:	687b      	ldr	r3, [r7, #4]
 80186f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80186fa:	2b00      	cmp	r3, #0
 80186fc:	d150      	bne.n	80187a0 <I2C_MasterTransmit_TXE+0xc8>
 80186fe:	7bfb      	ldrb	r3, [r7, #15]
 8018700:	2b21      	cmp	r3, #33	; 0x21
 8018702:	d14d      	bne.n	80187a0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8018704:	68bb      	ldr	r3, [r7, #8]
 8018706:	2b08      	cmp	r3, #8
 8018708:	d01d      	beq.n	8018746 <I2C_MasterTransmit_TXE+0x6e>
 801870a:	68bb      	ldr	r3, [r7, #8]
 801870c:	2b20      	cmp	r3, #32
 801870e:	d01a      	beq.n	8018746 <I2C_MasterTransmit_TXE+0x6e>
 8018710:	68bb      	ldr	r3, [r7, #8]
 8018712:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8018716:	d016      	beq.n	8018746 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8018718:	687b      	ldr	r3, [r7, #4]
 801871a:	681b      	ldr	r3, [r3, #0]
 801871c:	685a      	ldr	r2, [r3, #4]
 801871e:	687b      	ldr	r3, [r7, #4]
 8018720:	681b      	ldr	r3, [r3, #0]
 8018722:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8018726:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8018728:	687b      	ldr	r3, [r7, #4]
 801872a:	2211      	movs	r2, #17
 801872c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801872e:	687b      	ldr	r3, [r7, #4]
 8018730:	2200      	movs	r2, #0
 8018732:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8018736:	687b      	ldr	r3, [r7, #4]
 8018738:	2220      	movs	r2, #32
 801873a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 801873e:	6878      	ldr	r0, [r7, #4]
 8018740:	f7ff ff62 	bl	8018608 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8018744:	e060      	b.n	8018808 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8018746:	687b      	ldr	r3, [r7, #4]
 8018748:	681b      	ldr	r3, [r3, #0]
 801874a:	685a      	ldr	r2, [r3, #4]
 801874c:	687b      	ldr	r3, [r7, #4]
 801874e:	681b      	ldr	r3, [r3, #0]
 8018750:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8018754:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8018756:	687b      	ldr	r3, [r7, #4]
 8018758:	681b      	ldr	r3, [r3, #0]
 801875a:	681a      	ldr	r2, [r3, #0]
 801875c:	687b      	ldr	r3, [r7, #4]
 801875e:	681b      	ldr	r3, [r3, #0]
 8018760:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018764:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8018766:	687b      	ldr	r3, [r7, #4]
 8018768:	2200      	movs	r2, #0
 801876a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 801876c:	687b      	ldr	r3, [r7, #4]
 801876e:	2220      	movs	r2, #32
 8018770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8018774:	687b      	ldr	r3, [r7, #4]
 8018776:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801877a:	b2db      	uxtb	r3, r3
 801877c:	2b40      	cmp	r3, #64	; 0x40
 801877e:	d107      	bne.n	8018790 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8018780:	687b      	ldr	r3, [r7, #4]
 8018782:	2200      	movs	r2, #0
 8018784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8018788:	6878      	ldr	r0, [r7, #4]
 801878a:	f7ff ff7d 	bl	8018688 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801878e:	e03b      	b.n	8018808 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8018790:	687b      	ldr	r3, [r7, #4]
 8018792:	2200      	movs	r2, #0
 8018794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8018798:	6878      	ldr	r0, [r7, #4]
 801879a:	f7ff ff35 	bl	8018608 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801879e:	e033      	b.n	8018808 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80187a0:	7bfb      	ldrb	r3, [r7, #15]
 80187a2:	2b21      	cmp	r3, #33	; 0x21
 80187a4:	d005      	beq.n	80187b2 <I2C_MasterTransmit_TXE+0xda>
 80187a6:	7bbb      	ldrb	r3, [r7, #14]
 80187a8:	2b40      	cmp	r3, #64	; 0x40
 80187aa:	d12d      	bne.n	8018808 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80187ac:	7bfb      	ldrb	r3, [r7, #15]
 80187ae:	2b22      	cmp	r3, #34	; 0x22
 80187b0:	d12a      	bne.n	8018808 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80187b2:	687b      	ldr	r3, [r7, #4]
 80187b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80187b6:	b29b      	uxth	r3, r3
 80187b8:	2b00      	cmp	r3, #0
 80187ba:	d108      	bne.n	80187ce <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80187bc:	687b      	ldr	r3, [r7, #4]
 80187be:	681b      	ldr	r3, [r3, #0]
 80187c0:	685a      	ldr	r2, [r3, #4]
 80187c2:	687b      	ldr	r3, [r7, #4]
 80187c4:	681b      	ldr	r3, [r3, #0]
 80187c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80187ca:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80187cc:	e01c      	b.n	8018808 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80187ce:	687b      	ldr	r3, [r7, #4]
 80187d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80187d4:	b2db      	uxtb	r3, r3
 80187d6:	2b40      	cmp	r3, #64	; 0x40
 80187d8:	d103      	bne.n	80187e2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80187da:	6878      	ldr	r0, [r7, #4]
 80187dc:	f000 f88e 	bl	80188fc <I2C_MemoryTransmit_TXE_BTF>
}
 80187e0:	e012      	b.n	8018808 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80187e2:	687b      	ldr	r3, [r7, #4]
 80187e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80187e6:	781a      	ldrb	r2, [r3, #0]
 80187e8:	687b      	ldr	r3, [r7, #4]
 80187ea:	681b      	ldr	r3, [r3, #0]
 80187ec:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80187ee:	687b      	ldr	r3, [r7, #4]
 80187f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80187f2:	1c5a      	adds	r2, r3, #1
 80187f4:	687b      	ldr	r3, [r7, #4]
 80187f6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80187f8:	687b      	ldr	r3, [r7, #4]
 80187fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80187fc:	b29b      	uxth	r3, r3
 80187fe:	3b01      	subs	r3, #1
 8018800:	b29a      	uxth	r2, r3
 8018802:	687b      	ldr	r3, [r7, #4]
 8018804:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8018806:	e7ff      	b.n	8018808 <I2C_MasterTransmit_TXE+0x130>
 8018808:	bf00      	nop
 801880a:	3710      	adds	r7, #16
 801880c:	46bd      	mov	sp, r7
 801880e:	bd80      	pop	{r7, pc}

08018810 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8018810:	b580      	push	{r7, lr}
 8018812:	b084      	sub	sp, #16
 8018814:	af00      	add	r7, sp, #0
 8018816:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8018818:	687b      	ldr	r3, [r7, #4]
 801881a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801881c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 801881e:	687b      	ldr	r3, [r7, #4]
 8018820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018824:	b2db      	uxtb	r3, r3
 8018826:	2b21      	cmp	r3, #33	; 0x21
 8018828:	d164      	bne.n	80188f4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 801882a:	687b      	ldr	r3, [r7, #4]
 801882c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801882e:	b29b      	uxth	r3, r3
 8018830:	2b00      	cmp	r3, #0
 8018832:	d012      	beq.n	801885a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8018834:	687b      	ldr	r3, [r7, #4]
 8018836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018838:	781a      	ldrb	r2, [r3, #0]
 801883a:	687b      	ldr	r3, [r7, #4]
 801883c:	681b      	ldr	r3, [r3, #0]
 801883e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8018840:	687b      	ldr	r3, [r7, #4]
 8018842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018844:	1c5a      	adds	r2, r3, #1
 8018846:	687b      	ldr	r3, [r7, #4]
 8018848:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 801884a:	687b      	ldr	r3, [r7, #4]
 801884c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801884e:	b29b      	uxth	r3, r3
 8018850:	3b01      	subs	r3, #1
 8018852:	b29a      	uxth	r2, r3
 8018854:	687b      	ldr	r3, [r7, #4]
 8018856:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8018858:	e04c      	b.n	80188f4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801885a:	68fb      	ldr	r3, [r7, #12]
 801885c:	2b08      	cmp	r3, #8
 801885e:	d01d      	beq.n	801889c <I2C_MasterTransmit_BTF+0x8c>
 8018860:	68fb      	ldr	r3, [r7, #12]
 8018862:	2b20      	cmp	r3, #32
 8018864:	d01a      	beq.n	801889c <I2C_MasterTransmit_BTF+0x8c>
 8018866:	68fb      	ldr	r3, [r7, #12]
 8018868:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801886c:	d016      	beq.n	801889c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801886e:	687b      	ldr	r3, [r7, #4]
 8018870:	681b      	ldr	r3, [r3, #0]
 8018872:	685a      	ldr	r2, [r3, #4]
 8018874:	687b      	ldr	r3, [r7, #4]
 8018876:	681b      	ldr	r3, [r3, #0]
 8018878:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801887c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 801887e:	687b      	ldr	r3, [r7, #4]
 8018880:	2211      	movs	r2, #17
 8018882:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8018884:	687b      	ldr	r3, [r7, #4]
 8018886:	2200      	movs	r2, #0
 8018888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 801888c:	687b      	ldr	r3, [r7, #4]
 801888e:	2220      	movs	r2, #32
 8018890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8018894:	6878      	ldr	r0, [r7, #4]
 8018896:	f7ff feb7 	bl	8018608 <HAL_I2C_MasterTxCpltCallback>
}
 801889a:	e02b      	b.n	80188f4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801889c:	687b      	ldr	r3, [r7, #4]
 801889e:	681b      	ldr	r3, [r3, #0]
 80188a0:	685a      	ldr	r2, [r3, #4]
 80188a2:	687b      	ldr	r3, [r7, #4]
 80188a4:	681b      	ldr	r3, [r3, #0]
 80188a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80188aa:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80188ac:	687b      	ldr	r3, [r7, #4]
 80188ae:	681b      	ldr	r3, [r3, #0]
 80188b0:	681a      	ldr	r2, [r3, #0]
 80188b2:	687b      	ldr	r3, [r7, #4]
 80188b4:	681b      	ldr	r3, [r3, #0]
 80188b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80188ba:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80188bc:	687b      	ldr	r3, [r7, #4]
 80188be:	2200      	movs	r2, #0
 80188c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80188c2:	687b      	ldr	r3, [r7, #4]
 80188c4:	2220      	movs	r2, #32
 80188c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80188ca:	687b      	ldr	r3, [r7, #4]
 80188cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80188d0:	b2db      	uxtb	r3, r3
 80188d2:	2b40      	cmp	r3, #64	; 0x40
 80188d4:	d107      	bne.n	80188e6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80188d6:	687b      	ldr	r3, [r7, #4]
 80188d8:	2200      	movs	r2, #0
 80188da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80188de:	6878      	ldr	r0, [r7, #4]
 80188e0:	f7ff fed2 	bl	8018688 <HAL_I2C_MemTxCpltCallback>
}
 80188e4:	e006      	b.n	80188f4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80188e6:	687b      	ldr	r3, [r7, #4]
 80188e8:	2200      	movs	r2, #0
 80188ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80188ee:	6878      	ldr	r0, [r7, #4]
 80188f0:	f7ff fe8a 	bl	8018608 <HAL_I2C_MasterTxCpltCallback>
}
 80188f4:	bf00      	nop
 80188f6:	3710      	adds	r7, #16
 80188f8:	46bd      	mov	sp, r7
 80188fa:	bd80      	pop	{r7, pc}

080188fc <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80188fc:	b580      	push	{r7, lr}
 80188fe:	b084      	sub	sp, #16
 8018900:	af00      	add	r7, sp, #0
 8018902:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8018904:	687b      	ldr	r3, [r7, #4]
 8018906:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801890a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 801890c:	687b      	ldr	r3, [r7, #4]
 801890e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018910:	2b00      	cmp	r3, #0
 8018912:	d11d      	bne.n	8018950 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8018914:	687b      	ldr	r3, [r7, #4]
 8018916:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018918:	2b01      	cmp	r3, #1
 801891a:	d10b      	bne.n	8018934 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 801891c:	687b      	ldr	r3, [r7, #4]
 801891e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018920:	b2da      	uxtb	r2, r3
 8018922:	687b      	ldr	r3, [r7, #4]
 8018924:	681b      	ldr	r3, [r3, #0]
 8018926:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8018928:	687b      	ldr	r3, [r7, #4]
 801892a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801892c:	1c9a      	adds	r2, r3, #2
 801892e:	687b      	ldr	r3, [r7, #4]
 8018930:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8018932:	e073      	b.n	8018a1c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8018934:	687b      	ldr	r3, [r7, #4]
 8018936:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018938:	b29b      	uxth	r3, r3
 801893a:	121b      	asrs	r3, r3, #8
 801893c:	b2da      	uxtb	r2, r3
 801893e:	687b      	ldr	r3, [r7, #4]
 8018940:	681b      	ldr	r3, [r3, #0]
 8018942:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8018944:	687b      	ldr	r3, [r7, #4]
 8018946:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018948:	1c5a      	adds	r2, r3, #1
 801894a:	687b      	ldr	r3, [r7, #4]
 801894c:	651a      	str	r2, [r3, #80]	; 0x50
}
 801894e:	e065      	b.n	8018a1c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8018950:	687b      	ldr	r3, [r7, #4]
 8018952:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018954:	2b01      	cmp	r3, #1
 8018956:	d10b      	bne.n	8018970 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8018958:	687b      	ldr	r3, [r7, #4]
 801895a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801895c:	b2da      	uxtb	r2, r3
 801895e:	687b      	ldr	r3, [r7, #4]
 8018960:	681b      	ldr	r3, [r3, #0]
 8018962:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8018964:	687b      	ldr	r3, [r7, #4]
 8018966:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018968:	1c5a      	adds	r2, r3, #1
 801896a:	687b      	ldr	r3, [r7, #4]
 801896c:	651a      	str	r2, [r3, #80]	; 0x50
}
 801896e:	e055      	b.n	8018a1c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8018970:	687b      	ldr	r3, [r7, #4]
 8018972:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018974:	2b02      	cmp	r3, #2
 8018976:	d151      	bne.n	8018a1c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8018978:	7bfb      	ldrb	r3, [r7, #15]
 801897a:	2b22      	cmp	r3, #34	; 0x22
 801897c:	d10d      	bne.n	801899a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 801897e:	687b      	ldr	r3, [r7, #4]
 8018980:	681b      	ldr	r3, [r3, #0]
 8018982:	681a      	ldr	r2, [r3, #0]
 8018984:	687b      	ldr	r3, [r7, #4]
 8018986:	681b      	ldr	r3, [r3, #0]
 8018988:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801898c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 801898e:	687b      	ldr	r3, [r7, #4]
 8018990:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018992:	1c5a      	adds	r2, r3, #1
 8018994:	687b      	ldr	r3, [r7, #4]
 8018996:	651a      	str	r2, [r3, #80]	; 0x50
}
 8018998:	e040      	b.n	8018a1c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 801899a:	687b      	ldr	r3, [r7, #4]
 801899c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801899e:	b29b      	uxth	r3, r3
 80189a0:	2b00      	cmp	r3, #0
 80189a2:	d015      	beq.n	80189d0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80189a4:	7bfb      	ldrb	r3, [r7, #15]
 80189a6:	2b21      	cmp	r3, #33	; 0x21
 80189a8:	d112      	bne.n	80189d0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80189aa:	687b      	ldr	r3, [r7, #4]
 80189ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189ae:	781a      	ldrb	r2, [r3, #0]
 80189b0:	687b      	ldr	r3, [r7, #4]
 80189b2:	681b      	ldr	r3, [r3, #0]
 80189b4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80189b6:	687b      	ldr	r3, [r7, #4]
 80189b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189ba:	1c5a      	adds	r2, r3, #1
 80189bc:	687b      	ldr	r3, [r7, #4]
 80189be:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80189c0:	687b      	ldr	r3, [r7, #4]
 80189c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80189c4:	b29b      	uxth	r3, r3
 80189c6:	3b01      	subs	r3, #1
 80189c8:	b29a      	uxth	r2, r3
 80189ca:	687b      	ldr	r3, [r7, #4]
 80189cc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80189ce:	e025      	b.n	8018a1c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80189d0:	687b      	ldr	r3, [r7, #4]
 80189d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80189d4:	b29b      	uxth	r3, r3
 80189d6:	2b00      	cmp	r3, #0
 80189d8:	d120      	bne.n	8018a1c <I2C_MemoryTransmit_TXE_BTF+0x120>
 80189da:	7bfb      	ldrb	r3, [r7, #15]
 80189dc:	2b21      	cmp	r3, #33	; 0x21
 80189de:	d11d      	bne.n	8018a1c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80189e0:	687b      	ldr	r3, [r7, #4]
 80189e2:	681b      	ldr	r3, [r3, #0]
 80189e4:	685a      	ldr	r2, [r3, #4]
 80189e6:	687b      	ldr	r3, [r7, #4]
 80189e8:	681b      	ldr	r3, [r3, #0]
 80189ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80189ee:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80189f0:	687b      	ldr	r3, [r7, #4]
 80189f2:	681b      	ldr	r3, [r3, #0]
 80189f4:	681a      	ldr	r2, [r3, #0]
 80189f6:	687b      	ldr	r3, [r7, #4]
 80189f8:	681b      	ldr	r3, [r3, #0]
 80189fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80189fe:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8018a00:	687b      	ldr	r3, [r7, #4]
 8018a02:	2200      	movs	r2, #0
 8018a04:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8018a06:	687b      	ldr	r3, [r7, #4]
 8018a08:	2220      	movs	r2, #32
 8018a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8018a0e:	687b      	ldr	r3, [r7, #4]
 8018a10:	2200      	movs	r2, #0
 8018a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8018a16:	6878      	ldr	r0, [r7, #4]
 8018a18:	f7ff fe36 	bl	8018688 <HAL_I2C_MemTxCpltCallback>
}
 8018a1c:	bf00      	nop
 8018a1e:	3710      	adds	r7, #16
 8018a20:	46bd      	mov	sp, r7
 8018a22:	bd80      	pop	{r7, pc}

08018a24 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8018a24:	b580      	push	{r7, lr}
 8018a26:	b084      	sub	sp, #16
 8018a28:	af00      	add	r7, sp, #0
 8018a2a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8018a2c:	687b      	ldr	r3, [r7, #4]
 8018a2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018a32:	b2db      	uxtb	r3, r3
 8018a34:	2b22      	cmp	r3, #34	; 0x22
 8018a36:	f040 80ac 	bne.w	8018b92 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8018a3a:	687b      	ldr	r3, [r7, #4]
 8018a3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018a3e:	b29b      	uxth	r3, r3
 8018a40:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8018a42:	68fb      	ldr	r3, [r7, #12]
 8018a44:	2b03      	cmp	r3, #3
 8018a46:	d921      	bls.n	8018a8c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018a48:	687b      	ldr	r3, [r7, #4]
 8018a4a:	681b      	ldr	r3, [r3, #0]
 8018a4c:	691a      	ldr	r2, [r3, #16]
 8018a4e:	687b      	ldr	r3, [r7, #4]
 8018a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a52:	b2d2      	uxtb	r2, r2
 8018a54:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8018a56:	687b      	ldr	r3, [r7, #4]
 8018a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a5a:	1c5a      	adds	r2, r3, #1
 8018a5c:	687b      	ldr	r3, [r7, #4]
 8018a5e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8018a60:	687b      	ldr	r3, [r7, #4]
 8018a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018a64:	b29b      	uxth	r3, r3
 8018a66:	3b01      	subs	r3, #1
 8018a68:	b29a      	uxth	r2, r3
 8018a6a:	687b      	ldr	r3, [r7, #4]
 8018a6c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8018a6e:	687b      	ldr	r3, [r7, #4]
 8018a70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018a72:	b29b      	uxth	r3, r3
 8018a74:	2b03      	cmp	r3, #3
 8018a76:	f040 808c 	bne.w	8018b92 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8018a7a:	687b      	ldr	r3, [r7, #4]
 8018a7c:	681b      	ldr	r3, [r3, #0]
 8018a7e:	685a      	ldr	r2, [r3, #4]
 8018a80:	687b      	ldr	r3, [r7, #4]
 8018a82:	681b      	ldr	r3, [r3, #0]
 8018a84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018a88:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8018a8a:	e082      	b.n	8018b92 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8018a8c:	687b      	ldr	r3, [r7, #4]
 8018a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018a90:	2b02      	cmp	r3, #2
 8018a92:	d075      	beq.n	8018b80 <I2C_MasterReceive_RXNE+0x15c>
 8018a94:	68fb      	ldr	r3, [r7, #12]
 8018a96:	2b01      	cmp	r3, #1
 8018a98:	d002      	beq.n	8018aa0 <I2C_MasterReceive_RXNE+0x7c>
 8018a9a:	68fb      	ldr	r3, [r7, #12]
 8018a9c:	2b00      	cmp	r3, #0
 8018a9e:	d16f      	bne.n	8018b80 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8018aa0:	6878      	ldr	r0, [r7, #4]
 8018aa2:	f001 fafd 	bl	801a0a0 <I2C_WaitOnSTOPRequestThroughIT>
 8018aa6:	4603      	mov	r3, r0
 8018aa8:	2b00      	cmp	r3, #0
 8018aaa:	d142      	bne.n	8018b32 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018aac:	687b      	ldr	r3, [r7, #4]
 8018aae:	681b      	ldr	r3, [r3, #0]
 8018ab0:	681a      	ldr	r2, [r3, #0]
 8018ab2:	687b      	ldr	r3, [r7, #4]
 8018ab4:	681b      	ldr	r3, [r3, #0]
 8018ab6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018aba:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8018abc:	687b      	ldr	r3, [r7, #4]
 8018abe:	681b      	ldr	r3, [r3, #0]
 8018ac0:	685a      	ldr	r2, [r3, #4]
 8018ac2:	687b      	ldr	r3, [r7, #4]
 8018ac4:	681b      	ldr	r3, [r3, #0]
 8018ac6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8018aca:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018acc:	687b      	ldr	r3, [r7, #4]
 8018ace:	681b      	ldr	r3, [r3, #0]
 8018ad0:	691a      	ldr	r2, [r3, #16]
 8018ad2:	687b      	ldr	r3, [r7, #4]
 8018ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ad6:	b2d2      	uxtb	r2, r2
 8018ad8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8018ada:	687b      	ldr	r3, [r7, #4]
 8018adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ade:	1c5a      	adds	r2, r3, #1
 8018ae0:	687b      	ldr	r3, [r7, #4]
 8018ae2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8018ae4:	687b      	ldr	r3, [r7, #4]
 8018ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018ae8:	b29b      	uxth	r3, r3
 8018aea:	3b01      	subs	r3, #1
 8018aec:	b29a      	uxth	r2, r3
 8018aee:	687b      	ldr	r3, [r7, #4]
 8018af0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8018af2:	687b      	ldr	r3, [r7, #4]
 8018af4:	2220      	movs	r2, #32
 8018af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8018afa:	687b      	ldr	r3, [r7, #4]
 8018afc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8018b00:	b2db      	uxtb	r3, r3
 8018b02:	2b40      	cmp	r3, #64	; 0x40
 8018b04:	d10a      	bne.n	8018b1c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8018b06:	687b      	ldr	r3, [r7, #4]
 8018b08:	2200      	movs	r2, #0
 8018b0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8018b0e:	687b      	ldr	r3, [r7, #4]
 8018b10:	2200      	movs	r2, #0
 8018b12:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8018b14:	6878      	ldr	r0, [r7, #4]
 8018b16:	f7ff fdc1 	bl	801869c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8018b1a:	e03a      	b.n	8018b92 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8018b1c:	687b      	ldr	r3, [r7, #4]
 8018b1e:	2200      	movs	r2, #0
 8018b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8018b24:	687b      	ldr	r3, [r7, #4]
 8018b26:	2212      	movs	r2, #18
 8018b28:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8018b2a:	6878      	ldr	r0, [r7, #4]
 8018b2c:	f7ff fd76 	bl	801861c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8018b30:	e02f      	b.n	8018b92 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8018b32:	687b      	ldr	r3, [r7, #4]
 8018b34:	681b      	ldr	r3, [r3, #0]
 8018b36:	685a      	ldr	r2, [r3, #4]
 8018b38:	687b      	ldr	r3, [r7, #4]
 8018b3a:	681b      	ldr	r3, [r3, #0]
 8018b3c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8018b40:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018b42:	687b      	ldr	r3, [r7, #4]
 8018b44:	681b      	ldr	r3, [r3, #0]
 8018b46:	691a      	ldr	r2, [r3, #16]
 8018b48:	687b      	ldr	r3, [r7, #4]
 8018b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b4c:	b2d2      	uxtb	r2, r2
 8018b4e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8018b50:	687b      	ldr	r3, [r7, #4]
 8018b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b54:	1c5a      	adds	r2, r3, #1
 8018b56:	687b      	ldr	r3, [r7, #4]
 8018b58:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8018b5a:	687b      	ldr	r3, [r7, #4]
 8018b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018b5e:	b29b      	uxth	r3, r3
 8018b60:	3b01      	subs	r3, #1
 8018b62:	b29a      	uxth	r2, r3
 8018b64:	687b      	ldr	r3, [r7, #4]
 8018b66:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8018b68:	687b      	ldr	r3, [r7, #4]
 8018b6a:	2220      	movs	r2, #32
 8018b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8018b70:	687b      	ldr	r3, [r7, #4]
 8018b72:	2200      	movs	r2, #0
 8018b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8018b78:	6878      	ldr	r0, [r7, #4]
 8018b7a:	f7ff fd99 	bl	80186b0 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8018b7e:	e008      	b.n	8018b92 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8018b80:	687b      	ldr	r3, [r7, #4]
 8018b82:	681b      	ldr	r3, [r3, #0]
 8018b84:	685a      	ldr	r2, [r3, #4]
 8018b86:	687b      	ldr	r3, [r7, #4]
 8018b88:	681b      	ldr	r3, [r3, #0]
 8018b8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018b8e:	605a      	str	r2, [r3, #4]
}
 8018b90:	e7ff      	b.n	8018b92 <I2C_MasterReceive_RXNE+0x16e>
 8018b92:	bf00      	nop
 8018b94:	3710      	adds	r7, #16
 8018b96:	46bd      	mov	sp, r7
 8018b98:	bd80      	pop	{r7, pc}

08018b9a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8018b9a:	b580      	push	{r7, lr}
 8018b9c:	b084      	sub	sp, #16
 8018b9e:	af00      	add	r7, sp, #0
 8018ba0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8018ba2:	687b      	ldr	r3, [r7, #4]
 8018ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018ba6:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8018ba8:	687b      	ldr	r3, [r7, #4]
 8018baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018bac:	b29b      	uxth	r3, r3
 8018bae:	2b04      	cmp	r3, #4
 8018bb0:	d11b      	bne.n	8018bea <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8018bb2:	687b      	ldr	r3, [r7, #4]
 8018bb4:	681b      	ldr	r3, [r3, #0]
 8018bb6:	685a      	ldr	r2, [r3, #4]
 8018bb8:	687b      	ldr	r3, [r7, #4]
 8018bba:	681b      	ldr	r3, [r3, #0]
 8018bbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018bc0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018bc2:	687b      	ldr	r3, [r7, #4]
 8018bc4:	681b      	ldr	r3, [r3, #0]
 8018bc6:	691a      	ldr	r2, [r3, #16]
 8018bc8:	687b      	ldr	r3, [r7, #4]
 8018bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018bcc:	b2d2      	uxtb	r2, r2
 8018bce:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8018bd0:	687b      	ldr	r3, [r7, #4]
 8018bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018bd4:	1c5a      	adds	r2, r3, #1
 8018bd6:	687b      	ldr	r3, [r7, #4]
 8018bd8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8018bda:	687b      	ldr	r3, [r7, #4]
 8018bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018bde:	b29b      	uxth	r3, r3
 8018be0:	3b01      	subs	r3, #1
 8018be2:	b29a      	uxth	r2, r3
 8018be4:	687b      	ldr	r3, [r7, #4]
 8018be6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8018be8:	e0bd      	b.n	8018d66 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8018bea:	687b      	ldr	r3, [r7, #4]
 8018bec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018bee:	b29b      	uxth	r3, r3
 8018bf0:	2b03      	cmp	r3, #3
 8018bf2:	d129      	bne.n	8018c48 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8018bf4:	687b      	ldr	r3, [r7, #4]
 8018bf6:	681b      	ldr	r3, [r3, #0]
 8018bf8:	685a      	ldr	r2, [r3, #4]
 8018bfa:	687b      	ldr	r3, [r7, #4]
 8018bfc:	681b      	ldr	r3, [r3, #0]
 8018bfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018c02:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8018c04:	68fb      	ldr	r3, [r7, #12]
 8018c06:	2b04      	cmp	r3, #4
 8018c08:	d00a      	beq.n	8018c20 <I2C_MasterReceive_BTF+0x86>
 8018c0a:	68fb      	ldr	r3, [r7, #12]
 8018c0c:	2b02      	cmp	r3, #2
 8018c0e:	d007      	beq.n	8018c20 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018c10:	687b      	ldr	r3, [r7, #4]
 8018c12:	681b      	ldr	r3, [r3, #0]
 8018c14:	681a      	ldr	r2, [r3, #0]
 8018c16:	687b      	ldr	r3, [r7, #4]
 8018c18:	681b      	ldr	r3, [r3, #0]
 8018c1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018c1e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018c20:	687b      	ldr	r3, [r7, #4]
 8018c22:	681b      	ldr	r3, [r3, #0]
 8018c24:	691a      	ldr	r2, [r3, #16]
 8018c26:	687b      	ldr	r3, [r7, #4]
 8018c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c2a:	b2d2      	uxtb	r2, r2
 8018c2c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8018c2e:	687b      	ldr	r3, [r7, #4]
 8018c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c32:	1c5a      	adds	r2, r3, #1
 8018c34:	687b      	ldr	r3, [r7, #4]
 8018c36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8018c38:	687b      	ldr	r3, [r7, #4]
 8018c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018c3c:	b29b      	uxth	r3, r3
 8018c3e:	3b01      	subs	r3, #1
 8018c40:	b29a      	uxth	r2, r3
 8018c42:	687b      	ldr	r3, [r7, #4]
 8018c44:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8018c46:	e08e      	b.n	8018d66 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8018c48:	687b      	ldr	r3, [r7, #4]
 8018c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018c4c:	b29b      	uxth	r3, r3
 8018c4e:	2b02      	cmp	r3, #2
 8018c50:	d176      	bne.n	8018d40 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8018c52:	68fb      	ldr	r3, [r7, #12]
 8018c54:	2b01      	cmp	r3, #1
 8018c56:	d002      	beq.n	8018c5e <I2C_MasterReceive_BTF+0xc4>
 8018c58:	68fb      	ldr	r3, [r7, #12]
 8018c5a:	2b10      	cmp	r3, #16
 8018c5c:	d108      	bne.n	8018c70 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018c5e:	687b      	ldr	r3, [r7, #4]
 8018c60:	681b      	ldr	r3, [r3, #0]
 8018c62:	681a      	ldr	r2, [r3, #0]
 8018c64:	687b      	ldr	r3, [r7, #4]
 8018c66:	681b      	ldr	r3, [r3, #0]
 8018c68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018c6c:	601a      	str	r2, [r3, #0]
 8018c6e:	e019      	b.n	8018ca4 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8018c70:	68fb      	ldr	r3, [r7, #12]
 8018c72:	2b04      	cmp	r3, #4
 8018c74:	d002      	beq.n	8018c7c <I2C_MasterReceive_BTF+0xe2>
 8018c76:	68fb      	ldr	r3, [r7, #12]
 8018c78:	2b02      	cmp	r3, #2
 8018c7a:	d108      	bne.n	8018c8e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018c7c:	687b      	ldr	r3, [r7, #4]
 8018c7e:	681b      	ldr	r3, [r3, #0]
 8018c80:	681a      	ldr	r2, [r3, #0]
 8018c82:	687b      	ldr	r3, [r7, #4]
 8018c84:	681b      	ldr	r3, [r3, #0]
 8018c86:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8018c8a:	601a      	str	r2, [r3, #0]
 8018c8c:	e00a      	b.n	8018ca4 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8018c8e:	68fb      	ldr	r3, [r7, #12]
 8018c90:	2b10      	cmp	r3, #16
 8018c92:	d007      	beq.n	8018ca4 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8018c94:	687b      	ldr	r3, [r7, #4]
 8018c96:	681b      	ldr	r3, [r3, #0]
 8018c98:	681a      	ldr	r2, [r3, #0]
 8018c9a:	687b      	ldr	r3, [r7, #4]
 8018c9c:	681b      	ldr	r3, [r3, #0]
 8018c9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018ca2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018ca4:	687b      	ldr	r3, [r7, #4]
 8018ca6:	681b      	ldr	r3, [r3, #0]
 8018ca8:	691a      	ldr	r2, [r3, #16]
 8018caa:	687b      	ldr	r3, [r7, #4]
 8018cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018cae:	b2d2      	uxtb	r2, r2
 8018cb0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8018cb2:	687b      	ldr	r3, [r7, #4]
 8018cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018cb6:	1c5a      	adds	r2, r3, #1
 8018cb8:	687b      	ldr	r3, [r7, #4]
 8018cba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8018cbc:	687b      	ldr	r3, [r7, #4]
 8018cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018cc0:	b29b      	uxth	r3, r3
 8018cc2:	3b01      	subs	r3, #1
 8018cc4:	b29a      	uxth	r2, r3
 8018cc6:	687b      	ldr	r3, [r7, #4]
 8018cc8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018cca:	687b      	ldr	r3, [r7, #4]
 8018ccc:	681b      	ldr	r3, [r3, #0]
 8018cce:	691a      	ldr	r2, [r3, #16]
 8018cd0:	687b      	ldr	r3, [r7, #4]
 8018cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018cd4:	b2d2      	uxtb	r2, r2
 8018cd6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8018cd8:	687b      	ldr	r3, [r7, #4]
 8018cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018cdc:	1c5a      	adds	r2, r3, #1
 8018cde:	687b      	ldr	r3, [r7, #4]
 8018ce0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8018ce2:	687b      	ldr	r3, [r7, #4]
 8018ce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018ce6:	b29b      	uxth	r3, r3
 8018ce8:	3b01      	subs	r3, #1
 8018cea:	b29a      	uxth	r2, r3
 8018cec:	687b      	ldr	r3, [r7, #4]
 8018cee:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8018cf0:	687b      	ldr	r3, [r7, #4]
 8018cf2:	681b      	ldr	r3, [r3, #0]
 8018cf4:	685a      	ldr	r2, [r3, #4]
 8018cf6:	687b      	ldr	r3, [r7, #4]
 8018cf8:	681b      	ldr	r3, [r3, #0]
 8018cfa:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8018cfe:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8018d00:	687b      	ldr	r3, [r7, #4]
 8018d02:	2220      	movs	r2, #32
 8018d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8018d08:	687b      	ldr	r3, [r7, #4]
 8018d0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8018d0e:	b2db      	uxtb	r3, r3
 8018d10:	2b40      	cmp	r3, #64	; 0x40
 8018d12:	d10a      	bne.n	8018d2a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8018d14:	687b      	ldr	r3, [r7, #4]
 8018d16:	2200      	movs	r2, #0
 8018d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8018d1c:	687b      	ldr	r3, [r7, #4]
 8018d1e:	2200      	movs	r2, #0
 8018d20:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8018d22:	6878      	ldr	r0, [r7, #4]
 8018d24:	f7ff fcba 	bl	801869c <HAL_I2C_MemRxCpltCallback>
}
 8018d28:	e01d      	b.n	8018d66 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8018d2a:	687b      	ldr	r3, [r7, #4]
 8018d2c:	2200      	movs	r2, #0
 8018d2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8018d32:	687b      	ldr	r3, [r7, #4]
 8018d34:	2212      	movs	r2, #18
 8018d36:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8018d38:	6878      	ldr	r0, [r7, #4]
 8018d3a:	f7ff fc6f 	bl	801861c <HAL_I2C_MasterRxCpltCallback>
}
 8018d3e:	e012      	b.n	8018d66 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018d40:	687b      	ldr	r3, [r7, #4]
 8018d42:	681b      	ldr	r3, [r3, #0]
 8018d44:	691a      	ldr	r2, [r3, #16]
 8018d46:	687b      	ldr	r3, [r7, #4]
 8018d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d4a:	b2d2      	uxtb	r2, r2
 8018d4c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8018d4e:	687b      	ldr	r3, [r7, #4]
 8018d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d52:	1c5a      	adds	r2, r3, #1
 8018d54:	687b      	ldr	r3, [r7, #4]
 8018d56:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8018d58:	687b      	ldr	r3, [r7, #4]
 8018d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018d5c:	b29b      	uxth	r3, r3
 8018d5e:	3b01      	subs	r3, #1
 8018d60:	b29a      	uxth	r2, r3
 8018d62:	687b      	ldr	r3, [r7, #4]
 8018d64:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8018d66:	bf00      	nop
 8018d68:	3710      	adds	r7, #16
 8018d6a:	46bd      	mov	sp, r7
 8018d6c:	bd80      	pop	{r7, pc}

08018d6e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8018d6e:	b480      	push	{r7}
 8018d70:	b083      	sub	sp, #12
 8018d72:	af00      	add	r7, sp, #0
 8018d74:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8018d76:	687b      	ldr	r3, [r7, #4]
 8018d78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8018d7c:	b2db      	uxtb	r3, r3
 8018d7e:	2b40      	cmp	r3, #64	; 0x40
 8018d80:	d117      	bne.n	8018db2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8018d82:	687b      	ldr	r3, [r7, #4]
 8018d84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018d86:	2b00      	cmp	r3, #0
 8018d88:	d109      	bne.n	8018d9e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8018d8a:	687b      	ldr	r3, [r7, #4]
 8018d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018d8e:	b2db      	uxtb	r3, r3
 8018d90:	461a      	mov	r2, r3
 8018d92:	687b      	ldr	r3, [r7, #4]
 8018d94:	681b      	ldr	r3, [r3, #0]
 8018d96:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8018d9a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8018d9c:	e067      	b.n	8018e6e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8018d9e:	687b      	ldr	r3, [r7, #4]
 8018da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018da2:	b2db      	uxtb	r3, r3
 8018da4:	f043 0301 	orr.w	r3, r3, #1
 8018da8:	b2da      	uxtb	r2, r3
 8018daa:	687b      	ldr	r3, [r7, #4]
 8018dac:	681b      	ldr	r3, [r3, #0]
 8018dae:	611a      	str	r2, [r3, #16]
}
 8018db0:	e05d      	b.n	8018e6e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8018db2:	687b      	ldr	r3, [r7, #4]
 8018db4:	691b      	ldr	r3, [r3, #16]
 8018db6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8018dba:	d133      	bne.n	8018e24 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8018dbc:	687b      	ldr	r3, [r7, #4]
 8018dbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018dc2:	b2db      	uxtb	r3, r3
 8018dc4:	2b21      	cmp	r3, #33	; 0x21
 8018dc6:	d109      	bne.n	8018ddc <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8018dc8:	687b      	ldr	r3, [r7, #4]
 8018dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018dcc:	b2db      	uxtb	r3, r3
 8018dce:	461a      	mov	r2, r3
 8018dd0:	687b      	ldr	r3, [r7, #4]
 8018dd2:	681b      	ldr	r3, [r3, #0]
 8018dd4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8018dd8:	611a      	str	r2, [r3, #16]
 8018dda:	e008      	b.n	8018dee <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8018ddc:	687b      	ldr	r3, [r7, #4]
 8018dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018de0:	b2db      	uxtb	r3, r3
 8018de2:	f043 0301 	orr.w	r3, r3, #1
 8018de6:	b2da      	uxtb	r2, r3
 8018de8:	687b      	ldr	r3, [r7, #4]
 8018dea:	681b      	ldr	r3, [r3, #0]
 8018dec:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8018dee:	687b      	ldr	r3, [r7, #4]
 8018df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018df2:	2b00      	cmp	r3, #0
 8018df4:	d004      	beq.n	8018e00 <I2C_Master_SB+0x92>
 8018df6:	687b      	ldr	r3, [r7, #4]
 8018df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018dfc:	2b00      	cmp	r3, #0
 8018dfe:	d108      	bne.n	8018e12 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8018e00:	687b      	ldr	r3, [r7, #4]
 8018e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018e04:	2b00      	cmp	r3, #0
 8018e06:	d032      	beq.n	8018e6e <I2C_Master_SB+0x100>
 8018e08:	687b      	ldr	r3, [r7, #4]
 8018e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018e0e:	2b00      	cmp	r3, #0
 8018e10:	d02d      	beq.n	8018e6e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8018e12:	687b      	ldr	r3, [r7, #4]
 8018e14:	681b      	ldr	r3, [r3, #0]
 8018e16:	685a      	ldr	r2, [r3, #4]
 8018e18:	687b      	ldr	r3, [r7, #4]
 8018e1a:	681b      	ldr	r3, [r3, #0]
 8018e1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8018e20:	605a      	str	r2, [r3, #4]
}
 8018e22:	e024      	b.n	8018e6e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8018e24:	687b      	ldr	r3, [r7, #4]
 8018e26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018e28:	2b00      	cmp	r3, #0
 8018e2a:	d10e      	bne.n	8018e4a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8018e2c:	687b      	ldr	r3, [r7, #4]
 8018e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018e30:	b29b      	uxth	r3, r3
 8018e32:	11db      	asrs	r3, r3, #7
 8018e34:	b2db      	uxtb	r3, r3
 8018e36:	f003 0306 	and.w	r3, r3, #6
 8018e3a:	b2db      	uxtb	r3, r3
 8018e3c:	f063 030f 	orn	r3, r3, #15
 8018e40:	b2da      	uxtb	r2, r3
 8018e42:	687b      	ldr	r3, [r7, #4]
 8018e44:	681b      	ldr	r3, [r3, #0]
 8018e46:	611a      	str	r2, [r3, #16]
}
 8018e48:	e011      	b.n	8018e6e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8018e4a:	687b      	ldr	r3, [r7, #4]
 8018e4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018e4e:	2b01      	cmp	r3, #1
 8018e50:	d10d      	bne.n	8018e6e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8018e52:	687b      	ldr	r3, [r7, #4]
 8018e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018e56:	b29b      	uxth	r3, r3
 8018e58:	11db      	asrs	r3, r3, #7
 8018e5a:	b2db      	uxtb	r3, r3
 8018e5c:	f003 0306 	and.w	r3, r3, #6
 8018e60:	b2db      	uxtb	r3, r3
 8018e62:	f063 030e 	orn	r3, r3, #14
 8018e66:	b2da      	uxtb	r2, r3
 8018e68:	687b      	ldr	r3, [r7, #4]
 8018e6a:	681b      	ldr	r3, [r3, #0]
 8018e6c:	611a      	str	r2, [r3, #16]
}
 8018e6e:	bf00      	nop
 8018e70:	370c      	adds	r7, #12
 8018e72:	46bd      	mov	sp, r7
 8018e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e78:	4770      	bx	lr

08018e7a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8018e7a:	b480      	push	{r7}
 8018e7c:	b083      	sub	sp, #12
 8018e7e:	af00      	add	r7, sp, #0
 8018e80:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8018e82:	687b      	ldr	r3, [r7, #4]
 8018e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018e86:	b2da      	uxtb	r2, r3
 8018e88:	687b      	ldr	r3, [r7, #4]
 8018e8a:	681b      	ldr	r3, [r3, #0]
 8018e8c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8018e8e:	687b      	ldr	r3, [r7, #4]
 8018e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018e92:	2b00      	cmp	r3, #0
 8018e94:	d004      	beq.n	8018ea0 <I2C_Master_ADD10+0x26>
 8018e96:	687b      	ldr	r3, [r7, #4]
 8018e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018e9c:	2b00      	cmp	r3, #0
 8018e9e:	d108      	bne.n	8018eb2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8018ea0:	687b      	ldr	r3, [r7, #4]
 8018ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018ea4:	2b00      	cmp	r3, #0
 8018ea6:	d00c      	beq.n	8018ec2 <I2C_Master_ADD10+0x48>
 8018ea8:	687b      	ldr	r3, [r7, #4]
 8018eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018eae:	2b00      	cmp	r3, #0
 8018eb0:	d007      	beq.n	8018ec2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8018eb2:	687b      	ldr	r3, [r7, #4]
 8018eb4:	681b      	ldr	r3, [r3, #0]
 8018eb6:	685a      	ldr	r2, [r3, #4]
 8018eb8:	687b      	ldr	r3, [r7, #4]
 8018eba:	681b      	ldr	r3, [r3, #0]
 8018ebc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8018ec0:	605a      	str	r2, [r3, #4]
  }
}
 8018ec2:	bf00      	nop
 8018ec4:	370c      	adds	r7, #12
 8018ec6:	46bd      	mov	sp, r7
 8018ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ecc:	4770      	bx	lr

08018ece <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8018ece:	b480      	push	{r7}
 8018ed0:	b091      	sub	sp, #68	; 0x44
 8018ed2:	af00      	add	r7, sp, #0
 8018ed4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8018ed6:	687b      	ldr	r3, [r7, #4]
 8018ed8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8018edc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8018ee0:	687b      	ldr	r3, [r7, #4]
 8018ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018ee4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8018ee6:	687b      	ldr	r3, [r7, #4]
 8018ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018eea:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8018eec:	687b      	ldr	r3, [r7, #4]
 8018eee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018ef2:	b2db      	uxtb	r3, r3
 8018ef4:	2b22      	cmp	r3, #34	; 0x22
 8018ef6:	f040 8169 	bne.w	80191cc <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8018efa:	687b      	ldr	r3, [r7, #4]
 8018efc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018efe:	2b00      	cmp	r3, #0
 8018f00:	d10f      	bne.n	8018f22 <I2C_Master_ADDR+0x54>
 8018f02:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8018f06:	2b40      	cmp	r3, #64	; 0x40
 8018f08:	d10b      	bne.n	8018f22 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018f0a:	2300      	movs	r3, #0
 8018f0c:	633b      	str	r3, [r7, #48]	; 0x30
 8018f0e:	687b      	ldr	r3, [r7, #4]
 8018f10:	681b      	ldr	r3, [r3, #0]
 8018f12:	695b      	ldr	r3, [r3, #20]
 8018f14:	633b      	str	r3, [r7, #48]	; 0x30
 8018f16:	687b      	ldr	r3, [r7, #4]
 8018f18:	681b      	ldr	r3, [r3, #0]
 8018f1a:	699b      	ldr	r3, [r3, #24]
 8018f1c:	633b      	str	r3, [r7, #48]	; 0x30
 8018f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f20:	e160      	b.n	80191e4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8018f22:	687b      	ldr	r3, [r7, #4]
 8018f24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018f26:	2b00      	cmp	r3, #0
 8018f28:	d11d      	bne.n	8018f66 <I2C_Master_ADDR+0x98>
 8018f2a:	687b      	ldr	r3, [r7, #4]
 8018f2c:	691b      	ldr	r3, [r3, #16]
 8018f2e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8018f32:	d118      	bne.n	8018f66 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018f34:	2300      	movs	r3, #0
 8018f36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018f38:	687b      	ldr	r3, [r7, #4]
 8018f3a:	681b      	ldr	r3, [r3, #0]
 8018f3c:	695b      	ldr	r3, [r3, #20]
 8018f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018f40:	687b      	ldr	r3, [r7, #4]
 8018f42:	681b      	ldr	r3, [r3, #0]
 8018f44:	699b      	ldr	r3, [r3, #24]
 8018f46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8018f4a:	687b      	ldr	r3, [r7, #4]
 8018f4c:	681b      	ldr	r3, [r3, #0]
 8018f4e:	681a      	ldr	r2, [r3, #0]
 8018f50:	687b      	ldr	r3, [r7, #4]
 8018f52:	681b      	ldr	r3, [r3, #0]
 8018f54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8018f58:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8018f5a:	687b      	ldr	r3, [r7, #4]
 8018f5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018f5e:	1c5a      	adds	r2, r3, #1
 8018f60:	687b      	ldr	r3, [r7, #4]
 8018f62:	651a      	str	r2, [r3, #80]	; 0x50
 8018f64:	e13e      	b.n	80191e4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8018f66:	687b      	ldr	r3, [r7, #4]
 8018f68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018f6a:	b29b      	uxth	r3, r3
 8018f6c:	2b00      	cmp	r3, #0
 8018f6e:	d113      	bne.n	8018f98 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018f70:	2300      	movs	r3, #0
 8018f72:	62bb      	str	r3, [r7, #40]	; 0x28
 8018f74:	687b      	ldr	r3, [r7, #4]
 8018f76:	681b      	ldr	r3, [r3, #0]
 8018f78:	695b      	ldr	r3, [r3, #20]
 8018f7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8018f7c:	687b      	ldr	r3, [r7, #4]
 8018f7e:	681b      	ldr	r3, [r3, #0]
 8018f80:	699b      	ldr	r3, [r3, #24]
 8018f82:	62bb      	str	r3, [r7, #40]	; 0x28
 8018f84:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8018f86:	687b      	ldr	r3, [r7, #4]
 8018f88:	681b      	ldr	r3, [r3, #0]
 8018f8a:	681a      	ldr	r2, [r3, #0]
 8018f8c:	687b      	ldr	r3, [r7, #4]
 8018f8e:	681b      	ldr	r3, [r3, #0]
 8018f90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018f94:	601a      	str	r2, [r3, #0]
 8018f96:	e115      	b.n	80191c4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8018f98:	687b      	ldr	r3, [r7, #4]
 8018f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018f9c:	b29b      	uxth	r3, r3
 8018f9e:	2b01      	cmp	r3, #1
 8018fa0:	f040 808a 	bne.w	80190b8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8018fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018fa6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8018faa:	d137      	bne.n	801901c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018fac:	687b      	ldr	r3, [r7, #4]
 8018fae:	681b      	ldr	r3, [r3, #0]
 8018fb0:	681a      	ldr	r2, [r3, #0]
 8018fb2:	687b      	ldr	r3, [r7, #4]
 8018fb4:	681b      	ldr	r3, [r3, #0]
 8018fb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018fba:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8018fbc:	687b      	ldr	r3, [r7, #4]
 8018fbe:	681b      	ldr	r3, [r3, #0]
 8018fc0:	685b      	ldr	r3, [r3, #4]
 8018fc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018fc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8018fca:	d113      	bne.n	8018ff4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018fcc:	687b      	ldr	r3, [r7, #4]
 8018fce:	681b      	ldr	r3, [r3, #0]
 8018fd0:	681a      	ldr	r2, [r3, #0]
 8018fd2:	687b      	ldr	r3, [r7, #4]
 8018fd4:	681b      	ldr	r3, [r3, #0]
 8018fd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018fda:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018fdc:	2300      	movs	r3, #0
 8018fde:	627b      	str	r3, [r7, #36]	; 0x24
 8018fe0:	687b      	ldr	r3, [r7, #4]
 8018fe2:	681b      	ldr	r3, [r3, #0]
 8018fe4:	695b      	ldr	r3, [r3, #20]
 8018fe6:	627b      	str	r3, [r7, #36]	; 0x24
 8018fe8:	687b      	ldr	r3, [r7, #4]
 8018fea:	681b      	ldr	r3, [r3, #0]
 8018fec:	699b      	ldr	r3, [r3, #24]
 8018fee:	627b      	str	r3, [r7, #36]	; 0x24
 8018ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ff2:	e0e7      	b.n	80191c4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018ff4:	2300      	movs	r3, #0
 8018ff6:	623b      	str	r3, [r7, #32]
 8018ff8:	687b      	ldr	r3, [r7, #4]
 8018ffa:	681b      	ldr	r3, [r3, #0]
 8018ffc:	695b      	ldr	r3, [r3, #20]
 8018ffe:	623b      	str	r3, [r7, #32]
 8019000:	687b      	ldr	r3, [r7, #4]
 8019002:	681b      	ldr	r3, [r3, #0]
 8019004:	699b      	ldr	r3, [r3, #24]
 8019006:	623b      	str	r3, [r7, #32]
 8019008:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801900a:	687b      	ldr	r3, [r7, #4]
 801900c:	681b      	ldr	r3, [r3, #0]
 801900e:	681a      	ldr	r2, [r3, #0]
 8019010:	687b      	ldr	r3, [r7, #4]
 8019012:	681b      	ldr	r3, [r3, #0]
 8019014:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019018:	601a      	str	r2, [r3, #0]
 801901a:	e0d3      	b.n	80191c4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 801901c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801901e:	2b08      	cmp	r3, #8
 8019020:	d02e      	beq.n	8019080 <I2C_Master_ADDR+0x1b2>
 8019022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019024:	2b20      	cmp	r3, #32
 8019026:	d02b      	beq.n	8019080 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8019028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801902a:	2b12      	cmp	r3, #18
 801902c:	d102      	bne.n	8019034 <I2C_Master_ADDR+0x166>
 801902e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019030:	2b01      	cmp	r3, #1
 8019032:	d125      	bne.n	8019080 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8019034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019036:	2b04      	cmp	r3, #4
 8019038:	d00e      	beq.n	8019058 <I2C_Master_ADDR+0x18a>
 801903a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801903c:	2b02      	cmp	r3, #2
 801903e:	d00b      	beq.n	8019058 <I2C_Master_ADDR+0x18a>
 8019040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019042:	2b10      	cmp	r3, #16
 8019044:	d008      	beq.n	8019058 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8019046:	687b      	ldr	r3, [r7, #4]
 8019048:	681b      	ldr	r3, [r3, #0]
 801904a:	681a      	ldr	r2, [r3, #0]
 801904c:	687b      	ldr	r3, [r7, #4]
 801904e:	681b      	ldr	r3, [r3, #0]
 8019050:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8019054:	601a      	str	r2, [r3, #0]
 8019056:	e007      	b.n	8019068 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8019058:	687b      	ldr	r3, [r7, #4]
 801905a:	681b      	ldr	r3, [r3, #0]
 801905c:	681a      	ldr	r2, [r3, #0]
 801905e:	687b      	ldr	r3, [r7, #4]
 8019060:	681b      	ldr	r3, [r3, #0]
 8019062:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8019066:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8019068:	2300      	movs	r3, #0
 801906a:	61fb      	str	r3, [r7, #28]
 801906c:	687b      	ldr	r3, [r7, #4]
 801906e:	681b      	ldr	r3, [r3, #0]
 8019070:	695b      	ldr	r3, [r3, #20]
 8019072:	61fb      	str	r3, [r7, #28]
 8019074:	687b      	ldr	r3, [r7, #4]
 8019076:	681b      	ldr	r3, [r3, #0]
 8019078:	699b      	ldr	r3, [r3, #24]
 801907a:	61fb      	str	r3, [r7, #28]
 801907c:	69fb      	ldr	r3, [r7, #28]
 801907e:	e0a1      	b.n	80191c4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8019080:	687b      	ldr	r3, [r7, #4]
 8019082:	681b      	ldr	r3, [r3, #0]
 8019084:	681a      	ldr	r2, [r3, #0]
 8019086:	687b      	ldr	r3, [r7, #4]
 8019088:	681b      	ldr	r3, [r3, #0]
 801908a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801908e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8019090:	2300      	movs	r3, #0
 8019092:	61bb      	str	r3, [r7, #24]
 8019094:	687b      	ldr	r3, [r7, #4]
 8019096:	681b      	ldr	r3, [r3, #0]
 8019098:	695b      	ldr	r3, [r3, #20]
 801909a:	61bb      	str	r3, [r7, #24]
 801909c:	687b      	ldr	r3, [r7, #4]
 801909e:	681b      	ldr	r3, [r3, #0]
 80190a0:	699b      	ldr	r3, [r3, #24]
 80190a2:	61bb      	str	r3, [r7, #24]
 80190a4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80190a6:	687b      	ldr	r3, [r7, #4]
 80190a8:	681b      	ldr	r3, [r3, #0]
 80190aa:	681a      	ldr	r2, [r3, #0]
 80190ac:	687b      	ldr	r3, [r7, #4]
 80190ae:	681b      	ldr	r3, [r3, #0]
 80190b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80190b4:	601a      	str	r2, [r3, #0]
 80190b6:	e085      	b.n	80191c4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80190b8:	687b      	ldr	r3, [r7, #4]
 80190ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80190bc:	b29b      	uxth	r3, r3
 80190be:	2b02      	cmp	r3, #2
 80190c0:	d14d      	bne.n	801915e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80190c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80190c4:	2b04      	cmp	r3, #4
 80190c6:	d016      	beq.n	80190f6 <I2C_Master_ADDR+0x228>
 80190c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80190ca:	2b02      	cmp	r3, #2
 80190cc:	d013      	beq.n	80190f6 <I2C_Master_ADDR+0x228>
 80190ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80190d0:	2b10      	cmp	r3, #16
 80190d2:	d010      	beq.n	80190f6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80190d4:	687b      	ldr	r3, [r7, #4]
 80190d6:	681b      	ldr	r3, [r3, #0]
 80190d8:	681a      	ldr	r2, [r3, #0]
 80190da:	687b      	ldr	r3, [r7, #4]
 80190dc:	681b      	ldr	r3, [r3, #0]
 80190de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80190e2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80190e4:	687b      	ldr	r3, [r7, #4]
 80190e6:	681b      	ldr	r3, [r3, #0]
 80190e8:	681a      	ldr	r2, [r3, #0]
 80190ea:	687b      	ldr	r3, [r7, #4]
 80190ec:	681b      	ldr	r3, [r3, #0]
 80190ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80190f2:	601a      	str	r2, [r3, #0]
 80190f4:	e007      	b.n	8019106 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80190f6:	687b      	ldr	r3, [r7, #4]
 80190f8:	681b      	ldr	r3, [r3, #0]
 80190fa:	681a      	ldr	r2, [r3, #0]
 80190fc:	687b      	ldr	r3, [r7, #4]
 80190fe:	681b      	ldr	r3, [r3, #0]
 8019100:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8019104:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8019106:	687b      	ldr	r3, [r7, #4]
 8019108:	681b      	ldr	r3, [r3, #0]
 801910a:	685b      	ldr	r3, [r3, #4]
 801910c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8019110:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8019114:	d117      	bne.n	8019146 <I2C_Master_ADDR+0x278>
 8019116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019118:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801911c:	d00b      	beq.n	8019136 <I2C_Master_ADDR+0x268>
 801911e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019120:	2b01      	cmp	r3, #1
 8019122:	d008      	beq.n	8019136 <I2C_Master_ADDR+0x268>
 8019124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019126:	2b08      	cmp	r3, #8
 8019128:	d005      	beq.n	8019136 <I2C_Master_ADDR+0x268>
 801912a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801912c:	2b10      	cmp	r3, #16
 801912e:	d002      	beq.n	8019136 <I2C_Master_ADDR+0x268>
 8019130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019132:	2b20      	cmp	r3, #32
 8019134:	d107      	bne.n	8019146 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8019136:	687b      	ldr	r3, [r7, #4]
 8019138:	681b      	ldr	r3, [r3, #0]
 801913a:	685a      	ldr	r2, [r3, #4]
 801913c:	687b      	ldr	r3, [r7, #4]
 801913e:	681b      	ldr	r3, [r3, #0]
 8019140:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8019144:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8019146:	2300      	movs	r3, #0
 8019148:	617b      	str	r3, [r7, #20]
 801914a:	687b      	ldr	r3, [r7, #4]
 801914c:	681b      	ldr	r3, [r3, #0]
 801914e:	695b      	ldr	r3, [r3, #20]
 8019150:	617b      	str	r3, [r7, #20]
 8019152:	687b      	ldr	r3, [r7, #4]
 8019154:	681b      	ldr	r3, [r3, #0]
 8019156:	699b      	ldr	r3, [r3, #24]
 8019158:	617b      	str	r3, [r7, #20]
 801915a:	697b      	ldr	r3, [r7, #20]
 801915c:	e032      	b.n	80191c4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801915e:	687b      	ldr	r3, [r7, #4]
 8019160:	681b      	ldr	r3, [r3, #0]
 8019162:	681a      	ldr	r2, [r3, #0]
 8019164:	687b      	ldr	r3, [r7, #4]
 8019166:	681b      	ldr	r3, [r3, #0]
 8019168:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801916c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 801916e:	687b      	ldr	r3, [r7, #4]
 8019170:	681b      	ldr	r3, [r3, #0]
 8019172:	685b      	ldr	r3, [r3, #4]
 8019174:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8019178:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801917c:	d117      	bne.n	80191ae <I2C_Master_ADDR+0x2e0>
 801917e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019180:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8019184:	d00b      	beq.n	801919e <I2C_Master_ADDR+0x2d0>
 8019186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019188:	2b01      	cmp	r3, #1
 801918a:	d008      	beq.n	801919e <I2C_Master_ADDR+0x2d0>
 801918c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801918e:	2b08      	cmp	r3, #8
 8019190:	d005      	beq.n	801919e <I2C_Master_ADDR+0x2d0>
 8019192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019194:	2b10      	cmp	r3, #16
 8019196:	d002      	beq.n	801919e <I2C_Master_ADDR+0x2d0>
 8019198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801919a:	2b20      	cmp	r3, #32
 801919c:	d107      	bne.n	80191ae <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 801919e:	687b      	ldr	r3, [r7, #4]
 80191a0:	681b      	ldr	r3, [r3, #0]
 80191a2:	685a      	ldr	r2, [r3, #4]
 80191a4:	687b      	ldr	r3, [r7, #4]
 80191a6:	681b      	ldr	r3, [r3, #0]
 80191a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80191ac:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80191ae:	2300      	movs	r3, #0
 80191b0:	613b      	str	r3, [r7, #16]
 80191b2:	687b      	ldr	r3, [r7, #4]
 80191b4:	681b      	ldr	r3, [r3, #0]
 80191b6:	695b      	ldr	r3, [r3, #20]
 80191b8:	613b      	str	r3, [r7, #16]
 80191ba:	687b      	ldr	r3, [r7, #4]
 80191bc:	681b      	ldr	r3, [r3, #0]
 80191be:	699b      	ldr	r3, [r3, #24]
 80191c0:	613b      	str	r3, [r7, #16]
 80191c2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80191c4:	687b      	ldr	r3, [r7, #4]
 80191c6:	2200      	movs	r2, #0
 80191c8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80191ca:	e00b      	b.n	80191e4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80191cc:	2300      	movs	r3, #0
 80191ce:	60fb      	str	r3, [r7, #12]
 80191d0:	687b      	ldr	r3, [r7, #4]
 80191d2:	681b      	ldr	r3, [r3, #0]
 80191d4:	695b      	ldr	r3, [r3, #20]
 80191d6:	60fb      	str	r3, [r7, #12]
 80191d8:	687b      	ldr	r3, [r7, #4]
 80191da:	681b      	ldr	r3, [r3, #0]
 80191dc:	699b      	ldr	r3, [r3, #24]
 80191de:	60fb      	str	r3, [r7, #12]
 80191e0:	68fb      	ldr	r3, [r7, #12]
}
 80191e2:	e7ff      	b.n	80191e4 <I2C_Master_ADDR+0x316>
 80191e4:	bf00      	nop
 80191e6:	3744      	adds	r7, #68	; 0x44
 80191e8:	46bd      	mov	sp, r7
 80191ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191ee:	4770      	bx	lr

080191f0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80191f0:	b580      	push	{r7, lr}
 80191f2:	b084      	sub	sp, #16
 80191f4:	af00      	add	r7, sp, #0
 80191f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80191f8:	687b      	ldr	r3, [r7, #4]
 80191fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80191fe:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8019200:	687b      	ldr	r3, [r7, #4]
 8019202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019204:	b29b      	uxth	r3, r3
 8019206:	2b00      	cmp	r3, #0
 8019208:	d02b      	beq.n	8019262 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 801920a:	687b      	ldr	r3, [r7, #4]
 801920c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801920e:	781a      	ldrb	r2, [r3, #0]
 8019210:	687b      	ldr	r3, [r7, #4]
 8019212:	681b      	ldr	r3, [r3, #0]
 8019214:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8019216:	687b      	ldr	r3, [r7, #4]
 8019218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801921a:	1c5a      	adds	r2, r3, #1
 801921c:	687b      	ldr	r3, [r7, #4]
 801921e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8019220:	687b      	ldr	r3, [r7, #4]
 8019222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019224:	b29b      	uxth	r3, r3
 8019226:	3b01      	subs	r3, #1
 8019228:	b29a      	uxth	r2, r3
 801922a:	687b      	ldr	r3, [r7, #4]
 801922c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 801922e:	687b      	ldr	r3, [r7, #4]
 8019230:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019232:	b29b      	uxth	r3, r3
 8019234:	2b00      	cmp	r3, #0
 8019236:	d114      	bne.n	8019262 <I2C_SlaveTransmit_TXE+0x72>
 8019238:	7bfb      	ldrb	r3, [r7, #15]
 801923a:	2b29      	cmp	r3, #41	; 0x29
 801923c:	d111      	bne.n	8019262 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801923e:	687b      	ldr	r3, [r7, #4]
 8019240:	681b      	ldr	r3, [r3, #0]
 8019242:	685a      	ldr	r2, [r3, #4]
 8019244:	687b      	ldr	r3, [r7, #4]
 8019246:	681b      	ldr	r3, [r3, #0]
 8019248:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801924c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801924e:	687b      	ldr	r3, [r7, #4]
 8019250:	2221      	movs	r2, #33	; 0x21
 8019252:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8019254:	687b      	ldr	r3, [r7, #4]
 8019256:	2228      	movs	r2, #40	; 0x28
 8019258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 801925c:	6878      	ldr	r0, [r7, #4]
 801925e:	f7ff f9e7 	bl	8018630 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8019262:	bf00      	nop
 8019264:	3710      	adds	r7, #16
 8019266:	46bd      	mov	sp, r7
 8019268:	bd80      	pop	{r7, pc}

0801926a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 801926a:	b480      	push	{r7}
 801926c:	b083      	sub	sp, #12
 801926e:	af00      	add	r7, sp, #0
 8019270:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8019272:	687b      	ldr	r3, [r7, #4]
 8019274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019276:	b29b      	uxth	r3, r3
 8019278:	2b00      	cmp	r3, #0
 801927a:	d011      	beq.n	80192a0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 801927c:	687b      	ldr	r3, [r7, #4]
 801927e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019280:	781a      	ldrb	r2, [r3, #0]
 8019282:	687b      	ldr	r3, [r7, #4]
 8019284:	681b      	ldr	r3, [r3, #0]
 8019286:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8019288:	687b      	ldr	r3, [r7, #4]
 801928a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801928c:	1c5a      	adds	r2, r3, #1
 801928e:	687b      	ldr	r3, [r7, #4]
 8019290:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8019292:	687b      	ldr	r3, [r7, #4]
 8019294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019296:	b29b      	uxth	r3, r3
 8019298:	3b01      	subs	r3, #1
 801929a:	b29a      	uxth	r2, r3
 801929c:	687b      	ldr	r3, [r7, #4]
 801929e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80192a0:	bf00      	nop
 80192a2:	370c      	adds	r7, #12
 80192a4:	46bd      	mov	sp, r7
 80192a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192aa:	4770      	bx	lr

080192ac <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80192ac:	b580      	push	{r7, lr}
 80192ae:	b084      	sub	sp, #16
 80192b0:	af00      	add	r7, sp, #0
 80192b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80192b4:	687b      	ldr	r3, [r7, #4]
 80192b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80192ba:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80192bc:	687b      	ldr	r3, [r7, #4]
 80192be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80192c0:	b29b      	uxth	r3, r3
 80192c2:	2b00      	cmp	r3, #0
 80192c4:	d02c      	beq.n	8019320 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80192c6:	687b      	ldr	r3, [r7, #4]
 80192c8:	681b      	ldr	r3, [r3, #0]
 80192ca:	691a      	ldr	r2, [r3, #16]
 80192cc:	687b      	ldr	r3, [r7, #4]
 80192ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80192d0:	b2d2      	uxtb	r2, r2
 80192d2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80192d4:	687b      	ldr	r3, [r7, #4]
 80192d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80192d8:	1c5a      	adds	r2, r3, #1
 80192da:	687b      	ldr	r3, [r7, #4]
 80192dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80192de:	687b      	ldr	r3, [r7, #4]
 80192e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80192e2:	b29b      	uxth	r3, r3
 80192e4:	3b01      	subs	r3, #1
 80192e6:	b29a      	uxth	r2, r3
 80192e8:	687b      	ldr	r3, [r7, #4]
 80192ea:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80192ec:	687b      	ldr	r3, [r7, #4]
 80192ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80192f0:	b29b      	uxth	r3, r3
 80192f2:	2b00      	cmp	r3, #0
 80192f4:	d114      	bne.n	8019320 <I2C_SlaveReceive_RXNE+0x74>
 80192f6:	7bfb      	ldrb	r3, [r7, #15]
 80192f8:	2b2a      	cmp	r3, #42	; 0x2a
 80192fa:	d111      	bne.n	8019320 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80192fc:	687b      	ldr	r3, [r7, #4]
 80192fe:	681b      	ldr	r3, [r3, #0]
 8019300:	685a      	ldr	r2, [r3, #4]
 8019302:	687b      	ldr	r3, [r7, #4]
 8019304:	681b      	ldr	r3, [r3, #0]
 8019306:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801930a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 801930c:	687b      	ldr	r3, [r7, #4]
 801930e:	2222      	movs	r2, #34	; 0x22
 8019310:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8019312:	687b      	ldr	r3, [r7, #4]
 8019314:	2228      	movs	r2, #40	; 0x28
 8019316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 801931a:	6878      	ldr	r0, [r7, #4]
 801931c:	f7ff f992 	bl	8018644 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8019320:	bf00      	nop
 8019322:	3710      	adds	r7, #16
 8019324:	46bd      	mov	sp, r7
 8019326:	bd80      	pop	{r7, pc}

08019328 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8019328:	b480      	push	{r7}
 801932a:	b083      	sub	sp, #12
 801932c:	af00      	add	r7, sp, #0
 801932e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8019330:	687b      	ldr	r3, [r7, #4]
 8019332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019334:	b29b      	uxth	r3, r3
 8019336:	2b00      	cmp	r3, #0
 8019338:	d012      	beq.n	8019360 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801933a:	687b      	ldr	r3, [r7, #4]
 801933c:	681b      	ldr	r3, [r3, #0]
 801933e:	691a      	ldr	r2, [r3, #16]
 8019340:	687b      	ldr	r3, [r7, #4]
 8019342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019344:	b2d2      	uxtb	r2, r2
 8019346:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8019348:	687b      	ldr	r3, [r7, #4]
 801934a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801934c:	1c5a      	adds	r2, r3, #1
 801934e:	687b      	ldr	r3, [r7, #4]
 8019350:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8019352:	687b      	ldr	r3, [r7, #4]
 8019354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019356:	b29b      	uxth	r3, r3
 8019358:	3b01      	subs	r3, #1
 801935a:	b29a      	uxth	r2, r3
 801935c:	687b      	ldr	r3, [r7, #4]
 801935e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8019360:	bf00      	nop
 8019362:	370c      	adds	r7, #12
 8019364:	46bd      	mov	sp, r7
 8019366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801936a:	4770      	bx	lr

0801936c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 801936c:	b580      	push	{r7, lr}
 801936e:	b084      	sub	sp, #16
 8019370:	af00      	add	r7, sp, #0
 8019372:	6078      	str	r0, [r7, #4]
 8019374:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8019376:	2300      	movs	r3, #0
 8019378:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 801937a:	687b      	ldr	r3, [r7, #4]
 801937c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019380:	b2db      	uxtb	r3, r3
 8019382:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8019386:	2b28      	cmp	r3, #40	; 0x28
 8019388:	d127      	bne.n	80193da <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 801938a:	687b      	ldr	r3, [r7, #4]
 801938c:	681b      	ldr	r3, [r3, #0]
 801938e:	685a      	ldr	r2, [r3, #4]
 8019390:	687b      	ldr	r3, [r7, #4]
 8019392:	681b      	ldr	r3, [r3, #0]
 8019394:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8019398:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 801939a:	683b      	ldr	r3, [r7, #0]
 801939c:	089b      	lsrs	r3, r3, #2
 801939e:	f003 0301 	and.w	r3, r3, #1
 80193a2:	2b00      	cmp	r3, #0
 80193a4:	d101      	bne.n	80193aa <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80193a6:	2301      	movs	r3, #1
 80193a8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80193aa:	683b      	ldr	r3, [r7, #0]
 80193ac:	09db      	lsrs	r3, r3, #7
 80193ae:	f003 0301 	and.w	r3, r3, #1
 80193b2:	2b00      	cmp	r3, #0
 80193b4:	d103      	bne.n	80193be <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80193b6:	687b      	ldr	r3, [r7, #4]
 80193b8:	68db      	ldr	r3, [r3, #12]
 80193ba:	81bb      	strh	r3, [r7, #12]
 80193bc:	e002      	b.n	80193c4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80193be:	687b      	ldr	r3, [r7, #4]
 80193c0:	699b      	ldr	r3, [r3, #24]
 80193c2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80193c4:	687b      	ldr	r3, [r7, #4]
 80193c6:	2200      	movs	r2, #0
 80193c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80193cc:	89ba      	ldrh	r2, [r7, #12]
 80193ce:	7bfb      	ldrb	r3, [r7, #15]
 80193d0:	4619      	mov	r1, r3
 80193d2:	6878      	ldr	r0, [r7, #4]
 80193d4:	f7ff f940 	bl	8018658 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80193d8:	e00e      	b.n	80193f8 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80193da:	2300      	movs	r3, #0
 80193dc:	60bb      	str	r3, [r7, #8]
 80193de:	687b      	ldr	r3, [r7, #4]
 80193e0:	681b      	ldr	r3, [r3, #0]
 80193e2:	695b      	ldr	r3, [r3, #20]
 80193e4:	60bb      	str	r3, [r7, #8]
 80193e6:	687b      	ldr	r3, [r7, #4]
 80193e8:	681b      	ldr	r3, [r3, #0]
 80193ea:	699b      	ldr	r3, [r3, #24]
 80193ec:	60bb      	str	r3, [r7, #8]
 80193ee:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80193f0:	687b      	ldr	r3, [r7, #4]
 80193f2:	2200      	movs	r2, #0
 80193f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80193f8:	bf00      	nop
 80193fa:	3710      	adds	r7, #16
 80193fc:	46bd      	mov	sp, r7
 80193fe:	bd80      	pop	{r7, pc}

08019400 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8019400:	b580      	push	{r7, lr}
 8019402:	b084      	sub	sp, #16
 8019404:	af00      	add	r7, sp, #0
 8019406:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8019408:	687b      	ldr	r3, [r7, #4]
 801940a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801940e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8019410:	687b      	ldr	r3, [r7, #4]
 8019412:	681b      	ldr	r3, [r3, #0]
 8019414:	685a      	ldr	r2, [r3, #4]
 8019416:	687b      	ldr	r3, [r7, #4]
 8019418:	681b      	ldr	r3, [r3, #0]
 801941a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801941e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8019420:	2300      	movs	r3, #0
 8019422:	60bb      	str	r3, [r7, #8]
 8019424:	687b      	ldr	r3, [r7, #4]
 8019426:	681b      	ldr	r3, [r3, #0]
 8019428:	695b      	ldr	r3, [r3, #20]
 801942a:	60bb      	str	r3, [r7, #8]
 801942c:	687b      	ldr	r3, [r7, #4]
 801942e:	681b      	ldr	r3, [r3, #0]
 8019430:	681a      	ldr	r2, [r3, #0]
 8019432:	687b      	ldr	r3, [r7, #4]
 8019434:	681b      	ldr	r3, [r3, #0]
 8019436:	f042 0201 	orr.w	r2, r2, #1
 801943a:	601a      	str	r2, [r3, #0]
 801943c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801943e:	687b      	ldr	r3, [r7, #4]
 8019440:	681b      	ldr	r3, [r3, #0]
 8019442:	681a      	ldr	r2, [r3, #0]
 8019444:	687b      	ldr	r3, [r7, #4]
 8019446:	681b      	ldr	r3, [r3, #0]
 8019448:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801944c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 801944e:	687b      	ldr	r3, [r7, #4]
 8019450:	681b      	ldr	r3, [r3, #0]
 8019452:	685b      	ldr	r3, [r3, #4]
 8019454:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8019458:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801945c:	d172      	bne.n	8019544 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 801945e:	7bfb      	ldrb	r3, [r7, #15]
 8019460:	2b22      	cmp	r3, #34	; 0x22
 8019462:	d002      	beq.n	801946a <I2C_Slave_STOPF+0x6a>
 8019464:	7bfb      	ldrb	r3, [r7, #15]
 8019466:	2b2a      	cmp	r3, #42	; 0x2a
 8019468:	d135      	bne.n	80194d6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 801946a:	687b      	ldr	r3, [r7, #4]
 801946c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801946e:	681b      	ldr	r3, [r3, #0]
 8019470:	685b      	ldr	r3, [r3, #4]
 8019472:	b29a      	uxth	r2, r3
 8019474:	687b      	ldr	r3, [r7, #4]
 8019476:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8019478:	687b      	ldr	r3, [r7, #4]
 801947a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801947c:	b29b      	uxth	r3, r3
 801947e:	2b00      	cmp	r3, #0
 8019480:	d005      	beq.n	801948e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8019482:	687b      	ldr	r3, [r7, #4]
 8019484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019486:	f043 0204 	orr.w	r2, r3, #4
 801948a:	687b      	ldr	r3, [r7, #4]
 801948c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801948e:	687b      	ldr	r3, [r7, #4]
 8019490:	681b      	ldr	r3, [r3, #0]
 8019492:	685a      	ldr	r2, [r3, #4]
 8019494:	687b      	ldr	r3, [r7, #4]
 8019496:	681b      	ldr	r3, [r3, #0]
 8019498:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801949c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801949e:	687b      	ldr	r3, [r7, #4]
 80194a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80194a2:	4618      	mov	r0, r3
 80194a4:	f7fd fdb4 	bl	8017010 <HAL_DMA_GetState>
 80194a8:	4603      	mov	r3, r0
 80194aa:	2b01      	cmp	r3, #1
 80194ac:	d049      	beq.n	8019542 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80194ae:	687b      	ldr	r3, [r7, #4]
 80194b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80194b2:	4a69      	ldr	r2, [pc, #420]	; (8019658 <I2C_Slave_STOPF+0x258>)
 80194b4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80194b6:	687b      	ldr	r3, [r7, #4]
 80194b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80194ba:	4618      	mov	r0, r3
 80194bc:	f7fd fbfc 	bl	8016cb8 <HAL_DMA_Abort_IT>
 80194c0:	4603      	mov	r3, r0
 80194c2:	2b00      	cmp	r3, #0
 80194c4:	d03d      	beq.n	8019542 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80194c6:	687b      	ldr	r3, [r7, #4]
 80194c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80194ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80194cc:	687a      	ldr	r2, [r7, #4]
 80194ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80194d0:	4610      	mov	r0, r2
 80194d2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80194d4:	e035      	b.n	8019542 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80194d6:	687b      	ldr	r3, [r7, #4]
 80194d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80194da:	681b      	ldr	r3, [r3, #0]
 80194dc:	685b      	ldr	r3, [r3, #4]
 80194de:	b29a      	uxth	r2, r3
 80194e0:	687b      	ldr	r3, [r7, #4]
 80194e2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80194e4:	687b      	ldr	r3, [r7, #4]
 80194e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80194e8:	b29b      	uxth	r3, r3
 80194ea:	2b00      	cmp	r3, #0
 80194ec:	d005      	beq.n	80194fa <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80194ee:	687b      	ldr	r3, [r7, #4]
 80194f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80194f2:	f043 0204 	orr.w	r2, r3, #4
 80194f6:	687b      	ldr	r3, [r7, #4]
 80194f8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80194fa:	687b      	ldr	r3, [r7, #4]
 80194fc:	681b      	ldr	r3, [r3, #0]
 80194fe:	685a      	ldr	r2, [r3, #4]
 8019500:	687b      	ldr	r3, [r7, #4]
 8019502:	681b      	ldr	r3, [r3, #0]
 8019504:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8019508:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801950a:	687b      	ldr	r3, [r7, #4]
 801950c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801950e:	4618      	mov	r0, r3
 8019510:	f7fd fd7e 	bl	8017010 <HAL_DMA_GetState>
 8019514:	4603      	mov	r3, r0
 8019516:	2b01      	cmp	r3, #1
 8019518:	d014      	beq.n	8019544 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 801951a:	687b      	ldr	r3, [r7, #4]
 801951c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801951e:	4a4e      	ldr	r2, [pc, #312]	; (8019658 <I2C_Slave_STOPF+0x258>)
 8019520:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8019522:	687b      	ldr	r3, [r7, #4]
 8019524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019526:	4618      	mov	r0, r3
 8019528:	f7fd fbc6 	bl	8016cb8 <HAL_DMA_Abort_IT>
 801952c:	4603      	mov	r3, r0
 801952e:	2b00      	cmp	r3, #0
 8019530:	d008      	beq.n	8019544 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8019532:	687b      	ldr	r3, [r7, #4]
 8019534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019538:	687a      	ldr	r2, [r7, #4]
 801953a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801953c:	4610      	mov	r0, r2
 801953e:	4798      	blx	r3
 8019540:	e000      	b.n	8019544 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8019542:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8019544:	687b      	ldr	r3, [r7, #4]
 8019546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019548:	b29b      	uxth	r3, r3
 801954a:	2b00      	cmp	r3, #0
 801954c:	d03e      	beq.n	80195cc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 801954e:	687b      	ldr	r3, [r7, #4]
 8019550:	681b      	ldr	r3, [r3, #0]
 8019552:	695b      	ldr	r3, [r3, #20]
 8019554:	f003 0304 	and.w	r3, r3, #4
 8019558:	2b04      	cmp	r3, #4
 801955a:	d112      	bne.n	8019582 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801955c:	687b      	ldr	r3, [r7, #4]
 801955e:	681b      	ldr	r3, [r3, #0]
 8019560:	691a      	ldr	r2, [r3, #16]
 8019562:	687b      	ldr	r3, [r7, #4]
 8019564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019566:	b2d2      	uxtb	r2, r2
 8019568:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801956a:	687b      	ldr	r3, [r7, #4]
 801956c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801956e:	1c5a      	adds	r2, r3, #1
 8019570:	687b      	ldr	r3, [r7, #4]
 8019572:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8019574:	687b      	ldr	r3, [r7, #4]
 8019576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019578:	b29b      	uxth	r3, r3
 801957a:	3b01      	subs	r3, #1
 801957c:	b29a      	uxth	r2, r3
 801957e:	687b      	ldr	r3, [r7, #4]
 8019580:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8019582:	687b      	ldr	r3, [r7, #4]
 8019584:	681b      	ldr	r3, [r3, #0]
 8019586:	695b      	ldr	r3, [r3, #20]
 8019588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801958c:	2b40      	cmp	r3, #64	; 0x40
 801958e:	d112      	bne.n	80195b6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8019590:	687b      	ldr	r3, [r7, #4]
 8019592:	681b      	ldr	r3, [r3, #0]
 8019594:	691a      	ldr	r2, [r3, #16]
 8019596:	687b      	ldr	r3, [r7, #4]
 8019598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801959a:	b2d2      	uxtb	r2, r2
 801959c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801959e:	687b      	ldr	r3, [r7, #4]
 80195a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80195a2:	1c5a      	adds	r2, r3, #1
 80195a4:	687b      	ldr	r3, [r7, #4]
 80195a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80195a8:	687b      	ldr	r3, [r7, #4]
 80195aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80195ac:	b29b      	uxth	r3, r3
 80195ae:	3b01      	subs	r3, #1
 80195b0:	b29a      	uxth	r2, r3
 80195b2:	687b      	ldr	r3, [r7, #4]
 80195b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80195b6:	687b      	ldr	r3, [r7, #4]
 80195b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80195ba:	b29b      	uxth	r3, r3
 80195bc:	2b00      	cmp	r3, #0
 80195be:	d005      	beq.n	80195cc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80195c0:	687b      	ldr	r3, [r7, #4]
 80195c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80195c4:	f043 0204 	orr.w	r2, r3, #4
 80195c8:	687b      	ldr	r3, [r7, #4]
 80195ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80195cc:	687b      	ldr	r3, [r7, #4]
 80195ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80195d0:	2b00      	cmp	r3, #0
 80195d2:	d003      	beq.n	80195dc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80195d4:	6878      	ldr	r0, [r7, #4]
 80195d6:	f000 f8b3 	bl	8019740 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80195da:	e039      	b.n	8019650 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80195dc:	7bfb      	ldrb	r3, [r7, #15]
 80195de:	2b2a      	cmp	r3, #42	; 0x2a
 80195e0:	d109      	bne.n	80195f6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80195e2:	687b      	ldr	r3, [r7, #4]
 80195e4:	2200      	movs	r2, #0
 80195e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80195e8:	687b      	ldr	r3, [r7, #4]
 80195ea:	2228      	movs	r2, #40	; 0x28
 80195ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80195f0:	6878      	ldr	r0, [r7, #4]
 80195f2:	f7ff f827 	bl	8018644 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80195f6:	687b      	ldr	r3, [r7, #4]
 80195f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80195fc:	b2db      	uxtb	r3, r3
 80195fe:	2b28      	cmp	r3, #40	; 0x28
 8019600:	d111      	bne.n	8019626 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8019602:	687b      	ldr	r3, [r7, #4]
 8019604:	4a15      	ldr	r2, [pc, #84]	; (801965c <I2C_Slave_STOPF+0x25c>)
 8019606:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8019608:	687b      	ldr	r3, [r7, #4]
 801960a:	2200      	movs	r2, #0
 801960c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 801960e:	687b      	ldr	r3, [r7, #4]
 8019610:	2220      	movs	r2, #32
 8019612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8019616:	687b      	ldr	r3, [r7, #4]
 8019618:	2200      	movs	r2, #0
 801961a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 801961e:	6878      	ldr	r0, [r7, #4]
 8019620:	f7ff f828 	bl	8018674 <HAL_I2C_ListenCpltCallback>
}
 8019624:	e014      	b.n	8019650 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8019626:	687b      	ldr	r3, [r7, #4]
 8019628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801962a:	2b22      	cmp	r3, #34	; 0x22
 801962c:	d002      	beq.n	8019634 <I2C_Slave_STOPF+0x234>
 801962e:	7bfb      	ldrb	r3, [r7, #15]
 8019630:	2b22      	cmp	r3, #34	; 0x22
 8019632:	d10d      	bne.n	8019650 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8019634:	687b      	ldr	r3, [r7, #4]
 8019636:	2200      	movs	r2, #0
 8019638:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 801963a:	687b      	ldr	r3, [r7, #4]
 801963c:	2220      	movs	r2, #32
 801963e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8019642:	687b      	ldr	r3, [r7, #4]
 8019644:	2200      	movs	r2, #0
 8019646:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 801964a:	6878      	ldr	r0, [r7, #4]
 801964c:	f7fe fffa 	bl	8018644 <HAL_I2C_SlaveRxCpltCallback>
}
 8019650:	bf00      	nop
 8019652:	3710      	adds	r7, #16
 8019654:	46bd      	mov	sp, r7
 8019656:	bd80      	pop	{r7, pc}
 8019658:	08019ca1 	.word	0x08019ca1
 801965c:	ffff0000 	.word	0xffff0000

08019660 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8019660:	b580      	push	{r7, lr}
 8019662:	b084      	sub	sp, #16
 8019664:	af00      	add	r7, sp, #0
 8019666:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8019668:	687b      	ldr	r3, [r7, #4]
 801966a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801966e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8019670:	687b      	ldr	r3, [r7, #4]
 8019672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019674:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8019676:	68bb      	ldr	r3, [r7, #8]
 8019678:	2b08      	cmp	r3, #8
 801967a:	d002      	beq.n	8019682 <I2C_Slave_AF+0x22>
 801967c:	68bb      	ldr	r3, [r7, #8]
 801967e:	2b20      	cmp	r3, #32
 8019680:	d129      	bne.n	80196d6 <I2C_Slave_AF+0x76>
 8019682:	7bfb      	ldrb	r3, [r7, #15]
 8019684:	2b28      	cmp	r3, #40	; 0x28
 8019686:	d126      	bne.n	80196d6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8019688:	687b      	ldr	r3, [r7, #4]
 801968a:	4a2c      	ldr	r2, [pc, #176]	; (801973c <I2C_Slave_AF+0xdc>)
 801968c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801968e:	687b      	ldr	r3, [r7, #4]
 8019690:	681b      	ldr	r3, [r3, #0]
 8019692:	685a      	ldr	r2, [r3, #4]
 8019694:	687b      	ldr	r3, [r7, #4]
 8019696:	681b      	ldr	r3, [r3, #0]
 8019698:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801969c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801969e:	687b      	ldr	r3, [r7, #4]
 80196a0:	681b      	ldr	r3, [r3, #0]
 80196a2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80196a6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80196a8:	687b      	ldr	r3, [r7, #4]
 80196aa:	681b      	ldr	r3, [r3, #0]
 80196ac:	681a      	ldr	r2, [r3, #0]
 80196ae:	687b      	ldr	r3, [r7, #4]
 80196b0:	681b      	ldr	r3, [r3, #0]
 80196b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80196b6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80196b8:	687b      	ldr	r3, [r7, #4]
 80196ba:	2200      	movs	r2, #0
 80196bc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80196be:	687b      	ldr	r3, [r7, #4]
 80196c0:	2220      	movs	r2, #32
 80196c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80196c6:	687b      	ldr	r3, [r7, #4]
 80196c8:	2200      	movs	r2, #0
 80196ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80196ce:	6878      	ldr	r0, [r7, #4]
 80196d0:	f7fe ffd0 	bl	8018674 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80196d4:	e02e      	b.n	8019734 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80196d6:	7bfb      	ldrb	r3, [r7, #15]
 80196d8:	2b21      	cmp	r3, #33	; 0x21
 80196da:	d126      	bne.n	801972a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80196dc:	687b      	ldr	r3, [r7, #4]
 80196de:	4a17      	ldr	r2, [pc, #92]	; (801973c <I2C_Slave_AF+0xdc>)
 80196e0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80196e2:	687b      	ldr	r3, [r7, #4]
 80196e4:	2221      	movs	r2, #33	; 0x21
 80196e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80196e8:	687b      	ldr	r3, [r7, #4]
 80196ea:	2220      	movs	r2, #32
 80196ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80196f0:	687b      	ldr	r3, [r7, #4]
 80196f2:	2200      	movs	r2, #0
 80196f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80196f8:	687b      	ldr	r3, [r7, #4]
 80196fa:	681b      	ldr	r3, [r3, #0]
 80196fc:	685a      	ldr	r2, [r3, #4]
 80196fe:	687b      	ldr	r3, [r7, #4]
 8019700:	681b      	ldr	r3, [r3, #0]
 8019702:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8019706:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8019708:	687b      	ldr	r3, [r7, #4]
 801970a:	681b      	ldr	r3, [r3, #0]
 801970c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8019710:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8019712:	687b      	ldr	r3, [r7, #4]
 8019714:	681b      	ldr	r3, [r3, #0]
 8019716:	681a      	ldr	r2, [r3, #0]
 8019718:	687b      	ldr	r3, [r7, #4]
 801971a:	681b      	ldr	r3, [r3, #0]
 801971c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8019720:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8019722:	6878      	ldr	r0, [r7, #4]
 8019724:	f7fe ff84 	bl	8018630 <HAL_I2C_SlaveTxCpltCallback>
}
 8019728:	e004      	b.n	8019734 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801972a:	687b      	ldr	r3, [r7, #4]
 801972c:	681b      	ldr	r3, [r3, #0]
 801972e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8019732:	615a      	str	r2, [r3, #20]
}
 8019734:	bf00      	nop
 8019736:	3710      	adds	r7, #16
 8019738:	46bd      	mov	sp, r7
 801973a:	bd80      	pop	{r7, pc}
 801973c:	ffff0000 	.word	0xffff0000

08019740 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8019740:	b580      	push	{r7, lr}
 8019742:	b084      	sub	sp, #16
 8019744:	af00      	add	r7, sp, #0
 8019746:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8019748:	687b      	ldr	r3, [r7, #4]
 801974a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801974e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8019750:	687b      	ldr	r3, [r7, #4]
 8019752:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8019756:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8019758:	7bbb      	ldrb	r3, [r7, #14]
 801975a:	2b10      	cmp	r3, #16
 801975c:	d002      	beq.n	8019764 <I2C_ITError+0x24>
 801975e:	7bbb      	ldrb	r3, [r7, #14]
 8019760:	2b40      	cmp	r3, #64	; 0x40
 8019762:	d10a      	bne.n	801977a <I2C_ITError+0x3a>
 8019764:	7bfb      	ldrb	r3, [r7, #15]
 8019766:	2b22      	cmp	r3, #34	; 0x22
 8019768:	d107      	bne.n	801977a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 801976a:	687b      	ldr	r3, [r7, #4]
 801976c:	681b      	ldr	r3, [r3, #0]
 801976e:	681a      	ldr	r2, [r3, #0]
 8019770:	687b      	ldr	r3, [r7, #4]
 8019772:	681b      	ldr	r3, [r3, #0]
 8019774:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8019778:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 801977a:	7bfb      	ldrb	r3, [r7, #15]
 801977c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8019780:	2b28      	cmp	r3, #40	; 0x28
 8019782:	d107      	bne.n	8019794 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8019784:	687b      	ldr	r3, [r7, #4]
 8019786:	2200      	movs	r2, #0
 8019788:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 801978a:	687b      	ldr	r3, [r7, #4]
 801978c:	2228      	movs	r2, #40	; 0x28
 801978e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8019792:	e015      	b.n	80197c0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8019794:	687b      	ldr	r3, [r7, #4]
 8019796:	681b      	ldr	r3, [r3, #0]
 8019798:	685b      	ldr	r3, [r3, #4]
 801979a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801979e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80197a2:	d00a      	beq.n	80197ba <I2C_ITError+0x7a>
 80197a4:	7bfb      	ldrb	r3, [r7, #15]
 80197a6:	2b60      	cmp	r3, #96	; 0x60
 80197a8:	d007      	beq.n	80197ba <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80197aa:	687b      	ldr	r3, [r7, #4]
 80197ac:	2220      	movs	r2, #32
 80197ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80197b2:	687b      	ldr	r3, [r7, #4]
 80197b4:	2200      	movs	r2, #0
 80197b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80197ba:	687b      	ldr	r3, [r7, #4]
 80197bc:	2200      	movs	r2, #0
 80197be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80197c0:	687b      	ldr	r3, [r7, #4]
 80197c2:	681b      	ldr	r3, [r3, #0]
 80197c4:	685b      	ldr	r3, [r3, #4]
 80197c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80197ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80197ce:	d162      	bne.n	8019896 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80197d0:	687b      	ldr	r3, [r7, #4]
 80197d2:	681b      	ldr	r3, [r3, #0]
 80197d4:	685a      	ldr	r2, [r3, #4]
 80197d6:	687b      	ldr	r3, [r7, #4]
 80197d8:	681b      	ldr	r3, [r3, #0]
 80197da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80197de:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80197e0:	687b      	ldr	r3, [r7, #4]
 80197e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80197e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80197e8:	b2db      	uxtb	r3, r3
 80197ea:	2b01      	cmp	r3, #1
 80197ec:	d020      	beq.n	8019830 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80197ee:	687b      	ldr	r3, [r7, #4]
 80197f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80197f2:	4a6a      	ldr	r2, [pc, #424]	; (801999c <I2C_ITError+0x25c>)
 80197f4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80197f6:	687b      	ldr	r3, [r7, #4]
 80197f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80197fa:	4618      	mov	r0, r3
 80197fc:	f7fd fa5c 	bl	8016cb8 <HAL_DMA_Abort_IT>
 8019800:	4603      	mov	r3, r0
 8019802:	2b00      	cmp	r3, #0
 8019804:	f000 8089 	beq.w	801991a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8019808:	687b      	ldr	r3, [r7, #4]
 801980a:	681b      	ldr	r3, [r3, #0]
 801980c:	681a      	ldr	r2, [r3, #0]
 801980e:	687b      	ldr	r3, [r7, #4]
 8019810:	681b      	ldr	r3, [r3, #0]
 8019812:	f022 0201 	bic.w	r2, r2, #1
 8019816:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8019818:	687b      	ldr	r3, [r7, #4]
 801981a:	2220      	movs	r2, #32
 801981c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8019820:	687b      	ldr	r3, [r7, #4]
 8019822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019824:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019826:	687a      	ldr	r2, [r7, #4]
 8019828:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801982a:	4610      	mov	r0, r2
 801982c:	4798      	blx	r3
 801982e:	e074      	b.n	801991a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8019830:	687b      	ldr	r3, [r7, #4]
 8019832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019834:	4a59      	ldr	r2, [pc, #356]	; (801999c <I2C_ITError+0x25c>)
 8019836:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8019838:	687b      	ldr	r3, [r7, #4]
 801983a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801983c:	4618      	mov	r0, r3
 801983e:	f7fd fa3b 	bl	8016cb8 <HAL_DMA_Abort_IT>
 8019842:	4603      	mov	r3, r0
 8019844:	2b00      	cmp	r3, #0
 8019846:	d068      	beq.n	801991a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8019848:	687b      	ldr	r3, [r7, #4]
 801984a:	681b      	ldr	r3, [r3, #0]
 801984c:	695b      	ldr	r3, [r3, #20]
 801984e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019852:	2b40      	cmp	r3, #64	; 0x40
 8019854:	d10b      	bne.n	801986e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8019856:	687b      	ldr	r3, [r7, #4]
 8019858:	681b      	ldr	r3, [r3, #0]
 801985a:	691a      	ldr	r2, [r3, #16]
 801985c:	687b      	ldr	r3, [r7, #4]
 801985e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019860:	b2d2      	uxtb	r2, r2
 8019862:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8019864:	687b      	ldr	r3, [r7, #4]
 8019866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019868:	1c5a      	adds	r2, r3, #1
 801986a:	687b      	ldr	r3, [r7, #4]
 801986c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 801986e:	687b      	ldr	r3, [r7, #4]
 8019870:	681b      	ldr	r3, [r3, #0]
 8019872:	681a      	ldr	r2, [r3, #0]
 8019874:	687b      	ldr	r3, [r7, #4]
 8019876:	681b      	ldr	r3, [r3, #0]
 8019878:	f022 0201 	bic.w	r2, r2, #1
 801987c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 801987e:	687b      	ldr	r3, [r7, #4]
 8019880:	2220      	movs	r2, #32
 8019882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8019886:	687b      	ldr	r3, [r7, #4]
 8019888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801988a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801988c:	687a      	ldr	r2, [r7, #4]
 801988e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8019890:	4610      	mov	r0, r2
 8019892:	4798      	blx	r3
 8019894:	e041      	b.n	801991a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8019896:	687b      	ldr	r3, [r7, #4]
 8019898:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801989c:	b2db      	uxtb	r3, r3
 801989e:	2b60      	cmp	r3, #96	; 0x60
 80198a0:	d125      	bne.n	80198ee <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80198a2:	687b      	ldr	r3, [r7, #4]
 80198a4:	2220      	movs	r2, #32
 80198a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80198aa:	687b      	ldr	r3, [r7, #4]
 80198ac:	2200      	movs	r2, #0
 80198ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80198b0:	687b      	ldr	r3, [r7, #4]
 80198b2:	681b      	ldr	r3, [r3, #0]
 80198b4:	695b      	ldr	r3, [r3, #20]
 80198b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80198ba:	2b40      	cmp	r3, #64	; 0x40
 80198bc:	d10b      	bne.n	80198d6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80198be:	687b      	ldr	r3, [r7, #4]
 80198c0:	681b      	ldr	r3, [r3, #0]
 80198c2:	691a      	ldr	r2, [r3, #16]
 80198c4:	687b      	ldr	r3, [r7, #4]
 80198c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80198c8:	b2d2      	uxtb	r2, r2
 80198ca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80198cc:	687b      	ldr	r3, [r7, #4]
 80198ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80198d0:	1c5a      	adds	r2, r3, #1
 80198d2:	687b      	ldr	r3, [r7, #4]
 80198d4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80198d6:	687b      	ldr	r3, [r7, #4]
 80198d8:	681b      	ldr	r3, [r3, #0]
 80198da:	681a      	ldr	r2, [r3, #0]
 80198dc:	687b      	ldr	r3, [r7, #4]
 80198de:	681b      	ldr	r3, [r3, #0]
 80198e0:	f022 0201 	bic.w	r2, r2, #1
 80198e4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80198e6:	6878      	ldr	r0, [r7, #4]
 80198e8:	f7fe feec 	bl	80186c4 <HAL_I2C_AbortCpltCallback>
 80198ec:	e015      	b.n	801991a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80198ee:	687b      	ldr	r3, [r7, #4]
 80198f0:	681b      	ldr	r3, [r3, #0]
 80198f2:	695b      	ldr	r3, [r3, #20]
 80198f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80198f8:	2b40      	cmp	r3, #64	; 0x40
 80198fa:	d10b      	bne.n	8019914 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80198fc:	687b      	ldr	r3, [r7, #4]
 80198fe:	681b      	ldr	r3, [r3, #0]
 8019900:	691a      	ldr	r2, [r3, #16]
 8019902:	687b      	ldr	r3, [r7, #4]
 8019904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019906:	b2d2      	uxtb	r2, r2
 8019908:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801990a:	687b      	ldr	r3, [r7, #4]
 801990c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801990e:	1c5a      	adds	r2, r3, #1
 8019910:	687b      	ldr	r3, [r7, #4]
 8019912:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8019914:	6878      	ldr	r0, [r7, #4]
 8019916:	f7fe fecb 	bl	80186b0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 801991a:	687b      	ldr	r3, [r7, #4]
 801991c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801991e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8019920:	68bb      	ldr	r3, [r7, #8]
 8019922:	f003 0301 	and.w	r3, r3, #1
 8019926:	2b00      	cmp	r3, #0
 8019928:	d10e      	bne.n	8019948 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 801992a:	68bb      	ldr	r3, [r7, #8]
 801992c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8019930:	2b00      	cmp	r3, #0
 8019932:	d109      	bne.n	8019948 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8019934:	68bb      	ldr	r3, [r7, #8]
 8019936:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 801993a:	2b00      	cmp	r3, #0
 801993c:	d104      	bne.n	8019948 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 801993e:	68bb      	ldr	r3, [r7, #8]
 8019940:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8019944:	2b00      	cmp	r3, #0
 8019946:	d007      	beq.n	8019958 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8019948:	687b      	ldr	r3, [r7, #4]
 801994a:	681b      	ldr	r3, [r3, #0]
 801994c:	685a      	ldr	r2, [r3, #4]
 801994e:	687b      	ldr	r3, [r7, #4]
 8019950:	681b      	ldr	r3, [r3, #0]
 8019952:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8019956:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8019958:	687b      	ldr	r3, [r7, #4]
 801995a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801995e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8019960:	687b      	ldr	r3, [r7, #4]
 8019962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019964:	f003 0304 	and.w	r3, r3, #4
 8019968:	2b04      	cmp	r3, #4
 801996a:	d113      	bne.n	8019994 <I2C_ITError+0x254>
 801996c:	7bfb      	ldrb	r3, [r7, #15]
 801996e:	2b28      	cmp	r3, #40	; 0x28
 8019970:	d110      	bne.n	8019994 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8019972:	687b      	ldr	r3, [r7, #4]
 8019974:	4a0a      	ldr	r2, [pc, #40]	; (80199a0 <I2C_ITError+0x260>)
 8019976:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8019978:	687b      	ldr	r3, [r7, #4]
 801997a:	2200      	movs	r2, #0
 801997c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 801997e:	687b      	ldr	r3, [r7, #4]
 8019980:	2220      	movs	r2, #32
 8019982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8019986:	687b      	ldr	r3, [r7, #4]
 8019988:	2200      	movs	r2, #0
 801998a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 801998e:	6878      	ldr	r0, [r7, #4]
 8019990:	f7fe fe70 	bl	8018674 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8019994:	bf00      	nop
 8019996:	3710      	adds	r7, #16
 8019998:	46bd      	mov	sp, r7
 801999a:	bd80      	pop	{r7, pc}
 801999c:	08019ca1 	.word	0x08019ca1
 80199a0:	ffff0000 	.word	0xffff0000

080199a4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80199a4:	b580      	push	{r7, lr}
 80199a6:	b088      	sub	sp, #32
 80199a8:	af02      	add	r7, sp, #8
 80199aa:	60f8      	str	r0, [r7, #12]
 80199ac:	4608      	mov	r0, r1
 80199ae:	4611      	mov	r1, r2
 80199b0:	461a      	mov	r2, r3
 80199b2:	4603      	mov	r3, r0
 80199b4:	817b      	strh	r3, [r7, #10]
 80199b6:	460b      	mov	r3, r1
 80199b8:	813b      	strh	r3, [r7, #8]
 80199ba:	4613      	mov	r3, r2
 80199bc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80199be:	68fb      	ldr	r3, [r7, #12]
 80199c0:	681b      	ldr	r3, [r3, #0]
 80199c2:	681a      	ldr	r2, [r3, #0]
 80199c4:	68fb      	ldr	r3, [r7, #12]
 80199c6:	681b      	ldr	r3, [r3, #0]
 80199c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80199cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80199ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199d0:	9300      	str	r3, [sp, #0]
 80199d2:	6a3b      	ldr	r3, [r7, #32]
 80199d4:	2200      	movs	r2, #0
 80199d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80199da:	68f8      	ldr	r0, [r7, #12]
 80199dc:	f000 fa08 	bl	8019df0 <I2C_WaitOnFlagUntilTimeout>
 80199e0:	4603      	mov	r3, r0
 80199e2:	2b00      	cmp	r3, #0
 80199e4:	d00d      	beq.n	8019a02 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80199e6:	68fb      	ldr	r3, [r7, #12]
 80199e8:	681b      	ldr	r3, [r3, #0]
 80199ea:	681b      	ldr	r3, [r3, #0]
 80199ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80199f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80199f4:	d103      	bne.n	80199fe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80199f6:	68fb      	ldr	r3, [r7, #12]
 80199f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80199fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80199fe:	2303      	movs	r3, #3
 8019a00:	e05f      	b.n	8019ac2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8019a02:	897b      	ldrh	r3, [r7, #10]
 8019a04:	b2db      	uxtb	r3, r3
 8019a06:	461a      	mov	r2, r3
 8019a08:	68fb      	ldr	r3, [r7, #12]
 8019a0a:	681b      	ldr	r3, [r3, #0]
 8019a0c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8019a10:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8019a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a14:	6a3a      	ldr	r2, [r7, #32]
 8019a16:	492d      	ldr	r1, [pc, #180]	; (8019acc <I2C_RequestMemoryWrite+0x128>)
 8019a18:	68f8      	ldr	r0, [r7, #12]
 8019a1a:	f000 fa40 	bl	8019e9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8019a1e:	4603      	mov	r3, r0
 8019a20:	2b00      	cmp	r3, #0
 8019a22:	d001      	beq.n	8019a28 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8019a24:	2301      	movs	r3, #1
 8019a26:	e04c      	b.n	8019ac2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8019a28:	2300      	movs	r3, #0
 8019a2a:	617b      	str	r3, [r7, #20]
 8019a2c:	68fb      	ldr	r3, [r7, #12]
 8019a2e:	681b      	ldr	r3, [r3, #0]
 8019a30:	695b      	ldr	r3, [r3, #20]
 8019a32:	617b      	str	r3, [r7, #20]
 8019a34:	68fb      	ldr	r3, [r7, #12]
 8019a36:	681b      	ldr	r3, [r3, #0]
 8019a38:	699b      	ldr	r3, [r3, #24]
 8019a3a:	617b      	str	r3, [r7, #20]
 8019a3c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8019a3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019a40:	6a39      	ldr	r1, [r7, #32]
 8019a42:	68f8      	ldr	r0, [r7, #12]
 8019a44:	f000 faaa 	bl	8019f9c <I2C_WaitOnTXEFlagUntilTimeout>
 8019a48:	4603      	mov	r3, r0
 8019a4a:	2b00      	cmp	r3, #0
 8019a4c:	d00d      	beq.n	8019a6a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8019a4e:	68fb      	ldr	r3, [r7, #12]
 8019a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019a52:	2b04      	cmp	r3, #4
 8019a54:	d107      	bne.n	8019a66 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8019a56:	68fb      	ldr	r3, [r7, #12]
 8019a58:	681b      	ldr	r3, [r3, #0]
 8019a5a:	681a      	ldr	r2, [r3, #0]
 8019a5c:	68fb      	ldr	r3, [r7, #12]
 8019a5e:	681b      	ldr	r3, [r3, #0]
 8019a60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019a64:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8019a66:	2301      	movs	r3, #1
 8019a68:	e02b      	b.n	8019ac2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8019a6a:	88fb      	ldrh	r3, [r7, #6]
 8019a6c:	2b01      	cmp	r3, #1
 8019a6e:	d105      	bne.n	8019a7c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8019a70:	893b      	ldrh	r3, [r7, #8]
 8019a72:	b2da      	uxtb	r2, r3
 8019a74:	68fb      	ldr	r3, [r7, #12]
 8019a76:	681b      	ldr	r3, [r3, #0]
 8019a78:	611a      	str	r2, [r3, #16]
 8019a7a:	e021      	b.n	8019ac0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8019a7c:	893b      	ldrh	r3, [r7, #8]
 8019a7e:	0a1b      	lsrs	r3, r3, #8
 8019a80:	b29b      	uxth	r3, r3
 8019a82:	b2da      	uxtb	r2, r3
 8019a84:	68fb      	ldr	r3, [r7, #12]
 8019a86:	681b      	ldr	r3, [r3, #0]
 8019a88:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8019a8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019a8c:	6a39      	ldr	r1, [r7, #32]
 8019a8e:	68f8      	ldr	r0, [r7, #12]
 8019a90:	f000 fa84 	bl	8019f9c <I2C_WaitOnTXEFlagUntilTimeout>
 8019a94:	4603      	mov	r3, r0
 8019a96:	2b00      	cmp	r3, #0
 8019a98:	d00d      	beq.n	8019ab6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8019a9a:	68fb      	ldr	r3, [r7, #12]
 8019a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019a9e:	2b04      	cmp	r3, #4
 8019aa0:	d107      	bne.n	8019ab2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8019aa2:	68fb      	ldr	r3, [r7, #12]
 8019aa4:	681b      	ldr	r3, [r3, #0]
 8019aa6:	681a      	ldr	r2, [r3, #0]
 8019aa8:	68fb      	ldr	r3, [r7, #12]
 8019aaa:	681b      	ldr	r3, [r3, #0]
 8019aac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019ab0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8019ab2:	2301      	movs	r3, #1
 8019ab4:	e005      	b.n	8019ac2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8019ab6:	893b      	ldrh	r3, [r7, #8]
 8019ab8:	b2da      	uxtb	r2, r3
 8019aba:	68fb      	ldr	r3, [r7, #12]
 8019abc:	681b      	ldr	r3, [r3, #0]
 8019abe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8019ac0:	2300      	movs	r3, #0
}
 8019ac2:	4618      	mov	r0, r3
 8019ac4:	3718      	adds	r7, #24
 8019ac6:	46bd      	mov	sp, r7
 8019ac8:	bd80      	pop	{r7, pc}
 8019aca:	bf00      	nop
 8019acc:	00010002 	.word	0x00010002

08019ad0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8019ad0:	b580      	push	{r7, lr}
 8019ad2:	b088      	sub	sp, #32
 8019ad4:	af02      	add	r7, sp, #8
 8019ad6:	60f8      	str	r0, [r7, #12]
 8019ad8:	4608      	mov	r0, r1
 8019ada:	4611      	mov	r1, r2
 8019adc:	461a      	mov	r2, r3
 8019ade:	4603      	mov	r3, r0
 8019ae0:	817b      	strh	r3, [r7, #10]
 8019ae2:	460b      	mov	r3, r1
 8019ae4:	813b      	strh	r3, [r7, #8]
 8019ae6:	4613      	mov	r3, r2
 8019ae8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8019aea:	68fb      	ldr	r3, [r7, #12]
 8019aec:	681b      	ldr	r3, [r3, #0]
 8019aee:	681a      	ldr	r2, [r3, #0]
 8019af0:	68fb      	ldr	r3, [r7, #12]
 8019af2:	681b      	ldr	r3, [r3, #0]
 8019af4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8019af8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8019afa:	68fb      	ldr	r3, [r7, #12]
 8019afc:	681b      	ldr	r3, [r3, #0]
 8019afe:	681a      	ldr	r2, [r3, #0]
 8019b00:	68fb      	ldr	r3, [r7, #12]
 8019b02:	681b      	ldr	r3, [r3, #0]
 8019b04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8019b08:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8019b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b0c:	9300      	str	r3, [sp, #0]
 8019b0e:	6a3b      	ldr	r3, [r7, #32]
 8019b10:	2200      	movs	r2, #0
 8019b12:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8019b16:	68f8      	ldr	r0, [r7, #12]
 8019b18:	f000 f96a 	bl	8019df0 <I2C_WaitOnFlagUntilTimeout>
 8019b1c:	4603      	mov	r3, r0
 8019b1e:	2b00      	cmp	r3, #0
 8019b20:	d00d      	beq.n	8019b3e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8019b22:	68fb      	ldr	r3, [r7, #12]
 8019b24:	681b      	ldr	r3, [r3, #0]
 8019b26:	681b      	ldr	r3, [r3, #0]
 8019b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019b2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019b30:	d103      	bne.n	8019b3a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8019b32:	68fb      	ldr	r3, [r7, #12]
 8019b34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019b38:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8019b3a:	2303      	movs	r3, #3
 8019b3c:	e0aa      	b.n	8019c94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8019b3e:	897b      	ldrh	r3, [r7, #10]
 8019b40:	b2db      	uxtb	r3, r3
 8019b42:	461a      	mov	r2, r3
 8019b44:	68fb      	ldr	r3, [r7, #12]
 8019b46:	681b      	ldr	r3, [r3, #0]
 8019b48:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8019b4c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8019b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b50:	6a3a      	ldr	r2, [r7, #32]
 8019b52:	4952      	ldr	r1, [pc, #328]	; (8019c9c <I2C_RequestMemoryRead+0x1cc>)
 8019b54:	68f8      	ldr	r0, [r7, #12]
 8019b56:	f000 f9a2 	bl	8019e9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8019b5a:	4603      	mov	r3, r0
 8019b5c:	2b00      	cmp	r3, #0
 8019b5e:	d001      	beq.n	8019b64 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8019b60:	2301      	movs	r3, #1
 8019b62:	e097      	b.n	8019c94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8019b64:	2300      	movs	r3, #0
 8019b66:	617b      	str	r3, [r7, #20]
 8019b68:	68fb      	ldr	r3, [r7, #12]
 8019b6a:	681b      	ldr	r3, [r3, #0]
 8019b6c:	695b      	ldr	r3, [r3, #20]
 8019b6e:	617b      	str	r3, [r7, #20]
 8019b70:	68fb      	ldr	r3, [r7, #12]
 8019b72:	681b      	ldr	r3, [r3, #0]
 8019b74:	699b      	ldr	r3, [r3, #24]
 8019b76:	617b      	str	r3, [r7, #20]
 8019b78:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8019b7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019b7c:	6a39      	ldr	r1, [r7, #32]
 8019b7e:	68f8      	ldr	r0, [r7, #12]
 8019b80:	f000 fa0c 	bl	8019f9c <I2C_WaitOnTXEFlagUntilTimeout>
 8019b84:	4603      	mov	r3, r0
 8019b86:	2b00      	cmp	r3, #0
 8019b88:	d00d      	beq.n	8019ba6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8019b8a:	68fb      	ldr	r3, [r7, #12]
 8019b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019b8e:	2b04      	cmp	r3, #4
 8019b90:	d107      	bne.n	8019ba2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8019b92:	68fb      	ldr	r3, [r7, #12]
 8019b94:	681b      	ldr	r3, [r3, #0]
 8019b96:	681a      	ldr	r2, [r3, #0]
 8019b98:	68fb      	ldr	r3, [r7, #12]
 8019b9a:	681b      	ldr	r3, [r3, #0]
 8019b9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019ba0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8019ba2:	2301      	movs	r3, #1
 8019ba4:	e076      	b.n	8019c94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8019ba6:	88fb      	ldrh	r3, [r7, #6]
 8019ba8:	2b01      	cmp	r3, #1
 8019baa:	d105      	bne.n	8019bb8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8019bac:	893b      	ldrh	r3, [r7, #8]
 8019bae:	b2da      	uxtb	r2, r3
 8019bb0:	68fb      	ldr	r3, [r7, #12]
 8019bb2:	681b      	ldr	r3, [r3, #0]
 8019bb4:	611a      	str	r2, [r3, #16]
 8019bb6:	e021      	b.n	8019bfc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8019bb8:	893b      	ldrh	r3, [r7, #8]
 8019bba:	0a1b      	lsrs	r3, r3, #8
 8019bbc:	b29b      	uxth	r3, r3
 8019bbe:	b2da      	uxtb	r2, r3
 8019bc0:	68fb      	ldr	r3, [r7, #12]
 8019bc2:	681b      	ldr	r3, [r3, #0]
 8019bc4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8019bc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019bc8:	6a39      	ldr	r1, [r7, #32]
 8019bca:	68f8      	ldr	r0, [r7, #12]
 8019bcc:	f000 f9e6 	bl	8019f9c <I2C_WaitOnTXEFlagUntilTimeout>
 8019bd0:	4603      	mov	r3, r0
 8019bd2:	2b00      	cmp	r3, #0
 8019bd4:	d00d      	beq.n	8019bf2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8019bd6:	68fb      	ldr	r3, [r7, #12]
 8019bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019bda:	2b04      	cmp	r3, #4
 8019bdc:	d107      	bne.n	8019bee <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8019bde:	68fb      	ldr	r3, [r7, #12]
 8019be0:	681b      	ldr	r3, [r3, #0]
 8019be2:	681a      	ldr	r2, [r3, #0]
 8019be4:	68fb      	ldr	r3, [r7, #12]
 8019be6:	681b      	ldr	r3, [r3, #0]
 8019be8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019bec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8019bee:	2301      	movs	r3, #1
 8019bf0:	e050      	b.n	8019c94 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8019bf2:	893b      	ldrh	r3, [r7, #8]
 8019bf4:	b2da      	uxtb	r2, r3
 8019bf6:	68fb      	ldr	r3, [r7, #12]
 8019bf8:	681b      	ldr	r3, [r3, #0]
 8019bfa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8019bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019bfe:	6a39      	ldr	r1, [r7, #32]
 8019c00:	68f8      	ldr	r0, [r7, #12]
 8019c02:	f000 f9cb 	bl	8019f9c <I2C_WaitOnTXEFlagUntilTimeout>
 8019c06:	4603      	mov	r3, r0
 8019c08:	2b00      	cmp	r3, #0
 8019c0a:	d00d      	beq.n	8019c28 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8019c0c:	68fb      	ldr	r3, [r7, #12]
 8019c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019c10:	2b04      	cmp	r3, #4
 8019c12:	d107      	bne.n	8019c24 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8019c14:	68fb      	ldr	r3, [r7, #12]
 8019c16:	681b      	ldr	r3, [r3, #0]
 8019c18:	681a      	ldr	r2, [r3, #0]
 8019c1a:	68fb      	ldr	r3, [r7, #12]
 8019c1c:	681b      	ldr	r3, [r3, #0]
 8019c1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019c22:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8019c24:	2301      	movs	r3, #1
 8019c26:	e035      	b.n	8019c94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8019c28:	68fb      	ldr	r3, [r7, #12]
 8019c2a:	681b      	ldr	r3, [r3, #0]
 8019c2c:	681a      	ldr	r2, [r3, #0]
 8019c2e:	68fb      	ldr	r3, [r7, #12]
 8019c30:	681b      	ldr	r3, [r3, #0]
 8019c32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8019c36:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8019c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c3a:	9300      	str	r3, [sp, #0]
 8019c3c:	6a3b      	ldr	r3, [r7, #32]
 8019c3e:	2200      	movs	r2, #0
 8019c40:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8019c44:	68f8      	ldr	r0, [r7, #12]
 8019c46:	f000 f8d3 	bl	8019df0 <I2C_WaitOnFlagUntilTimeout>
 8019c4a:	4603      	mov	r3, r0
 8019c4c:	2b00      	cmp	r3, #0
 8019c4e:	d00d      	beq.n	8019c6c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8019c50:	68fb      	ldr	r3, [r7, #12]
 8019c52:	681b      	ldr	r3, [r3, #0]
 8019c54:	681b      	ldr	r3, [r3, #0]
 8019c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019c5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019c5e:	d103      	bne.n	8019c68 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8019c60:	68fb      	ldr	r3, [r7, #12]
 8019c62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019c66:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8019c68:	2303      	movs	r3, #3
 8019c6a:	e013      	b.n	8019c94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8019c6c:	897b      	ldrh	r3, [r7, #10]
 8019c6e:	b2db      	uxtb	r3, r3
 8019c70:	f043 0301 	orr.w	r3, r3, #1
 8019c74:	b2da      	uxtb	r2, r3
 8019c76:	68fb      	ldr	r3, [r7, #12]
 8019c78:	681b      	ldr	r3, [r3, #0]
 8019c7a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8019c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c7e:	6a3a      	ldr	r2, [r7, #32]
 8019c80:	4906      	ldr	r1, [pc, #24]	; (8019c9c <I2C_RequestMemoryRead+0x1cc>)
 8019c82:	68f8      	ldr	r0, [r7, #12]
 8019c84:	f000 f90b 	bl	8019e9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8019c88:	4603      	mov	r3, r0
 8019c8a:	2b00      	cmp	r3, #0
 8019c8c:	d001      	beq.n	8019c92 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8019c8e:	2301      	movs	r3, #1
 8019c90:	e000      	b.n	8019c94 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8019c92:	2300      	movs	r3, #0
}
 8019c94:	4618      	mov	r0, r3
 8019c96:	3718      	adds	r7, #24
 8019c98:	46bd      	mov	sp, r7
 8019c9a:	bd80      	pop	{r7, pc}
 8019c9c:	00010002 	.word	0x00010002

08019ca0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8019ca0:	b580      	push	{r7, lr}
 8019ca2:	b086      	sub	sp, #24
 8019ca4:	af00      	add	r7, sp, #0
 8019ca6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8019ca8:	2300      	movs	r3, #0
 8019caa:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8019cac:	687b      	ldr	r3, [r7, #4]
 8019cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019cb0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8019cb2:	697b      	ldr	r3, [r7, #20]
 8019cb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019cb8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8019cba:	4b4b      	ldr	r3, [pc, #300]	; (8019de8 <I2C_DMAAbort+0x148>)
 8019cbc:	681b      	ldr	r3, [r3, #0]
 8019cbe:	08db      	lsrs	r3, r3, #3
 8019cc0:	4a4a      	ldr	r2, [pc, #296]	; (8019dec <I2C_DMAAbort+0x14c>)
 8019cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8019cc6:	0a1a      	lsrs	r2, r3, #8
 8019cc8:	4613      	mov	r3, r2
 8019cca:	009b      	lsls	r3, r3, #2
 8019ccc:	4413      	add	r3, r2
 8019cce:	00da      	lsls	r2, r3, #3
 8019cd0:	1ad3      	subs	r3, r2, r3
 8019cd2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8019cd4:	68fb      	ldr	r3, [r7, #12]
 8019cd6:	2b00      	cmp	r3, #0
 8019cd8:	d106      	bne.n	8019ce8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8019cda:	697b      	ldr	r3, [r7, #20]
 8019cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019cde:	f043 0220 	orr.w	r2, r3, #32
 8019ce2:	697b      	ldr	r3, [r7, #20]
 8019ce4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8019ce6:	e00a      	b.n	8019cfe <I2C_DMAAbort+0x5e>
    }
    count--;
 8019ce8:	68fb      	ldr	r3, [r7, #12]
 8019cea:	3b01      	subs	r3, #1
 8019cec:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8019cee:	697b      	ldr	r3, [r7, #20]
 8019cf0:	681b      	ldr	r3, [r3, #0]
 8019cf2:	681b      	ldr	r3, [r3, #0]
 8019cf4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8019cf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019cfc:	d0ea      	beq.n	8019cd4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8019cfe:	697b      	ldr	r3, [r7, #20]
 8019d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019d02:	2b00      	cmp	r3, #0
 8019d04:	d003      	beq.n	8019d0e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8019d06:	697b      	ldr	r3, [r7, #20]
 8019d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019d0a:	2200      	movs	r2, #0
 8019d0c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8019d0e:	697b      	ldr	r3, [r7, #20]
 8019d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019d12:	2b00      	cmp	r3, #0
 8019d14:	d003      	beq.n	8019d1e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8019d16:	697b      	ldr	r3, [r7, #20]
 8019d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019d1a:	2200      	movs	r2, #0
 8019d1c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8019d1e:	697b      	ldr	r3, [r7, #20]
 8019d20:	681b      	ldr	r3, [r3, #0]
 8019d22:	681a      	ldr	r2, [r3, #0]
 8019d24:	697b      	ldr	r3, [r7, #20]
 8019d26:	681b      	ldr	r3, [r3, #0]
 8019d28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8019d2c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8019d2e:	697b      	ldr	r3, [r7, #20]
 8019d30:	2200      	movs	r2, #0
 8019d32:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8019d34:	697b      	ldr	r3, [r7, #20]
 8019d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019d38:	2b00      	cmp	r3, #0
 8019d3a:	d003      	beq.n	8019d44 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8019d3c:	697b      	ldr	r3, [r7, #20]
 8019d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019d40:	2200      	movs	r2, #0
 8019d42:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8019d44:	697b      	ldr	r3, [r7, #20]
 8019d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019d48:	2b00      	cmp	r3, #0
 8019d4a:	d003      	beq.n	8019d54 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8019d4c:	697b      	ldr	r3, [r7, #20]
 8019d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019d50:	2200      	movs	r2, #0
 8019d52:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8019d54:	697b      	ldr	r3, [r7, #20]
 8019d56:	681b      	ldr	r3, [r3, #0]
 8019d58:	681a      	ldr	r2, [r3, #0]
 8019d5a:	697b      	ldr	r3, [r7, #20]
 8019d5c:	681b      	ldr	r3, [r3, #0]
 8019d5e:	f022 0201 	bic.w	r2, r2, #1
 8019d62:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8019d64:	697b      	ldr	r3, [r7, #20]
 8019d66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019d6a:	b2db      	uxtb	r3, r3
 8019d6c:	2b60      	cmp	r3, #96	; 0x60
 8019d6e:	d10e      	bne.n	8019d8e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8019d70:	697b      	ldr	r3, [r7, #20]
 8019d72:	2220      	movs	r2, #32
 8019d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8019d78:	697b      	ldr	r3, [r7, #20]
 8019d7a:	2200      	movs	r2, #0
 8019d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8019d80:	697b      	ldr	r3, [r7, #20]
 8019d82:	2200      	movs	r2, #0
 8019d84:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8019d86:	6978      	ldr	r0, [r7, #20]
 8019d88:	f7fe fc9c 	bl	80186c4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8019d8c:	e027      	b.n	8019dde <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8019d8e:	7cfb      	ldrb	r3, [r7, #19]
 8019d90:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8019d94:	2b28      	cmp	r3, #40	; 0x28
 8019d96:	d117      	bne.n	8019dc8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8019d98:	697b      	ldr	r3, [r7, #20]
 8019d9a:	681b      	ldr	r3, [r3, #0]
 8019d9c:	681a      	ldr	r2, [r3, #0]
 8019d9e:	697b      	ldr	r3, [r7, #20]
 8019da0:	681b      	ldr	r3, [r3, #0]
 8019da2:	f042 0201 	orr.w	r2, r2, #1
 8019da6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8019da8:	697b      	ldr	r3, [r7, #20]
 8019daa:	681b      	ldr	r3, [r3, #0]
 8019dac:	681a      	ldr	r2, [r3, #0]
 8019dae:	697b      	ldr	r3, [r7, #20]
 8019db0:	681b      	ldr	r3, [r3, #0]
 8019db2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8019db6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8019db8:	697b      	ldr	r3, [r7, #20]
 8019dba:	2200      	movs	r2, #0
 8019dbc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8019dbe:	697b      	ldr	r3, [r7, #20]
 8019dc0:	2228      	movs	r2, #40	; 0x28
 8019dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8019dc6:	e007      	b.n	8019dd8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8019dc8:	697b      	ldr	r3, [r7, #20]
 8019dca:	2220      	movs	r2, #32
 8019dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8019dd0:	697b      	ldr	r3, [r7, #20]
 8019dd2:	2200      	movs	r2, #0
 8019dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8019dd8:	6978      	ldr	r0, [r7, #20]
 8019dda:	f7fe fc69 	bl	80186b0 <HAL_I2C_ErrorCallback>
}
 8019dde:	bf00      	nop
 8019de0:	3718      	adds	r7, #24
 8019de2:	46bd      	mov	sp, r7
 8019de4:	bd80      	pop	{r7, pc}
 8019de6:	bf00      	nop
 8019de8:	200001e0 	.word	0x200001e0
 8019dec:	14f8b589 	.word	0x14f8b589

08019df0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8019df0:	b580      	push	{r7, lr}
 8019df2:	b084      	sub	sp, #16
 8019df4:	af00      	add	r7, sp, #0
 8019df6:	60f8      	str	r0, [r7, #12]
 8019df8:	60b9      	str	r1, [r7, #8]
 8019dfa:	603b      	str	r3, [r7, #0]
 8019dfc:	4613      	mov	r3, r2
 8019dfe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8019e00:	e025      	b.n	8019e4e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8019e02:	683b      	ldr	r3, [r7, #0]
 8019e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019e08:	d021      	beq.n	8019e4e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8019e0a:	f7fc fc9d 	bl	8016748 <HAL_GetTick>
 8019e0e:	4602      	mov	r2, r0
 8019e10:	69bb      	ldr	r3, [r7, #24]
 8019e12:	1ad3      	subs	r3, r2, r3
 8019e14:	683a      	ldr	r2, [r7, #0]
 8019e16:	429a      	cmp	r2, r3
 8019e18:	d302      	bcc.n	8019e20 <I2C_WaitOnFlagUntilTimeout+0x30>
 8019e1a:	683b      	ldr	r3, [r7, #0]
 8019e1c:	2b00      	cmp	r3, #0
 8019e1e:	d116      	bne.n	8019e4e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8019e20:	68fb      	ldr	r3, [r7, #12]
 8019e22:	2200      	movs	r2, #0
 8019e24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8019e26:	68fb      	ldr	r3, [r7, #12]
 8019e28:	2220      	movs	r2, #32
 8019e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8019e2e:	68fb      	ldr	r3, [r7, #12]
 8019e30:	2200      	movs	r2, #0
 8019e32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8019e36:	68fb      	ldr	r3, [r7, #12]
 8019e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019e3a:	f043 0220 	orr.w	r2, r3, #32
 8019e3e:	68fb      	ldr	r3, [r7, #12]
 8019e40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8019e42:	68fb      	ldr	r3, [r7, #12]
 8019e44:	2200      	movs	r2, #0
 8019e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8019e4a:	2301      	movs	r3, #1
 8019e4c:	e023      	b.n	8019e96 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8019e4e:	68bb      	ldr	r3, [r7, #8]
 8019e50:	0c1b      	lsrs	r3, r3, #16
 8019e52:	b2db      	uxtb	r3, r3
 8019e54:	2b01      	cmp	r3, #1
 8019e56:	d10d      	bne.n	8019e74 <I2C_WaitOnFlagUntilTimeout+0x84>
 8019e58:	68fb      	ldr	r3, [r7, #12]
 8019e5a:	681b      	ldr	r3, [r3, #0]
 8019e5c:	695b      	ldr	r3, [r3, #20]
 8019e5e:	43da      	mvns	r2, r3
 8019e60:	68bb      	ldr	r3, [r7, #8]
 8019e62:	4013      	ands	r3, r2
 8019e64:	b29b      	uxth	r3, r3
 8019e66:	2b00      	cmp	r3, #0
 8019e68:	bf0c      	ite	eq
 8019e6a:	2301      	moveq	r3, #1
 8019e6c:	2300      	movne	r3, #0
 8019e6e:	b2db      	uxtb	r3, r3
 8019e70:	461a      	mov	r2, r3
 8019e72:	e00c      	b.n	8019e8e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8019e74:	68fb      	ldr	r3, [r7, #12]
 8019e76:	681b      	ldr	r3, [r3, #0]
 8019e78:	699b      	ldr	r3, [r3, #24]
 8019e7a:	43da      	mvns	r2, r3
 8019e7c:	68bb      	ldr	r3, [r7, #8]
 8019e7e:	4013      	ands	r3, r2
 8019e80:	b29b      	uxth	r3, r3
 8019e82:	2b00      	cmp	r3, #0
 8019e84:	bf0c      	ite	eq
 8019e86:	2301      	moveq	r3, #1
 8019e88:	2300      	movne	r3, #0
 8019e8a:	b2db      	uxtb	r3, r3
 8019e8c:	461a      	mov	r2, r3
 8019e8e:	79fb      	ldrb	r3, [r7, #7]
 8019e90:	429a      	cmp	r2, r3
 8019e92:	d0b6      	beq.n	8019e02 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8019e94:	2300      	movs	r3, #0
}
 8019e96:	4618      	mov	r0, r3
 8019e98:	3710      	adds	r7, #16
 8019e9a:	46bd      	mov	sp, r7
 8019e9c:	bd80      	pop	{r7, pc}

08019e9e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8019e9e:	b580      	push	{r7, lr}
 8019ea0:	b084      	sub	sp, #16
 8019ea2:	af00      	add	r7, sp, #0
 8019ea4:	60f8      	str	r0, [r7, #12]
 8019ea6:	60b9      	str	r1, [r7, #8]
 8019ea8:	607a      	str	r2, [r7, #4]
 8019eaa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8019eac:	e051      	b.n	8019f52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8019eae:	68fb      	ldr	r3, [r7, #12]
 8019eb0:	681b      	ldr	r3, [r3, #0]
 8019eb2:	695b      	ldr	r3, [r3, #20]
 8019eb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8019eb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8019ebc:	d123      	bne.n	8019f06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8019ebe:	68fb      	ldr	r3, [r7, #12]
 8019ec0:	681b      	ldr	r3, [r3, #0]
 8019ec2:	681a      	ldr	r2, [r3, #0]
 8019ec4:	68fb      	ldr	r3, [r7, #12]
 8019ec6:	681b      	ldr	r3, [r3, #0]
 8019ec8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019ecc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8019ece:	68fb      	ldr	r3, [r7, #12]
 8019ed0:	681b      	ldr	r3, [r3, #0]
 8019ed2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8019ed6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8019ed8:	68fb      	ldr	r3, [r7, #12]
 8019eda:	2200      	movs	r2, #0
 8019edc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8019ede:	68fb      	ldr	r3, [r7, #12]
 8019ee0:	2220      	movs	r2, #32
 8019ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8019ee6:	68fb      	ldr	r3, [r7, #12]
 8019ee8:	2200      	movs	r2, #0
 8019eea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8019eee:	68fb      	ldr	r3, [r7, #12]
 8019ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019ef2:	f043 0204 	orr.w	r2, r3, #4
 8019ef6:	68fb      	ldr	r3, [r7, #12]
 8019ef8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8019efa:	68fb      	ldr	r3, [r7, #12]
 8019efc:	2200      	movs	r2, #0
 8019efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8019f02:	2301      	movs	r3, #1
 8019f04:	e046      	b.n	8019f94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8019f06:	687b      	ldr	r3, [r7, #4]
 8019f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019f0c:	d021      	beq.n	8019f52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8019f0e:	f7fc fc1b 	bl	8016748 <HAL_GetTick>
 8019f12:	4602      	mov	r2, r0
 8019f14:	683b      	ldr	r3, [r7, #0]
 8019f16:	1ad3      	subs	r3, r2, r3
 8019f18:	687a      	ldr	r2, [r7, #4]
 8019f1a:	429a      	cmp	r2, r3
 8019f1c:	d302      	bcc.n	8019f24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8019f1e:	687b      	ldr	r3, [r7, #4]
 8019f20:	2b00      	cmp	r3, #0
 8019f22:	d116      	bne.n	8019f52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8019f24:	68fb      	ldr	r3, [r7, #12]
 8019f26:	2200      	movs	r2, #0
 8019f28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8019f2a:	68fb      	ldr	r3, [r7, #12]
 8019f2c:	2220      	movs	r2, #32
 8019f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8019f32:	68fb      	ldr	r3, [r7, #12]
 8019f34:	2200      	movs	r2, #0
 8019f36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8019f3a:	68fb      	ldr	r3, [r7, #12]
 8019f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019f3e:	f043 0220 	orr.w	r2, r3, #32
 8019f42:	68fb      	ldr	r3, [r7, #12]
 8019f44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8019f46:	68fb      	ldr	r3, [r7, #12]
 8019f48:	2200      	movs	r2, #0
 8019f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8019f4e:	2301      	movs	r3, #1
 8019f50:	e020      	b.n	8019f94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8019f52:	68bb      	ldr	r3, [r7, #8]
 8019f54:	0c1b      	lsrs	r3, r3, #16
 8019f56:	b2db      	uxtb	r3, r3
 8019f58:	2b01      	cmp	r3, #1
 8019f5a:	d10c      	bne.n	8019f76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8019f5c:	68fb      	ldr	r3, [r7, #12]
 8019f5e:	681b      	ldr	r3, [r3, #0]
 8019f60:	695b      	ldr	r3, [r3, #20]
 8019f62:	43da      	mvns	r2, r3
 8019f64:	68bb      	ldr	r3, [r7, #8]
 8019f66:	4013      	ands	r3, r2
 8019f68:	b29b      	uxth	r3, r3
 8019f6a:	2b00      	cmp	r3, #0
 8019f6c:	bf14      	ite	ne
 8019f6e:	2301      	movne	r3, #1
 8019f70:	2300      	moveq	r3, #0
 8019f72:	b2db      	uxtb	r3, r3
 8019f74:	e00b      	b.n	8019f8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8019f76:	68fb      	ldr	r3, [r7, #12]
 8019f78:	681b      	ldr	r3, [r3, #0]
 8019f7a:	699b      	ldr	r3, [r3, #24]
 8019f7c:	43da      	mvns	r2, r3
 8019f7e:	68bb      	ldr	r3, [r7, #8]
 8019f80:	4013      	ands	r3, r2
 8019f82:	b29b      	uxth	r3, r3
 8019f84:	2b00      	cmp	r3, #0
 8019f86:	bf14      	ite	ne
 8019f88:	2301      	movne	r3, #1
 8019f8a:	2300      	moveq	r3, #0
 8019f8c:	b2db      	uxtb	r3, r3
 8019f8e:	2b00      	cmp	r3, #0
 8019f90:	d18d      	bne.n	8019eae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8019f92:	2300      	movs	r3, #0
}
 8019f94:	4618      	mov	r0, r3
 8019f96:	3710      	adds	r7, #16
 8019f98:	46bd      	mov	sp, r7
 8019f9a:	bd80      	pop	{r7, pc}

08019f9c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8019f9c:	b580      	push	{r7, lr}
 8019f9e:	b084      	sub	sp, #16
 8019fa0:	af00      	add	r7, sp, #0
 8019fa2:	60f8      	str	r0, [r7, #12]
 8019fa4:	60b9      	str	r1, [r7, #8]
 8019fa6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8019fa8:	e02d      	b.n	801a006 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8019faa:	68f8      	ldr	r0, [r7, #12]
 8019fac:	f000 f900 	bl	801a1b0 <I2C_IsAcknowledgeFailed>
 8019fb0:	4603      	mov	r3, r0
 8019fb2:	2b00      	cmp	r3, #0
 8019fb4:	d001      	beq.n	8019fba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8019fb6:	2301      	movs	r3, #1
 8019fb8:	e02d      	b.n	801a016 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8019fba:	68bb      	ldr	r3, [r7, #8]
 8019fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019fc0:	d021      	beq.n	801a006 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8019fc2:	f7fc fbc1 	bl	8016748 <HAL_GetTick>
 8019fc6:	4602      	mov	r2, r0
 8019fc8:	687b      	ldr	r3, [r7, #4]
 8019fca:	1ad3      	subs	r3, r2, r3
 8019fcc:	68ba      	ldr	r2, [r7, #8]
 8019fce:	429a      	cmp	r2, r3
 8019fd0:	d302      	bcc.n	8019fd8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8019fd2:	68bb      	ldr	r3, [r7, #8]
 8019fd4:	2b00      	cmp	r3, #0
 8019fd6:	d116      	bne.n	801a006 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8019fd8:	68fb      	ldr	r3, [r7, #12]
 8019fda:	2200      	movs	r2, #0
 8019fdc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8019fde:	68fb      	ldr	r3, [r7, #12]
 8019fe0:	2220      	movs	r2, #32
 8019fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8019fe6:	68fb      	ldr	r3, [r7, #12]
 8019fe8:	2200      	movs	r2, #0
 8019fea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8019fee:	68fb      	ldr	r3, [r7, #12]
 8019ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019ff2:	f043 0220 	orr.w	r2, r3, #32
 8019ff6:	68fb      	ldr	r3, [r7, #12]
 8019ff8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8019ffa:	68fb      	ldr	r3, [r7, #12]
 8019ffc:	2200      	movs	r2, #0
 8019ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801a002:	2301      	movs	r3, #1
 801a004:	e007      	b.n	801a016 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801a006:	68fb      	ldr	r3, [r7, #12]
 801a008:	681b      	ldr	r3, [r3, #0]
 801a00a:	695b      	ldr	r3, [r3, #20]
 801a00c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a010:	2b80      	cmp	r3, #128	; 0x80
 801a012:	d1ca      	bne.n	8019faa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801a014:	2300      	movs	r3, #0
}
 801a016:	4618      	mov	r0, r3
 801a018:	3710      	adds	r7, #16
 801a01a:	46bd      	mov	sp, r7
 801a01c:	bd80      	pop	{r7, pc}

0801a01e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801a01e:	b580      	push	{r7, lr}
 801a020:	b084      	sub	sp, #16
 801a022:	af00      	add	r7, sp, #0
 801a024:	60f8      	str	r0, [r7, #12]
 801a026:	60b9      	str	r1, [r7, #8]
 801a028:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 801a02a:	e02d      	b.n	801a088 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 801a02c:	68f8      	ldr	r0, [r7, #12]
 801a02e:	f000 f8bf 	bl	801a1b0 <I2C_IsAcknowledgeFailed>
 801a032:	4603      	mov	r3, r0
 801a034:	2b00      	cmp	r3, #0
 801a036:	d001      	beq.n	801a03c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 801a038:	2301      	movs	r3, #1
 801a03a:	e02d      	b.n	801a098 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801a03c:	68bb      	ldr	r3, [r7, #8]
 801a03e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a042:	d021      	beq.n	801a088 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801a044:	f7fc fb80 	bl	8016748 <HAL_GetTick>
 801a048:	4602      	mov	r2, r0
 801a04a:	687b      	ldr	r3, [r7, #4]
 801a04c:	1ad3      	subs	r3, r2, r3
 801a04e:	68ba      	ldr	r2, [r7, #8]
 801a050:	429a      	cmp	r2, r3
 801a052:	d302      	bcc.n	801a05a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 801a054:	68bb      	ldr	r3, [r7, #8]
 801a056:	2b00      	cmp	r3, #0
 801a058:	d116      	bne.n	801a088 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801a05a:	68fb      	ldr	r3, [r7, #12]
 801a05c:	2200      	movs	r2, #0
 801a05e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801a060:	68fb      	ldr	r3, [r7, #12]
 801a062:	2220      	movs	r2, #32
 801a064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801a068:	68fb      	ldr	r3, [r7, #12]
 801a06a:	2200      	movs	r2, #0
 801a06c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801a070:	68fb      	ldr	r3, [r7, #12]
 801a072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a074:	f043 0220 	orr.w	r2, r3, #32
 801a078:	68fb      	ldr	r3, [r7, #12]
 801a07a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801a07c:	68fb      	ldr	r3, [r7, #12]
 801a07e:	2200      	movs	r2, #0
 801a080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801a084:	2301      	movs	r3, #1
 801a086:	e007      	b.n	801a098 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 801a088:	68fb      	ldr	r3, [r7, #12]
 801a08a:	681b      	ldr	r3, [r3, #0]
 801a08c:	695b      	ldr	r3, [r3, #20]
 801a08e:	f003 0304 	and.w	r3, r3, #4
 801a092:	2b04      	cmp	r3, #4
 801a094:	d1ca      	bne.n	801a02c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801a096:	2300      	movs	r3, #0
}
 801a098:	4618      	mov	r0, r3
 801a09a:	3710      	adds	r7, #16
 801a09c:	46bd      	mov	sp, r7
 801a09e:	bd80      	pop	{r7, pc}

0801a0a0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 801a0a0:	b480      	push	{r7}
 801a0a2:	b085      	sub	sp, #20
 801a0a4:	af00      	add	r7, sp, #0
 801a0a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801a0a8:	2300      	movs	r3, #0
 801a0aa:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 801a0ac:	4b13      	ldr	r3, [pc, #76]	; (801a0fc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 801a0ae:	681b      	ldr	r3, [r3, #0]
 801a0b0:	08db      	lsrs	r3, r3, #3
 801a0b2:	4a13      	ldr	r2, [pc, #76]	; (801a100 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 801a0b4:	fba2 2303 	umull	r2, r3, r2, r3
 801a0b8:	0a1a      	lsrs	r2, r3, #8
 801a0ba:	4613      	mov	r3, r2
 801a0bc:	009b      	lsls	r3, r3, #2
 801a0be:	4413      	add	r3, r2
 801a0c0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 801a0c2:	68fb      	ldr	r3, [r7, #12]
 801a0c4:	3b01      	subs	r3, #1
 801a0c6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 801a0c8:	68fb      	ldr	r3, [r7, #12]
 801a0ca:	2b00      	cmp	r3, #0
 801a0cc:	d107      	bne.n	801a0de <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801a0ce:	687b      	ldr	r3, [r7, #4]
 801a0d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a0d2:	f043 0220 	orr.w	r2, r3, #32
 801a0d6:	687b      	ldr	r3, [r7, #4]
 801a0d8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 801a0da:	2301      	movs	r3, #1
 801a0dc:	e008      	b.n	801a0f0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 801a0de:	687b      	ldr	r3, [r7, #4]
 801a0e0:	681b      	ldr	r3, [r3, #0]
 801a0e2:	681b      	ldr	r3, [r3, #0]
 801a0e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801a0e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a0ec:	d0e9      	beq.n	801a0c2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 801a0ee:	2300      	movs	r3, #0
}
 801a0f0:	4618      	mov	r0, r3
 801a0f2:	3714      	adds	r7, #20
 801a0f4:	46bd      	mov	sp, r7
 801a0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0fa:	4770      	bx	lr
 801a0fc:	200001e0 	.word	0x200001e0
 801a100:	14f8b589 	.word	0x14f8b589

0801a104 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801a104:	b580      	push	{r7, lr}
 801a106:	b084      	sub	sp, #16
 801a108:	af00      	add	r7, sp, #0
 801a10a:	60f8      	str	r0, [r7, #12]
 801a10c:	60b9      	str	r1, [r7, #8]
 801a10e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 801a110:	e042      	b.n	801a198 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 801a112:	68fb      	ldr	r3, [r7, #12]
 801a114:	681b      	ldr	r3, [r3, #0]
 801a116:	695b      	ldr	r3, [r3, #20]
 801a118:	f003 0310 	and.w	r3, r3, #16
 801a11c:	2b10      	cmp	r3, #16
 801a11e:	d119      	bne.n	801a154 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801a120:	68fb      	ldr	r3, [r7, #12]
 801a122:	681b      	ldr	r3, [r3, #0]
 801a124:	f06f 0210 	mvn.w	r2, #16
 801a128:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 801a12a:	68fb      	ldr	r3, [r7, #12]
 801a12c:	2200      	movs	r2, #0
 801a12e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 801a130:	68fb      	ldr	r3, [r7, #12]
 801a132:	2220      	movs	r2, #32
 801a134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 801a138:	68fb      	ldr	r3, [r7, #12]
 801a13a:	2200      	movs	r2, #0
 801a13c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 801a140:	68fb      	ldr	r3, [r7, #12]
 801a142:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801a144:	68fb      	ldr	r3, [r7, #12]
 801a146:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801a148:	68fb      	ldr	r3, [r7, #12]
 801a14a:	2200      	movs	r2, #0
 801a14c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 801a150:	2301      	movs	r3, #1
 801a152:	e029      	b.n	801a1a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801a154:	f7fc faf8 	bl	8016748 <HAL_GetTick>
 801a158:	4602      	mov	r2, r0
 801a15a:	687b      	ldr	r3, [r7, #4]
 801a15c:	1ad3      	subs	r3, r2, r3
 801a15e:	68ba      	ldr	r2, [r7, #8]
 801a160:	429a      	cmp	r2, r3
 801a162:	d302      	bcc.n	801a16a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 801a164:	68bb      	ldr	r3, [r7, #8]
 801a166:	2b00      	cmp	r3, #0
 801a168:	d116      	bne.n	801a198 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 801a16a:	68fb      	ldr	r3, [r7, #12]
 801a16c:	2200      	movs	r2, #0
 801a16e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 801a170:	68fb      	ldr	r3, [r7, #12]
 801a172:	2220      	movs	r2, #32
 801a174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 801a178:	68fb      	ldr	r3, [r7, #12]
 801a17a:	2200      	movs	r2, #0
 801a17c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801a180:	68fb      	ldr	r3, [r7, #12]
 801a182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a184:	f043 0220 	orr.w	r2, r3, #32
 801a188:	68fb      	ldr	r3, [r7, #12]
 801a18a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801a18c:	68fb      	ldr	r3, [r7, #12]
 801a18e:	2200      	movs	r2, #0
 801a190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 801a194:	2301      	movs	r3, #1
 801a196:	e007      	b.n	801a1a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 801a198:	68fb      	ldr	r3, [r7, #12]
 801a19a:	681b      	ldr	r3, [r3, #0]
 801a19c:	695b      	ldr	r3, [r3, #20]
 801a19e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a1a2:	2b40      	cmp	r3, #64	; 0x40
 801a1a4:	d1b5      	bne.n	801a112 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 801a1a6:	2300      	movs	r3, #0
}
 801a1a8:	4618      	mov	r0, r3
 801a1aa:	3710      	adds	r7, #16
 801a1ac:	46bd      	mov	sp, r7
 801a1ae:	bd80      	pop	{r7, pc}

0801a1b0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 801a1b0:	b480      	push	{r7}
 801a1b2:	b083      	sub	sp, #12
 801a1b4:	af00      	add	r7, sp, #0
 801a1b6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801a1b8:	687b      	ldr	r3, [r7, #4]
 801a1ba:	681b      	ldr	r3, [r3, #0]
 801a1bc:	695b      	ldr	r3, [r3, #20]
 801a1be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801a1c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801a1c6:	d11b      	bne.n	801a200 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801a1c8:	687b      	ldr	r3, [r7, #4]
 801a1ca:	681b      	ldr	r3, [r3, #0]
 801a1cc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801a1d0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 801a1d2:	687b      	ldr	r3, [r7, #4]
 801a1d4:	2200      	movs	r2, #0
 801a1d6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 801a1d8:	687b      	ldr	r3, [r7, #4]
 801a1da:	2220      	movs	r2, #32
 801a1dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 801a1e0:	687b      	ldr	r3, [r7, #4]
 801a1e2:	2200      	movs	r2, #0
 801a1e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 801a1e8:	687b      	ldr	r3, [r7, #4]
 801a1ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a1ec:	f043 0204 	orr.w	r2, r3, #4
 801a1f0:	687b      	ldr	r3, [r7, #4]
 801a1f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801a1f4:	687b      	ldr	r3, [r7, #4]
 801a1f6:	2200      	movs	r2, #0
 801a1f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 801a1fc:	2301      	movs	r3, #1
 801a1fe:	e000      	b.n	801a202 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 801a200:	2300      	movs	r3, #0
}
 801a202:	4618      	mov	r0, r3
 801a204:	370c      	adds	r7, #12
 801a206:	46bd      	mov	sp, r7
 801a208:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a20c:	4770      	bx	lr

0801a20e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 801a20e:	b480      	push	{r7}
 801a210:	b083      	sub	sp, #12
 801a212:	af00      	add	r7, sp, #0
 801a214:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 801a216:	687b      	ldr	r3, [r7, #4]
 801a218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a21a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 801a21e:	d103      	bne.n	801a228 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 801a220:	687b      	ldr	r3, [r7, #4]
 801a222:	2201      	movs	r2, #1
 801a224:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 801a226:	e007      	b.n	801a238 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 801a228:	687b      	ldr	r3, [r7, #4]
 801a22a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a22c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 801a230:	d102      	bne.n	801a238 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 801a232:	687b      	ldr	r3, [r7, #4]
 801a234:	2208      	movs	r2, #8
 801a236:	62da      	str	r2, [r3, #44]	; 0x2c
}
 801a238:	bf00      	nop
 801a23a:	370c      	adds	r7, #12
 801a23c:	46bd      	mov	sp, r7
 801a23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a242:	4770      	bx	lr

0801a244 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801a244:	b580      	push	{r7, lr}
 801a246:	b086      	sub	sp, #24
 801a248:	af00      	add	r7, sp, #0
 801a24a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801a24c:	687b      	ldr	r3, [r7, #4]
 801a24e:	2b00      	cmp	r3, #0
 801a250:	d101      	bne.n	801a256 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801a252:	2301      	movs	r3, #1
 801a254:	e267      	b.n	801a726 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801a256:	687b      	ldr	r3, [r7, #4]
 801a258:	681b      	ldr	r3, [r3, #0]
 801a25a:	f003 0301 	and.w	r3, r3, #1
 801a25e:	2b00      	cmp	r3, #0
 801a260:	d075      	beq.n	801a34e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801a262:	4b88      	ldr	r3, [pc, #544]	; (801a484 <HAL_RCC_OscConfig+0x240>)
 801a264:	689b      	ldr	r3, [r3, #8]
 801a266:	f003 030c 	and.w	r3, r3, #12
 801a26a:	2b04      	cmp	r3, #4
 801a26c:	d00c      	beq.n	801a288 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801a26e:	4b85      	ldr	r3, [pc, #532]	; (801a484 <HAL_RCC_OscConfig+0x240>)
 801a270:	689b      	ldr	r3, [r3, #8]
 801a272:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801a276:	2b08      	cmp	r3, #8
 801a278:	d112      	bne.n	801a2a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801a27a:	4b82      	ldr	r3, [pc, #520]	; (801a484 <HAL_RCC_OscConfig+0x240>)
 801a27c:	685b      	ldr	r3, [r3, #4]
 801a27e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801a282:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801a286:	d10b      	bne.n	801a2a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801a288:	4b7e      	ldr	r3, [pc, #504]	; (801a484 <HAL_RCC_OscConfig+0x240>)
 801a28a:	681b      	ldr	r3, [r3, #0]
 801a28c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801a290:	2b00      	cmp	r3, #0
 801a292:	d05b      	beq.n	801a34c <HAL_RCC_OscConfig+0x108>
 801a294:	687b      	ldr	r3, [r7, #4]
 801a296:	685b      	ldr	r3, [r3, #4]
 801a298:	2b00      	cmp	r3, #0
 801a29a:	d157      	bne.n	801a34c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 801a29c:	2301      	movs	r3, #1
 801a29e:	e242      	b.n	801a726 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801a2a0:	687b      	ldr	r3, [r7, #4]
 801a2a2:	685b      	ldr	r3, [r3, #4]
 801a2a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a2a8:	d106      	bne.n	801a2b8 <HAL_RCC_OscConfig+0x74>
 801a2aa:	4b76      	ldr	r3, [pc, #472]	; (801a484 <HAL_RCC_OscConfig+0x240>)
 801a2ac:	681b      	ldr	r3, [r3, #0]
 801a2ae:	4a75      	ldr	r2, [pc, #468]	; (801a484 <HAL_RCC_OscConfig+0x240>)
 801a2b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801a2b4:	6013      	str	r3, [r2, #0]
 801a2b6:	e01d      	b.n	801a2f4 <HAL_RCC_OscConfig+0xb0>
 801a2b8:	687b      	ldr	r3, [r7, #4]
 801a2ba:	685b      	ldr	r3, [r3, #4]
 801a2bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801a2c0:	d10c      	bne.n	801a2dc <HAL_RCC_OscConfig+0x98>
 801a2c2:	4b70      	ldr	r3, [pc, #448]	; (801a484 <HAL_RCC_OscConfig+0x240>)
 801a2c4:	681b      	ldr	r3, [r3, #0]
 801a2c6:	4a6f      	ldr	r2, [pc, #444]	; (801a484 <HAL_RCC_OscConfig+0x240>)
 801a2c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801a2cc:	6013      	str	r3, [r2, #0]
 801a2ce:	4b6d      	ldr	r3, [pc, #436]	; (801a484 <HAL_RCC_OscConfig+0x240>)
 801a2d0:	681b      	ldr	r3, [r3, #0]
 801a2d2:	4a6c      	ldr	r2, [pc, #432]	; (801a484 <HAL_RCC_OscConfig+0x240>)
 801a2d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801a2d8:	6013      	str	r3, [r2, #0]
 801a2da:	e00b      	b.n	801a2f4 <HAL_RCC_OscConfig+0xb0>
 801a2dc:	4b69      	ldr	r3, [pc, #420]	; (801a484 <HAL_RCC_OscConfig+0x240>)
 801a2de:	681b      	ldr	r3, [r3, #0]
 801a2e0:	4a68      	ldr	r2, [pc, #416]	; (801a484 <HAL_RCC_OscConfig+0x240>)
 801a2e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801a2e6:	6013      	str	r3, [r2, #0]
 801a2e8:	4b66      	ldr	r3, [pc, #408]	; (801a484 <HAL_RCC_OscConfig+0x240>)
 801a2ea:	681b      	ldr	r3, [r3, #0]
 801a2ec:	4a65      	ldr	r2, [pc, #404]	; (801a484 <HAL_RCC_OscConfig+0x240>)
 801a2ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801a2f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 801a2f4:	687b      	ldr	r3, [r7, #4]
 801a2f6:	685b      	ldr	r3, [r3, #4]
 801a2f8:	2b00      	cmp	r3, #0
 801a2fa:	d013      	beq.n	801a324 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a2fc:	f7fc fa24 	bl	8016748 <HAL_GetTick>
 801a300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801a302:	e008      	b.n	801a316 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801a304:	f7fc fa20 	bl	8016748 <HAL_GetTick>
 801a308:	4602      	mov	r2, r0
 801a30a:	693b      	ldr	r3, [r7, #16]
 801a30c:	1ad3      	subs	r3, r2, r3
 801a30e:	2b64      	cmp	r3, #100	; 0x64
 801a310:	d901      	bls.n	801a316 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 801a312:	2303      	movs	r3, #3
 801a314:	e207      	b.n	801a726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801a316:	4b5b      	ldr	r3, [pc, #364]	; (801a484 <HAL_RCC_OscConfig+0x240>)
 801a318:	681b      	ldr	r3, [r3, #0]
 801a31a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801a31e:	2b00      	cmp	r3, #0
 801a320:	d0f0      	beq.n	801a304 <HAL_RCC_OscConfig+0xc0>
 801a322:	e014      	b.n	801a34e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a324:	f7fc fa10 	bl	8016748 <HAL_GetTick>
 801a328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801a32a:	e008      	b.n	801a33e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801a32c:	f7fc fa0c 	bl	8016748 <HAL_GetTick>
 801a330:	4602      	mov	r2, r0
 801a332:	693b      	ldr	r3, [r7, #16]
 801a334:	1ad3      	subs	r3, r2, r3
 801a336:	2b64      	cmp	r3, #100	; 0x64
 801a338:	d901      	bls.n	801a33e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801a33a:	2303      	movs	r3, #3
 801a33c:	e1f3      	b.n	801a726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801a33e:	4b51      	ldr	r3, [pc, #324]	; (801a484 <HAL_RCC_OscConfig+0x240>)
 801a340:	681b      	ldr	r3, [r3, #0]
 801a342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801a346:	2b00      	cmp	r3, #0
 801a348:	d1f0      	bne.n	801a32c <HAL_RCC_OscConfig+0xe8>
 801a34a:	e000      	b.n	801a34e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801a34c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801a34e:	687b      	ldr	r3, [r7, #4]
 801a350:	681b      	ldr	r3, [r3, #0]
 801a352:	f003 0302 	and.w	r3, r3, #2
 801a356:	2b00      	cmp	r3, #0
 801a358:	d063      	beq.n	801a422 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801a35a:	4b4a      	ldr	r3, [pc, #296]	; (801a484 <HAL_RCC_OscConfig+0x240>)
 801a35c:	689b      	ldr	r3, [r3, #8]
 801a35e:	f003 030c 	and.w	r3, r3, #12
 801a362:	2b00      	cmp	r3, #0
 801a364:	d00b      	beq.n	801a37e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801a366:	4b47      	ldr	r3, [pc, #284]	; (801a484 <HAL_RCC_OscConfig+0x240>)
 801a368:	689b      	ldr	r3, [r3, #8]
 801a36a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801a36e:	2b08      	cmp	r3, #8
 801a370:	d11c      	bne.n	801a3ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801a372:	4b44      	ldr	r3, [pc, #272]	; (801a484 <HAL_RCC_OscConfig+0x240>)
 801a374:	685b      	ldr	r3, [r3, #4]
 801a376:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801a37a:	2b00      	cmp	r3, #0
 801a37c:	d116      	bne.n	801a3ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801a37e:	4b41      	ldr	r3, [pc, #260]	; (801a484 <HAL_RCC_OscConfig+0x240>)
 801a380:	681b      	ldr	r3, [r3, #0]
 801a382:	f003 0302 	and.w	r3, r3, #2
 801a386:	2b00      	cmp	r3, #0
 801a388:	d005      	beq.n	801a396 <HAL_RCC_OscConfig+0x152>
 801a38a:	687b      	ldr	r3, [r7, #4]
 801a38c:	68db      	ldr	r3, [r3, #12]
 801a38e:	2b01      	cmp	r3, #1
 801a390:	d001      	beq.n	801a396 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 801a392:	2301      	movs	r3, #1
 801a394:	e1c7      	b.n	801a726 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801a396:	4b3b      	ldr	r3, [pc, #236]	; (801a484 <HAL_RCC_OscConfig+0x240>)
 801a398:	681b      	ldr	r3, [r3, #0]
 801a39a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801a39e:	687b      	ldr	r3, [r7, #4]
 801a3a0:	691b      	ldr	r3, [r3, #16]
 801a3a2:	00db      	lsls	r3, r3, #3
 801a3a4:	4937      	ldr	r1, [pc, #220]	; (801a484 <HAL_RCC_OscConfig+0x240>)
 801a3a6:	4313      	orrs	r3, r2
 801a3a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801a3aa:	e03a      	b.n	801a422 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 801a3ac:	687b      	ldr	r3, [r7, #4]
 801a3ae:	68db      	ldr	r3, [r3, #12]
 801a3b0:	2b00      	cmp	r3, #0
 801a3b2:	d020      	beq.n	801a3f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801a3b4:	4b34      	ldr	r3, [pc, #208]	; (801a488 <HAL_RCC_OscConfig+0x244>)
 801a3b6:	2201      	movs	r2, #1
 801a3b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801a3ba:	f7fc f9c5 	bl	8016748 <HAL_GetTick>
 801a3be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801a3c0:	e008      	b.n	801a3d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801a3c2:	f7fc f9c1 	bl	8016748 <HAL_GetTick>
 801a3c6:	4602      	mov	r2, r0
 801a3c8:	693b      	ldr	r3, [r7, #16]
 801a3ca:	1ad3      	subs	r3, r2, r3
 801a3cc:	2b02      	cmp	r3, #2
 801a3ce:	d901      	bls.n	801a3d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 801a3d0:	2303      	movs	r3, #3
 801a3d2:	e1a8      	b.n	801a726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801a3d4:	4b2b      	ldr	r3, [pc, #172]	; (801a484 <HAL_RCC_OscConfig+0x240>)
 801a3d6:	681b      	ldr	r3, [r3, #0]
 801a3d8:	f003 0302 	and.w	r3, r3, #2
 801a3dc:	2b00      	cmp	r3, #0
 801a3de:	d0f0      	beq.n	801a3c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801a3e0:	4b28      	ldr	r3, [pc, #160]	; (801a484 <HAL_RCC_OscConfig+0x240>)
 801a3e2:	681b      	ldr	r3, [r3, #0]
 801a3e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801a3e8:	687b      	ldr	r3, [r7, #4]
 801a3ea:	691b      	ldr	r3, [r3, #16]
 801a3ec:	00db      	lsls	r3, r3, #3
 801a3ee:	4925      	ldr	r1, [pc, #148]	; (801a484 <HAL_RCC_OscConfig+0x240>)
 801a3f0:	4313      	orrs	r3, r2
 801a3f2:	600b      	str	r3, [r1, #0]
 801a3f4:	e015      	b.n	801a422 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801a3f6:	4b24      	ldr	r3, [pc, #144]	; (801a488 <HAL_RCC_OscConfig+0x244>)
 801a3f8:	2200      	movs	r2, #0
 801a3fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801a3fc:	f7fc f9a4 	bl	8016748 <HAL_GetTick>
 801a400:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801a402:	e008      	b.n	801a416 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801a404:	f7fc f9a0 	bl	8016748 <HAL_GetTick>
 801a408:	4602      	mov	r2, r0
 801a40a:	693b      	ldr	r3, [r7, #16]
 801a40c:	1ad3      	subs	r3, r2, r3
 801a40e:	2b02      	cmp	r3, #2
 801a410:	d901      	bls.n	801a416 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 801a412:	2303      	movs	r3, #3
 801a414:	e187      	b.n	801a726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801a416:	4b1b      	ldr	r3, [pc, #108]	; (801a484 <HAL_RCC_OscConfig+0x240>)
 801a418:	681b      	ldr	r3, [r3, #0]
 801a41a:	f003 0302 	and.w	r3, r3, #2
 801a41e:	2b00      	cmp	r3, #0
 801a420:	d1f0      	bne.n	801a404 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801a422:	687b      	ldr	r3, [r7, #4]
 801a424:	681b      	ldr	r3, [r3, #0]
 801a426:	f003 0308 	and.w	r3, r3, #8
 801a42a:	2b00      	cmp	r3, #0
 801a42c:	d036      	beq.n	801a49c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 801a42e:	687b      	ldr	r3, [r7, #4]
 801a430:	695b      	ldr	r3, [r3, #20]
 801a432:	2b00      	cmp	r3, #0
 801a434:	d016      	beq.n	801a464 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801a436:	4b15      	ldr	r3, [pc, #84]	; (801a48c <HAL_RCC_OscConfig+0x248>)
 801a438:	2201      	movs	r2, #1
 801a43a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801a43c:	f7fc f984 	bl	8016748 <HAL_GetTick>
 801a440:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801a442:	e008      	b.n	801a456 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801a444:	f7fc f980 	bl	8016748 <HAL_GetTick>
 801a448:	4602      	mov	r2, r0
 801a44a:	693b      	ldr	r3, [r7, #16]
 801a44c:	1ad3      	subs	r3, r2, r3
 801a44e:	2b02      	cmp	r3, #2
 801a450:	d901      	bls.n	801a456 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 801a452:	2303      	movs	r3, #3
 801a454:	e167      	b.n	801a726 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801a456:	4b0b      	ldr	r3, [pc, #44]	; (801a484 <HAL_RCC_OscConfig+0x240>)
 801a458:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a45a:	f003 0302 	and.w	r3, r3, #2
 801a45e:	2b00      	cmp	r3, #0
 801a460:	d0f0      	beq.n	801a444 <HAL_RCC_OscConfig+0x200>
 801a462:	e01b      	b.n	801a49c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801a464:	4b09      	ldr	r3, [pc, #36]	; (801a48c <HAL_RCC_OscConfig+0x248>)
 801a466:	2200      	movs	r2, #0
 801a468:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801a46a:	f7fc f96d 	bl	8016748 <HAL_GetTick>
 801a46e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801a470:	e00e      	b.n	801a490 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801a472:	f7fc f969 	bl	8016748 <HAL_GetTick>
 801a476:	4602      	mov	r2, r0
 801a478:	693b      	ldr	r3, [r7, #16]
 801a47a:	1ad3      	subs	r3, r2, r3
 801a47c:	2b02      	cmp	r3, #2
 801a47e:	d907      	bls.n	801a490 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 801a480:	2303      	movs	r3, #3
 801a482:	e150      	b.n	801a726 <HAL_RCC_OscConfig+0x4e2>
 801a484:	40023800 	.word	0x40023800
 801a488:	42470000 	.word	0x42470000
 801a48c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801a490:	4b88      	ldr	r3, [pc, #544]	; (801a6b4 <HAL_RCC_OscConfig+0x470>)
 801a492:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a494:	f003 0302 	and.w	r3, r3, #2
 801a498:	2b00      	cmp	r3, #0
 801a49a:	d1ea      	bne.n	801a472 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801a49c:	687b      	ldr	r3, [r7, #4]
 801a49e:	681b      	ldr	r3, [r3, #0]
 801a4a0:	f003 0304 	and.w	r3, r3, #4
 801a4a4:	2b00      	cmp	r3, #0
 801a4a6:	f000 8097 	beq.w	801a5d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 801a4aa:	2300      	movs	r3, #0
 801a4ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801a4ae:	4b81      	ldr	r3, [pc, #516]	; (801a6b4 <HAL_RCC_OscConfig+0x470>)
 801a4b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a4b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801a4b6:	2b00      	cmp	r3, #0
 801a4b8:	d10f      	bne.n	801a4da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801a4ba:	2300      	movs	r3, #0
 801a4bc:	60bb      	str	r3, [r7, #8]
 801a4be:	4b7d      	ldr	r3, [pc, #500]	; (801a6b4 <HAL_RCC_OscConfig+0x470>)
 801a4c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a4c2:	4a7c      	ldr	r2, [pc, #496]	; (801a6b4 <HAL_RCC_OscConfig+0x470>)
 801a4c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801a4c8:	6413      	str	r3, [r2, #64]	; 0x40
 801a4ca:	4b7a      	ldr	r3, [pc, #488]	; (801a6b4 <HAL_RCC_OscConfig+0x470>)
 801a4cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a4ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801a4d2:	60bb      	str	r3, [r7, #8]
 801a4d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801a4d6:	2301      	movs	r3, #1
 801a4d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801a4da:	4b77      	ldr	r3, [pc, #476]	; (801a6b8 <HAL_RCC_OscConfig+0x474>)
 801a4dc:	681b      	ldr	r3, [r3, #0]
 801a4de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a4e2:	2b00      	cmp	r3, #0
 801a4e4:	d118      	bne.n	801a518 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801a4e6:	4b74      	ldr	r3, [pc, #464]	; (801a6b8 <HAL_RCC_OscConfig+0x474>)
 801a4e8:	681b      	ldr	r3, [r3, #0]
 801a4ea:	4a73      	ldr	r2, [pc, #460]	; (801a6b8 <HAL_RCC_OscConfig+0x474>)
 801a4ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801a4f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801a4f2:	f7fc f929 	bl	8016748 <HAL_GetTick>
 801a4f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801a4f8:	e008      	b.n	801a50c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801a4fa:	f7fc f925 	bl	8016748 <HAL_GetTick>
 801a4fe:	4602      	mov	r2, r0
 801a500:	693b      	ldr	r3, [r7, #16]
 801a502:	1ad3      	subs	r3, r2, r3
 801a504:	2b02      	cmp	r3, #2
 801a506:	d901      	bls.n	801a50c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 801a508:	2303      	movs	r3, #3
 801a50a:	e10c      	b.n	801a726 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801a50c:	4b6a      	ldr	r3, [pc, #424]	; (801a6b8 <HAL_RCC_OscConfig+0x474>)
 801a50e:	681b      	ldr	r3, [r3, #0]
 801a510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a514:	2b00      	cmp	r3, #0
 801a516:	d0f0      	beq.n	801a4fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801a518:	687b      	ldr	r3, [r7, #4]
 801a51a:	689b      	ldr	r3, [r3, #8]
 801a51c:	2b01      	cmp	r3, #1
 801a51e:	d106      	bne.n	801a52e <HAL_RCC_OscConfig+0x2ea>
 801a520:	4b64      	ldr	r3, [pc, #400]	; (801a6b4 <HAL_RCC_OscConfig+0x470>)
 801a522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a524:	4a63      	ldr	r2, [pc, #396]	; (801a6b4 <HAL_RCC_OscConfig+0x470>)
 801a526:	f043 0301 	orr.w	r3, r3, #1
 801a52a:	6713      	str	r3, [r2, #112]	; 0x70
 801a52c:	e01c      	b.n	801a568 <HAL_RCC_OscConfig+0x324>
 801a52e:	687b      	ldr	r3, [r7, #4]
 801a530:	689b      	ldr	r3, [r3, #8]
 801a532:	2b05      	cmp	r3, #5
 801a534:	d10c      	bne.n	801a550 <HAL_RCC_OscConfig+0x30c>
 801a536:	4b5f      	ldr	r3, [pc, #380]	; (801a6b4 <HAL_RCC_OscConfig+0x470>)
 801a538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a53a:	4a5e      	ldr	r2, [pc, #376]	; (801a6b4 <HAL_RCC_OscConfig+0x470>)
 801a53c:	f043 0304 	orr.w	r3, r3, #4
 801a540:	6713      	str	r3, [r2, #112]	; 0x70
 801a542:	4b5c      	ldr	r3, [pc, #368]	; (801a6b4 <HAL_RCC_OscConfig+0x470>)
 801a544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a546:	4a5b      	ldr	r2, [pc, #364]	; (801a6b4 <HAL_RCC_OscConfig+0x470>)
 801a548:	f043 0301 	orr.w	r3, r3, #1
 801a54c:	6713      	str	r3, [r2, #112]	; 0x70
 801a54e:	e00b      	b.n	801a568 <HAL_RCC_OscConfig+0x324>
 801a550:	4b58      	ldr	r3, [pc, #352]	; (801a6b4 <HAL_RCC_OscConfig+0x470>)
 801a552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a554:	4a57      	ldr	r2, [pc, #348]	; (801a6b4 <HAL_RCC_OscConfig+0x470>)
 801a556:	f023 0301 	bic.w	r3, r3, #1
 801a55a:	6713      	str	r3, [r2, #112]	; 0x70
 801a55c:	4b55      	ldr	r3, [pc, #340]	; (801a6b4 <HAL_RCC_OscConfig+0x470>)
 801a55e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a560:	4a54      	ldr	r2, [pc, #336]	; (801a6b4 <HAL_RCC_OscConfig+0x470>)
 801a562:	f023 0304 	bic.w	r3, r3, #4
 801a566:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801a568:	687b      	ldr	r3, [r7, #4]
 801a56a:	689b      	ldr	r3, [r3, #8]
 801a56c:	2b00      	cmp	r3, #0
 801a56e:	d015      	beq.n	801a59c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801a570:	f7fc f8ea 	bl	8016748 <HAL_GetTick>
 801a574:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801a576:	e00a      	b.n	801a58e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801a578:	f7fc f8e6 	bl	8016748 <HAL_GetTick>
 801a57c:	4602      	mov	r2, r0
 801a57e:	693b      	ldr	r3, [r7, #16]
 801a580:	1ad3      	subs	r3, r2, r3
 801a582:	f241 3288 	movw	r2, #5000	; 0x1388
 801a586:	4293      	cmp	r3, r2
 801a588:	d901      	bls.n	801a58e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 801a58a:	2303      	movs	r3, #3
 801a58c:	e0cb      	b.n	801a726 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801a58e:	4b49      	ldr	r3, [pc, #292]	; (801a6b4 <HAL_RCC_OscConfig+0x470>)
 801a590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a592:	f003 0302 	and.w	r3, r3, #2
 801a596:	2b00      	cmp	r3, #0
 801a598:	d0ee      	beq.n	801a578 <HAL_RCC_OscConfig+0x334>
 801a59a:	e014      	b.n	801a5c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801a59c:	f7fc f8d4 	bl	8016748 <HAL_GetTick>
 801a5a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801a5a2:	e00a      	b.n	801a5ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801a5a4:	f7fc f8d0 	bl	8016748 <HAL_GetTick>
 801a5a8:	4602      	mov	r2, r0
 801a5aa:	693b      	ldr	r3, [r7, #16]
 801a5ac:	1ad3      	subs	r3, r2, r3
 801a5ae:	f241 3288 	movw	r2, #5000	; 0x1388
 801a5b2:	4293      	cmp	r3, r2
 801a5b4:	d901      	bls.n	801a5ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 801a5b6:	2303      	movs	r3, #3
 801a5b8:	e0b5      	b.n	801a726 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801a5ba:	4b3e      	ldr	r3, [pc, #248]	; (801a6b4 <HAL_RCC_OscConfig+0x470>)
 801a5bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a5be:	f003 0302 	and.w	r3, r3, #2
 801a5c2:	2b00      	cmp	r3, #0
 801a5c4:	d1ee      	bne.n	801a5a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801a5c6:	7dfb      	ldrb	r3, [r7, #23]
 801a5c8:	2b01      	cmp	r3, #1
 801a5ca:	d105      	bne.n	801a5d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801a5cc:	4b39      	ldr	r3, [pc, #228]	; (801a6b4 <HAL_RCC_OscConfig+0x470>)
 801a5ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a5d0:	4a38      	ldr	r2, [pc, #224]	; (801a6b4 <HAL_RCC_OscConfig+0x470>)
 801a5d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801a5d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801a5d8:	687b      	ldr	r3, [r7, #4]
 801a5da:	699b      	ldr	r3, [r3, #24]
 801a5dc:	2b00      	cmp	r3, #0
 801a5de:	f000 80a1 	beq.w	801a724 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801a5e2:	4b34      	ldr	r3, [pc, #208]	; (801a6b4 <HAL_RCC_OscConfig+0x470>)
 801a5e4:	689b      	ldr	r3, [r3, #8]
 801a5e6:	f003 030c 	and.w	r3, r3, #12
 801a5ea:	2b08      	cmp	r3, #8
 801a5ec:	d05c      	beq.n	801a6a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801a5ee:	687b      	ldr	r3, [r7, #4]
 801a5f0:	699b      	ldr	r3, [r3, #24]
 801a5f2:	2b02      	cmp	r3, #2
 801a5f4:	d141      	bne.n	801a67a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801a5f6:	4b31      	ldr	r3, [pc, #196]	; (801a6bc <HAL_RCC_OscConfig+0x478>)
 801a5f8:	2200      	movs	r2, #0
 801a5fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a5fc:	f7fc f8a4 	bl	8016748 <HAL_GetTick>
 801a600:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801a602:	e008      	b.n	801a616 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801a604:	f7fc f8a0 	bl	8016748 <HAL_GetTick>
 801a608:	4602      	mov	r2, r0
 801a60a:	693b      	ldr	r3, [r7, #16]
 801a60c:	1ad3      	subs	r3, r2, r3
 801a60e:	2b02      	cmp	r3, #2
 801a610:	d901      	bls.n	801a616 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 801a612:	2303      	movs	r3, #3
 801a614:	e087      	b.n	801a726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801a616:	4b27      	ldr	r3, [pc, #156]	; (801a6b4 <HAL_RCC_OscConfig+0x470>)
 801a618:	681b      	ldr	r3, [r3, #0]
 801a61a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801a61e:	2b00      	cmp	r3, #0
 801a620:	d1f0      	bne.n	801a604 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 801a622:	687b      	ldr	r3, [r7, #4]
 801a624:	69da      	ldr	r2, [r3, #28]
 801a626:	687b      	ldr	r3, [r7, #4]
 801a628:	6a1b      	ldr	r3, [r3, #32]
 801a62a:	431a      	orrs	r2, r3
 801a62c:	687b      	ldr	r3, [r7, #4]
 801a62e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a630:	019b      	lsls	r3, r3, #6
 801a632:	431a      	orrs	r2, r3
 801a634:	687b      	ldr	r3, [r7, #4]
 801a636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a638:	085b      	lsrs	r3, r3, #1
 801a63a:	3b01      	subs	r3, #1
 801a63c:	041b      	lsls	r3, r3, #16
 801a63e:	431a      	orrs	r2, r3
 801a640:	687b      	ldr	r3, [r7, #4]
 801a642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a644:	061b      	lsls	r3, r3, #24
 801a646:	491b      	ldr	r1, [pc, #108]	; (801a6b4 <HAL_RCC_OscConfig+0x470>)
 801a648:	4313      	orrs	r3, r2
 801a64a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801a64c:	4b1b      	ldr	r3, [pc, #108]	; (801a6bc <HAL_RCC_OscConfig+0x478>)
 801a64e:	2201      	movs	r2, #1
 801a650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a652:	f7fc f879 	bl	8016748 <HAL_GetTick>
 801a656:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801a658:	e008      	b.n	801a66c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801a65a:	f7fc f875 	bl	8016748 <HAL_GetTick>
 801a65e:	4602      	mov	r2, r0
 801a660:	693b      	ldr	r3, [r7, #16]
 801a662:	1ad3      	subs	r3, r2, r3
 801a664:	2b02      	cmp	r3, #2
 801a666:	d901      	bls.n	801a66c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 801a668:	2303      	movs	r3, #3
 801a66a:	e05c      	b.n	801a726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801a66c:	4b11      	ldr	r3, [pc, #68]	; (801a6b4 <HAL_RCC_OscConfig+0x470>)
 801a66e:	681b      	ldr	r3, [r3, #0]
 801a670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801a674:	2b00      	cmp	r3, #0
 801a676:	d0f0      	beq.n	801a65a <HAL_RCC_OscConfig+0x416>
 801a678:	e054      	b.n	801a724 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801a67a:	4b10      	ldr	r3, [pc, #64]	; (801a6bc <HAL_RCC_OscConfig+0x478>)
 801a67c:	2200      	movs	r2, #0
 801a67e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a680:	f7fc f862 	bl	8016748 <HAL_GetTick>
 801a684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801a686:	e008      	b.n	801a69a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801a688:	f7fc f85e 	bl	8016748 <HAL_GetTick>
 801a68c:	4602      	mov	r2, r0
 801a68e:	693b      	ldr	r3, [r7, #16]
 801a690:	1ad3      	subs	r3, r2, r3
 801a692:	2b02      	cmp	r3, #2
 801a694:	d901      	bls.n	801a69a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 801a696:	2303      	movs	r3, #3
 801a698:	e045      	b.n	801a726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801a69a:	4b06      	ldr	r3, [pc, #24]	; (801a6b4 <HAL_RCC_OscConfig+0x470>)
 801a69c:	681b      	ldr	r3, [r3, #0]
 801a69e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801a6a2:	2b00      	cmp	r3, #0
 801a6a4:	d1f0      	bne.n	801a688 <HAL_RCC_OscConfig+0x444>
 801a6a6:	e03d      	b.n	801a724 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801a6a8:	687b      	ldr	r3, [r7, #4]
 801a6aa:	699b      	ldr	r3, [r3, #24]
 801a6ac:	2b01      	cmp	r3, #1
 801a6ae:	d107      	bne.n	801a6c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 801a6b0:	2301      	movs	r3, #1
 801a6b2:	e038      	b.n	801a726 <HAL_RCC_OscConfig+0x4e2>
 801a6b4:	40023800 	.word	0x40023800
 801a6b8:	40007000 	.word	0x40007000
 801a6bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 801a6c0:	4b1b      	ldr	r3, [pc, #108]	; (801a730 <HAL_RCC_OscConfig+0x4ec>)
 801a6c2:	685b      	ldr	r3, [r3, #4]
 801a6c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801a6c6:	687b      	ldr	r3, [r7, #4]
 801a6c8:	699b      	ldr	r3, [r3, #24]
 801a6ca:	2b01      	cmp	r3, #1
 801a6cc:	d028      	beq.n	801a720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801a6ce:	68fb      	ldr	r3, [r7, #12]
 801a6d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 801a6d4:	687b      	ldr	r3, [r7, #4]
 801a6d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801a6d8:	429a      	cmp	r2, r3
 801a6da:	d121      	bne.n	801a720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801a6dc:	68fb      	ldr	r3, [r7, #12]
 801a6de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801a6e2:	687b      	ldr	r3, [r7, #4]
 801a6e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801a6e6:	429a      	cmp	r2, r3
 801a6e8:	d11a      	bne.n	801a720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801a6ea:	68fa      	ldr	r2, [r7, #12]
 801a6ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 801a6f0:	4013      	ands	r3, r2
 801a6f2:	687a      	ldr	r2, [r7, #4]
 801a6f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801a6f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801a6f8:	4293      	cmp	r3, r2
 801a6fa:	d111      	bne.n	801a720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801a6fc:	68fb      	ldr	r3, [r7, #12]
 801a6fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 801a702:	687b      	ldr	r3, [r7, #4]
 801a704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a706:	085b      	lsrs	r3, r3, #1
 801a708:	3b01      	subs	r3, #1
 801a70a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801a70c:	429a      	cmp	r2, r3
 801a70e:	d107      	bne.n	801a720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 801a710:	68fb      	ldr	r3, [r7, #12]
 801a712:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 801a716:	687b      	ldr	r3, [r7, #4]
 801a718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a71a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801a71c:	429a      	cmp	r2, r3
 801a71e:	d001      	beq.n	801a724 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 801a720:	2301      	movs	r3, #1
 801a722:	e000      	b.n	801a726 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 801a724:	2300      	movs	r3, #0
}
 801a726:	4618      	mov	r0, r3
 801a728:	3718      	adds	r7, #24
 801a72a:	46bd      	mov	sp, r7
 801a72c:	bd80      	pop	{r7, pc}
 801a72e:	bf00      	nop
 801a730:	40023800 	.word	0x40023800

0801a734 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801a734:	b580      	push	{r7, lr}
 801a736:	b084      	sub	sp, #16
 801a738:	af00      	add	r7, sp, #0
 801a73a:	6078      	str	r0, [r7, #4]
 801a73c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801a73e:	687b      	ldr	r3, [r7, #4]
 801a740:	2b00      	cmp	r3, #0
 801a742:	d101      	bne.n	801a748 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801a744:	2301      	movs	r3, #1
 801a746:	e0cc      	b.n	801a8e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801a748:	4b68      	ldr	r3, [pc, #416]	; (801a8ec <HAL_RCC_ClockConfig+0x1b8>)
 801a74a:	681b      	ldr	r3, [r3, #0]
 801a74c:	f003 0307 	and.w	r3, r3, #7
 801a750:	683a      	ldr	r2, [r7, #0]
 801a752:	429a      	cmp	r2, r3
 801a754:	d90c      	bls.n	801a770 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801a756:	4b65      	ldr	r3, [pc, #404]	; (801a8ec <HAL_RCC_ClockConfig+0x1b8>)
 801a758:	683a      	ldr	r2, [r7, #0]
 801a75a:	b2d2      	uxtb	r2, r2
 801a75c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801a75e:	4b63      	ldr	r3, [pc, #396]	; (801a8ec <HAL_RCC_ClockConfig+0x1b8>)
 801a760:	681b      	ldr	r3, [r3, #0]
 801a762:	f003 0307 	and.w	r3, r3, #7
 801a766:	683a      	ldr	r2, [r7, #0]
 801a768:	429a      	cmp	r2, r3
 801a76a:	d001      	beq.n	801a770 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 801a76c:	2301      	movs	r3, #1
 801a76e:	e0b8      	b.n	801a8e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801a770:	687b      	ldr	r3, [r7, #4]
 801a772:	681b      	ldr	r3, [r3, #0]
 801a774:	f003 0302 	and.w	r3, r3, #2
 801a778:	2b00      	cmp	r3, #0
 801a77a:	d020      	beq.n	801a7be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801a77c:	687b      	ldr	r3, [r7, #4]
 801a77e:	681b      	ldr	r3, [r3, #0]
 801a780:	f003 0304 	and.w	r3, r3, #4
 801a784:	2b00      	cmp	r3, #0
 801a786:	d005      	beq.n	801a794 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801a788:	4b59      	ldr	r3, [pc, #356]	; (801a8f0 <HAL_RCC_ClockConfig+0x1bc>)
 801a78a:	689b      	ldr	r3, [r3, #8]
 801a78c:	4a58      	ldr	r2, [pc, #352]	; (801a8f0 <HAL_RCC_ClockConfig+0x1bc>)
 801a78e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 801a792:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801a794:	687b      	ldr	r3, [r7, #4]
 801a796:	681b      	ldr	r3, [r3, #0]
 801a798:	f003 0308 	and.w	r3, r3, #8
 801a79c:	2b00      	cmp	r3, #0
 801a79e:	d005      	beq.n	801a7ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 801a7a0:	4b53      	ldr	r3, [pc, #332]	; (801a8f0 <HAL_RCC_ClockConfig+0x1bc>)
 801a7a2:	689b      	ldr	r3, [r3, #8]
 801a7a4:	4a52      	ldr	r2, [pc, #328]	; (801a8f0 <HAL_RCC_ClockConfig+0x1bc>)
 801a7a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 801a7aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801a7ac:	4b50      	ldr	r3, [pc, #320]	; (801a8f0 <HAL_RCC_ClockConfig+0x1bc>)
 801a7ae:	689b      	ldr	r3, [r3, #8]
 801a7b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801a7b4:	687b      	ldr	r3, [r7, #4]
 801a7b6:	689b      	ldr	r3, [r3, #8]
 801a7b8:	494d      	ldr	r1, [pc, #308]	; (801a8f0 <HAL_RCC_ClockConfig+0x1bc>)
 801a7ba:	4313      	orrs	r3, r2
 801a7bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801a7be:	687b      	ldr	r3, [r7, #4]
 801a7c0:	681b      	ldr	r3, [r3, #0]
 801a7c2:	f003 0301 	and.w	r3, r3, #1
 801a7c6:	2b00      	cmp	r3, #0
 801a7c8:	d044      	beq.n	801a854 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801a7ca:	687b      	ldr	r3, [r7, #4]
 801a7cc:	685b      	ldr	r3, [r3, #4]
 801a7ce:	2b01      	cmp	r3, #1
 801a7d0:	d107      	bne.n	801a7e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801a7d2:	4b47      	ldr	r3, [pc, #284]	; (801a8f0 <HAL_RCC_ClockConfig+0x1bc>)
 801a7d4:	681b      	ldr	r3, [r3, #0]
 801a7d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801a7da:	2b00      	cmp	r3, #0
 801a7dc:	d119      	bne.n	801a812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801a7de:	2301      	movs	r3, #1
 801a7e0:	e07f      	b.n	801a8e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801a7e2:	687b      	ldr	r3, [r7, #4]
 801a7e4:	685b      	ldr	r3, [r3, #4]
 801a7e6:	2b02      	cmp	r3, #2
 801a7e8:	d003      	beq.n	801a7f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 801a7ea:	687b      	ldr	r3, [r7, #4]
 801a7ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801a7ee:	2b03      	cmp	r3, #3
 801a7f0:	d107      	bne.n	801a802 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801a7f2:	4b3f      	ldr	r3, [pc, #252]	; (801a8f0 <HAL_RCC_ClockConfig+0x1bc>)
 801a7f4:	681b      	ldr	r3, [r3, #0]
 801a7f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801a7fa:	2b00      	cmp	r3, #0
 801a7fc:	d109      	bne.n	801a812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801a7fe:	2301      	movs	r3, #1
 801a800:	e06f      	b.n	801a8e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801a802:	4b3b      	ldr	r3, [pc, #236]	; (801a8f0 <HAL_RCC_ClockConfig+0x1bc>)
 801a804:	681b      	ldr	r3, [r3, #0]
 801a806:	f003 0302 	and.w	r3, r3, #2
 801a80a:	2b00      	cmp	r3, #0
 801a80c:	d101      	bne.n	801a812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801a80e:	2301      	movs	r3, #1
 801a810:	e067      	b.n	801a8e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801a812:	4b37      	ldr	r3, [pc, #220]	; (801a8f0 <HAL_RCC_ClockConfig+0x1bc>)
 801a814:	689b      	ldr	r3, [r3, #8]
 801a816:	f023 0203 	bic.w	r2, r3, #3
 801a81a:	687b      	ldr	r3, [r7, #4]
 801a81c:	685b      	ldr	r3, [r3, #4]
 801a81e:	4934      	ldr	r1, [pc, #208]	; (801a8f0 <HAL_RCC_ClockConfig+0x1bc>)
 801a820:	4313      	orrs	r3, r2
 801a822:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801a824:	f7fb ff90 	bl	8016748 <HAL_GetTick>
 801a828:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801a82a:	e00a      	b.n	801a842 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801a82c:	f7fb ff8c 	bl	8016748 <HAL_GetTick>
 801a830:	4602      	mov	r2, r0
 801a832:	68fb      	ldr	r3, [r7, #12]
 801a834:	1ad3      	subs	r3, r2, r3
 801a836:	f241 3288 	movw	r2, #5000	; 0x1388
 801a83a:	4293      	cmp	r3, r2
 801a83c:	d901      	bls.n	801a842 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 801a83e:	2303      	movs	r3, #3
 801a840:	e04f      	b.n	801a8e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801a842:	4b2b      	ldr	r3, [pc, #172]	; (801a8f0 <HAL_RCC_ClockConfig+0x1bc>)
 801a844:	689b      	ldr	r3, [r3, #8]
 801a846:	f003 020c 	and.w	r2, r3, #12
 801a84a:	687b      	ldr	r3, [r7, #4]
 801a84c:	685b      	ldr	r3, [r3, #4]
 801a84e:	009b      	lsls	r3, r3, #2
 801a850:	429a      	cmp	r2, r3
 801a852:	d1eb      	bne.n	801a82c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801a854:	4b25      	ldr	r3, [pc, #148]	; (801a8ec <HAL_RCC_ClockConfig+0x1b8>)
 801a856:	681b      	ldr	r3, [r3, #0]
 801a858:	f003 0307 	and.w	r3, r3, #7
 801a85c:	683a      	ldr	r2, [r7, #0]
 801a85e:	429a      	cmp	r2, r3
 801a860:	d20c      	bcs.n	801a87c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801a862:	4b22      	ldr	r3, [pc, #136]	; (801a8ec <HAL_RCC_ClockConfig+0x1b8>)
 801a864:	683a      	ldr	r2, [r7, #0]
 801a866:	b2d2      	uxtb	r2, r2
 801a868:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801a86a:	4b20      	ldr	r3, [pc, #128]	; (801a8ec <HAL_RCC_ClockConfig+0x1b8>)
 801a86c:	681b      	ldr	r3, [r3, #0]
 801a86e:	f003 0307 	and.w	r3, r3, #7
 801a872:	683a      	ldr	r2, [r7, #0]
 801a874:	429a      	cmp	r2, r3
 801a876:	d001      	beq.n	801a87c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 801a878:	2301      	movs	r3, #1
 801a87a:	e032      	b.n	801a8e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801a87c:	687b      	ldr	r3, [r7, #4]
 801a87e:	681b      	ldr	r3, [r3, #0]
 801a880:	f003 0304 	and.w	r3, r3, #4
 801a884:	2b00      	cmp	r3, #0
 801a886:	d008      	beq.n	801a89a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801a888:	4b19      	ldr	r3, [pc, #100]	; (801a8f0 <HAL_RCC_ClockConfig+0x1bc>)
 801a88a:	689b      	ldr	r3, [r3, #8]
 801a88c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 801a890:	687b      	ldr	r3, [r7, #4]
 801a892:	68db      	ldr	r3, [r3, #12]
 801a894:	4916      	ldr	r1, [pc, #88]	; (801a8f0 <HAL_RCC_ClockConfig+0x1bc>)
 801a896:	4313      	orrs	r3, r2
 801a898:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801a89a:	687b      	ldr	r3, [r7, #4]
 801a89c:	681b      	ldr	r3, [r3, #0]
 801a89e:	f003 0308 	and.w	r3, r3, #8
 801a8a2:	2b00      	cmp	r3, #0
 801a8a4:	d009      	beq.n	801a8ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801a8a6:	4b12      	ldr	r3, [pc, #72]	; (801a8f0 <HAL_RCC_ClockConfig+0x1bc>)
 801a8a8:	689b      	ldr	r3, [r3, #8]
 801a8aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801a8ae:	687b      	ldr	r3, [r7, #4]
 801a8b0:	691b      	ldr	r3, [r3, #16]
 801a8b2:	00db      	lsls	r3, r3, #3
 801a8b4:	490e      	ldr	r1, [pc, #56]	; (801a8f0 <HAL_RCC_ClockConfig+0x1bc>)
 801a8b6:	4313      	orrs	r3, r2
 801a8b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801a8ba:	f000 f821 	bl	801a900 <HAL_RCC_GetSysClockFreq>
 801a8be:	4602      	mov	r2, r0
 801a8c0:	4b0b      	ldr	r3, [pc, #44]	; (801a8f0 <HAL_RCC_ClockConfig+0x1bc>)
 801a8c2:	689b      	ldr	r3, [r3, #8]
 801a8c4:	091b      	lsrs	r3, r3, #4
 801a8c6:	f003 030f 	and.w	r3, r3, #15
 801a8ca:	490a      	ldr	r1, [pc, #40]	; (801a8f4 <HAL_RCC_ClockConfig+0x1c0>)
 801a8cc:	5ccb      	ldrb	r3, [r1, r3]
 801a8ce:	fa22 f303 	lsr.w	r3, r2, r3
 801a8d2:	4a09      	ldr	r2, [pc, #36]	; (801a8f8 <HAL_RCC_ClockConfig+0x1c4>)
 801a8d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 801a8d6:	4b09      	ldr	r3, [pc, #36]	; (801a8fc <HAL_RCC_ClockConfig+0x1c8>)
 801a8d8:	681b      	ldr	r3, [r3, #0]
 801a8da:	4618      	mov	r0, r3
 801a8dc:	f7fb fef0 	bl	80166c0 <HAL_InitTick>

  return HAL_OK;
 801a8e0:	2300      	movs	r3, #0
}
 801a8e2:	4618      	mov	r0, r3
 801a8e4:	3710      	adds	r7, #16
 801a8e6:	46bd      	mov	sp, r7
 801a8e8:	bd80      	pop	{r7, pc}
 801a8ea:	bf00      	nop
 801a8ec:	40023c00 	.word	0x40023c00
 801a8f0:	40023800 	.word	0x40023800
 801a8f4:	08029eec 	.word	0x08029eec
 801a8f8:	200001e0 	.word	0x200001e0
 801a8fc:	200001e4 	.word	0x200001e4

0801a900 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801a900:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801a904:	b094      	sub	sp, #80	; 0x50
 801a906:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 801a908:	2300      	movs	r3, #0
 801a90a:	647b      	str	r3, [r7, #68]	; 0x44
 801a90c:	2300      	movs	r3, #0
 801a90e:	64fb      	str	r3, [r7, #76]	; 0x4c
 801a910:	2300      	movs	r3, #0
 801a912:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 801a914:	2300      	movs	r3, #0
 801a916:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801a918:	4b79      	ldr	r3, [pc, #484]	; (801ab00 <HAL_RCC_GetSysClockFreq+0x200>)
 801a91a:	689b      	ldr	r3, [r3, #8]
 801a91c:	f003 030c 	and.w	r3, r3, #12
 801a920:	2b08      	cmp	r3, #8
 801a922:	d00d      	beq.n	801a940 <HAL_RCC_GetSysClockFreq+0x40>
 801a924:	2b08      	cmp	r3, #8
 801a926:	f200 80e1 	bhi.w	801aaec <HAL_RCC_GetSysClockFreq+0x1ec>
 801a92a:	2b00      	cmp	r3, #0
 801a92c:	d002      	beq.n	801a934 <HAL_RCC_GetSysClockFreq+0x34>
 801a92e:	2b04      	cmp	r3, #4
 801a930:	d003      	beq.n	801a93a <HAL_RCC_GetSysClockFreq+0x3a>
 801a932:	e0db      	b.n	801aaec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 801a934:	4b73      	ldr	r3, [pc, #460]	; (801ab04 <HAL_RCC_GetSysClockFreq+0x204>)
 801a936:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 801a938:	e0db      	b.n	801aaf2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 801a93a:	4b73      	ldr	r3, [pc, #460]	; (801ab08 <HAL_RCC_GetSysClockFreq+0x208>)
 801a93c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 801a93e:	e0d8      	b.n	801aaf2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801a940:	4b6f      	ldr	r3, [pc, #444]	; (801ab00 <HAL_RCC_GetSysClockFreq+0x200>)
 801a942:	685b      	ldr	r3, [r3, #4]
 801a944:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a948:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801a94a:	4b6d      	ldr	r3, [pc, #436]	; (801ab00 <HAL_RCC_GetSysClockFreq+0x200>)
 801a94c:	685b      	ldr	r3, [r3, #4]
 801a94e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801a952:	2b00      	cmp	r3, #0
 801a954:	d063      	beq.n	801aa1e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801a956:	4b6a      	ldr	r3, [pc, #424]	; (801ab00 <HAL_RCC_GetSysClockFreq+0x200>)
 801a958:	685b      	ldr	r3, [r3, #4]
 801a95a:	099b      	lsrs	r3, r3, #6
 801a95c:	2200      	movs	r2, #0
 801a95e:	63bb      	str	r3, [r7, #56]	; 0x38
 801a960:	63fa      	str	r2, [r7, #60]	; 0x3c
 801a962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a964:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801a968:	633b      	str	r3, [r7, #48]	; 0x30
 801a96a:	2300      	movs	r3, #0
 801a96c:	637b      	str	r3, [r7, #52]	; 0x34
 801a96e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 801a972:	4622      	mov	r2, r4
 801a974:	462b      	mov	r3, r5
 801a976:	f04f 0000 	mov.w	r0, #0
 801a97a:	f04f 0100 	mov.w	r1, #0
 801a97e:	0159      	lsls	r1, r3, #5
 801a980:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801a984:	0150      	lsls	r0, r2, #5
 801a986:	4602      	mov	r2, r0
 801a988:	460b      	mov	r3, r1
 801a98a:	4621      	mov	r1, r4
 801a98c:	1a51      	subs	r1, r2, r1
 801a98e:	6139      	str	r1, [r7, #16]
 801a990:	4629      	mov	r1, r5
 801a992:	eb63 0301 	sbc.w	r3, r3, r1
 801a996:	617b      	str	r3, [r7, #20]
 801a998:	f04f 0200 	mov.w	r2, #0
 801a99c:	f04f 0300 	mov.w	r3, #0
 801a9a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 801a9a4:	4659      	mov	r1, fp
 801a9a6:	018b      	lsls	r3, r1, #6
 801a9a8:	4651      	mov	r1, sl
 801a9aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 801a9ae:	4651      	mov	r1, sl
 801a9b0:	018a      	lsls	r2, r1, #6
 801a9b2:	4651      	mov	r1, sl
 801a9b4:	ebb2 0801 	subs.w	r8, r2, r1
 801a9b8:	4659      	mov	r1, fp
 801a9ba:	eb63 0901 	sbc.w	r9, r3, r1
 801a9be:	f04f 0200 	mov.w	r2, #0
 801a9c2:	f04f 0300 	mov.w	r3, #0
 801a9c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801a9ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801a9ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801a9d2:	4690      	mov	r8, r2
 801a9d4:	4699      	mov	r9, r3
 801a9d6:	4623      	mov	r3, r4
 801a9d8:	eb18 0303 	adds.w	r3, r8, r3
 801a9dc:	60bb      	str	r3, [r7, #8]
 801a9de:	462b      	mov	r3, r5
 801a9e0:	eb49 0303 	adc.w	r3, r9, r3
 801a9e4:	60fb      	str	r3, [r7, #12]
 801a9e6:	f04f 0200 	mov.w	r2, #0
 801a9ea:	f04f 0300 	mov.w	r3, #0
 801a9ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 801a9f2:	4629      	mov	r1, r5
 801a9f4:	024b      	lsls	r3, r1, #9
 801a9f6:	4621      	mov	r1, r4
 801a9f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 801a9fc:	4621      	mov	r1, r4
 801a9fe:	024a      	lsls	r2, r1, #9
 801aa00:	4610      	mov	r0, r2
 801aa02:	4619      	mov	r1, r3
 801aa04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801aa06:	2200      	movs	r2, #0
 801aa08:	62bb      	str	r3, [r7, #40]	; 0x28
 801aa0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801aa0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801aa10:	f7e6 f8f2 	bl	8000bf8 <__aeabi_uldivmod>
 801aa14:	4602      	mov	r2, r0
 801aa16:	460b      	mov	r3, r1
 801aa18:	4613      	mov	r3, r2
 801aa1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801aa1c:	e058      	b.n	801aad0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801aa1e:	4b38      	ldr	r3, [pc, #224]	; (801ab00 <HAL_RCC_GetSysClockFreq+0x200>)
 801aa20:	685b      	ldr	r3, [r3, #4]
 801aa22:	099b      	lsrs	r3, r3, #6
 801aa24:	2200      	movs	r2, #0
 801aa26:	4618      	mov	r0, r3
 801aa28:	4611      	mov	r1, r2
 801aa2a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 801aa2e:	623b      	str	r3, [r7, #32]
 801aa30:	2300      	movs	r3, #0
 801aa32:	627b      	str	r3, [r7, #36]	; 0x24
 801aa34:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 801aa38:	4642      	mov	r2, r8
 801aa3a:	464b      	mov	r3, r9
 801aa3c:	f04f 0000 	mov.w	r0, #0
 801aa40:	f04f 0100 	mov.w	r1, #0
 801aa44:	0159      	lsls	r1, r3, #5
 801aa46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801aa4a:	0150      	lsls	r0, r2, #5
 801aa4c:	4602      	mov	r2, r0
 801aa4e:	460b      	mov	r3, r1
 801aa50:	4641      	mov	r1, r8
 801aa52:	ebb2 0a01 	subs.w	sl, r2, r1
 801aa56:	4649      	mov	r1, r9
 801aa58:	eb63 0b01 	sbc.w	fp, r3, r1
 801aa5c:	f04f 0200 	mov.w	r2, #0
 801aa60:	f04f 0300 	mov.w	r3, #0
 801aa64:	ea4f 138b 	mov.w	r3, fp, lsl #6
 801aa68:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 801aa6c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 801aa70:	ebb2 040a 	subs.w	r4, r2, sl
 801aa74:	eb63 050b 	sbc.w	r5, r3, fp
 801aa78:	f04f 0200 	mov.w	r2, #0
 801aa7c:	f04f 0300 	mov.w	r3, #0
 801aa80:	00eb      	lsls	r3, r5, #3
 801aa82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801aa86:	00e2      	lsls	r2, r4, #3
 801aa88:	4614      	mov	r4, r2
 801aa8a:	461d      	mov	r5, r3
 801aa8c:	4643      	mov	r3, r8
 801aa8e:	18e3      	adds	r3, r4, r3
 801aa90:	603b      	str	r3, [r7, #0]
 801aa92:	464b      	mov	r3, r9
 801aa94:	eb45 0303 	adc.w	r3, r5, r3
 801aa98:	607b      	str	r3, [r7, #4]
 801aa9a:	f04f 0200 	mov.w	r2, #0
 801aa9e:	f04f 0300 	mov.w	r3, #0
 801aaa2:	e9d7 4500 	ldrd	r4, r5, [r7]
 801aaa6:	4629      	mov	r1, r5
 801aaa8:	028b      	lsls	r3, r1, #10
 801aaaa:	4621      	mov	r1, r4
 801aaac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 801aab0:	4621      	mov	r1, r4
 801aab2:	028a      	lsls	r2, r1, #10
 801aab4:	4610      	mov	r0, r2
 801aab6:	4619      	mov	r1, r3
 801aab8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801aaba:	2200      	movs	r2, #0
 801aabc:	61bb      	str	r3, [r7, #24]
 801aabe:	61fa      	str	r2, [r7, #28]
 801aac0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801aac4:	f7e6 f898 	bl	8000bf8 <__aeabi_uldivmod>
 801aac8:	4602      	mov	r2, r0
 801aaca:	460b      	mov	r3, r1
 801aacc:	4613      	mov	r3, r2
 801aace:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 801aad0:	4b0b      	ldr	r3, [pc, #44]	; (801ab00 <HAL_RCC_GetSysClockFreq+0x200>)
 801aad2:	685b      	ldr	r3, [r3, #4]
 801aad4:	0c1b      	lsrs	r3, r3, #16
 801aad6:	f003 0303 	and.w	r3, r3, #3
 801aada:	3301      	adds	r3, #1
 801aadc:	005b      	lsls	r3, r3, #1
 801aade:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 801aae0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801aae2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801aae4:	fbb2 f3f3 	udiv	r3, r2, r3
 801aae8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 801aaea:	e002      	b.n	801aaf2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 801aaec:	4b05      	ldr	r3, [pc, #20]	; (801ab04 <HAL_RCC_GetSysClockFreq+0x204>)
 801aaee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 801aaf0:	bf00      	nop
    }
  }
  return sysclockfreq;
 801aaf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 801aaf4:	4618      	mov	r0, r3
 801aaf6:	3750      	adds	r7, #80	; 0x50
 801aaf8:	46bd      	mov	sp, r7
 801aafa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801aafe:	bf00      	nop
 801ab00:	40023800 	.word	0x40023800
 801ab04:	00f42400 	.word	0x00f42400
 801ab08:	007a1200 	.word	0x007a1200

0801ab0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801ab0c:	b480      	push	{r7}
 801ab0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801ab10:	4b03      	ldr	r3, [pc, #12]	; (801ab20 <HAL_RCC_GetHCLKFreq+0x14>)
 801ab12:	681b      	ldr	r3, [r3, #0]
}
 801ab14:	4618      	mov	r0, r3
 801ab16:	46bd      	mov	sp, r7
 801ab18:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab1c:	4770      	bx	lr
 801ab1e:	bf00      	nop
 801ab20:	200001e0 	.word	0x200001e0

0801ab24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801ab24:	b580      	push	{r7, lr}
 801ab26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 801ab28:	f7ff fff0 	bl	801ab0c <HAL_RCC_GetHCLKFreq>
 801ab2c:	4602      	mov	r2, r0
 801ab2e:	4b05      	ldr	r3, [pc, #20]	; (801ab44 <HAL_RCC_GetPCLK1Freq+0x20>)
 801ab30:	689b      	ldr	r3, [r3, #8]
 801ab32:	0a9b      	lsrs	r3, r3, #10
 801ab34:	f003 0307 	and.w	r3, r3, #7
 801ab38:	4903      	ldr	r1, [pc, #12]	; (801ab48 <HAL_RCC_GetPCLK1Freq+0x24>)
 801ab3a:	5ccb      	ldrb	r3, [r1, r3]
 801ab3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 801ab40:	4618      	mov	r0, r3
 801ab42:	bd80      	pop	{r7, pc}
 801ab44:	40023800 	.word	0x40023800
 801ab48:	08029efc 	.word	0x08029efc

0801ab4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801ab4c:	b580      	push	{r7, lr}
 801ab4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 801ab50:	f7ff ffdc 	bl	801ab0c <HAL_RCC_GetHCLKFreq>
 801ab54:	4602      	mov	r2, r0
 801ab56:	4b05      	ldr	r3, [pc, #20]	; (801ab6c <HAL_RCC_GetPCLK2Freq+0x20>)
 801ab58:	689b      	ldr	r3, [r3, #8]
 801ab5a:	0b5b      	lsrs	r3, r3, #13
 801ab5c:	f003 0307 	and.w	r3, r3, #7
 801ab60:	4903      	ldr	r1, [pc, #12]	; (801ab70 <HAL_RCC_GetPCLK2Freq+0x24>)
 801ab62:	5ccb      	ldrb	r3, [r1, r3]
 801ab64:	fa22 f303 	lsr.w	r3, r2, r3
}
 801ab68:	4618      	mov	r0, r3
 801ab6a:	bd80      	pop	{r7, pc}
 801ab6c:	40023800 	.word	0x40023800
 801ab70:	08029efc 	.word	0x08029efc

0801ab74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801ab74:	b580      	push	{r7, lr}
 801ab76:	b082      	sub	sp, #8
 801ab78:	af00      	add	r7, sp, #0
 801ab7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801ab7c:	687b      	ldr	r3, [r7, #4]
 801ab7e:	2b00      	cmp	r3, #0
 801ab80:	d101      	bne.n	801ab86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801ab82:	2301      	movs	r3, #1
 801ab84:	e041      	b.n	801ac0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801ab86:	687b      	ldr	r3, [r7, #4]
 801ab88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ab8c:	b2db      	uxtb	r3, r3
 801ab8e:	2b00      	cmp	r3, #0
 801ab90:	d106      	bne.n	801aba0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801ab92:	687b      	ldr	r3, [r7, #4]
 801ab94:	2200      	movs	r2, #0
 801ab96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801ab9a:	6878      	ldr	r0, [r7, #4]
 801ab9c:	f7fb fa86 	bl	80160ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801aba0:	687b      	ldr	r3, [r7, #4]
 801aba2:	2202      	movs	r2, #2
 801aba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801aba8:	687b      	ldr	r3, [r7, #4]
 801abaa:	681a      	ldr	r2, [r3, #0]
 801abac:	687b      	ldr	r3, [r7, #4]
 801abae:	3304      	adds	r3, #4
 801abb0:	4619      	mov	r1, r3
 801abb2:	4610      	mov	r0, r2
 801abb4:	f000 fcae 	bl	801b514 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801abb8:	687b      	ldr	r3, [r7, #4]
 801abba:	2201      	movs	r2, #1
 801abbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801abc0:	687b      	ldr	r3, [r7, #4]
 801abc2:	2201      	movs	r2, #1
 801abc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801abc8:	687b      	ldr	r3, [r7, #4]
 801abca:	2201      	movs	r2, #1
 801abcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801abd0:	687b      	ldr	r3, [r7, #4]
 801abd2:	2201      	movs	r2, #1
 801abd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801abd8:	687b      	ldr	r3, [r7, #4]
 801abda:	2201      	movs	r2, #1
 801abdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801abe0:	687b      	ldr	r3, [r7, #4]
 801abe2:	2201      	movs	r2, #1
 801abe4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801abe8:	687b      	ldr	r3, [r7, #4]
 801abea:	2201      	movs	r2, #1
 801abec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801abf0:	687b      	ldr	r3, [r7, #4]
 801abf2:	2201      	movs	r2, #1
 801abf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801abf8:	687b      	ldr	r3, [r7, #4]
 801abfa:	2201      	movs	r2, #1
 801abfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801ac00:	687b      	ldr	r3, [r7, #4]
 801ac02:	2201      	movs	r2, #1
 801ac04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801ac08:	2300      	movs	r3, #0
}
 801ac0a:	4618      	mov	r0, r3
 801ac0c:	3708      	adds	r7, #8
 801ac0e:	46bd      	mov	sp, r7
 801ac10:	bd80      	pop	{r7, pc}
	...

0801ac14 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 801ac14:	b480      	push	{r7}
 801ac16:	b085      	sub	sp, #20
 801ac18:	af00      	add	r7, sp, #0
 801ac1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801ac1c:	687b      	ldr	r3, [r7, #4]
 801ac1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ac22:	b2db      	uxtb	r3, r3
 801ac24:	2b01      	cmp	r3, #1
 801ac26:	d001      	beq.n	801ac2c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 801ac28:	2301      	movs	r3, #1
 801ac2a:	e03c      	b.n	801aca6 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801ac2c:	687b      	ldr	r3, [r7, #4]
 801ac2e:	2202      	movs	r2, #2
 801ac30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801ac34:	687b      	ldr	r3, [r7, #4]
 801ac36:	681b      	ldr	r3, [r3, #0]
 801ac38:	4a1e      	ldr	r2, [pc, #120]	; (801acb4 <HAL_TIM_Base_Start+0xa0>)
 801ac3a:	4293      	cmp	r3, r2
 801ac3c:	d018      	beq.n	801ac70 <HAL_TIM_Base_Start+0x5c>
 801ac3e:	687b      	ldr	r3, [r7, #4]
 801ac40:	681b      	ldr	r3, [r3, #0]
 801ac42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801ac46:	d013      	beq.n	801ac70 <HAL_TIM_Base_Start+0x5c>
 801ac48:	687b      	ldr	r3, [r7, #4]
 801ac4a:	681b      	ldr	r3, [r3, #0]
 801ac4c:	4a1a      	ldr	r2, [pc, #104]	; (801acb8 <HAL_TIM_Base_Start+0xa4>)
 801ac4e:	4293      	cmp	r3, r2
 801ac50:	d00e      	beq.n	801ac70 <HAL_TIM_Base_Start+0x5c>
 801ac52:	687b      	ldr	r3, [r7, #4]
 801ac54:	681b      	ldr	r3, [r3, #0]
 801ac56:	4a19      	ldr	r2, [pc, #100]	; (801acbc <HAL_TIM_Base_Start+0xa8>)
 801ac58:	4293      	cmp	r3, r2
 801ac5a:	d009      	beq.n	801ac70 <HAL_TIM_Base_Start+0x5c>
 801ac5c:	687b      	ldr	r3, [r7, #4]
 801ac5e:	681b      	ldr	r3, [r3, #0]
 801ac60:	4a17      	ldr	r2, [pc, #92]	; (801acc0 <HAL_TIM_Base_Start+0xac>)
 801ac62:	4293      	cmp	r3, r2
 801ac64:	d004      	beq.n	801ac70 <HAL_TIM_Base_Start+0x5c>
 801ac66:	687b      	ldr	r3, [r7, #4]
 801ac68:	681b      	ldr	r3, [r3, #0]
 801ac6a:	4a16      	ldr	r2, [pc, #88]	; (801acc4 <HAL_TIM_Base_Start+0xb0>)
 801ac6c:	4293      	cmp	r3, r2
 801ac6e:	d111      	bne.n	801ac94 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801ac70:	687b      	ldr	r3, [r7, #4]
 801ac72:	681b      	ldr	r3, [r3, #0]
 801ac74:	689b      	ldr	r3, [r3, #8]
 801ac76:	f003 0307 	and.w	r3, r3, #7
 801ac7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ac7c:	68fb      	ldr	r3, [r7, #12]
 801ac7e:	2b06      	cmp	r3, #6
 801ac80:	d010      	beq.n	801aca4 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 801ac82:	687b      	ldr	r3, [r7, #4]
 801ac84:	681b      	ldr	r3, [r3, #0]
 801ac86:	681a      	ldr	r2, [r3, #0]
 801ac88:	687b      	ldr	r3, [r7, #4]
 801ac8a:	681b      	ldr	r3, [r3, #0]
 801ac8c:	f042 0201 	orr.w	r2, r2, #1
 801ac90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ac92:	e007      	b.n	801aca4 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801ac94:	687b      	ldr	r3, [r7, #4]
 801ac96:	681b      	ldr	r3, [r3, #0]
 801ac98:	681a      	ldr	r2, [r3, #0]
 801ac9a:	687b      	ldr	r3, [r7, #4]
 801ac9c:	681b      	ldr	r3, [r3, #0]
 801ac9e:	f042 0201 	orr.w	r2, r2, #1
 801aca2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801aca4:	2300      	movs	r3, #0
}
 801aca6:	4618      	mov	r0, r3
 801aca8:	3714      	adds	r7, #20
 801acaa:	46bd      	mov	sp, r7
 801acac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acb0:	4770      	bx	lr
 801acb2:	bf00      	nop
 801acb4:	40010000 	.word	0x40010000
 801acb8:	40000400 	.word	0x40000400
 801acbc:	40000800 	.word	0x40000800
 801acc0:	40000c00 	.word	0x40000c00
 801acc4:	40014000 	.word	0x40014000

0801acc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801acc8:	b480      	push	{r7}
 801acca:	b085      	sub	sp, #20
 801accc:	af00      	add	r7, sp, #0
 801acce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801acd0:	687b      	ldr	r3, [r7, #4]
 801acd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801acd6:	b2db      	uxtb	r3, r3
 801acd8:	2b01      	cmp	r3, #1
 801acda:	d001      	beq.n	801ace0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801acdc:	2301      	movs	r3, #1
 801acde:	e044      	b.n	801ad6a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801ace0:	687b      	ldr	r3, [r7, #4]
 801ace2:	2202      	movs	r2, #2
 801ace4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801ace8:	687b      	ldr	r3, [r7, #4]
 801acea:	681b      	ldr	r3, [r3, #0]
 801acec:	68da      	ldr	r2, [r3, #12]
 801acee:	687b      	ldr	r3, [r7, #4]
 801acf0:	681b      	ldr	r3, [r3, #0]
 801acf2:	f042 0201 	orr.w	r2, r2, #1
 801acf6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801acf8:	687b      	ldr	r3, [r7, #4]
 801acfa:	681b      	ldr	r3, [r3, #0]
 801acfc:	4a1e      	ldr	r2, [pc, #120]	; (801ad78 <HAL_TIM_Base_Start_IT+0xb0>)
 801acfe:	4293      	cmp	r3, r2
 801ad00:	d018      	beq.n	801ad34 <HAL_TIM_Base_Start_IT+0x6c>
 801ad02:	687b      	ldr	r3, [r7, #4]
 801ad04:	681b      	ldr	r3, [r3, #0]
 801ad06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801ad0a:	d013      	beq.n	801ad34 <HAL_TIM_Base_Start_IT+0x6c>
 801ad0c:	687b      	ldr	r3, [r7, #4]
 801ad0e:	681b      	ldr	r3, [r3, #0]
 801ad10:	4a1a      	ldr	r2, [pc, #104]	; (801ad7c <HAL_TIM_Base_Start_IT+0xb4>)
 801ad12:	4293      	cmp	r3, r2
 801ad14:	d00e      	beq.n	801ad34 <HAL_TIM_Base_Start_IT+0x6c>
 801ad16:	687b      	ldr	r3, [r7, #4]
 801ad18:	681b      	ldr	r3, [r3, #0]
 801ad1a:	4a19      	ldr	r2, [pc, #100]	; (801ad80 <HAL_TIM_Base_Start_IT+0xb8>)
 801ad1c:	4293      	cmp	r3, r2
 801ad1e:	d009      	beq.n	801ad34 <HAL_TIM_Base_Start_IT+0x6c>
 801ad20:	687b      	ldr	r3, [r7, #4]
 801ad22:	681b      	ldr	r3, [r3, #0]
 801ad24:	4a17      	ldr	r2, [pc, #92]	; (801ad84 <HAL_TIM_Base_Start_IT+0xbc>)
 801ad26:	4293      	cmp	r3, r2
 801ad28:	d004      	beq.n	801ad34 <HAL_TIM_Base_Start_IT+0x6c>
 801ad2a:	687b      	ldr	r3, [r7, #4]
 801ad2c:	681b      	ldr	r3, [r3, #0]
 801ad2e:	4a16      	ldr	r2, [pc, #88]	; (801ad88 <HAL_TIM_Base_Start_IT+0xc0>)
 801ad30:	4293      	cmp	r3, r2
 801ad32:	d111      	bne.n	801ad58 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801ad34:	687b      	ldr	r3, [r7, #4]
 801ad36:	681b      	ldr	r3, [r3, #0]
 801ad38:	689b      	ldr	r3, [r3, #8]
 801ad3a:	f003 0307 	and.w	r3, r3, #7
 801ad3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ad40:	68fb      	ldr	r3, [r7, #12]
 801ad42:	2b06      	cmp	r3, #6
 801ad44:	d010      	beq.n	801ad68 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 801ad46:	687b      	ldr	r3, [r7, #4]
 801ad48:	681b      	ldr	r3, [r3, #0]
 801ad4a:	681a      	ldr	r2, [r3, #0]
 801ad4c:	687b      	ldr	r3, [r7, #4]
 801ad4e:	681b      	ldr	r3, [r3, #0]
 801ad50:	f042 0201 	orr.w	r2, r2, #1
 801ad54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ad56:	e007      	b.n	801ad68 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801ad58:	687b      	ldr	r3, [r7, #4]
 801ad5a:	681b      	ldr	r3, [r3, #0]
 801ad5c:	681a      	ldr	r2, [r3, #0]
 801ad5e:	687b      	ldr	r3, [r7, #4]
 801ad60:	681b      	ldr	r3, [r3, #0]
 801ad62:	f042 0201 	orr.w	r2, r2, #1
 801ad66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801ad68:	2300      	movs	r3, #0
}
 801ad6a:	4618      	mov	r0, r3
 801ad6c:	3714      	adds	r7, #20
 801ad6e:	46bd      	mov	sp, r7
 801ad70:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad74:	4770      	bx	lr
 801ad76:	bf00      	nop
 801ad78:	40010000 	.word	0x40010000
 801ad7c:	40000400 	.word	0x40000400
 801ad80:	40000800 	.word	0x40000800
 801ad84:	40000c00 	.word	0x40000c00
 801ad88:	40014000 	.word	0x40014000

0801ad8c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801ad8c:	b580      	push	{r7, lr}
 801ad8e:	b082      	sub	sp, #8
 801ad90:	af00      	add	r7, sp, #0
 801ad92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801ad94:	687b      	ldr	r3, [r7, #4]
 801ad96:	2b00      	cmp	r3, #0
 801ad98:	d101      	bne.n	801ad9e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801ad9a:	2301      	movs	r3, #1
 801ad9c:	e041      	b.n	801ae22 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801ad9e:	687b      	ldr	r3, [r7, #4]
 801ada0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ada4:	b2db      	uxtb	r3, r3
 801ada6:	2b00      	cmp	r3, #0
 801ada8:	d106      	bne.n	801adb8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801adaa:	687b      	ldr	r3, [r7, #4]
 801adac:	2200      	movs	r2, #0
 801adae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801adb2:	6878      	ldr	r0, [r7, #4]
 801adb4:	f000 f839 	bl	801ae2a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801adb8:	687b      	ldr	r3, [r7, #4]
 801adba:	2202      	movs	r2, #2
 801adbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801adc0:	687b      	ldr	r3, [r7, #4]
 801adc2:	681a      	ldr	r2, [r3, #0]
 801adc4:	687b      	ldr	r3, [r7, #4]
 801adc6:	3304      	adds	r3, #4
 801adc8:	4619      	mov	r1, r3
 801adca:	4610      	mov	r0, r2
 801adcc:	f000 fba2 	bl	801b514 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801add0:	687b      	ldr	r3, [r7, #4]
 801add2:	2201      	movs	r2, #1
 801add4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801add8:	687b      	ldr	r3, [r7, #4]
 801adda:	2201      	movs	r2, #1
 801addc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801ade0:	687b      	ldr	r3, [r7, #4]
 801ade2:	2201      	movs	r2, #1
 801ade4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801ade8:	687b      	ldr	r3, [r7, #4]
 801adea:	2201      	movs	r2, #1
 801adec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801adf0:	687b      	ldr	r3, [r7, #4]
 801adf2:	2201      	movs	r2, #1
 801adf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801adf8:	687b      	ldr	r3, [r7, #4]
 801adfa:	2201      	movs	r2, #1
 801adfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801ae00:	687b      	ldr	r3, [r7, #4]
 801ae02:	2201      	movs	r2, #1
 801ae04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801ae08:	687b      	ldr	r3, [r7, #4]
 801ae0a:	2201      	movs	r2, #1
 801ae0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801ae10:	687b      	ldr	r3, [r7, #4]
 801ae12:	2201      	movs	r2, #1
 801ae14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801ae18:	687b      	ldr	r3, [r7, #4]
 801ae1a:	2201      	movs	r2, #1
 801ae1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801ae20:	2300      	movs	r3, #0
}
 801ae22:	4618      	mov	r0, r3
 801ae24:	3708      	adds	r7, #8
 801ae26:	46bd      	mov	sp, r7
 801ae28:	bd80      	pop	{r7, pc}

0801ae2a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 801ae2a:	b480      	push	{r7}
 801ae2c:	b083      	sub	sp, #12
 801ae2e:	af00      	add	r7, sp, #0
 801ae30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 801ae32:	bf00      	nop
 801ae34:	370c      	adds	r7, #12
 801ae36:	46bd      	mov	sp, r7
 801ae38:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae3c:	4770      	bx	lr
	...

0801ae40 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801ae40:	b580      	push	{r7, lr}
 801ae42:	b084      	sub	sp, #16
 801ae44:	af00      	add	r7, sp, #0
 801ae46:	6078      	str	r0, [r7, #4]
 801ae48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801ae4a:	683b      	ldr	r3, [r7, #0]
 801ae4c:	2b00      	cmp	r3, #0
 801ae4e:	d109      	bne.n	801ae64 <HAL_TIM_PWM_Start+0x24>
 801ae50:	687b      	ldr	r3, [r7, #4]
 801ae52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801ae56:	b2db      	uxtb	r3, r3
 801ae58:	2b01      	cmp	r3, #1
 801ae5a:	bf14      	ite	ne
 801ae5c:	2301      	movne	r3, #1
 801ae5e:	2300      	moveq	r3, #0
 801ae60:	b2db      	uxtb	r3, r3
 801ae62:	e022      	b.n	801aeaa <HAL_TIM_PWM_Start+0x6a>
 801ae64:	683b      	ldr	r3, [r7, #0]
 801ae66:	2b04      	cmp	r3, #4
 801ae68:	d109      	bne.n	801ae7e <HAL_TIM_PWM_Start+0x3e>
 801ae6a:	687b      	ldr	r3, [r7, #4]
 801ae6c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801ae70:	b2db      	uxtb	r3, r3
 801ae72:	2b01      	cmp	r3, #1
 801ae74:	bf14      	ite	ne
 801ae76:	2301      	movne	r3, #1
 801ae78:	2300      	moveq	r3, #0
 801ae7a:	b2db      	uxtb	r3, r3
 801ae7c:	e015      	b.n	801aeaa <HAL_TIM_PWM_Start+0x6a>
 801ae7e:	683b      	ldr	r3, [r7, #0]
 801ae80:	2b08      	cmp	r3, #8
 801ae82:	d109      	bne.n	801ae98 <HAL_TIM_PWM_Start+0x58>
 801ae84:	687b      	ldr	r3, [r7, #4]
 801ae86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801ae8a:	b2db      	uxtb	r3, r3
 801ae8c:	2b01      	cmp	r3, #1
 801ae8e:	bf14      	ite	ne
 801ae90:	2301      	movne	r3, #1
 801ae92:	2300      	moveq	r3, #0
 801ae94:	b2db      	uxtb	r3, r3
 801ae96:	e008      	b.n	801aeaa <HAL_TIM_PWM_Start+0x6a>
 801ae98:	687b      	ldr	r3, [r7, #4]
 801ae9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801ae9e:	b2db      	uxtb	r3, r3
 801aea0:	2b01      	cmp	r3, #1
 801aea2:	bf14      	ite	ne
 801aea4:	2301      	movne	r3, #1
 801aea6:	2300      	moveq	r3, #0
 801aea8:	b2db      	uxtb	r3, r3
 801aeaa:	2b00      	cmp	r3, #0
 801aeac:	d001      	beq.n	801aeb2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 801aeae:	2301      	movs	r3, #1
 801aeb0:	e068      	b.n	801af84 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801aeb2:	683b      	ldr	r3, [r7, #0]
 801aeb4:	2b00      	cmp	r3, #0
 801aeb6:	d104      	bne.n	801aec2 <HAL_TIM_PWM_Start+0x82>
 801aeb8:	687b      	ldr	r3, [r7, #4]
 801aeba:	2202      	movs	r2, #2
 801aebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801aec0:	e013      	b.n	801aeea <HAL_TIM_PWM_Start+0xaa>
 801aec2:	683b      	ldr	r3, [r7, #0]
 801aec4:	2b04      	cmp	r3, #4
 801aec6:	d104      	bne.n	801aed2 <HAL_TIM_PWM_Start+0x92>
 801aec8:	687b      	ldr	r3, [r7, #4]
 801aeca:	2202      	movs	r2, #2
 801aecc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801aed0:	e00b      	b.n	801aeea <HAL_TIM_PWM_Start+0xaa>
 801aed2:	683b      	ldr	r3, [r7, #0]
 801aed4:	2b08      	cmp	r3, #8
 801aed6:	d104      	bne.n	801aee2 <HAL_TIM_PWM_Start+0xa2>
 801aed8:	687b      	ldr	r3, [r7, #4]
 801aeda:	2202      	movs	r2, #2
 801aedc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801aee0:	e003      	b.n	801aeea <HAL_TIM_PWM_Start+0xaa>
 801aee2:	687b      	ldr	r3, [r7, #4]
 801aee4:	2202      	movs	r2, #2
 801aee6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801aeea:	687b      	ldr	r3, [r7, #4]
 801aeec:	681b      	ldr	r3, [r3, #0]
 801aeee:	2201      	movs	r2, #1
 801aef0:	6839      	ldr	r1, [r7, #0]
 801aef2:	4618      	mov	r0, r3
 801aef4:	f000 fdb4 	bl	801ba60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801aef8:	687b      	ldr	r3, [r7, #4]
 801aefa:	681b      	ldr	r3, [r3, #0]
 801aefc:	4a23      	ldr	r2, [pc, #140]	; (801af8c <HAL_TIM_PWM_Start+0x14c>)
 801aefe:	4293      	cmp	r3, r2
 801af00:	d107      	bne.n	801af12 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801af02:	687b      	ldr	r3, [r7, #4]
 801af04:	681b      	ldr	r3, [r3, #0]
 801af06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801af08:	687b      	ldr	r3, [r7, #4]
 801af0a:	681b      	ldr	r3, [r3, #0]
 801af0c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801af10:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801af12:	687b      	ldr	r3, [r7, #4]
 801af14:	681b      	ldr	r3, [r3, #0]
 801af16:	4a1d      	ldr	r2, [pc, #116]	; (801af8c <HAL_TIM_PWM_Start+0x14c>)
 801af18:	4293      	cmp	r3, r2
 801af1a:	d018      	beq.n	801af4e <HAL_TIM_PWM_Start+0x10e>
 801af1c:	687b      	ldr	r3, [r7, #4]
 801af1e:	681b      	ldr	r3, [r3, #0]
 801af20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801af24:	d013      	beq.n	801af4e <HAL_TIM_PWM_Start+0x10e>
 801af26:	687b      	ldr	r3, [r7, #4]
 801af28:	681b      	ldr	r3, [r3, #0]
 801af2a:	4a19      	ldr	r2, [pc, #100]	; (801af90 <HAL_TIM_PWM_Start+0x150>)
 801af2c:	4293      	cmp	r3, r2
 801af2e:	d00e      	beq.n	801af4e <HAL_TIM_PWM_Start+0x10e>
 801af30:	687b      	ldr	r3, [r7, #4]
 801af32:	681b      	ldr	r3, [r3, #0]
 801af34:	4a17      	ldr	r2, [pc, #92]	; (801af94 <HAL_TIM_PWM_Start+0x154>)
 801af36:	4293      	cmp	r3, r2
 801af38:	d009      	beq.n	801af4e <HAL_TIM_PWM_Start+0x10e>
 801af3a:	687b      	ldr	r3, [r7, #4]
 801af3c:	681b      	ldr	r3, [r3, #0]
 801af3e:	4a16      	ldr	r2, [pc, #88]	; (801af98 <HAL_TIM_PWM_Start+0x158>)
 801af40:	4293      	cmp	r3, r2
 801af42:	d004      	beq.n	801af4e <HAL_TIM_PWM_Start+0x10e>
 801af44:	687b      	ldr	r3, [r7, #4]
 801af46:	681b      	ldr	r3, [r3, #0]
 801af48:	4a14      	ldr	r2, [pc, #80]	; (801af9c <HAL_TIM_PWM_Start+0x15c>)
 801af4a:	4293      	cmp	r3, r2
 801af4c:	d111      	bne.n	801af72 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801af4e:	687b      	ldr	r3, [r7, #4]
 801af50:	681b      	ldr	r3, [r3, #0]
 801af52:	689b      	ldr	r3, [r3, #8]
 801af54:	f003 0307 	and.w	r3, r3, #7
 801af58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801af5a:	68fb      	ldr	r3, [r7, #12]
 801af5c:	2b06      	cmp	r3, #6
 801af5e:	d010      	beq.n	801af82 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 801af60:	687b      	ldr	r3, [r7, #4]
 801af62:	681b      	ldr	r3, [r3, #0]
 801af64:	681a      	ldr	r2, [r3, #0]
 801af66:	687b      	ldr	r3, [r7, #4]
 801af68:	681b      	ldr	r3, [r3, #0]
 801af6a:	f042 0201 	orr.w	r2, r2, #1
 801af6e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801af70:	e007      	b.n	801af82 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801af72:	687b      	ldr	r3, [r7, #4]
 801af74:	681b      	ldr	r3, [r3, #0]
 801af76:	681a      	ldr	r2, [r3, #0]
 801af78:	687b      	ldr	r3, [r7, #4]
 801af7a:	681b      	ldr	r3, [r3, #0]
 801af7c:	f042 0201 	orr.w	r2, r2, #1
 801af80:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801af82:	2300      	movs	r3, #0
}
 801af84:	4618      	mov	r0, r3
 801af86:	3710      	adds	r7, #16
 801af88:	46bd      	mov	sp, r7
 801af8a:	bd80      	pop	{r7, pc}
 801af8c:	40010000 	.word	0x40010000
 801af90:	40000400 	.word	0x40000400
 801af94:	40000800 	.word	0x40000800
 801af98:	40000c00 	.word	0x40000c00
 801af9c:	40014000 	.word	0x40014000

0801afa0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801afa0:	b580      	push	{r7, lr}
 801afa2:	b082      	sub	sp, #8
 801afa4:	af00      	add	r7, sp, #0
 801afa6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801afa8:	687b      	ldr	r3, [r7, #4]
 801afaa:	681b      	ldr	r3, [r3, #0]
 801afac:	691b      	ldr	r3, [r3, #16]
 801afae:	f003 0302 	and.w	r3, r3, #2
 801afb2:	2b02      	cmp	r3, #2
 801afb4:	d122      	bne.n	801affc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801afb6:	687b      	ldr	r3, [r7, #4]
 801afb8:	681b      	ldr	r3, [r3, #0]
 801afba:	68db      	ldr	r3, [r3, #12]
 801afbc:	f003 0302 	and.w	r3, r3, #2
 801afc0:	2b02      	cmp	r3, #2
 801afc2:	d11b      	bne.n	801affc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801afc4:	687b      	ldr	r3, [r7, #4]
 801afc6:	681b      	ldr	r3, [r3, #0]
 801afc8:	f06f 0202 	mvn.w	r2, #2
 801afcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801afce:	687b      	ldr	r3, [r7, #4]
 801afd0:	2201      	movs	r2, #1
 801afd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801afd4:	687b      	ldr	r3, [r7, #4]
 801afd6:	681b      	ldr	r3, [r3, #0]
 801afd8:	699b      	ldr	r3, [r3, #24]
 801afda:	f003 0303 	and.w	r3, r3, #3
 801afde:	2b00      	cmp	r3, #0
 801afe0:	d003      	beq.n	801afea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801afe2:	6878      	ldr	r0, [r7, #4]
 801afe4:	f000 fa77 	bl	801b4d6 <HAL_TIM_IC_CaptureCallback>
 801afe8:	e005      	b.n	801aff6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801afea:	6878      	ldr	r0, [r7, #4]
 801afec:	f000 fa69 	bl	801b4c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801aff0:	6878      	ldr	r0, [r7, #4]
 801aff2:	f000 fa7a 	bl	801b4ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801aff6:	687b      	ldr	r3, [r7, #4]
 801aff8:	2200      	movs	r2, #0
 801affa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801affc:	687b      	ldr	r3, [r7, #4]
 801affe:	681b      	ldr	r3, [r3, #0]
 801b000:	691b      	ldr	r3, [r3, #16]
 801b002:	f003 0304 	and.w	r3, r3, #4
 801b006:	2b04      	cmp	r3, #4
 801b008:	d122      	bne.n	801b050 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801b00a:	687b      	ldr	r3, [r7, #4]
 801b00c:	681b      	ldr	r3, [r3, #0]
 801b00e:	68db      	ldr	r3, [r3, #12]
 801b010:	f003 0304 	and.w	r3, r3, #4
 801b014:	2b04      	cmp	r3, #4
 801b016:	d11b      	bne.n	801b050 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801b018:	687b      	ldr	r3, [r7, #4]
 801b01a:	681b      	ldr	r3, [r3, #0]
 801b01c:	f06f 0204 	mvn.w	r2, #4
 801b020:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801b022:	687b      	ldr	r3, [r7, #4]
 801b024:	2202      	movs	r2, #2
 801b026:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801b028:	687b      	ldr	r3, [r7, #4]
 801b02a:	681b      	ldr	r3, [r3, #0]
 801b02c:	699b      	ldr	r3, [r3, #24]
 801b02e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801b032:	2b00      	cmp	r3, #0
 801b034:	d003      	beq.n	801b03e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801b036:	6878      	ldr	r0, [r7, #4]
 801b038:	f000 fa4d 	bl	801b4d6 <HAL_TIM_IC_CaptureCallback>
 801b03c:	e005      	b.n	801b04a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801b03e:	6878      	ldr	r0, [r7, #4]
 801b040:	f000 fa3f 	bl	801b4c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801b044:	6878      	ldr	r0, [r7, #4]
 801b046:	f000 fa50 	bl	801b4ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801b04a:	687b      	ldr	r3, [r7, #4]
 801b04c:	2200      	movs	r2, #0
 801b04e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801b050:	687b      	ldr	r3, [r7, #4]
 801b052:	681b      	ldr	r3, [r3, #0]
 801b054:	691b      	ldr	r3, [r3, #16]
 801b056:	f003 0308 	and.w	r3, r3, #8
 801b05a:	2b08      	cmp	r3, #8
 801b05c:	d122      	bne.n	801b0a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801b05e:	687b      	ldr	r3, [r7, #4]
 801b060:	681b      	ldr	r3, [r3, #0]
 801b062:	68db      	ldr	r3, [r3, #12]
 801b064:	f003 0308 	and.w	r3, r3, #8
 801b068:	2b08      	cmp	r3, #8
 801b06a:	d11b      	bne.n	801b0a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801b06c:	687b      	ldr	r3, [r7, #4]
 801b06e:	681b      	ldr	r3, [r3, #0]
 801b070:	f06f 0208 	mvn.w	r2, #8
 801b074:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801b076:	687b      	ldr	r3, [r7, #4]
 801b078:	2204      	movs	r2, #4
 801b07a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801b07c:	687b      	ldr	r3, [r7, #4]
 801b07e:	681b      	ldr	r3, [r3, #0]
 801b080:	69db      	ldr	r3, [r3, #28]
 801b082:	f003 0303 	and.w	r3, r3, #3
 801b086:	2b00      	cmp	r3, #0
 801b088:	d003      	beq.n	801b092 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801b08a:	6878      	ldr	r0, [r7, #4]
 801b08c:	f000 fa23 	bl	801b4d6 <HAL_TIM_IC_CaptureCallback>
 801b090:	e005      	b.n	801b09e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801b092:	6878      	ldr	r0, [r7, #4]
 801b094:	f000 fa15 	bl	801b4c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801b098:	6878      	ldr	r0, [r7, #4]
 801b09a:	f000 fa26 	bl	801b4ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801b09e:	687b      	ldr	r3, [r7, #4]
 801b0a0:	2200      	movs	r2, #0
 801b0a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801b0a4:	687b      	ldr	r3, [r7, #4]
 801b0a6:	681b      	ldr	r3, [r3, #0]
 801b0a8:	691b      	ldr	r3, [r3, #16]
 801b0aa:	f003 0310 	and.w	r3, r3, #16
 801b0ae:	2b10      	cmp	r3, #16
 801b0b0:	d122      	bne.n	801b0f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801b0b2:	687b      	ldr	r3, [r7, #4]
 801b0b4:	681b      	ldr	r3, [r3, #0]
 801b0b6:	68db      	ldr	r3, [r3, #12]
 801b0b8:	f003 0310 	and.w	r3, r3, #16
 801b0bc:	2b10      	cmp	r3, #16
 801b0be:	d11b      	bne.n	801b0f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801b0c0:	687b      	ldr	r3, [r7, #4]
 801b0c2:	681b      	ldr	r3, [r3, #0]
 801b0c4:	f06f 0210 	mvn.w	r2, #16
 801b0c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801b0ca:	687b      	ldr	r3, [r7, #4]
 801b0cc:	2208      	movs	r2, #8
 801b0ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801b0d0:	687b      	ldr	r3, [r7, #4]
 801b0d2:	681b      	ldr	r3, [r3, #0]
 801b0d4:	69db      	ldr	r3, [r3, #28]
 801b0d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801b0da:	2b00      	cmp	r3, #0
 801b0dc:	d003      	beq.n	801b0e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801b0de:	6878      	ldr	r0, [r7, #4]
 801b0e0:	f000 f9f9 	bl	801b4d6 <HAL_TIM_IC_CaptureCallback>
 801b0e4:	e005      	b.n	801b0f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801b0e6:	6878      	ldr	r0, [r7, #4]
 801b0e8:	f000 f9eb 	bl	801b4c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801b0ec:	6878      	ldr	r0, [r7, #4]
 801b0ee:	f000 f9fc 	bl	801b4ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801b0f2:	687b      	ldr	r3, [r7, #4]
 801b0f4:	2200      	movs	r2, #0
 801b0f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801b0f8:	687b      	ldr	r3, [r7, #4]
 801b0fa:	681b      	ldr	r3, [r3, #0]
 801b0fc:	691b      	ldr	r3, [r3, #16]
 801b0fe:	f003 0301 	and.w	r3, r3, #1
 801b102:	2b01      	cmp	r3, #1
 801b104:	d10e      	bne.n	801b124 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801b106:	687b      	ldr	r3, [r7, #4]
 801b108:	681b      	ldr	r3, [r3, #0]
 801b10a:	68db      	ldr	r3, [r3, #12]
 801b10c:	f003 0301 	and.w	r3, r3, #1
 801b110:	2b01      	cmp	r3, #1
 801b112:	d107      	bne.n	801b124 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801b114:	687b      	ldr	r3, [r7, #4]
 801b116:	681b      	ldr	r3, [r3, #0]
 801b118:	f06f 0201 	mvn.w	r2, #1
 801b11c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801b11e:	6878      	ldr	r0, [r7, #4]
 801b120:	f7e9 f85e 	bl	80041e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801b124:	687b      	ldr	r3, [r7, #4]
 801b126:	681b      	ldr	r3, [r3, #0]
 801b128:	691b      	ldr	r3, [r3, #16]
 801b12a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b12e:	2b80      	cmp	r3, #128	; 0x80
 801b130:	d10e      	bne.n	801b150 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801b132:	687b      	ldr	r3, [r7, #4]
 801b134:	681b      	ldr	r3, [r3, #0]
 801b136:	68db      	ldr	r3, [r3, #12]
 801b138:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b13c:	2b80      	cmp	r3, #128	; 0x80
 801b13e:	d107      	bne.n	801b150 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801b140:	687b      	ldr	r3, [r7, #4]
 801b142:	681b      	ldr	r3, [r3, #0]
 801b144:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801b148:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801b14a:	6878      	ldr	r0, [r7, #4]
 801b14c:	f000 fd26 	bl	801bb9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801b150:	687b      	ldr	r3, [r7, #4]
 801b152:	681b      	ldr	r3, [r3, #0]
 801b154:	691b      	ldr	r3, [r3, #16]
 801b156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b15a:	2b40      	cmp	r3, #64	; 0x40
 801b15c:	d10e      	bne.n	801b17c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801b15e:	687b      	ldr	r3, [r7, #4]
 801b160:	681b      	ldr	r3, [r3, #0]
 801b162:	68db      	ldr	r3, [r3, #12]
 801b164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b168:	2b40      	cmp	r3, #64	; 0x40
 801b16a:	d107      	bne.n	801b17c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801b16c:	687b      	ldr	r3, [r7, #4]
 801b16e:	681b      	ldr	r3, [r3, #0]
 801b170:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801b174:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801b176:	6878      	ldr	r0, [r7, #4]
 801b178:	f000 f9c1 	bl	801b4fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801b17c:	687b      	ldr	r3, [r7, #4]
 801b17e:	681b      	ldr	r3, [r3, #0]
 801b180:	691b      	ldr	r3, [r3, #16]
 801b182:	f003 0320 	and.w	r3, r3, #32
 801b186:	2b20      	cmp	r3, #32
 801b188:	d10e      	bne.n	801b1a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801b18a:	687b      	ldr	r3, [r7, #4]
 801b18c:	681b      	ldr	r3, [r3, #0]
 801b18e:	68db      	ldr	r3, [r3, #12]
 801b190:	f003 0320 	and.w	r3, r3, #32
 801b194:	2b20      	cmp	r3, #32
 801b196:	d107      	bne.n	801b1a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801b198:	687b      	ldr	r3, [r7, #4]
 801b19a:	681b      	ldr	r3, [r3, #0]
 801b19c:	f06f 0220 	mvn.w	r2, #32
 801b1a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801b1a2:	6878      	ldr	r0, [r7, #4]
 801b1a4:	f000 fcf0 	bl	801bb88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801b1a8:	bf00      	nop
 801b1aa:	3708      	adds	r7, #8
 801b1ac:	46bd      	mov	sp, r7
 801b1ae:	bd80      	pop	{r7, pc}

0801b1b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801b1b0:	b580      	push	{r7, lr}
 801b1b2:	b086      	sub	sp, #24
 801b1b4:	af00      	add	r7, sp, #0
 801b1b6:	60f8      	str	r0, [r7, #12]
 801b1b8:	60b9      	str	r1, [r7, #8]
 801b1ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801b1bc:	2300      	movs	r3, #0
 801b1be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801b1c0:	68fb      	ldr	r3, [r7, #12]
 801b1c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801b1c6:	2b01      	cmp	r3, #1
 801b1c8:	d101      	bne.n	801b1ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 801b1ca:	2302      	movs	r3, #2
 801b1cc:	e0ae      	b.n	801b32c <HAL_TIM_PWM_ConfigChannel+0x17c>
 801b1ce:	68fb      	ldr	r3, [r7, #12]
 801b1d0:	2201      	movs	r2, #1
 801b1d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 801b1d6:	687b      	ldr	r3, [r7, #4]
 801b1d8:	2b0c      	cmp	r3, #12
 801b1da:	f200 809f 	bhi.w	801b31c <HAL_TIM_PWM_ConfigChannel+0x16c>
 801b1de:	a201      	add	r2, pc, #4	; (adr r2, 801b1e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 801b1e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b1e4:	0801b219 	.word	0x0801b219
 801b1e8:	0801b31d 	.word	0x0801b31d
 801b1ec:	0801b31d 	.word	0x0801b31d
 801b1f0:	0801b31d 	.word	0x0801b31d
 801b1f4:	0801b259 	.word	0x0801b259
 801b1f8:	0801b31d 	.word	0x0801b31d
 801b1fc:	0801b31d 	.word	0x0801b31d
 801b200:	0801b31d 	.word	0x0801b31d
 801b204:	0801b29b 	.word	0x0801b29b
 801b208:	0801b31d 	.word	0x0801b31d
 801b20c:	0801b31d 	.word	0x0801b31d
 801b210:	0801b31d 	.word	0x0801b31d
 801b214:	0801b2db 	.word	0x0801b2db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801b218:	68fb      	ldr	r3, [r7, #12]
 801b21a:	681b      	ldr	r3, [r3, #0]
 801b21c:	68b9      	ldr	r1, [r7, #8]
 801b21e:	4618      	mov	r0, r3
 801b220:	f000 f9f8 	bl	801b614 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801b224:	68fb      	ldr	r3, [r7, #12]
 801b226:	681b      	ldr	r3, [r3, #0]
 801b228:	699a      	ldr	r2, [r3, #24]
 801b22a:	68fb      	ldr	r3, [r7, #12]
 801b22c:	681b      	ldr	r3, [r3, #0]
 801b22e:	f042 0208 	orr.w	r2, r2, #8
 801b232:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801b234:	68fb      	ldr	r3, [r7, #12]
 801b236:	681b      	ldr	r3, [r3, #0]
 801b238:	699a      	ldr	r2, [r3, #24]
 801b23a:	68fb      	ldr	r3, [r7, #12]
 801b23c:	681b      	ldr	r3, [r3, #0]
 801b23e:	f022 0204 	bic.w	r2, r2, #4
 801b242:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801b244:	68fb      	ldr	r3, [r7, #12]
 801b246:	681b      	ldr	r3, [r3, #0]
 801b248:	6999      	ldr	r1, [r3, #24]
 801b24a:	68bb      	ldr	r3, [r7, #8]
 801b24c:	691a      	ldr	r2, [r3, #16]
 801b24e:	68fb      	ldr	r3, [r7, #12]
 801b250:	681b      	ldr	r3, [r3, #0]
 801b252:	430a      	orrs	r2, r1
 801b254:	619a      	str	r2, [r3, #24]
      break;
 801b256:	e064      	b.n	801b322 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801b258:	68fb      	ldr	r3, [r7, #12]
 801b25a:	681b      	ldr	r3, [r3, #0]
 801b25c:	68b9      	ldr	r1, [r7, #8]
 801b25e:	4618      	mov	r0, r3
 801b260:	f000 fa3e 	bl	801b6e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801b264:	68fb      	ldr	r3, [r7, #12]
 801b266:	681b      	ldr	r3, [r3, #0]
 801b268:	699a      	ldr	r2, [r3, #24]
 801b26a:	68fb      	ldr	r3, [r7, #12]
 801b26c:	681b      	ldr	r3, [r3, #0]
 801b26e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801b272:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801b274:	68fb      	ldr	r3, [r7, #12]
 801b276:	681b      	ldr	r3, [r3, #0]
 801b278:	699a      	ldr	r2, [r3, #24]
 801b27a:	68fb      	ldr	r3, [r7, #12]
 801b27c:	681b      	ldr	r3, [r3, #0]
 801b27e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801b282:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801b284:	68fb      	ldr	r3, [r7, #12]
 801b286:	681b      	ldr	r3, [r3, #0]
 801b288:	6999      	ldr	r1, [r3, #24]
 801b28a:	68bb      	ldr	r3, [r7, #8]
 801b28c:	691b      	ldr	r3, [r3, #16]
 801b28e:	021a      	lsls	r2, r3, #8
 801b290:	68fb      	ldr	r3, [r7, #12]
 801b292:	681b      	ldr	r3, [r3, #0]
 801b294:	430a      	orrs	r2, r1
 801b296:	619a      	str	r2, [r3, #24]
      break;
 801b298:	e043      	b.n	801b322 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801b29a:	68fb      	ldr	r3, [r7, #12]
 801b29c:	681b      	ldr	r3, [r3, #0]
 801b29e:	68b9      	ldr	r1, [r7, #8]
 801b2a0:	4618      	mov	r0, r3
 801b2a2:	f000 fa89 	bl	801b7b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801b2a6:	68fb      	ldr	r3, [r7, #12]
 801b2a8:	681b      	ldr	r3, [r3, #0]
 801b2aa:	69da      	ldr	r2, [r3, #28]
 801b2ac:	68fb      	ldr	r3, [r7, #12]
 801b2ae:	681b      	ldr	r3, [r3, #0]
 801b2b0:	f042 0208 	orr.w	r2, r2, #8
 801b2b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801b2b6:	68fb      	ldr	r3, [r7, #12]
 801b2b8:	681b      	ldr	r3, [r3, #0]
 801b2ba:	69da      	ldr	r2, [r3, #28]
 801b2bc:	68fb      	ldr	r3, [r7, #12]
 801b2be:	681b      	ldr	r3, [r3, #0]
 801b2c0:	f022 0204 	bic.w	r2, r2, #4
 801b2c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801b2c6:	68fb      	ldr	r3, [r7, #12]
 801b2c8:	681b      	ldr	r3, [r3, #0]
 801b2ca:	69d9      	ldr	r1, [r3, #28]
 801b2cc:	68bb      	ldr	r3, [r7, #8]
 801b2ce:	691a      	ldr	r2, [r3, #16]
 801b2d0:	68fb      	ldr	r3, [r7, #12]
 801b2d2:	681b      	ldr	r3, [r3, #0]
 801b2d4:	430a      	orrs	r2, r1
 801b2d6:	61da      	str	r2, [r3, #28]
      break;
 801b2d8:	e023      	b.n	801b322 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801b2da:	68fb      	ldr	r3, [r7, #12]
 801b2dc:	681b      	ldr	r3, [r3, #0]
 801b2de:	68b9      	ldr	r1, [r7, #8]
 801b2e0:	4618      	mov	r0, r3
 801b2e2:	f000 fad3 	bl	801b88c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801b2e6:	68fb      	ldr	r3, [r7, #12]
 801b2e8:	681b      	ldr	r3, [r3, #0]
 801b2ea:	69da      	ldr	r2, [r3, #28]
 801b2ec:	68fb      	ldr	r3, [r7, #12]
 801b2ee:	681b      	ldr	r3, [r3, #0]
 801b2f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801b2f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801b2f6:	68fb      	ldr	r3, [r7, #12]
 801b2f8:	681b      	ldr	r3, [r3, #0]
 801b2fa:	69da      	ldr	r2, [r3, #28]
 801b2fc:	68fb      	ldr	r3, [r7, #12]
 801b2fe:	681b      	ldr	r3, [r3, #0]
 801b300:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801b304:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801b306:	68fb      	ldr	r3, [r7, #12]
 801b308:	681b      	ldr	r3, [r3, #0]
 801b30a:	69d9      	ldr	r1, [r3, #28]
 801b30c:	68bb      	ldr	r3, [r7, #8]
 801b30e:	691b      	ldr	r3, [r3, #16]
 801b310:	021a      	lsls	r2, r3, #8
 801b312:	68fb      	ldr	r3, [r7, #12]
 801b314:	681b      	ldr	r3, [r3, #0]
 801b316:	430a      	orrs	r2, r1
 801b318:	61da      	str	r2, [r3, #28]
      break;
 801b31a:	e002      	b.n	801b322 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 801b31c:	2301      	movs	r3, #1
 801b31e:	75fb      	strb	r3, [r7, #23]
      break;
 801b320:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801b322:	68fb      	ldr	r3, [r7, #12]
 801b324:	2200      	movs	r2, #0
 801b326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801b32a:	7dfb      	ldrb	r3, [r7, #23]
}
 801b32c:	4618      	mov	r0, r3
 801b32e:	3718      	adds	r7, #24
 801b330:	46bd      	mov	sp, r7
 801b332:	bd80      	pop	{r7, pc}

0801b334 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801b334:	b580      	push	{r7, lr}
 801b336:	b084      	sub	sp, #16
 801b338:	af00      	add	r7, sp, #0
 801b33a:	6078      	str	r0, [r7, #4]
 801b33c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801b33e:	2300      	movs	r3, #0
 801b340:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801b342:	687b      	ldr	r3, [r7, #4]
 801b344:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801b348:	2b01      	cmp	r3, #1
 801b34a:	d101      	bne.n	801b350 <HAL_TIM_ConfigClockSource+0x1c>
 801b34c:	2302      	movs	r3, #2
 801b34e:	e0b4      	b.n	801b4ba <HAL_TIM_ConfigClockSource+0x186>
 801b350:	687b      	ldr	r3, [r7, #4]
 801b352:	2201      	movs	r2, #1
 801b354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801b358:	687b      	ldr	r3, [r7, #4]
 801b35a:	2202      	movs	r2, #2
 801b35c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801b360:	687b      	ldr	r3, [r7, #4]
 801b362:	681b      	ldr	r3, [r3, #0]
 801b364:	689b      	ldr	r3, [r3, #8]
 801b366:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801b368:	68bb      	ldr	r3, [r7, #8]
 801b36a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 801b36e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801b370:	68bb      	ldr	r3, [r7, #8]
 801b372:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801b376:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801b378:	687b      	ldr	r3, [r7, #4]
 801b37a:	681b      	ldr	r3, [r3, #0]
 801b37c:	68ba      	ldr	r2, [r7, #8]
 801b37e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801b380:	683b      	ldr	r3, [r7, #0]
 801b382:	681b      	ldr	r3, [r3, #0]
 801b384:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801b388:	d03e      	beq.n	801b408 <HAL_TIM_ConfigClockSource+0xd4>
 801b38a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801b38e:	f200 8087 	bhi.w	801b4a0 <HAL_TIM_ConfigClockSource+0x16c>
 801b392:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801b396:	f000 8086 	beq.w	801b4a6 <HAL_TIM_ConfigClockSource+0x172>
 801b39a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801b39e:	d87f      	bhi.n	801b4a0 <HAL_TIM_ConfigClockSource+0x16c>
 801b3a0:	2b70      	cmp	r3, #112	; 0x70
 801b3a2:	d01a      	beq.n	801b3da <HAL_TIM_ConfigClockSource+0xa6>
 801b3a4:	2b70      	cmp	r3, #112	; 0x70
 801b3a6:	d87b      	bhi.n	801b4a0 <HAL_TIM_ConfigClockSource+0x16c>
 801b3a8:	2b60      	cmp	r3, #96	; 0x60
 801b3aa:	d050      	beq.n	801b44e <HAL_TIM_ConfigClockSource+0x11a>
 801b3ac:	2b60      	cmp	r3, #96	; 0x60
 801b3ae:	d877      	bhi.n	801b4a0 <HAL_TIM_ConfigClockSource+0x16c>
 801b3b0:	2b50      	cmp	r3, #80	; 0x50
 801b3b2:	d03c      	beq.n	801b42e <HAL_TIM_ConfigClockSource+0xfa>
 801b3b4:	2b50      	cmp	r3, #80	; 0x50
 801b3b6:	d873      	bhi.n	801b4a0 <HAL_TIM_ConfigClockSource+0x16c>
 801b3b8:	2b40      	cmp	r3, #64	; 0x40
 801b3ba:	d058      	beq.n	801b46e <HAL_TIM_ConfigClockSource+0x13a>
 801b3bc:	2b40      	cmp	r3, #64	; 0x40
 801b3be:	d86f      	bhi.n	801b4a0 <HAL_TIM_ConfigClockSource+0x16c>
 801b3c0:	2b30      	cmp	r3, #48	; 0x30
 801b3c2:	d064      	beq.n	801b48e <HAL_TIM_ConfigClockSource+0x15a>
 801b3c4:	2b30      	cmp	r3, #48	; 0x30
 801b3c6:	d86b      	bhi.n	801b4a0 <HAL_TIM_ConfigClockSource+0x16c>
 801b3c8:	2b20      	cmp	r3, #32
 801b3ca:	d060      	beq.n	801b48e <HAL_TIM_ConfigClockSource+0x15a>
 801b3cc:	2b20      	cmp	r3, #32
 801b3ce:	d867      	bhi.n	801b4a0 <HAL_TIM_ConfigClockSource+0x16c>
 801b3d0:	2b00      	cmp	r3, #0
 801b3d2:	d05c      	beq.n	801b48e <HAL_TIM_ConfigClockSource+0x15a>
 801b3d4:	2b10      	cmp	r3, #16
 801b3d6:	d05a      	beq.n	801b48e <HAL_TIM_ConfigClockSource+0x15a>
 801b3d8:	e062      	b.n	801b4a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801b3da:	687b      	ldr	r3, [r7, #4]
 801b3dc:	6818      	ldr	r0, [r3, #0]
 801b3de:	683b      	ldr	r3, [r7, #0]
 801b3e0:	6899      	ldr	r1, [r3, #8]
 801b3e2:	683b      	ldr	r3, [r7, #0]
 801b3e4:	685a      	ldr	r2, [r3, #4]
 801b3e6:	683b      	ldr	r3, [r7, #0]
 801b3e8:	68db      	ldr	r3, [r3, #12]
 801b3ea:	f000 fb19 	bl	801ba20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801b3ee:	687b      	ldr	r3, [r7, #4]
 801b3f0:	681b      	ldr	r3, [r3, #0]
 801b3f2:	689b      	ldr	r3, [r3, #8]
 801b3f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801b3f6:	68bb      	ldr	r3, [r7, #8]
 801b3f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 801b3fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801b3fe:	687b      	ldr	r3, [r7, #4]
 801b400:	681b      	ldr	r3, [r3, #0]
 801b402:	68ba      	ldr	r2, [r7, #8]
 801b404:	609a      	str	r2, [r3, #8]
      break;
 801b406:	e04f      	b.n	801b4a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801b408:	687b      	ldr	r3, [r7, #4]
 801b40a:	6818      	ldr	r0, [r3, #0]
 801b40c:	683b      	ldr	r3, [r7, #0]
 801b40e:	6899      	ldr	r1, [r3, #8]
 801b410:	683b      	ldr	r3, [r7, #0]
 801b412:	685a      	ldr	r2, [r3, #4]
 801b414:	683b      	ldr	r3, [r7, #0]
 801b416:	68db      	ldr	r3, [r3, #12]
 801b418:	f000 fb02 	bl	801ba20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801b41c:	687b      	ldr	r3, [r7, #4]
 801b41e:	681b      	ldr	r3, [r3, #0]
 801b420:	689a      	ldr	r2, [r3, #8]
 801b422:	687b      	ldr	r3, [r7, #4]
 801b424:	681b      	ldr	r3, [r3, #0]
 801b426:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801b42a:	609a      	str	r2, [r3, #8]
      break;
 801b42c:	e03c      	b.n	801b4a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801b42e:	687b      	ldr	r3, [r7, #4]
 801b430:	6818      	ldr	r0, [r3, #0]
 801b432:	683b      	ldr	r3, [r7, #0]
 801b434:	6859      	ldr	r1, [r3, #4]
 801b436:	683b      	ldr	r3, [r7, #0]
 801b438:	68db      	ldr	r3, [r3, #12]
 801b43a:	461a      	mov	r2, r3
 801b43c:	f000 fa76 	bl	801b92c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801b440:	687b      	ldr	r3, [r7, #4]
 801b442:	681b      	ldr	r3, [r3, #0]
 801b444:	2150      	movs	r1, #80	; 0x50
 801b446:	4618      	mov	r0, r3
 801b448:	f000 facf 	bl	801b9ea <TIM_ITRx_SetConfig>
      break;
 801b44c:	e02c      	b.n	801b4a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801b44e:	687b      	ldr	r3, [r7, #4]
 801b450:	6818      	ldr	r0, [r3, #0]
 801b452:	683b      	ldr	r3, [r7, #0]
 801b454:	6859      	ldr	r1, [r3, #4]
 801b456:	683b      	ldr	r3, [r7, #0]
 801b458:	68db      	ldr	r3, [r3, #12]
 801b45a:	461a      	mov	r2, r3
 801b45c:	f000 fa95 	bl	801b98a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801b460:	687b      	ldr	r3, [r7, #4]
 801b462:	681b      	ldr	r3, [r3, #0]
 801b464:	2160      	movs	r1, #96	; 0x60
 801b466:	4618      	mov	r0, r3
 801b468:	f000 fabf 	bl	801b9ea <TIM_ITRx_SetConfig>
      break;
 801b46c:	e01c      	b.n	801b4a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801b46e:	687b      	ldr	r3, [r7, #4]
 801b470:	6818      	ldr	r0, [r3, #0]
 801b472:	683b      	ldr	r3, [r7, #0]
 801b474:	6859      	ldr	r1, [r3, #4]
 801b476:	683b      	ldr	r3, [r7, #0]
 801b478:	68db      	ldr	r3, [r3, #12]
 801b47a:	461a      	mov	r2, r3
 801b47c:	f000 fa56 	bl	801b92c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801b480:	687b      	ldr	r3, [r7, #4]
 801b482:	681b      	ldr	r3, [r3, #0]
 801b484:	2140      	movs	r1, #64	; 0x40
 801b486:	4618      	mov	r0, r3
 801b488:	f000 faaf 	bl	801b9ea <TIM_ITRx_SetConfig>
      break;
 801b48c:	e00c      	b.n	801b4a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801b48e:	687b      	ldr	r3, [r7, #4]
 801b490:	681a      	ldr	r2, [r3, #0]
 801b492:	683b      	ldr	r3, [r7, #0]
 801b494:	681b      	ldr	r3, [r3, #0]
 801b496:	4619      	mov	r1, r3
 801b498:	4610      	mov	r0, r2
 801b49a:	f000 faa6 	bl	801b9ea <TIM_ITRx_SetConfig>
      break;
 801b49e:	e003      	b.n	801b4a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 801b4a0:	2301      	movs	r3, #1
 801b4a2:	73fb      	strb	r3, [r7, #15]
      break;
 801b4a4:	e000      	b.n	801b4a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 801b4a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801b4a8:	687b      	ldr	r3, [r7, #4]
 801b4aa:	2201      	movs	r2, #1
 801b4ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801b4b0:	687b      	ldr	r3, [r7, #4]
 801b4b2:	2200      	movs	r2, #0
 801b4b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801b4b8:	7bfb      	ldrb	r3, [r7, #15]
}
 801b4ba:	4618      	mov	r0, r3
 801b4bc:	3710      	adds	r7, #16
 801b4be:	46bd      	mov	sp, r7
 801b4c0:	bd80      	pop	{r7, pc}

0801b4c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801b4c2:	b480      	push	{r7}
 801b4c4:	b083      	sub	sp, #12
 801b4c6:	af00      	add	r7, sp, #0
 801b4c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801b4ca:	bf00      	nop
 801b4cc:	370c      	adds	r7, #12
 801b4ce:	46bd      	mov	sp, r7
 801b4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4d4:	4770      	bx	lr

0801b4d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801b4d6:	b480      	push	{r7}
 801b4d8:	b083      	sub	sp, #12
 801b4da:	af00      	add	r7, sp, #0
 801b4dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801b4de:	bf00      	nop
 801b4e0:	370c      	adds	r7, #12
 801b4e2:	46bd      	mov	sp, r7
 801b4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4e8:	4770      	bx	lr

0801b4ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801b4ea:	b480      	push	{r7}
 801b4ec:	b083      	sub	sp, #12
 801b4ee:	af00      	add	r7, sp, #0
 801b4f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801b4f2:	bf00      	nop
 801b4f4:	370c      	adds	r7, #12
 801b4f6:	46bd      	mov	sp, r7
 801b4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4fc:	4770      	bx	lr

0801b4fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801b4fe:	b480      	push	{r7}
 801b500:	b083      	sub	sp, #12
 801b502:	af00      	add	r7, sp, #0
 801b504:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801b506:	bf00      	nop
 801b508:	370c      	adds	r7, #12
 801b50a:	46bd      	mov	sp, r7
 801b50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b510:	4770      	bx	lr
	...

0801b514 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 801b514:	b480      	push	{r7}
 801b516:	b085      	sub	sp, #20
 801b518:	af00      	add	r7, sp, #0
 801b51a:	6078      	str	r0, [r7, #4]
 801b51c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801b51e:	687b      	ldr	r3, [r7, #4]
 801b520:	681b      	ldr	r3, [r3, #0]
 801b522:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801b524:	687b      	ldr	r3, [r7, #4]
 801b526:	4a34      	ldr	r2, [pc, #208]	; (801b5f8 <TIM_Base_SetConfig+0xe4>)
 801b528:	4293      	cmp	r3, r2
 801b52a:	d00f      	beq.n	801b54c <TIM_Base_SetConfig+0x38>
 801b52c:	687b      	ldr	r3, [r7, #4]
 801b52e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801b532:	d00b      	beq.n	801b54c <TIM_Base_SetConfig+0x38>
 801b534:	687b      	ldr	r3, [r7, #4]
 801b536:	4a31      	ldr	r2, [pc, #196]	; (801b5fc <TIM_Base_SetConfig+0xe8>)
 801b538:	4293      	cmp	r3, r2
 801b53a:	d007      	beq.n	801b54c <TIM_Base_SetConfig+0x38>
 801b53c:	687b      	ldr	r3, [r7, #4]
 801b53e:	4a30      	ldr	r2, [pc, #192]	; (801b600 <TIM_Base_SetConfig+0xec>)
 801b540:	4293      	cmp	r3, r2
 801b542:	d003      	beq.n	801b54c <TIM_Base_SetConfig+0x38>
 801b544:	687b      	ldr	r3, [r7, #4]
 801b546:	4a2f      	ldr	r2, [pc, #188]	; (801b604 <TIM_Base_SetConfig+0xf0>)
 801b548:	4293      	cmp	r3, r2
 801b54a:	d108      	bne.n	801b55e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801b54c:	68fb      	ldr	r3, [r7, #12]
 801b54e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b552:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801b554:	683b      	ldr	r3, [r7, #0]
 801b556:	685b      	ldr	r3, [r3, #4]
 801b558:	68fa      	ldr	r2, [r7, #12]
 801b55a:	4313      	orrs	r3, r2
 801b55c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801b55e:	687b      	ldr	r3, [r7, #4]
 801b560:	4a25      	ldr	r2, [pc, #148]	; (801b5f8 <TIM_Base_SetConfig+0xe4>)
 801b562:	4293      	cmp	r3, r2
 801b564:	d01b      	beq.n	801b59e <TIM_Base_SetConfig+0x8a>
 801b566:	687b      	ldr	r3, [r7, #4]
 801b568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801b56c:	d017      	beq.n	801b59e <TIM_Base_SetConfig+0x8a>
 801b56e:	687b      	ldr	r3, [r7, #4]
 801b570:	4a22      	ldr	r2, [pc, #136]	; (801b5fc <TIM_Base_SetConfig+0xe8>)
 801b572:	4293      	cmp	r3, r2
 801b574:	d013      	beq.n	801b59e <TIM_Base_SetConfig+0x8a>
 801b576:	687b      	ldr	r3, [r7, #4]
 801b578:	4a21      	ldr	r2, [pc, #132]	; (801b600 <TIM_Base_SetConfig+0xec>)
 801b57a:	4293      	cmp	r3, r2
 801b57c:	d00f      	beq.n	801b59e <TIM_Base_SetConfig+0x8a>
 801b57e:	687b      	ldr	r3, [r7, #4]
 801b580:	4a20      	ldr	r2, [pc, #128]	; (801b604 <TIM_Base_SetConfig+0xf0>)
 801b582:	4293      	cmp	r3, r2
 801b584:	d00b      	beq.n	801b59e <TIM_Base_SetConfig+0x8a>
 801b586:	687b      	ldr	r3, [r7, #4]
 801b588:	4a1f      	ldr	r2, [pc, #124]	; (801b608 <TIM_Base_SetConfig+0xf4>)
 801b58a:	4293      	cmp	r3, r2
 801b58c:	d007      	beq.n	801b59e <TIM_Base_SetConfig+0x8a>
 801b58e:	687b      	ldr	r3, [r7, #4]
 801b590:	4a1e      	ldr	r2, [pc, #120]	; (801b60c <TIM_Base_SetConfig+0xf8>)
 801b592:	4293      	cmp	r3, r2
 801b594:	d003      	beq.n	801b59e <TIM_Base_SetConfig+0x8a>
 801b596:	687b      	ldr	r3, [r7, #4]
 801b598:	4a1d      	ldr	r2, [pc, #116]	; (801b610 <TIM_Base_SetConfig+0xfc>)
 801b59a:	4293      	cmp	r3, r2
 801b59c:	d108      	bne.n	801b5b0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801b59e:	68fb      	ldr	r3, [r7, #12]
 801b5a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b5a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801b5a6:	683b      	ldr	r3, [r7, #0]
 801b5a8:	68db      	ldr	r3, [r3, #12]
 801b5aa:	68fa      	ldr	r2, [r7, #12]
 801b5ac:	4313      	orrs	r3, r2
 801b5ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801b5b0:	68fb      	ldr	r3, [r7, #12]
 801b5b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801b5b6:	683b      	ldr	r3, [r7, #0]
 801b5b8:	695b      	ldr	r3, [r3, #20]
 801b5ba:	4313      	orrs	r3, r2
 801b5bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801b5be:	687b      	ldr	r3, [r7, #4]
 801b5c0:	68fa      	ldr	r2, [r7, #12]
 801b5c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801b5c4:	683b      	ldr	r3, [r7, #0]
 801b5c6:	689a      	ldr	r2, [r3, #8]
 801b5c8:	687b      	ldr	r3, [r7, #4]
 801b5ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801b5cc:	683b      	ldr	r3, [r7, #0]
 801b5ce:	681a      	ldr	r2, [r3, #0]
 801b5d0:	687b      	ldr	r3, [r7, #4]
 801b5d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801b5d4:	687b      	ldr	r3, [r7, #4]
 801b5d6:	4a08      	ldr	r2, [pc, #32]	; (801b5f8 <TIM_Base_SetConfig+0xe4>)
 801b5d8:	4293      	cmp	r3, r2
 801b5da:	d103      	bne.n	801b5e4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801b5dc:	683b      	ldr	r3, [r7, #0]
 801b5de:	691a      	ldr	r2, [r3, #16]
 801b5e0:	687b      	ldr	r3, [r7, #4]
 801b5e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801b5e4:	687b      	ldr	r3, [r7, #4]
 801b5e6:	2201      	movs	r2, #1
 801b5e8:	615a      	str	r2, [r3, #20]
}
 801b5ea:	bf00      	nop
 801b5ec:	3714      	adds	r7, #20
 801b5ee:	46bd      	mov	sp, r7
 801b5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5f4:	4770      	bx	lr
 801b5f6:	bf00      	nop
 801b5f8:	40010000 	.word	0x40010000
 801b5fc:	40000400 	.word	0x40000400
 801b600:	40000800 	.word	0x40000800
 801b604:	40000c00 	.word	0x40000c00
 801b608:	40014000 	.word	0x40014000
 801b60c:	40014400 	.word	0x40014400
 801b610:	40014800 	.word	0x40014800

0801b614 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801b614:	b480      	push	{r7}
 801b616:	b087      	sub	sp, #28
 801b618:	af00      	add	r7, sp, #0
 801b61a:	6078      	str	r0, [r7, #4]
 801b61c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801b61e:	687b      	ldr	r3, [r7, #4]
 801b620:	6a1b      	ldr	r3, [r3, #32]
 801b622:	f023 0201 	bic.w	r2, r3, #1
 801b626:	687b      	ldr	r3, [r7, #4]
 801b628:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801b62a:	687b      	ldr	r3, [r7, #4]
 801b62c:	6a1b      	ldr	r3, [r3, #32]
 801b62e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801b630:	687b      	ldr	r3, [r7, #4]
 801b632:	685b      	ldr	r3, [r3, #4]
 801b634:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801b636:	687b      	ldr	r3, [r7, #4]
 801b638:	699b      	ldr	r3, [r3, #24]
 801b63a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801b63c:	68fb      	ldr	r3, [r7, #12]
 801b63e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b642:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801b644:	68fb      	ldr	r3, [r7, #12]
 801b646:	f023 0303 	bic.w	r3, r3, #3
 801b64a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801b64c:	683b      	ldr	r3, [r7, #0]
 801b64e:	681b      	ldr	r3, [r3, #0]
 801b650:	68fa      	ldr	r2, [r7, #12]
 801b652:	4313      	orrs	r3, r2
 801b654:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801b656:	697b      	ldr	r3, [r7, #20]
 801b658:	f023 0302 	bic.w	r3, r3, #2
 801b65c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801b65e:	683b      	ldr	r3, [r7, #0]
 801b660:	689b      	ldr	r3, [r3, #8]
 801b662:	697a      	ldr	r2, [r7, #20]
 801b664:	4313      	orrs	r3, r2
 801b666:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801b668:	687b      	ldr	r3, [r7, #4]
 801b66a:	4a1c      	ldr	r2, [pc, #112]	; (801b6dc <TIM_OC1_SetConfig+0xc8>)
 801b66c:	4293      	cmp	r3, r2
 801b66e:	d10c      	bne.n	801b68a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801b670:	697b      	ldr	r3, [r7, #20]
 801b672:	f023 0308 	bic.w	r3, r3, #8
 801b676:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801b678:	683b      	ldr	r3, [r7, #0]
 801b67a:	68db      	ldr	r3, [r3, #12]
 801b67c:	697a      	ldr	r2, [r7, #20]
 801b67e:	4313      	orrs	r3, r2
 801b680:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801b682:	697b      	ldr	r3, [r7, #20]
 801b684:	f023 0304 	bic.w	r3, r3, #4
 801b688:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801b68a:	687b      	ldr	r3, [r7, #4]
 801b68c:	4a13      	ldr	r2, [pc, #76]	; (801b6dc <TIM_OC1_SetConfig+0xc8>)
 801b68e:	4293      	cmp	r3, r2
 801b690:	d111      	bne.n	801b6b6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801b692:	693b      	ldr	r3, [r7, #16]
 801b694:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801b698:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801b69a:	693b      	ldr	r3, [r7, #16]
 801b69c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801b6a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801b6a2:	683b      	ldr	r3, [r7, #0]
 801b6a4:	695b      	ldr	r3, [r3, #20]
 801b6a6:	693a      	ldr	r2, [r7, #16]
 801b6a8:	4313      	orrs	r3, r2
 801b6aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801b6ac:	683b      	ldr	r3, [r7, #0]
 801b6ae:	699b      	ldr	r3, [r3, #24]
 801b6b0:	693a      	ldr	r2, [r7, #16]
 801b6b2:	4313      	orrs	r3, r2
 801b6b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801b6b6:	687b      	ldr	r3, [r7, #4]
 801b6b8:	693a      	ldr	r2, [r7, #16]
 801b6ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801b6bc:	687b      	ldr	r3, [r7, #4]
 801b6be:	68fa      	ldr	r2, [r7, #12]
 801b6c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801b6c2:	683b      	ldr	r3, [r7, #0]
 801b6c4:	685a      	ldr	r2, [r3, #4]
 801b6c6:	687b      	ldr	r3, [r7, #4]
 801b6c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801b6ca:	687b      	ldr	r3, [r7, #4]
 801b6cc:	697a      	ldr	r2, [r7, #20]
 801b6ce:	621a      	str	r2, [r3, #32]
}
 801b6d0:	bf00      	nop
 801b6d2:	371c      	adds	r7, #28
 801b6d4:	46bd      	mov	sp, r7
 801b6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6da:	4770      	bx	lr
 801b6dc:	40010000 	.word	0x40010000

0801b6e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801b6e0:	b480      	push	{r7}
 801b6e2:	b087      	sub	sp, #28
 801b6e4:	af00      	add	r7, sp, #0
 801b6e6:	6078      	str	r0, [r7, #4]
 801b6e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801b6ea:	687b      	ldr	r3, [r7, #4]
 801b6ec:	6a1b      	ldr	r3, [r3, #32]
 801b6ee:	f023 0210 	bic.w	r2, r3, #16
 801b6f2:	687b      	ldr	r3, [r7, #4]
 801b6f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801b6f6:	687b      	ldr	r3, [r7, #4]
 801b6f8:	6a1b      	ldr	r3, [r3, #32]
 801b6fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801b6fc:	687b      	ldr	r3, [r7, #4]
 801b6fe:	685b      	ldr	r3, [r3, #4]
 801b700:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801b702:	687b      	ldr	r3, [r7, #4]
 801b704:	699b      	ldr	r3, [r3, #24]
 801b706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801b708:	68fb      	ldr	r3, [r7, #12]
 801b70a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801b70e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801b710:	68fb      	ldr	r3, [r7, #12]
 801b712:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b716:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801b718:	683b      	ldr	r3, [r7, #0]
 801b71a:	681b      	ldr	r3, [r3, #0]
 801b71c:	021b      	lsls	r3, r3, #8
 801b71e:	68fa      	ldr	r2, [r7, #12]
 801b720:	4313      	orrs	r3, r2
 801b722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801b724:	697b      	ldr	r3, [r7, #20]
 801b726:	f023 0320 	bic.w	r3, r3, #32
 801b72a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801b72c:	683b      	ldr	r3, [r7, #0]
 801b72e:	689b      	ldr	r3, [r3, #8]
 801b730:	011b      	lsls	r3, r3, #4
 801b732:	697a      	ldr	r2, [r7, #20]
 801b734:	4313      	orrs	r3, r2
 801b736:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801b738:	687b      	ldr	r3, [r7, #4]
 801b73a:	4a1e      	ldr	r2, [pc, #120]	; (801b7b4 <TIM_OC2_SetConfig+0xd4>)
 801b73c:	4293      	cmp	r3, r2
 801b73e:	d10d      	bne.n	801b75c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801b740:	697b      	ldr	r3, [r7, #20]
 801b742:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801b746:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801b748:	683b      	ldr	r3, [r7, #0]
 801b74a:	68db      	ldr	r3, [r3, #12]
 801b74c:	011b      	lsls	r3, r3, #4
 801b74e:	697a      	ldr	r2, [r7, #20]
 801b750:	4313      	orrs	r3, r2
 801b752:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801b754:	697b      	ldr	r3, [r7, #20]
 801b756:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801b75a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801b75c:	687b      	ldr	r3, [r7, #4]
 801b75e:	4a15      	ldr	r2, [pc, #84]	; (801b7b4 <TIM_OC2_SetConfig+0xd4>)
 801b760:	4293      	cmp	r3, r2
 801b762:	d113      	bne.n	801b78c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801b764:	693b      	ldr	r3, [r7, #16]
 801b766:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801b76a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801b76c:	693b      	ldr	r3, [r7, #16]
 801b76e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801b772:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801b774:	683b      	ldr	r3, [r7, #0]
 801b776:	695b      	ldr	r3, [r3, #20]
 801b778:	009b      	lsls	r3, r3, #2
 801b77a:	693a      	ldr	r2, [r7, #16]
 801b77c:	4313      	orrs	r3, r2
 801b77e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801b780:	683b      	ldr	r3, [r7, #0]
 801b782:	699b      	ldr	r3, [r3, #24]
 801b784:	009b      	lsls	r3, r3, #2
 801b786:	693a      	ldr	r2, [r7, #16]
 801b788:	4313      	orrs	r3, r2
 801b78a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801b78c:	687b      	ldr	r3, [r7, #4]
 801b78e:	693a      	ldr	r2, [r7, #16]
 801b790:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801b792:	687b      	ldr	r3, [r7, #4]
 801b794:	68fa      	ldr	r2, [r7, #12]
 801b796:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801b798:	683b      	ldr	r3, [r7, #0]
 801b79a:	685a      	ldr	r2, [r3, #4]
 801b79c:	687b      	ldr	r3, [r7, #4]
 801b79e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801b7a0:	687b      	ldr	r3, [r7, #4]
 801b7a2:	697a      	ldr	r2, [r7, #20]
 801b7a4:	621a      	str	r2, [r3, #32]
}
 801b7a6:	bf00      	nop
 801b7a8:	371c      	adds	r7, #28
 801b7aa:	46bd      	mov	sp, r7
 801b7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7b0:	4770      	bx	lr
 801b7b2:	bf00      	nop
 801b7b4:	40010000 	.word	0x40010000

0801b7b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801b7b8:	b480      	push	{r7}
 801b7ba:	b087      	sub	sp, #28
 801b7bc:	af00      	add	r7, sp, #0
 801b7be:	6078      	str	r0, [r7, #4]
 801b7c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801b7c2:	687b      	ldr	r3, [r7, #4]
 801b7c4:	6a1b      	ldr	r3, [r3, #32]
 801b7c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801b7ca:	687b      	ldr	r3, [r7, #4]
 801b7cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801b7ce:	687b      	ldr	r3, [r7, #4]
 801b7d0:	6a1b      	ldr	r3, [r3, #32]
 801b7d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801b7d4:	687b      	ldr	r3, [r7, #4]
 801b7d6:	685b      	ldr	r3, [r3, #4]
 801b7d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801b7da:	687b      	ldr	r3, [r7, #4]
 801b7dc:	69db      	ldr	r3, [r3, #28]
 801b7de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801b7e0:	68fb      	ldr	r3, [r7, #12]
 801b7e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b7e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801b7e8:	68fb      	ldr	r3, [r7, #12]
 801b7ea:	f023 0303 	bic.w	r3, r3, #3
 801b7ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801b7f0:	683b      	ldr	r3, [r7, #0]
 801b7f2:	681b      	ldr	r3, [r3, #0]
 801b7f4:	68fa      	ldr	r2, [r7, #12]
 801b7f6:	4313      	orrs	r3, r2
 801b7f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801b7fa:	697b      	ldr	r3, [r7, #20]
 801b7fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801b800:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801b802:	683b      	ldr	r3, [r7, #0]
 801b804:	689b      	ldr	r3, [r3, #8]
 801b806:	021b      	lsls	r3, r3, #8
 801b808:	697a      	ldr	r2, [r7, #20]
 801b80a:	4313      	orrs	r3, r2
 801b80c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801b80e:	687b      	ldr	r3, [r7, #4]
 801b810:	4a1d      	ldr	r2, [pc, #116]	; (801b888 <TIM_OC3_SetConfig+0xd0>)
 801b812:	4293      	cmp	r3, r2
 801b814:	d10d      	bne.n	801b832 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801b816:	697b      	ldr	r3, [r7, #20]
 801b818:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801b81c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801b81e:	683b      	ldr	r3, [r7, #0]
 801b820:	68db      	ldr	r3, [r3, #12]
 801b822:	021b      	lsls	r3, r3, #8
 801b824:	697a      	ldr	r2, [r7, #20]
 801b826:	4313      	orrs	r3, r2
 801b828:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801b82a:	697b      	ldr	r3, [r7, #20]
 801b82c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801b830:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801b832:	687b      	ldr	r3, [r7, #4]
 801b834:	4a14      	ldr	r2, [pc, #80]	; (801b888 <TIM_OC3_SetConfig+0xd0>)
 801b836:	4293      	cmp	r3, r2
 801b838:	d113      	bne.n	801b862 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801b83a:	693b      	ldr	r3, [r7, #16]
 801b83c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b840:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801b842:	693b      	ldr	r3, [r7, #16]
 801b844:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801b848:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801b84a:	683b      	ldr	r3, [r7, #0]
 801b84c:	695b      	ldr	r3, [r3, #20]
 801b84e:	011b      	lsls	r3, r3, #4
 801b850:	693a      	ldr	r2, [r7, #16]
 801b852:	4313      	orrs	r3, r2
 801b854:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801b856:	683b      	ldr	r3, [r7, #0]
 801b858:	699b      	ldr	r3, [r3, #24]
 801b85a:	011b      	lsls	r3, r3, #4
 801b85c:	693a      	ldr	r2, [r7, #16]
 801b85e:	4313      	orrs	r3, r2
 801b860:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801b862:	687b      	ldr	r3, [r7, #4]
 801b864:	693a      	ldr	r2, [r7, #16]
 801b866:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801b868:	687b      	ldr	r3, [r7, #4]
 801b86a:	68fa      	ldr	r2, [r7, #12]
 801b86c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801b86e:	683b      	ldr	r3, [r7, #0]
 801b870:	685a      	ldr	r2, [r3, #4]
 801b872:	687b      	ldr	r3, [r7, #4]
 801b874:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801b876:	687b      	ldr	r3, [r7, #4]
 801b878:	697a      	ldr	r2, [r7, #20]
 801b87a:	621a      	str	r2, [r3, #32]
}
 801b87c:	bf00      	nop
 801b87e:	371c      	adds	r7, #28
 801b880:	46bd      	mov	sp, r7
 801b882:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b886:	4770      	bx	lr
 801b888:	40010000 	.word	0x40010000

0801b88c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801b88c:	b480      	push	{r7}
 801b88e:	b087      	sub	sp, #28
 801b890:	af00      	add	r7, sp, #0
 801b892:	6078      	str	r0, [r7, #4]
 801b894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801b896:	687b      	ldr	r3, [r7, #4]
 801b898:	6a1b      	ldr	r3, [r3, #32]
 801b89a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801b89e:	687b      	ldr	r3, [r7, #4]
 801b8a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801b8a2:	687b      	ldr	r3, [r7, #4]
 801b8a4:	6a1b      	ldr	r3, [r3, #32]
 801b8a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801b8a8:	687b      	ldr	r3, [r7, #4]
 801b8aa:	685b      	ldr	r3, [r3, #4]
 801b8ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801b8ae:	687b      	ldr	r3, [r7, #4]
 801b8b0:	69db      	ldr	r3, [r3, #28]
 801b8b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801b8b4:	68fb      	ldr	r3, [r7, #12]
 801b8b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801b8ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801b8bc:	68fb      	ldr	r3, [r7, #12]
 801b8be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b8c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801b8c4:	683b      	ldr	r3, [r7, #0]
 801b8c6:	681b      	ldr	r3, [r3, #0]
 801b8c8:	021b      	lsls	r3, r3, #8
 801b8ca:	68fa      	ldr	r2, [r7, #12]
 801b8cc:	4313      	orrs	r3, r2
 801b8ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801b8d0:	693b      	ldr	r3, [r7, #16]
 801b8d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801b8d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801b8d8:	683b      	ldr	r3, [r7, #0]
 801b8da:	689b      	ldr	r3, [r3, #8]
 801b8dc:	031b      	lsls	r3, r3, #12
 801b8de:	693a      	ldr	r2, [r7, #16]
 801b8e0:	4313      	orrs	r3, r2
 801b8e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801b8e4:	687b      	ldr	r3, [r7, #4]
 801b8e6:	4a10      	ldr	r2, [pc, #64]	; (801b928 <TIM_OC4_SetConfig+0x9c>)
 801b8e8:	4293      	cmp	r3, r2
 801b8ea:	d109      	bne.n	801b900 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801b8ec:	697b      	ldr	r3, [r7, #20]
 801b8ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801b8f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801b8f4:	683b      	ldr	r3, [r7, #0]
 801b8f6:	695b      	ldr	r3, [r3, #20]
 801b8f8:	019b      	lsls	r3, r3, #6
 801b8fa:	697a      	ldr	r2, [r7, #20]
 801b8fc:	4313      	orrs	r3, r2
 801b8fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801b900:	687b      	ldr	r3, [r7, #4]
 801b902:	697a      	ldr	r2, [r7, #20]
 801b904:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801b906:	687b      	ldr	r3, [r7, #4]
 801b908:	68fa      	ldr	r2, [r7, #12]
 801b90a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801b90c:	683b      	ldr	r3, [r7, #0]
 801b90e:	685a      	ldr	r2, [r3, #4]
 801b910:	687b      	ldr	r3, [r7, #4]
 801b912:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801b914:	687b      	ldr	r3, [r7, #4]
 801b916:	693a      	ldr	r2, [r7, #16]
 801b918:	621a      	str	r2, [r3, #32]
}
 801b91a:	bf00      	nop
 801b91c:	371c      	adds	r7, #28
 801b91e:	46bd      	mov	sp, r7
 801b920:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b924:	4770      	bx	lr
 801b926:	bf00      	nop
 801b928:	40010000 	.word	0x40010000

0801b92c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801b92c:	b480      	push	{r7}
 801b92e:	b087      	sub	sp, #28
 801b930:	af00      	add	r7, sp, #0
 801b932:	60f8      	str	r0, [r7, #12]
 801b934:	60b9      	str	r1, [r7, #8]
 801b936:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801b938:	68fb      	ldr	r3, [r7, #12]
 801b93a:	6a1b      	ldr	r3, [r3, #32]
 801b93c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801b93e:	68fb      	ldr	r3, [r7, #12]
 801b940:	6a1b      	ldr	r3, [r3, #32]
 801b942:	f023 0201 	bic.w	r2, r3, #1
 801b946:	68fb      	ldr	r3, [r7, #12]
 801b948:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801b94a:	68fb      	ldr	r3, [r7, #12]
 801b94c:	699b      	ldr	r3, [r3, #24]
 801b94e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801b950:	693b      	ldr	r3, [r7, #16]
 801b952:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801b956:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801b958:	687b      	ldr	r3, [r7, #4]
 801b95a:	011b      	lsls	r3, r3, #4
 801b95c:	693a      	ldr	r2, [r7, #16]
 801b95e:	4313      	orrs	r3, r2
 801b960:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801b962:	697b      	ldr	r3, [r7, #20]
 801b964:	f023 030a 	bic.w	r3, r3, #10
 801b968:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801b96a:	697a      	ldr	r2, [r7, #20]
 801b96c:	68bb      	ldr	r3, [r7, #8]
 801b96e:	4313      	orrs	r3, r2
 801b970:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801b972:	68fb      	ldr	r3, [r7, #12]
 801b974:	693a      	ldr	r2, [r7, #16]
 801b976:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801b978:	68fb      	ldr	r3, [r7, #12]
 801b97a:	697a      	ldr	r2, [r7, #20]
 801b97c:	621a      	str	r2, [r3, #32]
}
 801b97e:	bf00      	nop
 801b980:	371c      	adds	r7, #28
 801b982:	46bd      	mov	sp, r7
 801b984:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b988:	4770      	bx	lr

0801b98a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801b98a:	b480      	push	{r7}
 801b98c:	b087      	sub	sp, #28
 801b98e:	af00      	add	r7, sp, #0
 801b990:	60f8      	str	r0, [r7, #12]
 801b992:	60b9      	str	r1, [r7, #8]
 801b994:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801b996:	68fb      	ldr	r3, [r7, #12]
 801b998:	6a1b      	ldr	r3, [r3, #32]
 801b99a:	f023 0210 	bic.w	r2, r3, #16
 801b99e:	68fb      	ldr	r3, [r7, #12]
 801b9a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801b9a2:	68fb      	ldr	r3, [r7, #12]
 801b9a4:	699b      	ldr	r3, [r3, #24]
 801b9a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801b9a8:	68fb      	ldr	r3, [r7, #12]
 801b9aa:	6a1b      	ldr	r3, [r3, #32]
 801b9ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801b9ae:	697b      	ldr	r3, [r7, #20]
 801b9b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801b9b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801b9b6:	687b      	ldr	r3, [r7, #4]
 801b9b8:	031b      	lsls	r3, r3, #12
 801b9ba:	697a      	ldr	r2, [r7, #20]
 801b9bc:	4313      	orrs	r3, r2
 801b9be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801b9c0:	693b      	ldr	r3, [r7, #16]
 801b9c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801b9c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801b9c8:	68bb      	ldr	r3, [r7, #8]
 801b9ca:	011b      	lsls	r3, r3, #4
 801b9cc:	693a      	ldr	r2, [r7, #16]
 801b9ce:	4313      	orrs	r3, r2
 801b9d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801b9d2:	68fb      	ldr	r3, [r7, #12]
 801b9d4:	697a      	ldr	r2, [r7, #20]
 801b9d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801b9d8:	68fb      	ldr	r3, [r7, #12]
 801b9da:	693a      	ldr	r2, [r7, #16]
 801b9dc:	621a      	str	r2, [r3, #32]
}
 801b9de:	bf00      	nop
 801b9e0:	371c      	adds	r7, #28
 801b9e2:	46bd      	mov	sp, r7
 801b9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9e8:	4770      	bx	lr

0801b9ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801b9ea:	b480      	push	{r7}
 801b9ec:	b085      	sub	sp, #20
 801b9ee:	af00      	add	r7, sp, #0
 801b9f0:	6078      	str	r0, [r7, #4]
 801b9f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801b9f4:	687b      	ldr	r3, [r7, #4]
 801b9f6:	689b      	ldr	r3, [r3, #8]
 801b9f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801b9fa:	68fb      	ldr	r3, [r7, #12]
 801b9fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801ba00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801ba02:	683a      	ldr	r2, [r7, #0]
 801ba04:	68fb      	ldr	r3, [r7, #12]
 801ba06:	4313      	orrs	r3, r2
 801ba08:	f043 0307 	orr.w	r3, r3, #7
 801ba0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801ba0e:	687b      	ldr	r3, [r7, #4]
 801ba10:	68fa      	ldr	r2, [r7, #12]
 801ba12:	609a      	str	r2, [r3, #8]
}
 801ba14:	bf00      	nop
 801ba16:	3714      	adds	r7, #20
 801ba18:	46bd      	mov	sp, r7
 801ba1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba1e:	4770      	bx	lr

0801ba20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801ba20:	b480      	push	{r7}
 801ba22:	b087      	sub	sp, #28
 801ba24:	af00      	add	r7, sp, #0
 801ba26:	60f8      	str	r0, [r7, #12]
 801ba28:	60b9      	str	r1, [r7, #8]
 801ba2a:	607a      	str	r2, [r7, #4]
 801ba2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801ba2e:	68fb      	ldr	r3, [r7, #12]
 801ba30:	689b      	ldr	r3, [r3, #8]
 801ba32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801ba34:	697b      	ldr	r3, [r7, #20]
 801ba36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801ba3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801ba3c:	683b      	ldr	r3, [r7, #0]
 801ba3e:	021a      	lsls	r2, r3, #8
 801ba40:	687b      	ldr	r3, [r7, #4]
 801ba42:	431a      	orrs	r2, r3
 801ba44:	68bb      	ldr	r3, [r7, #8]
 801ba46:	4313      	orrs	r3, r2
 801ba48:	697a      	ldr	r2, [r7, #20]
 801ba4a:	4313      	orrs	r3, r2
 801ba4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801ba4e:	68fb      	ldr	r3, [r7, #12]
 801ba50:	697a      	ldr	r2, [r7, #20]
 801ba52:	609a      	str	r2, [r3, #8]
}
 801ba54:	bf00      	nop
 801ba56:	371c      	adds	r7, #28
 801ba58:	46bd      	mov	sp, r7
 801ba5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba5e:	4770      	bx	lr

0801ba60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801ba60:	b480      	push	{r7}
 801ba62:	b087      	sub	sp, #28
 801ba64:	af00      	add	r7, sp, #0
 801ba66:	60f8      	str	r0, [r7, #12]
 801ba68:	60b9      	str	r1, [r7, #8]
 801ba6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801ba6c:	68bb      	ldr	r3, [r7, #8]
 801ba6e:	f003 031f 	and.w	r3, r3, #31
 801ba72:	2201      	movs	r2, #1
 801ba74:	fa02 f303 	lsl.w	r3, r2, r3
 801ba78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801ba7a:	68fb      	ldr	r3, [r7, #12]
 801ba7c:	6a1a      	ldr	r2, [r3, #32]
 801ba7e:	697b      	ldr	r3, [r7, #20]
 801ba80:	43db      	mvns	r3, r3
 801ba82:	401a      	ands	r2, r3
 801ba84:	68fb      	ldr	r3, [r7, #12]
 801ba86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801ba88:	68fb      	ldr	r3, [r7, #12]
 801ba8a:	6a1a      	ldr	r2, [r3, #32]
 801ba8c:	68bb      	ldr	r3, [r7, #8]
 801ba8e:	f003 031f 	and.w	r3, r3, #31
 801ba92:	6879      	ldr	r1, [r7, #4]
 801ba94:	fa01 f303 	lsl.w	r3, r1, r3
 801ba98:	431a      	orrs	r2, r3
 801ba9a:	68fb      	ldr	r3, [r7, #12]
 801ba9c:	621a      	str	r2, [r3, #32]
}
 801ba9e:	bf00      	nop
 801baa0:	371c      	adds	r7, #28
 801baa2:	46bd      	mov	sp, r7
 801baa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801baa8:	4770      	bx	lr
	...

0801baac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 801baac:	b480      	push	{r7}
 801baae:	b085      	sub	sp, #20
 801bab0:	af00      	add	r7, sp, #0
 801bab2:	6078      	str	r0, [r7, #4]
 801bab4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801bab6:	687b      	ldr	r3, [r7, #4]
 801bab8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801babc:	2b01      	cmp	r3, #1
 801babe:	d101      	bne.n	801bac4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801bac0:	2302      	movs	r3, #2
 801bac2:	e050      	b.n	801bb66 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 801bac4:	687b      	ldr	r3, [r7, #4]
 801bac6:	2201      	movs	r2, #1
 801bac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801bacc:	687b      	ldr	r3, [r7, #4]
 801bace:	2202      	movs	r2, #2
 801bad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801bad4:	687b      	ldr	r3, [r7, #4]
 801bad6:	681b      	ldr	r3, [r3, #0]
 801bad8:	685b      	ldr	r3, [r3, #4]
 801bada:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801badc:	687b      	ldr	r3, [r7, #4]
 801bade:	681b      	ldr	r3, [r3, #0]
 801bae0:	689b      	ldr	r3, [r3, #8]
 801bae2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801bae4:	68fb      	ldr	r3, [r7, #12]
 801bae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801baea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801baec:	683b      	ldr	r3, [r7, #0]
 801baee:	681b      	ldr	r3, [r3, #0]
 801baf0:	68fa      	ldr	r2, [r7, #12]
 801baf2:	4313      	orrs	r3, r2
 801baf4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801baf6:	687b      	ldr	r3, [r7, #4]
 801baf8:	681b      	ldr	r3, [r3, #0]
 801bafa:	68fa      	ldr	r2, [r7, #12]
 801bafc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801bafe:	687b      	ldr	r3, [r7, #4]
 801bb00:	681b      	ldr	r3, [r3, #0]
 801bb02:	4a1c      	ldr	r2, [pc, #112]	; (801bb74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 801bb04:	4293      	cmp	r3, r2
 801bb06:	d018      	beq.n	801bb3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801bb08:	687b      	ldr	r3, [r7, #4]
 801bb0a:	681b      	ldr	r3, [r3, #0]
 801bb0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801bb10:	d013      	beq.n	801bb3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801bb12:	687b      	ldr	r3, [r7, #4]
 801bb14:	681b      	ldr	r3, [r3, #0]
 801bb16:	4a18      	ldr	r2, [pc, #96]	; (801bb78 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 801bb18:	4293      	cmp	r3, r2
 801bb1a:	d00e      	beq.n	801bb3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801bb1c:	687b      	ldr	r3, [r7, #4]
 801bb1e:	681b      	ldr	r3, [r3, #0]
 801bb20:	4a16      	ldr	r2, [pc, #88]	; (801bb7c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 801bb22:	4293      	cmp	r3, r2
 801bb24:	d009      	beq.n	801bb3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801bb26:	687b      	ldr	r3, [r7, #4]
 801bb28:	681b      	ldr	r3, [r3, #0]
 801bb2a:	4a15      	ldr	r2, [pc, #84]	; (801bb80 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 801bb2c:	4293      	cmp	r3, r2
 801bb2e:	d004      	beq.n	801bb3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801bb30:	687b      	ldr	r3, [r7, #4]
 801bb32:	681b      	ldr	r3, [r3, #0]
 801bb34:	4a13      	ldr	r2, [pc, #76]	; (801bb84 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 801bb36:	4293      	cmp	r3, r2
 801bb38:	d10c      	bne.n	801bb54 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801bb3a:	68bb      	ldr	r3, [r7, #8]
 801bb3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801bb40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801bb42:	683b      	ldr	r3, [r7, #0]
 801bb44:	685b      	ldr	r3, [r3, #4]
 801bb46:	68ba      	ldr	r2, [r7, #8]
 801bb48:	4313      	orrs	r3, r2
 801bb4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801bb4c:	687b      	ldr	r3, [r7, #4]
 801bb4e:	681b      	ldr	r3, [r3, #0]
 801bb50:	68ba      	ldr	r2, [r7, #8]
 801bb52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801bb54:	687b      	ldr	r3, [r7, #4]
 801bb56:	2201      	movs	r2, #1
 801bb58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801bb5c:	687b      	ldr	r3, [r7, #4]
 801bb5e:	2200      	movs	r2, #0
 801bb60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801bb64:	2300      	movs	r3, #0
}
 801bb66:	4618      	mov	r0, r3
 801bb68:	3714      	adds	r7, #20
 801bb6a:	46bd      	mov	sp, r7
 801bb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb70:	4770      	bx	lr
 801bb72:	bf00      	nop
 801bb74:	40010000 	.word	0x40010000
 801bb78:	40000400 	.word	0x40000400
 801bb7c:	40000800 	.word	0x40000800
 801bb80:	40000c00 	.word	0x40000c00
 801bb84:	40014000 	.word	0x40014000

0801bb88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801bb88:	b480      	push	{r7}
 801bb8a:	b083      	sub	sp, #12
 801bb8c:	af00      	add	r7, sp, #0
 801bb8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801bb90:	bf00      	nop
 801bb92:	370c      	adds	r7, #12
 801bb94:	46bd      	mov	sp, r7
 801bb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb9a:	4770      	bx	lr

0801bb9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801bb9c:	b480      	push	{r7}
 801bb9e:	b083      	sub	sp, #12
 801bba0:	af00      	add	r7, sp, #0
 801bba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801bba4:	bf00      	nop
 801bba6:	370c      	adds	r7, #12
 801bba8:	46bd      	mov	sp, r7
 801bbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bbae:	4770      	bx	lr

0801bbb0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801bbb0:	b580      	push	{r7, lr}
 801bbb2:	b082      	sub	sp, #8
 801bbb4:	af00      	add	r7, sp, #0
 801bbb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801bbb8:	687b      	ldr	r3, [r7, #4]
 801bbba:	2b00      	cmp	r3, #0
 801bbbc:	d101      	bne.n	801bbc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801bbbe:	2301      	movs	r3, #1
 801bbc0:	e03f      	b.n	801bc42 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 801bbc2:	687b      	ldr	r3, [r7, #4]
 801bbc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801bbc8:	b2db      	uxtb	r3, r3
 801bbca:	2b00      	cmp	r3, #0
 801bbcc:	d106      	bne.n	801bbdc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801bbce:	687b      	ldr	r3, [r7, #4]
 801bbd0:	2200      	movs	r2, #0
 801bbd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801bbd6:	6878      	ldr	r0, [r7, #4]
 801bbd8:	f7fa fafe 	bl	80161d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801bbdc:	687b      	ldr	r3, [r7, #4]
 801bbde:	2224      	movs	r2, #36	; 0x24
 801bbe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 801bbe4:	687b      	ldr	r3, [r7, #4]
 801bbe6:	681b      	ldr	r3, [r3, #0]
 801bbe8:	68da      	ldr	r2, [r3, #12]
 801bbea:	687b      	ldr	r3, [r7, #4]
 801bbec:	681b      	ldr	r3, [r3, #0]
 801bbee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801bbf2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 801bbf4:	6878      	ldr	r0, [r7, #4]
 801bbf6:	f000 ff9b 	bl	801cb30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801bbfa:	687b      	ldr	r3, [r7, #4]
 801bbfc:	681b      	ldr	r3, [r3, #0]
 801bbfe:	691a      	ldr	r2, [r3, #16]
 801bc00:	687b      	ldr	r3, [r7, #4]
 801bc02:	681b      	ldr	r3, [r3, #0]
 801bc04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801bc08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801bc0a:	687b      	ldr	r3, [r7, #4]
 801bc0c:	681b      	ldr	r3, [r3, #0]
 801bc0e:	695a      	ldr	r2, [r3, #20]
 801bc10:	687b      	ldr	r3, [r7, #4]
 801bc12:	681b      	ldr	r3, [r3, #0]
 801bc14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801bc18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 801bc1a:	687b      	ldr	r3, [r7, #4]
 801bc1c:	681b      	ldr	r3, [r3, #0]
 801bc1e:	68da      	ldr	r2, [r3, #12]
 801bc20:	687b      	ldr	r3, [r7, #4]
 801bc22:	681b      	ldr	r3, [r3, #0]
 801bc24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801bc28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801bc2a:	687b      	ldr	r3, [r7, #4]
 801bc2c:	2200      	movs	r2, #0
 801bc2e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 801bc30:	687b      	ldr	r3, [r7, #4]
 801bc32:	2220      	movs	r2, #32
 801bc34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 801bc38:	687b      	ldr	r3, [r7, #4]
 801bc3a:	2220      	movs	r2, #32
 801bc3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 801bc40:	2300      	movs	r3, #0
}
 801bc42:	4618      	mov	r0, r3
 801bc44:	3708      	adds	r7, #8
 801bc46:	46bd      	mov	sp, r7
 801bc48:	bd80      	pop	{r7, pc}

0801bc4a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801bc4a:	b580      	push	{r7, lr}
 801bc4c:	b08a      	sub	sp, #40	; 0x28
 801bc4e:	af02      	add	r7, sp, #8
 801bc50:	60f8      	str	r0, [r7, #12]
 801bc52:	60b9      	str	r1, [r7, #8]
 801bc54:	603b      	str	r3, [r7, #0]
 801bc56:	4613      	mov	r3, r2
 801bc58:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 801bc5a:	2300      	movs	r3, #0
 801bc5c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801bc5e:	68fb      	ldr	r3, [r7, #12]
 801bc60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801bc64:	b2db      	uxtb	r3, r3
 801bc66:	2b20      	cmp	r3, #32
 801bc68:	d17c      	bne.n	801bd64 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 801bc6a:	68bb      	ldr	r3, [r7, #8]
 801bc6c:	2b00      	cmp	r3, #0
 801bc6e:	d002      	beq.n	801bc76 <HAL_UART_Transmit+0x2c>
 801bc70:	88fb      	ldrh	r3, [r7, #6]
 801bc72:	2b00      	cmp	r3, #0
 801bc74:	d101      	bne.n	801bc7a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 801bc76:	2301      	movs	r3, #1
 801bc78:	e075      	b.n	801bd66 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801bc7a:	68fb      	ldr	r3, [r7, #12]
 801bc7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801bc80:	2b01      	cmp	r3, #1
 801bc82:	d101      	bne.n	801bc88 <HAL_UART_Transmit+0x3e>
 801bc84:	2302      	movs	r3, #2
 801bc86:	e06e      	b.n	801bd66 <HAL_UART_Transmit+0x11c>
 801bc88:	68fb      	ldr	r3, [r7, #12]
 801bc8a:	2201      	movs	r2, #1
 801bc8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801bc90:	68fb      	ldr	r3, [r7, #12]
 801bc92:	2200      	movs	r2, #0
 801bc94:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801bc96:	68fb      	ldr	r3, [r7, #12]
 801bc98:	2221      	movs	r2, #33	; 0x21
 801bc9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801bc9e:	f7fa fd53 	bl	8016748 <HAL_GetTick>
 801bca2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 801bca4:	68fb      	ldr	r3, [r7, #12]
 801bca6:	88fa      	ldrh	r2, [r7, #6]
 801bca8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 801bcaa:	68fb      	ldr	r3, [r7, #12]
 801bcac:	88fa      	ldrh	r2, [r7, #6]
 801bcae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801bcb0:	68fb      	ldr	r3, [r7, #12]
 801bcb2:	689b      	ldr	r3, [r3, #8]
 801bcb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801bcb8:	d108      	bne.n	801bccc <HAL_UART_Transmit+0x82>
 801bcba:	68fb      	ldr	r3, [r7, #12]
 801bcbc:	691b      	ldr	r3, [r3, #16]
 801bcbe:	2b00      	cmp	r3, #0
 801bcc0:	d104      	bne.n	801bccc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 801bcc2:	2300      	movs	r3, #0
 801bcc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801bcc6:	68bb      	ldr	r3, [r7, #8]
 801bcc8:	61bb      	str	r3, [r7, #24]
 801bcca:	e003      	b.n	801bcd4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 801bccc:	68bb      	ldr	r3, [r7, #8]
 801bcce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801bcd0:	2300      	movs	r3, #0
 801bcd2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 801bcd4:	68fb      	ldr	r3, [r7, #12]
 801bcd6:	2200      	movs	r2, #0
 801bcd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 801bcdc:	e02a      	b.n	801bd34 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801bcde:	683b      	ldr	r3, [r7, #0]
 801bce0:	9300      	str	r3, [sp, #0]
 801bce2:	697b      	ldr	r3, [r7, #20]
 801bce4:	2200      	movs	r2, #0
 801bce6:	2180      	movs	r1, #128	; 0x80
 801bce8:	68f8      	ldr	r0, [r7, #12]
 801bcea:	f000 fc53 	bl	801c594 <UART_WaitOnFlagUntilTimeout>
 801bcee:	4603      	mov	r3, r0
 801bcf0:	2b00      	cmp	r3, #0
 801bcf2:	d001      	beq.n	801bcf8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 801bcf4:	2303      	movs	r3, #3
 801bcf6:	e036      	b.n	801bd66 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 801bcf8:	69fb      	ldr	r3, [r7, #28]
 801bcfa:	2b00      	cmp	r3, #0
 801bcfc:	d10b      	bne.n	801bd16 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 801bcfe:	69bb      	ldr	r3, [r7, #24]
 801bd00:	881b      	ldrh	r3, [r3, #0]
 801bd02:	461a      	mov	r2, r3
 801bd04:	68fb      	ldr	r3, [r7, #12]
 801bd06:	681b      	ldr	r3, [r3, #0]
 801bd08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801bd0c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 801bd0e:	69bb      	ldr	r3, [r7, #24]
 801bd10:	3302      	adds	r3, #2
 801bd12:	61bb      	str	r3, [r7, #24]
 801bd14:	e007      	b.n	801bd26 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 801bd16:	69fb      	ldr	r3, [r7, #28]
 801bd18:	781a      	ldrb	r2, [r3, #0]
 801bd1a:	68fb      	ldr	r3, [r7, #12]
 801bd1c:	681b      	ldr	r3, [r3, #0]
 801bd1e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 801bd20:	69fb      	ldr	r3, [r7, #28]
 801bd22:	3301      	adds	r3, #1
 801bd24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801bd26:	68fb      	ldr	r3, [r7, #12]
 801bd28:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801bd2a:	b29b      	uxth	r3, r3
 801bd2c:	3b01      	subs	r3, #1
 801bd2e:	b29a      	uxth	r2, r3
 801bd30:	68fb      	ldr	r3, [r7, #12]
 801bd32:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 801bd34:	68fb      	ldr	r3, [r7, #12]
 801bd36:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801bd38:	b29b      	uxth	r3, r3
 801bd3a:	2b00      	cmp	r3, #0
 801bd3c:	d1cf      	bne.n	801bcde <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801bd3e:	683b      	ldr	r3, [r7, #0]
 801bd40:	9300      	str	r3, [sp, #0]
 801bd42:	697b      	ldr	r3, [r7, #20]
 801bd44:	2200      	movs	r2, #0
 801bd46:	2140      	movs	r1, #64	; 0x40
 801bd48:	68f8      	ldr	r0, [r7, #12]
 801bd4a:	f000 fc23 	bl	801c594 <UART_WaitOnFlagUntilTimeout>
 801bd4e:	4603      	mov	r3, r0
 801bd50:	2b00      	cmp	r3, #0
 801bd52:	d001      	beq.n	801bd58 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 801bd54:	2303      	movs	r3, #3
 801bd56:	e006      	b.n	801bd66 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801bd58:	68fb      	ldr	r3, [r7, #12]
 801bd5a:	2220      	movs	r2, #32
 801bd5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 801bd60:	2300      	movs	r3, #0
 801bd62:	e000      	b.n	801bd66 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 801bd64:	2302      	movs	r3, #2
  }
}
 801bd66:	4618      	mov	r0, r3
 801bd68:	3720      	adds	r7, #32
 801bd6a:	46bd      	mov	sp, r7
 801bd6c:	bd80      	pop	{r7, pc}

0801bd6e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801bd6e:	b580      	push	{r7, lr}
 801bd70:	b08c      	sub	sp, #48	; 0x30
 801bd72:	af00      	add	r7, sp, #0
 801bd74:	60f8      	str	r0, [r7, #12]
 801bd76:	60b9      	str	r1, [r7, #8]
 801bd78:	4613      	mov	r3, r2
 801bd7a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801bd7c:	68fb      	ldr	r3, [r7, #12]
 801bd7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801bd82:	b2db      	uxtb	r3, r3
 801bd84:	2b20      	cmp	r3, #32
 801bd86:	d152      	bne.n	801be2e <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 801bd88:	68bb      	ldr	r3, [r7, #8]
 801bd8a:	2b00      	cmp	r3, #0
 801bd8c:	d002      	beq.n	801bd94 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 801bd8e:	88fb      	ldrh	r3, [r7, #6]
 801bd90:	2b00      	cmp	r3, #0
 801bd92:	d101      	bne.n	801bd98 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 801bd94:	2301      	movs	r3, #1
 801bd96:	e04b      	b.n	801be30 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 801bd98:	68fb      	ldr	r3, [r7, #12]
 801bd9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801bd9e:	2b01      	cmp	r3, #1
 801bda0:	d101      	bne.n	801bda6 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 801bda2:	2302      	movs	r3, #2
 801bda4:	e044      	b.n	801be30 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 801bda6:	68fb      	ldr	r3, [r7, #12]
 801bda8:	2201      	movs	r2, #1
 801bdaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 801bdae:	68fb      	ldr	r3, [r7, #12]
 801bdb0:	2201      	movs	r2, #1
 801bdb2:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 801bdb4:	88fb      	ldrh	r3, [r7, #6]
 801bdb6:	461a      	mov	r2, r3
 801bdb8:	68b9      	ldr	r1, [r7, #8]
 801bdba:	68f8      	ldr	r0, [r7, #12]
 801bdbc:	f000 fc58 	bl	801c670 <UART_Start_Receive_DMA>
 801bdc0:	4603      	mov	r3, r0
 801bdc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 801bdc6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801bdca:	2b00      	cmp	r3, #0
 801bdcc:	d12c      	bne.n	801be28 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801bdce:	68fb      	ldr	r3, [r7, #12]
 801bdd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bdd2:	2b01      	cmp	r3, #1
 801bdd4:	d125      	bne.n	801be22 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 801bdd6:	2300      	movs	r3, #0
 801bdd8:	613b      	str	r3, [r7, #16]
 801bdda:	68fb      	ldr	r3, [r7, #12]
 801bddc:	681b      	ldr	r3, [r3, #0]
 801bdde:	681b      	ldr	r3, [r3, #0]
 801bde0:	613b      	str	r3, [r7, #16]
 801bde2:	68fb      	ldr	r3, [r7, #12]
 801bde4:	681b      	ldr	r3, [r3, #0]
 801bde6:	685b      	ldr	r3, [r3, #4]
 801bde8:	613b      	str	r3, [r7, #16]
 801bdea:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801bdec:	68fb      	ldr	r3, [r7, #12]
 801bdee:	681b      	ldr	r3, [r3, #0]
 801bdf0:	330c      	adds	r3, #12
 801bdf2:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bdf4:	69bb      	ldr	r3, [r7, #24]
 801bdf6:	e853 3f00 	ldrex	r3, [r3]
 801bdfa:	617b      	str	r3, [r7, #20]
   return(result);
 801bdfc:	697b      	ldr	r3, [r7, #20]
 801bdfe:	f043 0310 	orr.w	r3, r3, #16
 801be02:	62bb      	str	r3, [r7, #40]	; 0x28
 801be04:	68fb      	ldr	r3, [r7, #12]
 801be06:	681b      	ldr	r3, [r3, #0]
 801be08:	330c      	adds	r3, #12
 801be0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801be0c:	627a      	str	r2, [r7, #36]	; 0x24
 801be0e:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801be10:	6a39      	ldr	r1, [r7, #32]
 801be12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801be14:	e841 2300 	strex	r3, r2, [r1]
 801be18:	61fb      	str	r3, [r7, #28]
   return(result);
 801be1a:	69fb      	ldr	r3, [r7, #28]
 801be1c:	2b00      	cmp	r3, #0
 801be1e:	d1e5      	bne.n	801bdec <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 801be20:	e002      	b.n	801be28 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 801be22:	2301      	movs	r3, #1
 801be24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 801be28:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801be2c:	e000      	b.n	801be30 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 801be2e:	2302      	movs	r3, #2
  }
}
 801be30:	4618      	mov	r0, r3
 801be32:	3730      	adds	r7, #48	; 0x30
 801be34:	46bd      	mov	sp, r7
 801be36:	bd80      	pop	{r7, pc}

0801be38 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801be38:	b580      	push	{r7, lr}
 801be3a:	b0ba      	sub	sp, #232	; 0xe8
 801be3c:	af00      	add	r7, sp, #0
 801be3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 801be40:	687b      	ldr	r3, [r7, #4]
 801be42:	681b      	ldr	r3, [r3, #0]
 801be44:	681b      	ldr	r3, [r3, #0]
 801be46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801be4a:	687b      	ldr	r3, [r7, #4]
 801be4c:	681b      	ldr	r3, [r3, #0]
 801be4e:	68db      	ldr	r3, [r3, #12]
 801be50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801be54:	687b      	ldr	r3, [r7, #4]
 801be56:	681b      	ldr	r3, [r3, #0]
 801be58:	695b      	ldr	r3, [r3, #20]
 801be5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 801be5e:	2300      	movs	r3, #0
 801be60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 801be64:	2300      	movs	r3, #0
 801be66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 801be6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801be6e:	f003 030f 	and.w	r3, r3, #15
 801be72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 801be76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801be7a:	2b00      	cmp	r3, #0
 801be7c:	d10f      	bne.n	801be9e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801be7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801be82:	f003 0320 	and.w	r3, r3, #32
 801be86:	2b00      	cmp	r3, #0
 801be88:	d009      	beq.n	801be9e <HAL_UART_IRQHandler+0x66>
 801be8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801be8e:	f003 0320 	and.w	r3, r3, #32
 801be92:	2b00      	cmp	r3, #0
 801be94:	d003      	beq.n	801be9e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 801be96:	6878      	ldr	r0, [r7, #4]
 801be98:	f000 fd8f 	bl	801c9ba <UART_Receive_IT>
      return;
 801be9c:	e256      	b.n	801c34c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 801be9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801bea2:	2b00      	cmp	r3, #0
 801bea4:	f000 80de 	beq.w	801c064 <HAL_UART_IRQHandler+0x22c>
 801bea8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801beac:	f003 0301 	and.w	r3, r3, #1
 801beb0:	2b00      	cmp	r3, #0
 801beb2:	d106      	bne.n	801bec2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 801beb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801beb8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 801bebc:	2b00      	cmp	r3, #0
 801bebe:	f000 80d1 	beq.w	801c064 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 801bec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bec6:	f003 0301 	and.w	r3, r3, #1
 801beca:	2b00      	cmp	r3, #0
 801becc:	d00b      	beq.n	801bee6 <HAL_UART_IRQHandler+0xae>
 801bece:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801bed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801bed6:	2b00      	cmp	r3, #0
 801bed8:	d005      	beq.n	801bee6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801beda:	687b      	ldr	r3, [r7, #4]
 801bedc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bede:	f043 0201 	orr.w	r2, r3, #1
 801bee2:	687b      	ldr	r3, [r7, #4]
 801bee4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801bee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801beea:	f003 0304 	and.w	r3, r3, #4
 801beee:	2b00      	cmp	r3, #0
 801bef0:	d00b      	beq.n	801bf0a <HAL_UART_IRQHandler+0xd2>
 801bef2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801bef6:	f003 0301 	and.w	r3, r3, #1
 801befa:	2b00      	cmp	r3, #0
 801befc:	d005      	beq.n	801bf0a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801befe:	687b      	ldr	r3, [r7, #4]
 801bf00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bf02:	f043 0202 	orr.w	r2, r3, #2
 801bf06:	687b      	ldr	r3, [r7, #4]
 801bf08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801bf0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bf0e:	f003 0302 	and.w	r3, r3, #2
 801bf12:	2b00      	cmp	r3, #0
 801bf14:	d00b      	beq.n	801bf2e <HAL_UART_IRQHandler+0xf6>
 801bf16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801bf1a:	f003 0301 	and.w	r3, r3, #1
 801bf1e:	2b00      	cmp	r3, #0
 801bf20:	d005      	beq.n	801bf2e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801bf22:	687b      	ldr	r3, [r7, #4]
 801bf24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bf26:	f043 0204 	orr.w	r2, r3, #4
 801bf2a:	687b      	ldr	r3, [r7, #4]
 801bf2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 801bf2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bf32:	f003 0308 	and.w	r3, r3, #8
 801bf36:	2b00      	cmp	r3, #0
 801bf38:	d011      	beq.n	801bf5e <HAL_UART_IRQHandler+0x126>
 801bf3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801bf3e:	f003 0320 	and.w	r3, r3, #32
 801bf42:	2b00      	cmp	r3, #0
 801bf44:	d105      	bne.n	801bf52 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 801bf46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801bf4a:	f003 0301 	and.w	r3, r3, #1
 801bf4e:	2b00      	cmp	r3, #0
 801bf50:	d005      	beq.n	801bf5e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801bf52:	687b      	ldr	r3, [r7, #4]
 801bf54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bf56:	f043 0208 	orr.w	r2, r3, #8
 801bf5a:	687b      	ldr	r3, [r7, #4]
 801bf5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801bf5e:	687b      	ldr	r3, [r7, #4]
 801bf60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bf62:	2b00      	cmp	r3, #0
 801bf64:	f000 81ed 	beq.w	801c342 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801bf68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bf6c:	f003 0320 	and.w	r3, r3, #32
 801bf70:	2b00      	cmp	r3, #0
 801bf72:	d008      	beq.n	801bf86 <HAL_UART_IRQHandler+0x14e>
 801bf74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801bf78:	f003 0320 	and.w	r3, r3, #32
 801bf7c:	2b00      	cmp	r3, #0
 801bf7e:	d002      	beq.n	801bf86 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 801bf80:	6878      	ldr	r0, [r7, #4]
 801bf82:	f000 fd1a 	bl	801c9ba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 801bf86:	687b      	ldr	r3, [r7, #4]
 801bf88:	681b      	ldr	r3, [r3, #0]
 801bf8a:	695b      	ldr	r3, [r3, #20]
 801bf8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801bf90:	2b40      	cmp	r3, #64	; 0x40
 801bf92:	bf0c      	ite	eq
 801bf94:	2301      	moveq	r3, #1
 801bf96:	2300      	movne	r3, #0
 801bf98:	b2db      	uxtb	r3, r3
 801bf9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 801bf9e:	687b      	ldr	r3, [r7, #4]
 801bfa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bfa2:	f003 0308 	and.w	r3, r3, #8
 801bfa6:	2b00      	cmp	r3, #0
 801bfa8:	d103      	bne.n	801bfb2 <HAL_UART_IRQHandler+0x17a>
 801bfaa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801bfae:	2b00      	cmp	r3, #0
 801bfb0:	d04f      	beq.n	801c052 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801bfb2:	6878      	ldr	r0, [r7, #4]
 801bfb4:	f000 fc22 	bl	801c7fc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801bfb8:	687b      	ldr	r3, [r7, #4]
 801bfba:	681b      	ldr	r3, [r3, #0]
 801bfbc:	695b      	ldr	r3, [r3, #20]
 801bfbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801bfc2:	2b40      	cmp	r3, #64	; 0x40
 801bfc4:	d141      	bne.n	801c04a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801bfc6:	687b      	ldr	r3, [r7, #4]
 801bfc8:	681b      	ldr	r3, [r3, #0]
 801bfca:	3314      	adds	r3, #20
 801bfcc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bfd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801bfd4:	e853 3f00 	ldrex	r3, [r3]
 801bfd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 801bfdc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801bfe0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801bfe4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801bfe8:	687b      	ldr	r3, [r7, #4]
 801bfea:	681b      	ldr	r3, [r3, #0]
 801bfec:	3314      	adds	r3, #20
 801bfee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801bff2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 801bff6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bffa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801bffe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801c002:	e841 2300 	strex	r3, r2, [r1]
 801c006:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 801c00a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801c00e:	2b00      	cmp	r3, #0
 801c010:	d1d9      	bne.n	801bfc6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 801c012:	687b      	ldr	r3, [r7, #4]
 801c014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c016:	2b00      	cmp	r3, #0
 801c018:	d013      	beq.n	801c042 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801c01a:	687b      	ldr	r3, [r7, #4]
 801c01c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c01e:	4a7d      	ldr	r2, [pc, #500]	; (801c214 <HAL_UART_IRQHandler+0x3dc>)
 801c020:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801c022:	687b      	ldr	r3, [r7, #4]
 801c024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c026:	4618      	mov	r0, r3
 801c028:	f7fa fe46 	bl	8016cb8 <HAL_DMA_Abort_IT>
 801c02c:	4603      	mov	r3, r0
 801c02e:	2b00      	cmp	r3, #0
 801c030:	d016      	beq.n	801c060 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801c032:	687b      	ldr	r3, [r7, #4]
 801c034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c036:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c038:	687a      	ldr	r2, [r7, #4]
 801c03a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801c03c:	4610      	mov	r0, r2
 801c03e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801c040:	e00e      	b.n	801c060 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801c042:	6878      	ldr	r0, [r7, #4]
 801c044:	f000 f9a4 	bl	801c390 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801c048:	e00a      	b.n	801c060 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801c04a:	6878      	ldr	r0, [r7, #4]
 801c04c:	f000 f9a0 	bl	801c390 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801c050:	e006      	b.n	801c060 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801c052:	6878      	ldr	r0, [r7, #4]
 801c054:	f000 f99c 	bl	801c390 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801c058:	687b      	ldr	r3, [r7, #4]
 801c05a:	2200      	movs	r2, #0
 801c05c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 801c05e:	e170      	b.n	801c342 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801c060:	bf00      	nop
    return;
 801c062:	e16e      	b.n	801c342 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c064:	687b      	ldr	r3, [r7, #4]
 801c066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c068:	2b01      	cmp	r3, #1
 801c06a:	f040 814a 	bne.w	801c302 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 801c06e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c072:	f003 0310 	and.w	r3, r3, #16
 801c076:	2b00      	cmp	r3, #0
 801c078:	f000 8143 	beq.w	801c302 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 801c07c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801c080:	f003 0310 	and.w	r3, r3, #16
 801c084:	2b00      	cmp	r3, #0
 801c086:	f000 813c 	beq.w	801c302 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 801c08a:	2300      	movs	r3, #0
 801c08c:	60bb      	str	r3, [r7, #8]
 801c08e:	687b      	ldr	r3, [r7, #4]
 801c090:	681b      	ldr	r3, [r3, #0]
 801c092:	681b      	ldr	r3, [r3, #0]
 801c094:	60bb      	str	r3, [r7, #8]
 801c096:	687b      	ldr	r3, [r7, #4]
 801c098:	681b      	ldr	r3, [r3, #0]
 801c09a:	685b      	ldr	r3, [r3, #4]
 801c09c:	60bb      	str	r3, [r7, #8]
 801c09e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801c0a0:	687b      	ldr	r3, [r7, #4]
 801c0a2:	681b      	ldr	r3, [r3, #0]
 801c0a4:	695b      	ldr	r3, [r3, #20]
 801c0a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c0aa:	2b40      	cmp	r3, #64	; 0x40
 801c0ac:	f040 80b4 	bne.w	801c218 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801c0b0:	687b      	ldr	r3, [r7, #4]
 801c0b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c0b4:	681b      	ldr	r3, [r3, #0]
 801c0b6:	685b      	ldr	r3, [r3, #4]
 801c0b8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 801c0bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 801c0c0:	2b00      	cmp	r3, #0
 801c0c2:	f000 8140 	beq.w	801c346 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801c0c6:	687b      	ldr	r3, [r7, #4]
 801c0c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801c0ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801c0ce:	429a      	cmp	r2, r3
 801c0d0:	f080 8139 	bcs.w	801c346 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801c0d4:	687b      	ldr	r3, [r7, #4]
 801c0d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801c0da:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 801c0dc:	687b      	ldr	r3, [r7, #4]
 801c0de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c0e0:	69db      	ldr	r3, [r3, #28]
 801c0e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801c0e6:	f000 8088 	beq.w	801c1fa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801c0ea:	687b      	ldr	r3, [r7, #4]
 801c0ec:	681b      	ldr	r3, [r3, #0]
 801c0ee:	330c      	adds	r3, #12
 801c0f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c0f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801c0f8:	e853 3f00 	ldrex	r3, [r3]
 801c0fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 801c100:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801c104:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801c108:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801c10c:	687b      	ldr	r3, [r7, #4]
 801c10e:	681b      	ldr	r3, [r3, #0]
 801c110:	330c      	adds	r3, #12
 801c112:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 801c116:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 801c11a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c11e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801c122:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801c126:	e841 2300 	strex	r3, r2, [r1]
 801c12a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 801c12e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801c132:	2b00      	cmp	r3, #0
 801c134:	d1d9      	bne.n	801c0ea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c136:	687b      	ldr	r3, [r7, #4]
 801c138:	681b      	ldr	r3, [r3, #0]
 801c13a:	3314      	adds	r3, #20
 801c13c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c13e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801c140:	e853 3f00 	ldrex	r3, [r3]
 801c144:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801c146:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c148:	f023 0301 	bic.w	r3, r3, #1
 801c14c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801c150:	687b      	ldr	r3, [r7, #4]
 801c152:	681b      	ldr	r3, [r3, #0]
 801c154:	3314      	adds	r3, #20
 801c156:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801c15a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801c15e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c160:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801c162:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801c166:	e841 2300 	strex	r3, r2, [r1]
 801c16a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 801c16c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801c16e:	2b00      	cmp	r3, #0
 801c170:	d1e1      	bne.n	801c136 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801c172:	687b      	ldr	r3, [r7, #4]
 801c174:	681b      	ldr	r3, [r3, #0]
 801c176:	3314      	adds	r3, #20
 801c178:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c17a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801c17c:	e853 3f00 	ldrex	r3, [r3]
 801c180:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801c182:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801c184:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801c188:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801c18c:	687b      	ldr	r3, [r7, #4]
 801c18e:	681b      	ldr	r3, [r3, #0]
 801c190:	3314      	adds	r3, #20
 801c192:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801c196:	66fa      	str	r2, [r7, #108]	; 0x6c
 801c198:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c19a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801c19c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801c19e:	e841 2300 	strex	r3, r2, [r1]
 801c1a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801c1a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c1a6:	2b00      	cmp	r3, #0
 801c1a8:	d1e3      	bne.n	801c172 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801c1aa:	687b      	ldr	r3, [r7, #4]
 801c1ac:	2220      	movs	r2, #32
 801c1ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c1b2:	687b      	ldr	r3, [r7, #4]
 801c1b4:	2200      	movs	r2, #0
 801c1b6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c1b8:	687b      	ldr	r3, [r7, #4]
 801c1ba:	681b      	ldr	r3, [r3, #0]
 801c1bc:	330c      	adds	r3, #12
 801c1be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c1c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c1c2:	e853 3f00 	ldrex	r3, [r3]
 801c1c6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801c1c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c1ca:	f023 0310 	bic.w	r3, r3, #16
 801c1ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801c1d2:	687b      	ldr	r3, [r7, #4]
 801c1d4:	681b      	ldr	r3, [r3, #0]
 801c1d6:	330c      	adds	r3, #12
 801c1d8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801c1dc:	65ba      	str	r2, [r7, #88]	; 0x58
 801c1de:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c1e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801c1e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801c1e4:	e841 2300 	strex	r3, r2, [r1]
 801c1e8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801c1ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c1ec:	2b00      	cmp	r3, #0
 801c1ee:	d1e3      	bne.n	801c1b8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801c1f0:	687b      	ldr	r3, [r7, #4]
 801c1f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c1f4:	4618      	mov	r0, r3
 801c1f6:	f7fa fcef 	bl	8016bd8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801c1fa:	687b      	ldr	r3, [r7, #4]
 801c1fc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 801c1fe:	687b      	ldr	r3, [r7, #4]
 801c200:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801c202:	b29b      	uxth	r3, r3
 801c204:	1ad3      	subs	r3, r2, r3
 801c206:	b29b      	uxth	r3, r3
 801c208:	4619      	mov	r1, r3
 801c20a:	6878      	ldr	r0, [r7, #4]
 801c20c:	f7e4 feae 	bl	8000f6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 801c210:	e099      	b.n	801c346 <HAL_UART_IRQHandler+0x50e>
 801c212:	bf00      	nop
 801c214:	0801c8c3 	.word	0x0801c8c3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801c218:	687b      	ldr	r3, [r7, #4]
 801c21a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 801c21c:	687b      	ldr	r3, [r7, #4]
 801c21e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801c220:	b29b      	uxth	r3, r3
 801c222:	1ad3      	subs	r3, r2, r3
 801c224:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 801c228:	687b      	ldr	r3, [r7, #4]
 801c22a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801c22c:	b29b      	uxth	r3, r3
 801c22e:	2b00      	cmp	r3, #0
 801c230:	f000 808b 	beq.w	801c34a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 801c234:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801c238:	2b00      	cmp	r3, #0
 801c23a:	f000 8086 	beq.w	801c34a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801c23e:	687b      	ldr	r3, [r7, #4]
 801c240:	681b      	ldr	r3, [r3, #0]
 801c242:	330c      	adds	r3, #12
 801c244:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c248:	e853 3f00 	ldrex	r3, [r3]
 801c24c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801c24e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c250:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801c254:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801c258:	687b      	ldr	r3, [r7, #4]
 801c25a:	681b      	ldr	r3, [r3, #0]
 801c25c:	330c      	adds	r3, #12
 801c25e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801c262:	647a      	str	r2, [r7, #68]	; 0x44
 801c264:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c266:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801c268:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801c26a:	e841 2300 	strex	r3, r2, [r1]
 801c26e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801c270:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c272:	2b00      	cmp	r3, #0
 801c274:	d1e3      	bne.n	801c23e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c276:	687b      	ldr	r3, [r7, #4]
 801c278:	681b      	ldr	r3, [r3, #0]
 801c27a:	3314      	adds	r3, #20
 801c27c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c27e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c280:	e853 3f00 	ldrex	r3, [r3]
 801c284:	623b      	str	r3, [r7, #32]
   return(result);
 801c286:	6a3b      	ldr	r3, [r7, #32]
 801c288:	f023 0301 	bic.w	r3, r3, #1
 801c28c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801c290:	687b      	ldr	r3, [r7, #4]
 801c292:	681b      	ldr	r3, [r3, #0]
 801c294:	3314      	adds	r3, #20
 801c296:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801c29a:	633a      	str	r2, [r7, #48]	; 0x30
 801c29c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c29e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801c2a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c2a2:	e841 2300 	strex	r3, r2, [r1]
 801c2a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801c2a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c2aa:	2b00      	cmp	r3, #0
 801c2ac:	d1e3      	bne.n	801c276 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801c2ae:	687b      	ldr	r3, [r7, #4]
 801c2b0:	2220      	movs	r2, #32
 801c2b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c2b6:	687b      	ldr	r3, [r7, #4]
 801c2b8:	2200      	movs	r2, #0
 801c2ba:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c2bc:	687b      	ldr	r3, [r7, #4]
 801c2be:	681b      	ldr	r3, [r3, #0]
 801c2c0:	330c      	adds	r3, #12
 801c2c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c2c4:	693b      	ldr	r3, [r7, #16]
 801c2c6:	e853 3f00 	ldrex	r3, [r3]
 801c2ca:	60fb      	str	r3, [r7, #12]
   return(result);
 801c2cc:	68fb      	ldr	r3, [r7, #12]
 801c2ce:	f023 0310 	bic.w	r3, r3, #16
 801c2d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801c2d6:	687b      	ldr	r3, [r7, #4]
 801c2d8:	681b      	ldr	r3, [r3, #0]
 801c2da:	330c      	adds	r3, #12
 801c2dc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 801c2e0:	61fa      	str	r2, [r7, #28]
 801c2e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c2e4:	69b9      	ldr	r1, [r7, #24]
 801c2e6:	69fa      	ldr	r2, [r7, #28]
 801c2e8:	e841 2300 	strex	r3, r2, [r1]
 801c2ec:	617b      	str	r3, [r7, #20]
   return(result);
 801c2ee:	697b      	ldr	r3, [r7, #20]
 801c2f0:	2b00      	cmp	r3, #0
 801c2f2:	d1e3      	bne.n	801c2bc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801c2f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801c2f8:	4619      	mov	r1, r3
 801c2fa:	6878      	ldr	r0, [r7, #4]
 801c2fc:	f7e4 fe36 	bl	8000f6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 801c300:	e023      	b.n	801c34a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 801c302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c30a:	2b00      	cmp	r3, #0
 801c30c:	d009      	beq.n	801c322 <HAL_UART_IRQHandler+0x4ea>
 801c30e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801c312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c316:	2b00      	cmp	r3, #0
 801c318:	d003      	beq.n	801c322 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 801c31a:	6878      	ldr	r0, [r7, #4]
 801c31c:	f000 fae5 	bl	801c8ea <UART_Transmit_IT>
    return;
 801c320:	e014      	b.n	801c34c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 801c322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c32a:	2b00      	cmp	r3, #0
 801c32c:	d00e      	beq.n	801c34c <HAL_UART_IRQHandler+0x514>
 801c32e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801c332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c336:	2b00      	cmp	r3, #0
 801c338:	d008      	beq.n	801c34c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 801c33a:	6878      	ldr	r0, [r7, #4]
 801c33c:	f000 fb25 	bl	801c98a <UART_EndTransmit_IT>
    return;
 801c340:	e004      	b.n	801c34c <HAL_UART_IRQHandler+0x514>
    return;
 801c342:	bf00      	nop
 801c344:	e002      	b.n	801c34c <HAL_UART_IRQHandler+0x514>
      return;
 801c346:	bf00      	nop
 801c348:	e000      	b.n	801c34c <HAL_UART_IRQHandler+0x514>
      return;
 801c34a:	bf00      	nop
  }
}
 801c34c:	37e8      	adds	r7, #232	; 0xe8
 801c34e:	46bd      	mov	sp, r7
 801c350:	bd80      	pop	{r7, pc}
 801c352:	bf00      	nop

0801c354 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801c354:	b480      	push	{r7}
 801c356:	b083      	sub	sp, #12
 801c358:	af00      	add	r7, sp, #0
 801c35a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 801c35c:	bf00      	nop
 801c35e:	370c      	adds	r7, #12
 801c360:	46bd      	mov	sp, r7
 801c362:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c366:	4770      	bx	lr

0801c368 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 801c368:	b480      	push	{r7}
 801c36a:	b083      	sub	sp, #12
 801c36c:	af00      	add	r7, sp, #0
 801c36e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 801c370:	bf00      	nop
 801c372:	370c      	adds	r7, #12
 801c374:	46bd      	mov	sp, r7
 801c376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c37a:	4770      	bx	lr

0801c37c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801c37c:	b480      	push	{r7}
 801c37e:	b083      	sub	sp, #12
 801c380:	af00      	add	r7, sp, #0
 801c382:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 801c384:	bf00      	nop
 801c386:	370c      	adds	r7, #12
 801c388:	46bd      	mov	sp, r7
 801c38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c38e:	4770      	bx	lr

0801c390 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801c390:	b480      	push	{r7}
 801c392:	b083      	sub	sp, #12
 801c394:	af00      	add	r7, sp, #0
 801c396:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 801c398:	bf00      	nop
 801c39a:	370c      	adds	r7, #12
 801c39c:	46bd      	mov	sp, r7
 801c39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c3a2:	4770      	bx	lr

0801c3a4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801c3a4:	b580      	push	{r7, lr}
 801c3a6:	b09c      	sub	sp, #112	; 0x70
 801c3a8:	af00      	add	r7, sp, #0
 801c3aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801c3ac:	687b      	ldr	r3, [r7, #4]
 801c3ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c3b0:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 801c3b2:	687b      	ldr	r3, [r7, #4]
 801c3b4:	681b      	ldr	r3, [r3, #0]
 801c3b6:	681b      	ldr	r3, [r3, #0]
 801c3b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c3bc:	2b00      	cmp	r3, #0
 801c3be:	d172      	bne.n	801c4a6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 801c3c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c3c2:	2200      	movs	r2, #0
 801c3c4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801c3c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c3c8:	681b      	ldr	r3, [r3, #0]
 801c3ca:	330c      	adds	r3, #12
 801c3cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c3ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c3d0:	e853 3f00 	ldrex	r3, [r3]
 801c3d4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801c3d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c3d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801c3dc:	66bb      	str	r3, [r7, #104]	; 0x68
 801c3de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c3e0:	681b      	ldr	r3, [r3, #0]
 801c3e2:	330c      	adds	r3, #12
 801c3e4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801c3e6:	65ba      	str	r2, [r7, #88]	; 0x58
 801c3e8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c3ea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801c3ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801c3ee:	e841 2300 	strex	r3, r2, [r1]
 801c3f2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801c3f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c3f6:	2b00      	cmp	r3, #0
 801c3f8:	d1e5      	bne.n	801c3c6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c3fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c3fc:	681b      	ldr	r3, [r3, #0]
 801c3fe:	3314      	adds	r3, #20
 801c400:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c404:	e853 3f00 	ldrex	r3, [r3]
 801c408:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801c40a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c40c:	f023 0301 	bic.w	r3, r3, #1
 801c410:	667b      	str	r3, [r7, #100]	; 0x64
 801c412:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c414:	681b      	ldr	r3, [r3, #0]
 801c416:	3314      	adds	r3, #20
 801c418:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801c41a:	647a      	str	r2, [r7, #68]	; 0x44
 801c41c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c41e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801c420:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801c422:	e841 2300 	strex	r3, r2, [r1]
 801c426:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801c428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c42a:	2b00      	cmp	r3, #0
 801c42c:	d1e5      	bne.n	801c3fa <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801c42e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c430:	681b      	ldr	r3, [r3, #0]
 801c432:	3314      	adds	r3, #20
 801c434:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c438:	e853 3f00 	ldrex	r3, [r3]
 801c43c:	623b      	str	r3, [r7, #32]
   return(result);
 801c43e:	6a3b      	ldr	r3, [r7, #32]
 801c440:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801c444:	663b      	str	r3, [r7, #96]	; 0x60
 801c446:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c448:	681b      	ldr	r3, [r3, #0]
 801c44a:	3314      	adds	r3, #20
 801c44c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801c44e:	633a      	str	r2, [r7, #48]	; 0x30
 801c450:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c452:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801c454:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c456:	e841 2300 	strex	r3, r2, [r1]
 801c45a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801c45c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c45e:	2b00      	cmp	r3, #0
 801c460:	d1e5      	bne.n	801c42e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801c462:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c464:	2220      	movs	r2, #32
 801c466:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c46a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c46c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c46e:	2b01      	cmp	r3, #1
 801c470:	d119      	bne.n	801c4a6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c472:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c474:	681b      	ldr	r3, [r3, #0]
 801c476:	330c      	adds	r3, #12
 801c478:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c47a:	693b      	ldr	r3, [r7, #16]
 801c47c:	e853 3f00 	ldrex	r3, [r3]
 801c480:	60fb      	str	r3, [r7, #12]
   return(result);
 801c482:	68fb      	ldr	r3, [r7, #12]
 801c484:	f023 0310 	bic.w	r3, r3, #16
 801c488:	65fb      	str	r3, [r7, #92]	; 0x5c
 801c48a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c48c:	681b      	ldr	r3, [r3, #0]
 801c48e:	330c      	adds	r3, #12
 801c490:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801c492:	61fa      	str	r2, [r7, #28]
 801c494:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c496:	69b9      	ldr	r1, [r7, #24]
 801c498:	69fa      	ldr	r2, [r7, #28]
 801c49a:	e841 2300 	strex	r3, r2, [r1]
 801c49e:	617b      	str	r3, [r7, #20]
   return(result);
 801c4a0:	697b      	ldr	r3, [r7, #20]
 801c4a2:	2b00      	cmp	r3, #0
 801c4a4:	d1e5      	bne.n	801c472 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c4a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c4a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c4aa:	2b01      	cmp	r3, #1
 801c4ac:	d106      	bne.n	801c4bc <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801c4ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c4b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801c4b2:	4619      	mov	r1, r3
 801c4b4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801c4b6:	f7e4 fd59 	bl	8000f6c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801c4ba:	e002      	b.n	801c4c2 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 801c4bc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801c4be:	f7ff ff53 	bl	801c368 <HAL_UART_RxCpltCallback>
}
 801c4c2:	bf00      	nop
 801c4c4:	3770      	adds	r7, #112	; 0x70
 801c4c6:	46bd      	mov	sp, r7
 801c4c8:	bd80      	pop	{r7, pc}

0801c4ca <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801c4ca:	b580      	push	{r7, lr}
 801c4cc:	b084      	sub	sp, #16
 801c4ce:	af00      	add	r7, sp, #0
 801c4d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801c4d2:	687b      	ldr	r3, [r7, #4]
 801c4d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c4d6:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c4d8:	68fb      	ldr	r3, [r7, #12]
 801c4da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c4dc:	2b01      	cmp	r3, #1
 801c4de:	d108      	bne.n	801c4f2 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 801c4e0:	68fb      	ldr	r3, [r7, #12]
 801c4e2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801c4e4:	085b      	lsrs	r3, r3, #1
 801c4e6:	b29b      	uxth	r3, r3
 801c4e8:	4619      	mov	r1, r3
 801c4ea:	68f8      	ldr	r0, [r7, #12]
 801c4ec:	f7e4 fd3e 	bl	8000f6c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801c4f0:	e002      	b.n	801c4f8 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 801c4f2:	68f8      	ldr	r0, [r7, #12]
 801c4f4:	f7ff ff42 	bl	801c37c <HAL_UART_RxHalfCpltCallback>
}
 801c4f8:	bf00      	nop
 801c4fa:	3710      	adds	r7, #16
 801c4fc:	46bd      	mov	sp, r7
 801c4fe:	bd80      	pop	{r7, pc}

0801c500 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801c500:	b580      	push	{r7, lr}
 801c502:	b084      	sub	sp, #16
 801c504:	af00      	add	r7, sp, #0
 801c506:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 801c508:	2300      	movs	r3, #0
 801c50a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801c50c:	687b      	ldr	r3, [r7, #4]
 801c50e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c510:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 801c512:	68bb      	ldr	r3, [r7, #8]
 801c514:	681b      	ldr	r3, [r3, #0]
 801c516:	695b      	ldr	r3, [r3, #20]
 801c518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c51c:	2b80      	cmp	r3, #128	; 0x80
 801c51e:	bf0c      	ite	eq
 801c520:	2301      	moveq	r3, #1
 801c522:	2300      	movne	r3, #0
 801c524:	b2db      	uxtb	r3, r3
 801c526:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 801c528:	68bb      	ldr	r3, [r7, #8]
 801c52a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801c52e:	b2db      	uxtb	r3, r3
 801c530:	2b21      	cmp	r3, #33	; 0x21
 801c532:	d108      	bne.n	801c546 <UART_DMAError+0x46>
 801c534:	68fb      	ldr	r3, [r7, #12]
 801c536:	2b00      	cmp	r3, #0
 801c538:	d005      	beq.n	801c546 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 801c53a:	68bb      	ldr	r3, [r7, #8]
 801c53c:	2200      	movs	r2, #0
 801c53e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 801c540:	68b8      	ldr	r0, [r7, #8]
 801c542:	f000 f933 	bl	801c7ac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 801c546:	68bb      	ldr	r3, [r7, #8]
 801c548:	681b      	ldr	r3, [r3, #0]
 801c54a:	695b      	ldr	r3, [r3, #20]
 801c54c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c550:	2b40      	cmp	r3, #64	; 0x40
 801c552:	bf0c      	ite	eq
 801c554:	2301      	moveq	r3, #1
 801c556:	2300      	movne	r3, #0
 801c558:	b2db      	uxtb	r3, r3
 801c55a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 801c55c:	68bb      	ldr	r3, [r7, #8]
 801c55e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801c562:	b2db      	uxtb	r3, r3
 801c564:	2b22      	cmp	r3, #34	; 0x22
 801c566:	d108      	bne.n	801c57a <UART_DMAError+0x7a>
 801c568:	68fb      	ldr	r3, [r7, #12]
 801c56a:	2b00      	cmp	r3, #0
 801c56c:	d005      	beq.n	801c57a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 801c56e:	68bb      	ldr	r3, [r7, #8]
 801c570:	2200      	movs	r2, #0
 801c572:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 801c574:	68b8      	ldr	r0, [r7, #8]
 801c576:	f000 f941 	bl	801c7fc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801c57a:	68bb      	ldr	r3, [r7, #8]
 801c57c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c57e:	f043 0210 	orr.w	r2, r3, #16
 801c582:	68bb      	ldr	r3, [r7, #8]
 801c584:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801c586:	68b8      	ldr	r0, [r7, #8]
 801c588:	f7ff ff02 	bl	801c390 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801c58c:	bf00      	nop
 801c58e:	3710      	adds	r7, #16
 801c590:	46bd      	mov	sp, r7
 801c592:	bd80      	pop	{r7, pc}

0801c594 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 801c594:	b580      	push	{r7, lr}
 801c596:	b090      	sub	sp, #64	; 0x40
 801c598:	af00      	add	r7, sp, #0
 801c59a:	60f8      	str	r0, [r7, #12]
 801c59c:	60b9      	str	r1, [r7, #8]
 801c59e:	603b      	str	r3, [r7, #0]
 801c5a0:	4613      	mov	r3, r2
 801c5a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801c5a4:	e050      	b.n	801c648 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801c5a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c5a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c5ac:	d04c      	beq.n	801c648 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 801c5ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c5b0:	2b00      	cmp	r3, #0
 801c5b2:	d007      	beq.n	801c5c4 <UART_WaitOnFlagUntilTimeout+0x30>
 801c5b4:	f7fa f8c8 	bl	8016748 <HAL_GetTick>
 801c5b8:	4602      	mov	r2, r0
 801c5ba:	683b      	ldr	r3, [r7, #0]
 801c5bc:	1ad3      	subs	r3, r2, r3
 801c5be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801c5c0:	429a      	cmp	r2, r3
 801c5c2:	d241      	bcs.n	801c648 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801c5c4:	68fb      	ldr	r3, [r7, #12]
 801c5c6:	681b      	ldr	r3, [r3, #0]
 801c5c8:	330c      	adds	r3, #12
 801c5ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c5cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c5ce:	e853 3f00 	ldrex	r3, [r3]
 801c5d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801c5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c5d6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801c5da:	63fb      	str	r3, [r7, #60]	; 0x3c
 801c5dc:	68fb      	ldr	r3, [r7, #12]
 801c5de:	681b      	ldr	r3, [r3, #0]
 801c5e0:	330c      	adds	r3, #12
 801c5e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c5e4:	637a      	str	r2, [r7, #52]	; 0x34
 801c5e6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c5e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801c5ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c5ec:	e841 2300 	strex	r3, r2, [r1]
 801c5f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801c5f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c5f4:	2b00      	cmp	r3, #0
 801c5f6:	d1e5      	bne.n	801c5c4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c5f8:	68fb      	ldr	r3, [r7, #12]
 801c5fa:	681b      	ldr	r3, [r3, #0]
 801c5fc:	3314      	adds	r3, #20
 801c5fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c600:	697b      	ldr	r3, [r7, #20]
 801c602:	e853 3f00 	ldrex	r3, [r3]
 801c606:	613b      	str	r3, [r7, #16]
   return(result);
 801c608:	693b      	ldr	r3, [r7, #16]
 801c60a:	f023 0301 	bic.w	r3, r3, #1
 801c60e:	63bb      	str	r3, [r7, #56]	; 0x38
 801c610:	68fb      	ldr	r3, [r7, #12]
 801c612:	681b      	ldr	r3, [r3, #0]
 801c614:	3314      	adds	r3, #20
 801c616:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c618:	623a      	str	r2, [r7, #32]
 801c61a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c61c:	69f9      	ldr	r1, [r7, #28]
 801c61e:	6a3a      	ldr	r2, [r7, #32]
 801c620:	e841 2300 	strex	r3, r2, [r1]
 801c624:	61bb      	str	r3, [r7, #24]
   return(result);
 801c626:	69bb      	ldr	r3, [r7, #24]
 801c628:	2b00      	cmp	r3, #0
 801c62a:	d1e5      	bne.n	801c5f8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 801c62c:	68fb      	ldr	r3, [r7, #12]
 801c62e:	2220      	movs	r2, #32
 801c630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 801c634:	68fb      	ldr	r3, [r7, #12]
 801c636:	2220      	movs	r2, #32
 801c638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 801c63c:	68fb      	ldr	r3, [r7, #12]
 801c63e:	2200      	movs	r2, #0
 801c640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 801c644:	2303      	movs	r3, #3
 801c646:	e00f      	b.n	801c668 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801c648:	68fb      	ldr	r3, [r7, #12]
 801c64a:	681b      	ldr	r3, [r3, #0]
 801c64c:	681a      	ldr	r2, [r3, #0]
 801c64e:	68bb      	ldr	r3, [r7, #8]
 801c650:	4013      	ands	r3, r2
 801c652:	68ba      	ldr	r2, [r7, #8]
 801c654:	429a      	cmp	r2, r3
 801c656:	bf0c      	ite	eq
 801c658:	2301      	moveq	r3, #1
 801c65a:	2300      	movne	r3, #0
 801c65c:	b2db      	uxtb	r3, r3
 801c65e:	461a      	mov	r2, r3
 801c660:	79fb      	ldrb	r3, [r7, #7]
 801c662:	429a      	cmp	r2, r3
 801c664:	d09f      	beq.n	801c5a6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801c666:	2300      	movs	r3, #0
}
 801c668:	4618      	mov	r0, r3
 801c66a:	3740      	adds	r7, #64	; 0x40
 801c66c:	46bd      	mov	sp, r7
 801c66e:	bd80      	pop	{r7, pc}

0801c670 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801c670:	b580      	push	{r7, lr}
 801c672:	b098      	sub	sp, #96	; 0x60
 801c674:	af00      	add	r7, sp, #0
 801c676:	60f8      	str	r0, [r7, #12]
 801c678:	60b9      	str	r1, [r7, #8]
 801c67a:	4613      	mov	r3, r2
 801c67c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 801c67e:	68ba      	ldr	r2, [r7, #8]
 801c680:	68fb      	ldr	r3, [r7, #12]
 801c682:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 801c684:	68fb      	ldr	r3, [r7, #12]
 801c686:	88fa      	ldrh	r2, [r7, #6]
 801c688:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801c68a:	68fb      	ldr	r3, [r7, #12]
 801c68c:	2200      	movs	r2, #0
 801c68e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801c690:	68fb      	ldr	r3, [r7, #12]
 801c692:	2222      	movs	r2, #34	; 0x22
 801c694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801c698:	68fb      	ldr	r3, [r7, #12]
 801c69a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c69c:	4a40      	ldr	r2, [pc, #256]	; (801c7a0 <UART_Start_Receive_DMA+0x130>)
 801c69e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801c6a0:	68fb      	ldr	r3, [r7, #12]
 801c6a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c6a4:	4a3f      	ldr	r2, [pc, #252]	; (801c7a4 <UART_Start_Receive_DMA+0x134>)
 801c6a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 801c6a8:	68fb      	ldr	r3, [r7, #12]
 801c6aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c6ac:	4a3e      	ldr	r2, [pc, #248]	; (801c7a8 <UART_Start_Receive_DMA+0x138>)
 801c6ae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 801c6b0:	68fb      	ldr	r3, [r7, #12]
 801c6b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c6b4:	2200      	movs	r2, #0
 801c6b6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 801c6b8:	f107 0308 	add.w	r3, r7, #8
 801c6bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 801c6be:	68fb      	ldr	r3, [r7, #12]
 801c6c0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801c6c2:	68fb      	ldr	r3, [r7, #12]
 801c6c4:	681b      	ldr	r3, [r3, #0]
 801c6c6:	3304      	adds	r3, #4
 801c6c8:	4619      	mov	r1, r3
 801c6ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801c6cc:	681a      	ldr	r2, [r3, #0]
 801c6ce:	88fb      	ldrh	r3, [r7, #6]
 801c6d0:	f7fa fa2a 	bl	8016b28 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 801c6d4:	2300      	movs	r3, #0
 801c6d6:	613b      	str	r3, [r7, #16]
 801c6d8:	68fb      	ldr	r3, [r7, #12]
 801c6da:	681b      	ldr	r3, [r3, #0]
 801c6dc:	681b      	ldr	r3, [r3, #0]
 801c6de:	613b      	str	r3, [r7, #16]
 801c6e0:	68fb      	ldr	r3, [r7, #12]
 801c6e2:	681b      	ldr	r3, [r3, #0]
 801c6e4:	685b      	ldr	r3, [r3, #4]
 801c6e6:	613b      	str	r3, [r7, #16]
 801c6e8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801c6ea:	68fb      	ldr	r3, [r7, #12]
 801c6ec:	2200      	movs	r2, #0
 801c6ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 801c6f2:	68fb      	ldr	r3, [r7, #12]
 801c6f4:	691b      	ldr	r3, [r3, #16]
 801c6f6:	2b00      	cmp	r3, #0
 801c6f8:	d019      	beq.n	801c72e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801c6fa:	68fb      	ldr	r3, [r7, #12]
 801c6fc:	681b      	ldr	r3, [r3, #0]
 801c6fe:	330c      	adds	r3, #12
 801c700:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c702:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c704:	e853 3f00 	ldrex	r3, [r3]
 801c708:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801c70a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c70c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801c710:	65bb      	str	r3, [r7, #88]	; 0x58
 801c712:	68fb      	ldr	r3, [r7, #12]
 801c714:	681b      	ldr	r3, [r3, #0]
 801c716:	330c      	adds	r3, #12
 801c718:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801c71a:	64fa      	str	r2, [r7, #76]	; 0x4c
 801c71c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c71e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801c720:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801c722:	e841 2300 	strex	r3, r2, [r1]
 801c726:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801c728:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c72a:	2b00      	cmp	r3, #0
 801c72c:	d1e5      	bne.n	801c6fa <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c72e:	68fb      	ldr	r3, [r7, #12]
 801c730:	681b      	ldr	r3, [r3, #0]
 801c732:	3314      	adds	r3, #20
 801c734:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c738:	e853 3f00 	ldrex	r3, [r3]
 801c73c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801c73e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c740:	f043 0301 	orr.w	r3, r3, #1
 801c744:	657b      	str	r3, [r7, #84]	; 0x54
 801c746:	68fb      	ldr	r3, [r7, #12]
 801c748:	681b      	ldr	r3, [r3, #0]
 801c74a:	3314      	adds	r3, #20
 801c74c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801c74e:	63ba      	str	r2, [r7, #56]	; 0x38
 801c750:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c752:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801c754:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c756:	e841 2300 	strex	r3, r2, [r1]
 801c75a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801c75c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c75e:	2b00      	cmp	r3, #0
 801c760:	d1e5      	bne.n	801c72e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801c762:	68fb      	ldr	r3, [r7, #12]
 801c764:	681b      	ldr	r3, [r3, #0]
 801c766:	3314      	adds	r3, #20
 801c768:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c76a:	69bb      	ldr	r3, [r7, #24]
 801c76c:	e853 3f00 	ldrex	r3, [r3]
 801c770:	617b      	str	r3, [r7, #20]
   return(result);
 801c772:	697b      	ldr	r3, [r7, #20]
 801c774:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c778:	653b      	str	r3, [r7, #80]	; 0x50
 801c77a:	68fb      	ldr	r3, [r7, #12]
 801c77c:	681b      	ldr	r3, [r3, #0]
 801c77e:	3314      	adds	r3, #20
 801c780:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801c782:	627a      	str	r2, [r7, #36]	; 0x24
 801c784:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c786:	6a39      	ldr	r1, [r7, #32]
 801c788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c78a:	e841 2300 	strex	r3, r2, [r1]
 801c78e:	61fb      	str	r3, [r7, #28]
   return(result);
 801c790:	69fb      	ldr	r3, [r7, #28]
 801c792:	2b00      	cmp	r3, #0
 801c794:	d1e5      	bne.n	801c762 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 801c796:	2300      	movs	r3, #0
}
 801c798:	4618      	mov	r0, r3
 801c79a:	3760      	adds	r7, #96	; 0x60
 801c79c:	46bd      	mov	sp, r7
 801c79e:	bd80      	pop	{r7, pc}
 801c7a0:	0801c3a5 	.word	0x0801c3a5
 801c7a4:	0801c4cb 	.word	0x0801c4cb
 801c7a8:	0801c501 	.word	0x0801c501

0801c7ac <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801c7ac:	b480      	push	{r7}
 801c7ae:	b089      	sub	sp, #36	; 0x24
 801c7b0:	af00      	add	r7, sp, #0
 801c7b2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 801c7b4:	687b      	ldr	r3, [r7, #4]
 801c7b6:	681b      	ldr	r3, [r3, #0]
 801c7b8:	330c      	adds	r3, #12
 801c7ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c7bc:	68fb      	ldr	r3, [r7, #12]
 801c7be:	e853 3f00 	ldrex	r3, [r3]
 801c7c2:	60bb      	str	r3, [r7, #8]
   return(result);
 801c7c4:	68bb      	ldr	r3, [r7, #8]
 801c7c6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 801c7ca:	61fb      	str	r3, [r7, #28]
 801c7cc:	687b      	ldr	r3, [r7, #4]
 801c7ce:	681b      	ldr	r3, [r3, #0]
 801c7d0:	330c      	adds	r3, #12
 801c7d2:	69fa      	ldr	r2, [r7, #28]
 801c7d4:	61ba      	str	r2, [r7, #24]
 801c7d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c7d8:	6979      	ldr	r1, [r7, #20]
 801c7da:	69ba      	ldr	r2, [r7, #24]
 801c7dc:	e841 2300 	strex	r3, r2, [r1]
 801c7e0:	613b      	str	r3, [r7, #16]
   return(result);
 801c7e2:	693b      	ldr	r3, [r7, #16]
 801c7e4:	2b00      	cmp	r3, #0
 801c7e6:	d1e5      	bne.n	801c7b4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801c7e8:	687b      	ldr	r3, [r7, #4]
 801c7ea:	2220      	movs	r2, #32
 801c7ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 801c7f0:	bf00      	nop
 801c7f2:	3724      	adds	r7, #36	; 0x24
 801c7f4:	46bd      	mov	sp, r7
 801c7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c7fa:	4770      	bx	lr

0801c7fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801c7fc:	b480      	push	{r7}
 801c7fe:	b095      	sub	sp, #84	; 0x54
 801c800:	af00      	add	r7, sp, #0
 801c802:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801c804:	687b      	ldr	r3, [r7, #4]
 801c806:	681b      	ldr	r3, [r3, #0]
 801c808:	330c      	adds	r3, #12
 801c80a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c80c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c80e:	e853 3f00 	ldrex	r3, [r3]
 801c812:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801c814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c816:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801c81a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801c81c:	687b      	ldr	r3, [r7, #4]
 801c81e:	681b      	ldr	r3, [r3, #0]
 801c820:	330c      	adds	r3, #12
 801c822:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801c824:	643a      	str	r2, [r7, #64]	; 0x40
 801c826:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c828:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801c82a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801c82c:	e841 2300 	strex	r3, r2, [r1]
 801c830:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801c832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c834:	2b00      	cmp	r3, #0
 801c836:	d1e5      	bne.n	801c804 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c838:	687b      	ldr	r3, [r7, #4]
 801c83a:	681b      	ldr	r3, [r3, #0]
 801c83c:	3314      	adds	r3, #20
 801c83e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c840:	6a3b      	ldr	r3, [r7, #32]
 801c842:	e853 3f00 	ldrex	r3, [r3]
 801c846:	61fb      	str	r3, [r7, #28]
   return(result);
 801c848:	69fb      	ldr	r3, [r7, #28]
 801c84a:	f023 0301 	bic.w	r3, r3, #1
 801c84e:	64bb      	str	r3, [r7, #72]	; 0x48
 801c850:	687b      	ldr	r3, [r7, #4]
 801c852:	681b      	ldr	r3, [r3, #0]
 801c854:	3314      	adds	r3, #20
 801c856:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801c858:	62fa      	str	r2, [r7, #44]	; 0x2c
 801c85a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c85c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801c85e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c860:	e841 2300 	strex	r3, r2, [r1]
 801c864:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801c866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c868:	2b00      	cmp	r3, #0
 801c86a:	d1e5      	bne.n	801c838 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c86c:	687b      	ldr	r3, [r7, #4]
 801c86e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c870:	2b01      	cmp	r3, #1
 801c872:	d119      	bne.n	801c8a8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c874:	687b      	ldr	r3, [r7, #4]
 801c876:	681b      	ldr	r3, [r3, #0]
 801c878:	330c      	adds	r3, #12
 801c87a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c87c:	68fb      	ldr	r3, [r7, #12]
 801c87e:	e853 3f00 	ldrex	r3, [r3]
 801c882:	60bb      	str	r3, [r7, #8]
   return(result);
 801c884:	68bb      	ldr	r3, [r7, #8]
 801c886:	f023 0310 	bic.w	r3, r3, #16
 801c88a:	647b      	str	r3, [r7, #68]	; 0x44
 801c88c:	687b      	ldr	r3, [r7, #4]
 801c88e:	681b      	ldr	r3, [r3, #0]
 801c890:	330c      	adds	r3, #12
 801c892:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801c894:	61ba      	str	r2, [r7, #24]
 801c896:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c898:	6979      	ldr	r1, [r7, #20]
 801c89a:	69ba      	ldr	r2, [r7, #24]
 801c89c:	e841 2300 	strex	r3, r2, [r1]
 801c8a0:	613b      	str	r3, [r7, #16]
   return(result);
 801c8a2:	693b      	ldr	r3, [r7, #16]
 801c8a4:	2b00      	cmp	r3, #0
 801c8a6:	d1e5      	bne.n	801c874 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801c8a8:	687b      	ldr	r3, [r7, #4]
 801c8aa:	2220      	movs	r2, #32
 801c8ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c8b0:	687b      	ldr	r3, [r7, #4]
 801c8b2:	2200      	movs	r2, #0
 801c8b4:	631a      	str	r2, [r3, #48]	; 0x30
}
 801c8b6:	bf00      	nop
 801c8b8:	3754      	adds	r7, #84	; 0x54
 801c8ba:	46bd      	mov	sp, r7
 801c8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c8c0:	4770      	bx	lr

0801c8c2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801c8c2:	b580      	push	{r7, lr}
 801c8c4:	b084      	sub	sp, #16
 801c8c6:	af00      	add	r7, sp, #0
 801c8c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801c8ca:	687b      	ldr	r3, [r7, #4]
 801c8cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c8ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 801c8d0:	68fb      	ldr	r3, [r7, #12]
 801c8d2:	2200      	movs	r2, #0
 801c8d4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 801c8d6:	68fb      	ldr	r3, [r7, #12]
 801c8d8:	2200      	movs	r2, #0
 801c8da:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801c8dc:	68f8      	ldr	r0, [r7, #12]
 801c8de:	f7ff fd57 	bl	801c390 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801c8e2:	bf00      	nop
 801c8e4:	3710      	adds	r7, #16
 801c8e6:	46bd      	mov	sp, r7
 801c8e8:	bd80      	pop	{r7, pc}

0801c8ea <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 801c8ea:	b480      	push	{r7}
 801c8ec:	b085      	sub	sp, #20
 801c8ee:	af00      	add	r7, sp, #0
 801c8f0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801c8f2:	687b      	ldr	r3, [r7, #4]
 801c8f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801c8f8:	b2db      	uxtb	r3, r3
 801c8fa:	2b21      	cmp	r3, #33	; 0x21
 801c8fc:	d13e      	bne.n	801c97c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801c8fe:	687b      	ldr	r3, [r7, #4]
 801c900:	689b      	ldr	r3, [r3, #8]
 801c902:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801c906:	d114      	bne.n	801c932 <UART_Transmit_IT+0x48>
 801c908:	687b      	ldr	r3, [r7, #4]
 801c90a:	691b      	ldr	r3, [r3, #16]
 801c90c:	2b00      	cmp	r3, #0
 801c90e:	d110      	bne.n	801c932 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 801c910:	687b      	ldr	r3, [r7, #4]
 801c912:	6a1b      	ldr	r3, [r3, #32]
 801c914:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 801c916:	68fb      	ldr	r3, [r7, #12]
 801c918:	881b      	ldrh	r3, [r3, #0]
 801c91a:	461a      	mov	r2, r3
 801c91c:	687b      	ldr	r3, [r7, #4]
 801c91e:	681b      	ldr	r3, [r3, #0]
 801c920:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801c924:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 801c926:	687b      	ldr	r3, [r7, #4]
 801c928:	6a1b      	ldr	r3, [r3, #32]
 801c92a:	1c9a      	adds	r2, r3, #2
 801c92c:	687b      	ldr	r3, [r7, #4]
 801c92e:	621a      	str	r2, [r3, #32]
 801c930:	e008      	b.n	801c944 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 801c932:	687b      	ldr	r3, [r7, #4]
 801c934:	6a1b      	ldr	r3, [r3, #32]
 801c936:	1c59      	adds	r1, r3, #1
 801c938:	687a      	ldr	r2, [r7, #4]
 801c93a:	6211      	str	r1, [r2, #32]
 801c93c:	781a      	ldrb	r2, [r3, #0]
 801c93e:	687b      	ldr	r3, [r7, #4]
 801c940:	681b      	ldr	r3, [r3, #0]
 801c942:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 801c944:	687b      	ldr	r3, [r7, #4]
 801c946:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801c948:	b29b      	uxth	r3, r3
 801c94a:	3b01      	subs	r3, #1
 801c94c:	b29b      	uxth	r3, r3
 801c94e:	687a      	ldr	r2, [r7, #4]
 801c950:	4619      	mov	r1, r3
 801c952:	84d1      	strh	r1, [r2, #38]	; 0x26
 801c954:	2b00      	cmp	r3, #0
 801c956:	d10f      	bne.n	801c978 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801c958:	687b      	ldr	r3, [r7, #4]
 801c95a:	681b      	ldr	r3, [r3, #0]
 801c95c:	68da      	ldr	r2, [r3, #12]
 801c95e:	687b      	ldr	r3, [r7, #4]
 801c960:	681b      	ldr	r3, [r3, #0]
 801c962:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801c966:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 801c968:	687b      	ldr	r3, [r7, #4]
 801c96a:	681b      	ldr	r3, [r3, #0]
 801c96c:	68da      	ldr	r2, [r3, #12]
 801c96e:	687b      	ldr	r3, [r7, #4]
 801c970:	681b      	ldr	r3, [r3, #0]
 801c972:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801c976:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 801c978:	2300      	movs	r3, #0
 801c97a:	e000      	b.n	801c97e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 801c97c:	2302      	movs	r3, #2
  }
}
 801c97e:	4618      	mov	r0, r3
 801c980:	3714      	adds	r7, #20
 801c982:	46bd      	mov	sp, r7
 801c984:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c988:	4770      	bx	lr

0801c98a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801c98a:	b580      	push	{r7, lr}
 801c98c:	b082      	sub	sp, #8
 801c98e:	af00      	add	r7, sp, #0
 801c990:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 801c992:	687b      	ldr	r3, [r7, #4]
 801c994:	681b      	ldr	r3, [r3, #0]
 801c996:	68da      	ldr	r2, [r3, #12]
 801c998:	687b      	ldr	r3, [r7, #4]
 801c99a:	681b      	ldr	r3, [r3, #0]
 801c99c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c9a0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801c9a2:	687b      	ldr	r3, [r7, #4]
 801c9a4:	2220      	movs	r2, #32
 801c9a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801c9aa:	6878      	ldr	r0, [r7, #4]
 801c9ac:	f7ff fcd2 	bl	801c354 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 801c9b0:	2300      	movs	r3, #0
}
 801c9b2:	4618      	mov	r0, r3
 801c9b4:	3708      	adds	r7, #8
 801c9b6:	46bd      	mov	sp, r7
 801c9b8:	bd80      	pop	{r7, pc}

0801c9ba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 801c9ba:	b580      	push	{r7, lr}
 801c9bc:	b08c      	sub	sp, #48	; 0x30
 801c9be:	af00      	add	r7, sp, #0
 801c9c0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801c9c2:	687b      	ldr	r3, [r7, #4]
 801c9c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801c9c8:	b2db      	uxtb	r3, r3
 801c9ca:	2b22      	cmp	r3, #34	; 0x22
 801c9cc:	f040 80ab 	bne.w	801cb26 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801c9d0:	687b      	ldr	r3, [r7, #4]
 801c9d2:	689b      	ldr	r3, [r3, #8]
 801c9d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801c9d8:	d117      	bne.n	801ca0a <UART_Receive_IT+0x50>
 801c9da:	687b      	ldr	r3, [r7, #4]
 801c9dc:	691b      	ldr	r3, [r3, #16]
 801c9de:	2b00      	cmp	r3, #0
 801c9e0:	d113      	bne.n	801ca0a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 801c9e2:	2300      	movs	r3, #0
 801c9e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 801c9e6:	687b      	ldr	r3, [r7, #4]
 801c9e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c9ea:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 801c9ec:	687b      	ldr	r3, [r7, #4]
 801c9ee:	681b      	ldr	r3, [r3, #0]
 801c9f0:	685b      	ldr	r3, [r3, #4]
 801c9f2:	b29b      	uxth	r3, r3
 801c9f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c9f8:	b29a      	uxth	r2, r3
 801c9fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c9fc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 801c9fe:	687b      	ldr	r3, [r7, #4]
 801ca00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ca02:	1c9a      	adds	r2, r3, #2
 801ca04:	687b      	ldr	r3, [r7, #4]
 801ca06:	629a      	str	r2, [r3, #40]	; 0x28
 801ca08:	e026      	b.n	801ca58 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 801ca0a:	687b      	ldr	r3, [r7, #4]
 801ca0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ca0e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 801ca10:	2300      	movs	r3, #0
 801ca12:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 801ca14:	687b      	ldr	r3, [r7, #4]
 801ca16:	689b      	ldr	r3, [r3, #8]
 801ca18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801ca1c:	d007      	beq.n	801ca2e <UART_Receive_IT+0x74>
 801ca1e:	687b      	ldr	r3, [r7, #4]
 801ca20:	689b      	ldr	r3, [r3, #8]
 801ca22:	2b00      	cmp	r3, #0
 801ca24:	d10a      	bne.n	801ca3c <UART_Receive_IT+0x82>
 801ca26:	687b      	ldr	r3, [r7, #4]
 801ca28:	691b      	ldr	r3, [r3, #16]
 801ca2a:	2b00      	cmp	r3, #0
 801ca2c:	d106      	bne.n	801ca3c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 801ca2e:	687b      	ldr	r3, [r7, #4]
 801ca30:	681b      	ldr	r3, [r3, #0]
 801ca32:	685b      	ldr	r3, [r3, #4]
 801ca34:	b2da      	uxtb	r2, r3
 801ca36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ca38:	701a      	strb	r2, [r3, #0]
 801ca3a:	e008      	b.n	801ca4e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 801ca3c:	687b      	ldr	r3, [r7, #4]
 801ca3e:	681b      	ldr	r3, [r3, #0]
 801ca40:	685b      	ldr	r3, [r3, #4]
 801ca42:	b2db      	uxtb	r3, r3
 801ca44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801ca48:	b2da      	uxtb	r2, r3
 801ca4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ca4c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 801ca4e:	687b      	ldr	r3, [r7, #4]
 801ca50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ca52:	1c5a      	adds	r2, r3, #1
 801ca54:	687b      	ldr	r3, [r7, #4]
 801ca56:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 801ca58:	687b      	ldr	r3, [r7, #4]
 801ca5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801ca5c:	b29b      	uxth	r3, r3
 801ca5e:	3b01      	subs	r3, #1
 801ca60:	b29b      	uxth	r3, r3
 801ca62:	687a      	ldr	r2, [r7, #4]
 801ca64:	4619      	mov	r1, r3
 801ca66:	85d1      	strh	r1, [r2, #46]	; 0x2e
 801ca68:	2b00      	cmp	r3, #0
 801ca6a:	d15a      	bne.n	801cb22 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 801ca6c:	687b      	ldr	r3, [r7, #4]
 801ca6e:	681b      	ldr	r3, [r3, #0]
 801ca70:	68da      	ldr	r2, [r3, #12]
 801ca72:	687b      	ldr	r3, [r7, #4]
 801ca74:	681b      	ldr	r3, [r3, #0]
 801ca76:	f022 0220 	bic.w	r2, r2, #32
 801ca7a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 801ca7c:	687b      	ldr	r3, [r7, #4]
 801ca7e:	681b      	ldr	r3, [r3, #0]
 801ca80:	68da      	ldr	r2, [r3, #12]
 801ca82:	687b      	ldr	r3, [r7, #4]
 801ca84:	681b      	ldr	r3, [r3, #0]
 801ca86:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801ca8a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 801ca8c:	687b      	ldr	r3, [r7, #4]
 801ca8e:	681b      	ldr	r3, [r3, #0]
 801ca90:	695a      	ldr	r2, [r3, #20]
 801ca92:	687b      	ldr	r3, [r7, #4]
 801ca94:	681b      	ldr	r3, [r3, #0]
 801ca96:	f022 0201 	bic.w	r2, r2, #1
 801ca9a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801ca9c:	687b      	ldr	r3, [r7, #4]
 801ca9e:	2220      	movs	r2, #32
 801caa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801caa4:	687b      	ldr	r3, [r7, #4]
 801caa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801caa8:	2b01      	cmp	r3, #1
 801caaa:	d135      	bne.n	801cb18 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801caac:	687b      	ldr	r3, [r7, #4]
 801caae:	2200      	movs	r2, #0
 801cab0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801cab2:	687b      	ldr	r3, [r7, #4]
 801cab4:	681b      	ldr	r3, [r3, #0]
 801cab6:	330c      	adds	r3, #12
 801cab8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801caba:	697b      	ldr	r3, [r7, #20]
 801cabc:	e853 3f00 	ldrex	r3, [r3]
 801cac0:	613b      	str	r3, [r7, #16]
   return(result);
 801cac2:	693b      	ldr	r3, [r7, #16]
 801cac4:	f023 0310 	bic.w	r3, r3, #16
 801cac8:	627b      	str	r3, [r7, #36]	; 0x24
 801caca:	687b      	ldr	r3, [r7, #4]
 801cacc:	681b      	ldr	r3, [r3, #0]
 801cace:	330c      	adds	r3, #12
 801cad0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cad2:	623a      	str	r2, [r7, #32]
 801cad4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801cad6:	69f9      	ldr	r1, [r7, #28]
 801cad8:	6a3a      	ldr	r2, [r7, #32]
 801cada:	e841 2300 	strex	r3, r2, [r1]
 801cade:	61bb      	str	r3, [r7, #24]
   return(result);
 801cae0:	69bb      	ldr	r3, [r7, #24]
 801cae2:	2b00      	cmp	r3, #0
 801cae4:	d1e5      	bne.n	801cab2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 801cae6:	687b      	ldr	r3, [r7, #4]
 801cae8:	681b      	ldr	r3, [r3, #0]
 801caea:	681b      	ldr	r3, [r3, #0]
 801caec:	f003 0310 	and.w	r3, r3, #16
 801caf0:	2b10      	cmp	r3, #16
 801caf2:	d10a      	bne.n	801cb0a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 801caf4:	2300      	movs	r3, #0
 801caf6:	60fb      	str	r3, [r7, #12]
 801caf8:	687b      	ldr	r3, [r7, #4]
 801cafa:	681b      	ldr	r3, [r3, #0]
 801cafc:	681b      	ldr	r3, [r3, #0]
 801cafe:	60fb      	str	r3, [r7, #12]
 801cb00:	687b      	ldr	r3, [r7, #4]
 801cb02:	681b      	ldr	r3, [r3, #0]
 801cb04:	685b      	ldr	r3, [r3, #4]
 801cb06:	60fb      	str	r3, [r7, #12]
 801cb08:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801cb0a:	687b      	ldr	r3, [r7, #4]
 801cb0c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801cb0e:	4619      	mov	r1, r3
 801cb10:	6878      	ldr	r0, [r7, #4]
 801cb12:	f7e4 fa2b 	bl	8000f6c <HAL_UARTEx_RxEventCallback>
 801cb16:	e002      	b.n	801cb1e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 801cb18:	6878      	ldr	r0, [r7, #4]
 801cb1a:	f7ff fc25 	bl	801c368 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 801cb1e:	2300      	movs	r3, #0
 801cb20:	e002      	b.n	801cb28 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 801cb22:	2300      	movs	r3, #0
 801cb24:	e000      	b.n	801cb28 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 801cb26:	2302      	movs	r3, #2
  }
}
 801cb28:	4618      	mov	r0, r3
 801cb2a:	3730      	adds	r7, #48	; 0x30
 801cb2c:	46bd      	mov	sp, r7
 801cb2e:	bd80      	pop	{r7, pc}

0801cb30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 801cb30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801cb34:	b0c0      	sub	sp, #256	; 0x100
 801cb36:	af00      	add	r7, sp, #0
 801cb38:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801cb3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cb40:	681b      	ldr	r3, [r3, #0]
 801cb42:	691b      	ldr	r3, [r3, #16]
 801cb44:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 801cb48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cb4c:	68d9      	ldr	r1, [r3, #12]
 801cb4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cb52:	681a      	ldr	r2, [r3, #0]
 801cb54:	ea40 0301 	orr.w	r3, r0, r1
 801cb58:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 801cb5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cb5e:	689a      	ldr	r2, [r3, #8]
 801cb60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cb64:	691b      	ldr	r3, [r3, #16]
 801cb66:	431a      	orrs	r2, r3
 801cb68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cb6c:	695b      	ldr	r3, [r3, #20]
 801cb6e:	431a      	orrs	r2, r3
 801cb70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cb74:	69db      	ldr	r3, [r3, #28]
 801cb76:	4313      	orrs	r3, r2
 801cb78:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 801cb7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cb80:	681b      	ldr	r3, [r3, #0]
 801cb82:	68db      	ldr	r3, [r3, #12]
 801cb84:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 801cb88:	f021 010c 	bic.w	r1, r1, #12
 801cb8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cb90:	681a      	ldr	r2, [r3, #0]
 801cb92:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801cb96:	430b      	orrs	r3, r1
 801cb98:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 801cb9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cb9e:	681b      	ldr	r3, [r3, #0]
 801cba0:	695b      	ldr	r3, [r3, #20]
 801cba2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 801cba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cbaa:	6999      	ldr	r1, [r3, #24]
 801cbac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cbb0:	681a      	ldr	r2, [r3, #0]
 801cbb2:	ea40 0301 	orr.w	r3, r0, r1
 801cbb6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 801cbb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cbbc:	681a      	ldr	r2, [r3, #0]
 801cbbe:	4b8f      	ldr	r3, [pc, #572]	; (801cdfc <UART_SetConfig+0x2cc>)
 801cbc0:	429a      	cmp	r2, r3
 801cbc2:	d005      	beq.n	801cbd0 <UART_SetConfig+0xa0>
 801cbc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cbc8:	681a      	ldr	r2, [r3, #0]
 801cbca:	4b8d      	ldr	r3, [pc, #564]	; (801ce00 <UART_SetConfig+0x2d0>)
 801cbcc:	429a      	cmp	r2, r3
 801cbce:	d104      	bne.n	801cbda <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 801cbd0:	f7fd ffbc 	bl	801ab4c <HAL_RCC_GetPCLK2Freq>
 801cbd4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 801cbd8:	e003      	b.n	801cbe2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 801cbda:	f7fd ffa3 	bl	801ab24 <HAL_RCC_GetPCLK1Freq>
 801cbde:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801cbe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cbe6:	69db      	ldr	r3, [r3, #28]
 801cbe8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801cbec:	f040 810c 	bne.w	801ce08 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801cbf0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801cbf4:	2200      	movs	r2, #0
 801cbf6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801cbfa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 801cbfe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 801cc02:	4622      	mov	r2, r4
 801cc04:	462b      	mov	r3, r5
 801cc06:	1891      	adds	r1, r2, r2
 801cc08:	65b9      	str	r1, [r7, #88]	; 0x58
 801cc0a:	415b      	adcs	r3, r3
 801cc0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 801cc0e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 801cc12:	4621      	mov	r1, r4
 801cc14:	eb12 0801 	adds.w	r8, r2, r1
 801cc18:	4629      	mov	r1, r5
 801cc1a:	eb43 0901 	adc.w	r9, r3, r1
 801cc1e:	f04f 0200 	mov.w	r2, #0
 801cc22:	f04f 0300 	mov.w	r3, #0
 801cc26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801cc2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801cc2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801cc32:	4690      	mov	r8, r2
 801cc34:	4699      	mov	r9, r3
 801cc36:	4623      	mov	r3, r4
 801cc38:	eb18 0303 	adds.w	r3, r8, r3
 801cc3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801cc40:	462b      	mov	r3, r5
 801cc42:	eb49 0303 	adc.w	r3, r9, r3
 801cc46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801cc4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cc4e:	685b      	ldr	r3, [r3, #4]
 801cc50:	2200      	movs	r2, #0
 801cc52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801cc56:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 801cc5a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 801cc5e:	460b      	mov	r3, r1
 801cc60:	18db      	adds	r3, r3, r3
 801cc62:	653b      	str	r3, [r7, #80]	; 0x50
 801cc64:	4613      	mov	r3, r2
 801cc66:	eb42 0303 	adc.w	r3, r2, r3
 801cc6a:	657b      	str	r3, [r7, #84]	; 0x54
 801cc6c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 801cc70:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 801cc74:	f7e3 ffc0 	bl	8000bf8 <__aeabi_uldivmod>
 801cc78:	4602      	mov	r2, r0
 801cc7a:	460b      	mov	r3, r1
 801cc7c:	4b61      	ldr	r3, [pc, #388]	; (801ce04 <UART_SetConfig+0x2d4>)
 801cc7e:	fba3 2302 	umull	r2, r3, r3, r2
 801cc82:	095b      	lsrs	r3, r3, #5
 801cc84:	011c      	lsls	r4, r3, #4
 801cc86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801cc8a:	2200      	movs	r2, #0
 801cc8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801cc90:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 801cc94:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 801cc98:	4642      	mov	r2, r8
 801cc9a:	464b      	mov	r3, r9
 801cc9c:	1891      	adds	r1, r2, r2
 801cc9e:	64b9      	str	r1, [r7, #72]	; 0x48
 801cca0:	415b      	adcs	r3, r3
 801cca2:	64fb      	str	r3, [r7, #76]	; 0x4c
 801cca4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 801cca8:	4641      	mov	r1, r8
 801ccaa:	eb12 0a01 	adds.w	sl, r2, r1
 801ccae:	4649      	mov	r1, r9
 801ccb0:	eb43 0b01 	adc.w	fp, r3, r1
 801ccb4:	f04f 0200 	mov.w	r2, #0
 801ccb8:	f04f 0300 	mov.w	r3, #0
 801ccbc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 801ccc0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 801ccc4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801ccc8:	4692      	mov	sl, r2
 801ccca:	469b      	mov	fp, r3
 801cccc:	4643      	mov	r3, r8
 801ccce:	eb1a 0303 	adds.w	r3, sl, r3
 801ccd2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801ccd6:	464b      	mov	r3, r9
 801ccd8:	eb4b 0303 	adc.w	r3, fp, r3
 801ccdc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801cce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cce4:	685b      	ldr	r3, [r3, #4]
 801cce6:	2200      	movs	r2, #0
 801cce8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801ccec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 801ccf0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 801ccf4:	460b      	mov	r3, r1
 801ccf6:	18db      	adds	r3, r3, r3
 801ccf8:	643b      	str	r3, [r7, #64]	; 0x40
 801ccfa:	4613      	mov	r3, r2
 801ccfc:	eb42 0303 	adc.w	r3, r2, r3
 801cd00:	647b      	str	r3, [r7, #68]	; 0x44
 801cd02:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801cd06:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 801cd0a:	f7e3 ff75 	bl	8000bf8 <__aeabi_uldivmod>
 801cd0e:	4602      	mov	r2, r0
 801cd10:	460b      	mov	r3, r1
 801cd12:	4611      	mov	r1, r2
 801cd14:	4b3b      	ldr	r3, [pc, #236]	; (801ce04 <UART_SetConfig+0x2d4>)
 801cd16:	fba3 2301 	umull	r2, r3, r3, r1
 801cd1a:	095b      	lsrs	r3, r3, #5
 801cd1c:	2264      	movs	r2, #100	; 0x64
 801cd1e:	fb02 f303 	mul.w	r3, r2, r3
 801cd22:	1acb      	subs	r3, r1, r3
 801cd24:	00db      	lsls	r3, r3, #3
 801cd26:	f103 0232 	add.w	r2, r3, #50	; 0x32
 801cd2a:	4b36      	ldr	r3, [pc, #216]	; (801ce04 <UART_SetConfig+0x2d4>)
 801cd2c:	fba3 2302 	umull	r2, r3, r3, r2
 801cd30:	095b      	lsrs	r3, r3, #5
 801cd32:	005b      	lsls	r3, r3, #1
 801cd34:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 801cd38:	441c      	add	r4, r3
 801cd3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801cd3e:	2200      	movs	r2, #0
 801cd40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801cd44:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 801cd48:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 801cd4c:	4642      	mov	r2, r8
 801cd4e:	464b      	mov	r3, r9
 801cd50:	1891      	adds	r1, r2, r2
 801cd52:	63b9      	str	r1, [r7, #56]	; 0x38
 801cd54:	415b      	adcs	r3, r3
 801cd56:	63fb      	str	r3, [r7, #60]	; 0x3c
 801cd58:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801cd5c:	4641      	mov	r1, r8
 801cd5e:	1851      	adds	r1, r2, r1
 801cd60:	6339      	str	r1, [r7, #48]	; 0x30
 801cd62:	4649      	mov	r1, r9
 801cd64:	414b      	adcs	r3, r1
 801cd66:	637b      	str	r3, [r7, #52]	; 0x34
 801cd68:	f04f 0200 	mov.w	r2, #0
 801cd6c:	f04f 0300 	mov.w	r3, #0
 801cd70:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 801cd74:	4659      	mov	r1, fp
 801cd76:	00cb      	lsls	r3, r1, #3
 801cd78:	4651      	mov	r1, sl
 801cd7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801cd7e:	4651      	mov	r1, sl
 801cd80:	00ca      	lsls	r2, r1, #3
 801cd82:	4610      	mov	r0, r2
 801cd84:	4619      	mov	r1, r3
 801cd86:	4603      	mov	r3, r0
 801cd88:	4642      	mov	r2, r8
 801cd8a:	189b      	adds	r3, r3, r2
 801cd8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801cd90:	464b      	mov	r3, r9
 801cd92:	460a      	mov	r2, r1
 801cd94:	eb42 0303 	adc.w	r3, r2, r3
 801cd98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801cd9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cda0:	685b      	ldr	r3, [r3, #4]
 801cda2:	2200      	movs	r2, #0
 801cda4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 801cda8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 801cdac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 801cdb0:	460b      	mov	r3, r1
 801cdb2:	18db      	adds	r3, r3, r3
 801cdb4:	62bb      	str	r3, [r7, #40]	; 0x28
 801cdb6:	4613      	mov	r3, r2
 801cdb8:	eb42 0303 	adc.w	r3, r2, r3
 801cdbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 801cdbe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801cdc2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 801cdc6:	f7e3 ff17 	bl	8000bf8 <__aeabi_uldivmod>
 801cdca:	4602      	mov	r2, r0
 801cdcc:	460b      	mov	r3, r1
 801cdce:	4b0d      	ldr	r3, [pc, #52]	; (801ce04 <UART_SetConfig+0x2d4>)
 801cdd0:	fba3 1302 	umull	r1, r3, r3, r2
 801cdd4:	095b      	lsrs	r3, r3, #5
 801cdd6:	2164      	movs	r1, #100	; 0x64
 801cdd8:	fb01 f303 	mul.w	r3, r1, r3
 801cddc:	1ad3      	subs	r3, r2, r3
 801cdde:	00db      	lsls	r3, r3, #3
 801cde0:	3332      	adds	r3, #50	; 0x32
 801cde2:	4a08      	ldr	r2, [pc, #32]	; (801ce04 <UART_SetConfig+0x2d4>)
 801cde4:	fba2 2303 	umull	r2, r3, r2, r3
 801cde8:	095b      	lsrs	r3, r3, #5
 801cdea:	f003 0207 	and.w	r2, r3, #7
 801cdee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cdf2:	681b      	ldr	r3, [r3, #0]
 801cdf4:	4422      	add	r2, r4
 801cdf6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 801cdf8:	e105      	b.n	801d006 <UART_SetConfig+0x4d6>
 801cdfa:	bf00      	nop
 801cdfc:	40011000 	.word	0x40011000
 801ce00:	40011400 	.word	0x40011400
 801ce04:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801ce08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801ce0c:	2200      	movs	r2, #0
 801ce0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801ce12:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801ce16:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 801ce1a:	4642      	mov	r2, r8
 801ce1c:	464b      	mov	r3, r9
 801ce1e:	1891      	adds	r1, r2, r2
 801ce20:	6239      	str	r1, [r7, #32]
 801ce22:	415b      	adcs	r3, r3
 801ce24:	627b      	str	r3, [r7, #36]	; 0x24
 801ce26:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801ce2a:	4641      	mov	r1, r8
 801ce2c:	1854      	adds	r4, r2, r1
 801ce2e:	4649      	mov	r1, r9
 801ce30:	eb43 0501 	adc.w	r5, r3, r1
 801ce34:	f04f 0200 	mov.w	r2, #0
 801ce38:	f04f 0300 	mov.w	r3, #0
 801ce3c:	00eb      	lsls	r3, r5, #3
 801ce3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801ce42:	00e2      	lsls	r2, r4, #3
 801ce44:	4614      	mov	r4, r2
 801ce46:	461d      	mov	r5, r3
 801ce48:	4643      	mov	r3, r8
 801ce4a:	18e3      	adds	r3, r4, r3
 801ce4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801ce50:	464b      	mov	r3, r9
 801ce52:	eb45 0303 	adc.w	r3, r5, r3
 801ce56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801ce5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801ce5e:	685b      	ldr	r3, [r3, #4]
 801ce60:	2200      	movs	r2, #0
 801ce62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801ce66:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 801ce6a:	f04f 0200 	mov.w	r2, #0
 801ce6e:	f04f 0300 	mov.w	r3, #0
 801ce72:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 801ce76:	4629      	mov	r1, r5
 801ce78:	008b      	lsls	r3, r1, #2
 801ce7a:	4621      	mov	r1, r4
 801ce7c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801ce80:	4621      	mov	r1, r4
 801ce82:	008a      	lsls	r2, r1, #2
 801ce84:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 801ce88:	f7e3 feb6 	bl	8000bf8 <__aeabi_uldivmod>
 801ce8c:	4602      	mov	r2, r0
 801ce8e:	460b      	mov	r3, r1
 801ce90:	4b60      	ldr	r3, [pc, #384]	; (801d014 <UART_SetConfig+0x4e4>)
 801ce92:	fba3 2302 	umull	r2, r3, r3, r2
 801ce96:	095b      	lsrs	r3, r3, #5
 801ce98:	011c      	lsls	r4, r3, #4
 801ce9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801ce9e:	2200      	movs	r2, #0
 801cea0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801cea4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 801cea8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 801ceac:	4642      	mov	r2, r8
 801ceae:	464b      	mov	r3, r9
 801ceb0:	1891      	adds	r1, r2, r2
 801ceb2:	61b9      	str	r1, [r7, #24]
 801ceb4:	415b      	adcs	r3, r3
 801ceb6:	61fb      	str	r3, [r7, #28]
 801ceb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801cebc:	4641      	mov	r1, r8
 801cebe:	1851      	adds	r1, r2, r1
 801cec0:	6139      	str	r1, [r7, #16]
 801cec2:	4649      	mov	r1, r9
 801cec4:	414b      	adcs	r3, r1
 801cec6:	617b      	str	r3, [r7, #20]
 801cec8:	f04f 0200 	mov.w	r2, #0
 801cecc:	f04f 0300 	mov.w	r3, #0
 801ced0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 801ced4:	4659      	mov	r1, fp
 801ced6:	00cb      	lsls	r3, r1, #3
 801ced8:	4651      	mov	r1, sl
 801ceda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801cede:	4651      	mov	r1, sl
 801cee0:	00ca      	lsls	r2, r1, #3
 801cee2:	4610      	mov	r0, r2
 801cee4:	4619      	mov	r1, r3
 801cee6:	4603      	mov	r3, r0
 801cee8:	4642      	mov	r2, r8
 801ceea:	189b      	adds	r3, r3, r2
 801ceec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801cef0:	464b      	mov	r3, r9
 801cef2:	460a      	mov	r2, r1
 801cef4:	eb42 0303 	adc.w	r3, r2, r3
 801cef8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801cefc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cf00:	685b      	ldr	r3, [r3, #4]
 801cf02:	2200      	movs	r2, #0
 801cf04:	67bb      	str	r3, [r7, #120]	; 0x78
 801cf06:	67fa      	str	r2, [r7, #124]	; 0x7c
 801cf08:	f04f 0200 	mov.w	r2, #0
 801cf0c:	f04f 0300 	mov.w	r3, #0
 801cf10:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 801cf14:	4649      	mov	r1, r9
 801cf16:	008b      	lsls	r3, r1, #2
 801cf18:	4641      	mov	r1, r8
 801cf1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801cf1e:	4641      	mov	r1, r8
 801cf20:	008a      	lsls	r2, r1, #2
 801cf22:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 801cf26:	f7e3 fe67 	bl	8000bf8 <__aeabi_uldivmod>
 801cf2a:	4602      	mov	r2, r0
 801cf2c:	460b      	mov	r3, r1
 801cf2e:	4b39      	ldr	r3, [pc, #228]	; (801d014 <UART_SetConfig+0x4e4>)
 801cf30:	fba3 1302 	umull	r1, r3, r3, r2
 801cf34:	095b      	lsrs	r3, r3, #5
 801cf36:	2164      	movs	r1, #100	; 0x64
 801cf38:	fb01 f303 	mul.w	r3, r1, r3
 801cf3c:	1ad3      	subs	r3, r2, r3
 801cf3e:	011b      	lsls	r3, r3, #4
 801cf40:	3332      	adds	r3, #50	; 0x32
 801cf42:	4a34      	ldr	r2, [pc, #208]	; (801d014 <UART_SetConfig+0x4e4>)
 801cf44:	fba2 2303 	umull	r2, r3, r2, r3
 801cf48:	095b      	lsrs	r3, r3, #5
 801cf4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801cf4e:	441c      	add	r4, r3
 801cf50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801cf54:	2200      	movs	r2, #0
 801cf56:	673b      	str	r3, [r7, #112]	; 0x70
 801cf58:	677a      	str	r2, [r7, #116]	; 0x74
 801cf5a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 801cf5e:	4642      	mov	r2, r8
 801cf60:	464b      	mov	r3, r9
 801cf62:	1891      	adds	r1, r2, r2
 801cf64:	60b9      	str	r1, [r7, #8]
 801cf66:	415b      	adcs	r3, r3
 801cf68:	60fb      	str	r3, [r7, #12]
 801cf6a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801cf6e:	4641      	mov	r1, r8
 801cf70:	1851      	adds	r1, r2, r1
 801cf72:	6039      	str	r1, [r7, #0]
 801cf74:	4649      	mov	r1, r9
 801cf76:	414b      	adcs	r3, r1
 801cf78:	607b      	str	r3, [r7, #4]
 801cf7a:	f04f 0200 	mov.w	r2, #0
 801cf7e:	f04f 0300 	mov.w	r3, #0
 801cf82:	e9d7 ab00 	ldrd	sl, fp, [r7]
 801cf86:	4659      	mov	r1, fp
 801cf88:	00cb      	lsls	r3, r1, #3
 801cf8a:	4651      	mov	r1, sl
 801cf8c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801cf90:	4651      	mov	r1, sl
 801cf92:	00ca      	lsls	r2, r1, #3
 801cf94:	4610      	mov	r0, r2
 801cf96:	4619      	mov	r1, r3
 801cf98:	4603      	mov	r3, r0
 801cf9a:	4642      	mov	r2, r8
 801cf9c:	189b      	adds	r3, r3, r2
 801cf9e:	66bb      	str	r3, [r7, #104]	; 0x68
 801cfa0:	464b      	mov	r3, r9
 801cfa2:	460a      	mov	r2, r1
 801cfa4:	eb42 0303 	adc.w	r3, r2, r3
 801cfa8:	66fb      	str	r3, [r7, #108]	; 0x6c
 801cfaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cfae:	685b      	ldr	r3, [r3, #4]
 801cfb0:	2200      	movs	r2, #0
 801cfb2:	663b      	str	r3, [r7, #96]	; 0x60
 801cfb4:	667a      	str	r2, [r7, #100]	; 0x64
 801cfb6:	f04f 0200 	mov.w	r2, #0
 801cfba:	f04f 0300 	mov.w	r3, #0
 801cfbe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 801cfc2:	4649      	mov	r1, r9
 801cfc4:	008b      	lsls	r3, r1, #2
 801cfc6:	4641      	mov	r1, r8
 801cfc8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801cfcc:	4641      	mov	r1, r8
 801cfce:	008a      	lsls	r2, r1, #2
 801cfd0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 801cfd4:	f7e3 fe10 	bl	8000bf8 <__aeabi_uldivmod>
 801cfd8:	4602      	mov	r2, r0
 801cfda:	460b      	mov	r3, r1
 801cfdc:	4b0d      	ldr	r3, [pc, #52]	; (801d014 <UART_SetConfig+0x4e4>)
 801cfde:	fba3 1302 	umull	r1, r3, r3, r2
 801cfe2:	095b      	lsrs	r3, r3, #5
 801cfe4:	2164      	movs	r1, #100	; 0x64
 801cfe6:	fb01 f303 	mul.w	r3, r1, r3
 801cfea:	1ad3      	subs	r3, r2, r3
 801cfec:	011b      	lsls	r3, r3, #4
 801cfee:	3332      	adds	r3, #50	; 0x32
 801cff0:	4a08      	ldr	r2, [pc, #32]	; (801d014 <UART_SetConfig+0x4e4>)
 801cff2:	fba2 2303 	umull	r2, r3, r2, r3
 801cff6:	095b      	lsrs	r3, r3, #5
 801cff8:	f003 020f 	and.w	r2, r3, #15
 801cffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801d000:	681b      	ldr	r3, [r3, #0]
 801d002:	4422      	add	r2, r4
 801d004:	609a      	str	r2, [r3, #8]
}
 801d006:	bf00      	nop
 801d008:	f507 7780 	add.w	r7, r7, #256	; 0x100
 801d00c:	46bd      	mov	sp, r7
 801d00e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801d012:	bf00      	nop
 801d014:	51eb851f 	.word	0x51eb851f

0801d018 <pow>:
 801d018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d01a:	ed2d 8b02 	vpush	{d8}
 801d01e:	eeb0 8a40 	vmov.f32	s16, s0
 801d022:	eef0 8a60 	vmov.f32	s17, s1
 801d026:	ec55 4b11 	vmov	r4, r5, d1
 801d02a:	f000 f885 	bl	801d138 <__ieee754_pow>
 801d02e:	4622      	mov	r2, r4
 801d030:	462b      	mov	r3, r5
 801d032:	4620      	mov	r0, r4
 801d034:	4629      	mov	r1, r5
 801d036:	ec57 6b10 	vmov	r6, r7, d0
 801d03a:	f7e3 fd77 	bl	8000b2c <__aeabi_dcmpun>
 801d03e:	2800      	cmp	r0, #0
 801d040:	d13b      	bne.n	801d0ba <pow+0xa2>
 801d042:	ec51 0b18 	vmov	r0, r1, d8
 801d046:	2200      	movs	r2, #0
 801d048:	2300      	movs	r3, #0
 801d04a:	f7e3 fd3d 	bl	8000ac8 <__aeabi_dcmpeq>
 801d04e:	b1b8      	cbz	r0, 801d080 <pow+0x68>
 801d050:	2200      	movs	r2, #0
 801d052:	2300      	movs	r3, #0
 801d054:	4620      	mov	r0, r4
 801d056:	4629      	mov	r1, r5
 801d058:	f7e3 fd36 	bl	8000ac8 <__aeabi_dcmpeq>
 801d05c:	2800      	cmp	r0, #0
 801d05e:	d146      	bne.n	801d0ee <pow+0xd6>
 801d060:	ec45 4b10 	vmov	d0, r4, r5
 801d064:	f000 fe84 	bl	801dd70 <finite>
 801d068:	b338      	cbz	r0, 801d0ba <pow+0xa2>
 801d06a:	2200      	movs	r2, #0
 801d06c:	2300      	movs	r3, #0
 801d06e:	4620      	mov	r0, r4
 801d070:	4629      	mov	r1, r5
 801d072:	f7e3 fd33 	bl	8000adc <__aeabi_dcmplt>
 801d076:	b300      	cbz	r0, 801d0ba <pow+0xa2>
 801d078:	f000 ff2a 	bl	801ded0 <__errno>
 801d07c:	2322      	movs	r3, #34	; 0x22
 801d07e:	e01b      	b.n	801d0b8 <pow+0xa0>
 801d080:	ec47 6b10 	vmov	d0, r6, r7
 801d084:	f000 fe74 	bl	801dd70 <finite>
 801d088:	b9e0      	cbnz	r0, 801d0c4 <pow+0xac>
 801d08a:	eeb0 0a48 	vmov.f32	s0, s16
 801d08e:	eef0 0a68 	vmov.f32	s1, s17
 801d092:	f000 fe6d 	bl	801dd70 <finite>
 801d096:	b1a8      	cbz	r0, 801d0c4 <pow+0xac>
 801d098:	ec45 4b10 	vmov	d0, r4, r5
 801d09c:	f000 fe68 	bl	801dd70 <finite>
 801d0a0:	b180      	cbz	r0, 801d0c4 <pow+0xac>
 801d0a2:	4632      	mov	r2, r6
 801d0a4:	463b      	mov	r3, r7
 801d0a6:	4630      	mov	r0, r6
 801d0a8:	4639      	mov	r1, r7
 801d0aa:	f7e3 fd3f 	bl	8000b2c <__aeabi_dcmpun>
 801d0ae:	2800      	cmp	r0, #0
 801d0b0:	d0e2      	beq.n	801d078 <pow+0x60>
 801d0b2:	f000 ff0d 	bl	801ded0 <__errno>
 801d0b6:	2321      	movs	r3, #33	; 0x21
 801d0b8:	6003      	str	r3, [r0, #0]
 801d0ba:	ecbd 8b02 	vpop	{d8}
 801d0be:	ec47 6b10 	vmov	d0, r6, r7
 801d0c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d0c4:	2200      	movs	r2, #0
 801d0c6:	2300      	movs	r3, #0
 801d0c8:	4630      	mov	r0, r6
 801d0ca:	4639      	mov	r1, r7
 801d0cc:	f7e3 fcfc 	bl	8000ac8 <__aeabi_dcmpeq>
 801d0d0:	2800      	cmp	r0, #0
 801d0d2:	d0f2      	beq.n	801d0ba <pow+0xa2>
 801d0d4:	eeb0 0a48 	vmov.f32	s0, s16
 801d0d8:	eef0 0a68 	vmov.f32	s1, s17
 801d0dc:	f000 fe48 	bl	801dd70 <finite>
 801d0e0:	2800      	cmp	r0, #0
 801d0e2:	d0ea      	beq.n	801d0ba <pow+0xa2>
 801d0e4:	ec45 4b10 	vmov	d0, r4, r5
 801d0e8:	f000 fe42 	bl	801dd70 <finite>
 801d0ec:	e7c3      	b.n	801d076 <pow+0x5e>
 801d0ee:	4f01      	ldr	r7, [pc, #4]	; (801d0f4 <pow+0xdc>)
 801d0f0:	2600      	movs	r6, #0
 801d0f2:	e7e2      	b.n	801d0ba <pow+0xa2>
 801d0f4:	3ff00000 	.word	0x3ff00000

0801d0f8 <sqrtf>:
 801d0f8:	b508      	push	{r3, lr}
 801d0fa:	ed2d 8b02 	vpush	{d8}
 801d0fe:	eeb0 8a40 	vmov.f32	s16, s0
 801d102:	f000 fdf9 	bl	801dcf8 <__ieee754_sqrtf>
 801d106:	eeb4 8a48 	vcmp.f32	s16, s16
 801d10a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d10e:	d60c      	bvs.n	801d12a <sqrtf+0x32>
 801d110:	eddf 8a07 	vldr	s17, [pc, #28]	; 801d130 <sqrtf+0x38>
 801d114:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801d118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d11c:	d505      	bpl.n	801d12a <sqrtf+0x32>
 801d11e:	f000 fed7 	bl	801ded0 <__errno>
 801d122:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801d126:	2321      	movs	r3, #33	; 0x21
 801d128:	6003      	str	r3, [r0, #0]
 801d12a:	ecbd 8b02 	vpop	{d8}
 801d12e:	bd08      	pop	{r3, pc}
	...

0801d138 <__ieee754_pow>:
 801d138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d13c:	ed2d 8b06 	vpush	{d8-d10}
 801d140:	b089      	sub	sp, #36	; 0x24
 801d142:	ed8d 1b00 	vstr	d1, [sp]
 801d146:	e9dd 2900 	ldrd	r2, r9, [sp]
 801d14a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801d14e:	ea58 0102 	orrs.w	r1, r8, r2
 801d152:	ec57 6b10 	vmov	r6, r7, d0
 801d156:	d115      	bne.n	801d184 <__ieee754_pow+0x4c>
 801d158:	19b3      	adds	r3, r6, r6
 801d15a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801d15e:	4152      	adcs	r2, r2
 801d160:	4299      	cmp	r1, r3
 801d162:	4b89      	ldr	r3, [pc, #548]	; (801d388 <__ieee754_pow+0x250>)
 801d164:	4193      	sbcs	r3, r2
 801d166:	f080 84d2 	bcs.w	801db0e <__ieee754_pow+0x9d6>
 801d16a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d16e:	4630      	mov	r0, r6
 801d170:	4639      	mov	r1, r7
 801d172:	f7e3 f88b 	bl	800028c <__adddf3>
 801d176:	ec41 0b10 	vmov	d0, r0, r1
 801d17a:	b009      	add	sp, #36	; 0x24
 801d17c:	ecbd 8b06 	vpop	{d8-d10}
 801d180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d184:	4b81      	ldr	r3, [pc, #516]	; (801d38c <__ieee754_pow+0x254>)
 801d186:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801d18a:	429c      	cmp	r4, r3
 801d18c:	ee10 aa10 	vmov	sl, s0
 801d190:	463d      	mov	r5, r7
 801d192:	dc06      	bgt.n	801d1a2 <__ieee754_pow+0x6a>
 801d194:	d101      	bne.n	801d19a <__ieee754_pow+0x62>
 801d196:	2e00      	cmp	r6, #0
 801d198:	d1e7      	bne.n	801d16a <__ieee754_pow+0x32>
 801d19a:	4598      	cmp	r8, r3
 801d19c:	dc01      	bgt.n	801d1a2 <__ieee754_pow+0x6a>
 801d19e:	d10f      	bne.n	801d1c0 <__ieee754_pow+0x88>
 801d1a0:	b172      	cbz	r2, 801d1c0 <__ieee754_pow+0x88>
 801d1a2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 801d1a6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801d1aa:	ea55 050a 	orrs.w	r5, r5, sl
 801d1ae:	d1dc      	bne.n	801d16a <__ieee754_pow+0x32>
 801d1b0:	e9dd 3200 	ldrd	r3, r2, [sp]
 801d1b4:	18db      	adds	r3, r3, r3
 801d1b6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801d1ba:	4152      	adcs	r2, r2
 801d1bc:	429d      	cmp	r5, r3
 801d1be:	e7d0      	b.n	801d162 <__ieee754_pow+0x2a>
 801d1c0:	2d00      	cmp	r5, #0
 801d1c2:	da3b      	bge.n	801d23c <__ieee754_pow+0x104>
 801d1c4:	4b72      	ldr	r3, [pc, #456]	; (801d390 <__ieee754_pow+0x258>)
 801d1c6:	4598      	cmp	r8, r3
 801d1c8:	dc51      	bgt.n	801d26e <__ieee754_pow+0x136>
 801d1ca:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801d1ce:	4598      	cmp	r8, r3
 801d1d0:	f340 84ac 	ble.w	801db2c <__ieee754_pow+0x9f4>
 801d1d4:	ea4f 5328 	mov.w	r3, r8, asr #20
 801d1d8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801d1dc:	2b14      	cmp	r3, #20
 801d1de:	dd0f      	ble.n	801d200 <__ieee754_pow+0xc8>
 801d1e0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801d1e4:	fa22 f103 	lsr.w	r1, r2, r3
 801d1e8:	fa01 f303 	lsl.w	r3, r1, r3
 801d1ec:	4293      	cmp	r3, r2
 801d1ee:	f040 849d 	bne.w	801db2c <__ieee754_pow+0x9f4>
 801d1f2:	f001 0101 	and.w	r1, r1, #1
 801d1f6:	f1c1 0302 	rsb	r3, r1, #2
 801d1fa:	9304      	str	r3, [sp, #16]
 801d1fc:	b182      	cbz	r2, 801d220 <__ieee754_pow+0xe8>
 801d1fe:	e05f      	b.n	801d2c0 <__ieee754_pow+0x188>
 801d200:	2a00      	cmp	r2, #0
 801d202:	d15b      	bne.n	801d2bc <__ieee754_pow+0x184>
 801d204:	f1c3 0314 	rsb	r3, r3, #20
 801d208:	fa48 f103 	asr.w	r1, r8, r3
 801d20c:	fa01 f303 	lsl.w	r3, r1, r3
 801d210:	4543      	cmp	r3, r8
 801d212:	f040 8488 	bne.w	801db26 <__ieee754_pow+0x9ee>
 801d216:	f001 0101 	and.w	r1, r1, #1
 801d21a:	f1c1 0302 	rsb	r3, r1, #2
 801d21e:	9304      	str	r3, [sp, #16]
 801d220:	4b5c      	ldr	r3, [pc, #368]	; (801d394 <__ieee754_pow+0x25c>)
 801d222:	4598      	cmp	r8, r3
 801d224:	d132      	bne.n	801d28c <__ieee754_pow+0x154>
 801d226:	f1b9 0f00 	cmp.w	r9, #0
 801d22a:	f280 8478 	bge.w	801db1e <__ieee754_pow+0x9e6>
 801d22e:	4959      	ldr	r1, [pc, #356]	; (801d394 <__ieee754_pow+0x25c>)
 801d230:	4632      	mov	r2, r6
 801d232:	463b      	mov	r3, r7
 801d234:	2000      	movs	r0, #0
 801d236:	f7e3 fb09 	bl	800084c <__aeabi_ddiv>
 801d23a:	e79c      	b.n	801d176 <__ieee754_pow+0x3e>
 801d23c:	2300      	movs	r3, #0
 801d23e:	9304      	str	r3, [sp, #16]
 801d240:	2a00      	cmp	r2, #0
 801d242:	d13d      	bne.n	801d2c0 <__ieee754_pow+0x188>
 801d244:	4b51      	ldr	r3, [pc, #324]	; (801d38c <__ieee754_pow+0x254>)
 801d246:	4598      	cmp	r8, r3
 801d248:	d1ea      	bne.n	801d220 <__ieee754_pow+0xe8>
 801d24a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801d24e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801d252:	ea53 030a 	orrs.w	r3, r3, sl
 801d256:	f000 845a 	beq.w	801db0e <__ieee754_pow+0x9d6>
 801d25a:	4b4f      	ldr	r3, [pc, #316]	; (801d398 <__ieee754_pow+0x260>)
 801d25c:	429c      	cmp	r4, r3
 801d25e:	dd08      	ble.n	801d272 <__ieee754_pow+0x13a>
 801d260:	f1b9 0f00 	cmp.w	r9, #0
 801d264:	f2c0 8457 	blt.w	801db16 <__ieee754_pow+0x9de>
 801d268:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d26c:	e783      	b.n	801d176 <__ieee754_pow+0x3e>
 801d26e:	2302      	movs	r3, #2
 801d270:	e7e5      	b.n	801d23e <__ieee754_pow+0x106>
 801d272:	f1b9 0f00 	cmp.w	r9, #0
 801d276:	f04f 0000 	mov.w	r0, #0
 801d27a:	f04f 0100 	mov.w	r1, #0
 801d27e:	f6bf af7a 	bge.w	801d176 <__ieee754_pow+0x3e>
 801d282:	e9dd 0300 	ldrd	r0, r3, [sp]
 801d286:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801d28a:	e774      	b.n	801d176 <__ieee754_pow+0x3e>
 801d28c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801d290:	d106      	bne.n	801d2a0 <__ieee754_pow+0x168>
 801d292:	4632      	mov	r2, r6
 801d294:	463b      	mov	r3, r7
 801d296:	4630      	mov	r0, r6
 801d298:	4639      	mov	r1, r7
 801d29a:	f7e3 f9ad 	bl	80005f8 <__aeabi_dmul>
 801d29e:	e76a      	b.n	801d176 <__ieee754_pow+0x3e>
 801d2a0:	4b3e      	ldr	r3, [pc, #248]	; (801d39c <__ieee754_pow+0x264>)
 801d2a2:	4599      	cmp	r9, r3
 801d2a4:	d10c      	bne.n	801d2c0 <__ieee754_pow+0x188>
 801d2a6:	2d00      	cmp	r5, #0
 801d2a8:	db0a      	blt.n	801d2c0 <__ieee754_pow+0x188>
 801d2aa:	ec47 6b10 	vmov	d0, r6, r7
 801d2ae:	b009      	add	sp, #36	; 0x24
 801d2b0:	ecbd 8b06 	vpop	{d8-d10}
 801d2b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d2b8:	f000 bc6c 	b.w	801db94 <__ieee754_sqrt>
 801d2bc:	2300      	movs	r3, #0
 801d2be:	9304      	str	r3, [sp, #16]
 801d2c0:	ec47 6b10 	vmov	d0, r6, r7
 801d2c4:	f000 fd4b 	bl	801dd5e <fabs>
 801d2c8:	ec51 0b10 	vmov	r0, r1, d0
 801d2cc:	f1ba 0f00 	cmp.w	sl, #0
 801d2d0:	d129      	bne.n	801d326 <__ieee754_pow+0x1ee>
 801d2d2:	b124      	cbz	r4, 801d2de <__ieee754_pow+0x1a6>
 801d2d4:	4b2f      	ldr	r3, [pc, #188]	; (801d394 <__ieee754_pow+0x25c>)
 801d2d6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801d2da:	429a      	cmp	r2, r3
 801d2dc:	d123      	bne.n	801d326 <__ieee754_pow+0x1ee>
 801d2de:	f1b9 0f00 	cmp.w	r9, #0
 801d2e2:	da05      	bge.n	801d2f0 <__ieee754_pow+0x1b8>
 801d2e4:	4602      	mov	r2, r0
 801d2e6:	460b      	mov	r3, r1
 801d2e8:	2000      	movs	r0, #0
 801d2ea:	492a      	ldr	r1, [pc, #168]	; (801d394 <__ieee754_pow+0x25c>)
 801d2ec:	f7e3 faae 	bl	800084c <__aeabi_ddiv>
 801d2f0:	2d00      	cmp	r5, #0
 801d2f2:	f6bf af40 	bge.w	801d176 <__ieee754_pow+0x3e>
 801d2f6:	9b04      	ldr	r3, [sp, #16]
 801d2f8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801d2fc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801d300:	4323      	orrs	r3, r4
 801d302:	d108      	bne.n	801d316 <__ieee754_pow+0x1de>
 801d304:	4602      	mov	r2, r0
 801d306:	460b      	mov	r3, r1
 801d308:	4610      	mov	r0, r2
 801d30a:	4619      	mov	r1, r3
 801d30c:	f7e2 ffbc 	bl	8000288 <__aeabi_dsub>
 801d310:	4602      	mov	r2, r0
 801d312:	460b      	mov	r3, r1
 801d314:	e78f      	b.n	801d236 <__ieee754_pow+0xfe>
 801d316:	9b04      	ldr	r3, [sp, #16]
 801d318:	2b01      	cmp	r3, #1
 801d31a:	f47f af2c 	bne.w	801d176 <__ieee754_pow+0x3e>
 801d31e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801d322:	4619      	mov	r1, r3
 801d324:	e727      	b.n	801d176 <__ieee754_pow+0x3e>
 801d326:	0feb      	lsrs	r3, r5, #31
 801d328:	3b01      	subs	r3, #1
 801d32a:	9306      	str	r3, [sp, #24]
 801d32c:	9a06      	ldr	r2, [sp, #24]
 801d32e:	9b04      	ldr	r3, [sp, #16]
 801d330:	4313      	orrs	r3, r2
 801d332:	d102      	bne.n	801d33a <__ieee754_pow+0x202>
 801d334:	4632      	mov	r2, r6
 801d336:	463b      	mov	r3, r7
 801d338:	e7e6      	b.n	801d308 <__ieee754_pow+0x1d0>
 801d33a:	4b19      	ldr	r3, [pc, #100]	; (801d3a0 <__ieee754_pow+0x268>)
 801d33c:	4598      	cmp	r8, r3
 801d33e:	f340 80fb 	ble.w	801d538 <__ieee754_pow+0x400>
 801d342:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801d346:	4598      	cmp	r8, r3
 801d348:	4b13      	ldr	r3, [pc, #76]	; (801d398 <__ieee754_pow+0x260>)
 801d34a:	dd0c      	ble.n	801d366 <__ieee754_pow+0x22e>
 801d34c:	429c      	cmp	r4, r3
 801d34e:	dc0f      	bgt.n	801d370 <__ieee754_pow+0x238>
 801d350:	f1b9 0f00 	cmp.w	r9, #0
 801d354:	da0f      	bge.n	801d376 <__ieee754_pow+0x23e>
 801d356:	2000      	movs	r0, #0
 801d358:	b009      	add	sp, #36	; 0x24
 801d35a:	ecbd 8b06 	vpop	{d8-d10}
 801d35e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d362:	f000 bcf3 	b.w	801dd4c <__math_oflow>
 801d366:	429c      	cmp	r4, r3
 801d368:	dbf2      	blt.n	801d350 <__ieee754_pow+0x218>
 801d36a:	4b0a      	ldr	r3, [pc, #40]	; (801d394 <__ieee754_pow+0x25c>)
 801d36c:	429c      	cmp	r4, r3
 801d36e:	dd19      	ble.n	801d3a4 <__ieee754_pow+0x26c>
 801d370:	f1b9 0f00 	cmp.w	r9, #0
 801d374:	dcef      	bgt.n	801d356 <__ieee754_pow+0x21e>
 801d376:	2000      	movs	r0, #0
 801d378:	b009      	add	sp, #36	; 0x24
 801d37a:	ecbd 8b06 	vpop	{d8-d10}
 801d37e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d382:	f000 bcda 	b.w	801dd3a <__math_uflow>
 801d386:	bf00      	nop
 801d388:	fff00000 	.word	0xfff00000
 801d38c:	7ff00000 	.word	0x7ff00000
 801d390:	433fffff 	.word	0x433fffff
 801d394:	3ff00000 	.word	0x3ff00000
 801d398:	3fefffff 	.word	0x3fefffff
 801d39c:	3fe00000 	.word	0x3fe00000
 801d3a0:	41e00000 	.word	0x41e00000
 801d3a4:	4b60      	ldr	r3, [pc, #384]	; (801d528 <__ieee754_pow+0x3f0>)
 801d3a6:	2200      	movs	r2, #0
 801d3a8:	f7e2 ff6e 	bl	8000288 <__aeabi_dsub>
 801d3ac:	a354      	add	r3, pc, #336	; (adr r3, 801d500 <__ieee754_pow+0x3c8>)
 801d3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d3b2:	4604      	mov	r4, r0
 801d3b4:	460d      	mov	r5, r1
 801d3b6:	f7e3 f91f 	bl	80005f8 <__aeabi_dmul>
 801d3ba:	a353      	add	r3, pc, #332	; (adr r3, 801d508 <__ieee754_pow+0x3d0>)
 801d3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d3c0:	4606      	mov	r6, r0
 801d3c2:	460f      	mov	r7, r1
 801d3c4:	4620      	mov	r0, r4
 801d3c6:	4629      	mov	r1, r5
 801d3c8:	f7e3 f916 	bl	80005f8 <__aeabi_dmul>
 801d3cc:	4b57      	ldr	r3, [pc, #348]	; (801d52c <__ieee754_pow+0x3f4>)
 801d3ce:	4682      	mov	sl, r0
 801d3d0:	468b      	mov	fp, r1
 801d3d2:	2200      	movs	r2, #0
 801d3d4:	4620      	mov	r0, r4
 801d3d6:	4629      	mov	r1, r5
 801d3d8:	f7e3 f90e 	bl	80005f8 <__aeabi_dmul>
 801d3dc:	4602      	mov	r2, r0
 801d3de:	460b      	mov	r3, r1
 801d3e0:	a14b      	add	r1, pc, #300	; (adr r1, 801d510 <__ieee754_pow+0x3d8>)
 801d3e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d3e6:	f7e2 ff4f 	bl	8000288 <__aeabi_dsub>
 801d3ea:	4622      	mov	r2, r4
 801d3ec:	462b      	mov	r3, r5
 801d3ee:	f7e3 f903 	bl	80005f8 <__aeabi_dmul>
 801d3f2:	4602      	mov	r2, r0
 801d3f4:	460b      	mov	r3, r1
 801d3f6:	2000      	movs	r0, #0
 801d3f8:	494d      	ldr	r1, [pc, #308]	; (801d530 <__ieee754_pow+0x3f8>)
 801d3fa:	f7e2 ff45 	bl	8000288 <__aeabi_dsub>
 801d3fe:	4622      	mov	r2, r4
 801d400:	4680      	mov	r8, r0
 801d402:	4689      	mov	r9, r1
 801d404:	462b      	mov	r3, r5
 801d406:	4620      	mov	r0, r4
 801d408:	4629      	mov	r1, r5
 801d40a:	f7e3 f8f5 	bl	80005f8 <__aeabi_dmul>
 801d40e:	4602      	mov	r2, r0
 801d410:	460b      	mov	r3, r1
 801d412:	4640      	mov	r0, r8
 801d414:	4649      	mov	r1, r9
 801d416:	f7e3 f8ef 	bl	80005f8 <__aeabi_dmul>
 801d41a:	a33f      	add	r3, pc, #252	; (adr r3, 801d518 <__ieee754_pow+0x3e0>)
 801d41c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d420:	f7e3 f8ea 	bl	80005f8 <__aeabi_dmul>
 801d424:	4602      	mov	r2, r0
 801d426:	460b      	mov	r3, r1
 801d428:	4650      	mov	r0, sl
 801d42a:	4659      	mov	r1, fp
 801d42c:	f7e2 ff2c 	bl	8000288 <__aeabi_dsub>
 801d430:	4602      	mov	r2, r0
 801d432:	460b      	mov	r3, r1
 801d434:	4680      	mov	r8, r0
 801d436:	4689      	mov	r9, r1
 801d438:	4630      	mov	r0, r6
 801d43a:	4639      	mov	r1, r7
 801d43c:	f7e2 ff26 	bl	800028c <__adddf3>
 801d440:	2000      	movs	r0, #0
 801d442:	4632      	mov	r2, r6
 801d444:	463b      	mov	r3, r7
 801d446:	4604      	mov	r4, r0
 801d448:	460d      	mov	r5, r1
 801d44a:	f7e2 ff1d 	bl	8000288 <__aeabi_dsub>
 801d44e:	4602      	mov	r2, r0
 801d450:	460b      	mov	r3, r1
 801d452:	4640      	mov	r0, r8
 801d454:	4649      	mov	r1, r9
 801d456:	f7e2 ff17 	bl	8000288 <__aeabi_dsub>
 801d45a:	9b04      	ldr	r3, [sp, #16]
 801d45c:	9a06      	ldr	r2, [sp, #24]
 801d45e:	3b01      	subs	r3, #1
 801d460:	4313      	orrs	r3, r2
 801d462:	4682      	mov	sl, r0
 801d464:	468b      	mov	fp, r1
 801d466:	f040 81e7 	bne.w	801d838 <__ieee754_pow+0x700>
 801d46a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 801d520 <__ieee754_pow+0x3e8>
 801d46e:	eeb0 8a47 	vmov.f32	s16, s14
 801d472:	eef0 8a67 	vmov.f32	s17, s15
 801d476:	e9dd 6700 	ldrd	r6, r7, [sp]
 801d47a:	2600      	movs	r6, #0
 801d47c:	4632      	mov	r2, r6
 801d47e:	463b      	mov	r3, r7
 801d480:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d484:	f7e2 ff00 	bl	8000288 <__aeabi_dsub>
 801d488:	4622      	mov	r2, r4
 801d48a:	462b      	mov	r3, r5
 801d48c:	f7e3 f8b4 	bl	80005f8 <__aeabi_dmul>
 801d490:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d494:	4680      	mov	r8, r0
 801d496:	4689      	mov	r9, r1
 801d498:	4650      	mov	r0, sl
 801d49a:	4659      	mov	r1, fp
 801d49c:	f7e3 f8ac 	bl	80005f8 <__aeabi_dmul>
 801d4a0:	4602      	mov	r2, r0
 801d4a2:	460b      	mov	r3, r1
 801d4a4:	4640      	mov	r0, r8
 801d4a6:	4649      	mov	r1, r9
 801d4a8:	f7e2 fef0 	bl	800028c <__adddf3>
 801d4ac:	4632      	mov	r2, r6
 801d4ae:	463b      	mov	r3, r7
 801d4b0:	4680      	mov	r8, r0
 801d4b2:	4689      	mov	r9, r1
 801d4b4:	4620      	mov	r0, r4
 801d4b6:	4629      	mov	r1, r5
 801d4b8:	f7e3 f89e 	bl	80005f8 <__aeabi_dmul>
 801d4bc:	460b      	mov	r3, r1
 801d4be:	4604      	mov	r4, r0
 801d4c0:	460d      	mov	r5, r1
 801d4c2:	4602      	mov	r2, r0
 801d4c4:	4649      	mov	r1, r9
 801d4c6:	4640      	mov	r0, r8
 801d4c8:	f7e2 fee0 	bl	800028c <__adddf3>
 801d4cc:	4b19      	ldr	r3, [pc, #100]	; (801d534 <__ieee754_pow+0x3fc>)
 801d4ce:	4299      	cmp	r1, r3
 801d4d0:	ec45 4b19 	vmov	d9, r4, r5
 801d4d4:	4606      	mov	r6, r0
 801d4d6:	460f      	mov	r7, r1
 801d4d8:	468b      	mov	fp, r1
 801d4da:	f340 82f1 	ble.w	801dac0 <__ieee754_pow+0x988>
 801d4de:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801d4e2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801d4e6:	4303      	orrs	r3, r0
 801d4e8:	f000 81e4 	beq.w	801d8b4 <__ieee754_pow+0x77c>
 801d4ec:	ec51 0b18 	vmov	r0, r1, d8
 801d4f0:	2200      	movs	r2, #0
 801d4f2:	2300      	movs	r3, #0
 801d4f4:	f7e3 faf2 	bl	8000adc <__aeabi_dcmplt>
 801d4f8:	3800      	subs	r0, #0
 801d4fa:	bf18      	it	ne
 801d4fc:	2001      	movne	r0, #1
 801d4fe:	e72b      	b.n	801d358 <__ieee754_pow+0x220>
 801d500:	60000000 	.word	0x60000000
 801d504:	3ff71547 	.word	0x3ff71547
 801d508:	f85ddf44 	.word	0xf85ddf44
 801d50c:	3e54ae0b 	.word	0x3e54ae0b
 801d510:	55555555 	.word	0x55555555
 801d514:	3fd55555 	.word	0x3fd55555
 801d518:	652b82fe 	.word	0x652b82fe
 801d51c:	3ff71547 	.word	0x3ff71547
 801d520:	00000000 	.word	0x00000000
 801d524:	bff00000 	.word	0xbff00000
 801d528:	3ff00000 	.word	0x3ff00000
 801d52c:	3fd00000 	.word	0x3fd00000
 801d530:	3fe00000 	.word	0x3fe00000
 801d534:	408fffff 	.word	0x408fffff
 801d538:	4bd5      	ldr	r3, [pc, #852]	; (801d890 <__ieee754_pow+0x758>)
 801d53a:	402b      	ands	r3, r5
 801d53c:	2200      	movs	r2, #0
 801d53e:	b92b      	cbnz	r3, 801d54c <__ieee754_pow+0x414>
 801d540:	4bd4      	ldr	r3, [pc, #848]	; (801d894 <__ieee754_pow+0x75c>)
 801d542:	f7e3 f859 	bl	80005f8 <__aeabi_dmul>
 801d546:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801d54a:	460c      	mov	r4, r1
 801d54c:	1523      	asrs	r3, r4, #20
 801d54e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801d552:	4413      	add	r3, r2
 801d554:	9305      	str	r3, [sp, #20]
 801d556:	4bd0      	ldr	r3, [pc, #832]	; (801d898 <__ieee754_pow+0x760>)
 801d558:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801d55c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801d560:	429c      	cmp	r4, r3
 801d562:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801d566:	dd08      	ble.n	801d57a <__ieee754_pow+0x442>
 801d568:	4bcc      	ldr	r3, [pc, #816]	; (801d89c <__ieee754_pow+0x764>)
 801d56a:	429c      	cmp	r4, r3
 801d56c:	f340 8162 	ble.w	801d834 <__ieee754_pow+0x6fc>
 801d570:	9b05      	ldr	r3, [sp, #20]
 801d572:	3301      	adds	r3, #1
 801d574:	9305      	str	r3, [sp, #20]
 801d576:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801d57a:	2400      	movs	r4, #0
 801d57c:	00e3      	lsls	r3, r4, #3
 801d57e:	9307      	str	r3, [sp, #28]
 801d580:	4bc7      	ldr	r3, [pc, #796]	; (801d8a0 <__ieee754_pow+0x768>)
 801d582:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801d586:	ed93 7b00 	vldr	d7, [r3]
 801d58a:	4629      	mov	r1, r5
 801d58c:	ec53 2b17 	vmov	r2, r3, d7
 801d590:	eeb0 9a47 	vmov.f32	s18, s14
 801d594:	eef0 9a67 	vmov.f32	s19, s15
 801d598:	4682      	mov	sl, r0
 801d59a:	f7e2 fe75 	bl	8000288 <__aeabi_dsub>
 801d59e:	4652      	mov	r2, sl
 801d5a0:	4606      	mov	r6, r0
 801d5a2:	460f      	mov	r7, r1
 801d5a4:	462b      	mov	r3, r5
 801d5a6:	ec51 0b19 	vmov	r0, r1, d9
 801d5aa:	f7e2 fe6f 	bl	800028c <__adddf3>
 801d5ae:	4602      	mov	r2, r0
 801d5b0:	460b      	mov	r3, r1
 801d5b2:	2000      	movs	r0, #0
 801d5b4:	49bb      	ldr	r1, [pc, #748]	; (801d8a4 <__ieee754_pow+0x76c>)
 801d5b6:	f7e3 f949 	bl	800084c <__aeabi_ddiv>
 801d5ba:	ec41 0b1a 	vmov	d10, r0, r1
 801d5be:	4602      	mov	r2, r0
 801d5c0:	460b      	mov	r3, r1
 801d5c2:	4630      	mov	r0, r6
 801d5c4:	4639      	mov	r1, r7
 801d5c6:	f7e3 f817 	bl	80005f8 <__aeabi_dmul>
 801d5ca:	2300      	movs	r3, #0
 801d5cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d5d0:	9302      	str	r3, [sp, #8]
 801d5d2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801d5d6:	46ab      	mov	fp, r5
 801d5d8:	106d      	asrs	r5, r5, #1
 801d5da:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801d5de:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801d5e2:	ec41 0b18 	vmov	d8, r0, r1
 801d5e6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801d5ea:	2200      	movs	r2, #0
 801d5ec:	4640      	mov	r0, r8
 801d5ee:	4649      	mov	r1, r9
 801d5f0:	4614      	mov	r4, r2
 801d5f2:	461d      	mov	r5, r3
 801d5f4:	f7e3 f800 	bl	80005f8 <__aeabi_dmul>
 801d5f8:	4602      	mov	r2, r0
 801d5fa:	460b      	mov	r3, r1
 801d5fc:	4630      	mov	r0, r6
 801d5fe:	4639      	mov	r1, r7
 801d600:	f7e2 fe42 	bl	8000288 <__aeabi_dsub>
 801d604:	ec53 2b19 	vmov	r2, r3, d9
 801d608:	4606      	mov	r6, r0
 801d60a:	460f      	mov	r7, r1
 801d60c:	4620      	mov	r0, r4
 801d60e:	4629      	mov	r1, r5
 801d610:	f7e2 fe3a 	bl	8000288 <__aeabi_dsub>
 801d614:	4602      	mov	r2, r0
 801d616:	460b      	mov	r3, r1
 801d618:	4650      	mov	r0, sl
 801d61a:	4659      	mov	r1, fp
 801d61c:	f7e2 fe34 	bl	8000288 <__aeabi_dsub>
 801d620:	4642      	mov	r2, r8
 801d622:	464b      	mov	r3, r9
 801d624:	f7e2 ffe8 	bl	80005f8 <__aeabi_dmul>
 801d628:	4602      	mov	r2, r0
 801d62a:	460b      	mov	r3, r1
 801d62c:	4630      	mov	r0, r6
 801d62e:	4639      	mov	r1, r7
 801d630:	f7e2 fe2a 	bl	8000288 <__aeabi_dsub>
 801d634:	ec53 2b1a 	vmov	r2, r3, d10
 801d638:	f7e2 ffde 	bl	80005f8 <__aeabi_dmul>
 801d63c:	ec53 2b18 	vmov	r2, r3, d8
 801d640:	ec41 0b19 	vmov	d9, r0, r1
 801d644:	ec51 0b18 	vmov	r0, r1, d8
 801d648:	f7e2 ffd6 	bl	80005f8 <__aeabi_dmul>
 801d64c:	a37c      	add	r3, pc, #496	; (adr r3, 801d840 <__ieee754_pow+0x708>)
 801d64e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d652:	4604      	mov	r4, r0
 801d654:	460d      	mov	r5, r1
 801d656:	f7e2 ffcf 	bl	80005f8 <__aeabi_dmul>
 801d65a:	a37b      	add	r3, pc, #492	; (adr r3, 801d848 <__ieee754_pow+0x710>)
 801d65c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d660:	f7e2 fe14 	bl	800028c <__adddf3>
 801d664:	4622      	mov	r2, r4
 801d666:	462b      	mov	r3, r5
 801d668:	f7e2 ffc6 	bl	80005f8 <__aeabi_dmul>
 801d66c:	a378      	add	r3, pc, #480	; (adr r3, 801d850 <__ieee754_pow+0x718>)
 801d66e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d672:	f7e2 fe0b 	bl	800028c <__adddf3>
 801d676:	4622      	mov	r2, r4
 801d678:	462b      	mov	r3, r5
 801d67a:	f7e2 ffbd 	bl	80005f8 <__aeabi_dmul>
 801d67e:	a376      	add	r3, pc, #472	; (adr r3, 801d858 <__ieee754_pow+0x720>)
 801d680:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d684:	f7e2 fe02 	bl	800028c <__adddf3>
 801d688:	4622      	mov	r2, r4
 801d68a:	462b      	mov	r3, r5
 801d68c:	f7e2 ffb4 	bl	80005f8 <__aeabi_dmul>
 801d690:	a373      	add	r3, pc, #460	; (adr r3, 801d860 <__ieee754_pow+0x728>)
 801d692:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d696:	f7e2 fdf9 	bl	800028c <__adddf3>
 801d69a:	4622      	mov	r2, r4
 801d69c:	462b      	mov	r3, r5
 801d69e:	f7e2 ffab 	bl	80005f8 <__aeabi_dmul>
 801d6a2:	a371      	add	r3, pc, #452	; (adr r3, 801d868 <__ieee754_pow+0x730>)
 801d6a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d6a8:	f7e2 fdf0 	bl	800028c <__adddf3>
 801d6ac:	4622      	mov	r2, r4
 801d6ae:	4606      	mov	r6, r0
 801d6b0:	460f      	mov	r7, r1
 801d6b2:	462b      	mov	r3, r5
 801d6b4:	4620      	mov	r0, r4
 801d6b6:	4629      	mov	r1, r5
 801d6b8:	f7e2 ff9e 	bl	80005f8 <__aeabi_dmul>
 801d6bc:	4602      	mov	r2, r0
 801d6be:	460b      	mov	r3, r1
 801d6c0:	4630      	mov	r0, r6
 801d6c2:	4639      	mov	r1, r7
 801d6c4:	f7e2 ff98 	bl	80005f8 <__aeabi_dmul>
 801d6c8:	4642      	mov	r2, r8
 801d6ca:	4604      	mov	r4, r0
 801d6cc:	460d      	mov	r5, r1
 801d6ce:	464b      	mov	r3, r9
 801d6d0:	ec51 0b18 	vmov	r0, r1, d8
 801d6d4:	f7e2 fdda 	bl	800028c <__adddf3>
 801d6d8:	ec53 2b19 	vmov	r2, r3, d9
 801d6dc:	f7e2 ff8c 	bl	80005f8 <__aeabi_dmul>
 801d6e0:	4622      	mov	r2, r4
 801d6e2:	462b      	mov	r3, r5
 801d6e4:	f7e2 fdd2 	bl	800028c <__adddf3>
 801d6e8:	4642      	mov	r2, r8
 801d6ea:	4682      	mov	sl, r0
 801d6ec:	468b      	mov	fp, r1
 801d6ee:	464b      	mov	r3, r9
 801d6f0:	4640      	mov	r0, r8
 801d6f2:	4649      	mov	r1, r9
 801d6f4:	f7e2 ff80 	bl	80005f8 <__aeabi_dmul>
 801d6f8:	4b6b      	ldr	r3, [pc, #428]	; (801d8a8 <__ieee754_pow+0x770>)
 801d6fa:	2200      	movs	r2, #0
 801d6fc:	4606      	mov	r6, r0
 801d6fe:	460f      	mov	r7, r1
 801d700:	f7e2 fdc4 	bl	800028c <__adddf3>
 801d704:	4652      	mov	r2, sl
 801d706:	465b      	mov	r3, fp
 801d708:	f7e2 fdc0 	bl	800028c <__adddf3>
 801d70c:	2000      	movs	r0, #0
 801d70e:	4604      	mov	r4, r0
 801d710:	460d      	mov	r5, r1
 801d712:	4602      	mov	r2, r0
 801d714:	460b      	mov	r3, r1
 801d716:	4640      	mov	r0, r8
 801d718:	4649      	mov	r1, r9
 801d71a:	f7e2 ff6d 	bl	80005f8 <__aeabi_dmul>
 801d71e:	4b62      	ldr	r3, [pc, #392]	; (801d8a8 <__ieee754_pow+0x770>)
 801d720:	4680      	mov	r8, r0
 801d722:	4689      	mov	r9, r1
 801d724:	2200      	movs	r2, #0
 801d726:	4620      	mov	r0, r4
 801d728:	4629      	mov	r1, r5
 801d72a:	f7e2 fdad 	bl	8000288 <__aeabi_dsub>
 801d72e:	4632      	mov	r2, r6
 801d730:	463b      	mov	r3, r7
 801d732:	f7e2 fda9 	bl	8000288 <__aeabi_dsub>
 801d736:	4602      	mov	r2, r0
 801d738:	460b      	mov	r3, r1
 801d73a:	4650      	mov	r0, sl
 801d73c:	4659      	mov	r1, fp
 801d73e:	f7e2 fda3 	bl	8000288 <__aeabi_dsub>
 801d742:	ec53 2b18 	vmov	r2, r3, d8
 801d746:	f7e2 ff57 	bl	80005f8 <__aeabi_dmul>
 801d74a:	4622      	mov	r2, r4
 801d74c:	4606      	mov	r6, r0
 801d74e:	460f      	mov	r7, r1
 801d750:	462b      	mov	r3, r5
 801d752:	ec51 0b19 	vmov	r0, r1, d9
 801d756:	f7e2 ff4f 	bl	80005f8 <__aeabi_dmul>
 801d75a:	4602      	mov	r2, r0
 801d75c:	460b      	mov	r3, r1
 801d75e:	4630      	mov	r0, r6
 801d760:	4639      	mov	r1, r7
 801d762:	f7e2 fd93 	bl	800028c <__adddf3>
 801d766:	4606      	mov	r6, r0
 801d768:	460f      	mov	r7, r1
 801d76a:	4602      	mov	r2, r0
 801d76c:	460b      	mov	r3, r1
 801d76e:	4640      	mov	r0, r8
 801d770:	4649      	mov	r1, r9
 801d772:	f7e2 fd8b 	bl	800028c <__adddf3>
 801d776:	a33e      	add	r3, pc, #248	; (adr r3, 801d870 <__ieee754_pow+0x738>)
 801d778:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d77c:	2000      	movs	r0, #0
 801d77e:	4604      	mov	r4, r0
 801d780:	460d      	mov	r5, r1
 801d782:	f7e2 ff39 	bl	80005f8 <__aeabi_dmul>
 801d786:	4642      	mov	r2, r8
 801d788:	ec41 0b18 	vmov	d8, r0, r1
 801d78c:	464b      	mov	r3, r9
 801d78e:	4620      	mov	r0, r4
 801d790:	4629      	mov	r1, r5
 801d792:	f7e2 fd79 	bl	8000288 <__aeabi_dsub>
 801d796:	4602      	mov	r2, r0
 801d798:	460b      	mov	r3, r1
 801d79a:	4630      	mov	r0, r6
 801d79c:	4639      	mov	r1, r7
 801d79e:	f7e2 fd73 	bl	8000288 <__aeabi_dsub>
 801d7a2:	a335      	add	r3, pc, #212	; (adr r3, 801d878 <__ieee754_pow+0x740>)
 801d7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d7a8:	f7e2 ff26 	bl	80005f8 <__aeabi_dmul>
 801d7ac:	a334      	add	r3, pc, #208	; (adr r3, 801d880 <__ieee754_pow+0x748>)
 801d7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d7b2:	4606      	mov	r6, r0
 801d7b4:	460f      	mov	r7, r1
 801d7b6:	4620      	mov	r0, r4
 801d7b8:	4629      	mov	r1, r5
 801d7ba:	f7e2 ff1d 	bl	80005f8 <__aeabi_dmul>
 801d7be:	4602      	mov	r2, r0
 801d7c0:	460b      	mov	r3, r1
 801d7c2:	4630      	mov	r0, r6
 801d7c4:	4639      	mov	r1, r7
 801d7c6:	f7e2 fd61 	bl	800028c <__adddf3>
 801d7ca:	9a07      	ldr	r2, [sp, #28]
 801d7cc:	4b37      	ldr	r3, [pc, #220]	; (801d8ac <__ieee754_pow+0x774>)
 801d7ce:	4413      	add	r3, r2
 801d7d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d7d4:	f7e2 fd5a 	bl	800028c <__adddf3>
 801d7d8:	4682      	mov	sl, r0
 801d7da:	9805      	ldr	r0, [sp, #20]
 801d7dc:	468b      	mov	fp, r1
 801d7de:	f7e2 fea1 	bl	8000524 <__aeabi_i2d>
 801d7e2:	9a07      	ldr	r2, [sp, #28]
 801d7e4:	4b32      	ldr	r3, [pc, #200]	; (801d8b0 <__ieee754_pow+0x778>)
 801d7e6:	4413      	add	r3, r2
 801d7e8:	e9d3 8900 	ldrd	r8, r9, [r3]
 801d7ec:	4606      	mov	r6, r0
 801d7ee:	460f      	mov	r7, r1
 801d7f0:	4652      	mov	r2, sl
 801d7f2:	465b      	mov	r3, fp
 801d7f4:	ec51 0b18 	vmov	r0, r1, d8
 801d7f8:	f7e2 fd48 	bl	800028c <__adddf3>
 801d7fc:	4642      	mov	r2, r8
 801d7fe:	464b      	mov	r3, r9
 801d800:	f7e2 fd44 	bl	800028c <__adddf3>
 801d804:	4632      	mov	r2, r6
 801d806:	463b      	mov	r3, r7
 801d808:	f7e2 fd40 	bl	800028c <__adddf3>
 801d80c:	2000      	movs	r0, #0
 801d80e:	4632      	mov	r2, r6
 801d810:	463b      	mov	r3, r7
 801d812:	4604      	mov	r4, r0
 801d814:	460d      	mov	r5, r1
 801d816:	f7e2 fd37 	bl	8000288 <__aeabi_dsub>
 801d81a:	4642      	mov	r2, r8
 801d81c:	464b      	mov	r3, r9
 801d81e:	f7e2 fd33 	bl	8000288 <__aeabi_dsub>
 801d822:	ec53 2b18 	vmov	r2, r3, d8
 801d826:	f7e2 fd2f 	bl	8000288 <__aeabi_dsub>
 801d82a:	4602      	mov	r2, r0
 801d82c:	460b      	mov	r3, r1
 801d82e:	4650      	mov	r0, sl
 801d830:	4659      	mov	r1, fp
 801d832:	e610      	b.n	801d456 <__ieee754_pow+0x31e>
 801d834:	2401      	movs	r4, #1
 801d836:	e6a1      	b.n	801d57c <__ieee754_pow+0x444>
 801d838:	ed9f 7b13 	vldr	d7, [pc, #76]	; 801d888 <__ieee754_pow+0x750>
 801d83c:	e617      	b.n	801d46e <__ieee754_pow+0x336>
 801d83e:	bf00      	nop
 801d840:	4a454eef 	.word	0x4a454eef
 801d844:	3fca7e28 	.word	0x3fca7e28
 801d848:	93c9db65 	.word	0x93c9db65
 801d84c:	3fcd864a 	.word	0x3fcd864a
 801d850:	a91d4101 	.word	0xa91d4101
 801d854:	3fd17460 	.word	0x3fd17460
 801d858:	518f264d 	.word	0x518f264d
 801d85c:	3fd55555 	.word	0x3fd55555
 801d860:	db6fabff 	.word	0xdb6fabff
 801d864:	3fdb6db6 	.word	0x3fdb6db6
 801d868:	33333303 	.word	0x33333303
 801d86c:	3fe33333 	.word	0x3fe33333
 801d870:	e0000000 	.word	0xe0000000
 801d874:	3feec709 	.word	0x3feec709
 801d878:	dc3a03fd 	.word	0xdc3a03fd
 801d87c:	3feec709 	.word	0x3feec709
 801d880:	145b01f5 	.word	0x145b01f5
 801d884:	be3e2fe0 	.word	0xbe3e2fe0
 801d888:	00000000 	.word	0x00000000
 801d88c:	3ff00000 	.word	0x3ff00000
 801d890:	7ff00000 	.word	0x7ff00000
 801d894:	43400000 	.word	0x43400000
 801d898:	0003988e 	.word	0x0003988e
 801d89c:	000bb679 	.word	0x000bb679
 801d8a0:	08029f10 	.word	0x08029f10
 801d8a4:	3ff00000 	.word	0x3ff00000
 801d8a8:	40080000 	.word	0x40080000
 801d8ac:	08029f30 	.word	0x08029f30
 801d8b0:	08029f20 	.word	0x08029f20
 801d8b4:	a3b5      	add	r3, pc, #724	; (adr r3, 801db8c <__ieee754_pow+0xa54>)
 801d8b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d8ba:	4640      	mov	r0, r8
 801d8bc:	4649      	mov	r1, r9
 801d8be:	f7e2 fce5 	bl	800028c <__adddf3>
 801d8c2:	4622      	mov	r2, r4
 801d8c4:	ec41 0b1a 	vmov	d10, r0, r1
 801d8c8:	462b      	mov	r3, r5
 801d8ca:	4630      	mov	r0, r6
 801d8cc:	4639      	mov	r1, r7
 801d8ce:	f7e2 fcdb 	bl	8000288 <__aeabi_dsub>
 801d8d2:	4602      	mov	r2, r0
 801d8d4:	460b      	mov	r3, r1
 801d8d6:	ec51 0b1a 	vmov	r0, r1, d10
 801d8da:	f7e3 f91d 	bl	8000b18 <__aeabi_dcmpgt>
 801d8de:	2800      	cmp	r0, #0
 801d8e0:	f47f ae04 	bne.w	801d4ec <__ieee754_pow+0x3b4>
 801d8e4:	4aa4      	ldr	r2, [pc, #656]	; (801db78 <__ieee754_pow+0xa40>)
 801d8e6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801d8ea:	4293      	cmp	r3, r2
 801d8ec:	f340 8108 	ble.w	801db00 <__ieee754_pow+0x9c8>
 801d8f0:	151b      	asrs	r3, r3, #20
 801d8f2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801d8f6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801d8fa:	fa4a f303 	asr.w	r3, sl, r3
 801d8fe:	445b      	add	r3, fp
 801d900:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801d904:	4e9d      	ldr	r6, [pc, #628]	; (801db7c <__ieee754_pow+0xa44>)
 801d906:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801d90a:	4116      	asrs	r6, r2
 801d90c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801d910:	2000      	movs	r0, #0
 801d912:	ea23 0106 	bic.w	r1, r3, r6
 801d916:	f1c2 0214 	rsb	r2, r2, #20
 801d91a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801d91e:	fa4a fa02 	asr.w	sl, sl, r2
 801d922:	f1bb 0f00 	cmp.w	fp, #0
 801d926:	4602      	mov	r2, r0
 801d928:	460b      	mov	r3, r1
 801d92a:	4620      	mov	r0, r4
 801d92c:	4629      	mov	r1, r5
 801d92e:	bfb8      	it	lt
 801d930:	f1ca 0a00 	rsblt	sl, sl, #0
 801d934:	f7e2 fca8 	bl	8000288 <__aeabi_dsub>
 801d938:	ec41 0b19 	vmov	d9, r0, r1
 801d93c:	4642      	mov	r2, r8
 801d93e:	464b      	mov	r3, r9
 801d940:	ec51 0b19 	vmov	r0, r1, d9
 801d944:	f7e2 fca2 	bl	800028c <__adddf3>
 801d948:	a37b      	add	r3, pc, #492	; (adr r3, 801db38 <__ieee754_pow+0xa00>)
 801d94a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d94e:	2000      	movs	r0, #0
 801d950:	4604      	mov	r4, r0
 801d952:	460d      	mov	r5, r1
 801d954:	f7e2 fe50 	bl	80005f8 <__aeabi_dmul>
 801d958:	ec53 2b19 	vmov	r2, r3, d9
 801d95c:	4606      	mov	r6, r0
 801d95e:	460f      	mov	r7, r1
 801d960:	4620      	mov	r0, r4
 801d962:	4629      	mov	r1, r5
 801d964:	f7e2 fc90 	bl	8000288 <__aeabi_dsub>
 801d968:	4602      	mov	r2, r0
 801d96a:	460b      	mov	r3, r1
 801d96c:	4640      	mov	r0, r8
 801d96e:	4649      	mov	r1, r9
 801d970:	f7e2 fc8a 	bl	8000288 <__aeabi_dsub>
 801d974:	a372      	add	r3, pc, #456	; (adr r3, 801db40 <__ieee754_pow+0xa08>)
 801d976:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d97a:	f7e2 fe3d 	bl	80005f8 <__aeabi_dmul>
 801d97e:	a372      	add	r3, pc, #456	; (adr r3, 801db48 <__ieee754_pow+0xa10>)
 801d980:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d984:	4680      	mov	r8, r0
 801d986:	4689      	mov	r9, r1
 801d988:	4620      	mov	r0, r4
 801d98a:	4629      	mov	r1, r5
 801d98c:	f7e2 fe34 	bl	80005f8 <__aeabi_dmul>
 801d990:	4602      	mov	r2, r0
 801d992:	460b      	mov	r3, r1
 801d994:	4640      	mov	r0, r8
 801d996:	4649      	mov	r1, r9
 801d998:	f7e2 fc78 	bl	800028c <__adddf3>
 801d99c:	4604      	mov	r4, r0
 801d99e:	460d      	mov	r5, r1
 801d9a0:	4602      	mov	r2, r0
 801d9a2:	460b      	mov	r3, r1
 801d9a4:	4630      	mov	r0, r6
 801d9a6:	4639      	mov	r1, r7
 801d9a8:	f7e2 fc70 	bl	800028c <__adddf3>
 801d9ac:	4632      	mov	r2, r6
 801d9ae:	463b      	mov	r3, r7
 801d9b0:	4680      	mov	r8, r0
 801d9b2:	4689      	mov	r9, r1
 801d9b4:	f7e2 fc68 	bl	8000288 <__aeabi_dsub>
 801d9b8:	4602      	mov	r2, r0
 801d9ba:	460b      	mov	r3, r1
 801d9bc:	4620      	mov	r0, r4
 801d9be:	4629      	mov	r1, r5
 801d9c0:	f7e2 fc62 	bl	8000288 <__aeabi_dsub>
 801d9c4:	4642      	mov	r2, r8
 801d9c6:	4606      	mov	r6, r0
 801d9c8:	460f      	mov	r7, r1
 801d9ca:	464b      	mov	r3, r9
 801d9cc:	4640      	mov	r0, r8
 801d9ce:	4649      	mov	r1, r9
 801d9d0:	f7e2 fe12 	bl	80005f8 <__aeabi_dmul>
 801d9d4:	a35e      	add	r3, pc, #376	; (adr r3, 801db50 <__ieee754_pow+0xa18>)
 801d9d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d9da:	4604      	mov	r4, r0
 801d9dc:	460d      	mov	r5, r1
 801d9de:	f7e2 fe0b 	bl	80005f8 <__aeabi_dmul>
 801d9e2:	a35d      	add	r3, pc, #372	; (adr r3, 801db58 <__ieee754_pow+0xa20>)
 801d9e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d9e8:	f7e2 fc4e 	bl	8000288 <__aeabi_dsub>
 801d9ec:	4622      	mov	r2, r4
 801d9ee:	462b      	mov	r3, r5
 801d9f0:	f7e2 fe02 	bl	80005f8 <__aeabi_dmul>
 801d9f4:	a35a      	add	r3, pc, #360	; (adr r3, 801db60 <__ieee754_pow+0xa28>)
 801d9f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d9fa:	f7e2 fc47 	bl	800028c <__adddf3>
 801d9fe:	4622      	mov	r2, r4
 801da00:	462b      	mov	r3, r5
 801da02:	f7e2 fdf9 	bl	80005f8 <__aeabi_dmul>
 801da06:	a358      	add	r3, pc, #352	; (adr r3, 801db68 <__ieee754_pow+0xa30>)
 801da08:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da0c:	f7e2 fc3c 	bl	8000288 <__aeabi_dsub>
 801da10:	4622      	mov	r2, r4
 801da12:	462b      	mov	r3, r5
 801da14:	f7e2 fdf0 	bl	80005f8 <__aeabi_dmul>
 801da18:	a355      	add	r3, pc, #340	; (adr r3, 801db70 <__ieee754_pow+0xa38>)
 801da1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da1e:	f7e2 fc35 	bl	800028c <__adddf3>
 801da22:	4622      	mov	r2, r4
 801da24:	462b      	mov	r3, r5
 801da26:	f7e2 fde7 	bl	80005f8 <__aeabi_dmul>
 801da2a:	4602      	mov	r2, r0
 801da2c:	460b      	mov	r3, r1
 801da2e:	4640      	mov	r0, r8
 801da30:	4649      	mov	r1, r9
 801da32:	f7e2 fc29 	bl	8000288 <__aeabi_dsub>
 801da36:	4604      	mov	r4, r0
 801da38:	460d      	mov	r5, r1
 801da3a:	4602      	mov	r2, r0
 801da3c:	460b      	mov	r3, r1
 801da3e:	4640      	mov	r0, r8
 801da40:	4649      	mov	r1, r9
 801da42:	f7e2 fdd9 	bl	80005f8 <__aeabi_dmul>
 801da46:	2200      	movs	r2, #0
 801da48:	ec41 0b19 	vmov	d9, r0, r1
 801da4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801da50:	4620      	mov	r0, r4
 801da52:	4629      	mov	r1, r5
 801da54:	f7e2 fc18 	bl	8000288 <__aeabi_dsub>
 801da58:	4602      	mov	r2, r0
 801da5a:	460b      	mov	r3, r1
 801da5c:	ec51 0b19 	vmov	r0, r1, d9
 801da60:	f7e2 fef4 	bl	800084c <__aeabi_ddiv>
 801da64:	4632      	mov	r2, r6
 801da66:	4604      	mov	r4, r0
 801da68:	460d      	mov	r5, r1
 801da6a:	463b      	mov	r3, r7
 801da6c:	4640      	mov	r0, r8
 801da6e:	4649      	mov	r1, r9
 801da70:	f7e2 fdc2 	bl	80005f8 <__aeabi_dmul>
 801da74:	4632      	mov	r2, r6
 801da76:	463b      	mov	r3, r7
 801da78:	f7e2 fc08 	bl	800028c <__adddf3>
 801da7c:	4602      	mov	r2, r0
 801da7e:	460b      	mov	r3, r1
 801da80:	4620      	mov	r0, r4
 801da82:	4629      	mov	r1, r5
 801da84:	f7e2 fc00 	bl	8000288 <__aeabi_dsub>
 801da88:	4642      	mov	r2, r8
 801da8a:	464b      	mov	r3, r9
 801da8c:	f7e2 fbfc 	bl	8000288 <__aeabi_dsub>
 801da90:	460b      	mov	r3, r1
 801da92:	4602      	mov	r2, r0
 801da94:	493a      	ldr	r1, [pc, #232]	; (801db80 <__ieee754_pow+0xa48>)
 801da96:	2000      	movs	r0, #0
 801da98:	f7e2 fbf6 	bl	8000288 <__aeabi_dsub>
 801da9c:	ec41 0b10 	vmov	d0, r0, r1
 801daa0:	ee10 3a90 	vmov	r3, s1
 801daa4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801daa8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801daac:	da2b      	bge.n	801db06 <__ieee754_pow+0x9ce>
 801daae:	4650      	mov	r0, sl
 801dab0:	f000 f96a 	bl	801dd88 <scalbn>
 801dab4:	ec51 0b10 	vmov	r0, r1, d0
 801dab8:	ec53 2b18 	vmov	r2, r3, d8
 801dabc:	f7ff bbed 	b.w	801d29a <__ieee754_pow+0x162>
 801dac0:	4b30      	ldr	r3, [pc, #192]	; (801db84 <__ieee754_pow+0xa4c>)
 801dac2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801dac6:	429e      	cmp	r6, r3
 801dac8:	f77f af0c 	ble.w	801d8e4 <__ieee754_pow+0x7ac>
 801dacc:	4b2e      	ldr	r3, [pc, #184]	; (801db88 <__ieee754_pow+0xa50>)
 801dace:	440b      	add	r3, r1
 801dad0:	4303      	orrs	r3, r0
 801dad2:	d009      	beq.n	801dae8 <__ieee754_pow+0x9b0>
 801dad4:	ec51 0b18 	vmov	r0, r1, d8
 801dad8:	2200      	movs	r2, #0
 801dada:	2300      	movs	r3, #0
 801dadc:	f7e2 fffe 	bl	8000adc <__aeabi_dcmplt>
 801dae0:	3800      	subs	r0, #0
 801dae2:	bf18      	it	ne
 801dae4:	2001      	movne	r0, #1
 801dae6:	e447      	b.n	801d378 <__ieee754_pow+0x240>
 801dae8:	4622      	mov	r2, r4
 801daea:	462b      	mov	r3, r5
 801daec:	f7e2 fbcc 	bl	8000288 <__aeabi_dsub>
 801daf0:	4642      	mov	r2, r8
 801daf2:	464b      	mov	r3, r9
 801daf4:	f7e3 f806 	bl	8000b04 <__aeabi_dcmpge>
 801daf8:	2800      	cmp	r0, #0
 801dafa:	f43f aef3 	beq.w	801d8e4 <__ieee754_pow+0x7ac>
 801dafe:	e7e9      	b.n	801dad4 <__ieee754_pow+0x99c>
 801db00:	f04f 0a00 	mov.w	sl, #0
 801db04:	e71a      	b.n	801d93c <__ieee754_pow+0x804>
 801db06:	ec51 0b10 	vmov	r0, r1, d0
 801db0a:	4619      	mov	r1, r3
 801db0c:	e7d4      	b.n	801dab8 <__ieee754_pow+0x980>
 801db0e:	491c      	ldr	r1, [pc, #112]	; (801db80 <__ieee754_pow+0xa48>)
 801db10:	2000      	movs	r0, #0
 801db12:	f7ff bb30 	b.w	801d176 <__ieee754_pow+0x3e>
 801db16:	2000      	movs	r0, #0
 801db18:	2100      	movs	r1, #0
 801db1a:	f7ff bb2c 	b.w	801d176 <__ieee754_pow+0x3e>
 801db1e:	4630      	mov	r0, r6
 801db20:	4639      	mov	r1, r7
 801db22:	f7ff bb28 	b.w	801d176 <__ieee754_pow+0x3e>
 801db26:	9204      	str	r2, [sp, #16]
 801db28:	f7ff bb7a 	b.w	801d220 <__ieee754_pow+0xe8>
 801db2c:	2300      	movs	r3, #0
 801db2e:	f7ff bb64 	b.w	801d1fa <__ieee754_pow+0xc2>
 801db32:	bf00      	nop
 801db34:	f3af 8000 	nop.w
 801db38:	00000000 	.word	0x00000000
 801db3c:	3fe62e43 	.word	0x3fe62e43
 801db40:	fefa39ef 	.word	0xfefa39ef
 801db44:	3fe62e42 	.word	0x3fe62e42
 801db48:	0ca86c39 	.word	0x0ca86c39
 801db4c:	be205c61 	.word	0xbe205c61
 801db50:	72bea4d0 	.word	0x72bea4d0
 801db54:	3e663769 	.word	0x3e663769
 801db58:	c5d26bf1 	.word	0xc5d26bf1
 801db5c:	3ebbbd41 	.word	0x3ebbbd41
 801db60:	af25de2c 	.word	0xaf25de2c
 801db64:	3f11566a 	.word	0x3f11566a
 801db68:	16bebd93 	.word	0x16bebd93
 801db6c:	3f66c16c 	.word	0x3f66c16c
 801db70:	5555553e 	.word	0x5555553e
 801db74:	3fc55555 	.word	0x3fc55555
 801db78:	3fe00000 	.word	0x3fe00000
 801db7c:	000fffff 	.word	0x000fffff
 801db80:	3ff00000 	.word	0x3ff00000
 801db84:	4090cbff 	.word	0x4090cbff
 801db88:	3f6f3400 	.word	0x3f6f3400
 801db8c:	652b82fe 	.word	0x652b82fe
 801db90:	3c971547 	.word	0x3c971547

0801db94 <__ieee754_sqrt>:
 801db94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801db98:	ec55 4b10 	vmov	r4, r5, d0
 801db9c:	4e55      	ldr	r6, [pc, #340]	; (801dcf4 <__ieee754_sqrt+0x160>)
 801db9e:	43ae      	bics	r6, r5
 801dba0:	ee10 0a10 	vmov	r0, s0
 801dba4:	ee10 3a10 	vmov	r3, s0
 801dba8:	462a      	mov	r2, r5
 801dbaa:	4629      	mov	r1, r5
 801dbac:	d110      	bne.n	801dbd0 <__ieee754_sqrt+0x3c>
 801dbae:	ee10 2a10 	vmov	r2, s0
 801dbb2:	462b      	mov	r3, r5
 801dbb4:	f7e2 fd20 	bl	80005f8 <__aeabi_dmul>
 801dbb8:	4602      	mov	r2, r0
 801dbba:	460b      	mov	r3, r1
 801dbbc:	4620      	mov	r0, r4
 801dbbe:	4629      	mov	r1, r5
 801dbc0:	f7e2 fb64 	bl	800028c <__adddf3>
 801dbc4:	4604      	mov	r4, r0
 801dbc6:	460d      	mov	r5, r1
 801dbc8:	ec45 4b10 	vmov	d0, r4, r5
 801dbcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dbd0:	2d00      	cmp	r5, #0
 801dbd2:	dc10      	bgt.n	801dbf6 <__ieee754_sqrt+0x62>
 801dbd4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801dbd8:	4330      	orrs	r0, r6
 801dbda:	d0f5      	beq.n	801dbc8 <__ieee754_sqrt+0x34>
 801dbdc:	b15d      	cbz	r5, 801dbf6 <__ieee754_sqrt+0x62>
 801dbde:	ee10 2a10 	vmov	r2, s0
 801dbe2:	462b      	mov	r3, r5
 801dbe4:	ee10 0a10 	vmov	r0, s0
 801dbe8:	f7e2 fb4e 	bl	8000288 <__aeabi_dsub>
 801dbec:	4602      	mov	r2, r0
 801dbee:	460b      	mov	r3, r1
 801dbf0:	f7e2 fe2c 	bl	800084c <__aeabi_ddiv>
 801dbf4:	e7e6      	b.n	801dbc4 <__ieee754_sqrt+0x30>
 801dbf6:	1512      	asrs	r2, r2, #20
 801dbf8:	d074      	beq.n	801dce4 <__ieee754_sqrt+0x150>
 801dbfa:	07d4      	lsls	r4, r2, #31
 801dbfc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801dc00:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 801dc04:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801dc08:	bf5e      	ittt	pl
 801dc0a:	0fda      	lsrpl	r2, r3, #31
 801dc0c:	005b      	lslpl	r3, r3, #1
 801dc0e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 801dc12:	2400      	movs	r4, #0
 801dc14:	0fda      	lsrs	r2, r3, #31
 801dc16:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801dc1a:	107f      	asrs	r7, r7, #1
 801dc1c:	005b      	lsls	r3, r3, #1
 801dc1e:	2516      	movs	r5, #22
 801dc20:	4620      	mov	r0, r4
 801dc22:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801dc26:	1886      	adds	r6, r0, r2
 801dc28:	428e      	cmp	r6, r1
 801dc2a:	bfde      	ittt	le
 801dc2c:	1b89      	suble	r1, r1, r6
 801dc2e:	18b0      	addle	r0, r6, r2
 801dc30:	18a4      	addle	r4, r4, r2
 801dc32:	0049      	lsls	r1, r1, #1
 801dc34:	3d01      	subs	r5, #1
 801dc36:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 801dc3a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801dc3e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801dc42:	d1f0      	bne.n	801dc26 <__ieee754_sqrt+0x92>
 801dc44:	462a      	mov	r2, r5
 801dc46:	f04f 0e20 	mov.w	lr, #32
 801dc4a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801dc4e:	4281      	cmp	r1, r0
 801dc50:	eb06 0c05 	add.w	ip, r6, r5
 801dc54:	dc02      	bgt.n	801dc5c <__ieee754_sqrt+0xc8>
 801dc56:	d113      	bne.n	801dc80 <__ieee754_sqrt+0xec>
 801dc58:	459c      	cmp	ip, r3
 801dc5a:	d811      	bhi.n	801dc80 <__ieee754_sqrt+0xec>
 801dc5c:	f1bc 0f00 	cmp.w	ip, #0
 801dc60:	eb0c 0506 	add.w	r5, ip, r6
 801dc64:	da43      	bge.n	801dcee <__ieee754_sqrt+0x15a>
 801dc66:	2d00      	cmp	r5, #0
 801dc68:	db41      	blt.n	801dcee <__ieee754_sqrt+0x15a>
 801dc6a:	f100 0801 	add.w	r8, r0, #1
 801dc6e:	1a09      	subs	r1, r1, r0
 801dc70:	459c      	cmp	ip, r3
 801dc72:	bf88      	it	hi
 801dc74:	f101 31ff 	addhi.w	r1, r1, #4294967295
 801dc78:	eba3 030c 	sub.w	r3, r3, ip
 801dc7c:	4432      	add	r2, r6
 801dc7e:	4640      	mov	r0, r8
 801dc80:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 801dc84:	f1be 0e01 	subs.w	lr, lr, #1
 801dc88:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 801dc8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801dc90:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801dc94:	d1db      	bne.n	801dc4e <__ieee754_sqrt+0xba>
 801dc96:	430b      	orrs	r3, r1
 801dc98:	d006      	beq.n	801dca8 <__ieee754_sqrt+0x114>
 801dc9a:	1c50      	adds	r0, r2, #1
 801dc9c:	bf13      	iteet	ne
 801dc9e:	3201      	addne	r2, #1
 801dca0:	3401      	addeq	r4, #1
 801dca2:	4672      	moveq	r2, lr
 801dca4:	f022 0201 	bicne.w	r2, r2, #1
 801dca8:	1063      	asrs	r3, r4, #1
 801dcaa:	0852      	lsrs	r2, r2, #1
 801dcac:	07e1      	lsls	r1, r4, #31
 801dcae:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801dcb2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801dcb6:	bf48      	it	mi
 801dcb8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 801dcbc:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 801dcc0:	4614      	mov	r4, r2
 801dcc2:	e781      	b.n	801dbc8 <__ieee754_sqrt+0x34>
 801dcc4:	0ad9      	lsrs	r1, r3, #11
 801dcc6:	3815      	subs	r0, #21
 801dcc8:	055b      	lsls	r3, r3, #21
 801dcca:	2900      	cmp	r1, #0
 801dccc:	d0fa      	beq.n	801dcc4 <__ieee754_sqrt+0x130>
 801dcce:	02cd      	lsls	r5, r1, #11
 801dcd0:	d50a      	bpl.n	801dce8 <__ieee754_sqrt+0x154>
 801dcd2:	f1c2 0420 	rsb	r4, r2, #32
 801dcd6:	fa23 f404 	lsr.w	r4, r3, r4
 801dcda:	1e55      	subs	r5, r2, #1
 801dcdc:	4093      	lsls	r3, r2
 801dcde:	4321      	orrs	r1, r4
 801dce0:	1b42      	subs	r2, r0, r5
 801dce2:	e78a      	b.n	801dbfa <__ieee754_sqrt+0x66>
 801dce4:	4610      	mov	r0, r2
 801dce6:	e7f0      	b.n	801dcca <__ieee754_sqrt+0x136>
 801dce8:	0049      	lsls	r1, r1, #1
 801dcea:	3201      	adds	r2, #1
 801dcec:	e7ef      	b.n	801dcce <__ieee754_sqrt+0x13a>
 801dcee:	4680      	mov	r8, r0
 801dcf0:	e7bd      	b.n	801dc6e <__ieee754_sqrt+0xda>
 801dcf2:	bf00      	nop
 801dcf4:	7ff00000 	.word	0x7ff00000

0801dcf8 <__ieee754_sqrtf>:
 801dcf8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801dcfc:	4770      	bx	lr

0801dcfe <with_errno>:
 801dcfe:	b570      	push	{r4, r5, r6, lr}
 801dd00:	4604      	mov	r4, r0
 801dd02:	460d      	mov	r5, r1
 801dd04:	4616      	mov	r6, r2
 801dd06:	f000 f8e3 	bl	801ded0 <__errno>
 801dd0a:	4629      	mov	r1, r5
 801dd0c:	6006      	str	r6, [r0, #0]
 801dd0e:	4620      	mov	r0, r4
 801dd10:	bd70      	pop	{r4, r5, r6, pc}

0801dd12 <xflow>:
 801dd12:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801dd14:	4614      	mov	r4, r2
 801dd16:	461d      	mov	r5, r3
 801dd18:	b108      	cbz	r0, 801dd1e <xflow+0xc>
 801dd1a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801dd1e:	e9cd 2300 	strd	r2, r3, [sp]
 801dd22:	e9dd 2300 	ldrd	r2, r3, [sp]
 801dd26:	4620      	mov	r0, r4
 801dd28:	4629      	mov	r1, r5
 801dd2a:	f7e2 fc65 	bl	80005f8 <__aeabi_dmul>
 801dd2e:	2222      	movs	r2, #34	; 0x22
 801dd30:	b003      	add	sp, #12
 801dd32:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801dd36:	f7ff bfe2 	b.w	801dcfe <with_errno>

0801dd3a <__math_uflow>:
 801dd3a:	b508      	push	{r3, lr}
 801dd3c:	2200      	movs	r2, #0
 801dd3e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801dd42:	f7ff ffe6 	bl	801dd12 <xflow>
 801dd46:	ec41 0b10 	vmov	d0, r0, r1
 801dd4a:	bd08      	pop	{r3, pc}

0801dd4c <__math_oflow>:
 801dd4c:	b508      	push	{r3, lr}
 801dd4e:	2200      	movs	r2, #0
 801dd50:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801dd54:	f7ff ffdd 	bl	801dd12 <xflow>
 801dd58:	ec41 0b10 	vmov	d0, r0, r1
 801dd5c:	bd08      	pop	{r3, pc}

0801dd5e <fabs>:
 801dd5e:	ec51 0b10 	vmov	r0, r1, d0
 801dd62:	ee10 2a10 	vmov	r2, s0
 801dd66:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801dd6a:	ec43 2b10 	vmov	d0, r2, r3
 801dd6e:	4770      	bx	lr

0801dd70 <finite>:
 801dd70:	b082      	sub	sp, #8
 801dd72:	ed8d 0b00 	vstr	d0, [sp]
 801dd76:	9801      	ldr	r0, [sp, #4]
 801dd78:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801dd7c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801dd80:	0fc0      	lsrs	r0, r0, #31
 801dd82:	b002      	add	sp, #8
 801dd84:	4770      	bx	lr
	...

0801dd88 <scalbn>:
 801dd88:	b570      	push	{r4, r5, r6, lr}
 801dd8a:	ec55 4b10 	vmov	r4, r5, d0
 801dd8e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801dd92:	4606      	mov	r6, r0
 801dd94:	462b      	mov	r3, r5
 801dd96:	b99a      	cbnz	r2, 801ddc0 <scalbn+0x38>
 801dd98:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801dd9c:	4323      	orrs	r3, r4
 801dd9e:	d036      	beq.n	801de0e <scalbn+0x86>
 801dda0:	4b39      	ldr	r3, [pc, #228]	; (801de88 <scalbn+0x100>)
 801dda2:	4629      	mov	r1, r5
 801dda4:	ee10 0a10 	vmov	r0, s0
 801dda8:	2200      	movs	r2, #0
 801ddaa:	f7e2 fc25 	bl	80005f8 <__aeabi_dmul>
 801ddae:	4b37      	ldr	r3, [pc, #220]	; (801de8c <scalbn+0x104>)
 801ddb0:	429e      	cmp	r6, r3
 801ddb2:	4604      	mov	r4, r0
 801ddb4:	460d      	mov	r5, r1
 801ddb6:	da10      	bge.n	801ddda <scalbn+0x52>
 801ddb8:	a32b      	add	r3, pc, #172	; (adr r3, 801de68 <scalbn+0xe0>)
 801ddba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ddbe:	e03a      	b.n	801de36 <scalbn+0xae>
 801ddc0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801ddc4:	428a      	cmp	r2, r1
 801ddc6:	d10c      	bne.n	801dde2 <scalbn+0x5a>
 801ddc8:	ee10 2a10 	vmov	r2, s0
 801ddcc:	4620      	mov	r0, r4
 801ddce:	4629      	mov	r1, r5
 801ddd0:	f7e2 fa5c 	bl	800028c <__adddf3>
 801ddd4:	4604      	mov	r4, r0
 801ddd6:	460d      	mov	r5, r1
 801ddd8:	e019      	b.n	801de0e <scalbn+0x86>
 801ddda:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801ddde:	460b      	mov	r3, r1
 801dde0:	3a36      	subs	r2, #54	; 0x36
 801dde2:	4432      	add	r2, r6
 801dde4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801dde8:	428a      	cmp	r2, r1
 801ddea:	dd08      	ble.n	801ddfe <scalbn+0x76>
 801ddec:	2d00      	cmp	r5, #0
 801ddee:	a120      	add	r1, pc, #128	; (adr r1, 801de70 <scalbn+0xe8>)
 801ddf0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ddf4:	da1c      	bge.n	801de30 <scalbn+0xa8>
 801ddf6:	a120      	add	r1, pc, #128	; (adr r1, 801de78 <scalbn+0xf0>)
 801ddf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ddfc:	e018      	b.n	801de30 <scalbn+0xa8>
 801ddfe:	2a00      	cmp	r2, #0
 801de00:	dd08      	ble.n	801de14 <scalbn+0x8c>
 801de02:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801de06:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801de0a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801de0e:	ec45 4b10 	vmov	d0, r4, r5
 801de12:	bd70      	pop	{r4, r5, r6, pc}
 801de14:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801de18:	da19      	bge.n	801de4e <scalbn+0xc6>
 801de1a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801de1e:	429e      	cmp	r6, r3
 801de20:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801de24:	dd0a      	ble.n	801de3c <scalbn+0xb4>
 801de26:	a112      	add	r1, pc, #72	; (adr r1, 801de70 <scalbn+0xe8>)
 801de28:	e9d1 0100 	ldrd	r0, r1, [r1]
 801de2c:	2b00      	cmp	r3, #0
 801de2e:	d1e2      	bne.n	801ddf6 <scalbn+0x6e>
 801de30:	a30f      	add	r3, pc, #60	; (adr r3, 801de70 <scalbn+0xe8>)
 801de32:	e9d3 2300 	ldrd	r2, r3, [r3]
 801de36:	f7e2 fbdf 	bl	80005f8 <__aeabi_dmul>
 801de3a:	e7cb      	b.n	801ddd4 <scalbn+0x4c>
 801de3c:	a10a      	add	r1, pc, #40	; (adr r1, 801de68 <scalbn+0xe0>)
 801de3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801de42:	2b00      	cmp	r3, #0
 801de44:	d0b8      	beq.n	801ddb8 <scalbn+0x30>
 801de46:	a10e      	add	r1, pc, #56	; (adr r1, 801de80 <scalbn+0xf8>)
 801de48:	e9d1 0100 	ldrd	r0, r1, [r1]
 801de4c:	e7b4      	b.n	801ddb8 <scalbn+0x30>
 801de4e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801de52:	3236      	adds	r2, #54	; 0x36
 801de54:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801de58:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801de5c:	4620      	mov	r0, r4
 801de5e:	4b0c      	ldr	r3, [pc, #48]	; (801de90 <scalbn+0x108>)
 801de60:	2200      	movs	r2, #0
 801de62:	e7e8      	b.n	801de36 <scalbn+0xae>
 801de64:	f3af 8000 	nop.w
 801de68:	c2f8f359 	.word	0xc2f8f359
 801de6c:	01a56e1f 	.word	0x01a56e1f
 801de70:	8800759c 	.word	0x8800759c
 801de74:	7e37e43c 	.word	0x7e37e43c
 801de78:	8800759c 	.word	0x8800759c
 801de7c:	fe37e43c 	.word	0xfe37e43c
 801de80:	c2f8f359 	.word	0xc2f8f359
 801de84:	81a56e1f 	.word	0x81a56e1f
 801de88:	43500000 	.word	0x43500000
 801de8c:	ffff3cb0 	.word	0xffff3cb0
 801de90:	3c900000 	.word	0x3c900000

0801de94 <__assert_func>:
 801de94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801de96:	4614      	mov	r4, r2
 801de98:	461a      	mov	r2, r3
 801de9a:	4b09      	ldr	r3, [pc, #36]	; (801dec0 <__assert_func+0x2c>)
 801de9c:	681b      	ldr	r3, [r3, #0]
 801de9e:	4605      	mov	r5, r0
 801dea0:	68d8      	ldr	r0, [r3, #12]
 801dea2:	b14c      	cbz	r4, 801deb8 <__assert_func+0x24>
 801dea4:	4b07      	ldr	r3, [pc, #28]	; (801dec4 <__assert_func+0x30>)
 801dea6:	9100      	str	r1, [sp, #0]
 801dea8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801deac:	4906      	ldr	r1, [pc, #24]	; (801dec8 <__assert_func+0x34>)
 801deae:	462b      	mov	r3, r5
 801deb0:	f000 f814 	bl	801dedc <fiprintf>
 801deb4:	f000 fc0c 	bl	801e6d0 <abort>
 801deb8:	4b04      	ldr	r3, [pc, #16]	; (801decc <__assert_func+0x38>)
 801deba:	461c      	mov	r4, r3
 801debc:	e7f3      	b.n	801dea6 <__assert_func+0x12>
 801debe:	bf00      	nop
 801dec0:	200001ec 	.word	0x200001ec
 801dec4:	08029f40 	.word	0x08029f40
 801dec8:	08029f4d 	.word	0x08029f4d
 801decc:	08029f7b 	.word	0x08029f7b

0801ded0 <__errno>:
 801ded0:	4b01      	ldr	r3, [pc, #4]	; (801ded8 <__errno+0x8>)
 801ded2:	6818      	ldr	r0, [r3, #0]
 801ded4:	4770      	bx	lr
 801ded6:	bf00      	nop
 801ded8:	200001ec 	.word	0x200001ec

0801dedc <fiprintf>:
 801dedc:	b40e      	push	{r1, r2, r3}
 801dede:	b503      	push	{r0, r1, lr}
 801dee0:	4601      	mov	r1, r0
 801dee2:	ab03      	add	r3, sp, #12
 801dee4:	4805      	ldr	r0, [pc, #20]	; (801defc <fiprintf+0x20>)
 801dee6:	f853 2b04 	ldr.w	r2, [r3], #4
 801deea:	6800      	ldr	r0, [r0, #0]
 801deec:	9301      	str	r3, [sp, #4]
 801deee:	f000 f86b 	bl	801dfc8 <_vfiprintf_r>
 801def2:	b002      	add	sp, #8
 801def4:	f85d eb04 	ldr.w	lr, [sp], #4
 801def8:	b003      	add	sp, #12
 801defa:	4770      	bx	lr
 801defc:	200001ec 	.word	0x200001ec

0801df00 <__libc_init_array>:
 801df00:	b570      	push	{r4, r5, r6, lr}
 801df02:	4d0d      	ldr	r5, [pc, #52]	; (801df38 <__libc_init_array+0x38>)
 801df04:	4c0d      	ldr	r4, [pc, #52]	; (801df3c <__libc_init_array+0x3c>)
 801df06:	1b64      	subs	r4, r4, r5
 801df08:	10a4      	asrs	r4, r4, #2
 801df0a:	2600      	movs	r6, #0
 801df0c:	42a6      	cmp	r6, r4
 801df0e:	d109      	bne.n	801df24 <__libc_init_array+0x24>
 801df10:	4d0b      	ldr	r5, [pc, #44]	; (801df40 <__libc_init_array+0x40>)
 801df12:	4c0c      	ldr	r4, [pc, #48]	; (801df44 <__libc_init_array+0x44>)
 801df14:	f000 fff0 	bl	801eef8 <_init>
 801df18:	1b64      	subs	r4, r4, r5
 801df1a:	10a4      	asrs	r4, r4, #2
 801df1c:	2600      	movs	r6, #0
 801df1e:	42a6      	cmp	r6, r4
 801df20:	d105      	bne.n	801df2e <__libc_init_array+0x2e>
 801df22:	bd70      	pop	{r4, r5, r6, pc}
 801df24:	f855 3b04 	ldr.w	r3, [r5], #4
 801df28:	4798      	blx	r3
 801df2a:	3601      	adds	r6, #1
 801df2c:	e7ee      	b.n	801df0c <__libc_init_array+0xc>
 801df2e:	f855 3b04 	ldr.w	r3, [r5], #4
 801df32:	4798      	blx	r3
 801df34:	3601      	adds	r6, #1
 801df36:	e7f2      	b.n	801df1e <__libc_init_array+0x1e>
 801df38:	0802a01c 	.word	0x0802a01c
 801df3c:	0802a01c 	.word	0x0802a01c
 801df40:	0802a01c 	.word	0x0802a01c
 801df44:	0802a024 	.word	0x0802a024

0801df48 <memcpy>:
 801df48:	440a      	add	r2, r1
 801df4a:	4291      	cmp	r1, r2
 801df4c:	f100 33ff 	add.w	r3, r0, #4294967295
 801df50:	d100      	bne.n	801df54 <memcpy+0xc>
 801df52:	4770      	bx	lr
 801df54:	b510      	push	{r4, lr}
 801df56:	f811 4b01 	ldrb.w	r4, [r1], #1
 801df5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801df5e:	4291      	cmp	r1, r2
 801df60:	d1f9      	bne.n	801df56 <memcpy+0xe>
 801df62:	bd10      	pop	{r4, pc}

0801df64 <memset>:
 801df64:	4402      	add	r2, r0
 801df66:	4603      	mov	r3, r0
 801df68:	4293      	cmp	r3, r2
 801df6a:	d100      	bne.n	801df6e <memset+0xa>
 801df6c:	4770      	bx	lr
 801df6e:	f803 1b01 	strb.w	r1, [r3], #1
 801df72:	e7f9      	b.n	801df68 <memset+0x4>

0801df74 <__sfputc_r>:
 801df74:	6893      	ldr	r3, [r2, #8]
 801df76:	3b01      	subs	r3, #1
 801df78:	2b00      	cmp	r3, #0
 801df7a:	b410      	push	{r4}
 801df7c:	6093      	str	r3, [r2, #8]
 801df7e:	da08      	bge.n	801df92 <__sfputc_r+0x1e>
 801df80:	6994      	ldr	r4, [r2, #24]
 801df82:	42a3      	cmp	r3, r4
 801df84:	db01      	blt.n	801df8a <__sfputc_r+0x16>
 801df86:	290a      	cmp	r1, #10
 801df88:	d103      	bne.n	801df92 <__sfputc_r+0x1e>
 801df8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801df8e:	f000 badf 	b.w	801e550 <__swbuf_r>
 801df92:	6813      	ldr	r3, [r2, #0]
 801df94:	1c58      	adds	r0, r3, #1
 801df96:	6010      	str	r0, [r2, #0]
 801df98:	7019      	strb	r1, [r3, #0]
 801df9a:	4608      	mov	r0, r1
 801df9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801dfa0:	4770      	bx	lr

0801dfa2 <__sfputs_r>:
 801dfa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dfa4:	4606      	mov	r6, r0
 801dfa6:	460f      	mov	r7, r1
 801dfa8:	4614      	mov	r4, r2
 801dfaa:	18d5      	adds	r5, r2, r3
 801dfac:	42ac      	cmp	r4, r5
 801dfae:	d101      	bne.n	801dfb4 <__sfputs_r+0x12>
 801dfb0:	2000      	movs	r0, #0
 801dfb2:	e007      	b.n	801dfc4 <__sfputs_r+0x22>
 801dfb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dfb8:	463a      	mov	r2, r7
 801dfba:	4630      	mov	r0, r6
 801dfbc:	f7ff ffda 	bl	801df74 <__sfputc_r>
 801dfc0:	1c43      	adds	r3, r0, #1
 801dfc2:	d1f3      	bne.n	801dfac <__sfputs_r+0xa>
 801dfc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801dfc8 <_vfiprintf_r>:
 801dfc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dfcc:	460d      	mov	r5, r1
 801dfce:	b09d      	sub	sp, #116	; 0x74
 801dfd0:	4614      	mov	r4, r2
 801dfd2:	4698      	mov	r8, r3
 801dfd4:	4606      	mov	r6, r0
 801dfd6:	b118      	cbz	r0, 801dfe0 <_vfiprintf_r+0x18>
 801dfd8:	6983      	ldr	r3, [r0, #24]
 801dfda:	b90b      	cbnz	r3, 801dfe0 <_vfiprintf_r+0x18>
 801dfdc:	f000 fc9a 	bl	801e914 <__sinit>
 801dfe0:	4b89      	ldr	r3, [pc, #548]	; (801e208 <_vfiprintf_r+0x240>)
 801dfe2:	429d      	cmp	r5, r3
 801dfe4:	d11b      	bne.n	801e01e <_vfiprintf_r+0x56>
 801dfe6:	6875      	ldr	r5, [r6, #4]
 801dfe8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801dfea:	07d9      	lsls	r1, r3, #31
 801dfec:	d405      	bmi.n	801dffa <_vfiprintf_r+0x32>
 801dfee:	89ab      	ldrh	r3, [r5, #12]
 801dff0:	059a      	lsls	r2, r3, #22
 801dff2:	d402      	bmi.n	801dffa <_vfiprintf_r+0x32>
 801dff4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801dff6:	f000 fd2b 	bl	801ea50 <__retarget_lock_acquire_recursive>
 801dffa:	89ab      	ldrh	r3, [r5, #12]
 801dffc:	071b      	lsls	r3, r3, #28
 801dffe:	d501      	bpl.n	801e004 <_vfiprintf_r+0x3c>
 801e000:	692b      	ldr	r3, [r5, #16]
 801e002:	b9eb      	cbnz	r3, 801e040 <_vfiprintf_r+0x78>
 801e004:	4629      	mov	r1, r5
 801e006:	4630      	mov	r0, r6
 801e008:	f000 faf4 	bl	801e5f4 <__swsetup_r>
 801e00c:	b1c0      	cbz	r0, 801e040 <_vfiprintf_r+0x78>
 801e00e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e010:	07dc      	lsls	r4, r3, #31
 801e012:	d50e      	bpl.n	801e032 <_vfiprintf_r+0x6a>
 801e014:	f04f 30ff 	mov.w	r0, #4294967295
 801e018:	b01d      	add	sp, #116	; 0x74
 801e01a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e01e:	4b7b      	ldr	r3, [pc, #492]	; (801e20c <_vfiprintf_r+0x244>)
 801e020:	429d      	cmp	r5, r3
 801e022:	d101      	bne.n	801e028 <_vfiprintf_r+0x60>
 801e024:	68b5      	ldr	r5, [r6, #8]
 801e026:	e7df      	b.n	801dfe8 <_vfiprintf_r+0x20>
 801e028:	4b79      	ldr	r3, [pc, #484]	; (801e210 <_vfiprintf_r+0x248>)
 801e02a:	429d      	cmp	r5, r3
 801e02c:	bf08      	it	eq
 801e02e:	68f5      	ldreq	r5, [r6, #12]
 801e030:	e7da      	b.n	801dfe8 <_vfiprintf_r+0x20>
 801e032:	89ab      	ldrh	r3, [r5, #12]
 801e034:	0598      	lsls	r0, r3, #22
 801e036:	d4ed      	bmi.n	801e014 <_vfiprintf_r+0x4c>
 801e038:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e03a:	f000 fd0a 	bl	801ea52 <__retarget_lock_release_recursive>
 801e03e:	e7e9      	b.n	801e014 <_vfiprintf_r+0x4c>
 801e040:	2300      	movs	r3, #0
 801e042:	9309      	str	r3, [sp, #36]	; 0x24
 801e044:	2320      	movs	r3, #32
 801e046:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e04a:	f8cd 800c 	str.w	r8, [sp, #12]
 801e04e:	2330      	movs	r3, #48	; 0x30
 801e050:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801e214 <_vfiprintf_r+0x24c>
 801e054:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e058:	f04f 0901 	mov.w	r9, #1
 801e05c:	4623      	mov	r3, r4
 801e05e:	469a      	mov	sl, r3
 801e060:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e064:	b10a      	cbz	r2, 801e06a <_vfiprintf_r+0xa2>
 801e066:	2a25      	cmp	r2, #37	; 0x25
 801e068:	d1f9      	bne.n	801e05e <_vfiprintf_r+0x96>
 801e06a:	ebba 0b04 	subs.w	fp, sl, r4
 801e06e:	d00b      	beq.n	801e088 <_vfiprintf_r+0xc0>
 801e070:	465b      	mov	r3, fp
 801e072:	4622      	mov	r2, r4
 801e074:	4629      	mov	r1, r5
 801e076:	4630      	mov	r0, r6
 801e078:	f7ff ff93 	bl	801dfa2 <__sfputs_r>
 801e07c:	3001      	adds	r0, #1
 801e07e:	f000 80aa 	beq.w	801e1d6 <_vfiprintf_r+0x20e>
 801e082:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e084:	445a      	add	r2, fp
 801e086:	9209      	str	r2, [sp, #36]	; 0x24
 801e088:	f89a 3000 	ldrb.w	r3, [sl]
 801e08c:	2b00      	cmp	r3, #0
 801e08e:	f000 80a2 	beq.w	801e1d6 <_vfiprintf_r+0x20e>
 801e092:	2300      	movs	r3, #0
 801e094:	f04f 32ff 	mov.w	r2, #4294967295
 801e098:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e09c:	f10a 0a01 	add.w	sl, sl, #1
 801e0a0:	9304      	str	r3, [sp, #16]
 801e0a2:	9307      	str	r3, [sp, #28]
 801e0a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e0a8:	931a      	str	r3, [sp, #104]	; 0x68
 801e0aa:	4654      	mov	r4, sl
 801e0ac:	2205      	movs	r2, #5
 801e0ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e0b2:	4858      	ldr	r0, [pc, #352]	; (801e214 <_vfiprintf_r+0x24c>)
 801e0b4:	f7e2 f894 	bl	80001e0 <memchr>
 801e0b8:	9a04      	ldr	r2, [sp, #16]
 801e0ba:	b9d8      	cbnz	r0, 801e0f4 <_vfiprintf_r+0x12c>
 801e0bc:	06d1      	lsls	r1, r2, #27
 801e0be:	bf44      	itt	mi
 801e0c0:	2320      	movmi	r3, #32
 801e0c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e0c6:	0713      	lsls	r3, r2, #28
 801e0c8:	bf44      	itt	mi
 801e0ca:	232b      	movmi	r3, #43	; 0x2b
 801e0cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e0d0:	f89a 3000 	ldrb.w	r3, [sl]
 801e0d4:	2b2a      	cmp	r3, #42	; 0x2a
 801e0d6:	d015      	beq.n	801e104 <_vfiprintf_r+0x13c>
 801e0d8:	9a07      	ldr	r2, [sp, #28]
 801e0da:	4654      	mov	r4, sl
 801e0dc:	2000      	movs	r0, #0
 801e0de:	f04f 0c0a 	mov.w	ip, #10
 801e0e2:	4621      	mov	r1, r4
 801e0e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e0e8:	3b30      	subs	r3, #48	; 0x30
 801e0ea:	2b09      	cmp	r3, #9
 801e0ec:	d94e      	bls.n	801e18c <_vfiprintf_r+0x1c4>
 801e0ee:	b1b0      	cbz	r0, 801e11e <_vfiprintf_r+0x156>
 801e0f0:	9207      	str	r2, [sp, #28]
 801e0f2:	e014      	b.n	801e11e <_vfiprintf_r+0x156>
 801e0f4:	eba0 0308 	sub.w	r3, r0, r8
 801e0f8:	fa09 f303 	lsl.w	r3, r9, r3
 801e0fc:	4313      	orrs	r3, r2
 801e0fe:	9304      	str	r3, [sp, #16]
 801e100:	46a2      	mov	sl, r4
 801e102:	e7d2      	b.n	801e0aa <_vfiprintf_r+0xe2>
 801e104:	9b03      	ldr	r3, [sp, #12]
 801e106:	1d19      	adds	r1, r3, #4
 801e108:	681b      	ldr	r3, [r3, #0]
 801e10a:	9103      	str	r1, [sp, #12]
 801e10c:	2b00      	cmp	r3, #0
 801e10e:	bfbb      	ittet	lt
 801e110:	425b      	neglt	r3, r3
 801e112:	f042 0202 	orrlt.w	r2, r2, #2
 801e116:	9307      	strge	r3, [sp, #28]
 801e118:	9307      	strlt	r3, [sp, #28]
 801e11a:	bfb8      	it	lt
 801e11c:	9204      	strlt	r2, [sp, #16]
 801e11e:	7823      	ldrb	r3, [r4, #0]
 801e120:	2b2e      	cmp	r3, #46	; 0x2e
 801e122:	d10c      	bne.n	801e13e <_vfiprintf_r+0x176>
 801e124:	7863      	ldrb	r3, [r4, #1]
 801e126:	2b2a      	cmp	r3, #42	; 0x2a
 801e128:	d135      	bne.n	801e196 <_vfiprintf_r+0x1ce>
 801e12a:	9b03      	ldr	r3, [sp, #12]
 801e12c:	1d1a      	adds	r2, r3, #4
 801e12e:	681b      	ldr	r3, [r3, #0]
 801e130:	9203      	str	r2, [sp, #12]
 801e132:	2b00      	cmp	r3, #0
 801e134:	bfb8      	it	lt
 801e136:	f04f 33ff 	movlt.w	r3, #4294967295
 801e13a:	3402      	adds	r4, #2
 801e13c:	9305      	str	r3, [sp, #20]
 801e13e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801e224 <_vfiprintf_r+0x25c>
 801e142:	7821      	ldrb	r1, [r4, #0]
 801e144:	2203      	movs	r2, #3
 801e146:	4650      	mov	r0, sl
 801e148:	f7e2 f84a 	bl	80001e0 <memchr>
 801e14c:	b140      	cbz	r0, 801e160 <_vfiprintf_r+0x198>
 801e14e:	2340      	movs	r3, #64	; 0x40
 801e150:	eba0 000a 	sub.w	r0, r0, sl
 801e154:	fa03 f000 	lsl.w	r0, r3, r0
 801e158:	9b04      	ldr	r3, [sp, #16]
 801e15a:	4303      	orrs	r3, r0
 801e15c:	3401      	adds	r4, #1
 801e15e:	9304      	str	r3, [sp, #16]
 801e160:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e164:	482c      	ldr	r0, [pc, #176]	; (801e218 <_vfiprintf_r+0x250>)
 801e166:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e16a:	2206      	movs	r2, #6
 801e16c:	f7e2 f838 	bl	80001e0 <memchr>
 801e170:	2800      	cmp	r0, #0
 801e172:	d03f      	beq.n	801e1f4 <_vfiprintf_r+0x22c>
 801e174:	4b29      	ldr	r3, [pc, #164]	; (801e21c <_vfiprintf_r+0x254>)
 801e176:	bb1b      	cbnz	r3, 801e1c0 <_vfiprintf_r+0x1f8>
 801e178:	9b03      	ldr	r3, [sp, #12]
 801e17a:	3307      	adds	r3, #7
 801e17c:	f023 0307 	bic.w	r3, r3, #7
 801e180:	3308      	adds	r3, #8
 801e182:	9303      	str	r3, [sp, #12]
 801e184:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e186:	443b      	add	r3, r7
 801e188:	9309      	str	r3, [sp, #36]	; 0x24
 801e18a:	e767      	b.n	801e05c <_vfiprintf_r+0x94>
 801e18c:	fb0c 3202 	mla	r2, ip, r2, r3
 801e190:	460c      	mov	r4, r1
 801e192:	2001      	movs	r0, #1
 801e194:	e7a5      	b.n	801e0e2 <_vfiprintf_r+0x11a>
 801e196:	2300      	movs	r3, #0
 801e198:	3401      	adds	r4, #1
 801e19a:	9305      	str	r3, [sp, #20]
 801e19c:	4619      	mov	r1, r3
 801e19e:	f04f 0c0a 	mov.w	ip, #10
 801e1a2:	4620      	mov	r0, r4
 801e1a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e1a8:	3a30      	subs	r2, #48	; 0x30
 801e1aa:	2a09      	cmp	r2, #9
 801e1ac:	d903      	bls.n	801e1b6 <_vfiprintf_r+0x1ee>
 801e1ae:	2b00      	cmp	r3, #0
 801e1b0:	d0c5      	beq.n	801e13e <_vfiprintf_r+0x176>
 801e1b2:	9105      	str	r1, [sp, #20]
 801e1b4:	e7c3      	b.n	801e13e <_vfiprintf_r+0x176>
 801e1b6:	fb0c 2101 	mla	r1, ip, r1, r2
 801e1ba:	4604      	mov	r4, r0
 801e1bc:	2301      	movs	r3, #1
 801e1be:	e7f0      	b.n	801e1a2 <_vfiprintf_r+0x1da>
 801e1c0:	ab03      	add	r3, sp, #12
 801e1c2:	9300      	str	r3, [sp, #0]
 801e1c4:	462a      	mov	r2, r5
 801e1c6:	4b16      	ldr	r3, [pc, #88]	; (801e220 <_vfiprintf_r+0x258>)
 801e1c8:	a904      	add	r1, sp, #16
 801e1ca:	4630      	mov	r0, r6
 801e1cc:	f3af 8000 	nop.w
 801e1d0:	4607      	mov	r7, r0
 801e1d2:	1c78      	adds	r0, r7, #1
 801e1d4:	d1d6      	bne.n	801e184 <_vfiprintf_r+0x1bc>
 801e1d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e1d8:	07d9      	lsls	r1, r3, #31
 801e1da:	d405      	bmi.n	801e1e8 <_vfiprintf_r+0x220>
 801e1dc:	89ab      	ldrh	r3, [r5, #12]
 801e1de:	059a      	lsls	r2, r3, #22
 801e1e0:	d402      	bmi.n	801e1e8 <_vfiprintf_r+0x220>
 801e1e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e1e4:	f000 fc35 	bl	801ea52 <__retarget_lock_release_recursive>
 801e1e8:	89ab      	ldrh	r3, [r5, #12]
 801e1ea:	065b      	lsls	r3, r3, #25
 801e1ec:	f53f af12 	bmi.w	801e014 <_vfiprintf_r+0x4c>
 801e1f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e1f2:	e711      	b.n	801e018 <_vfiprintf_r+0x50>
 801e1f4:	ab03      	add	r3, sp, #12
 801e1f6:	9300      	str	r3, [sp, #0]
 801e1f8:	462a      	mov	r2, r5
 801e1fa:	4b09      	ldr	r3, [pc, #36]	; (801e220 <_vfiprintf_r+0x258>)
 801e1fc:	a904      	add	r1, sp, #16
 801e1fe:	4630      	mov	r0, r6
 801e200:	f000 f880 	bl	801e304 <_printf_i>
 801e204:	e7e4      	b.n	801e1d0 <_vfiprintf_r+0x208>
 801e206:	bf00      	nop
 801e208:	08029fd4 	.word	0x08029fd4
 801e20c:	08029ff4 	.word	0x08029ff4
 801e210:	08029fb4 	.word	0x08029fb4
 801e214:	08029f80 	.word	0x08029f80
 801e218:	08029f8a 	.word	0x08029f8a
 801e21c:	00000000 	.word	0x00000000
 801e220:	0801dfa3 	.word	0x0801dfa3
 801e224:	08029f86 	.word	0x08029f86

0801e228 <_printf_common>:
 801e228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e22c:	4616      	mov	r6, r2
 801e22e:	4699      	mov	r9, r3
 801e230:	688a      	ldr	r2, [r1, #8]
 801e232:	690b      	ldr	r3, [r1, #16]
 801e234:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801e238:	4293      	cmp	r3, r2
 801e23a:	bfb8      	it	lt
 801e23c:	4613      	movlt	r3, r2
 801e23e:	6033      	str	r3, [r6, #0]
 801e240:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801e244:	4607      	mov	r7, r0
 801e246:	460c      	mov	r4, r1
 801e248:	b10a      	cbz	r2, 801e24e <_printf_common+0x26>
 801e24a:	3301      	adds	r3, #1
 801e24c:	6033      	str	r3, [r6, #0]
 801e24e:	6823      	ldr	r3, [r4, #0]
 801e250:	0699      	lsls	r1, r3, #26
 801e252:	bf42      	ittt	mi
 801e254:	6833      	ldrmi	r3, [r6, #0]
 801e256:	3302      	addmi	r3, #2
 801e258:	6033      	strmi	r3, [r6, #0]
 801e25a:	6825      	ldr	r5, [r4, #0]
 801e25c:	f015 0506 	ands.w	r5, r5, #6
 801e260:	d106      	bne.n	801e270 <_printf_common+0x48>
 801e262:	f104 0a19 	add.w	sl, r4, #25
 801e266:	68e3      	ldr	r3, [r4, #12]
 801e268:	6832      	ldr	r2, [r6, #0]
 801e26a:	1a9b      	subs	r3, r3, r2
 801e26c:	42ab      	cmp	r3, r5
 801e26e:	dc26      	bgt.n	801e2be <_printf_common+0x96>
 801e270:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801e274:	1e13      	subs	r3, r2, #0
 801e276:	6822      	ldr	r2, [r4, #0]
 801e278:	bf18      	it	ne
 801e27a:	2301      	movne	r3, #1
 801e27c:	0692      	lsls	r2, r2, #26
 801e27e:	d42b      	bmi.n	801e2d8 <_printf_common+0xb0>
 801e280:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801e284:	4649      	mov	r1, r9
 801e286:	4638      	mov	r0, r7
 801e288:	47c0      	blx	r8
 801e28a:	3001      	adds	r0, #1
 801e28c:	d01e      	beq.n	801e2cc <_printf_common+0xa4>
 801e28e:	6823      	ldr	r3, [r4, #0]
 801e290:	68e5      	ldr	r5, [r4, #12]
 801e292:	6832      	ldr	r2, [r6, #0]
 801e294:	f003 0306 	and.w	r3, r3, #6
 801e298:	2b04      	cmp	r3, #4
 801e29a:	bf08      	it	eq
 801e29c:	1aad      	subeq	r5, r5, r2
 801e29e:	68a3      	ldr	r3, [r4, #8]
 801e2a0:	6922      	ldr	r2, [r4, #16]
 801e2a2:	bf0c      	ite	eq
 801e2a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801e2a8:	2500      	movne	r5, #0
 801e2aa:	4293      	cmp	r3, r2
 801e2ac:	bfc4      	itt	gt
 801e2ae:	1a9b      	subgt	r3, r3, r2
 801e2b0:	18ed      	addgt	r5, r5, r3
 801e2b2:	2600      	movs	r6, #0
 801e2b4:	341a      	adds	r4, #26
 801e2b6:	42b5      	cmp	r5, r6
 801e2b8:	d11a      	bne.n	801e2f0 <_printf_common+0xc8>
 801e2ba:	2000      	movs	r0, #0
 801e2bc:	e008      	b.n	801e2d0 <_printf_common+0xa8>
 801e2be:	2301      	movs	r3, #1
 801e2c0:	4652      	mov	r2, sl
 801e2c2:	4649      	mov	r1, r9
 801e2c4:	4638      	mov	r0, r7
 801e2c6:	47c0      	blx	r8
 801e2c8:	3001      	adds	r0, #1
 801e2ca:	d103      	bne.n	801e2d4 <_printf_common+0xac>
 801e2cc:	f04f 30ff 	mov.w	r0, #4294967295
 801e2d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e2d4:	3501      	adds	r5, #1
 801e2d6:	e7c6      	b.n	801e266 <_printf_common+0x3e>
 801e2d8:	18e1      	adds	r1, r4, r3
 801e2da:	1c5a      	adds	r2, r3, #1
 801e2dc:	2030      	movs	r0, #48	; 0x30
 801e2de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801e2e2:	4422      	add	r2, r4
 801e2e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801e2e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801e2ec:	3302      	adds	r3, #2
 801e2ee:	e7c7      	b.n	801e280 <_printf_common+0x58>
 801e2f0:	2301      	movs	r3, #1
 801e2f2:	4622      	mov	r2, r4
 801e2f4:	4649      	mov	r1, r9
 801e2f6:	4638      	mov	r0, r7
 801e2f8:	47c0      	blx	r8
 801e2fa:	3001      	adds	r0, #1
 801e2fc:	d0e6      	beq.n	801e2cc <_printf_common+0xa4>
 801e2fe:	3601      	adds	r6, #1
 801e300:	e7d9      	b.n	801e2b6 <_printf_common+0x8e>
	...

0801e304 <_printf_i>:
 801e304:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e308:	7e0f      	ldrb	r7, [r1, #24]
 801e30a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801e30c:	2f78      	cmp	r7, #120	; 0x78
 801e30e:	4691      	mov	r9, r2
 801e310:	4680      	mov	r8, r0
 801e312:	460c      	mov	r4, r1
 801e314:	469a      	mov	sl, r3
 801e316:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801e31a:	d807      	bhi.n	801e32c <_printf_i+0x28>
 801e31c:	2f62      	cmp	r7, #98	; 0x62
 801e31e:	d80a      	bhi.n	801e336 <_printf_i+0x32>
 801e320:	2f00      	cmp	r7, #0
 801e322:	f000 80d8 	beq.w	801e4d6 <_printf_i+0x1d2>
 801e326:	2f58      	cmp	r7, #88	; 0x58
 801e328:	f000 80a3 	beq.w	801e472 <_printf_i+0x16e>
 801e32c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801e330:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801e334:	e03a      	b.n	801e3ac <_printf_i+0xa8>
 801e336:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801e33a:	2b15      	cmp	r3, #21
 801e33c:	d8f6      	bhi.n	801e32c <_printf_i+0x28>
 801e33e:	a101      	add	r1, pc, #4	; (adr r1, 801e344 <_printf_i+0x40>)
 801e340:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801e344:	0801e39d 	.word	0x0801e39d
 801e348:	0801e3b1 	.word	0x0801e3b1
 801e34c:	0801e32d 	.word	0x0801e32d
 801e350:	0801e32d 	.word	0x0801e32d
 801e354:	0801e32d 	.word	0x0801e32d
 801e358:	0801e32d 	.word	0x0801e32d
 801e35c:	0801e3b1 	.word	0x0801e3b1
 801e360:	0801e32d 	.word	0x0801e32d
 801e364:	0801e32d 	.word	0x0801e32d
 801e368:	0801e32d 	.word	0x0801e32d
 801e36c:	0801e32d 	.word	0x0801e32d
 801e370:	0801e4bd 	.word	0x0801e4bd
 801e374:	0801e3e1 	.word	0x0801e3e1
 801e378:	0801e49f 	.word	0x0801e49f
 801e37c:	0801e32d 	.word	0x0801e32d
 801e380:	0801e32d 	.word	0x0801e32d
 801e384:	0801e4df 	.word	0x0801e4df
 801e388:	0801e32d 	.word	0x0801e32d
 801e38c:	0801e3e1 	.word	0x0801e3e1
 801e390:	0801e32d 	.word	0x0801e32d
 801e394:	0801e32d 	.word	0x0801e32d
 801e398:	0801e4a7 	.word	0x0801e4a7
 801e39c:	682b      	ldr	r3, [r5, #0]
 801e39e:	1d1a      	adds	r2, r3, #4
 801e3a0:	681b      	ldr	r3, [r3, #0]
 801e3a2:	602a      	str	r2, [r5, #0]
 801e3a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801e3a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801e3ac:	2301      	movs	r3, #1
 801e3ae:	e0a3      	b.n	801e4f8 <_printf_i+0x1f4>
 801e3b0:	6820      	ldr	r0, [r4, #0]
 801e3b2:	6829      	ldr	r1, [r5, #0]
 801e3b4:	0606      	lsls	r6, r0, #24
 801e3b6:	f101 0304 	add.w	r3, r1, #4
 801e3ba:	d50a      	bpl.n	801e3d2 <_printf_i+0xce>
 801e3bc:	680e      	ldr	r6, [r1, #0]
 801e3be:	602b      	str	r3, [r5, #0]
 801e3c0:	2e00      	cmp	r6, #0
 801e3c2:	da03      	bge.n	801e3cc <_printf_i+0xc8>
 801e3c4:	232d      	movs	r3, #45	; 0x2d
 801e3c6:	4276      	negs	r6, r6
 801e3c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e3cc:	485e      	ldr	r0, [pc, #376]	; (801e548 <_printf_i+0x244>)
 801e3ce:	230a      	movs	r3, #10
 801e3d0:	e019      	b.n	801e406 <_printf_i+0x102>
 801e3d2:	680e      	ldr	r6, [r1, #0]
 801e3d4:	602b      	str	r3, [r5, #0]
 801e3d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 801e3da:	bf18      	it	ne
 801e3dc:	b236      	sxthne	r6, r6
 801e3de:	e7ef      	b.n	801e3c0 <_printf_i+0xbc>
 801e3e0:	682b      	ldr	r3, [r5, #0]
 801e3e2:	6820      	ldr	r0, [r4, #0]
 801e3e4:	1d19      	adds	r1, r3, #4
 801e3e6:	6029      	str	r1, [r5, #0]
 801e3e8:	0601      	lsls	r1, r0, #24
 801e3ea:	d501      	bpl.n	801e3f0 <_printf_i+0xec>
 801e3ec:	681e      	ldr	r6, [r3, #0]
 801e3ee:	e002      	b.n	801e3f6 <_printf_i+0xf2>
 801e3f0:	0646      	lsls	r6, r0, #25
 801e3f2:	d5fb      	bpl.n	801e3ec <_printf_i+0xe8>
 801e3f4:	881e      	ldrh	r6, [r3, #0]
 801e3f6:	4854      	ldr	r0, [pc, #336]	; (801e548 <_printf_i+0x244>)
 801e3f8:	2f6f      	cmp	r7, #111	; 0x6f
 801e3fa:	bf0c      	ite	eq
 801e3fc:	2308      	moveq	r3, #8
 801e3fe:	230a      	movne	r3, #10
 801e400:	2100      	movs	r1, #0
 801e402:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801e406:	6865      	ldr	r5, [r4, #4]
 801e408:	60a5      	str	r5, [r4, #8]
 801e40a:	2d00      	cmp	r5, #0
 801e40c:	bfa2      	ittt	ge
 801e40e:	6821      	ldrge	r1, [r4, #0]
 801e410:	f021 0104 	bicge.w	r1, r1, #4
 801e414:	6021      	strge	r1, [r4, #0]
 801e416:	b90e      	cbnz	r6, 801e41c <_printf_i+0x118>
 801e418:	2d00      	cmp	r5, #0
 801e41a:	d04d      	beq.n	801e4b8 <_printf_i+0x1b4>
 801e41c:	4615      	mov	r5, r2
 801e41e:	fbb6 f1f3 	udiv	r1, r6, r3
 801e422:	fb03 6711 	mls	r7, r3, r1, r6
 801e426:	5dc7      	ldrb	r7, [r0, r7]
 801e428:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801e42c:	4637      	mov	r7, r6
 801e42e:	42bb      	cmp	r3, r7
 801e430:	460e      	mov	r6, r1
 801e432:	d9f4      	bls.n	801e41e <_printf_i+0x11a>
 801e434:	2b08      	cmp	r3, #8
 801e436:	d10b      	bne.n	801e450 <_printf_i+0x14c>
 801e438:	6823      	ldr	r3, [r4, #0]
 801e43a:	07de      	lsls	r6, r3, #31
 801e43c:	d508      	bpl.n	801e450 <_printf_i+0x14c>
 801e43e:	6923      	ldr	r3, [r4, #16]
 801e440:	6861      	ldr	r1, [r4, #4]
 801e442:	4299      	cmp	r1, r3
 801e444:	bfde      	ittt	le
 801e446:	2330      	movle	r3, #48	; 0x30
 801e448:	f805 3c01 	strble.w	r3, [r5, #-1]
 801e44c:	f105 35ff 	addle.w	r5, r5, #4294967295
 801e450:	1b52      	subs	r2, r2, r5
 801e452:	6122      	str	r2, [r4, #16]
 801e454:	f8cd a000 	str.w	sl, [sp]
 801e458:	464b      	mov	r3, r9
 801e45a:	aa03      	add	r2, sp, #12
 801e45c:	4621      	mov	r1, r4
 801e45e:	4640      	mov	r0, r8
 801e460:	f7ff fee2 	bl	801e228 <_printf_common>
 801e464:	3001      	adds	r0, #1
 801e466:	d14c      	bne.n	801e502 <_printf_i+0x1fe>
 801e468:	f04f 30ff 	mov.w	r0, #4294967295
 801e46c:	b004      	add	sp, #16
 801e46e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e472:	4835      	ldr	r0, [pc, #212]	; (801e548 <_printf_i+0x244>)
 801e474:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801e478:	6829      	ldr	r1, [r5, #0]
 801e47a:	6823      	ldr	r3, [r4, #0]
 801e47c:	f851 6b04 	ldr.w	r6, [r1], #4
 801e480:	6029      	str	r1, [r5, #0]
 801e482:	061d      	lsls	r5, r3, #24
 801e484:	d514      	bpl.n	801e4b0 <_printf_i+0x1ac>
 801e486:	07df      	lsls	r7, r3, #31
 801e488:	bf44      	itt	mi
 801e48a:	f043 0320 	orrmi.w	r3, r3, #32
 801e48e:	6023      	strmi	r3, [r4, #0]
 801e490:	b91e      	cbnz	r6, 801e49a <_printf_i+0x196>
 801e492:	6823      	ldr	r3, [r4, #0]
 801e494:	f023 0320 	bic.w	r3, r3, #32
 801e498:	6023      	str	r3, [r4, #0]
 801e49a:	2310      	movs	r3, #16
 801e49c:	e7b0      	b.n	801e400 <_printf_i+0xfc>
 801e49e:	6823      	ldr	r3, [r4, #0]
 801e4a0:	f043 0320 	orr.w	r3, r3, #32
 801e4a4:	6023      	str	r3, [r4, #0]
 801e4a6:	2378      	movs	r3, #120	; 0x78
 801e4a8:	4828      	ldr	r0, [pc, #160]	; (801e54c <_printf_i+0x248>)
 801e4aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801e4ae:	e7e3      	b.n	801e478 <_printf_i+0x174>
 801e4b0:	0659      	lsls	r1, r3, #25
 801e4b2:	bf48      	it	mi
 801e4b4:	b2b6      	uxthmi	r6, r6
 801e4b6:	e7e6      	b.n	801e486 <_printf_i+0x182>
 801e4b8:	4615      	mov	r5, r2
 801e4ba:	e7bb      	b.n	801e434 <_printf_i+0x130>
 801e4bc:	682b      	ldr	r3, [r5, #0]
 801e4be:	6826      	ldr	r6, [r4, #0]
 801e4c0:	6961      	ldr	r1, [r4, #20]
 801e4c2:	1d18      	adds	r0, r3, #4
 801e4c4:	6028      	str	r0, [r5, #0]
 801e4c6:	0635      	lsls	r5, r6, #24
 801e4c8:	681b      	ldr	r3, [r3, #0]
 801e4ca:	d501      	bpl.n	801e4d0 <_printf_i+0x1cc>
 801e4cc:	6019      	str	r1, [r3, #0]
 801e4ce:	e002      	b.n	801e4d6 <_printf_i+0x1d2>
 801e4d0:	0670      	lsls	r0, r6, #25
 801e4d2:	d5fb      	bpl.n	801e4cc <_printf_i+0x1c8>
 801e4d4:	8019      	strh	r1, [r3, #0]
 801e4d6:	2300      	movs	r3, #0
 801e4d8:	6123      	str	r3, [r4, #16]
 801e4da:	4615      	mov	r5, r2
 801e4dc:	e7ba      	b.n	801e454 <_printf_i+0x150>
 801e4de:	682b      	ldr	r3, [r5, #0]
 801e4e0:	1d1a      	adds	r2, r3, #4
 801e4e2:	602a      	str	r2, [r5, #0]
 801e4e4:	681d      	ldr	r5, [r3, #0]
 801e4e6:	6862      	ldr	r2, [r4, #4]
 801e4e8:	2100      	movs	r1, #0
 801e4ea:	4628      	mov	r0, r5
 801e4ec:	f7e1 fe78 	bl	80001e0 <memchr>
 801e4f0:	b108      	cbz	r0, 801e4f6 <_printf_i+0x1f2>
 801e4f2:	1b40      	subs	r0, r0, r5
 801e4f4:	6060      	str	r0, [r4, #4]
 801e4f6:	6863      	ldr	r3, [r4, #4]
 801e4f8:	6123      	str	r3, [r4, #16]
 801e4fa:	2300      	movs	r3, #0
 801e4fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e500:	e7a8      	b.n	801e454 <_printf_i+0x150>
 801e502:	6923      	ldr	r3, [r4, #16]
 801e504:	462a      	mov	r2, r5
 801e506:	4649      	mov	r1, r9
 801e508:	4640      	mov	r0, r8
 801e50a:	47d0      	blx	sl
 801e50c:	3001      	adds	r0, #1
 801e50e:	d0ab      	beq.n	801e468 <_printf_i+0x164>
 801e510:	6823      	ldr	r3, [r4, #0]
 801e512:	079b      	lsls	r3, r3, #30
 801e514:	d413      	bmi.n	801e53e <_printf_i+0x23a>
 801e516:	68e0      	ldr	r0, [r4, #12]
 801e518:	9b03      	ldr	r3, [sp, #12]
 801e51a:	4298      	cmp	r0, r3
 801e51c:	bfb8      	it	lt
 801e51e:	4618      	movlt	r0, r3
 801e520:	e7a4      	b.n	801e46c <_printf_i+0x168>
 801e522:	2301      	movs	r3, #1
 801e524:	4632      	mov	r2, r6
 801e526:	4649      	mov	r1, r9
 801e528:	4640      	mov	r0, r8
 801e52a:	47d0      	blx	sl
 801e52c:	3001      	adds	r0, #1
 801e52e:	d09b      	beq.n	801e468 <_printf_i+0x164>
 801e530:	3501      	adds	r5, #1
 801e532:	68e3      	ldr	r3, [r4, #12]
 801e534:	9903      	ldr	r1, [sp, #12]
 801e536:	1a5b      	subs	r3, r3, r1
 801e538:	42ab      	cmp	r3, r5
 801e53a:	dcf2      	bgt.n	801e522 <_printf_i+0x21e>
 801e53c:	e7eb      	b.n	801e516 <_printf_i+0x212>
 801e53e:	2500      	movs	r5, #0
 801e540:	f104 0619 	add.w	r6, r4, #25
 801e544:	e7f5      	b.n	801e532 <_printf_i+0x22e>
 801e546:	bf00      	nop
 801e548:	08029f91 	.word	0x08029f91
 801e54c:	08029fa2 	.word	0x08029fa2

0801e550 <__swbuf_r>:
 801e550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e552:	460e      	mov	r6, r1
 801e554:	4614      	mov	r4, r2
 801e556:	4605      	mov	r5, r0
 801e558:	b118      	cbz	r0, 801e562 <__swbuf_r+0x12>
 801e55a:	6983      	ldr	r3, [r0, #24]
 801e55c:	b90b      	cbnz	r3, 801e562 <__swbuf_r+0x12>
 801e55e:	f000 f9d9 	bl	801e914 <__sinit>
 801e562:	4b21      	ldr	r3, [pc, #132]	; (801e5e8 <__swbuf_r+0x98>)
 801e564:	429c      	cmp	r4, r3
 801e566:	d12b      	bne.n	801e5c0 <__swbuf_r+0x70>
 801e568:	686c      	ldr	r4, [r5, #4]
 801e56a:	69a3      	ldr	r3, [r4, #24]
 801e56c:	60a3      	str	r3, [r4, #8]
 801e56e:	89a3      	ldrh	r3, [r4, #12]
 801e570:	071a      	lsls	r2, r3, #28
 801e572:	d52f      	bpl.n	801e5d4 <__swbuf_r+0x84>
 801e574:	6923      	ldr	r3, [r4, #16]
 801e576:	b36b      	cbz	r3, 801e5d4 <__swbuf_r+0x84>
 801e578:	6923      	ldr	r3, [r4, #16]
 801e57a:	6820      	ldr	r0, [r4, #0]
 801e57c:	1ac0      	subs	r0, r0, r3
 801e57e:	6963      	ldr	r3, [r4, #20]
 801e580:	b2f6      	uxtb	r6, r6
 801e582:	4283      	cmp	r3, r0
 801e584:	4637      	mov	r7, r6
 801e586:	dc04      	bgt.n	801e592 <__swbuf_r+0x42>
 801e588:	4621      	mov	r1, r4
 801e58a:	4628      	mov	r0, r5
 801e58c:	f000 f92e 	bl	801e7ec <_fflush_r>
 801e590:	bb30      	cbnz	r0, 801e5e0 <__swbuf_r+0x90>
 801e592:	68a3      	ldr	r3, [r4, #8]
 801e594:	3b01      	subs	r3, #1
 801e596:	60a3      	str	r3, [r4, #8]
 801e598:	6823      	ldr	r3, [r4, #0]
 801e59a:	1c5a      	adds	r2, r3, #1
 801e59c:	6022      	str	r2, [r4, #0]
 801e59e:	701e      	strb	r6, [r3, #0]
 801e5a0:	6963      	ldr	r3, [r4, #20]
 801e5a2:	3001      	adds	r0, #1
 801e5a4:	4283      	cmp	r3, r0
 801e5a6:	d004      	beq.n	801e5b2 <__swbuf_r+0x62>
 801e5a8:	89a3      	ldrh	r3, [r4, #12]
 801e5aa:	07db      	lsls	r3, r3, #31
 801e5ac:	d506      	bpl.n	801e5bc <__swbuf_r+0x6c>
 801e5ae:	2e0a      	cmp	r6, #10
 801e5b0:	d104      	bne.n	801e5bc <__swbuf_r+0x6c>
 801e5b2:	4621      	mov	r1, r4
 801e5b4:	4628      	mov	r0, r5
 801e5b6:	f000 f919 	bl	801e7ec <_fflush_r>
 801e5ba:	b988      	cbnz	r0, 801e5e0 <__swbuf_r+0x90>
 801e5bc:	4638      	mov	r0, r7
 801e5be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e5c0:	4b0a      	ldr	r3, [pc, #40]	; (801e5ec <__swbuf_r+0x9c>)
 801e5c2:	429c      	cmp	r4, r3
 801e5c4:	d101      	bne.n	801e5ca <__swbuf_r+0x7a>
 801e5c6:	68ac      	ldr	r4, [r5, #8]
 801e5c8:	e7cf      	b.n	801e56a <__swbuf_r+0x1a>
 801e5ca:	4b09      	ldr	r3, [pc, #36]	; (801e5f0 <__swbuf_r+0xa0>)
 801e5cc:	429c      	cmp	r4, r3
 801e5ce:	bf08      	it	eq
 801e5d0:	68ec      	ldreq	r4, [r5, #12]
 801e5d2:	e7ca      	b.n	801e56a <__swbuf_r+0x1a>
 801e5d4:	4621      	mov	r1, r4
 801e5d6:	4628      	mov	r0, r5
 801e5d8:	f000 f80c 	bl	801e5f4 <__swsetup_r>
 801e5dc:	2800      	cmp	r0, #0
 801e5de:	d0cb      	beq.n	801e578 <__swbuf_r+0x28>
 801e5e0:	f04f 37ff 	mov.w	r7, #4294967295
 801e5e4:	e7ea      	b.n	801e5bc <__swbuf_r+0x6c>
 801e5e6:	bf00      	nop
 801e5e8:	08029fd4 	.word	0x08029fd4
 801e5ec:	08029ff4 	.word	0x08029ff4
 801e5f0:	08029fb4 	.word	0x08029fb4

0801e5f4 <__swsetup_r>:
 801e5f4:	4b32      	ldr	r3, [pc, #200]	; (801e6c0 <__swsetup_r+0xcc>)
 801e5f6:	b570      	push	{r4, r5, r6, lr}
 801e5f8:	681d      	ldr	r5, [r3, #0]
 801e5fa:	4606      	mov	r6, r0
 801e5fc:	460c      	mov	r4, r1
 801e5fe:	b125      	cbz	r5, 801e60a <__swsetup_r+0x16>
 801e600:	69ab      	ldr	r3, [r5, #24]
 801e602:	b913      	cbnz	r3, 801e60a <__swsetup_r+0x16>
 801e604:	4628      	mov	r0, r5
 801e606:	f000 f985 	bl	801e914 <__sinit>
 801e60a:	4b2e      	ldr	r3, [pc, #184]	; (801e6c4 <__swsetup_r+0xd0>)
 801e60c:	429c      	cmp	r4, r3
 801e60e:	d10f      	bne.n	801e630 <__swsetup_r+0x3c>
 801e610:	686c      	ldr	r4, [r5, #4]
 801e612:	89a3      	ldrh	r3, [r4, #12]
 801e614:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e618:	0719      	lsls	r1, r3, #28
 801e61a:	d42c      	bmi.n	801e676 <__swsetup_r+0x82>
 801e61c:	06dd      	lsls	r5, r3, #27
 801e61e:	d411      	bmi.n	801e644 <__swsetup_r+0x50>
 801e620:	2309      	movs	r3, #9
 801e622:	6033      	str	r3, [r6, #0]
 801e624:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801e628:	81a3      	strh	r3, [r4, #12]
 801e62a:	f04f 30ff 	mov.w	r0, #4294967295
 801e62e:	e03e      	b.n	801e6ae <__swsetup_r+0xba>
 801e630:	4b25      	ldr	r3, [pc, #148]	; (801e6c8 <__swsetup_r+0xd4>)
 801e632:	429c      	cmp	r4, r3
 801e634:	d101      	bne.n	801e63a <__swsetup_r+0x46>
 801e636:	68ac      	ldr	r4, [r5, #8]
 801e638:	e7eb      	b.n	801e612 <__swsetup_r+0x1e>
 801e63a:	4b24      	ldr	r3, [pc, #144]	; (801e6cc <__swsetup_r+0xd8>)
 801e63c:	429c      	cmp	r4, r3
 801e63e:	bf08      	it	eq
 801e640:	68ec      	ldreq	r4, [r5, #12]
 801e642:	e7e6      	b.n	801e612 <__swsetup_r+0x1e>
 801e644:	0758      	lsls	r0, r3, #29
 801e646:	d512      	bpl.n	801e66e <__swsetup_r+0x7a>
 801e648:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e64a:	b141      	cbz	r1, 801e65e <__swsetup_r+0x6a>
 801e64c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e650:	4299      	cmp	r1, r3
 801e652:	d002      	beq.n	801e65a <__swsetup_r+0x66>
 801e654:	4630      	mov	r0, r6
 801e656:	f000 fa63 	bl	801eb20 <_free_r>
 801e65a:	2300      	movs	r3, #0
 801e65c:	6363      	str	r3, [r4, #52]	; 0x34
 801e65e:	89a3      	ldrh	r3, [r4, #12]
 801e660:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801e664:	81a3      	strh	r3, [r4, #12]
 801e666:	2300      	movs	r3, #0
 801e668:	6063      	str	r3, [r4, #4]
 801e66a:	6923      	ldr	r3, [r4, #16]
 801e66c:	6023      	str	r3, [r4, #0]
 801e66e:	89a3      	ldrh	r3, [r4, #12]
 801e670:	f043 0308 	orr.w	r3, r3, #8
 801e674:	81a3      	strh	r3, [r4, #12]
 801e676:	6923      	ldr	r3, [r4, #16]
 801e678:	b94b      	cbnz	r3, 801e68e <__swsetup_r+0x9a>
 801e67a:	89a3      	ldrh	r3, [r4, #12]
 801e67c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801e680:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801e684:	d003      	beq.n	801e68e <__swsetup_r+0x9a>
 801e686:	4621      	mov	r1, r4
 801e688:	4630      	mov	r0, r6
 801e68a:	f000 fa09 	bl	801eaa0 <__smakebuf_r>
 801e68e:	89a0      	ldrh	r0, [r4, #12]
 801e690:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e694:	f010 0301 	ands.w	r3, r0, #1
 801e698:	d00a      	beq.n	801e6b0 <__swsetup_r+0xbc>
 801e69a:	2300      	movs	r3, #0
 801e69c:	60a3      	str	r3, [r4, #8]
 801e69e:	6963      	ldr	r3, [r4, #20]
 801e6a0:	425b      	negs	r3, r3
 801e6a2:	61a3      	str	r3, [r4, #24]
 801e6a4:	6923      	ldr	r3, [r4, #16]
 801e6a6:	b943      	cbnz	r3, 801e6ba <__swsetup_r+0xc6>
 801e6a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801e6ac:	d1ba      	bne.n	801e624 <__swsetup_r+0x30>
 801e6ae:	bd70      	pop	{r4, r5, r6, pc}
 801e6b0:	0781      	lsls	r1, r0, #30
 801e6b2:	bf58      	it	pl
 801e6b4:	6963      	ldrpl	r3, [r4, #20]
 801e6b6:	60a3      	str	r3, [r4, #8]
 801e6b8:	e7f4      	b.n	801e6a4 <__swsetup_r+0xb0>
 801e6ba:	2000      	movs	r0, #0
 801e6bc:	e7f7      	b.n	801e6ae <__swsetup_r+0xba>
 801e6be:	bf00      	nop
 801e6c0:	200001ec 	.word	0x200001ec
 801e6c4:	08029fd4 	.word	0x08029fd4
 801e6c8:	08029ff4 	.word	0x08029ff4
 801e6cc:	08029fb4 	.word	0x08029fb4

0801e6d0 <abort>:
 801e6d0:	b508      	push	{r3, lr}
 801e6d2:	2006      	movs	r0, #6
 801e6d4:	f000 fb3c 	bl	801ed50 <raise>
 801e6d8:	2001      	movs	r0, #1
 801e6da:	f7f7 fee5 	bl	80164a8 <_exit>
	...

0801e6e0 <__sflush_r>:
 801e6e0:	898a      	ldrh	r2, [r1, #12]
 801e6e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e6e6:	4605      	mov	r5, r0
 801e6e8:	0710      	lsls	r0, r2, #28
 801e6ea:	460c      	mov	r4, r1
 801e6ec:	d458      	bmi.n	801e7a0 <__sflush_r+0xc0>
 801e6ee:	684b      	ldr	r3, [r1, #4]
 801e6f0:	2b00      	cmp	r3, #0
 801e6f2:	dc05      	bgt.n	801e700 <__sflush_r+0x20>
 801e6f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801e6f6:	2b00      	cmp	r3, #0
 801e6f8:	dc02      	bgt.n	801e700 <__sflush_r+0x20>
 801e6fa:	2000      	movs	r0, #0
 801e6fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e700:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e702:	2e00      	cmp	r6, #0
 801e704:	d0f9      	beq.n	801e6fa <__sflush_r+0x1a>
 801e706:	2300      	movs	r3, #0
 801e708:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801e70c:	682f      	ldr	r7, [r5, #0]
 801e70e:	602b      	str	r3, [r5, #0]
 801e710:	d032      	beq.n	801e778 <__sflush_r+0x98>
 801e712:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801e714:	89a3      	ldrh	r3, [r4, #12]
 801e716:	075a      	lsls	r2, r3, #29
 801e718:	d505      	bpl.n	801e726 <__sflush_r+0x46>
 801e71a:	6863      	ldr	r3, [r4, #4]
 801e71c:	1ac0      	subs	r0, r0, r3
 801e71e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e720:	b10b      	cbz	r3, 801e726 <__sflush_r+0x46>
 801e722:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801e724:	1ac0      	subs	r0, r0, r3
 801e726:	2300      	movs	r3, #0
 801e728:	4602      	mov	r2, r0
 801e72a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e72c:	6a21      	ldr	r1, [r4, #32]
 801e72e:	4628      	mov	r0, r5
 801e730:	47b0      	blx	r6
 801e732:	1c43      	adds	r3, r0, #1
 801e734:	89a3      	ldrh	r3, [r4, #12]
 801e736:	d106      	bne.n	801e746 <__sflush_r+0x66>
 801e738:	6829      	ldr	r1, [r5, #0]
 801e73a:	291d      	cmp	r1, #29
 801e73c:	d82c      	bhi.n	801e798 <__sflush_r+0xb8>
 801e73e:	4a2a      	ldr	r2, [pc, #168]	; (801e7e8 <__sflush_r+0x108>)
 801e740:	40ca      	lsrs	r2, r1
 801e742:	07d6      	lsls	r6, r2, #31
 801e744:	d528      	bpl.n	801e798 <__sflush_r+0xb8>
 801e746:	2200      	movs	r2, #0
 801e748:	6062      	str	r2, [r4, #4]
 801e74a:	04d9      	lsls	r1, r3, #19
 801e74c:	6922      	ldr	r2, [r4, #16]
 801e74e:	6022      	str	r2, [r4, #0]
 801e750:	d504      	bpl.n	801e75c <__sflush_r+0x7c>
 801e752:	1c42      	adds	r2, r0, #1
 801e754:	d101      	bne.n	801e75a <__sflush_r+0x7a>
 801e756:	682b      	ldr	r3, [r5, #0]
 801e758:	b903      	cbnz	r3, 801e75c <__sflush_r+0x7c>
 801e75a:	6560      	str	r0, [r4, #84]	; 0x54
 801e75c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e75e:	602f      	str	r7, [r5, #0]
 801e760:	2900      	cmp	r1, #0
 801e762:	d0ca      	beq.n	801e6fa <__sflush_r+0x1a>
 801e764:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e768:	4299      	cmp	r1, r3
 801e76a:	d002      	beq.n	801e772 <__sflush_r+0x92>
 801e76c:	4628      	mov	r0, r5
 801e76e:	f000 f9d7 	bl	801eb20 <_free_r>
 801e772:	2000      	movs	r0, #0
 801e774:	6360      	str	r0, [r4, #52]	; 0x34
 801e776:	e7c1      	b.n	801e6fc <__sflush_r+0x1c>
 801e778:	6a21      	ldr	r1, [r4, #32]
 801e77a:	2301      	movs	r3, #1
 801e77c:	4628      	mov	r0, r5
 801e77e:	47b0      	blx	r6
 801e780:	1c41      	adds	r1, r0, #1
 801e782:	d1c7      	bne.n	801e714 <__sflush_r+0x34>
 801e784:	682b      	ldr	r3, [r5, #0]
 801e786:	2b00      	cmp	r3, #0
 801e788:	d0c4      	beq.n	801e714 <__sflush_r+0x34>
 801e78a:	2b1d      	cmp	r3, #29
 801e78c:	d001      	beq.n	801e792 <__sflush_r+0xb2>
 801e78e:	2b16      	cmp	r3, #22
 801e790:	d101      	bne.n	801e796 <__sflush_r+0xb6>
 801e792:	602f      	str	r7, [r5, #0]
 801e794:	e7b1      	b.n	801e6fa <__sflush_r+0x1a>
 801e796:	89a3      	ldrh	r3, [r4, #12]
 801e798:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e79c:	81a3      	strh	r3, [r4, #12]
 801e79e:	e7ad      	b.n	801e6fc <__sflush_r+0x1c>
 801e7a0:	690f      	ldr	r7, [r1, #16]
 801e7a2:	2f00      	cmp	r7, #0
 801e7a4:	d0a9      	beq.n	801e6fa <__sflush_r+0x1a>
 801e7a6:	0793      	lsls	r3, r2, #30
 801e7a8:	680e      	ldr	r6, [r1, #0]
 801e7aa:	bf08      	it	eq
 801e7ac:	694b      	ldreq	r3, [r1, #20]
 801e7ae:	600f      	str	r7, [r1, #0]
 801e7b0:	bf18      	it	ne
 801e7b2:	2300      	movne	r3, #0
 801e7b4:	eba6 0807 	sub.w	r8, r6, r7
 801e7b8:	608b      	str	r3, [r1, #8]
 801e7ba:	f1b8 0f00 	cmp.w	r8, #0
 801e7be:	dd9c      	ble.n	801e6fa <__sflush_r+0x1a>
 801e7c0:	6a21      	ldr	r1, [r4, #32]
 801e7c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801e7c4:	4643      	mov	r3, r8
 801e7c6:	463a      	mov	r2, r7
 801e7c8:	4628      	mov	r0, r5
 801e7ca:	47b0      	blx	r6
 801e7cc:	2800      	cmp	r0, #0
 801e7ce:	dc06      	bgt.n	801e7de <__sflush_r+0xfe>
 801e7d0:	89a3      	ldrh	r3, [r4, #12]
 801e7d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e7d6:	81a3      	strh	r3, [r4, #12]
 801e7d8:	f04f 30ff 	mov.w	r0, #4294967295
 801e7dc:	e78e      	b.n	801e6fc <__sflush_r+0x1c>
 801e7de:	4407      	add	r7, r0
 801e7e0:	eba8 0800 	sub.w	r8, r8, r0
 801e7e4:	e7e9      	b.n	801e7ba <__sflush_r+0xda>
 801e7e6:	bf00      	nop
 801e7e8:	20400001 	.word	0x20400001

0801e7ec <_fflush_r>:
 801e7ec:	b538      	push	{r3, r4, r5, lr}
 801e7ee:	690b      	ldr	r3, [r1, #16]
 801e7f0:	4605      	mov	r5, r0
 801e7f2:	460c      	mov	r4, r1
 801e7f4:	b913      	cbnz	r3, 801e7fc <_fflush_r+0x10>
 801e7f6:	2500      	movs	r5, #0
 801e7f8:	4628      	mov	r0, r5
 801e7fa:	bd38      	pop	{r3, r4, r5, pc}
 801e7fc:	b118      	cbz	r0, 801e806 <_fflush_r+0x1a>
 801e7fe:	6983      	ldr	r3, [r0, #24]
 801e800:	b90b      	cbnz	r3, 801e806 <_fflush_r+0x1a>
 801e802:	f000 f887 	bl	801e914 <__sinit>
 801e806:	4b14      	ldr	r3, [pc, #80]	; (801e858 <_fflush_r+0x6c>)
 801e808:	429c      	cmp	r4, r3
 801e80a:	d11b      	bne.n	801e844 <_fflush_r+0x58>
 801e80c:	686c      	ldr	r4, [r5, #4]
 801e80e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e812:	2b00      	cmp	r3, #0
 801e814:	d0ef      	beq.n	801e7f6 <_fflush_r+0xa>
 801e816:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801e818:	07d0      	lsls	r0, r2, #31
 801e81a:	d404      	bmi.n	801e826 <_fflush_r+0x3a>
 801e81c:	0599      	lsls	r1, r3, #22
 801e81e:	d402      	bmi.n	801e826 <_fflush_r+0x3a>
 801e820:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e822:	f000 f915 	bl	801ea50 <__retarget_lock_acquire_recursive>
 801e826:	4628      	mov	r0, r5
 801e828:	4621      	mov	r1, r4
 801e82a:	f7ff ff59 	bl	801e6e0 <__sflush_r>
 801e82e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e830:	07da      	lsls	r2, r3, #31
 801e832:	4605      	mov	r5, r0
 801e834:	d4e0      	bmi.n	801e7f8 <_fflush_r+0xc>
 801e836:	89a3      	ldrh	r3, [r4, #12]
 801e838:	059b      	lsls	r3, r3, #22
 801e83a:	d4dd      	bmi.n	801e7f8 <_fflush_r+0xc>
 801e83c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e83e:	f000 f908 	bl	801ea52 <__retarget_lock_release_recursive>
 801e842:	e7d9      	b.n	801e7f8 <_fflush_r+0xc>
 801e844:	4b05      	ldr	r3, [pc, #20]	; (801e85c <_fflush_r+0x70>)
 801e846:	429c      	cmp	r4, r3
 801e848:	d101      	bne.n	801e84e <_fflush_r+0x62>
 801e84a:	68ac      	ldr	r4, [r5, #8]
 801e84c:	e7df      	b.n	801e80e <_fflush_r+0x22>
 801e84e:	4b04      	ldr	r3, [pc, #16]	; (801e860 <_fflush_r+0x74>)
 801e850:	429c      	cmp	r4, r3
 801e852:	bf08      	it	eq
 801e854:	68ec      	ldreq	r4, [r5, #12]
 801e856:	e7da      	b.n	801e80e <_fflush_r+0x22>
 801e858:	08029fd4 	.word	0x08029fd4
 801e85c:	08029ff4 	.word	0x08029ff4
 801e860:	08029fb4 	.word	0x08029fb4

0801e864 <std>:
 801e864:	2300      	movs	r3, #0
 801e866:	b510      	push	{r4, lr}
 801e868:	4604      	mov	r4, r0
 801e86a:	e9c0 3300 	strd	r3, r3, [r0]
 801e86e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801e872:	6083      	str	r3, [r0, #8]
 801e874:	8181      	strh	r1, [r0, #12]
 801e876:	6643      	str	r3, [r0, #100]	; 0x64
 801e878:	81c2      	strh	r2, [r0, #14]
 801e87a:	6183      	str	r3, [r0, #24]
 801e87c:	4619      	mov	r1, r3
 801e87e:	2208      	movs	r2, #8
 801e880:	305c      	adds	r0, #92	; 0x5c
 801e882:	f7ff fb6f 	bl	801df64 <memset>
 801e886:	4b05      	ldr	r3, [pc, #20]	; (801e89c <std+0x38>)
 801e888:	6263      	str	r3, [r4, #36]	; 0x24
 801e88a:	4b05      	ldr	r3, [pc, #20]	; (801e8a0 <std+0x3c>)
 801e88c:	62a3      	str	r3, [r4, #40]	; 0x28
 801e88e:	4b05      	ldr	r3, [pc, #20]	; (801e8a4 <std+0x40>)
 801e890:	62e3      	str	r3, [r4, #44]	; 0x2c
 801e892:	4b05      	ldr	r3, [pc, #20]	; (801e8a8 <std+0x44>)
 801e894:	6224      	str	r4, [r4, #32]
 801e896:	6323      	str	r3, [r4, #48]	; 0x30
 801e898:	bd10      	pop	{r4, pc}
 801e89a:	bf00      	nop
 801e89c:	0801ed89 	.word	0x0801ed89
 801e8a0:	0801edab 	.word	0x0801edab
 801e8a4:	0801ede3 	.word	0x0801ede3
 801e8a8:	0801ee07 	.word	0x0801ee07

0801e8ac <_cleanup_r>:
 801e8ac:	4901      	ldr	r1, [pc, #4]	; (801e8b4 <_cleanup_r+0x8>)
 801e8ae:	f000 b8af 	b.w	801ea10 <_fwalk_reent>
 801e8b2:	bf00      	nop
 801e8b4:	0801e7ed 	.word	0x0801e7ed

0801e8b8 <__sfmoreglue>:
 801e8b8:	b570      	push	{r4, r5, r6, lr}
 801e8ba:	2268      	movs	r2, #104	; 0x68
 801e8bc:	1e4d      	subs	r5, r1, #1
 801e8be:	4355      	muls	r5, r2
 801e8c0:	460e      	mov	r6, r1
 801e8c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801e8c6:	f000 f997 	bl	801ebf8 <_malloc_r>
 801e8ca:	4604      	mov	r4, r0
 801e8cc:	b140      	cbz	r0, 801e8e0 <__sfmoreglue+0x28>
 801e8ce:	2100      	movs	r1, #0
 801e8d0:	e9c0 1600 	strd	r1, r6, [r0]
 801e8d4:	300c      	adds	r0, #12
 801e8d6:	60a0      	str	r0, [r4, #8]
 801e8d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801e8dc:	f7ff fb42 	bl	801df64 <memset>
 801e8e0:	4620      	mov	r0, r4
 801e8e2:	bd70      	pop	{r4, r5, r6, pc}

0801e8e4 <__sfp_lock_acquire>:
 801e8e4:	4801      	ldr	r0, [pc, #4]	; (801e8ec <__sfp_lock_acquire+0x8>)
 801e8e6:	f000 b8b3 	b.w	801ea50 <__retarget_lock_acquire_recursive>
 801e8ea:	bf00      	nop
 801e8ec:	200007f1 	.word	0x200007f1

0801e8f0 <__sfp_lock_release>:
 801e8f0:	4801      	ldr	r0, [pc, #4]	; (801e8f8 <__sfp_lock_release+0x8>)
 801e8f2:	f000 b8ae 	b.w	801ea52 <__retarget_lock_release_recursive>
 801e8f6:	bf00      	nop
 801e8f8:	200007f1 	.word	0x200007f1

0801e8fc <__sinit_lock_acquire>:
 801e8fc:	4801      	ldr	r0, [pc, #4]	; (801e904 <__sinit_lock_acquire+0x8>)
 801e8fe:	f000 b8a7 	b.w	801ea50 <__retarget_lock_acquire_recursive>
 801e902:	bf00      	nop
 801e904:	200007f2 	.word	0x200007f2

0801e908 <__sinit_lock_release>:
 801e908:	4801      	ldr	r0, [pc, #4]	; (801e910 <__sinit_lock_release+0x8>)
 801e90a:	f000 b8a2 	b.w	801ea52 <__retarget_lock_release_recursive>
 801e90e:	bf00      	nop
 801e910:	200007f2 	.word	0x200007f2

0801e914 <__sinit>:
 801e914:	b510      	push	{r4, lr}
 801e916:	4604      	mov	r4, r0
 801e918:	f7ff fff0 	bl	801e8fc <__sinit_lock_acquire>
 801e91c:	69a3      	ldr	r3, [r4, #24]
 801e91e:	b11b      	cbz	r3, 801e928 <__sinit+0x14>
 801e920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e924:	f7ff bff0 	b.w	801e908 <__sinit_lock_release>
 801e928:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801e92c:	6523      	str	r3, [r4, #80]	; 0x50
 801e92e:	4b13      	ldr	r3, [pc, #76]	; (801e97c <__sinit+0x68>)
 801e930:	4a13      	ldr	r2, [pc, #76]	; (801e980 <__sinit+0x6c>)
 801e932:	681b      	ldr	r3, [r3, #0]
 801e934:	62a2      	str	r2, [r4, #40]	; 0x28
 801e936:	42a3      	cmp	r3, r4
 801e938:	bf04      	itt	eq
 801e93a:	2301      	moveq	r3, #1
 801e93c:	61a3      	streq	r3, [r4, #24]
 801e93e:	4620      	mov	r0, r4
 801e940:	f000 f820 	bl	801e984 <__sfp>
 801e944:	6060      	str	r0, [r4, #4]
 801e946:	4620      	mov	r0, r4
 801e948:	f000 f81c 	bl	801e984 <__sfp>
 801e94c:	60a0      	str	r0, [r4, #8]
 801e94e:	4620      	mov	r0, r4
 801e950:	f000 f818 	bl	801e984 <__sfp>
 801e954:	2200      	movs	r2, #0
 801e956:	60e0      	str	r0, [r4, #12]
 801e958:	2104      	movs	r1, #4
 801e95a:	6860      	ldr	r0, [r4, #4]
 801e95c:	f7ff ff82 	bl	801e864 <std>
 801e960:	68a0      	ldr	r0, [r4, #8]
 801e962:	2201      	movs	r2, #1
 801e964:	2109      	movs	r1, #9
 801e966:	f7ff ff7d 	bl	801e864 <std>
 801e96a:	68e0      	ldr	r0, [r4, #12]
 801e96c:	2202      	movs	r2, #2
 801e96e:	2112      	movs	r1, #18
 801e970:	f7ff ff78 	bl	801e864 <std>
 801e974:	2301      	movs	r3, #1
 801e976:	61a3      	str	r3, [r4, #24]
 801e978:	e7d2      	b.n	801e920 <__sinit+0xc>
 801e97a:	bf00      	nop
 801e97c:	08029f7c 	.word	0x08029f7c
 801e980:	0801e8ad 	.word	0x0801e8ad

0801e984 <__sfp>:
 801e984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e986:	4607      	mov	r7, r0
 801e988:	f7ff ffac 	bl	801e8e4 <__sfp_lock_acquire>
 801e98c:	4b1e      	ldr	r3, [pc, #120]	; (801ea08 <__sfp+0x84>)
 801e98e:	681e      	ldr	r6, [r3, #0]
 801e990:	69b3      	ldr	r3, [r6, #24]
 801e992:	b913      	cbnz	r3, 801e99a <__sfp+0x16>
 801e994:	4630      	mov	r0, r6
 801e996:	f7ff ffbd 	bl	801e914 <__sinit>
 801e99a:	3648      	adds	r6, #72	; 0x48
 801e99c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801e9a0:	3b01      	subs	r3, #1
 801e9a2:	d503      	bpl.n	801e9ac <__sfp+0x28>
 801e9a4:	6833      	ldr	r3, [r6, #0]
 801e9a6:	b30b      	cbz	r3, 801e9ec <__sfp+0x68>
 801e9a8:	6836      	ldr	r6, [r6, #0]
 801e9aa:	e7f7      	b.n	801e99c <__sfp+0x18>
 801e9ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801e9b0:	b9d5      	cbnz	r5, 801e9e8 <__sfp+0x64>
 801e9b2:	4b16      	ldr	r3, [pc, #88]	; (801ea0c <__sfp+0x88>)
 801e9b4:	60e3      	str	r3, [r4, #12]
 801e9b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801e9ba:	6665      	str	r5, [r4, #100]	; 0x64
 801e9bc:	f000 f847 	bl	801ea4e <__retarget_lock_init_recursive>
 801e9c0:	f7ff ff96 	bl	801e8f0 <__sfp_lock_release>
 801e9c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801e9c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801e9cc:	6025      	str	r5, [r4, #0]
 801e9ce:	61a5      	str	r5, [r4, #24]
 801e9d0:	2208      	movs	r2, #8
 801e9d2:	4629      	mov	r1, r5
 801e9d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801e9d8:	f7ff fac4 	bl	801df64 <memset>
 801e9dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801e9e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801e9e4:	4620      	mov	r0, r4
 801e9e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e9e8:	3468      	adds	r4, #104	; 0x68
 801e9ea:	e7d9      	b.n	801e9a0 <__sfp+0x1c>
 801e9ec:	2104      	movs	r1, #4
 801e9ee:	4638      	mov	r0, r7
 801e9f0:	f7ff ff62 	bl	801e8b8 <__sfmoreglue>
 801e9f4:	4604      	mov	r4, r0
 801e9f6:	6030      	str	r0, [r6, #0]
 801e9f8:	2800      	cmp	r0, #0
 801e9fa:	d1d5      	bne.n	801e9a8 <__sfp+0x24>
 801e9fc:	f7ff ff78 	bl	801e8f0 <__sfp_lock_release>
 801ea00:	230c      	movs	r3, #12
 801ea02:	603b      	str	r3, [r7, #0]
 801ea04:	e7ee      	b.n	801e9e4 <__sfp+0x60>
 801ea06:	bf00      	nop
 801ea08:	08029f7c 	.word	0x08029f7c
 801ea0c:	ffff0001 	.word	0xffff0001

0801ea10 <_fwalk_reent>:
 801ea10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ea14:	4606      	mov	r6, r0
 801ea16:	4688      	mov	r8, r1
 801ea18:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801ea1c:	2700      	movs	r7, #0
 801ea1e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801ea22:	f1b9 0901 	subs.w	r9, r9, #1
 801ea26:	d505      	bpl.n	801ea34 <_fwalk_reent+0x24>
 801ea28:	6824      	ldr	r4, [r4, #0]
 801ea2a:	2c00      	cmp	r4, #0
 801ea2c:	d1f7      	bne.n	801ea1e <_fwalk_reent+0xe>
 801ea2e:	4638      	mov	r0, r7
 801ea30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ea34:	89ab      	ldrh	r3, [r5, #12]
 801ea36:	2b01      	cmp	r3, #1
 801ea38:	d907      	bls.n	801ea4a <_fwalk_reent+0x3a>
 801ea3a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801ea3e:	3301      	adds	r3, #1
 801ea40:	d003      	beq.n	801ea4a <_fwalk_reent+0x3a>
 801ea42:	4629      	mov	r1, r5
 801ea44:	4630      	mov	r0, r6
 801ea46:	47c0      	blx	r8
 801ea48:	4307      	orrs	r7, r0
 801ea4a:	3568      	adds	r5, #104	; 0x68
 801ea4c:	e7e9      	b.n	801ea22 <_fwalk_reent+0x12>

0801ea4e <__retarget_lock_init_recursive>:
 801ea4e:	4770      	bx	lr

0801ea50 <__retarget_lock_acquire_recursive>:
 801ea50:	4770      	bx	lr

0801ea52 <__retarget_lock_release_recursive>:
 801ea52:	4770      	bx	lr

0801ea54 <__swhatbuf_r>:
 801ea54:	b570      	push	{r4, r5, r6, lr}
 801ea56:	460e      	mov	r6, r1
 801ea58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ea5c:	2900      	cmp	r1, #0
 801ea5e:	b096      	sub	sp, #88	; 0x58
 801ea60:	4614      	mov	r4, r2
 801ea62:	461d      	mov	r5, r3
 801ea64:	da08      	bge.n	801ea78 <__swhatbuf_r+0x24>
 801ea66:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801ea6a:	2200      	movs	r2, #0
 801ea6c:	602a      	str	r2, [r5, #0]
 801ea6e:	061a      	lsls	r2, r3, #24
 801ea70:	d410      	bmi.n	801ea94 <__swhatbuf_r+0x40>
 801ea72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ea76:	e00e      	b.n	801ea96 <__swhatbuf_r+0x42>
 801ea78:	466a      	mov	r2, sp
 801ea7a:	f000 f9eb 	bl	801ee54 <_fstat_r>
 801ea7e:	2800      	cmp	r0, #0
 801ea80:	dbf1      	blt.n	801ea66 <__swhatbuf_r+0x12>
 801ea82:	9a01      	ldr	r2, [sp, #4]
 801ea84:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801ea88:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801ea8c:	425a      	negs	r2, r3
 801ea8e:	415a      	adcs	r2, r3
 801ea90:	602a      	str	r2, [r5, #0]
 801ea92:	e7ee      	b.n	801ea72 <__swhatbuf_r+0x1e>
 801ea94:	2340      	movs	r3, #64	; 0x40
 801ea96:	2000      	movs	r0, #0
 801ea98:	6023      	str	r3, [r4, #0]
 801ea9a:	b016      	add	sp, #88	; 0x58
 801ea9c:	bd70      	pop	{r4, r5, r6, pc}
	...

0801eaa0 <__smakebuf_r>:
 801eaa0:	898b      	ldrh	r3, [r1, #12]
 801eaa2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801eaa4:	079d      	lsls	r5, r3, #30
 801eaa6:	4606      	mov	r6, r0
 801eaa8:	460c      	mov	r4, r1
 801eaaa:	d507      	bpl.n	801eabc <__smakebuf_r+0x1c>
 801eaac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801eab0:	6023      	str	r3, [r4, #0]
 801eab2:	6123      	str	r3, [r4, #16]
 801eab4:	2301      	movs	r3, #1
 801eab6:	6163      	str	r3, [r4, #20]
 801eab8:	b002      	add	sp, #8
 801eaba:	bd70      	pop	{r4, r5, r6, pc}
 801eabc:	ab01      	add	r3, sp, #4
 801eabe:	466a      	mov	r2, sp
 801eac0:	f7ff ffc8 	bl	801ea54 <__swhatbuf_r>
 801eac4:	9900      	ldr	r1, [sp, #0]
 801eac6:	4605      	mov	r5, r0
 801eac8:	4630      	mov	r0, r6
 801eaca:	f000 f895 	bl	801ebf8 <_malloc_r>
 801eace:	b948      	cbnz	r0, 801eae4 <__smakebuf_r+0x44>
 801ead0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ead4:	059a      	lsls	r2, r3, #22
 801ead6:	d4ef      	bmi.n	801eab8 <__smakebuf_r+0x18>
 801ead8:	f023 0303 	bic.w	r3, r3, #3
 801eadc:	f043 0302 	orr.w	r3, r3, #2
 801eae0:	81a3      	strh	r3, [r4, #12]
 801eae2:	e7e3      	b.n	801eaac <__smakebuf_r+0xc>
 801eae4:	4b0d      	ldr	r3, [pc, #52]	; (801eb1c <__smakebuf_r+0x7c>)
 801eae6:	62b3      	str	r3, [r6, #40]	; 0x28
 801eae8:	89a3      	ldrh	r3, [r4, #12]
 801eaea:	6020      	str	r0, [r4, #0]
 801eaec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801eaf0:	81a3      	strh	r3, [r4, #12]
 801eaf2:	9b00      	ldr	r3, [sp, #0]
 801eaf4:	6163      	str	r3, [r4, #20]
 801eaf6:	9b01      	ldr	r3, [sp, #4]
 801eaf8:	6120      	str	r0, [r4, #16]
 801eafa:	b15b      	cbz	r3, 801eb14 <__smakebuf_r+0x74>
 801eafc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801eb00:	4630      	mov	r0, r6
 801eb02:	f000 f9b9 	bl	801ee78 <_isatty_r>
 801eb06:	b128      	cbz	r0, 801eb14 <__smakebuf_r+0x74>
 801eb08:	89a3      	ldrh	r3, [r4, #12]
 801eb0a:	f023 0303 	bic.w	r3, r3, #3
 801eb0e:	f043 0301 	orr.w	r3, r3, #1
 801eb12:	81a3      	strh	r3, [r4, #12]
 801eb14:	89a0      	ldrh	r0, [r4, #12]
 801eb16:	4305      	orrs	r5, r0
 801eb18:	81a5      	strh	r5, [r4, #12]
 801eb1a:	e7cd      	b.n	801eab8 <__smakebuf_r+0x18>
 801eb1c:	0801e8ad 	.word	0x0801e8ad

0801eb20 <_free_r>:
 801eb20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801eb22:	2900      	cmp	r1, #0
 801eb24:	d044      	beq.n	801ebb0 <_free_r+0x90>
 801eb26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801eb2a:	9001      	str	r0, [sp, #4]
 801eb2c:	2b00      	cmp	r3, #0
 801eb2e:	f1a1 0404 	sub.w	r4, r1, #4
 801eb32:	bfb8      	it	lt
 801eb34:	18e4      	addlt	r4, r4, r3
 801eb36:	f000 f9c1 	bl	801eebc <__malloc_lock>
 801eb3a:	4a1e      	ldr	r2, [pc, #120]	; (801ebb4 <_free_r+0x94>)
 801eb3c:	9801      	ldr	r0, [sp, #4]
 801eb3e:	6813      	ldr	r3, [r2, #0]
 801eb40:	b933      	cbnz	r3, 801eb50 <_free_r+0x30>
 801eb42:	6063      	str	r3, [r4, #4]
 801eb44:	6014      	str	r4, [r2, #0]
 801eb46:	b003      	add	sp, #12
 801eb48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801eb4c:	f000 b9bc 	b.w	801eec8 <__malloc_unlock>
 801eb50:	42a3      	cmp	r3, r4
 801eb52:	d908      	bls.n	801eb66 <_free_r+0x46>
 801eb54:	6825      	ldr	r5, [r4, #0]
 801eb56:	1961      	adds	r1, r4, r5
 801eb58:	428b      	cmp	r3, r1
 801eb5a:	bf01      	itttt	eq
 801eb5c:	6819      	ldreq	r1, [r3, #0]
 801eb5e:	685b      	ldreq	r3, [r3, #4]
 801eb60:	1949      	addeq	r1, r1, r5
 801eb62:	6021      	streq	r1, [r4, #0]
 801eb64:	e7ed      	b.n	801eb42 <_free_r+0x22>
 801eb66:	461a      	mov	r2, r3
 801eb68:	685b      	ldr	r3, [r3, #4]
 801eb6a:	b10b      	cbz	r3, 801eb70 <_free_r+0x50>
 801eb6c:	42a3      	cmp	r3, r4
 801eb6e:	d9fa      	bls.n	801eb66 <_free_r+0x46>
 801eb70:	6811      	ldr	r1, [r2, #0]
 801eb72:	1855      	adds	r5, r2, r1
 801eb74:	42a5      	cmp	r5, r4
 801eb76:	d10b      	bne.n	801eb90 <_free_r+0x70>
 801eb78:	6824      	ldr	r4, [r4, #0]
 801eb7a:	4421      	add	r1, r4
 801eb7c:	1854      	adds	r4, r2, r1
 801eb7e:	42a3      	cmp	r3, r4
 801eb80:	6011      	str	r1, [r2, #0]
 801eb82:	d1e0      	bne.n	801eb46 <_free_r+0x26>
 801eb84:	681c      	ldr	r4, [r3, #0]
 801eb86:	685b      	ldr	r3, [r3, #4]
 801eb88:	6053      	str	r3, [r2, #4]
 801eb8a:	4421      	add	r1, r4
 801eb8c:	6011      	str	r1, [r2, #0]
 801eb8e:	e7da      	b.n	801eb46 <_free_r+0x26>
 801eb90:	d902      	bls.n	801eb98 <_free_r+0x78>
 801eb92:	230c      	movs	r3, #12
 801eb94:	6003      	str	r3, [r0, #0]
 801eb96:	e7d6      	b.n	801eb46 <_free_r+0x26>
 801eb98:	6825      	ldr	r5, [r4, #0]
 801eb9a:	1961      	adds	r1, r4, r5
 801eb9c:	428b      	cmp	r3, r1
 801eb9e:	bf04      	itt	eq
 801eba0:	6819      	ldreq	r1, [r3, #0]
 801eba2:	685b      	ldreq	r3, [r3, #4]
 801eba4:	6063      	str	r3, [r4, #4]
 801eba6:	bf04      	itt	eq
 801eba8:	1949      	addeq	r1, r1, r5
 801ebaa:	6021      	streq	r1, [r4, #0]
 801ebac:	6054      	str	r4, [r2, #4]
 801ebae:	e7ca      	b.n	801eb46 <_free_r+0x26>
 801ebb0:	b003      	add	sp, #12
 801ebb2:	bd30      	pop	{r4, r5, pc}
 801ebb4:	200007f4 	.word	0x200007f4

0801ebb8 <sbrk_aligned>:
 801ebb8:	b570      	push	{r4, r5, r6, lr}
 801ebba:	4e0e      	ldr	r6, [pc, #56]	; (801ebf4 <sbrk_aligned+0x3c>)
 801ebbc:	460c      	mov	r4, r1
 801ebbe:	6831      	ldr	r1, [r6, #0]
 801ebc0:	4605      	mov	r5, r0
 801ebc2:	b911      	cbnz	r1, 801ebca <sbrk_aligned+0x12>
 801ebc4:	f000 f88c 	bl	801ece0 <_sbrk_r>
 801ebc8:	6030      	str	r0, [r6, #0]
 801ebca:	4621      	mov	r1, r4
 801ebcc:	4628      	mov	r0, r5
 801ebce:	f000 f887 	bl	801ece0 <_sbrk_r>
 801ebd2:	1c43      	adds	r3, r0, #1
 801ebd4:	d00a      	beq.n	801ebec <sbrk_aligned+0x34>
 801ebd6:	1cc4      	adds	r4, r0, #3
 801ebd8:	f024 0403 	bic.w	r4, r4, #3
 801ebdc:	42a0      	cmp	r0, r4
 801ebde:	d007      	beq.n	801ebf0 <sbrk_aligned+0x38>
 801ebe0:	1a21      	subs	r1, r4, r0
 801ebe2:	4628      	mov	r0, r5
 801ebe4:	f000 f87c 	bl	801ece0 <_sbrk_r>
 801ebe8:	3001      	adds	r0, #1
 801ebea:	d101      	bne.n	801ebf0 <sbrk_aligned+0x38>
 801ebec:	f04f 34ff 	mov.w	r4, #4294967295
 801ebf0:	4620      	mov	r0, r4
 801ebf2:	bd70      	pop	{r4, r5, r6, pc}
 801ebf4:	200007f8 	.word	0x200007f8

0801ebf8 <_malloc_r>:
 801ebf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ebfc:	1ccd      	adds	r5, r1, #3
 801ebfe:	f025 0503 	bic.w	r5, r5, #3
 801ec02:	3508      	adds	r5, #8
 801ec04:	2d0c      	cmp	r5, #12
 801ec06:	bf38      	it	cc
 801ec08:	250c      	movcc	r5, #12
 801ec0a:	2d00      	cmp	r5, #0
 801ec0c:	4607      	mov	r7, r0
 801ec0e:	db01      	blt.n	801ec14 <_malloc_r+0x1c>
 801ec10:	42a9      	cmp	r1, r5
 801ec12:	d905      	bls.n	801ec20 <_malloc_r+0x28>
 801ec14:	230c      	movs	r3, #12
 801ec16:	603b      	str	r3, [r7, #0]
 801ec18:	2600      	movs	r6, #0
 801ec1a:	4630      	mov	r0, r6
 801ec1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ec20:	4e2e      	ldr	r6, [pc, #184]	; (801ecdc <_malloc_r+0xe4>)
 801ec22:	f000 f94b 	bl	801eebc <__malloc_lock>
 801ec26:	6833      	ldr	r3, [r6, #0]
 801ec28:	461c      	mov	r4, r3
 801ec2a:	bb34      	cbnz	r4, 801ec7a <_malloc_r+0x82>
 801ec2c:	4629      	mov	r1, r5
 801ec2e:	4638      	mov	r0, r7
 801ec30:	f7ff ffc2 	bl	801ebb8 <sbrk_aligned>
 801ec34:	1c43      	adds	r3, r0, #1
 801ec36:	4604      	mov	r4, r0
 801ec38:	d14d      	bne.n	801ecd6 <_malloc_r+0xde>
 801ec3a:	6834      	ldr	r4, [r6, #0]
 801ec3c:	4626      	mov	r6, r4
 801ec3e:	2e00      	cmp	r6, #0
 801ec40:	d140      	bne.n	801ecc4 <_malloc_r+0xcc>
 801ec42:	6823      	ldr	r3, [r4, #0]
 801ec44:	4631      	mov	r1, r6
 801ec46:	4638      	mov	r0, r7
 801ec48:	eb04 0803 	add.w	r8, r4, r3
 801ec4c:	f000 f848 	bl	801ece0 <_sbrk_r>
 801ec50:	4580      	cmp	r8, r0
 801ec52:	d13a      	bne.n	801ecca <_malloc_r+0xd2>
 801ec54:	6821      	ldr	r1, [r4, #0]
 801ec56:	3503      	adds	r5, #3
 801ec58:	1a6d      	subs	r5, r5, r1
 801ec5a:	f025 0503 	bic.w	r5, r5, #3
 801ec5e:	3508      	adds	r5, #8
 801ec60:	2d0c      	cmp	r5, #12
 801ec62:	bf38      	it	cc
 801ec64:	250c      	movcc	r5, #12
 801ec66:	4629      	mov	r1, r5
 801ec68:	4638      	mov	r0, r7
 801ec6a:	f7ff ffa5 	bl	801ebb8 <sbrk_aligned>
 801ec6e:	3001      	adds	r0, #1
 801ec70:	d02b      	beq.n	801ecca <_malloc_r+0xd2>
 801ec72:	6823      	ldr	r3, [r4, #0]
 801ec74:	442b      	add	r3, r5
 801ec76:	6023      	str	r3, [r4, #0]
 801ec78:	e00e      	b.n	801ec98 <_malloc_r+0xa0>
 801ec7a:	6822      	ldr	r2, [r4, #0]
 801ec7c:	1b52      	subs	r2, r2, r5
 801ec7e:	d41e      	bmi.n	801ecbe <_malloc_r+0xc6>
 801ec80:	2a0b      	cmp	r2, #11
 801ec82:	d916      	bls.n	801ecb2 <_malloc_r+0xba>
 801ec84:	1961      	adds	r1, r4, r5
 801ec86:	42a3      	cmp	r3, r4
 801ec88:	6025      	str	r5, [r4, #0]
 801ec8a:	bf18      	it	ne
 801ec8c:	6059      	strne	r1, [r3, #4]
 801ec8e:	6863      	ldr	r3, [r4, #4]
 801ec90:	bf08      	it	eq
 801ec92:	6031      	streq	r1, [r6, #0]
 801ec94:	5162      	str	r2, [r4, r5]
 801ec96:	604b      	str	r3, [r1, #4]
 801ec98:	4638      	mov	r0, r7
 801ec9a:	f104 060b 	add.w	r6, r4, #11
 801ec9e:	f000 f913 	bl	801eec8 <__malloc_unlock>
 801eca2:	f026 0607 	bic.w	r6, r6, #7
 801eca6:	1d23      	adds	r3, r4, #4
 801eca8:	1af2      	subs	r2, r6, r3
 801ecaa:	d0b6      	beq.n	801ec1a <_malloc_r+0x22>
 801ecac:	1b9b      	subs	r3, r3, r6
 801ecae:	50a3      	str	r3, [r4, r2]
 801ecb0:	e7b3      	b.n	801ec1a <_malloc_r+0x22>
 801ecb2:	6862      	ldr	r2, [r4, #4]
 801ecb4:	42a3      	cmp	r3, r4
 801ecb6:	bf0c      	ite	eq
 801ecb8:	6032      	streq	r2, [r6, #0]
 801ecba:	605a      	strne	r2, [r3, #4]
 801ecbc:	e7ec      	b.n	801ec98 <_malloc_r+0xa0>
 801ecbe:	4623      	mov	r3, r4
 801ecc0:	6864      	ldr	r4, [r4, #4]
 801ecc2:	e7b2      	b.n	801ec2a <_malloc_r+0x32>
 801ecc4:	4634      	mov	r4, r6
 801ecc6:	6876      	ldr	r6, [r6, #4]
 801ecc8:	e7b9      	b.n	801ec3e <_malloc_r+0x46>
 801ecca:	230c      	movs	r3, #12
 801eccc:	603b      	str	r3, [r7, #0]
 801ecce:	4638      	mov	r0, r7
 801ecd0:	f000 f8fa 	bl	801eec8 <__malloc_unlock>
 801ecd4:	e7a1      	b.n	801ec1a <_malloc_r+0x22>
 801ecd6:	6025      	str	r5, [r4, #0]
 801ecd8:	e7de      	b.n	801ec98 <_malloc_r+0xa0>
 801ecda:	bf00      	nop
 801ecdc:	200007f4 	.word	0x200007f4

0801ece0 <_sbrk_r>:
 801ece0:	b538      	push	{r3, r4, r5, lr}
 801ece2:	4d06      	ldr	r5, [pc, #24]	; (801ecfc <_sbrk_r+0x1c>)
 801ece4:	2300      	movs	r3, #0
 801ece6:	4604      	mov	r4, r0
 801ece8:	4608      	mov	r0, r1
 801ecea:	602b      	str	r3, [r5, #0]
 801ecec:	f7f7 fc54 	bl	8016598 <_sbrk>
 801ecf0:	1c43      	adds	r3, r0, #1
 801ecf2:	d102      	bne.n	801ecfa <_sbrk_r+0x1a>
 801ecf4:	682b      	ldr	r3, [r5, #0]
 801ecf6:	b103      	cbz	r3, 801ecfa <_sbrk_r+0x1a>
 801ecf8:	6023      	str	r3, [r4, #0]
 801ecfa:	bd38      	pop	{r3, r4, r5, pc}
 801ecfc:	200007fc 	.word	0x200007fc

0801ed00 <_raise_r>:
 801ed00:	291f      	cmp	r1, #31
 801ed02:	b538      	push	{r3, r4, r5, lr}
 801ed04:	4604      	mov	r4, r0
 801ed06:	460d      	mov	r5, r1
 801ed08:	d904      	bls.n	801ed14 <_raise_r+0x14>
 801ed0a:	2316      	movs	r3, #22
 801ed0c:	6003      	str	r3, [r0, #0]
 801ed0e:	f04f 30ff 	mov.w	r0, #4294967295
 801ed12:	bd38      	pop	{r3, r4, r5, pc}
 801ed14:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801ed16:	b112      	cbz	r2, 801ed1e <_raise_r+0x1e>
 801ed18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ed1c:	b94b      	cbnz	r3, 801ed32 <_raise_r+0x32>
 801ed1e:	4620      	mov	r0, r4
 801ed20:	f000 f830 	bl	801ed84 <_getpid_r>
 801ed24:	462a      	mov	r2, r5
 801ed26:	4601      	mov	r1, r0
 801ed28:	4620      	mov	r0, r4
 801ed2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ed2e:	f000 b817 	b.w	801ed60 <_kill_r>
 801ed32:	2b01      	cmp	r3, #1
 801ed34:	d00a      	beq.n	801ed4c <_raise_r+0x4c>
 801ed36:	1c59      	adds	r1, r3, #1
 801ed38:	d103      	bne.n	801ed42 <_raise_r+0x42>
 801ed3a:	2316      	movs	r3, #22
 801ed3c:	6003      	str	r3, [r0, #0]
 801ed3e:	2001      	movs	r0, #1
 801ed40:	e7e7      	b.n	801ed12 <_raise_r+0x12>
 801ed42:	2400      	movs	r4, #0
 801ed44:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801ed48:	4628      	mov	r0, r5
 801ed4a:	4798      	blx	r3
 801ed4c:	2000      	movs	r0, #0
 801ed4e:	e7e0      	b.n	801ed12 <_raise_r+0x12>

0801ed50 <raise>:
 801ed50:	4b02      	ldr	r3, [pc, #8]	; (801ed5c <raise+0xc>)
 801ed52:	4601      	mov	r1, r0
 801ed54:	6818      	ldr	r0, [r3, #0]
 801ed56:	f7ff bfd3 	b.w	801ed00 <_raise_r>
 801ed5a:	bf00      	nop
 801ed5c:	200001ec 	.word	0x200001ec

0801ed60 <_kill_r>:
 801ed60:	b538      	push	{r3, r4, r5, lr}
 801ed62:	4d07      	ldr	r5, [pc, #28]	; (801ed80 <_kill_r+0x20>)
 801ed64:	2300      	movs	r3, #0
 801ed66:	4604      	mov	r4, r0
 801ed68:	4608      	mov	r0, r1
 801ed6a:	4611      	mov	r1, r2
 801ed6c:	602b      	str	r3, [r5, #0]
 801ed6e:	f7f7 fb8b 	bl	8016488 <_kill>
 801ed72:	1c43      	adds	r3, r0, #1
 801ed74:	d102      	bne.n	801ed7c <_kill_r+0x1c>
 801ed76:	682b      	ldr	r3, [r5, #0]
 801ed78:	b103      	cbz	r3, 801ed7c <_kill_r+0x1c>
 801ed7a:	6023      	str	r3, [r4, #0]
 801ed7c:	bd38      	pop	{r3, r4, r5, pc}
 801ed7e:	bf00      	nop
 801ed80:	200007fc 	.word	0x200007fc

0801ed84 <_getpid_r>:
 801ed84:	f7f7 bb78 	b.w	8016478 <_getpid>

0801ed88 <__sread>:
 801ed88:	b510      	push	{r4, lr}
 801ed8a:	460c      	mov	r4, r1
 801ed8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ed90:	f000 f8a0 	bl	801eed4 <_read_r>
 801ed94:	2800      	cmp	r0, #0
 801ed96:	bfab      	itete	ge
 801ed98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801ed9a:	89a3      	ldrhlt	r3, [r4, #12]
 801ed9c:	181b      	addge	r3, r3, r0
 801ed9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801eda2:	bfac      	ite	ge
 801eda4:	6563      	strge	r3, [r4, #84]	; 0x54
 801eda6:	81a3      	strhlt	r3, [r4, #12]
 801eda8:	bd10      	pop	{r4, pc}

0801edaa <__swrite>:
 801edaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801edae:	461f      	mov	r7, r3
 801edb0:	898b      	ldrh	r3, [r1, #12]
 801edb2:	05db      	lsls	r3, r3, #23
 801edb4:	4605      	mov	r5, r0
 801edb6:	460c      	mov	r4, r1
 801edb8:	4616      	mov	r6, r2
 801edba:	d505      	bpl.n	801edc8 <__swrite+0x1e>
 801edbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801edc0:	2302      	movs	r3, #2
 801edc2:	2200      	movs	r2, #0
 801edc4:	f000 f868 	bl	801ee98 <_lseek_r>
 801edc8:	89a3      	ldrh	r3, [r4, #12]
 801edca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801edce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801edd2:	81a3      	strh	r3, [r4, #12]
 801edd4:	4632      	mov	r2, r6
 801edd6:	463b      	mov	r3, r7
 801edd8:	4628      	mov	r0, r5
 801edda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801edde:	f000 b817 	b.w	801ee10 <_write_r>

0801ede2 <__sseek>:
 801ede2:	b510      	push	{r4, lr}
 801ede4:	460c      	mov	r4, r1
 801ede6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801edea:	f000 f855 	bl	801ee98 <_lseek_r>
 801edee:	1c43      	adds	r3, r0, #1
 801edf0:	89a3      	ldrh	r3, [r4, #12]
 801edf2:	bf15      	itete	ne
 801edf4:	6560      	strne	r0, [r4, #84]	; 0x54
 801edf6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801edfa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801edfe:	81a3      	strheq	r3, [r4, #12]
 801ee00:	bf18      	it	ne
 801ee02:	81a3      	strhne	r3, [r4, #12]
 801ee04:	bd10      	pop	{r4, pc}

0801ee06 <__sclose>:
 801ee06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ee0a:	f000 b813 	b.w	801ee34 <_close_r>
	...

0801ee10 <_write_r>:
 801ee10:	b538      	push	{r3, r4, r5, lr}
 801ee12:	4d07      	ldr	r5, [pc, #28]	; (801ee30 <_write_r+0x20>)
 801ee14:	4604      	mov	r4, r0
 801ee16:	4608      	mov	r0, r1
 801ee18:	4611      	mov	r1, r2
 801ee1a:	2200      	movs	r2, #0
 801ee1c:	602a      	str	r2, [r5, #0]
 801ee1e:	461a      	mov	r2, r3
 801ee20:	f7f7 fb69 	bl	80164f6 <_write>
 801ee24:	1c43      	adds	r3, r0, #1
 801ee26:	d102      	bne.n	801ee2e <_write_r+0x1e>
 801ee28:	682b      	ldr	r3, [r5, #0]
 801ee2a:	b103      	cbz	r3, 801ee2e <_write_r+0x1e>
 801ee2c:	6023      	str	r3, [r4, #0]
 801ee2e:	bd38      	pop	{r3, r4, r5, pc}
 801ee30:	200007fc 	.word	0x200007fc

0801ee34 <_close_r>:
 801ee34:	b538      	push	{r3, r4, r5, lr}
 801ee36:	4d06      	ldr	r5, [pc, #24]	; (801ee50 <_close_r+0x1c>)
 801ee38:	2300      	movs	r3, #0
 801ee3a:	4604      	mov	r4, r0
 801ee3c:	4608      	mov	r0, r1
 801ee3e:	602b      	str	r3, [r5, #0]
 801ee40:	f7f7 fb75 	bl	801652e <_close>
 801ee44:	1c43      	adds	r3, r0, #1
 801ee46:	d102      	bne.n	801ee4e <_close_r+0x1a>
 801ee48:	682b      	ldr	r3, [r5, #0]
 801ee4a:	b103      	cbz	r3, 801ee4e <_close_r+0x1a>
 801ee4c:	6023      	str	r3, [r4, #0]
 801ee4e:	bd38      	pop	{r3, r4, r5, pc}
 801ee50:	200007fc 	.word	0x200007fc

0801ee54 <_fstat_r>:
 801ee54:	b538      	push	{r3, r4, r5, lr}
 801ee56:	4d07      	ldr	r5, [pc, #28]	; (801ee74 <_fstat_r+0x20>)
 801ee58:	2300      	movs	r3, #0
 801ee5a:	4604      	mov	r4, r0
 801ee5c:	4608      	mov	r0, r1
 801ee5e:	4611      	mov	r1, r2
 801ee60:	602b      	str	r3, [r5, #0]
 801ee62:	f7f7 fb70 	bl	8016546 <_fstat>
 801ee66:	1c43      	adds	r3, r0, #1
 801ee68:	d102      	bne.n	801ee70 <_fstat_r+0x1c>
 801ee6a:	682b      	ldr	r3, [r5, #0]
 801ee6c:	b103      	cbz	r3, 801ee70 <_fstat_r+0x1c>
 801ee6e:	6023      	str	r3, [r4, #0]
 801ee70:	bd38      	pop	{r3, r4, r5, pc}
 801ee72:	bf00      	nop
 801ee74:	200007fc 	.word	0x200007fc

0801ee78 <_isatty_r>:
 801ee78:	b538      	push	{r3, r4, r5, lr}
 801ee7a:	4d06      	ldr	r5, [pc, #24]	; (801ee94 <_isatty_r+0x1c>)
 801ee7c:	2300      	movs	r3, #0
 801ee7e:	4604      	mov	r4, r0
 801ee80:	4608      	mov	r0, r1
 801ee82:	602b      	str	r3, [r5, #0]
 801ee84:	f7f7 fb6f 	bl	8016566 <_isatty>
 801ee88:	1c43      	adds	r3, r0, #1
 801ee8a:	d102      	bne.n	801ee92 <_isatty_r+0x1a>
 801ee8c:	682b      	ldr	r3, [r5, #0]
 801ee8e:	b103      	cbz	r3, 801ee92 <_isatty_r+0x1a>
 801ee90:	6023      	str	r3, [r4, #0]
 801ee92:	bd38      	pop	{r3, r4, r5, pc}
 801ee94:	200007fc 	.word	0x200007fc

0801ee98 <_lseek_r>:
 801ee98:	b538      	push	{r3, r4, r5, lr}
 801ee9a:	4d07      	ldr	r5, [pc, #28]	; (801eeb8 <_lseek_r+0x20>)
 801ee9c:	4604      	mov	r4, r0
 801ee9e:	4608      	mov	r0, r1
 801eea0:	4611      	mov	r1, r2
 801eea2:	2200      	movs	r2, #0
 801eea4:	602a      	str	r2, [r5, #0]
 801eea6:	461a      	mov	r2, r3
 801eea8:	f7f7 fb68 	bl	801657c <_lseek>
 801eeac:	1c43      	adds	r3, r0, #1
 801eeae:	d102      	bne.n	801eeb6 <_lseek_r+0x1e>
 801eeb0:	682b      	ldr	r3, [r5, #0]
 801eeb2:	b103      	cbz	r3, 801eeb6 <_lseek_r+0x1e>
 801eeb4:	6023      	str	r3, [r4, #0]
 801eeb6:	bd38      	pop	{r3, r4, r5, pc}
 801eeb8:	200007fc 	.word	0x200007fc

0801eebc <__malloc_lock>:
 801eebc:	4801      	ldr	r0, [pc, #4]	; (801eec4 <__malloc_lock+0x8>)
 801eebe:	f7ff bdc7 	b.w	801ea50 <__retarget_lock_acquire_recursive>
 801eec2:	bf00      	nop
 801eec4:	200007f0 	.word	0x200007f0

0801eec8 <__malloc_unlock>:
 801eec8:	4801      	ldr	r0, [pc, #4]	; (801eed0 <__malloc_unlock+0x8>)
 801eeca:	f7ff bdc2 	b.w	801ea52 <__retarget_lock_release_recursive>
 801eece:	bf00      	nop
 801eed0:	200007f0 	.word	0x200007f0

0801eed4 <_read_r>:
 801eed4:	b538      	push	{r3, r4, r5, lr}
 801eed6:	4d07      	ldr	r5, [pc, #28]	; (801eef4 <_read_r+0x20>)
 801eed8:	4604      	mov	r4, r0
 801eeda:	4608      	mov	r0, r1
 801eedc:	4611      	mov	r1, r2
 801eede:	2200      	movs	r2, #0
 801eee0:	602a      	str	r2, [r5, #0]
 801eee2:	461a      	mov	r2, r3
 801eee4:	f7f7 faea 	bl	80164bc <_read>
 801eee8:	1c43      	adds	r3, r0, #1
 801eeea:	d102      	bne.n	801eef2 <_read_r+0x1e>
 801eeec:	682b      	ldr	r3, [r5, #0]
 801eeee:	b103      	cbz	r3, 801eef2 <_read_r+0x1e>
 801eef0:	6023      	str	r3, [r4, #0]
 801eef2:	bd38      	pop	{r3, r4, r5, pc}
 801eef4:	200007fc 	.word	0x200007fc

0801eef8 <_init>:
 801eef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eefa:	bf00      	nop
 801eefc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801eefe:	bc08      	pop	{r3}
 801ef00:	469e      	mov	lr, r3
 801ef02:	4770      	bx	lr

0801ef04 <_fini>:
 801ef04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ef06:	bf00      	nop
 801ef08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ef0a:	bc08      	pop	{r3}
 801ef0c:	469e      	mov	lr, r3
 801ef0e:	4770      	bx	lr
