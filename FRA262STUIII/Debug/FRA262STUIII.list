
FRA262STUIII.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001df10  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000b104  0801e0b0  0801e0b0  0002e0b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080291b4  080291b4  000401ec  2**0
                  CONTENTS
  4 .ARM          00000008  080291b4  080291b4  000391b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080291bc  080291bc  000401ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080291bc  080291bc  000391bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080291c4  080291c4  000391c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  080291c8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000544  200001f0  080293b4  000401f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000734  080293b4  00040734  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000401ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0010518c  00000000  00000000  0004021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dc8  00000000  00000000  001453a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00004a28  00000000  00000000  00148170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00004978  00000000  00000000  0014cb98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cb84  00000000  00000000  00151510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000221af  00000000  00000000  0016e094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00478526  00000000  00000000  00190243  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00608769  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000163f0  00000000  00000000  006087bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801e098 	.word	0x0801e098

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	0801e098 	.word	0x0801e098

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b974 	b.w	8000ef8 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468e      	mov	lr, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14d      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	4694      	mov	ip, r2
 8000c3a:	d969      	bls.n	8000d10 <__udivmoddi4+0xe8>
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b152      	cbz	r2, 8000c58 <__udivmoddi4+0x30>
 8000c42:	fa01 f302 	lsl.w	r3, r1, r2
 8000c46:	f1c2 0120 	rsb	r1, r2, #32
 8000c4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c52:	ea41 0e03 	orr.w	lr, r1, r3
 8000c56:	4094      	lsls	r4, r2
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	0c21      	lsrs	r1, r4, #16
 8000c5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c62:	fa1f f78c 	uxth.w	r7, ip
 8000c66:	fb08 e316 	mls	r3, r8, r6, lr
 8000c6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c6e:	fb06 f107 	mul.w	r1, r6, r7
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7e:	f080 811f 	bcs.w	8000ec0 <__udivmoddi4+0x298>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 811c 	bls.w	8000ec0 <__udivmoddi4+0x298>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 f707 	mul.w	r7, r0, r7
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x92>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cac:	f080 810a 	bcs.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	f240 8107 	bls.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	1be4      	subs	r4, r4, r7
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	b11d      	cbz	r5, 8000ccc <__udivmoddi4+0xa4>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xc2>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	f000 80ef 	beq.w	8000eba <__udivmoddi4+0x292>
 8000cdc:	2600      	movs	r6, #0
 8000cde:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f683 	clz	r6, r3
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d14a      	bne.n	8000d88 <__udivmoddi4+0x160>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd4>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80f9 	bhi.w	8000eee <__udivmoddi4+0x2c6>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	469e      	mov	lr, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa4>
 8000d0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xec>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 8092 	bne.w	8000e42 <__udivmoddi4+0x21a>
 8000d1e:	eba1 010c 	sub.w	r1, r1, ip
 8000d22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d26:	fa1f fe8c 	uxth.w	lr, ip
 8000d2a:	2601      	movs	r6, #1
 8000d2c:	0c20      	lsrs	r0, r4, #16
 8000d2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d32:	fb07 1113 	mls	r1, r7, r3, r1
 8000d36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3a:	fb0e f003 	mul.w	r0, lr, r3
 8000d3e:	4288      	cmp	r0, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x12c>
 8000d42:	eb1c 0101 	adds.w	r1, ip, r1
 8000d46:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x12a>
 8000d4c:	4288      	cmp	r0, r1
 8000d4e:	f200 80cb 	bhi.w	8000ee8 <__udivmoddi4+0x2c0>
 8000d52:	4643      	mov	r3, r8
 8000d54:	1a09      	subs	r1, r1, r0
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d64:	fb0e fe00 	mul.w	lr, lr, r0
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x156>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d74:	d202      	bcs.n	8000d7c <__udivmoddi4+0x154>
 8000d76:	45a6      	cmp	lr, r4
 8000d78:	f200 80bb 	bhi.w	8000ef2 <__udivmoddi4+0x2ca>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	eba4 040e 	sub.w	r4, r4, lr
 8000d82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d86:	e79c      	b.n	8000cc2 <__udivmoddi4+0x9a>
 8000d88:	f1c6 0720 	rsb	r7, r6, #32
 8000d8c:	40b3      	lsls	r3, r6
 8000d8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d96:	fa20 f407 	lsr.w	r4, r0, r7
 8000d9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	40f9      	lsrs	r1, r7
 8000da2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da6:	fa00 f306 	lsl.w	r3, r0, r6
 8000daa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dae:	0c20      	lsrs	r0, r4, #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fb09 1118 	mls	r1, r9, r8, r1
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dc0:	4288      	cmp	r0, r1
 8000dc2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc6:	d90b      	bls.n	8000de0 <__udivmoddi4+0x1b8>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dd0:	f080 8088 	bcs.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dd4:	4288      	cmp	r0, r1
 8000dd6:	f240 8085 	bls.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dda:	f1a8 0802 	sub.w	r8, r8, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	1a09      	subs	r1, r1, r0
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000de8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000df0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df4:	458e      	cmp	lr, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x1e2>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e00:	d26c      	bcs.n	8000edc <__udivmoddi4+0x2b4>
 8000e02:	458e      	cmp	lr, r1
 8000e04:	d96a      	bls.n	8000edc <__udivmoddi4+0x2b4>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e12:	eba1 010e 	sub.w	r1, r1, lr
 8000e16:	42a1      	cmp	r1, r4
 8000e18:	46c8      	mov	r8, r9
 8000e1a:	46a6      	mov	lr, r4
 8000e1c:	d356      	bcc.n	8000ecc <__udivmoddi4+0x2a4>
 8000e1e:	d053      	beq.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x212>
 8000e22:	ebb3 0208 	subs.w	r2, r3, r8
 8000e26:	eb61 010e 	sbc.w	r1, r1, lr
 8000e2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e32:	40f1      	lsrs	r1, r6
 8000e34:	431f      	orrs	r7, r3
 8000e36:	e9c5 7100 	strd	r7, r1, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	f1c2 0320 	rsb	r3, r2, #32
 8000e46:	40d8      	lsrs	r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e50:	4091      	lsls	r1, r2
 8000e52:	4301      	orrs	r1, r0
 8000e54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e58:	fa1f fe8c 	uxth.w	lr, ip
 8000e5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e60:	fb07 3610 	mls	r6, r7, r0, r3
 8000e64:	0c0b      	lsrs	r3, r1, #16
 8000e66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	fa04 f402 	lsl.w	r4, r4, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x260>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e7e:	d22f      	bcs.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e80:	429e      	cmp	r6, r3
 8000e82:	d92d      	bls.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	b289      	uxth	r1, r1
 8000e8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e90:	fb07 3316 	mls	r3, r7, r6, r3
 8000e94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e98:	fb06 f30e 	mul.w	r3, r6, lr
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x28a>
 8000ea0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ea8:	d216      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d914      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eae:	3e02      	subs	r6, #2
 8000eb0:	4461      	add	r1, ip
 8000eb2:	1ac9      	subs	r1, r1, r3
 8000eb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eb8:	e738      	b.n	8000d2c <__udivmoddi4+0x104>
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e705      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e3      	b.n	8000c8c <__udivmoddi4+0x64>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6f8      	b.n	8000cba <__udivmoddi4+0x92>
 8000ec8:	454b      	cmp	r3, r9
 8000eca:	d2a9      	bcs.n	8000e20 <__udivmoddi4+0x1f8>
 8000ecc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7a3      	b.n	8000e20 <__udivmoddi4+0x1f8>
 8000ed8:	4646      	mov	r6, r8
 8000eda:	e7ea      	b.n	8000eb2 <__udivmoddi4+0x28a>
 8000edc:	4620      	mov	r0, r4
 8000ede:	e794      	b.n	8000e0a <__udivmoddi4+0x1e2>
 8000ee0:	4640      	mov	r0, r8
 8000ee2:	e7d1      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ee4:	46d0      	mov	r8, sl
 8000ee6:	e77b      	b.n	8000de0 <__udivmoddi4+0x1b8>
 8000ee8:	3b02      	subs	r3, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	e732      	b.n	8000d54 <__udivmoddi4+0x12c>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e709      	b.n	8000d06 <__udivmoddi4+0xde>
 8000ef2:	4464      	add	r4, ip
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	e742      	b.n	8000d7e <__udivmoddi4+0x156>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	6039      	str	r1, [r7, #0]
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <_ZN5Eigen8internal5all_tC1Ev>:

//--------------------------------------------------------------------------------
// Handling of all
//--------------------------------------------------------------------------------

struct all_t { all_t() {} };
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4618      	mov	r0, r3
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
	...

08000f2c <HAL_UARTEx_RxEventCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
///////////////////// [UART UI Base System] /////////////////////
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	460b      	mov	r3, r1
 8000f36:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART2)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a3d      	ldr	r2, [pc, #244]	; (8001034 <HAL_UARTEx_RxEventCallback+0x108>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d173      	bne.n	800102a <HAL_UARTEx_RxEventCallback+0xfe>
	{
		oldPos_uart = newPos_uart;  // Update the last position before copying new data
 8000f42:	4b3d      	ldr	r3, [pc, #244]	; (8001038 <HAL_UARTEx_RxEventCallback+0x10c>)
 8000f44:	881a      	ldrh	r2, [r3, #0]
 8000f46:	4b3d      	ldr	r3, [pc, #244]	; (800103c <HAL_UARTEx_RxEventCallback+0x110>)
 8000f48:	801a      	strh	r2, [r3, #0]
		datasize_uart = Size;
 8000f4a:	4a3d      	ldr	r2, [pc, #244]	; (8001040 <HAL_UARTEx_RxEventCallback+0x114>)
 8000f4c:	887b      	ldrh	r3, [r7, #2]
 8000f4e:	8013      	strh	r3, [r2, #0]
		/* If the data in large and it is about to exceed the buffer size, we have to route it to the start of the buffer
		 * This is to maintain the circular buffer
		 * The old data in the main buffer will be overlapped
		 */
		if (oldPos_uart+Size > MainBuf_SIZE)  // If the current position + new data size is greater than the main buffer
 8000f50:	4b3a      	ldr	r3, [pc, #232]	; (800103c <HAL_UARTEx_RxEventCallback+0x110>)
 8000f52:	881b      	ldrh	r3, [r3, #0]
 8000f54:	461a      	mov	r2, r3
 8000f56:	887b      	ldrh	r3, [r7, #2]
 8000f58:	4413      	add	r3, r2
 8000f5a:	2b20      	cmp	r3, #32
 8000f5c:	dd22      	ble.n	8000fa4 <HAL_UARTEx_RxEventCallback+0x78>
		{
			uint16_t datatocopy = MainBuf_SIZE - oldPos_uart;  // find out how much space is left in the main buffer
 8000f5e:	4b37      	ldr	r3, [pc, #220]	; (800103c <HAL_UARTEx_RxEventCallback+0x110>)
 8000f60:	881b      	ldrh	r3, [r3, #0]
 8000f62:	f1c3 0320 	rsb	r3, r3, #32
 8000f66:	81fb      	strh	r3, [r7, #14]
			memcpy ((uint8_t *)MainBuf + oldPos_uart, RxBuf, datatocopy);  // copy data in that remaining space
 8000f68:	4b34      	ldr	r3, [pc, #208]	; (800103c <HAL_UARTEx_RxEventCallback+0x110>)
 8000f6a:	881b      	ldrh	r3, [r3, #0]
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	4b35      	ldr	r3, [pc, #212]	; (8001044 <HAL_UARTEx_RxEventCallback+0x118>)
 8000f70:	4413      	add	r3, r2
 8000f72:	89fa      	ldrh	r2, [r7, #14]
 8000f74:	4934      	ldr	r1, [pc, #208]	; (8001048 <HAL_UARTEx_RxEventCallback+0x11c>)
 8000f76:	4618      	mov	r0, r3
 8000f78:	f01c f8b6 	bl	801d0e8 <memcpy>

			oldPos_uart = 0;  // point to the start of the buffer
 8000f7c:	4b2f      	ldr	r3, [pc, #188]	; (800103c <HAL_UARTEx_RxEventCallback+0x110>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)MainBuf, (uint8_t *)RxBuf+datatocopy, (Size-datatocopy));  // copy the remaining data
 8000f82:	89fb      	ldrh	r3, [r7, #14]
 8000f84:	4a30      	ldr	r2, [pc, #192]	; (8001048 <HAL_UARTEx_RxEventCallback+0x11c>)
 8000f86:	1899      	adds	r1, r3, r2
 8000f88:	887a      	ldrh	r2, [r7, #2]
 8000f8a:	89fb      	ldrh	r3, [r7, #14]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	461a      	mov	r2, r3
 8000f90:	482c      	ldr	r0, [pc, #176]	; (8001044 <HAL_UARTEx_RxEventCallback+0x118>)
 8000f92:	f01c f8a9 	bl	801d0e8 <memcpy>
			newPos_uart = (Size-datatocopy);  // update the position
 8000f96:	887a      	ldrh	r2, [r7, #2]
 8000f98:	89fb      	ldrh	r3, [r7, #14]
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	b29a      	uxth	r2, r3
 8000f9e:	4b26      	ldr	r3, [pc, #152]	; (8001038 <HAL_UARTEx_RxEventCallback+0x10c>)
 8000fa0:	801a      	strh	r2, [r3, #0]
 8000fa2:	e010      	b.n	8000fc6 <HAL_UARTEx_RxEventCallback+0x9a>
		/* if the current position + new data size is less than the main buffer
		 * we will simply copy the data into the buffer and update the position
		 */
		else
		{
			memcpy ((uint8_t *)MainBuf + oldPos_uart, RxBuf, Size);
 8000fa4:	4b25      	ldr	r3, [pc, #148]	; (800103c <HAL_UARTEx_RxEventCallback+0x110>)
 8000fa6:	881b      	ldrh	r3, [r3, #0]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	4b26      	ldr	r3, [pc, #152]	; (8001044 <HAL_UARTEx_RxEventCallback+0x118>)
 8000fac:	4413      	add	r3, r2
 8000fae:	887a      	ldrh	r2, [r7, #2]
 8000fb0:	4925      	ldr	r1, [pc, #148]	; (8001048 <HAL_UARTEx_RxEventCallback+0x11c>)
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f01c f898 	bl	801d0e8 <memcpy>
			newPos_uart = Size + oldPos_uart;
 8000fb8:	4b20      	ldr	r3, [pc, #128]	; (800103c <HAL_UARTEx_RxEventCallback+0x110>)
 8000fba:	881a      	ldrh	r2, [r3, #0]
 8000fbc:	887b      	ldrh	r3, [r7, #2]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	b29a      	uxth	r2, r3
 8000fc2:	4b1d      	ldr	r3, [pc, #116]	; (8001038 <HAL_UARTEx_RxEventCallback+0x10c>)
 8000fc4:	801a      	strh	r2, [r3, #0]
		}
		StartM = MainBuf[newPos_uart - datasize_uart]; // 0b1001xxxx for check start & mode
 8000fc6:	4b1c      	ldr	r3, [pc, #112]	; (8001038 <HAL_UARTEx_RxEventCallback+0x10c>)
 8000fc8:	881b      	ldrh	r3, [r3, #0]
 8000fca:	461a      	mov	r2, r3
 8000fcc:	4b1c      	ldr	r3, [pc, #112]	; (8001040 <HAL_UARTEx_RxEventCallback+0x114>)
 8000fce:	881b      	ldrh	r3, [r3, #0]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	4a1c      	ldr	r2, [pc, #112]	; (8001044 <HAL_UARTEx_RxEventCallback+0x118>)
 8000fd4:	5cd2      	ldrb	r2, [r2, r3]
 8000fd6:	4b1d      	ldr	r3, [pc, #116]	; (800104c <HAL_UARTEx_RxEventCallback+0x120>)
 8000fd8:	701a      	strb	r2, [r3, #0]
		chkStart = StartM >> 4; // for check "start" or nor
 8000fda:	4b1c      	ldr	r3, [pc, #112]	; (800104c <HAL_UARTEx_RxEventCallback+0x120>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	091b      	lsrs	r3, r3, #4
 8000fe0:	b2da      	uxtb	r2, r3
 8000fe2:	4b1b      	ldr	r3, [pc, #108]	; (8001050 <HAL_UARTEx_RxEventCallback+0x124>)
 8000fe4:	701a      	strb	r2, [r3, #0]
		NameM = (StartM & 15); // Check mode
 8000fe6:	4b19      	ldr	r3, [pc, #100]	; (800104c <HAL_UARTEx_RxEventCallback+0x120>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	f003 030f 	and.w	r3, r3, #15
 8000fee:	b2da      	uxtb	r2, r3
 8000ff0:	4b18      	ldr	r3, [pc, #96]	; (8001054 <HAL_UARTEx_RxEventCallback+0x128>)
 8000ff2:	701a      	strb	r2, [r3, #0]

		if (chkStart == 9){ // 0b1001
 8000ff4:	4b16      	ldr	r3, [pc, #88]	; (8001050 <HAL_UARTEx_RxEventCallback+0x124>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b09      	cmp	r3, #9
 8000ffa:	d109      	bne.n	8001010 <HAL_UARTEx_RxEventCallback+0xe4>
			if (NameM >= 1 && NameM <= 14){ // 15 work state or not
 8000ffc:	4b15      	ldr	r3, [pc, #84]	; (8001054 <HAL_UARTEx_RxEventCallback+0x128>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d005      	beq.n	8001010 <HAL_UARTEx_RxEventCallback+0xe4>
 8001004:	4b13      	ldr	r3, [pc, #76]	; (8001054 <HAL_UARTEx_RxEventCallback+0x128>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	2b0e      	cmp	r3, #14
 800100a:	d801      	bhi.n	8001010 <HAL_UARTEx_RxEventCallback+0xe4>
				All_mode_UARTUI();
 800100c:	f000 f828 	bl	8001060 <_Z15All_mode_UARTUIv>
			}
		}

		/* start the DMA again */
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *) RxBuf, RxBuf_SIZE);
 8001010:	2220      	movs	r2, #32
 8001012:	490d      	ldr	r1, [pc, #52]	; (8001048 <HAL_UARTEx_RxEventCallback+0x11c>)
 8001014:	4810      	ldr	r0, [pc, #64]	; (8001058 <HAL_UARTEx_RxEventCallback+0x12c>)
 8001016:	f019 ff9e 	bl	801af56 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 800101a:	4b10      	ldr	r3, [pc, #64]	; (800105c <HAL_UARTEx_RxEventCallback+0x130>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	4b0e      	ldr	r3, [pc, #56]	; (800105c <HAL_UARTEx_RxEventCallback+0x130>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f022 0208 	bic.w	r2, r2, #8
 8001028:	601a      	str	r2, [r3, #0]

	} //huart USART2
}
 800102a:	bf00      	nop
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40004400 	.word	0x40004400
 8001038:	200006ca 	.word	0x200006ca
 800103c:	200006c8 	.word	0x200006c8
 8001040:	20000708 	.word	0x20000708
 8001044:	200006a8 	.word	0x200006a8
 8001048:	20000688 	.word	0x20000688
 800104c:	2000070c 	.word	0x2000070c
 8001050:	2000070a 	.word	0x2000070a
 8001054:	2000070b 	.word	0x2000070b
 8001058:	20000394 	.word	0x20000394
 800105c:	200003d8 	.word	0x200003d8

08001060 <_Z15All_mode_UARTUIv>:

void All_mode_UARTUI()
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b088      	sub	sp, #32
 8001064:	af00      	add	r7, sp, #0
	uint8_t yur;
	uint8_t zur;
	uint8_t kur; // counter

	// NameM => 15 mode
		switch (NameM){
 8001066:	4b98      	ldr	r3, [pc, #608]	; (80012c8 <_Z15All_mode_UARTUIv+0x268>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	3b01      	subs	r3, #1
 800106c:	2b0d      	cmp	r3, #13
 800106e:	f200 83d4 	bhi.w	800181a <_Z15All_mode_UARTUIv+0x7ba>
 8001072:	a201      	add	r2, pc, #4	; (adr r2, 8001078 <_Z15All_mode_UARTUIv+0x18>)
 8001074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001078:	080010b1 	.word	0x080010b1
 800107c:	08001111 	.word	0x08001111
 8001080:	08001145 	.word	0x08001145
 8001084:	08001179 	.word	0x08001179
 8001088:	08001217 	.word	0x08001217
 800108c:	0800130d 	.word	0x0800130d
 8001090:	08001397 	.word	0x08001397
 8001094:	080014ef 	.word	0x080014ef
 8001098:	08001529 	.word	0x08001529
 800109c:	080015c9 	.word	0x080015c9
 80010a0:	08001667 	.word	0x08001667
 80010a4:	08001729 	.word	0x08001729
 80010a8:	08001761 	.word	0x08001761
 80010ac:	080017a5 	.word	0x080017a5
		////==============[Test Command]===========
			case 1: // 10010001 01000000 00000000 00101110
				chksum = MainBuf[newPos_uart-1];
 80010b0:	4b86      	ldr	r3, [pc, #536]	; (80012cc <_Z15All_mode_UARTUIv+0x26c>)
 80010b2:	881b      	ldrh	r3, [r3, #0]
 80010b4:	3b01      	subs	r3, #1
 80010b6:	4a86      	ldr	r2, [pc, #536]	; (80012d0 <_Z15All_mode_UARTUIv+0x270>)
 80010b8:	5cd2      	ldrb	r2, [r2, r3]
 80010ba:	4b86      	ldr	r3, [pc, #536]	; (80012d4 <_Z15All_mode_UARTUIv+0x274>)
 80010bc:	701a      	strb	r2, [r3, #0]
				dataF2 = MainBuf[newPos_uart-2];
 80010be:	4b83      	ldr	r3, [pc, #524]	; (80012cc <_Z15All_mode_UARTUIv+0x26c>)
 80010c0:	881b      	ldrh	r3, [r3, #0]
 80010c2:	3b02      	subs	r3, #2
 80010c4:	4a82      	ldr	r2, [pc, #520]	; (80012d0 <_Z15All_mode_UARTUIv+0x270>)
 80010c6:	5cd2      	ldrb	r2, [r2, r3]
 80010c8:	4b83      	ldr	r3, [pc, #524]	; (80012d8 <_Z15All_mode_UARTUIv+0x278>)
 80010ca:	701a      	strb	r2, [r3, #0]
				dataF1 = MainBuf[newPos_uart-3];
 80010cc:	4b7f      	ldr	r3, [pc, #508]	; (80012cc <_Z15All_mode_UARTUIv+0x26c>)
 80010ce:	881b      	ldrh	r3, [r3, #0]
 80010d0:	3b03      	subs	r3, #3
 80010d2:	4a7f      	ldr	r2, [pc, #508]	; (80012d0 <_Z15All_mode_UARTUIv+0x270>)
 80010d4:	5cd2      	ldrb	r2, [r2, r3]
 80010d6:	4b81      	ldr	r3, [pc, #516]	; (80012dc <_Z15All_mode_UARTUIv+0x27c>)
 80010d8:	701a      	strb	r2, [r3, #0]
				chksum2 = ~(StartM + dataF1 + dataF2);
 80010da:	4b81      	ldr	r3, [pc, #516]	; (80012e0 <_Z15All_mode_UARTUIv+0x280>)
 80010dc:	781a      	ldrb	r2, [r3, #0]
 80010de:	4b7f      	ldr	r3, [pc, #508]	; (80012dc <_Z15All_mode_UARTUIv+0x27c>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	4413      	add	r3, r2
 80010e4:	b2da      	uxtb	r2, r3
 80010e6:	4b7c      	ldr	r3, [pc, #496]	; (80012d8 <_Z15All_mode_UARTUIv+0x278>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	4413      	add	r3, r2
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	43db      	mvns	r3, r3
 80010f0:	b2da      	uxtb	r2, r3
 80010f2:	4b7c      	ldr	r3, [pc, #496]	; (80012e4 <_Z15All_mode_UARTUIv+0x284>)
 80010f4:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum2){
 80010f6:	4b77      	ldr	r3, [pc, #476]	; (80012d4 <_Z15All_mode_UARTUIv+0x274>)
 80010f8:	781a      	ldrb	r2, [r3, #0]
 80010fa:	4b7a      	ldr	r3, [pc, #488]	; (80012e4 <_Z15All_mode_UARTUIv+0x284>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	429a      	cmp	r2, r3
 8001100:	f040 8370 	bne.w	80017e4 <_Z15All_mode_UARTUIv+0x784>
					M_state = 1;
 8001104:	4b78      	ldr	r3, [pc, #480]	; (80012e8 <_Z15All_mode_UARTUIv+0x288>)
 8001106:	2201      	movs	r2, #1
 8001108:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 800110a:	f000 fbbb 	bl	8001884 <_Z7xu_Uartv>
				}
				break;
 800110e:	e369      	b.n	80017e4 <_Z15All_mode_UARTUIv+0x784>
		////==============[Connect MCU]===========
			case 2: //10010010 01101101
				chksum = MainBuf[newPos_uart-1];
 8001110:	4b6e      	ldr	r3, [pc, #440]	; (80012cc <_Z15All_mode_UARTUIv+0x26c>)
 8001112:	881b      	ldrh	r3, [r3, #0]
 8001114:	3b01      	subs	r3, #1
 8001116:	4a6e      	ldr	r2, [pc, #440]	; (80012d0 <_Z15All_mode_UARTUIv+0x270>)
 8001118:	5cd2      	ldrb	r2, [r2, r3]
 800111a:	4b6e      	ldr	r3, [pc, #440]	; (80012d4 <_Z15All_mode_UARTUIv+0x274>)
 800111c:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 800111e:	4b70      	ldr	r3, [pc, #448]	; (80012e0 <_Z15All_mode_UARTUIv+0x280>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	43db      	mvns	r3, r3
 8001124:	b2da      	uxtb	r2, r3
 8001126:	4b71      	ldr	r3, [pc, #452]	; (80012ec <_Z15All_mode_UARTUIv+0x28c>)
 8001128:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 800112a:	4b6a      	ldr	r3, [pc, #424]	; (80012d4 <_Z15All_mode_UARTUIv+0x274>)
 800112c:	781a      	ldrb	r2, [r3, #0]
 800112e:	4b6f      	ldr	r3, [pc, #444]	; (80012ec <_Z15All_mode_UARTUIv+0x28c>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	429a      	cmp	r2, r3
 8001134:	f040 8358 	bne.w	80017e8 <_Z15All_mode_UARTUIv+0x788>
					M_state = 2;
 8001138:	4b6b      	ldr	r3, [pc, #428]	; (80012e8 <_Z15All_mode_UARTUIv+0x288>)
 800113a:	2202      	movs	r2, #2
 800113c:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 800113e:	f000 fba1 	bl	8001884 <_Z7xu_Uartv>
				}
				break;
 8001142:	e351      	b.n	80017e8 <_Z15All_mode_UARTUIv+0x788>
		////==============[Disconnect MCU]===========
			case 3: //10010011 01101100
					chksum = MainBuf[newPos_uart-1];
 8001144:	4b61      	ldr	r3, [pc, #388]	; (80012cc <_Z15All_mode_UARTUIv+0x26c>)
 8001146:	881b      	ldrh	r3, [r3, #0]
 8001148:	3b01      	subs	r3, #1
 800114a:	4a61      	ldr	r2, [pc, #388]	; (80012d0 <_Z15All_mode_UARTUIv+0x270>)
 800114c:	5cd2      	ldrb	r2, [r2, r3]
 800114e:	4b61      	ldr	r3, [pc, #388]	; (80012d4 <_Z15All_mode_UARTUIv+0x274>)
 8001150:	701a      	strb	r2, [r3, #0]
					chksum1 = ~(StartM);
 8001152:	4b63      	ldr	r3, [pc, #396]	; (80012e0 <_Z15All_mode_UARTUIv+0x280>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	43db      	mvns	r3, r3
 8001158:	b2da      	uxtb	r2, r3
 800115a:	4b64      	ldr	r3, [pc, #400]	; (80012ec <_Z15All_mode_UARTUIv+0x28c>)
 800115c:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 800115e:	4b5d      	ldr	r3, [pc, #372]	; (80012d4 <_Z15All_mode_UARTUIv+0x274>)
 8001160:	781a      	ldrb	r2, [r3, #0]
 8001162:	4b62      	ldr	r3, [pc, #392]	; (80012ec <_Z15All_mode_UARTUIv+0x28c>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	429a      	cmp	r2, r3
 8001168:	f040 8340 	bne.w	80017ec <_Z15All_mode_UARTUIv+0x78c>
					M_state = 3;
 800116c:	4b5e      	ldr	r3, [pc, #376]	; (80012e8 <_Z15All_mode_UARTUIv+0x288>)
 800116e:	2203      	movs	r2, #3
 8001170:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 8001172:	f000 fb87 	bl	8001884 <_Z7xu_Uartv>
				}
				break;
 8001176:	e339      	b.n	80017ec <_Z15All_mode_UARTUIv+0x78c>
		////==============[Angular Velo]===========
			case 4:
					chksum = MainBuf[newPos_uart-1];
 8001178:	4b54      	ldr	r3, [pc, #336]	; (80012cc <_Z15All_mode_UARTUIv+0x26c>)
 800117a:	881b      	ldrh	r3, [r3, #0]
 800117c:	3b01      	subs	r3, #1
 800117e:	4a54      	ldr	r2, [pc, #336]	; (80012d0 <_Z15All_mode_UARTUIv+0x270>)
 8001180:	5cd2      	ldrb	r2, [r2, r3]
 8001182:	4b54      	ldr	r3, [pc, #336]	; (80012d4 <_Z15All_mode_UARTUIv+0x274>)
 8001184:	701a      	strb	r2, [r3, #0]
					dataF2 = MainBuf[newPos_uart-2];
 8001186:	4b51      	ldr	r3, [pc, #324]	; (80012cc <_Z15All_mode_UARTUIv+0x26c>)
 8001188:	881b      	ldrh	r3, [r3, #0]
 800118a:	3b02      	subs	r3, #2
 800118c:	4a50      	ldr	r2, [pc, #320]	; (80012d0 <_Z15All_mode_UARTUIv+0x270>)
 800118e:	5cd2      	ldrb	r2, [r2, r3]
 8001190:	4b51      	ldr	r3, [pc, #324]	; (80012d8 <_Z15All_mode_UARTUIv+0x278>)
 8001192:	701a      	strb	r2, [r3, #0]
					dataF1 = MainBuf[newPos_uart-3];
 8001194:	4b4d      	ldr	r3, [pc, #308]	; (80012cc <_Z15All_mode_UARTUIv+0x26c>)
 8001196:	881b      	ldrh	r3, [r3, #0]
 8001198:	3b03      	subs	r3, #3
 800119a:	4a4d      	ldr	r2, [pc, #308]	; (80012d0 <_Z15All_mode_UARTUIv+0x270>)
 800119c:	5cd2      	ldrb	r2, [r2, r3]
 800119e:	4b4f      	ldr	r3, [pc, #316]	; (80012dc <_Z15All_mode_UARTUIv+0x27c>)
 80011a0:	701a      	strb	r2, [r3, #0]
					Set_AngVelo[0] = dataF1;
 80011a2:	4b4e      	ldr	r3, [pc, #312]	; (80012dc <_Z15All_mode_UARTUIv+0x27c>)
 80011a4:	781a      	ldrb	r2, [r3, #0]
 80011a6:	4b52      	ldr	r3, [pc, #328]	; (80012f0 <_Z15All_mode_UARTUIv+0x290>)
 80011a8:	701a      	strb	r2, [r3, #0]
					Set_AngVelo[1] = dataF2;
 80011aa:	4b4b      	ldr	r3, [pc, #300]	; (80012d8 <_Z15All_mode_UARTUIv+0x278>)
 80011ac:	781a      	ldrb	r2, [r3, #0]
 80011ae:	4b50      	ldr	r3, [pc, #320]	; (80012f0 <_Z15All_mode_UARTUIv+0x290>)
 80011b0:	705a      	strb	r2, [r3, #1]
					chksum2 = ~(StartM + dataF1 + dataF2);
 80011b2:	4b4b      	ldr	r3, [pc, #300]	; (80012e0 <_Z15All_mode_UARTUIv+0x280>)
 80011b4:	781a      	ldrb	r2, [r3, #0]
 80011b6:	4b49      	ldr	r3, [pc, #292]	; (80012dc <_Z15All_mode_UARTUIv+0x27c>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	4413      	add	r3, r2
 80011bc:	b2da      	uxtb	r2, r3
 80011be:	4b46      	ldr	r3, [pc, #280]	; (80012d8 <_Z15All_mode_UARTUIv+0x278>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	4413      	add	r3, r2
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	43db      	mvns	r3, r3
 80011c8:	b2da      	uxtb	r2, r3
 80011ca:	4b46      	ldr	r3, [pc, #280]	; (80012e4 <_Z15All_mode_UARTUIv+0x284>)
 80011cc:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum2){
 80011ce:	4b41      	ldr	r3, [pc, #260]	; (80012d4 <_Z15All_mode_UARTUIv+0x274>)
 80011d0:	781a      	ldrb	r2, [r3, #0]
 80011d2:	4b44      	ldr	r3, [pc, #272]	; (80012e4 <_Z15All_mode_UARTUIv+0x284>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	429a      	cmp	r2, r3
 80011d8:	f040 830a 	bne.w	80017f0 <_Z15All_mode_UARTUIv+0x790>
					M_state = 4;
 80011dc:	4b42      	ldr	r3, [pc, #264]	; (80012e8 <_Z15All_mode_UARTUIv+0x288>)
 80011de:	2204      	movs	r2, #4
 80011e0:	701a      	strb	r2, [r3, #0]
					DataProtocol_SetVelo = Set_AngVelo[1];
 80011e2:	4b43      	ldr	r3, [pc, #268]	; (80012f0 <_Z15All_mode_UARTUIv+0x290>)
 80011e4:	785b      	ldrb	r3, [r3, #1]
 80011e6:	ee07 3a90 	vmov	s15, r3
 80011ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011ee:	4b41      	ldr	r3, [pc, #260]	; (80012f4 <_Z15All_mode_UARTUIv+0x294>)
 80011f0:	edc3 7a00 	vstr	s15, [r3]
					Velocity = (DataProtocol_SetVelo * 10)/255;
 80011f4:	4b3f      	ldr	r3, [pc, #252]	; (80012f4 <_Z15All_mode_UARTUIv+0x294>)
 80011f6:	edd3 7a00 	vldr	s15, [r3]
 80011fa:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80011fe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001202:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80012f8 <_Z15All_mode_UARTUIv+0x298>
 8001206:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800120a:	4b3c      	ldr	r3, [pc, #240]	; (80012fc <_Z15All_mode_UARTUIv+0x29c>)
 800120c:	edc3 7a00 	vstr	s15, [r3]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 8001210:	f000 fb38 	bl	8001884 <_Z7xu_Uartv>
				}
				break;
 8001214:	e2ec      	b.n	80017f0 <_Z15All_mode_UARTUIv+0x790>
		////==============[Angular Position]===========
			case 5:
					chksum = MainBuf[newPos_uart-1];
 8001216:	4b2d      	ldr	r3, [pc, #180]	; (80012cc <_Z15All_mode_UARTUIv+0x26c>)
 8001218:	881b      	ldrh	r3, [r3, #0]
 800121a:	3b01      	subs	r3, #1
 800121c:	4a2c      	ldr	r2, [pc, #176]	; (80012d0 <_Z15All_mode_UARTUIv+0x270>)
 800121e:	5cd2      	ldrb	r2, [r2, r3]
 8001220:	4b2c      	ldr	r3, [pc, #176]	; (80012d4 <_Z15All_mode_UARTUIv+0x274>)
 8001222:	701a      	strb	r2, [r3, #0]
					dataF2 = MainBuf[newPos_uart-2];
 8001224:	4b29      	ldr	r3, [pc, #164]	; (80012cc <_Z15All_mode_UARTUIv+0x26c>)
 8001226:	881b      	ldrh	r3, [r3, #0]
 8001228:	3b02      	subs	r3, #2
 800122a:	4a29      	ldr	r2, [pc, #164]	; (80012d0 <_Z15All_mode_UARTUIv+0x270>)
 800122c:	5cd2      	ldrb	r2, [r2, r3]
 800122e:	4b2a      	ldr	r3, [pc, #168]	; (80012d8 <_Z15All_mode_UARTUIv+0x278>)
 8001230:	701a      	strb	r2, [r3, #0]
					dataF1 = MainBuf[newPos_uart-3];
 8001232:	4b26      	ldr	r3, [pc, #152]	; (80012cc <_Z15All_mode_UARTUIv+0x26c>)
 8001234:	881b      	ldrh	r3, [r3, #0]
 8001236:	3b03      	subs	r3, #3
 8001238:	4a25      	ldr	r2, [pc, #148]	; (80012d0 <_Z15All_mode_UARTUIv+0x270>)
 800123a:	5cd2      	ldrb	r2, [r2, r3]
 800123c:	4b27      	ldr	r3, [pc, #156]	; (80012dc <_Z15All_mode_UARTUIv+0x27c>)
 800123e:	701a      	strb	r2, [r3, #0]
					Set_AngPosi[0] = dataF1;
 8001240:	4b26      	ldr	r3, [pc, #152]	; (80012dc <_Z15All_mode_UARTUIv+0x27c>)
 8001242:	781a      	ldrb	r2, [r3, #0]
 8001244:	4b2e      	ldr	r3, [pc, #184]	; (8001300 <_Z15All_mode_UARTUIv+0x2a0>)
 8001246:	701a      	strb	r2, [r3, #0]
					Set_AngPosi[1] = dataF2;
 8001248:	4b23      	ldr	r3, [pc, #140]	; (80012d8 <_Z15All_mode_UARTUIv+0x278>)
 800124a:	781a      	ldrb	r2, [r3, #0]
 800124c:	4b2c      	ldr	r3, [pc, #176]	; (8001300 <_Z15All_mode_UARTUIv+0x2a0>)
 800124e:	705a      	strb	r2, [r3, #1]
					chksum2 = ~(StartM + dataF1 + dataF2);
 8001250:	4b23      	ldr	r3, [pc, #140]	; (80012e0 <_Z15All_mode_UARTUIv+0x280>)
 8001252:	781a      	ldrb	r2, [r3, #0]
 8001254:	4b21      	ldr	r3, [pc, #132]	; (80012dc <_Z15All_mode_UARTUIv+0x27c>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	4413      	add	r3, r2
 800125a:	b2da      	uxtb	r2, r3
 800125c:	4b1e      	ldr	r3, [pc, #120]	; (80012d8 <_Z15All_mode_UARTUIv+0x278>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	4413      	add	r3, r2
 8001262:	b2db      	uxtb	r3, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	b2da      	uxtb	r2, r3
 8001268:	4b1e      	ldr	r3, [pc, #120]	; (80012e4 <_Z15All_mode_UARTUIv+0x284>)
 800126a:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum2){
 800126c:	4b19      	ldr	r3, [pc, #100]	; (80012d4 <_Z15All_mode_UARTUIv+0x274>)
 800126e:	781a      	ldrb	r2, [r3, #0]
 8001270:	4b1c      	ldr	r3, [pc, #112]	; (80012e4 <_Z15All_mode_UARTUIv+0x284>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	429a      	cmp	r2, r3
 8001276:	f040 82bd 	bne.w	80017f4 <_Z15All_mode_UARTUIv+0x794>
					M_state = 5;
 800127a:	4b1b      	ldr	r3, [pc, #108]	; (80012e8 <_Z15All_mode_UARTUIv+0x288>)
 800127c:	2205      	movs	r2, #5
 800127e:	701a      	strb	r2, [r3, #0]

					DataProtocol_SetAngPosi = (Set_AngPosi[0]*256) + Set_AngPosi[1];
 8001280:	4b1f      	ldr	r3, [pc, #124]	; (8001300 <_Z15All_mode_UARTUIv+0x2a0>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	021b      	lsls	r3, r3, #8
 8001286:	4a1e      	ldr	r2, [pc, #120]	; (8001300 <_Z15All_mode_UARTUIv+0x2a0>)
 8001288:	7852      	ldrb	r2, [r2, #1]
 800128a:	4413      	add	r3, r2
 800128c:	4a1d      	ldr	r2, [pc, #116]	; (8001304 <_Z15All_mode_UARTUIv+0x2a4>)
 800128e:	6013      	str	r3, [r2, #0]
					//positionlog[0] = (DataProtocol_SetAngPosi / (3.14 * 10000) * 180);
					positionlog[0] = (float)(DataProtocol_SetAngPosi / 10000.0);
 8001290:	4b1c      	ldr	r3, [pc, #112]	; (8001304 <_Z15All_mode_UARTUIv+0x2a4>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff f945 	bl	8000524 <__aeabi_i2d>
 800129a:	a309      	add	r3, pc, #36	; (adr r3, 80012c0 <_Z15All_mode_UARTUIv+0x260>)
 800129c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a0:	f7ff fad4 	bl	800084c <__aeabi_ddiv>
 80012a4:	4602      	mov	r2, r0
 80012a6:	460b      	mov	r3, r1
 80012a8:	4610      	mov	r0, r2
 80012aa:	4619      	mov	r1, r3
 80012ac:	f7ff fc54 	bl	8000b58 <__aeabi_d2f>
 80012b0:	4603      	mov	r3, r0
 80012b2:	4a15      	ldr	r2, [pc, #84]	; (8001308 <_Z15All_mode_UARTUIv+0x2a8>)
 80012b4:	6013      	str	r3, [r2, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 80012b6:	f000 fae5 	bl	8001884 <_Z7xu_Uartv>
				}
				break;
 80012ba:	e29b      	b.n	80017f4 <_Z15All_mode_UARTUIv+0x794>
 80012bc:	f3af 8000 	nop.w
 80012c0:	00000000 	.word	0x00000000
 80012c4:	40c38800 	.word	0x40c38800
 80012c8:	2000070b 	.word	0x2000070b
 80012cc:	200006ca 	.word	0x200006ca
 80012d0:	200006a8 	.word	0x200006a8
 80012d4:	2000070d 	.word	0x2000070d
 80012d8:	20000712 	.word	0x20000712
 80012dc:	20000711 	.word	0x20000711
 80012e0:	2000070c 	.word	0x2000070c
 80012e4:	2000070f 	.word	0x2000070f
 80012e8:	20000713 	.word	0x20000713
 80012ec:	2000070e 	.word	0x2000070e
 80012f0:	200006d4 	.word	0x200006d4
 80012f4:	200006d8 	.word	0x200006d8
 80012f8:	437f0000 	.word	0x437f0000
 80012fc:	20000524 	.word	0x20000524
 8001300:	200006dc 	.word	0x200006dc
 8001304:	200006e0 	.word	0x200006e0
 8001308:	200000f0 	.word	0x200000f0
		////==============[Goal 1 station]===========
			case 6:
					chksum = MainBuf[newPos_uart-1];
 800130c:	4b97      	ldr	r3, [pc, #604]	; (800156c <_Z15All_mode_UARTUIv+0x50c>)
 800130e:	881b      	ldrh	r3, [r3, #0]
 8001310:	3b01      	subs	r3, #1
 8001312:	4a97      	ldr	r2, [pc, #604]	; (8001570 <_Z15All_mode_UARTUIv+0x510>)
 8001314:	5cd2      	ldrb	r2, [r2, r3]
 8001316:	4b97      	ldr	r3, [pc, #604]	; (8001574 <_Z15All_mode_UARTUIv+0x514>)
 8001318:	701a      	strb	r2, [r3, #0]
					dataF2 = MainBuf[newPos_uart-2];
 800131a:	4b94      	ldr	r3, [pc, #592]	; (800156c <_Z15All_mode_UARTUIv+0x50c>)
 800131c:	881b      	ldrh	r3, [r3, #0]
 800131e:	3b02      	subs	r3, #2
 8001320:	4a93      	ldr	r2, [pc, #588]	; (8001570 <_Z15All_mode_UARTUIv+0x510>)
 8001322:	5cd2      	ldrb	r2, [r2, r3]
 8001324:	4b94      	ldr	r3, [pc, #592]	; (8001578 <_Z15All_mode_UARTUIv+0x518>)
 8001326:	701a      	strb	r2, [r3, #0]
					dataF1 = MainBuf[newPos_uart-3];
 8001328:	4b90      	ldr	r3, [pc, #576]	; (800156c <_Z15All_mode_UARTUIv+0x50c>)
 800132a:	881b      	ldrh	r3, [r3, #0]
 800132c:	3b03      	subs	r3, #3
 800132e:	4a90      	ldr	r2, [pc, #576]	; (8001570 <_Z15All_mode_UARTUIv+0x510>)
 8001330:	5cd2      	ldrb	r2, [r2, r3]
 8001332:	4b92      	ldr	r3, [pc, #584]	; (800157c <_Z15All_mode_UARTUIv+0x51c>)
 8001334:	701a      	strb	r2, [r3, #0]
					Set_Goal_1Sta[0] = dataF1;
 8001336:	4b91      	ldr	r3, [pc, #580]	; (800157c <_Z15All_mode_UARTUIv+0x51c>)
 8001338:	781a      	ldrb	r2, [r3, #0]
 800133a:	4b91      	ldr	r3, [pc, #580]	; (8001580 <_Z15All_mode_UARTUIv+0x520>)
 800133c:	701a      	strb	r2, [r3, #0]
					Set_Goal_1Sta[1] = dataF2;
 800133e:	4b8e      	ldr	r3, [pc, #568]	; (8001578 <_Z15All_mode_UARTUIv+0x518>)
 8001340:	781a      	ldrb	r2, [r3, #0]
 8001342:	4b8f      	ldr	r3, [pc, #572]	; (8001580 <_Z15All_mode_UARTUIv+0x520>)
 8001344:	705a      	strb	r2, [r3, #1]
					chksum2 = ~(StartM + dataF1 + dataF2);
 8001346:	4b8f      	ldr	r3, [pc, #572]	; (8001584 <_Z15All_mode_UARTUIv+0x524>)
 8001348:	781a      	ldrb	r2, [r3, #0]
 800134a:	4b8c      	ldr	r3, [pc, #560]	; (800157c <_Z15All_mode_UARTUIv+0x51c>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	4413      	add	r3, r2
 8001350:	b2da      	uxtb	r2, r3
 8001352:	4b89      	ldr	r3, [pc, #548]	; (8001578 <_Z15All_mode_UARTUIv+0x518>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	4413      	add	r3, r2
 8001358:	b2db      	uxtb	r3, r3
 800135a:	43db      	mvns	r3, r3
 800135c:	b2da      	uxtb	r2, r3
 800135e:	4b8a      	ldr	r3, [pc, #552]	; (8001588 <_Z15All_mode_UARTUIv+0x528>)
 8001360:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum2){
 8001362:	4b84      	ldr	r3, [pc, #528]	; (8001574 <_Z15All_mode_UARTUIv+0x514>)
 8001364:	781a      	ldrb	r2, [r3, #0]
 8001366:	4b88      	ldr	r3, [pc, #544]	; (8001588 <_Z15All_mode_UARTUIv+0x528>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	429a      	cmp	r2, r3
 800136c:	f040 8244 	bne.w	80017f8 <_Z15All_mode_UARTUIv+0x798>
					M_state = 6;
 8001370:	4b86      	ldr	r3, [pc, #536]	; (800158c <_Z15All_mode_UARTUIv+0x52c>)
 8001372:	2206      	movs	r2, #6
 8001374:	701a      	strb	r2, [r3, #0]

					///////// Load 1 station Data /////////////
					positionlog[0] = PosDataSet[Set_Goal_1Sta[1]];
 8001376:	4b82      	ldr	r3, [pc, #520]	; (8001580 <_Z15All_mode_UARTUIv+0x520>)
 8001378:	785b      	ldrb	r3, [r3, #1]
 800137a:	4a85      	ldr	r2, [pc, #532]	; (8001590 <_Z15All_mode_UARTUIv+0x530>)
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	4413      	add	r3, r2
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a84      	ldr	r2, [pc, #528]	; (8001594 <_Z15All_mode_UARTUIv+0x534>)
 8001384:	6013      	str	r3, [r2, #0]
					Set1_Sta = Set_Goal_1Sta[1];
 8001386:	4b7e      	ldr	r3, [pc, #504]	; (8001580 <_Z15All_mode_UARTUIv+0x520>)
 8001388:	785b      	ldrb	r3, [r3, #1]
 800138a:	461a      	mov	r2, r3
 800138c:	4b82      	ldr	r3, [pc, #520]	; (8001598 <_Z15All_mode_UARTUIv+0x538>)
 800138e:	601a      	str	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);

					xu_Uart();
 8001390:	f000 fa78 	bl	8001884 <_Z7xu_Uartv>
				}
				break;
 8001394:	e230      	b.n	80017f8 <_Z15All_mode_UARTUIv+0x798>
		////==============[Goal n station]===========
			case 7:
				Nstation = MainBuf[(newPos_uart - datasize_uart)+1];
 8001396:	4b75      	ldr	r3, [pc, #468]	; (800156c <_Z15All_mode_UARTUIv+0x50c>)
 8001398:	881b      	ldrh	r3, [r3, #0]
 800139a:	461a      	mov	r2, r3
 800139c:	4b7f      	ldr	r3, [pc, #508]	; (800159c <_Z15All_mode_UARTUIv+0x53c>)
 800139e:	881b      	ldrh	r3, [r3, #0]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	3301      	adds	r3, #1
 80013a4:	4a72      	ldr	r2, [pc, #456]	; (8001570 <_Z15All_mode_UARTUIv+0x510>)
 80013a6:	5cd2      	ldrb	r2, [r2, r3]
 80013a8:	4b7d      	ldr	r3, [pc, #500]	; (80015a0 <_Z15All_mode_UARTUIv+0x540>)
 80013aa:	701a      	strb	r2, [r3, #0]
				yur = Nstation;
 80013ac:	4b7c      	ldr	r3, [pc, #496]	; (80015a0 <_Z15All_mode_UARTUIv+0x540>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	73fb      	strb	r3, [r7, #15]
				zur = ( yur / 2 ) + yur % 2;
 80013b2:	7bfb      	ldrb	r3, [r7, #15]
 80013b4:	085b      	lsrs	r3, r3, #1
 80013b6:	b2da      	uxtb	r2, r3
 80013b8:	7bfb      	ldrb	r3, [r7, #15]
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	4413      	add	r3, r2
 80013c2:	73bb      	strb	r3, [r7, #14]
				kur = 0; // counter
 80013c4:	2300      	movs	r3, #0
 80013c6:	77fb      	strb	r3, [r7, #31]

				for(int i = 0; i < zur; i++ ){
 80013c8:	2300      	movs	r3, #0
 80013ca:	61bb      	str	r3, [r7, #24]
 80013cc:	7bbb      	ldrb	r3, [r7, #14]
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	da1e      	bge.n	8001412 <_Z15All_mode_UARTUIv+0x3b2>
					dataFSum += MainBuf[oldPos_uart + (i+2)];
 80013d4:	4b73      	ldr	r3, [pc, #460]	; (80015a4 <_Z15All_mode_UARTUIv+0x544>)
 80013d6:	881b      	ldrh	r3, [r3, #0]
 80013d8:	461a      	mov	r2, r3
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	3302      	adds	r3, #2
 80013de:	4413      	add	r3, r2
 80013e0:	4a63      	ldr	r2, [pc, #396]	; (8001570 <_Z15All_mode_UARTUIv+0x510>)
 80013e2:	5cd2      	ldrb	r2, [r2, r3]
 80013e4:	4b70      	ldr	r3, [pc, #448]	; (80015a8 <_Z15All_mode_UARTUIv+0x548>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	4413      	add	r3, r2
 80013ea:	b2da      	uxtb	r2, r3
 80013ec:	4b6e      	ldr	r3, [pc, #440]	; (80015a8 <_Z15All_mode_UARTUIv+0x548>)
 80013ee:	701a      	strb	r2, [r3, #0]
					Goal_nSta[i] = MainBuf[oldPos_uart + (i+2)];
 80013f0:	4b6c      	ldr	r3, [pc, #432]	; (80015a4 <_Z15All_mode_UARTUIv+0x544>)
 80013f2:	881b      	ldrh	r3, [r3, #0]
 80013f4:	461a      	mov	r2, r3
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	3302      	adds	r3, #2
 80013fa:	4413      	add	r3, r2
 80013fc:	4a5c      	ldr	r2, [pc, #368]	; (8001570 <_Z15All_mode_UARTUIv+0x510>)
 80013fe:	5cd1      	ldrb	r1, [r2, r3]
 8001400:	4a6a      	ldr	r2, [pc, #424]	; (80015ac <_Z15All_mode_UARTUIv+0x54c>)
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	4413      	add	r3, r2
 8001406:	460a      	mov	r2, r1
 8001408:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < zur; i++ ){
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	3301      	adds	r3, #1
 800140e:	61bb      	str	r3, [r7, #24]
 8001410:	e7dc      	b.n	80013cc <_Z15All_mode_UARTUIv+0x36c>
				}
				for(int x = 1; x < Nstation+1; x++){
 8001412:	2301      	movs	r3, #1
 8001414:	617b      	str	r3, [r7, #20]
 8001416:	4b62      	ldr	r3, [pc, #392]	; (80015a0 <_Z15All_mode_UARTUIv+0x540>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	461a      	mov	r2, r3
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	4293      	cmp	r3, r2
 8001420:	dc27      	bgt.n	8001472 <_Z15All_mode_UARTUIv+0x412>
                    if(x % 2 == 1){
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	2b00      	cmp	r3, #0
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	bfb8      	it	lt
 800142c:	425b      	neglt	r3, r3
 800142e:	2b01      	cmp	r3, #1
 8001430:	d10a      	bne.n	8001448 <_Z15All_mode_UARTUIv+0x3e8>
                        Set_Goal_nSta[x-1] = (Goal_nSta[kur] % 16);
 8001432:	7ffb      	ldrb	r3, [r7, #31]
 8001434:	4a5d      	ldr	r2, [pc, #372]	; (80015ac <_Z15All_mode_UARTUIv+0x54c>)
 8001436:	5cd2      	ldrb	r2, [r2, r3]
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	3b01      	subs	r3, #1
 800143c:	f002 020f 	and.w	r2, r2, #15
 8001440:	b2d1      	uxtb	r1, r2
 8001442:	4a5b      	ldr	r2, [pc, #364]	; (80015b0 <_Z15All_mode_UARTUIv+0x550>)
 8001444:	54d1      	strb	r1, [r2, r3]
 8001446:	e010      	b.n	800146a <_Z15All_mode_UARTUIv+0x40a>
                    }else if(x % 2 == 0){
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	2b00      	cmp	r3, #0
 8001450:	d10b      	bne.n	800146a <_Z15All_mode_UARTUIv+0x40a>
                        Set_Goal_nSta[x-1] = (Goal_nSta[kur] / 16);
 8001452:	7ffb      	ldrb	r3, [r7, #31]
 8001454:	4a55      	ldr	r2, [pc, #340]	; (80015ac <_Z15All_mode_UARTUIv+0x54c>)
 8001456:	5cd2      	ldrb	r2, [r2, r3]
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	3b01      	subs	r3, #1
 800145c:	0912      	lsrs	r2, r2, #4
 800145e:	b2d1      	uxtb	r1, r2
 8001460:	4a53      	ldr	r2, [pc, #332]	; (80015b0 <_Z15All_mode_UARTUIv+0x550>)
 8001462:	54d1      	strb	r1, [r2, r3]
                        kur++;
 8001464:	7ffb      	ldrb	r3, [r7, #31]
 8001466:	3301      	adds	r3, #1
 8001468:	77fb      	strb	r3, [r7, #31]
				for(int x = 1; x < Nstation+1; x++){
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	3301      	adds	r3, #1
 800146e:	617b      	str	r3, [r7, #20]
 8001470:	e7d1      	b.n	8001416 <_Z15All_mode_UARTUIv+0x3b6>
                    }
                }

				chksum = MainBuf[newPos_uart-1];
 8001472:	4b3e      	ldr	r3, [pc, #248]	; (800156c <_Z15All_mode_UARTUIv+0x50c>)
 8001474:	881b      	ldrh	r3, [r3, #0]
 8001476:	3b01      	subs	r3, #1
 8001478:	4a3d      	ldr	r2, [pc, #244]	; (8001570 <_Z15All_mode_UARTUIv+0x510>)
 800147a:	5cd2      	ldrb	r2, [r2, r3]
 800147c:	4b3d      	ldr	r3, [pc, #244]	; (8001574 <_Z15All_mode_UARTUIv+0x514>)
 800147e:	701a      	strb	r2, [r3, #0]
				chksum3 = ~(StartM + Nstation + dataFSum);
 8001480:	4b40      	ldr	r3, [pc, #256]	; (8001584 <_Z15All_mode_UARTUIv+0x524>)
 8001482:	781a      	ldrb	r2, [r3, #0]
 8001484:	4b46      	ldr	r3, [pc, #280]	; (80015a0 <_Z15All_mode_UARTUIv+0x540>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	4413      	add	r3, r2
 800148a:	b2da      	uxtb	r2, r3
 800148c:	4b46      	ldr	r3, [pc, #280]	; (80015a8 <_Z15All_mode_UARTUIv+0x548>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	4413      	add	r3, r2
 8001492:	b2db      	uxtb	r3, r3
 8001494:	43db      	mvns	r3, r3
 8001496:	b2da      	uxtb	r2, r3
 8001498:	4b46      	ldr	r3, [pc, #280]	; (80015b4 <_Z15All_mode_UARTUIv+0x554>)
 800149a:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum3){
 800149c:	4b35      	ldr	r3, [pc, #212]	; (8001574 <_Z15All_mode_UARTUIv+0x514>)
 800149e:	781a      	ldrb	r2, [r3, #0]
 80014a0:	4b44      	ldr	r3, [pc, #272]	; (80015b4 <_Z15All_mode_UARTUIv+0x554>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	f040 81a9 	bne.w	80017fc <_Z15All_mode_UARTUIv+0x79c>
					M_state = 7;
 80014aa:	4b38      	ldr	r3, [pc, #224]	; (800158c <_Z15All_mode_UARTUIv+0x52c>)
 80014ac:	2207      	movs	r2, #7
 80014ae:	701a      	strb	r2, [r3, #0]

					/////////// Load n station-> positionlog  //////////
					//for(int j = 0; j <= len(PosDataSet); j++){
					for(int j = 0; j <= Nstation; j++){
 80014b0:	2300      	movs	r3, #0
 80014b2:	613b      	str	r3, [r7, #16]
 80014b4:	4b3a      	ldr	r3, [pc, #232]	; (80015a0 <_Z15All_mode_UARTUIv+0x540>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	461a      	mov	r2, r3
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	4293      	cmp	r3, r2
 80014be:	dc10      	bgt.n	80014e2 <_Z15All_mode_UARTUIv+0x482>
						positionlog[j] = PosDataSet[Set_Goal_nSta[j]];
 80014c0:	4a3b      	ldr	r2, [pc, #236]	; (80015b0 <_Z15All_mode_UARTUIv+0x550>)
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	4413      	add	r3, r2
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	4a31      	ldr	r2, [pc, #196]	; (8001590 <_Z15All_mode_UARTUIv+0x530>)
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	4413      	add	r3, r2
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	4930      	ldr	r1, [pc, #192]	; (8001594 <_Z15All_mode_UARTUIv+0x534>)
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	440b      	add	r3, r1
 80014d8:	601a      	str	r2, [r3, #0]
					for(int j = 0; j <= Nstation; j++){
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	3301      	adds	r3, #1
 80014de:	613b      	str	r3, [r7, #16]
 80014e0:	e7e8      	b.n	80014b4 <_Z15All_mode_UARTUIv+0x454>
						//Set_Goal_nSta -> raw index from UART
					}

					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					dataFSum = 0;
 80014e2:	4b31      	ldr	r3, [pc, #196]	; (80015a8 <_Z15All_mode_UARTUIv+0x548>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	701a      	strb	r2, [r3, #0]
					xu_Uart();
 80014e8:	f000 f9cc 	bl	8001884 <_Z7xu_Uartv>
				}
				break;
 80014ec:	e186      	b.n	80017fc <_Z15All_mode_UARTUIv+0x79c>
		////==============[Go to Goal station Order to Work]===========
			case 8: //10011000 01100111
				chksum = MainBuf[newPos_uart-1];
 80014ee:	4b1f      	ldr	r3, [pc, #124]	; (800156c <_Z15All_mode_UARTUIv+0x50c>)
 80014f0:	881b      	ldrh	r3, [r3, #0]
 80014f2:	3b01      	subs	r3, #1
 80014f4:	4a1e      	ldr	r2, [pc, #120]	; (8001570 <_Z15All_mode_UARTUIv+0x510>)
 80014f6:	5cd2      	ldrb	r2, [r2, r3]
 80014f8:	4b1e      	ldr	r3, [pc, #120]	; (8001574 <_Z15All_mode_UARTUIv+0x514>)
 80014fa:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 80014fc:	4b21      	ldr	r3, [pc, #132]	; (8001584 <_Z15All_mode_UARTUIv+0x524>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	43db      	mvns	r3, r3
 8001502:	b2da      	uxtb	r2, r3
 8001504:	4b2c      	ldr	r3, [pc, #176]	; (80015b8 <_Z15All_mode_UARTUIv+0x558>)
 8001506:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 8001508:	4b1a      	ldr	r3, [pc, #104]	; (8001574 <_Z15All_mode_UARTUIv+0x514>)
 800150a:	781a      	ldrb	r2, [r3, #0]
 800150c:	4b2a      	ldr	r3, [pc, #168]	; (80015b8 <_Z15All_mode_UARTUIv+0x558>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	429a      	cmp	r2, r3
 8001512:	f040 8175 	bne.w	8001800 <_Z15All_mode_UARTUIv+0x7a0>
					M_state = 8;
 8001516:	4b1d      	ldr	r3, [pc, #116]	; (800158c <_Z15All_mode_UARTUIv+0x52c>)
 8001518:	2208      	movs	r2, #8
 800151a:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 800151c:	f000 f9b2 	bl	8001884 <_Z7xu_Uartv>

		///////// Order to Work !!! ///
					grandState = work;
 8001520:	4b26      	ldr	r3, [pc, #152]	; (80015bc <_Z15All_mode_UARTUIv+0x55c>)
 8001522:	2201      	movs	r2, #1
 8001524:	701a      	strb	r2, [r3, #0]
					//if(grandState == Ready){grandState = work;}
					//HAL_UART_Transmit(&huart2, (uint8_t*)temp_f_ack2, 2 ,1000);
				}
				break;
 8001526:	e16b      	b.n	8001800 <_Z15All_mode_UARTUIv+0x7a0>
		////==============[Request Current station]===========
			case 9: //10011001 01100110
				chksum = MainBuf[newPos_uart-1];
 8001528:	4b10      	ldr	r3, [pc, #64]	; (800156c <_Z15All_mode_UARTUIv+0x50c>)
 800152a:	881b      	ldrh	r3, [r3, #0]
 800152c:	3b01      	subs	r3, #1
 800152e:	4a10      	ldr	r2, [pc, #64]	; (8001570 <_Z15All_mode_UARTUIv+0x510>)
 8001530:	5cd2      	ldrb	r2, [r2, r3]
 8001532:	4b10      	ldr	r3, [pc, #64]	; (8001574 <_Z15All_mode_UARTUIv+0x514>)
 8001534:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 8001536:	4b13      	ldr	r3, [pc, #76]	; (8001584 <_Z15All_mode_UARTUIv+0x524>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	43db      	mvns	r3, r3
 800153c:	b2da      	uxtb	r2, r3
 800153e:	4b1e      	ldr	r3, [pc, #120]	; (80015b8 <_Z15All_mode_UARTUIv+0x558>)
 8001540:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 8001542:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <_Z15All_mode_UARTUIv+0x514>)
 8001544:	781a      	ldrb	r2, [r3, #0]
 8001546:	4b1c      	ldr	r3, [pc, #112]	; (80015b8 <_Z15All_mode_UARTUIv+0x558>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	429a      	cmp	r2, r3
 800154c:	f040 815a 	bne.w	8001804 <_Z15All_mode_UARTUIv+0x7a4>
					M_state = 9;
 8001550:	4b0e      	ldr	r3, [pc, #56]	; (800158c <_Z15All_mode_UARTUIv+0x52c>)
 8001552:	2209      	movs	r2, #9
 8001554:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 8001556:	f000 f995 	bl	8001884 <_Z7xu_Uartv>
					//Req_sta[1] = 0;
					//Req_sta[2] = x;
					//Req_sta[3] = ~(Req_sta[0] + Req_sta[1] + Req_sta[2]);
					HAL_UART_Transmit(&huart2, (uint8_t*)Req_sta, 4 ,1000);
 800155a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800155e:	2204      	movs	r2, #4
 8001560:	4917      	ldr	r1, [pc, #92]	; (80015c0 <_Z15All_mode_UARTUIv+0x560>)
 8001562:	4818      	ldr	r0, [pc, #96]	; (80015c4 <_Z15All_mode_UARTUIv+0x564>)
 8001564:	f019 fc65 	bl	801ae32 <HAL_UART_Transmit>
				}
				break;
 8001568:	e14c      	b.n	8001804 <_Z15All_mode_UARTUIv+0x7a4>
 800156a:	bf00      	nop
 800156c:	200006ca 	.word	0x200006ca
 8001570:	200006a8 	.word	0x200006a8
 8001574:	2000070d 	.word	0x2000070d
 8001578:	20000712 	.word	0x20000712
 800157c:	20000711 	.word	0x20000711
 8001580:	200006e4 	.word	0x200006e4
 8001584:	2000070c 	.word	0x2000070c
 8001588:	2000070f 	.word	0x2000070f
 800158c:	20000713 	.word	0x20000713
 8001590:	200004b8 	.word	0x200004b8
 8001594:	200000f0 	.word	0x200000f0
 8001598:	20000704 	.word	0x20000704
 800159c:	20000708 	.word	0x20000708
 80015a0:	20000714 	.word	0x20000714
 80015a4:	200006c8 	.word	0x200006c8
 80015a8:	20000715 	.word	0x20000715
 80015ac:	200006e8 	.word	0x200006e8
 80015b0:	200006f0 	.word	0x200006f0
 80015b4:	20000710 	.word	0x20000710
 80015b8:	2000070e 	.word	0x2000070e
 80015bc:	20000498 	.word	0x20000498
 80015c0:	20000154 	.word	0x20000154
 80015c4:	20000394 	.word	0x20000394
		////==============[Request Angular Position]===========
			case 10: //10011010 01100101
				chksum = MainBuf[newPos_uart-1];
 80015c8:	4b99      	ldr	r3, [pc, #612]	; (8001830 <_Z15All_mode_UARTUIv+0x7d0>)
 80015ca:	881b      	ldrh	r3, [r3, #0]
 80015cc:	3b01      	subs	r3, #1
 80015ce:	4a99      	ldr	r2, [pc, #612]	; (8001834 <_Z15All_mode_UARTUIv+0x7d4>)
 80015d0:	5cd2      	ldrb	r2, [r2, r3]
 80015d2:	4b99      	ldr	r3, [pc, #612]	; (8001838 <_Z15All_mode_UARTUIv+0x7d8>)
 80015d4:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 80015d6:	4b99      	ldr	r3, [pc, #612]	; (800183c <_Z15All_mode_UARTUIv+0x7dc>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	43db      	mvns	r3, r3
 80015dc:	b2da      	uxtb	r2, r3
 80015de:	4b98      	ldr	r3, [pc, #608]	; (8001840 <_Z15All_mode_UARTUIv+0x7e0>)
 80015e0:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 80015e2:	4b95      	ldr	r3, [pc, #596]	; (8001838 <_Z15All_mode_UARTUIv+0x7d8>)
 80015e4:	781a      	ldrb	r2, [r3, #0]
 80015e6:	4b96      	ldr	r3, [pc, #600]	; (8001840 <_Z15All_mode_UARTUIv+0x7e0>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	f040 810c 	bne.w	8001808 <_Z15All_mode_UARTUIv+0x7a8>
					M_state = 10;
 80015f0:	4b94      	ldr	r3, [pc, #592]	; (8001844 <_Z15All_mode_UARTUIv+0x7e4>)
 80015f2:	220a      	movs	r2, #10
 80015f4:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 80015f6:	f000 f945 	bl	8001884 <_Z7xu_Uartv>
					DataProtocol_AngPosi = (KalP * 10000);
 80015fa:	4b93      	ldr	r3, [pc, #588]	; (8001848 <_Z15All_mode_UARTUIv+0x7e8>)
 80015fc:	edd3 7a00 	vldr	s15, [r3]
 8001600:	ed9f 7a92 	vldr	s14, [pc, #584]	; 800184c <_Z15All_mode_UARTUIv+0x7ec>
 8001604:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001608:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800160c:	ee17 2a90 	vmov	r2, s15
 8001610:	4b8f      	ldr	r3, [pc, #572]	; (8001850 <_Z15All_mode_UARTUIv+0x7f0>)
 8001612:	601a      	str	r2, [r3, #0]
					Req_AngPosi[1] = (DataProtocol_AngPosi / 256);
 8001614:	4b8e      	ldr	r3, [pc, #568]	; (8001850 <_Z15All_mode_UARTUIv+0x7f0>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	da00      	bge.n	800161e <_Z15All_mode_UARTUIv+0x5be>
 800161c:	33ff      	adds	r3, #255	; 0xff
 800161e:	121b      	asrs	r3, r3, #8
 8001620:	b2da      	uxtb	r2, r3
 8001622:	4b8c      	ldr	r3, [pc, #560]	; (8001854 <_Z15All_mode_UARTUIv+0x7f4>)
 8001624:	705a      	strb	r2, [r3, #1]
					Req_AngPosi[2] = (DataProtocol_AngPosi % 256);
 8001626:	4b8a      	ldr	r3, [pc, #552]	; (8001850 <_Z15All_mode_UARTUIv+0x7f0>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	425a      	negs	r2, r3
 800162c:	b2db      	uxtb	r3, r3
 800162e:	b2d2      	uxtb	r2, r2
 8001630:	bf58      	it	pl
 8001632:	4253      	negpl	r3, r2
 8001634:	b2da      	uxtb	r2, r3
 8001636:	4b87      	ldr	r3, [pc, #540]	; (8001854 <_Z15All_mode_UARTUIv+0x7f4>)
 8001638:	709a      	strb	r2, [r3, #2]
					Req_AngPosi[3] = ~(Req_AngPosi[0] + Req_AngPosi[1] + Req_AngPosi[2]);
 800163a:	4b86      	ldr	r3, [pc, #536]	; (8001854 <_Z15All_mode_UARTUIv+0x7f4>)
 800163c:	781a      	ldrb	r2, [r3, #0]
 800163e:	4b85      	ldr	r3, [pc, #532]	; (8001854 <_Z15All_mode_UARTUIv+0x7f4>)
 8001640:	785b      	ldrb	r3, [r3, #1]
 8001642:	4413      	add	r3, r2
 8001644:	b2da      	uxtb	r2, r3
 8001646:	4b83      	ldr	r3, [pc, #524]	; (8001854 <_Z15All_mode_UARTUIv+0x7f4>)
 8001648:	789b      	ldrb	r3, [r3, #2]
 800164a:	4413      	add	r3, r2
 800164c:	b2db      	uxtb	r3, r3
 800164e:	43db      	mvns	r3, r3
 8001650:	b2da      	uxtb	r2, r3
 8001652:	4b80      	ldr	r3, [pc, #512]	; (8001854 <_Z15All_mode_UARTUIv+0x7f4>)
 8001654:	70da      	strb	r2, [r3, #3]
					HAL_UART_Transmit(&huart2, (uint8_t*)Req_AngPosi, 4 ,1000);
 8001656:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800165a:	2204      	movs	r2, #4
 800165c:	497d      	ldr	r1, [pc, #500]	; (8001854 <_Z15All_mode_UARTUIv+0x7f4>)
 800165e:	487e      	ldr	r0, [pc, #504]	; (8001858 <_Z15All_mode_UARTUIv+0x7f8>)
 8001660:	f019 fbe7 	bl	801ae32 <HAL_UART_Transmit>
				}
				break;
 8001664:	e0d0      	b.n	8001808 <_Z15All_mode_UARTUIv+0x7a8>
		////==============[Request MAX Angular velo]===========
			case 11: //10011011 01100100
				chksum = MainBuf[newPos_uart-1];
 8001666:	4b72      	ldr	r3, [pc, #456]	; (8001830 <_Z15All_mode_UARTUIv+0x7d0>)
 8001668:	881b      	ldrh	r3, [r3, #0]
 800166a:	3b01      	subs	r3, #1
 800166c:	4a71      	ldr	r2, [pc, #452]	; (8001834 <_Z15All_mode_UARTUIv+0x7d4>)
 800166e:	5cd2      	ldrb	r2, [r2, r3]
 8001670:	4b71      	ldr	r3, [pc, #452]	; (8001838 <_Z15All_mode_UARTUIv+0x7d8>)
 8001672:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 8001674:	4b71      	ldr	r3, [pc, #452]	; (800183c <_Z15All_mode_UARTUIv+0x7dc>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	43db      	mvns	r3, r3
 800167a:	b2da      	uxtb	r2, r3
 800167c:	4b70      	ldr	r3, [pc, #448]	; (8001840 <_Z15All_mode_UARTUIv+0x7e0>)
 800167e:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 8001680:	4b6d      	ldr	r3, [pc, #436]	; (8001838 <_Z15All_mode_UARTUIv+0x7d8>)
 8001682:	781a      	ldrb	r2, [r3, #0]
 8001684:	4b6e      	ldr	r3, [pc, #440]	; (8001840 <_Z15All_mode_UARTUIv+0x7e0>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	429a      	cmp	r2, r3
 800168a:	f040 80bf 	bne.w	800180c <_Z15All_mode_UARTUIv+0x7ac>
					M_state = 11;
 800168e:	4b6d      	ldr	r3, [pc, #436]	; (8001844 <_Z15All_mode_UARTUIv+0x7e4>)
 8001690:	220b      	movs	r2, #11
 8001692:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 8001694:	f000 f8f6 	bl	8001884 <_Z7xu_Uartv>
					DataProtocol_Velo = (KalV/(2 * 3.14)) * 60;
 8001698:	4b70      	ldr	r3, [pc, #448]	; (800185c <_Z15All_mode_UARTUIv+0x7fc>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4618      	mov	r0, r3
 800169e:	f7fe ff53 	bl	8000548 <__aeabi_f2d>
 80016a2:	a361      	add	r3, pc, #388	; (adr r3, 8001828 <_Z15All_mode_UARTUIv+0x7c8>)
 80016a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a8:	f7ff f8d0 	bl	800084c <__aeabi_ddiv>
 80016ac:	4602      	mov	r2, r0
 80016ae:	460b      	mov	r3, r1
 80016b0:	4610      	mov	r0, r2
 80016b2:	4619      	mov	r1, r3
 80016b4:	f04f 0200 	mov.w	r2, #0
 80016b8:	4b69      	ldr	r3, [pc, #420]	; (8001860 <_Z15All_mode_UARTUIv+0x800>)
 80016ba:	f7fe ff9d 	bl	80005f8 <__aeabi_dmul>
 80016be:	4602      	mov	r2, r0
 80016c0:	460b      	mov	r3, r1
 80016c2:	4610      	mov	r0, r2
 80016c4:	4619      	mov	r1, r3
 80016c6:	f7ff fa47 	bl	8000b58 <__aeabi_d2f>
 80016ca:	4603      	mov	r3, r0
 80016cc:	4a65      	ldr	r2, [pc, #404]	; (8001864 <_Z15All_mode_UARTUIv+0x804>)
 80016ce:	6013      	str	r3, [r2, #0]
					Req_MaxVelo[1] = 0;
 80016d0:	4b65      	ldr	r3, [pc, #404]	; (8001868 <_Z15All_mode_UARTUIv+0x808>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	705a      	strb	r2, [r3, #1]
					Req_MaxVelo[2] = (DataProtocol_Velo * 255) / 10;
 80016d6:	4b63      	ldr	r3, [pc, #396]	; (8001864 <_Z15All_mode_UARTUIv+0x804>)
 80016d8:	edd3 7a00 	vldr	s15, [r3]
 80016dc:	ed9f 7a63 	vldr	s14, [pc, #396]	; 800186c <_Z15All_mode_UARTUIv+0x80c>
 80016e0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80016e4:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80016e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016f0:	edc7 7a01 	vstr	s15, [r7, #4]
 80016f4:	793b      	ldrb	r3, [r7, #4]
 80016f6:	b2da      	uxtb	r2, r3
 80016f8:	4b5b      	ldr	r3, [pc, #364]	; (8001868 <_Z15All_mode_UARTUIv+0x808>)
 80016fa:	709a      	strb	r2, [r3, #2]
					Req_MaxVelo[3] = ~(Req_MaxVelo[0] + Req_MaxVelo[1] + Req_MaxVelo[2]);
 80016fc:	4b5a      	ldr	r3, [pc, #360]	; (8001868 <_Z15All_mode_UARTUIv+0x808>)
 80016fe:	781a      	ldrb	r2, [r3, #0]
 8001700:	4b59      	ldr	r3, [pc, #356]	; (8001868 <_Z15All_mode_UARTUIv+0x808>)
 8001702:	785b      	ldrb	r3, [r3, #1]
 8001704:	4413      	add	r3, r2
 8001706:	b2da      	uxtb	r2, r3
 8001708:	4b57      	ldr	r3, [pc, #348]	; (8001868 <_Z15All_mode_UARTUIv+0x808>)
 800170a:	789b      	ldrb	r3, [r3, #2]
 800170c:	4413      	add	r3, r2
 800170e:	b2db      	uxtb	r3, r3
 8001710:	43db      	mvns	r3, r3
 8001712:	b2da      	uxtb	r2, r3
 8001714:	4b54      	ldr	r3, [pc, #336]	; (8001868 <_Z15All_mode_UARTUIv+0x808>)
 8001716:	70da      	strb	r2, [r3, #3]
					HAL_UART_Transmit(&huart2, (uint8_t*)Req_MaxVelo, 4 ,1000);
 8001718:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800171c:	2204      	movs	r2, #4
 800171e:	4952      	ldr	r1, [pc, #328]	; (8001868 <_Z15All_mode_UARTUIv+0x808>)
 8001720:	484d      	ldr	r0, [pc, #308]	; (8001858 <_Z15All_mode_UARTUIv+0x7f8>)
 8001722:	f019 fb86 	bl	801ae32 <HAL_UART_Transmit>
				}
				break;
 8001726:	e071      	b.n	800180c <_Z15All_mode_UARTUIv+0x7ac>
		////==============[Enable end effector]================
			case 12: //// 12  10011100 01100011
				chksum = MainBuf[newPos_uart-1];
 8001728:	4b41      	ldr	r3, [pc, #260]	; (8001830 <_Z15All_mode_UARTUIv+0x7d0>)
 800172a:	881b      	ldrh	r3, [r3, #0]
 800172c:	3b01      	subs	r3, #1
 800172e:	4a41      	ldr	r2, [pc, #260]	; (8001834 <_Z15All_mode_UARTUIv+0x7d4>)
 8001730:	5cd2      	ldrb	r2, [r2, r3]
 8001732:	4b41      	ldr	r3, [pc, #260]	; (8001838 <_Z15All_mode_UARTUIv+0x7d8>)
 8001734:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 8001736:	4b41      	ldr	r3, [pc, #260]	; (800183c <_Z15All_mode_UARTUIv+0x7dc>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	43db      	mvns	r3, r3
 800173c:	b2da      	uxtb	r2, r3
 800173e:	4b40      	ldr	r3, [pc, #256]	; (8001840 <_Z15All_mode_UARTUIv+0x7e0>)
 8001740:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 8001742:	4b3d      	ldr	r3, [pc, #244]	; (8001838 <_Z15All_mode_UARTUIv+0x7d8>)
 8001744:	781a      	ldrb	r2, [r3, #0]
 8001746:	4b3e      	ldr	r3, [pc, #248]	; (8001840 <_Z15All_mode_UARTUIv+0x7e0>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	429a      	cmp	r2, r3
 800174c:	d160      	bne.n	8001810 <_Z15All_mode_UARTUIv+0x7b0>
					M_state = 12;
 800174e:	4b3d      	ldr	r3, [pc, #244]	; (8001844 <_Z15All_mode_UARTUIv+0x7e4>)
 8001750:	220c      	movs	r2, #12
 8001752:	701a      	strb	r2, [r3, #0]
					flag_efftActi = 1;
 8001754:	4b46      	ldr	r3, [pc, #280]	; (8001870 <_Z15All_mode_UARTUIv+0x810>)
 8001756:	2201      	movs	r2, #1
 8001758:	701a      	strb	r2, [r3, #0]

					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 800175a:	f000 f893 	bl	8001884 <_Z7xu_Uartv>
				}
				break;
 800175e:	e057      	b.n	8001810 <_Z15All_mode_UARTUIv+0x7b0>
		////==============[Disable end effector]================
			case 13: // 13 10011101 01100010
				chksum = MainBuf[newPos_uart-1];
 8001760:	4b33      	ldr	r3, [pc, #204]	; (8001830 <_Z15All_mode_UARTUIv+0x7d0>)
 8001762:	881b      	ldrh	r3, [r3, #0]
 8001764:	3b01      	subs	r3, #1
 8001766:	4a33      	ldr	r2, [pc, #204]	; (8001834 <_Z15All_mode_UARTUIv+0x7d4>)
 8001768:	5cd2      	ldrb	r2, [r2, r3]
 800176a:	4b33      	ldr	r3, [pc, #204]	; (8001838 <_Z15All_mode_UARTUIv+0x7d8>)
 800176c:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 800176e:	4b33      	ldr	r3, [pc, #204]	; (800183c <_Z15All_mode_UARTUIv+0x7dc>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	43db      	mvns	r3, r3
 8001774:	b2da      	uxtb	r2, r3
 8001776:	4b32      	ldr	r3, [pc, #200]	; (8001840 <_Z15All_mode_UARTUIv+0x7e0>)
 8001778:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 800177a:	4b2f      	ldr	r3, [pc, #188]	; (8001838 <_Z15All_mode_UARTUIv+0x7d8>)
 800177c:	781a      	ldrb	r2, [r3, #0]
 800177e:	4b30      	ldr	r3, [pc, #192]	; (8001840 <_Z15All_mode_UARTUIv+0x7e0>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	429a      	cmp	r2, r3
 8001784:	d146      	bne.n	8001814 <_Z15All_mode_UARTUIv+0x7b4>
					M_state = 13;
 8001786:	4b2f      	ldr	r3, [pc, #188]	; (8001844 <_Z15All_mode_UARTUIv+0x7e4>)
 8001788:	220d      	movs	r2, #13
 800178a:	701a      	strb	r2, [r3, #0]

					trig_efftRead = 0;
 800178c:	4b39      	ldr	r3, [pc, #228]	; (8001874 <_Z15All_mode_UARTUIv+0x814>)
 800178e:	2200      	movs	r2, #0
 8001790:	701a      	strb	r2, [r3, #0]
					flag_efftRead = 0;
 8001792:	4b39      	ldr	r3, [pc, #228]	; (8001878 <_Z15All_mode_UARTUIv+0x818>)
 8001794:	2200      	movs	r2, #0
 8001796:	701a      	strb	r2, [r3, #0]
					flag_efftActi = 0;
 8001798:	4b35      	ldr	r3, [pc, #212]	; (8001870 <_Z15All_mode_UARTUIv+0x810>)
 800179a:	2200      	movs	r2, #0
 800179c:	701a      	strb	r2, [r3, #0]

					xu_Uart();
 800179e:	f000 f871 	bl	8001884 <_Z7xu_Uartv>
				}
				break;
 80017a2:	e037      	b.n	8001814 <_Z15All_mode_UARTUIv+0x7b4>
		////==============[Set Home]================
			case 14: //10011110 01100001
				chksum = MainBuf[newPos_uart-1];
 80017a4:	4b22      	ldr	r3, [pc, #136]	; (8001830 <_Z15All_mode_UARTUIv+0x7d0>)
 80017a6:	881b      	ldrh	r3, [r3, #0]
 80017a8:	3b01      	subs	r3, #1
 80017aa:	4a22      	ldr	r2, [pc, #136]	; (8001834 <_Z15All_mode_UARTUIv+0x7d4>)
 80017ac:	5cd2      	ldrb	r2, [r2, r3]
 80017ae:	4b22      	ldr	r3, [pc, #136]	; (8001838 <_Z15All_mode_UARTUIv+0x7d8>)
 80017b0:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 80017b2:	4b22      	ldr	r3, [pc, #136]	; (800183c <_Z15All_mode_UARTUIv+0x7dc>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	43db      	mvns	r3, r3
 80017b8:	b2da      	uxtb	r2, r3
 80017ba:	4b21      	ldr	r3, [pc, #132]	; (8001840 <_Z15All_mode_UARTUIv+0x7e0>)
 80017bc:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 80017be:	4b1e      	ldr	r3, [pc, #120]	; (8001838 <_Z15All_mode_UARTUIv+0x7d8>)
 80017c0:	781a      	ldrb	r2, [r3, #0]
 80017c2:	4b1f      	ldr	r3, [pc, #124]	; (8001840 <_Z15All_mode_UARTUIv+0x7e0>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d126      	bne.n	8001818 <_Z15All_mode_UARTUIv+0x7b8>
					M_state = 14;
 80017ca:	4b1e      	ldr	r3, [pc, #120]	; (8001844 <_Z15All_mode_UARTUIv+0x7e4>)
 80017cc:	220e      	movs	r2, #14
 80017ce:	701a      	strb	r2, [r3, #0]
					//act as set zero interrupt
					Finalposition = 0;
 80017d0:	4b2a      	ldr	r3, [pc, #168]	; (800187c <_Z15All_mode_UARTUIv+0x81c>)
 80017d2:	f04f 0200 	mov.w	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
					grandState = SetZeroGr;
 80017d8:	4b29      	ldr	r3, [pc, #164]	; (8001880 <_Z15All_mode_UARTUIv+0x820>)
 80017da:	2205      	movs	r2, #5
 80017dc:	701a      	strb	r2, [r3, #0]
					xu_Uart();
 80017de:	f000 f851 	bl	8001884 <_Z7xu_Uartv>
				}
				break;
 80017e2:	e019      	b.n	8001818 <_Z15All_mode_UARTUIv+0x7b8>
				break;
 80017e4:	bf00      	nop
 80017e6:	e018      	b.n	800181a <_Z15All_mode_UARTUIv+0x7ba>
				break;
 80017e8:	bf00      	nop
 80017ea:	e016      	b.n	800181a <_Z15All_mode_UARTUIv+0x7ba>
				break;
 80017ec:	bf00      	nop
 80017ee:	e014      	b.n	800181a <_Z15All_mode_UARTUIv+0x7ba>
				break;
 80017f0:	bf00      	nop
 80017f2:	e012      	b.n	800181a <_Z15All_mode_UARTUIv+0x7ba>
				break;
 80017f4:	bf00      	nop
 80017f6:	e010      	b.n	800181a <_Z15All_mode_UARTUIv+0x7ba>
				break;
 80017f8:	bf00      	nop
 80017fa:	e00e      	b.n	800181a <_Z15All_mode_UARTUIv+0x7ba>
				break;
 80017fc:	bf00      	nop
 80017fe:	e00c      	b.n	800181a <_Z15All_mode_UARTUIv+0x7ba>
				break;
 8001800:	bf00      	nop
 8001802:	e00a      	b.n	800181a <_Z15All_mode_UARTUIv+0x7ba>
				break;
 8001804:	bf00      	nop
 8001806:	e008      	b.n	800181a <_Z15All_mode_UARTUIv+0x7ba>
				break;
 8001808:	bf00      	nop
 800180a:	e006      	b.n	800181a <_Z15All_mode_UARTUIv+0x7ba>
				break;
 800180c:	bf00      	nop
 800180e:	e004      	b.n	800181a <_Z15All_mode_UARTUIv+0x7ba>
				break;
 8001810:	bf00      	nop
 8001812:	e002      	b.n	800181a <_Z15All_mode_UARTUIv+0x7ba>
				break;
 8001814:	bf00      	nop
 8001816:	e000      	b.n	800181a <_Z15All_mode_UARTUIv+0x7ba>
				break;
 8001818:	bf00      	nop
			}
}
 800181a:	bf00      	nop
 800181c:	3720      	adds	r7, #32
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	f3af 8000 	nop.w
 8001828:	51eb851f 	.word	0x51eb851f
 800182c:	40191eb8 	.word	0x40191eb8
 8001830:	200006ca 	.word	0x200006ca
 8001834:	200006a8 	.word	0x200006a8
 8001838:	2000070d 	.word	0x2000070d
 800183c:	2000070c 	.word	0x2000070c
 8001840:	2000070e 	.word	0x2000070e
 8001844:	20000713 	.word	0x20000713
 8001848:	20000644 	.word	0x20000644
 800184c:	461c4000 	.word	0x461c4000
 8001850:	200006cc 	.word	0x200006cc
 8001854:	20000158 	.word	0x20000158
 8001858:	20000394 	.word	0x20000394
 800185c:	20000648 	.word	0x20000648
 8001860:	404e0000 	.word	0x404e0000
 8001864:	200006d0 	.word	0x200006d0
 8001868:	2000015c 	.word	0x2000015c
 800186c:	437f0000 	.word	0x437f0000
 8001870:	20000675 	.word	0x20000675
 8001874:	20000677 	.word	0x20000677
 8001878:	20000676 	.word	0x20000676
 800187c:	20000520 	.word	0x20000520
 8001880:	20000498 	.word	0x20000498

08001884 <_Z7xu_Uartv>:

void xu_Uart(){
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
	//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
	HAL_UART_Transmit(&huart2, (uint8_t*)temp_s_ack1, 2 ,1000); //Xu
 8001888:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800188c:	2202      	movs	r2, #2
 800188e:	4903      	ldr	r1, [pc, #12]	; (800189c <_Z7xu_Uartv+0x18>)
 8001890:	4803      	ldr	r0, [pc, #12]	; (80018a0 <_Z7xu_Uartv+0x1c>)
 8001892:	f019 face 	bl	801ae32 <HAL_UART_Transmit>
}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	2000014c 	.word	0x2000014c
 80018a0:	20000394 	.word	0x20000394

080018a4 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 80018a4:	b5b0      	push	{r4, r5, r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f7fe fe38 	bl	8000524 <__aeabi_i2d>
 80018b4:	4604      	mov	r4, r0
 80018b6:	460d      	mov	r5, r1
 80018b8:	6838      	ldr	r0, [r7, #0]
 80018ba:	f7fe fe33 	bl	8000524 <__aeabi_i2d>
 80018be:	4602      	mov	r2, r0
 80018c0:	460b      	mov	r3, r1
 80018c2:	ec43 2b11 	vmov	d1, r2, r3
 80018c6:	ec45 4b10 	vmov	d0, r4, r5
 80018ca:	f01a fc99 	bl	801c200 <pow>
 80018ce:	eeb0 7a40 	vmov.f32	s14, s0
 80018d2:	eef0 7a60 	vmov.f32	s15, s1
    }
 80018d6:	eeb0 0a47 	vmov.f32	s0, s14
 80018da:	eef0 0a67 	vmov.f32	s1, s15
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bdb0      	pop	{r4, r5, r7, pc}

080018e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018e8:	b0f2      	sub	sp, #456	; 0x1c8
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	/////assign  Matrix  element value  //////////
		A << 1 ,   Dt    ,   (Dt*Dt)/2 ,
 80018ec:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80018f0:	f5a3 72c2 	sub.w	r2, r3, #388	; 0x184
 80018f4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80018f8:	6013      	str	r3, [r2, #0]
 80018fa:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80018fe:	f5a3 70ca 	sub.w	r0, r3, #404	; 0x194
 8001902:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001906:	461a      	mov	r2, r3
 8001908:	49ed      	ldr	r1, [pc, #948]	; (8001cc0 <main+0x3dc>)
 800190a:	f001 fe0e 	bl	800352a <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEElsERKf>
 800190e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001912:	f5a3 72c0 	sub.w	r2, r3, #384	; 0x180
 8001916:	4beb      	ldr	r3, [pc, #940]	; (8001cc4 <main+0x3e0>)
 8001918:	6013      	str	r3, [r2, #0]
 800191a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800191e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001922:	4611      	mov	r1, r2
 8001924:	4618      	mov	r0, r3
 8001926:	f001 fe1b 	bl	8003560 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 800192a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800192e:	f5a3 72be 	sub.w	r2, r3, #380	; 0x17c
 8001932:	4be5      	ldr	r3, [pc, #916]	; (8001cc8 <main+0x3e4>)
 8001934:	6013      	str	r3, [r2, #0]
 8001936:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800193a:	4619      	mov	r1, r3
 800193c:	f001 fe10 	bl	8003560 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
		     0 ,    1    ,      Dt    ,
 8001940:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001944:	f5a3 72bc 	sub.w	r2, r3, #376	; 0x178
 8001948:	f04f 0300 	mov.w	r3, #0
 800194c:	6013      	str	r3, [r2, #0]
 800194e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001952:	4619      	mov	r1, r3
 8001954:	f001 fe04 	bl	8003560 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001958:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800195c:	f5a3 72ba 	sub.w	r2, r3, #372	; 0x174
 8001960:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001964:	6013      	str	r3, [r2, #0]
 8001966:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800196a:	4619      	mov	r1, r3
 800196c:	f001 fdf8 	bl	8003560 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001970:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001974:	f5a3 72b8 	sub.w	r2, r3, #368	; 0x170
 8001978:	4bd2      	ldr	r3, [pc, #840]	; (8001cc4 <main+0x3e0>)
 800197a:	6013      	str	r3, [r2, #0]
 800197c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001980:	4619      	mov	r1, r3
 8001982:	f001 fded 	bl	8003560 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
			 0 ,    0    ,      1     ;
 8001986:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800198a:	f5a3 72b6 	sub.w	r2, r3, #364	; 0x16c
 800198e:	f04f 0300 	mov.w	r3, #0
 8001992:	6013      	str	r3, [r2, #0]
 8001994:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001998:	4619      	mov	r1, r3
 800199a:	f001 fde1 	bl	8003560 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 800199e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80019a2:	f5a3 72b4 	sub.w	r2, r3, #360	; 0x168
 80019a6:	f04f 0300 	mov.w	r3, #0
 80019aa:	6013      	str	r3, [r2, #0]
 80019ac:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80019b0:	4619      	mov	r1, r3
 80019b2:	f001 fdd5 	bl	8003560 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 80019b6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80019ba:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 80019be:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80019c2:	6013      	str	r3, [r2, #0]
 80019c4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80019c8:	4619      	mov	r1, r3
 80019ca:	f001 fdc9 	bl	8003560 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
		A << 1 ,   Dt    ,   (Dt*Dt)/2 ,
 80019ce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80019d2:	4618      	mov	r0, r3
 80019d4:	f001 fdb8 	bl	8003548 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>

		X << 0 ,    0    ,      0     ;
 80019d8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80019dc:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 80019e0:	f04f 0300 	mov.w	r3, #0
 80019e4:	6013      	str	r3, [r2, #0]
 80019e6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80019ea:	f5a3 70b0 	sub.w	r0, r3, #352	; 0x160
 80019ee:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80019f2:	461a      	mov	r2, r3
 80019f4:	49b5      	ldr	r1, [pc, #724]	; (8001ccc <main+0x3e8>)
 80019f6:	f001 fe23 	bl	8003640 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEElsERKf>
 80019fa:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80019fe:	f5a3 72a6 	sub.w	r2, r3, #332	; 0x14c
 8001a02:	f04f 0300 	mov.w	r3, #0
 8001a06:	6013      	str	r3, [r2, #0]
 8001a08:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8001a0c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001a10:	4611      	mov	r1, r2
 8001a12:	4618      	mov	r0, r3
 8001a14:	f001 fe30 	bl	8003678 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001a18:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001a1c:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 8001a20:	f04f 0300 	mov.w	r3, #0
 8001a24:	6013      	str	r3, [r2, #0]
 8001a26:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	f001 fe24 	bl	8003678 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001a30:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001a34:	4618      	mov	r0, r3
 8001a36:	f001 fe12 	bl	800365e <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>

		X1 << 0 ,    0    ,      0     ;
 8001a3a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001a3e:	f5a3 729a 	sub.w	r2, r3, #308	; 0x134
 8001a42:	f04f 0300 	mov.w	r3, #0
 8001a46:	6013      	str	r3, [r2, #0]
 8001a48:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001a4c:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
 8001a50:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001a54:	461a      	mov	r2, r3
 8001a56:	499e      	ldr	r1, [pc, #632]	; (8001cd0 <main+0x3ec>)
 8001a58:	f001 fdf2 	bl	8003640 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEElsERKf>
 8001a5c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001a60:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 8001a64:	f04f 0300 	mov.w	r3, #0
 8001a68:	6013      	str	r3, [r2, #0]
 8001a6a:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8001a6e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001a72:	4611      	mov	r1, r2
 8001a74:	4618      	mov	r0, r3
 8001a76:	f001 fdff 	bl	8003678 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001a7a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001a7e:	f5a3 7296 	sub.w	r2, r3, #300	; 0x12c
 8001a82:	f04f 0300 	mov.w	r3, #0
 8001a86:	6013      	str	r3, [r2, #0]
 8001a88:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	f001 fdf3 	bl	8003678 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001a92:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001a96:	4618      	mov	r0, r3
 8001a98:	f001 fde1 	bl	800365e <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>


		P << 0.000001 , 			0 	 , 			0     ,
 8001a9c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001aa0:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 8001aa4:	4b8b      	ldr	r3, [pc, #556]	; (8001cd4 <main+0x3f0>)
 8001aa6:	6013      	str	r3, [r2, #0]
 8001aa8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001aac:	f5a3 7094 	sub.w	r0, r3, #296	; 0x128
 8001ab0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	4988      	ldr	r1, [pc, #544]	; (8001cd8 <main+0x3f4>)
 8001ab8:	f001 fd37 	bl	800352a <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEElsERKf>
 8001abc:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001ac0:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 8001ac4:	f04f 0300 	mov.w	r3, #0
 8001ac8:	6013      	str	r3, [r2, #0]
 8001aca:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8001ace:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001ad2:	4611      	mov	r1, r2
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f001 fd43 	bl	8003560 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001ada:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001ade:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8001ae2:	f04f 0300 	mov.w	r3, #0
 8001ae6:	6013      	str	r3, [r2, #0]
 8001ae8:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001aec:	4619      	mov	r1, r3
 8001aee:	f001 fd37 	bl	8003560 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
		     0 		 ,    0.000001    ,  		0     ,
 8001af2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001af6:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 8001afa:	f04f 0300 	mov.w	r3, #0
 8001afe:	6013      	str	r3, [r2, #0]
 8001b00:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001b04:	4619      	mov	r1, r3
 8001b06:	f001 fd2b 	bl	8003560 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001b0a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001b0e:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 8001b12:	4b70      	ldr	r3, [pc, #448]	; (8001cd4 <main+0x3f0>)
 8001b14:	6013      	str	r3, [r2, #0]
 8001b16:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	f001 fd20 	bl	8003560 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001b20:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001b24:	f5a3 7282 	sub.w	r2, r3, #260	; 0x104
 8001b28:	f04f 0300 	mov.w	r3, #0
 8001b2c:	6013      	str	r3, [r2, #0]
 8001b2e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001b32:	4619      	mov	r1, r3
 8001b34:	f001 fd14 	bl	8003560 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
			 0 		 ,    		0    ,      0.000001     ;
 8001b38:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001b3c:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 8001b40:	f04f 0300 	mov.w	r3, #0
 8001b44:	6013      	str	r3, [r2, #0]
 8001b46:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	f001 fd08 	bl	8003560 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001b50:	4602      	mov	r2, r0
 8001b52:	f04f 0300 	mov.w	r3, #0
 8001b56:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001b5a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4610      	mov	r0, r2
 8001b62:	f001 fcfd 	bl	8003560 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001b66:	4602      	mov	r2, r0
 8001b68:	4b5a      	ldr	r3, [pc, #360]	; (8001cd4 <main+0x3f0>)
 8001b6a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001b6e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001b72:	4619      	mov	r1, r3
 8001b74:	4610      	mov	r0, r2
 8001b76:	f001 fcf3 	bl	8003560 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
		P << 0.000001 , 			0 	 , 			0     ,
 8001b7a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f001 fce2 	bl	8003548 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>

		O << 0 , 	0 	 , 		0     ,
 8001b84:	f04f 0300 	mov.w	r3, #0
 8001b88:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001b8c:	f107 00d4 	add.w	r0, r7, #212	; 0xd4
 8001b90:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001b94:	461a      	mov	r2, r3
 8001b96:	4951      	ldr	r1, [pc, #324]	; (8001cdc <main+0x3f8>)
 8001b98:	f001 fcc7 	bl	800352a <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEElsERKf>
 8001b9c:	f04f 0300 	mov.w	r3, #0
 8001ba0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001ba4:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 8001ba8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001bac:	4611      	mov	r1, r2
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f001 fcd6 	bl	8003560 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	f04f 0300 	mov.w	r3, #0
 8001bba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001bbe:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4610      	mov	r0, r2
 8001bc6:	f001 fccb 	bl	8003560 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001bca:	4602      	mov	r2, r0
		     0 ,    0    ,  	0     ,
 8001bcc:	f04f 0300 	mov.w	r3, #0
 8001bd0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001bd4:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4610      	mov	r0, r2
 8001bdc:	f001 fcc0 	bl	8003560 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001be0:	4602      	mov	r2, r0
 8001be2:	f04f 0300 	mov.w	r3, #0
 8001be6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001bea:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4610      	mov	r0, r2
 8001bf2:	f001 fcb5 	bl	8003560 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	f04f 0300 	mov.w	r3, #0
 8001bfc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001c00:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001c04:	4619      	mov	r1, r3
 8001c06:	4610      	mov	r0, r2
 8001c08:	f001 fcaa 	bl	8003560 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001c0c:	4602      	mov	r2, r0
			 0 ,    0    ,      0     ;
 8001c0e:	f04f 0300 	mov.w	r3, #0
 8001c12:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001c16:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4610      	mov	r0, r2
 8001c1e:	f001 fc9f 	bl	8003560 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001c22:	4602      	mov	r2, r0
 8001c24:	f04f 0300 	mov.w	r3, #0
 8001c28:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001c2c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001c30:	4619      	mov	r1, r3
 8001c32:	4610      	mov	r0, r2
 8001c34:	f001 fc94 	bl	8003560 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	f04f 0300 	mov.w	r3, #0
 8001c3e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001c42:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001c46:	4619      	mov	r1, r3
 8001c48:	4610      	mov	r0, r2
 8001c4a:	f001 fc89 	bl	8003560 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
		O << 0 , 	0 	 , 		0     ,
 8001c4e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001c52:	4618      	mov	r0, r3
 8001c54:	f001 fc78 	bl	8003548 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>

		I << 1 , 0 , 0 ,
 8001c58:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001c5c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8001c60:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8001c64:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001c68:	461a      	mov	r2, r3
 8001c6a:	491d      	ldr	r1, [pc, #116]	; (8001ce0 <main+0x3fc>)
 8001c6c:	f001 fc5d 	bl	800352a <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEElsERKf>
 8001c70:	f04f 0300 	mov.w	r3, #0
 8001c74:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001c78:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 8001c7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001c80:	4611      	mov	r1, r2
 8001c82:	4618      	mov	r0, r3
 8001c84:	f001 fc6c 	bl	8003560 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	f04f 0300 	mov.w	r3, #0
 8001c8e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001c92:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001c96:	4619      	mov	r1, r3
 8001c98:	4610      	mov	r0, r2
 8001c9a:	f001 fc61 	bl	8003560 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001c9e:	4602      	mov	r2, r0
			 0 , 1 , 0 ,
 8001ca0:	f04f 0300 	mov.w	r3, #0
 8001ca4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001ca8:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001cac:	4619      	mov	r1, r3
 8001cae:	4610      	mov	r0, r2
 8001cb0:	f001 fc56 	bl	8003560 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001cba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001cbe:	e011      	b.n	8001ce4 <main+0x400>
 8001cc0:	20000538 	.word	0x20000538
 8001cc4:	3a83126f 	.word	0x3a83126f
 8001cc8:	350637bd 	.word	0x350637bd
 8001ccc:	20000620 	.word	0x20000620
 8001cd0:	2000062c 	.word	0x2000062c
 8001cd4:	358637bd 	.word	0x358637bd
 8001cd8:	2000055c 	.word	0x2000055c
 8001cdc:	20000580 	.word	0x20000580
 8001ce0:	200005a4 	.word	0x200005a4
 8001ce4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4610      	mov	r0, r2
 8001cec:	f001 fc38 	bl	8003560 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	f04f 0300 	mov.w	r3, #0
 8001cf6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001cfa:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4610      	mov	r0, r2
 8001d02:	f001 fc2d 	bl	8003560 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001d06:	4602      	mov	r2, r0
			 0 , 0 , 1 ;
 8001d08:	f04f 0300 	mov.w	r3, #0
 8001d0c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8001d10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001d14:	4619      	mov	r1, r3
 8001d16:	4610      	mov	r0, r2
 8001d18:	f001 fc22 	bl	8003560 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	f04f 0300 	mov.w	r3, #0
 8001d22:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8001d26:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4610      	mov	r0, r2
 8001d2e:	f001 fc17 	bl	8003560 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001d32:	4602      	mov	r2, r0
 8001d34:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001d38:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8001d3c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001d40:	4619      	mov	r1, r3
 8001d42:	4610      	mov	r0, r2
 8001d44:	f001 fc0c 	bl	8003560 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
		I << 1 , 0 , 0 ,
 8001d48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f001 fbfb 	bl	8003548 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>

		R << pow(10,1); ;
 8001d52:	2101      	movs	r1, #1
 8001d54:	200a      	movs	r0, #10
 8001d56:	f7ff fda5 	bl	80018a4 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001d5a:	ec53 2b10 	vmov	r2, r3, d0
 8001d5e:	4610      	mov	r0, r2
 8001d60:	4619      	mov	r1, r3
 8001d62:	f7fe fef9 	bl	8000b58 <__aeabi_d2f>
 8001d66:	4603      	mov	r3, r0
 8001d68:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001d6c:	f507 709e 	add.w	r0, r7, #316	; 0x13c
 8001d70:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8001d74:	461a      	mov	r2, r3
 8001d76:	4996      	ldr	r1, [pc, #600]	; (8001fd0 <main+0x6ec>)
 8001d78:	f001 fcee 	bl	8003758 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEElsERKf>
 8001d7c:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8001d80:	4618      	mov	r0, r3
 8001d82:	f001 fcf8 	bl	8003776 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>

		D << 0 ;
 8001d86:	f04f 0300 	mov.w	r3, #0
 8001d8a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8001d8e:	f507 70a8 	add.w	r0, r7, #336	; 0x150
 8001d92:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001d96:	461a      	mov	r2, r3
 8001d98:	498e      	ldr	r1, [pc, #568]	; (8001fd4 <main+0x6f0>)
 8001d9a:	f001 fcdd 	bl	8003758 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEElsERKf>
 8001d9e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001da2:	4618      	mov	r0, r3
 8001da4:	f001 fce7 	bl	8003776 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>

		B << 0 , 0 , 0 ;
 8001da8:	f04f 0300 	mov.w	r3, #0
 8001dac:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8001db0:	f507 70b2 	add.w	r0, r7, #356	; 0x164
 8001db4:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8001db8:	461a      	mov	r2, r3
 8001dba:	4987      	ldr	r1, [pc, #540]	; (8001fd8 <main+0x6f4>)
 8001dbc:	f001 fc40 	bl	8003640 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEElsERKf>
 8001dc0:	f04f 0300 	mov.w	r3, #0
 8001dc4:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8001dc8:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 8001dcc:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8001dd0:	4611      	mov	r1, r2
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f001 fc50 	bl	8003678 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	f04f 0300 	mov.w	r3, #0
 8001dde:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001de2:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8001de6:	4619      	mov	r1, r3
 8001de8:	4610      	mov	r0, r2
 8001dea:	f001 fc45 	bl	8003678 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001dee:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8001df2:	4618      	mov	r0, r3
 8001df4:	f001 fc33 	bl	800365e <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>

		C << 1 , 0 , 0 ;
 8001df8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001dfc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8001e00:	f507 70c0 	add.w	r0, r7, #384	; 0x180
 8001e04:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001e08:	461a      	mov	r2, r3
 8001e0a:	4974      	ldr	r1, [pc, #464]	; (8001fdc <main+0x6f8>)
 8001e0c:	f001 fcbf 	bl	800378e <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEElsERKf>
 8001e10:	f04f 0300 	mov.w	r3, #0
 8001e14:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8001e18:	f507 72ca 	add.w	r2, r7, #404	; 0x194
 8001e1c:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8001e20:	4611      	mov	r1, r2
 8001e22:	4618      	mov	r0, r3
 8001e24:	f001 fcce 	bl	80037c4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	f04f 0300 	mov.w	r3, #0
 8001e2e:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8001e32:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001e36:	4619      	mov	r1, r3
 8001e38:	4610      	mov	r0, r2
 8001e3a:	f001 fcc3 	bl	80037c4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf>
 8001e3e:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8001e42:	4618      	mov	r0, r3
 8001e44:	f001 fcb2 	bl	80037ac <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>

		G << (Dt*Dt)/2 , Dt , 1 ;
 8001e48:	4b65      	ldr	r3, [pc, #404]	; (8001fe0 <main+0x6fc>)
 8001e4a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8001e4e:	f507 70ce 	add.w	r0, r7, #412	; 0x19c
 8001e52:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001e56:	461a      	mov	r2, r3
 8001e58:	4962      	ldr	r1, [pc, #392]	; (8001fe4 <main+0x700>)
 8001e5a:	f001 fbf1 	bl	8003640 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEElsERKf>
 8001e5e:	4b62      	ldr	r3, [pc, #392]	; (8001fe8 <main+0x704>)
 8001e60:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8001e64:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 8001e68:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8001e6c:	4611      	mov	r1, r2
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f001 fc02 	bl	8003678 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001e74:	4602      	mov	r2, r0
 8001e76:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001e7a:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8001e7e:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8001e82:	4619      	mov	r1, r3
 8001e84:	4610      	mov	r0, r2
 8001e86:	f001 fbf7 	bl	8003678 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001e8a:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f001 fbe5 	bl	800365e <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e94:	f013 fce6 	bl	8015864 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e98:	f000 f992 	bl	80021c0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e9c:	f000 fba2 	bl	80025e4 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8001ea0:	f000 fb78 	bl	8002594 <_ZL11MX_DMA_Initv>
  MX_I2C1_Init();
 8001ea4:	f000 f9fe 	bl	80022a4 <_ZL12MX_I2C1_Initv>
  MX_TIM11_Init();
 8001ea8:	f000 fb1c 	bl	80024e4 <_ZL13MX_TIM11_Initv>
  MX_TIM4_Init();
 8001eac:	f000 fa62 	bl	8002374 <_ZL12MX_TIM4_Initv>
  MX_I2C3_Init();
 8001eb0:	f000 fa2c 	bl	800230c <_ZL12MX_I2C3_Initv>
  MX_USART2_UART_Init();
 8001eb4:	f000 fb3e 	bl	8002534 <_ZL19MX_USART2_UART_Initv>
  MX_TIM10_Init();
 8001eb8:	f000 faec 	bl	8002494 <_ZL13MX_TIM10_Initv>
  /* USER CODE BEGIN 2 */
    HAL_TIM_Base_Start_IT(&htim10); // milli timer
 8001ebc:	484b      	ldr	r0, [pc, #300]	; (8001fec <main+0x708>)
 8001ebe:	f017 fff7 	bl	8019eb0 <HAL_TIM_Base_Start_IT>
  	HAL_TIM_Base_Start_IT(&htim11); // micro timer
 8001ec2:	484b      	ldr	r0, [pc, #300]	; (8001ff0 <main+0x70c>)
 8001ec4:	f017 fff4 	bl	8019eb0 <HAL_TIM_Base_Start_IT>
    //HAL_TIM_Base_Start(&htim2); // Speed
    //HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t*) &capturedata,CAPTURENUM);

    //PWM Test
    HAL_TIM_Base_Start(&htim4);
 8001ec8:	484a      	ldr	r0, [pc, #296]	; (8001ff4 <main+0x710>)
 8001eca:	f017 ff97 	bl	8019dfc <HAL_TIM_Base_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001ece:	2100      	movs	r1, #0
 8001ed0:	4848      	ldr	r0, [pc, #288]	; (8001ff4 <main+0x710>)
 8001ed2:	f018 f8a9 	bl	801a028 <HAL_TIM_PWM_Start>

    //UART UI
    HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RxBuf, RxBuf_SIZE);
 8001ed6:	2220      	movs	r2, #32
 8001ed8:	4947      	ldr	r1, [pc, #284]	; (8001ff8 <main+0x714>)
 8001eda:	4848      	ldr	r0, [pc, #288]	; (8001ffc <main+0x718>)
 8001edc:	f019 f83b 	bl	801af56 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8001ee0:	4b47      	ldr	r3, [pc, #284]	; (8002000 <main+0x71c>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	6819      	ldr	r1, [r3, #0]
 8001ee6:	4b46      	ldr	r3, [pc, #280]	; (8002000 <main+0x71c>)
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	f021 0308 	bic.w	r3, r1, #8
 8001eee:	6013      	str	r3, [r2, #0]

    ////// ===== Select DataPosition Dataset =================
    //NumPosDataSetx = 0;
    static uint8_t NumPosDataSetx  = 0 + NumPosDataSetDef;
    switch(NumPosDataSetx){
 8001ef0:	4b44      	ldr	r3, [pc, #272]	; (8002004 <main+0x720>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	2b03      	cmp	r3, #3
 8001ef6:	d038      	beq.n	8001f6a <main+0x686>
 8001ef8:	2b03      	cmp	r3, #3
 8001efa:	dc54      	bgt.n	8001fa6 <main+0x6c2>
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d002      	beq.n	8001f06 <main+0x622>
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d019      	beq.n	8001f38 <main+0x654>
 8001f04:	e04f      	b.n	8001fa6 <main+0x6c2>

    case 1:
    	for(int t = 0;t <= PosBufSize ;t++){
 8001f06:	2300      	movs	r3, #0
 8001f08:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001f0c:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001f10:	2b14      	cmp	r3, #20
 8001f12:	dc43      	bgt.n	8001f9c <main+0x6b8>
		PosDataSet[t] = rawPossw_1[t];
 8001f14:	4a3c      	ldr	r2, [pc, #240]	; (8002008 <main+0x724>)
 8001f16:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	4413      	add	r3, r2
 8001f1e:	6819      	ldr	r1, [r3, #0]
 8001f20:	4a3a      	ldr	r2, [pc, #232]	; (800200c <main+0x728>)
 8001f22:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	4413      	add	r3, r2
 8001f2a:	6019      	str	r1, [r3, #0]
    	for(int t = 0;t <= PosBufSize ;t++){
 8001f2c:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001f30:	3301      	adds	r3, #1
 8001f32:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001f36:	e7e9      	b.n	8001f0c <main+0x628>
		}
    	break;

    case 2:
    	for(int t = 0;t <= PosBufSize ;t++){
 8001f38:	2300      	movs	r3, #0
 8001f3a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001f3e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001f42:	2b14      	cmp	r3, #20
 8001f44:	dc2c      	bgt.n	8001fa0 <main+0x6bc>
		PosDataSet[t] = rawPossw_2[t];
 8001f46:	4a32      	ldr	r2, [pc, #200]	; (8002010 <main+0x72c>)
 8001f48:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	4413      	add	r3, r2
 8001f50:	6819      	ldr	r1, [r3, #0]
 8001f52:	4a2e      	ldr	r2, [pc, #184]	; (800200c <main+0x728>)
 8001f54:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	4413      	add	r3, r2
 8001f5c:	6019      	str	r1, [r3, #0]
    	for(int t = 0;t <= PosBufSize ;t++){
 8001f5e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001f62:	3301      	adds	r3, #1
 8001f64:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001f68:	e7e9      	b.n	8001f3e <main+0x65a>
		}
    	break;

    case 3:
    	for(int t = 0;t <= PosBufSize ;t++){
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001f70:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001f74:	2b14      	cmp	r3, #20
 8001f76:	dc15      	bgt.n	8001fa4 <main+0x6c0>
    	PosDataSet[t] = rawPossw_3[t];
 8001f78:	4a26      	ldr	r2, [pc, #152]	; (8002014 <main+0x730>)
 8001f7a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	4413      	add	r3, r2
 8001f82:	6819      	ldr	r1, [r3, #0]
 8001f84:	4a21      	ldr	r2, [pc, #132]	; (800200c <main+0x728>)
 8001f86:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	4413      	add	r3, r2
 8001f8e:	6019      	str	r1, [r3, #0]
    	for(int t = 0;t <= PosBufSize ;t++){
 8001f90:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001f94:	3301      	adds	r3, #1
 8001f96:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001f9a:	e7e9      	b.n	8001f70 <main+0x68c>
    	break;
 8001f9c:	bf00      	nop
 8001f9e:	e002      	b.n	8001fa6 <main+0x6c2>
    	break;
 8001fa0:	bf00      	nop
 8001fa2:	e000      	b.n	8001fa6 <main+0x6c2>
    	}
    	break;
 8001fa4:	bf00      	nop
    }


    ////============position buffer===================
    for(int i = 0; i <= PosBufSize; i++){
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8001fac:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8001fb0:	2b14      	cmp	r3, #20
 8001fb2:	dc35      	bgt.n	8002020 <main+0x73c>
    		positionlog[i] = -1.0;
 8001fb4:	4a18      	ldr	r2, [pc, #96]	; (8002018 <main+0x734>)
 8001fb6:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	441a      	add	r2, r3
 8001fbe:	4b17      	ldr	r3, [pc, #92]	; (800201c <main+0x738>)
 8001fc0:	6013      	str	r3, [r2, #0]
    for(int i = 0; i <= PosBufSize; i++){
 8001fc2:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8001fcc:	e7ee      	b.n	8001fac <main+0x6c8>
 8001fce:	bf00      	nop
 8001fd0:	200005cc 	.word	0x200005cc
 8001fd4:	200005d0 	.word	0x200005d0
 8001fd8:	20000638 	.word	0x20000638
 8001fdc:	200005e4 	.word	0x200005e4
 8001fe0:	350637bd 	.word	0x350637bd
 8001fe4:	200005f0 	.word	0x200005f0
 8001fe8:	3a83126f 	.word	0x3a83126f
 8001fec:	20000304 	.word	0x20000304
 8001ff0:	2000034c 	.word	0x2000034c
 8001ff4:	200002bc 	.word	0x200002bc
 8001ff8:	20000688 	.word	0x20000688
 8001ffc:	20000394 	.word	0x20000394
 8002000:	200003d8 	.word	0x200003d8
 8002004:	20000160 	.word	0x20000160
 8002008:	20000000 	.word	0x20000000
 800200c:	200004b8 	.word	0x200004b8
 8002010:	20000050 	.word	0x20000050
 8002014:	200000a0 	.word	0x200000a0
 8002018:	200000f0 	.word	0x200000f0
 800201c:	bf800000 	.word	0xbf800000
    	}
    //MCP23017 setting init
    HAL_Delay(50);
 8002020:	2032      	movs	r0, #50	; 0x32
 8002022:	f013 fc91 	bl	8015948 <HAL_Delay>
    IOExpenderInit();
 8002026:	f001 f82f 	bl	8003088 <_Z14IOExpenderInitv>
	      ///// IT test
	 //HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);

	  	  ///// GrandState ///////////////////

	  	  if(micros() - TimeStampGrand >= 1000){
 800202a:	f001 f9a7 	bl	800337c <_Z6microsv>
 800202e:	4b57      	ldr	r3, [pc, #348]	; (800218c <main+0x8a8>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2200      	movs	r2, #0
 8002034:	62bb      	str	r3, [r7, #40]	; 0x28
 8002036:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800203a:	ebb0 0803 	subs.w	r8, r0, r3
 800203e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002040:	eb61 0903 	sbc.w	r9, r1, r3
 8002044:	f5b8 7f7a 	cmp.w	r8, #1000	; 0x3e8
 8002048:	f179 0300 	sbcs.w	r3, r9, #0
 800204c:	bf2c      	ite	cs
 800204e:	2301      	movcs	r3, #1
 8002050:	2300      	movcc	r3, #0
 8002052:	b2db      	uxtb	r3, r3
 8002054:	2b00      	cmp	r3, #0
 8002056:	d007      	beq.n	8002068 <main+0x784>
	  		TimeStampGrand = micros();
 8002058:	f001 f990 	bl	800337c <_Z6microsv>
 800205c:	4602      	mov	r2, r0
 800205e:	460b      	mov	r3, r1
 8002060:	4b4a      	ldr	r3, [pc, #296]	; (800218c <main+0x8a8>)
 8002062:	601a      	str	r2, [r3, #0]
	  		 GrandStatumix();
 8002064:	f000 fba8 	bl	80027b8 <_Z13GrandStatumixv>
	  		//CurrentEn = BinPosXI * 0.006136;
	  	  }

	  	  // Encoder I2CRead

	  	  if (micros()-timeStampSR >= 1000)      // don't use 1
 8002068:	f001 f988 	bl	800337c <_Z6microsv>
 800206c:	4b48      	ldr	r3, [pc, #288]	; (8002190 <main+0x8ac>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2200      	movs	r2, #0
 8002072:	623b      	str	r3, [r7, #32]
 8002074:	627a      	str	r2, [r7, #36]	; 0x24
 8002076:	6a3b      	ldr	r3, [r7, #32]
 8002078:	ebb0 0a03 	subs.w	sl, r0, r3
 800207c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207e:	eb61 0b03 	sbc.w	fp, r1, r3
 8002082:	f5ba 7f7a 	cmp.w	sl, #1000	; 0x3e8
 8002086:	f17b 0300 	sbcs.w	r3, fp, #0
 800208a:	bf2c      	ite	cs
 800208c:	2301      	movcs	r3, #1
 800208e:	2300      	movcc	r3, #0
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b00      	cmp	r3, #0
 8002094:	d008      	beq.n	80020a8 <main+0x7c4>
	  	          {
	  	              timeStampSR = micros();           //set new time stamp
 8002096:	f001 f971 	bl	800337c <_Z6microsv>
 800209a:	4602      	mov	r2, r0
 800209c:	460b      	mov	r3, r1
 800209e:	4b3c      	ldr	r3, [pc, #240]	; (8002190 <main+0x8ac>)
 80020a0:	601a      	str	r2, [r3, #0]
	  	              flag_absenc = 1;
 80020a2:	4a3c      	ldr	r2, [pc, #240]	; (8002194 <main+0x8b0>)
 80020a4:	2301      	movs	r3, #1
 80020a6:	7013      	strb	r3, [r2, #0]
	  	          }
	  	  AbsEncI2CReadx(RawEnBitAB);
 80020a8:	483b      	ldr	r0, [pc, #236]	; (8002198 <main+0x8b4>)
 80020aa:	f001 f803 	bl	80030b4 <_Z14AbsEncI2CReadxPh>

	  	  ///////////////////// 2KHz change PWM PB6////////////////////

	  	  if(micros() - timestampPWM >= 500){
 80020ae:	f001 f965 	bl	800337c <_Z6microsv>
 80020b2:	4b3a      	ldr	r3, [pc, #232]	; (800219c <main+0x8b8>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2200      	movs	r2, #0
 80020b8:	61bb      	str	r3, [r7, #24]
 80020ba:	61fa      	str	r2, [r7, #28]
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	1ac3      	subs	r3, r0, r3
 80020c0:	60bb      	str	r3, [r7, #8]
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	eb61 0303 	sbc.w	r3, r1, r3
 80020c8:	60fb      	str	r3, [r7, #12]
 80020ca:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80020ce:	460b      	mov	r3, r1
 80020d0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80020d4:	4613      	mov	r3, r2
 80020d6:	f173 0300 	sbcs.w	r3, r3, #0
 80020da:	bf2c      	ite	cs
 80020dc:	2301      	movcs	r3, #1
 80020de:	2300      	movcc	r3, #0
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d01a      	beq.n	800211c <main+0x838>
	  		  	  timestampPWM = micros(); // stamp
 80020e6:	f001 f949 	bl	800337c <_Z6microsv>
 80020ea:	4602      	mov	r2, r0
 80020ec:	460b      	mov	r3, r1
 80020ee:	4b2b      	ldr	r3, [pc, #172]	; (800219c <main+0x8b8>)
 80020f0:	601a      	str	r2, [r3, #0]
	  	  		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, PWMOut); // dutycycle
 80020f2:	4b2b      	ldr	r3, [pc, #172]	; (80021a0 <main+0x8bc>)
 80020f4:	8819      	ldrh	r1, [r3, #0]
 80020f6:	4b2b      	ldr	r3, [pc, #172]	; (80021a4 <main+0x8c0>)
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	460b      	mov	r3, r1
 80020fc:	6353      	str	r3, [r2, #52]	; 0x34
	  	  		  //__HAL_TIM_SET_PRESCALER(&htim4, pscalr); // Set freq of pwm
	  	  		  //ADC_Target = ADCFeedx[1].datt;
	  	  		if (mot_dirctn == 0){
 80020fe:	4b2a      	ldr	r3, [pc, #168]	; (80021a8 <main+0x8c4>)
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d105      	bne.n	8002112 <main+0x82e>
	  	  		HAL_GPIO_WritePin(Mot_dir_GPIO_Port, Mot_dir_Pin, GPIO_PIN_RESET);
 8002106:	2200      	movs	r2, #0
 8002108:	2104      	movs	r1, #4
 800210a:	4828      	ldr	r0, [pc, #160]	; (80021ac <main+0x8c8>)
 800210c:	f014 fafe 	bl	801670c <HAL_GPIO_WritePin>
 8002110:	e004      	b.n	800211c <main+0x838>
	  	  		}else{
	  	  		HAL_GPIO_WritePin(Mot_dir_GPIO_Port, Mot_dir_Pin, GPIO_PIN_SET);
 8002112:	2201      	movs	r2, #1
 8002114:	2104      	movs	r1, #4
 8002116:	4825      	ldr	r0, [pc, #148]	; (80021ac <main+0x8c8>)
 8002118:	f014 faf8 	bl	801670c <HAL_GPIO_WritePin>
				controlloop();
			 }
	  	    */

	  	 //////////// End Effector /////////////////////
	  	 Efft_activate(); // Activate by flag_efftActi = 1;
 800211c:	f001 f82a 	bl	8003174 <_Z13Efft_activatev>
	  	 Efft_read(&efft_status);
 8002120:	4823      	ldr	r0, [pc, #140]	; (80021b0 <main+0x8cc>)
 8002122:	f001 f877 	bl	8003214 <_Z9Efft_readPh>
	  	 //// trig_efftRead up for 10 times afrer shoot / trig at shoot state
	  	 if(trig_efftRead != 0 && millis() - timestamp_efft >= 500){
 8002126:	4b23      	ldr	r3, [pc, #140]	; (80021b4 <main+0x8d0>)
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d014      	beq.n	8002158 <main+0x874>
 800212e:	f001 f93f 	bl	80033b0 <_Z6millisv>
 8002132:	4603      	mov	r3, r0
 8002134:	2200      	movs	r2, #0
 8002136:	613b      	str	r3, [r7, #16]
 8002138:	617a      	str	r2, [r7, #20]
 800213a:	4b1f      	ldr	r3, [pc, #124]	; (80021b8 <main+0x8d4>)
 800213c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002140:	6939      	ldr	r1, [r7, #16]
 8002142:	1a8c      	subs	r4, r1, r2
 8002144:	6979      	ldr	r1, [r7, #20]
 8002146:	eb61 0503 	sbc.w	r5, r1, r3
 800214a:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
 800214e:	f175 0300 	sbcs.w	r3, r5, #0
 8002152:	d301      	bcc.n	8002158 <main+0x874>
 8002154:	2301      	movs	r3, #1
 8002156:	e000      	b.n	800215a <main+0x876>
 8002158:	2300      	movs	r3, #0
 800215a:	2b00      	cmp	r3, #0
 800215c:	f43f af65 	beq.w	800202a <main+0x746>
	  		 timestamp_efft = millis();
 8002160:	f001 f926 	bl	80033b0 <_Z6millisv>
 8002164:	4603      	mov	r3, r0
 8002166:	2200      	movs	r2, #0
 8002168:	603b      	str	r3, [r7, #0]
 800216a:	607a      	str	r2, [r7, #4]
 800216c:	4b12      	ldr	r3, [pc, #72]	; (80021b8 <main+0x8d4>)
 800216e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002172:	e9c3 1200 	strd	r1, r2, [r3]
	  		 flag_efftRead = 1;
 8002176:	4a11      	ldr	r2, [pc, #68]	; (80021bc <main+0x8d8>)
 8002178:	2301      	movs	r3, #1
 800217a:	7013      	strb	r3, [r2, #0]
	  		 trig_efftRead++;
 800217c:	4b0d      	ldr	r3, [pc, #52]	; (80021b4 <main+0x8d0>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	3301      	adds	r3, #1
 8002182:	b2db      	uxtb	r3, r3
 8002184:	4a0b      	ldr	r2, [pc, #44]	; (80021b4 <main+0x8d0>)
 8002186:	7013      	strb	r3, [r2, #0]
	  	  if(micros() - TimeStampGrand >= 1000){
 8002188:	e74f      	b.n	800202a <main+0x746>
 800218a:	bf00      	nop
 800218c:	2000049c 	.word	0x2000049c
 8002190:	20000508 	.word	0x20000508
 8002194:	20000512 	.word	0x20000512
 8002198:	2000050c 	.word	0x2000050c
 800219c:	20000518 	.word	0x20000518
 80021a0:	20000514 	.word	0x20000514
 80021a4:	200002bc 	.word	0x200002bc
 80021a8:	2000051c 	.word	0x2000051c
 80021ac:	40020400 	.word	0x40020400
 80021b0:	20000674 	.word	0x20000674
 80021b4:	20000677 	.word	0x20000677
 80021b8:	20000678 	.word	0x20000678
 80021bc:	20000676 	.word	0x20000676

080021c0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b094      	sub	sp, #80	; 0x50
 80021c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021c6:	f107 0320 	add.w	r3, r7, #32
 80021ca:	2230      	movs	r2, #48	; 0x30
 80021cc:	2100      	movs	r1, #0
 80021ce:	4618      	mov	r0, r3
 80021d0:	f01a ff98 	bl	801d104 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021d4:	f107 030c 	add.w	r3, r7, #12
 80021d8:	2200      	movs	r2, #0
 80021da:	601a      	str	r2, [r3, #0]
 80021dc:	605a      	str	r2, [r3, #4]
 80021de:	609a      	str	r2, [r3, #8]
 80021e0:	60da      	str	r2, [r3, #12]
 80021e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80021e4:	2300      	movs	r3, #0
 80021e6:	60bb      	str	r3, [r7, #8]
 80021e8:	4b2c      	ldr	r3, [pc, #176]	; (800229c <_Z18SystemClock_Configv+0xdc>)
 80021ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ec:	4a2b      	ldr	r2, [pc, #172]	; (800229c <_Z18SystemClock_Configv+0xdc>)
 80021ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021f2:	6413      	str	r3, [r2, #64]	; 0x40
 80021f4:	4b29      	ldr	r3, [pc, #164]	; (800229c <_Z18SystemClock_Configv+0xdc>)
 80021f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021fc:	60bb      	str	r3, [r7, #8]
 80021fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002200:	2300      	movs	r3, #0
 8002202:	607b      	str	r3, [r7, #4]
 8002204:	4b26      	ldr	r3, [pc, #152]	; (80022a0 <_Z18SystemClock_Configv+0xe0>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a25      	ldr	r2, [pc, #148]	; (80022a0 <_Z18SystemClock_Configv+0xe0>)
 800220a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800220e:	6013      	str	r3, [r2, #0]
 8002210:	4b23      	ldr	r3, [pc, #140]	; (80022a0 <_Z18SystemClock_Configv+0xe0>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002218:	607b      	str	r3, [r7, #4]
 800221a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800221c:	2302      	movs	r3, #2
 800221e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002220:	2301      	movs	r3, #1
 8002222:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002224:	2310      	movs	r3, #16
 8002226:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002228:	2302      	movs	r3, #2
 800222a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800222c:	2300      	movs	r3, #0
 800222e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002230:	2308      	movs	r3, #8
 8002232:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002234:	2364      	movs	r3, #100	; 0x64
 8002236:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002238:	2302      	movs	r3, #2
 800223a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800223c:	2304      	movs	r3, #4
 800223e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002240:	f107 0320 	add.w	r3, r7, #32
 8002244:	4618      	mov	r0, r3
 8002246:	f017 f8f1 	bl	801942c <HAL_RCC_OscConfig>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	bf14      	ite	ne
 8002250:	2301      	movne	r3, #1
 8002252:	2300      	moveq	r3, #0
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 800225a:	f001 f8df 	bl	800341c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800225e:	230f      	movs	r3, #15
 8002260:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002262:	2302      	movs	r3, #2
 8002264:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002266:	2300      	movs	r3, #0
 8002268:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800226a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800226e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002270:	2300      	movs	r3, #0
 8002272:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002274:	f107 030c 	add.w	r3, r7, #12
 8002278:	2103      	movs	r1, #3
 800227a:	4618      	mov	r0, r3
 800227c:	f017 fb4e 	bl	801991c <HAL_RCC_ClockConfig>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	bf14      	ite	ne
 8002286:	2301      	movne	r3, #1
 8002288:	2300      	moveq	r3, #0
 800228a:	b2db      	uxtb	r3, r3
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8002290:	f001 f8c4 	bl	800341c <Error_Handler>
  }
}
 8002294:	bf00      	nop
 8002296:	3750      	adds	r7, #80	; 0x50
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	40023800 	.word	0x40023800
 80022a0:	40007000 	.word	0x40007000

080022a4 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80022a8:	4b15      	ldr	r3, [pc, #84]	; (8002300 <_ZL12MX_I2C1_Initv+0x5c>)
 80022aa:	4a16      	ldr	r2, [pc, #88]	; (8002304 <_ZL12MX_I2C1_Initv+0x60>)
 80022ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80022ae:	4b14      	ldr	r3, [pc, #80]	; (8002300 <_ZL12MX_I2C1_Initv+0x5c>)
 80022b0:	4a15      	ldr	r2, [pc, #84]	; (8002308 <_ZL12MX_I2C1_Initv+0x64>)
 80022b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80022b4:	4b12      	ldr	r3, [pc, #72]	; (8002300 <_ZL12MX_I2C1_Initv+0x5c>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80022ba:	4b11      	ldr	r3, [pc, #68]	; (8002300 <_ZL12MX_I2C1_Initv+0x5c>)
 80022bc:	2200      	movs	r2, #0
 80022be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022c0:	4b0f      	ldr	r3, [pc, #60]	; (8002300 <_ZL12MX_I2C1_Initv+0x5c>)
 80022c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80022c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80022c8:	4b0d      	ldr	r3, [pc, #52]	; (8002300 <_ZL12MX_I2C1_Initv+0x5c>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80022ce:	4b0c      	ldr	r3, [pc, #48]	; (8002300 <_ZL12MX_I2C1_Initv+0x5c>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022d4:	4b0a      	ldr	r3, [pc, #40]	; (8002300 <_ZL12MX_I2C1_Initv+0x5c>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022da:	4b09      	ldr	r3, [pc, #36]	; (8002300 <_ZL12MX_I2C1_Initv+0x5c>)
 80022dc:	2200      	movs	r2, #0
 80022de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80022e0:	4807      	ldr	r0, [pc, #28]	; (8002300 <_ZL12MX_I2C1_Initv+0x5c>)
 80022e2:	f014 fa45 	bl	8016770 <HAL_I2C_Init>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	bf14      	ite	ne
 80022ec:	2301      	movne	r3, #1
 80022ee:	2300      	moveq	r3, #0
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 80022f6:	f001 f891 	bl	800341c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80022fa:	bf00      	nop
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	20000214 	.word	0x20000214
 8002304:	40005400 	.word	0x40005400
 8002308:	00061a80 	.word	0x00061a80

0800230c <_ZL12MX_I2C3_Initv>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002310:	4b15      	ldr	r3, [pc, #84]	; (8002368 <_ZL12MX_I2C3_Initv+0x5c>)
 8002312:	4a16      	ldr	r2, [pc, #88]	; (800236c <_ZL12MX_I2C3_Initv+0x60>)
 8002314:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8002316:	4b14      	ldr	r3, [pc, #80]	; (8002368 <_ZL12MX_I2C3_Initv+0x5c>)
 8002318:	4a15      	ldr	r2, [pc, #84]	; (8002370 <_ZL12MX_I2C3_Initv+0x64>)
 800231a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800231c:	4b12      	ldr	r3, [pc, #72]	; (8002368 <_ZL12MX_I2C3_Initv+0x5c>)
 800231e:	2200      	movs	r2, #0
 8002320:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002322:	4b11      	ldr	r3, [pc, #68]	; (8002368 <_ZL12MX_I2C3_Initv+0x5c>)
 8002324:	2200      	movs	r2, #0
 8002326:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002328:	4b0f      	ldr	r3, [pc, #60]	; (8002368 <_ZL12MX_I2C3_Initv+0x5c>)
 800232a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800232e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002330:	4b0d      	ldr	r3, [pc, #52]	; (8002368 <_ZL12MX_I2C3_Initv+0x5c>)
 8002332:	2200      	movs	r2, #0
 8002334:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002336:	4b0c      	ldr	r3, [pc, #48]	; (8002368 <_ZL12MX_I2C3_Initv+0x5c>)
 8002338:	2200      	movs	r2, #0
 800233a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800233c:	4b0a      	ldr	r3, [pc, #40]	; (8002368 <_ZL12MX_I2C3_Initv+0x5c>)
 800233e:	2200      	movs	r2, #0
 8002340:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002342:	4b09      	ldr	r3, [pc, #36]	; (8002368 <_ZL12MX_I2C3_Initv+0x5c>)
 8002344:	2200      	movs	r2, #0
 8002346:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002348:	4807      	ldr	r0, [pc, #28]	; (8002368 <_ZL12MX_I2C3_Initv+0x5c>)
 800234a:	f014 fa11 	bl	8016770 <HAL_I2C_Init>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	bf14      	ite	ne
 8002354:	2301      	movne	r3, #1
 8002356:	2300      	moveq	r3, #0
 8002358:	b2db      	uxtb	r3, r3
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <_ZL12MX_I2C3_Initv+0x56>
  {
    Error_Handler();
 800235e:	f001 f85d 	bl	800341c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002362:	bf00      	nop
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	20000268 	.word	0x20000268
 800236c:	40005c00 	.word	0x40005c00
 8002370:	00061a80 	.word	0x00061a80

08002374 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b08e      	sub	sp, #56	; 0x38
 8002378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800237a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800237e:	2200      	movs	r2, #0
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	605a      	str	r2, [r3, #4]
 8002384:	609a      	str	r2, [r3, #8]
 8002386:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002388:	f107 0320 	add.w	r3, r7, #32
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]
 8002390:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002392:	1d3b      	adds	r3, r7, #4
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	605a      	str	r2, [r3, #4]
 800239a:	609a      	str	r2, [r3, #8]
 800239c:	60da      	str	r2, [r3, #12]
 800239e:	611a      	str	r2, [r3, #16]
 80023a0:	615a      	str	r2, [r3, #20]
 80023a2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80023a4:	4b39      	ldr	r3, [pc, #228]	; (800248c <_ZL12MX_TIM4_Initv+0x118>)
 80023a6:	4a3a      	ldr	r2, [pc, #232]	; (8002490 <_ZL12MX_TIM4_Initv+0x11c>)
 80023a8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80023aa:	4b38      	ldr	r3, [pc, #224]	; (800248c <_ZL12MX_TIM4_Initv+0x118>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023b0:	4b36      	ldr	r3, [pc, #216]	; (800248c <_ZL12MX_TIM4_Initv+0x118>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 80023b6:	4b35      	ldr	r3, [pc, #212]	; (800248c <_ZL12MX_TIM4_Initv+0x118>)
 80023b8:	f242 720f 	movw	r2, #9999	; 0x270f
 80023bc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023be:	4b33      	ldr	r3, [pc, #204]	; (800248c <_ZL12MX_TIM4_Initv+0x118>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023c4:	4b31      	ldr	r3, [pc, #196]	; (800248c <_ZL12MX_TIM4_Initv+0x118>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80023ca:	4830      	ldr	r0, [pc, #192]	; (800248c <_ZL12MX_TIM4_Initv+0x118>)
 80023cc:	f017 fcc6 	bl	8019d5c <HAL_TIM_Base_Init>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	bf14      	ite	ne
 80023d6:	2301      	movne	r3, #1
 80023d8:	2300      	moveq	r3, #0
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <_ZL12MX_TIM4_Initv+0x70>
  {
    Error_Handler();
 80023e0:	f001 f81c 	bl	800341c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023e8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80023ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023ee:	4619      	mov	r1, r3
 80023f0:	4826      	ldr	r0, [pc, #152]	; (800248c <_ZL12MX_TIM4_Initv+0x118>)
 80023f2:	f018 f893 	bl	801a51c <HAL_TIM_ConfigClockSource>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	bf14      	ite	ne
 80023fc:	2301      	movne	r3, #1
 80023fe:	2300      	moveq	r3, #0
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <_ZL12MX_TIM4_Initv+0x96>
  {
    Error_Handler();
 8002406:	f001 f809 	bl	800341c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800240a:	4820      	ldr	r0, [pc, #128]	; (800248c <_ZL12MX_TIM4_Initv+0x118>)
 800240c:	f017 fdb2 	bl	8019f74 <HAL_TIM_PWM_Init>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	bf14      	ite	ne
 8002416:	2301      	movne	r3, #1
 8002418:	2300      	moveq	r3, #0
 800241a:	b2db      	uxtb	r3, r3
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <_ZL12MX_TIM4_Initv+0xb0>
  {
    Error_Handler();
 8002420:	f000 fffc 	bl	800341c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002424:	2300      	movs	r3, #0
 8002426:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002428:	2300      	movs	r3, #0
 800242a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800242c:	f107 0320 	add.w	r3, r7, #32
 8002430:	4619      	mov	r1, r3
 8002432:	4816      	ldr	r0, [pc, #88]	; (800248c <_ZL12MX_TIM4_Initv+0x118>)
 8002434:	f018 fc2e 	bl	801ac94 <HAL_TIMEx_MasterConfigSynchronization>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	bf14      	ite	ne
 800243e:	2301      	movne	r3, #1
 8002440:	2300      	moveq	r3, #0
 8002442:	b2db      	uxtb	r3, r3
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <_ZL12MX_TIM4_Initv+0xd8>
  {
    Error_Handler();
 8002448:	f000 ffe8 	bl	800341c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800244c:	2360      	movs	r3, #96	; 0x60
 800244e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002450:	2300      	movs	r3, #0
 8002452:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002454:	2300      	movs	r3, #0
 8002456:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002458:	2300      	movs	r3, #0
 800245a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800245c:	1d3b      	adds	r3, r7, #4
 800245e:	2200      	movs	r2, #0
 8002460:	4619      	mov	r1, r3
 8002462:	480a      	ldr	r0, [pc, #40]	; (800248c <_ZL12MX_TIM4_Initv+0x118>)
 8002464:	f017 ff98 	bl	801a398 <HAL_TIM_PWM_ConfigChannel>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	bf14      	ite	ne
 800246e:	2301      	movne	r3, #1
 8002470:	2300      	moveq	r3, #0
 8002472:	b2db      	uxtb	r3, r3
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <_ZL12MX_TIM4_Initv+0x108>
  {
    Error_Handler();
 8002478:	f000 ffd0 	bl	800341c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800247c:	4803      	ldr	r0, [pc, #12]	; (800248c <_ZL12MX_TIM4_Initv+0x118>)
 800247e:	f012 ff65 	bl	801534c <HAL_TIM_MspPostInit>

}
 8002482:	bf00      	nop
 8002484:	3738      	adds	r7, #56	; 0x38
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	200002bc 	.word	0x200002bc
 8002490:	40000800 	.word	0x40000800

08002494 <_ZL13MX_TIM10_Initv>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002498:	4b10      	ldr	r3, [pc, #64]	; (80024dc <_ZL13MX_TIM10_Initv+0x48>)
 800249a:	4a11      	ldr	r2, [pc, #68]	; (80024e0 <_ZL13MX_TIM10_Initv+0x4c>)
 800249c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 99;
 800249e:	4b0f      	ldr	r3, [pc, #60]	; (80024dc <_ZL13MX_TIM10_Initv+0x48>)
 80024a0:	2263      	movs	r2, #99	; 0x63
 80024a2:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024a4:	4b0d      	ldr	r3, [pc, #52]	; (80024dc <_ZL13MX_TIM10_Initv+0x48>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 999;
 80024aa:	4b0c      	ldr	r3, [pc, #48]	; (80024dc <_ZL13MX_TIM10_Initv+0x48>)
 80024ac:	f240 32e7 	movw	r2, #999	; 0x3e7
 80024b0:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024b2:	4b0a      	ldr	r3, [pc, #40]	; (80024dc <_ZL13MX_TIM10_Initv+0x48>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024b8:	4b08      	ldr	r3, [pc, #32]	; (80024dc <_ZL13MX_TIM10_Initv+0x48>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80024be:	4807      	ldr	r0, [pc, #28]	; (80024dc <_ZL13MX_TIM10_Initv+0x48>)
 80024c0:	f017 fc4c 	bl	8019d5c <HAL_TIM_Base_Init>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	bf14      	ite	ne
 80024ca:	2301      	movne	r3, #1
 80024cc:	2300      	moveq	r3, #0
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <_ZL13MX_TIM10_Initv+0x44>
  {
    Error_Handler();
 80024d4:	f000 ffa2 	bl	800341c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80024d8:	bf00      	nop
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	20000304 	.word	0x20000304
 80024e0:	40014400 	.word	0x40014400

080024e4 <_ZL13MX_TIM11_Initv>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80024e8:	4b10      	ldr	r3, [pc, #64]	; (800252c <_ZL13MX_TIM11_Initv+0x48>)
 80024ea:	4a11      	ldr	r2, [pc, #68]	; (8002530 <_ZL13MX_TIM11_Initv+0x4c>)
 80024ec:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 80024ee:	4b0f      	ldr	r3, [pc, #60]	; (800252c <_ZL13MX_TIM11_Initv+0x48>)
 80024f0:	2263      	movs	r2, #99	; 0x63
 80024f2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024f4:	4b0d      	ldr	r3, [pc, #52]	; (800252c <_ZL13MX_TIM11_Initv+0x48>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80024fa:	4b0c      	ldr	r3, [pc, #48]	; (800252c <_ZL13MX_TIM11_Initv+0x48>)
 80024fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002500:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002502:	4b0a      	ldr	r3, [pc, #40]	; (800252c <_ZL13MX_TIM11_Initv+0x48>)
 8002504:	2200      	movs	r2, #0
 8002506:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002508:	4b08      	ldr	r3, [pc, #32]	; (800252c <_ZL13MX_TIM11_Initv+0x48>)
 800250a:	2200      	movs	r2, #0
 800250c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800250e:	4807      	ldr	r0, [pc, #28]	; (800252c <_ZL13MX_TIM11_Initv+0x48>)
 8002510:	f017 fc24 	bl	8019d5c <HAL_TIM_Base_Init>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	bf14      	ite	ne
 800251a:	2301      	movne	r3, #1
 800251c:	2300      	moveq	r3, #0
 800251e:	b2db      	uxtb	r3, r3
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <_ZL13MX_TIM11_Initv+0x44>
  {
    Error_Handler();
 8002524:	f000 ff7a 	bl	800341c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002528:	bf00      	nop
 800252a:	bd80      	pop	{r7, pc}
 800252c:	2000034c 	.word	0x2000034c
 8002530:	40014800 	.word	0x40014800

08002534 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002538:	4b14      	ldr	r3, [pc, #80]	; (800258c <_ZL19MX_USART2_UART_Initv+0x58>)
 800253a:	4a15      	ldr	r2, [pc, #84]	; (8002590 <_ZL19MX_USART2_UART_Initv+0x5c>)
 800253c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 800253e:	4b13      	ldr	r3, [pc, #76]	; (800258c <_ZL19MX_USART2_UART_Initv+0x58>)
 8002540:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 8002544:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8002546:	4b11      	ldr	r3, [pc, #68]	; (800258c <_ZL19MX_USART2_UART_Initv+0x58>)
 8002548:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800254c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800254e:	4b0f      	ldr	r3, [pc, #60]	; (800258c <_ZL19MX_USART2_UART_Initv+0x58>)
 8002550:	2200      	movs	r2, #0
 8002552:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8002554:	4b0d      	ldr	r3, [pc, #52]	; (800258c <_ZL19MX_USART2_UART_Initv+0x58>)
 8002556:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800255a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800255c:	4b0b      	ldr	r3, [pc, #44]	; (800258c <_ZL19MX_USART2_UART_Initv+0x58>)
 800255e:	220c      	movs	r2, #12
 8002560:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002562:	4b0a      	ldr	r3, [pc, #40]	; (800258c <_ZL19MX_USART2_UART_Initv+0x58>)
 8002564:	2200      	movs	r2, #0
 8002566:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002568:	4b08      	ldr	r3, [pc, #32]	; (800258c <_ZL19MX_USART2_UART_Initv+0x58>)
 800256a:	2200      	movs	r2, #0
 800256c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800256e:	4807      	ldr	r0, [pc, #28]	; (800258c <_ZL19MX_USART2_UART_Initv+0x58>)
 8002570:	f018 fc12 	bl	801ad98 <HAL_UART_Init>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	bf14      	ite	ne
 800257a:	2301      	movne	r3, #1
 800257c:	2300      	moveq	r3, #0
 800257e:	b2db      	uxtb	r3, r3
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <_ZL19MX_USART2_UART_Initv+0x54>
  {
    Error_Handler();
 8002584:	f000 ff4a 	bl	800341c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002588:	bf00      	nop
 800258a:	bd80      	pop	{r7, pc}
 800258c:	20000394 	.word	0x20000394
 8002590:	40004400 	.word	0x40004400

08002594 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800259a:	2300      	movs	r3, #0
 800259c:	607b      	str	r3, [r7, #4]
 800259e:	4b10      	ldr	r3, [pc, #64]	; (80025e0 <_ZL11MX_DMA_Initv+0x4c>)
 80025a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a2:	4a0f      	ldr	r2, [pc, #60]	; (80025e0 <_ZL11MX_DMA_Initv+0x4c>)
 80025a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025a8:	6313      	str	r3, [r2, #48]	; 0x30
 80025aa:	4b0d      	ldr	r3, [pc, #52]	; (80025e0 <_ZL11MX_DMA_Initv+0x4c>)
 80025ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025b2:	607b      	str	r3, [r7, #4]
 80025b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80025b6:	2200      	movs	r2, #0
 80025b8:	2100      	movs	r1, #0
 80025ba:	2011      	movs	r0, #17
 80025bc:	f013 fac3 	bl	8015b46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80025c0:	2011      	movs	r0, #17
 80025c2:	f013 fadc 	bl	8015b7e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80025c6:	2200      	movs	r2, #0
 80025c8:	2100      	movs	r1, #0
 80025ca:	202f      	movs	r0, #47	; 0x2f
 80025cc:	f013 fabb 	bl	8015b46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80025d0:	202f      	movs	r0, #47	; 0x2f
 80025d2:	f013 fad4 	bl	8015b7e <HAL_NVIC_EnableIRQ>

}
 80025d6:	bf00      	nop
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	40023800 	.word	0x40023800

080025e4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b08a      	sub	sp, #40	; 0x28
 80025e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ea:	f107 0314 	add.w	r3, r7, #20
 80025ee:	2200      	movs	r2, #0
 80025f0:	601a      	str	r2, [r3, #0]
 80025f2:	605a      	str	r2, [r3, #4]
 80025f4:	609a      	str	r2, [r3, #8]
 80025f6:	60da      	str	r2, [r3, #12]
 80025f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025fa:	2300      	movs	r3, #0
 80025fc:	613b      	str	r3, [r7, #16]
 80025fe:	4b69      	ldr	r3, [pc, #420]	; (80027a4 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002602:	4a68      	ldr	r2, [pc, #416]	; (80027a4 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002604:	f043 0304 	orr.w	r3, r3, #4
 8002608:	6313      	str	r3, [r2, #48]	; 0x30
 800260a:	4b66      	ldr	r3, [pc, #408]	; (80027a4 <_ZL12MX_GPIO_Initv+0x1c0>)
 800260c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260e:	f003 0304 	and.w	r3, r3, #4
 8002612:	613b      	str	r3, [r7, #16]
 8002614:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002616:	2300      	movs	r3, #0
 8002618:	60fb      	str	r3, [r7, #12]
 800261a:	4b62      	ldr	r3, [pc, #392]	; (80027a4 <_ZL12MX_GPIO_Initv+0x1c0>)
 800261c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261e:	4a61      	ldr	r2, [pc, #388]	; (80027a4 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002624:	6313      	str	r3, [r2, #48]	; 0x30
 8002626:	4b5f      	ldr	r3, [pc, #380]	; (80027a4 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800262e:	60fb      	str	r3, [r7, #12]
 8002630:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002632:	2300      	movs	r3, #0
 8002634:	60bb      	str	r3, [r7, #8]
 8002636:	4b5b      	ldr	r3, [pc, #364]	; (80027a4 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263a:	4a5a      	ldr	r2, [pc, #360]	; (80027a4 <_ZL12MX_GPIO_Initv+0x1c0>)
 800263c:	f043 0301 	orr.w	r3, r3, #1
 8002640:	6313      	str	r3, [r2, #48]	; 0x30
 8002642:	4b58      	ldr	r3, [pc, #352]	; (80027a4 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	60bb      	str	r3, [r7, #8]
 800264c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800264e:	2300      	movs	r3, #0
 8002650:	607b      	str	r3, [r7, #4]
 8002652:	4b54      	ldr	r3, [pc, #336]	; (80027a4 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002656:	4a53      	ldr	r2, [pc, #332]	; (80027a4 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002658:	f043 0302 	orr.w	r3, r3, #2
 800265c:	6313      	str	r3, [r2, #48]	; 0x30
 800265e:	4b51      	ldr	r3, [pc, #324]	; (80027a4 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	607b      	str	r3, [r7, #4]
 8002668:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800266a:	2300      	movs	r3, #0
 800266c:	603b      	str	r3, [r7, #0]
 800266e:	4b4d      	ldr	r3, [pc, #308]	; (80027a4 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002672:	4a4c      	ldr	r2, [pc, #304]	; (80027a4 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002674:	f043 0308 	orr.w	r3, r3, #8
 8002678:	6313      	str	r3, [r2, #48]	; 0x30
 800267a:	4b4a      	ldr	r3, [pc, #296]	; (80027a4 <_ZL12MX_GPIO_Initv+0x1c0>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267e:	f003 0308 	and.w	r3, r3, #8
 8002682:	603b      	str	r3, [r7, #0]
 8002684:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002686:	2200      	movs	r2, #0
 8002688:	2120      	movs	r1, #32
 800268a:	4847      	ldr	r0, [pc, #284]	; (80027a8 <_ZL12MX_GPIO_Initv+0x1c4>)
 800268c:	f014 f83e 	bl	801670c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Mot_dir_Pin|PLamp_Green_Pin|PLamp_Blue_Pin|PLamp_Yellow_Pin, GPIO_PIN_RESET);
 8002690:	2200      	movs	r2, #0
 8002692:	f24e 0104 	movw	r1, #57348	; 0xe004
 8002696:	4845      	ldr	r0, [pc, #276]	; (80027ac <_ZL12MX_GPIO_Initv+0x1c8>)
 8002698:	f014 f838 	bl	801670c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin EXTI11_EMER_Pin */
  GPIO_InitStruct.Pin = B1_Pin|EXTI11_EMER_Pin;
 800269c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80026a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80026a2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80026a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a8:	2300      	movs	r3, #0
 80026aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026ac:	f107 0314 	add.w	r3, r7, #20
 80026b0:	4619      	mov	r1, r3
 80026b2:	483f      	ldr	r0, [pc, #252]	; (80027b0 <_ZL12MX_GPIO_Initv+0x1cc>)
 80026b4:	f013 fe8e 	bl	80163d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TIM2_CH1_VINCp_Pin */
  GPIO_InitStruct.Pin = TIM2_CH1_VINCp_Pin;
 80026b8:	2301      	movs	r3, #1
 80026ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026bc:	2302      	movs	r3, #2
 80026be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c0:	2300      	movs	r3, #0
 80026c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c4:	2300      	movs	r3, #0
 80026c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80026c8:	2301      	movs	r3, #1
 80026ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TIM2_CH1_VINCp_GPIO_Port, &GPIO_InitStruct);
 80026cc:	f107 0314 	add.w	r3, r7, #20
 80026d0:	4619      	mov	r1, r3
 80026d2:	4835      	ldr	r0, [pc, #212]	; (80027a8 <_ZL12MX_GPIO_Initv+0x1c4>)
 80026d4:	f013 fe7e 	bl	80163d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80026d8:	2320      	movs	r3, #32
 80026da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026dc:	2301      	movs	r3, #1
 80026de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e0:	2300      	movs	r3, #0
 80026e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026e4:	2300      	movs	r3, #0
 80026e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80026e8:	f107 0314 	add.w	r3, r7, #20
 80026ec:	4619      	mov	r1, r3
 80026ee:	482e      	ldr	r0, [pc, #184]	; (80027a8 <_ZL12MX_GPIO_Initv+0x1c4>)
 80026f0:	f013 fe70 	bl	80163d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Pwr_Sense_Pin */
  GPIO_InitStruct.Pin = Pwr_Sense_Pin;
 80026f4:	2302      	movs	r3, #2
 80026f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026f8:	2300      	movs	r3, #0
 80026fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fc:	2300      	movs	r3, #0
 80026fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Pwr_Sense_GPIO_Port, &GPIO_InitStruct);
 8002700:	f107 0314 	add.w	r3, r7, #20
 8002704:	4619      	mov	r1, r3
 8002706:	4829      	ldr	r0, [pc, #164]	; (80027ac <_ZL12MX_GPIO_Initv+0x1c8>)
 8002708:	f013 fe64 	bl	80163d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Mot_dir_Pin PLamp_Green_Pin PLamp_Blue_Pin PLamp_Yellow_Pin */
  GPIO_InitStruct.Pin = Mot_dir_Pin|PLamp_Green_Pin|PLamp_Blue_Pin|PLamp_Yellow_Pin;
 800270c:	f24e 0304 	movw	r3, #57348	; 0xe004
 8002710:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002712:	2301      	movs	r3, #1
 8002714:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002716:	2300      	movs	r3, #0
 8002718:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800271a:	2300      	movs	r3, #0
 800271c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800271e:	f107 0314 	add.w	r3, r7, #20
 8002722:	4619      	mov	r1, r3
 8002724:	4821      	ldr	r0, [pc, #132]	; (80027ac <_ZL12MX_GPIO_Initv+0x1c8>)
 8002726:	f013 fe55 	bl	80163d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXTI10_Stop_Pin */
  GPIO_InitStruct.Pin = EXTI10_Stop_Pin;
 800272a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800272e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002730:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002734:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002736:	2300      	movs	r3, #0
 8002738:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EXTI10_Stop_GPIO_Port, &GPIO_InitStruct);
 800273a:	f107 0314 	add.w	r3, r7, #20
 800273e:	4619      	mov	r1, r3
 8002740:	481b      	ldr	r0, [pc, #108]	; (80027b0 <_ZL12MX_GPIO_Initv+0x1cc>)
 8002742:	f013 fe47 	bl	80163d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Stop_Sense_Pin */
  GPIO_InitStruct.Pin = Stop_Sense_Pin;
 8002746:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800274a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800274c:	2300      	movs	r3, #0
 800274e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002750:	2300      	movs	r3, #0
 8002752:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Stop_Sense_GPIO_Port, &GPIO_InitStruct);
 8002754:	f107 0314 	add.w	r3, r7, #20
 8002758:	4619      	mov	r1, r3
 800275a:	4815      	ldr	r0, [pc, #84]	; (80027b0 <_ZL12MX_GPIO_Initv+0x1cc>)
 800275c:	f013 fe3a 	bl	80163d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXTI2_SetZero_Pin */
  GPIO_InitStruct.Pin = EXTI2_SetZero_Pin;
 8002760:	2304      	movs	r3, #4
 8002762:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002764:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002768:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276a:	2300      	movs	r3, #0
 800276c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EXTI2_SetZero_GPIO_Port, &GPIO_InitStruct);
 800276e:	f107 0314 	add.w	r3, r7, #20
 8002772:	4619      	mov	r1, r3
 8002774:	480f      	ldr	r0, [pc, #60]	; (80027b4 <_ZL12MX_GPIO_Initv+0x1d0>)
 8002776:	f013 fe2d 	bl	80163d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800277a:	2200      	movs	r2, #0
 800277c:	2100      	movs	r1, #0
 800277e:	2008      	movs	r0, #8
 8002780:	f013 f9e1 	bl	8015b46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002784:	2008      	movs	r0, #8
 8002786:	f013 f9fa 	bl	8015b7e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800278a:	2200      	movs	r2, #0
 800278c:	2100      	movs	r1, #0
 800278e:	2028      	movs	r0, #40	; 0x28
 8002790:	f013 f9d9 	bl	8015b46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002794:	2028      	movs	r0, #40	; 0x28
 8002796:	f013 f9f2 	bl	8015b7e <HAL_NVIC_EnableIRQ>

}
 800279a:	bf00      	nop
 800279c:	3728      	adds	r7, #40	; 0x28
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	40023800 	.word	0x40023800
 80027a8:	40020000 	.word	0x40020000
 80027ac:	40020400 	.word	0x40020400
 80027b0:	40020800 	.word	0x40020800
 80027b4:	40020c00 	.word	0x40020c00

080027b8 <_Z13GrandStatumixv>:

/* USER CODE BEGIN 4 */
////////// [Grand State] //////////////////////// [Grand State] ////////////////////////
//======== [Grand State] ======================== [Grand State] ========================
void GrandStatumix(){
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
	if (grandState != Ready){
 80027bc:	4b84      	ldr	r3, [pc, #528]	; (80029d0 <_Z13GrandStatumixv+0x218>)
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d005      	beq.n	80027d0 <_Z13GrandStatumixv+0x18>
		HAL_GPIO_WritePin(PLamp_Green_GPIO_Port, PLamp_Green_Pin, GPIO_PIN_RESET);
 80027c4:	2200      	movs	r2, #0
 80027c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80027ca:	4882      	ldr	r0, [pc, #520]	; (80029d4 <_Z13GrandStatumixv+0x21c>)
 80027cc:	f013 ff9e 	bl	801670c <HAL_GPIO_WritePin>
	}
	if (grandState != work){
 80027d0:	4b7f      	ldr	r3, [pc, #508]	; (80029d0 <_Z13GrandStatumixv+0x218>)
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d005      	beq.n	80027e4 <_Z13GrandStatumixv+0x2c>
			HAL_GPIO_WritePin(PLamp_Blue_GPIO_Port, PLamp_Blue_Pin, GPIO_PIN_RESET);
 80027d8:	2200      	movs	r2, #0
 80027da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80027de:	487d      	ldr	r0, [pc, #500]	; (80029d4 <_Z13GrandStatumixv+0x21c>)
 80027e0:	f013 ff94 	bl	801670c <HAL_GPIO_WritePin>
		}
	if (grandState != stop || grandState != stopnd){
 80027e4:	4b7a      	ldr	r3, [pc, #488]	; (80029d0 <_Z13GrandStatumixv+0x218>)
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d103      	bne.n	80027f4 <_Z13GrandStatumixv+0x3c>
 80027ec:	4b78      	ldr	r3, [pc, #480]	; (80029d0 <_Z13GrandStatumixv+0x218>)
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	2b04      	cmp	r3, #4
 80027f2:	d005      	beq.n	8002800 <_Z13GrandStatumixv+0x48>
				HAL_GPIO_WritePin(PLamp_Yellow_GPIO_Port, PLamp_Yellow_Pin, GPIO_PIN_RESET);
 80027f4:	2200      	movs	r2, #0
 80027f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027fa:	4876      	ldr	r0, [pc, #472]	; (80029d4 <_Z13GrandStatumixv+0x21c>)
 80027fc:	f013 ff86 	bl	801670c <HAL_GPIO_WritePin>
			}

	stop_sense = HAL_GPIO_ReadPin(Stop_Sense_GPIO_Port, Stop_Sense_Pin);
 8002800:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002804:	4874      	ldr	r0, [pc, #464]	; (80029d8 <_Z13GrandStatumixv+0x220>)
 8002806:	f013 ff69 	bl	80166dc <HAL_GPIO_ReadPin>
 800280a:	4603      	mov	r3, r0
 800280c:	461a      	mov	r2, r3
 800280e:	4b73      	ldr	r3, [pc, #460]	; (80029dc <_Z13GrandStatumixv+0x224>)
 8002810:	701a      	strb	r2, [r3, #0]
	pwr_sense = HAL_GPIO_ReadPin(Pwr_Sense_GPIO_Port, Pwr_Sense_Pin);
 8002812:	2102      	movs	r1, #2
 8002814:	486f      	ldr	r0, [pc, #444]	; (80029d4 <_Z13GrandStatumixv+0x21c>)
 8002816:	f013 ff61 	bl	80166dc <HAL_GPIO_ReadPin>
 800281a:	4603      	mov	r3, r0
 800281c:	461a      	mov	r2, r3
 800281e:	4b70      	ldr	r3, [pc, #448]	; (80029e0 <_Z13GrandStatumixv+0x228>)
 8002820:	701a      	strb	r2, [r3, #0]

	switch(grandState){
 8002822:	4b6b      	ldr	r3, [pc, #428]	; (80029d0 <_Z13GrandStatumixv+0x218>)
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	3b01      	subs	r3, #1
 8002828:	2b04      	cmp	r3, #4
 800282a:	d80d      	bhi.n	8002848 <_Z13GrandStatumixv+0x90>
 800282c:	a201      	add	r2, pc, #4	; (adr r2, 8002834 <_Z13GrandStatumixv+0x7c>)
 800282e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002832:	bf00      	nop
 8002834:	08002885 	.word	0x08002885
 8002838:	08002903 	.word	0x08002903
 800283c:	08002999 	.word	0x08002999
 8002840:	08002953 	.word	0x08002953
 8002844:	080028cb 	.word	0x080028cb
	default:
	case Ready:
		HAL_GPIO_WritePin(PLamp_Green_GPIO_Port, PLamp_Green_Pin, GPIO_PIN_SET);
 8002848:	2201      	movs	r2, #1
 800284a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800284e:	4861      	ldr	r0, [pc, #388]	; (80029d4 <_Z13GrandStatumixv+0x21c>)
 8002850:	f013 ff5c 	bl	801670c <HAL_GPIO_WritePin>
		PWMOut = 1200;
 8002854:	4b63      	ldr	r3, [pc, #396]	; (80029e4 <_Z13GrandStatumixv+0x22c>)
 8002856:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800285a:	801a      	strh	r2, [r3, #0]
		Unwrapping();
 800285c:	f000 f9b8 	bl	8002bd0 <_Z10Unwrappingv>
		Kalmanfilter();
 8002860:	f000 fa6a 	bl	8002d38 <_Z12Kalmanfilterv>
		//diffvelo();

		if (pwr_sense == 1){grandState = emer;}
 8002864:	4b5e      	ldr	r3, [pc, #376]	; (80029e0 <_Z13GrandStatumixv+0x228>)
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	2b01      	cmp	r3, #1
 800286a:	d102      	bne.n	8002872 <_Z13GrandStatumixv+0xba>
 800286c:	4b58      	ldr	r3, [pc, #352]	; (80029d0 <_Z13GrandStatumixv+0x218>)
 800286e:	2203      	movs	r2, #3
 8002870:	701a      	strb	r2, [r3, #0]
		if (stop_sense == 0){grandState = stop;}
 8002872:	4b5a      	ldr	r3, [pc, #360]	; (80029dc <_Z13GrandStatumixv+0x224>)
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	2b00      	cmp	r3, #0
 8002878:	f040 809d 	bne.w	80029b6 <_Z13GrandStatumixv+0x1fe>
 800287c:	4b54      	ldr	r3, [pc, #336]	; (80029d0 <_Z13GrandStatumixv+0x218>)
 800287e:	2202      	movs	r2, #2
 8002880:	701a      	strb	r2, [r3, #0]
		/// [From UART] run when get {HOME} , {RUN}
		//if (bluecounter != 0){grandState = work;} // can go work from ready only
	break;
 8002882:	e098      	b.n	80029b6 <_Z13GrandStatumixv+0x1fe>

	case work:
		HAL_GPIO_WritePin(PLamp_Blue_GPIO_Port, PLamp_Blue_Pin, GPIO_PIN_SET);
 8002884:	2201      	movs	r2, #1
 8002886:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800288a:	4852      	ldr	r0, [pc, #328]	; (80029d4 <_Z13GrandStatumixv+0x21c>)
 800288c:	f013 ff3e 	bl	801670c <HAL_GPIO_WritePin>
		LaserTrajex_workflow();
 8002890:	f000 f8b4 	bl	80029fc <_Z20LaserTrajex_workflowv>

		if (pwr_sense == 1){
 8002894:	4b52      	ldr	r3, [pc, #328]	; (80029e0 <_Z13GrandStatumixv+0x228>)
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	2b01      	cmp	r3, #1
 800289a:	d106      	bne.n	80028aa <_Z13GrandStatumixv+0xf2>
			grandState = emer;
 800289c:	4b4c      	ldr	r3, [pc, #304]	; (80029d0 <_Z13GrandStatumixv+0x218>)
 800289e:	2203      	movs	r2, #3
 80028a0:	701a      	strb	r2, [r3, #0]
			u_contr = 0;
 80028a2:	4b51      	ldr	r3, [pc, #324]	; (80029e8 <_Z13GrandStatumixv+0x230>)
 80028a4:	f04f 0200 	mov.w	r2, #0
 80028a8:	601a      	str	r2, [r3, #0]
		}
		if (stop_sense == 0){
 80028aa:	4b4c      	ldr	r3, [pc, #304]	; (80029dc <_Z13GrandStatumixv+0x224>)
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	f040 8083 	bne.w	80029ba <_Z13GrandStatumixv+0x202>
			PWMOut = 0;
 80028b4:	4b4b      	ldr	r3, [pc, #300]	; (80029e4 <_Z13GrandStatumixv+0x22c>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	801a      	strh	r2, [r3, #0]
			grandState = stopnd;
 80028ba:	4b45      	ldr	r3, [pc, #276]	; (80029d0 <_Z13GrandStatumixv+0x218>)
 80028bc:	2204      	movs	r2, #4
 80028be:	701a      	strb	r2, [r3, #0]
			u_contr = 0;
 80028c0:	4b49      	ldr	r3, [pc, #292]	; (80029e8 <_Z13GrandStatumixv+0x230>)
 80028c2:	f04f 0200 	mov.w	r2, #0
 80028c6:	601a      	str	r2, [r3, #0]
		}
	break;
 80028c8:	e077      	b.n	80029ba <_Z13GrandStatumixv+0x202>

	case SetZeroGr:
		HAL_GPIO_WritePin(PLamp_Blue_GPIO_Port, PLamp_Blue_Pin, GPIO_PIN_SET);
 80028ca:	2201      	movs	r2, #1
 80028cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80028d0:	4840      	ldr	r0, [pc, #256]	; (80029d4 <_Z13GrandStatumixv+0x21c>)
 80028d2:	f013 ff1b 	bl	801670c <HAL_GPIO_WritePin>
		HAL_Delay(4000); // Simulate workload
 80028d6:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80028da:	f013 f835 	bl	8015948 <HAL_Delay>
		flag_finishTra = 1;
 80028de:	4b43      	ldr	r3, [pc, #268]	; (80029ec <_Z13GrandStatumixv+0x234>)
 80028e0:	2201      	movs	r2, #1
 80028e2:	701a      	strb	r2, [r3, #0]
		 }
		Trajectory();
		Kalmanfilter();
		controlloop();
*/
		if (flag_finishTra == 1 || BinPosXI == 0){
 80028e4:	4b41      	ldr	r3, [pc, #260]	; (80029ec <_Z13GrandStatumixv+0x234>)
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d003      	beq.n	80028f4 <_Z13GrandStatumixv+0x13c>
 80028ec:	4b40      	ldr	r3, [pc, #256]	; (80029f0 <_Z13GrandStatumixv+0x238>)
 80028ee:	881b      	ldrh	r3, [r3, #0]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d164      	bne.n	80029be <_Z13GrandStatumixv+0x206>
			flag_finishTra = 0;
 80028f4:	4b3d      	ldr	r3, [pc, #244]	; (80029ec <_Z13GrandStatumixv+0x234>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	701a      	strb	r2, [r3, #0]
			grandState = Ready;
 80028fa:	4b35      	ldr	r3, [pc, #212]	; (80029d0 <_Z13GrandStatumixv+0x218>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	701a      	strb	r2, [r3, #0]
		}
	break;
 8002900:	e05d      	b.n	80029be <_Z13GrandStatumixv+0x206>

	case stop:
		HAL_GPIO_WritePin(PLamp_Yellow_GPIO_Port, PLamp_Yellow_Pin, GPIO_PIN_SET);
 8002902:	2201      	movs	r2, #1
 8002904:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002908:	4832      	ldr	r0, [pc, #200]	; (80029d4 <_Z13GrandStatumixv+0x21c>)
 800290a:	f013 feff 	bl	801670c <HAL_GPIO_WritePin>
		PWMOut = 0;
 800290e:	4b35      	ldr	r3, [pc, #212]	; (80029e4 <_Z13GrandStatumixv+0x22c>)
 8002910:	2200      	movs	r2, #0
 8002912:	801a      	strh	r2, [r3, #0]

		X(1,0)=0;
 8002914:	2200      	movs	r2, #0
 8002916:	2101      	movs	r1, #1
 8002918:	4836      	ldr	r0, [pc, #216]	; (80029f4 <_Z13GrandStatumixv+0x23c>)
 800291a:	f000 ffc3 	bl	80038a4 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>
 800291e:	4603      	mov	r3, r0
 8002920:	f04f 0200 	mov.w	r2, #0
 8002924:	601a      	str	r2, [r3, #0]
		KalV = X(1,0);
 8002926:	2200      	movs	r2, #0
 8002928:	2101      	movs	r1, #1
 800292a:	4832      	ldr	r0, [pc, #200]	; (80029f4 <_Z13GrandStatumixv+0x23c>)
 800292c:	f000 ffba 	bl	80038a4 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>
 8002930:	4603      	mov	r3, r0
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a30      	ldr	r2, [pc, #192]	; (80029f8 <_Z13GrandStatumixv+0x240>)
 8002936:	6013      	str	r3, [r2, #0]

		if (stop_sense == 1){
 8002938:	4b28      	ldr	r3, [pc, #160]	; (80029dc <_Z13GrandStatumixv+0x224>)
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	2b01      	cmp	r3, #1
 800293e:	d140      	bne.n	80029c2 <_Z13GrandStatumixv+0x20a>
			grandState = Ready;
 8002940:	4b23      	ldr	r3, [pc, #140]	; (80029d0 <_Z13GrandStatumixv+0x218>)
 8002942:	2200      	movs	r2, #0
 8002944:	701a      	strb	r2, [r3, #0]
			IOExpenderInit();
 8002946:	f000 fb9f 	bl	8003088 <_Z14IOExpenderInitv>
			HAL_Delay(100);
 800294a:	2064      	movs	r0, #100	; 0x64
 800294c:	f012 fffc 	bl	8015948 <HAL_Delay>
			//== rotation change for dummy test
			//mot_dirctn++;
			//mot_dirctn%=2;
		}
	break;
 8002950:	e037      	b.n	80029c2 <_Z13GrandStatumixv+0x20a>

	case stopnd:
			HAL_GPIO_WritePin(PLamp_Yellow_GPIO_Port, PLamp_Yellow_Pin, GPIO_PIN_SET);
 8002952:	2201      	movs	r2, #1
 8002954:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002958:	481e      	ldr	r0, [pc, #120]	; (80029d4 <_Z13GrandStatumixv+0x21c>)
 800295a:	f013 fed7 	bl	801670c <HAL_GPIO_WritePin>
			PWMOut = 0;
 800295e:	4b21      	ldr	r3, [pc, #132]	; (80029e4 <_Z13GrandStatumixv+0x22c>)
 8002960:	2200      	movs	r2, #0
 8002962:	801a      	strh	r2, [r3, #0]
			//Integral = 0;
			X(1,0)=0;
 8002964:	2200      	movs	r2, #0
 8002966:	2101      	movs	r1, #1
 8002968:	4822      	ldr	r0, [pc, #136]	; (80029f4 <_Z13GrandStatumixv+0x23c>)
 800296a:	f000 ff9b 	bl	80038a4 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>
 800296e:	4603      	mov	r3, r0
 8002970:	f04f 0200 	mov.w	r2, #0
 8002974:	601a      	str	r2, [r3, #0]
			KalV = X(1,0);
 8002976:	2200      	movs	r2, #0
 8002978:	2101      	movs	r1, #1
 800297a:	481e      	ldr	r0, [pc, #120]	; (80029f4 <_Z13GrandStatumixv+0x23c>)
 800297c:	f000 ff92 	bl	80038a4 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>
 8002980:	4603      	mov	r3, r0
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a1c      	ldr	r2, [pc, #112]	; (80029f8 <_Z13GrandStatumixv+0x240>)
 8002986:	6013      	str	r3, [r2, #0]


			if (stop_sense == 1){
 8002988:	4b14      	ldr	r3, [pc, #80]	; (80029dc <_Z13GrandStatumixv+0x224>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d11a      	bne.n	80029c6 <_Z13GrandStatumixv+0x20e>
				grandState = work;
 8002990:	4b0f      	ldr	r3, [pc, #60]	; (80029d0 <_Z13GrandStatumixv+0x218>)
 8002992:	2201      	movs	r2, #1
 8002994:	701a      	strb	r2, [r3, #0]
			}
		break;
 8002996:	e016      	b.n	80029c6 <_Z13GrandStatumixv+0x20e>

	case emer:
		ResetParam();
 8002998:	f000 f8dc 	bl	8002b54 <_Z10ResetParamv>
		// Reset every variables at control
		if (pwr_sense == 0){
 800299c:	4b10      	ldr	r3, [pc, #64]	; (80029e0 <_Z13GrandStatumixv+0x228>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d112      	bne.n	80029ca <_Z13GrandStatumixv+0x212>
			grandState = Ready;
 80029a4:	4b0a      	ldr	r3, [pc, #40]	; (80029d0 <_Z13GrandStatumixv+0x218>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	701a      	strb	r2, [r3, #0]
			HAL_Delay(250); // wait for emer release shock power
 80029aa:	20fa      	movs	r0, #250	; 0xfa
 80029ac:	f012 ffcc 	bl	8015948 <HAL_Delay>
			IOExpenderInit();
 80029b0:	f000 fb6a 	bl	8003088 <_Z14IOExpenderInitv>

		}
	break;
 80029b4:	e009      	b.n	80029ca <_Z13GrandStatumixv+0x212>
	break;
 80029b6:	bf00      	nop
 80029b8:	e008      	b.n	80029cc <_Z13GrandStatumixv+0x214>
	break;
 80029ba:	bf00      	nop
 80029bc:	e006      	b.n	80029cc <_Z13GrandStatumixv+0x214>
	break;
 80029be:	bf00      	nop
 80029c0:	e004      	b.n	80029cc <_Z13GrandStatumixv+0x214>
	break;
 80029c2:	bf00      	nop
 80029c4:	e002      	b.n	80029cc <_Z13GrandStatumixv+0x214>
		break;
 80029c6:	bf00      	nop
 80029c8:	e000      	b.n	80029cc <_Z13GrandStatumixv+0x214>
	break;
 80029ca:	bf00      	nop
	}
}
 80029cc:	bf00      	nop
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	20000498 	.word	0x20000498
 80029d4:	40020400 	.word	0x40020400
 80029d8:	40020800 	.word	0x40020800
 80029dc:	2000049a 	.word	0x2000049a
 80029e0:	20000499 	.word	0x20000499
 80029e4:	20000514 	.word	0x20000514
 80029e8:	20000670 	.word	0x20000670
 80029ec:	200004a0 	.word	0x200004a0
 80029f0:	20000510 	.word	0x20000510
 80029f4:	20000620 	.word	0x20000620
 80029f8:	20000648 	.word	0x20000648

080029fc <_Z20LaserTrajex_workflowv>:

void LaserTrajex_workflow(){ // 1, n loop go to shoot laser run
 80029fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a00:	af00      	add	r7, sp, #0
	// -1 means no position value
	//if (Finalposition == -1){flag_LasxTraj = 0;}

	switch(flag_LasxTraj){
 8002a02:	4b48      	ldr	r3, [pc, #288]	; (8002b24 <_Z20LaserTrajex_workflowv+0x128>)
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d011      	beq.n	8002a2e <_Z20LaserTrajex_workflowv+0x32>
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d02d      	beq.n	8002a6a <_Z20LaserTrajex_workflowv+0x6e>
	default:
	case 0: // wait go flag
		////////// raise flag to 1 if need to drive the state

		if (grandState == work){ //flag_LasxTraj != 0 ||
 8002a0e:	4b46      	ldr	r3, [pc, #280]	; (8002b28 <_Z20LaserTrajex_workflowv+0x12c>)
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d17d      	bne.n	8002b12 <_Z20LaserTrajex_workflowv+0x116>
			flag_LasxTraj = 1;
 8002a16:	4b43      	ldr	r3, [pc, #268]	; (8002b24 <_Z20LaserTrajex_workflowv+0x128>)
 8002a18:	2201      	movs	r2, #1
 8002a1a:	701a      	strb	r2, [r3, #0]
			Finalposition = positionlog[position_order]; // receive in rad
 8002a1c:	4b43      	ldr	r3, [pc, #268]	; (8002b2c <_Z20LaserTrajex_workflowv+0x130>)
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	4a43      	ldr	r2, [pc, #268]	; (8002b30 <_Z20LaserTrajex_workflowv+0x134>)
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	4413      	add	r3, r2
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a42      	ldr	r2, [pc, #264]	; (8002b34 <_Z20LaserTrajex_workflowv+0x138>)
 8002a2a:	6013      	str	r3, [r2, #0]
		}
		break;
 8002a2c:	e071      	b.n	8002b12 <_Z20LaserTrajex_workflowv+0x116>
		 }
		Trajectory();
		Kalmanfilter();
		controlloop();
*/
		HAL_Delay(2500); // Simulate workload
 8002a2e:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8002a32:	f012 ff89 	bl	8015948 <HAL_Delay>
		flag_finishTra = 1;
 8002a36:	4b40      	ldr	r3, [pc, #256]	; (8002b38 <_Z20LaserTrajex_workflowv+0x13c>)
 8002a38:	2201      	movs	r2, #1
 8002a3a:	701a      	strb	r2, [r3, #0]

		if(flag_finishTra == 1){
 8002a3c:	4b3e      	ldr	r3, [pc, #248]	; (8002b38 <_Z20LaserTrajex_workflowv+0x13c>)
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d168      	bne.n	8002b16 <_Z20LaserTrajex_workflowv+0x11a>
			flag_finishTra = 0;
 8002a44:	4b3c      	ldr	r3, [pc, #240]	; (8002b38 <_Z20LaserTrajex_workflowv+0x13c>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	701a      	strb	r2, [r3, #0]
			flag_LasxTraj = 2;
 8002a4a:	4b36      	ldr	r3, [pc, #216]	; (8002b24 <_Z20LaserTrajex_workflowv+0x128>)
 8002a4c:	2202      	movs	r2, #2
 8002a4e:	701a      	strb	r2, [r3, #0]
			flag_efftActi = 1;
 8002a50:	4b3a      	ldr	r3, [pc, #232]	; (8002b3c <_Z20LaserTrajex_workflowv+0x140>)
 8002a52:	2201      	movs	r2, #1
 8002a54:	701a      	strb	r2, [r3, #0]

			timeout_efft = millis();
 8002a56:	f000 fcab 	bl	80033b0 <_Z6millisv>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	469a      	mov	sl, r3
 8002a60:	4693      	mov	fp, r2
 8002a62:	4b37      	ldr	r3, [pc, #220]	; (8002b40 <_Z20LaserTrajex_workflowv+0x144>)
 8002a64:	e9c3 ab00 	strd	sl, fp, [r3]
		}
		break;
 8002a68:	e055      	b.n	8002b16 <_Z20LaserTrajex_workflowv+0x11a>
	case 2: //---------------Laserwork--------------
		trig_efftRead = 1;
 8002a6a:	4b36      	ldr	r3, [pc, #216]	; (8002b44 <_Z20LaserTrajex_workflowv+0x148>)
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	701a      	strb	r2, [r3, #0]

		if(efft_status == 0x78 || millis() - timeout_efft >= 6000){ // if laser finished work or tomeout
 8002a70:	4b35      	ldr	r3, [pc, #212]	; (8002b48 <_Z20LaserTrajex_workflowv+0x14c>)
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	2b78      	cmp	r3, #120	; 0x78
 8002a76:	d012      	beq.n	8002a9e <_Z20LaserTrajex_workflowv+0xa2>
 8002a78:	f000 fc9a 	bl	80033b0 <_Z6millisv>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2200      	movs	r2, #0
 8002a80:	4698      	mov	r8, r3
 8002a82:	4691      	mov	r9, r2
 8002a84:	4b2e      	ldr	r3, [pc, #184]	; (8002b40 <_Z20LaserTrajex_workflowv+0x144>)
 8002a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a8a:	ebb8 0402 	subs.w	r4, r8, r2
 8002a8e:	eb69 0503 	sbc.w	r5, r9, r3
 8002a92:	f241 7370 	movw	r3, #6000	; 0x1770
 8002a96:	429c      	cmp	r4, r3
 8002a98:	f175 0300 	sbcs.w	r3, r5, #0
 8002a9c:	d301      	bcc.n	8002aa2 <_Z20LaserTrajex_workflowv+0xa6>
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e000      	b.n	8002aa4 <_Z20LaserTrajex_workflowv+0xa8>
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d038      	beq.n	8002b1a <_Z20LaserTrajex_workflowv+0x11e>
			efft_status = 0x00;
 8002aa8:	4b27      	ldr	r3, [pc, #156]	; (8002b48 <_Z20LaserTrajex_workflowv+0x14c>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	701a      	strb	r2, [r3, #0]
			trig_efftRead = 0;
 8002aae:	4b25      	ldr	r3, [pc, #148]	; (8002b44 <_Z20LaserTrajex_workflowv+0x148>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	701a      	strb	r2, [r3, #0]
			position_order++; // go to next obtained position
 8002ab4:	4b1d      	ldr	r3, [pc, #116]	; (8002b2c <_Z20LaserTrajex_workflowv+0x130>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	3301      	adds	r3, #1
 8002aba:	b2da      	uxtb	r2, r3
 8002abc:	4b1b      	ldr	r3, [pc, #108]	; (8002b2c <_Z20LaserTrajex_workflowv+0x130>)
 8002abe:	701a      	strb	r2, [r3, #0]

			if (positionlog[position_order] == -1){
 8002ac0:	4b1a      	ldr	r3, [pc, #104]	; (8002b2c <_Z20LaserTrajex_workflowv+0x130>)
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	4a1a      	ldr	r2, [pc, #104]	; (8002b30 <_Z20LaserTrajex_workflowv+0x134>)
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	4413      	add	r3, r2
 8002aca:	edd3 7a00 	vldr	s15, [r3]
 8002ace:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8002ad2:	eef4 7a47 	vcmp.f32	s15, s14
 8002ad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ada:	d10e      	bne.n	8002afa <_Z20LaserTrajex_workflowv+0xfe>
				//Real end, reset all position parameter
				// back to ready
				HAL_UART_Transmit(&huart2, (uint8_t*)temp_f_ack2, 2, 100);
 8002adc:	2364      	movs	r3, #100	; 0x64
 8002ade:	2202      	movs	r2, #2
 8002ae0:	491a      	ldr	r1, [pc, #104]	; (8002b4c <_Z20LaserTrajex_workflowv+0x150>)
 8002ae2:	481b      	ldr	r0, [pc, #108]	; (8002b50 <_Z20LaserTrajex_workflowv+0x154>)
 8002ae4:	f018 f9a5 	bl	801ae32 <HAL_UART_Transmit>
				flag_LasxTraj = 0;
 8002ae8:	4b0e      	ldr	r3, [pc, #56]	; (8002b24 <_Z20LaserTrajex_workflowv+0x128>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	701a      	strb	r2, [r3, #0]
				ResetParam();
 8002aee:	f000 f831 	bl	8002b54 <_Z10ResetParamv>
				grandState = Ready;
 8002af2:	4b0d      	ldr	r3, [pc, #52]	; (8002b28 <_Z20LaserTrajex_workflowv+0x12c>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	701a      	strb	r2, [r3, #0]
			else {
				Finalposition = positionlog[position_order];
				flag_LasxTraj = 1;
			} // continue next pos if have
		}
		break;
 8002af8:	e00f      	b.n	8002b1a <_Z20LaserTrajex_workflowv+0x11e>
				Finalposition = positionlog[position_order];
 8002afa:	4b0c      	ldr	r3, [pc, #48]	; (8002b2c <_Z20LaserTrajex_workflowv+0x130>)
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	4a0c      	ldr	r2, [pc, #48]	; (8002b30 <_Z20LaserTrajex_workflowv+0x134>)
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	4413      	add	r3, r2
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a0b      	ldr	r2, [pc, #44]	; (8002b34 <_Z20LaserTrajex_workflowv+0x138>)
 8002b08:	6013      	str	r3, [r2, #0]
				flag_LasxTraj = 1;
 8002b0a:	4b06      	ldr	r3, [pc, #24]	; (8002b24 <_Z20LaserTrajex_workflowv+0x128>)
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	701a      	strb	r2, [r3, #0]
		break;
 8002b10:	e003      	b.n	8002b1a <_Z20LaserTrajex_workflowv+0x11e>
		break;
 8002b12:	bf00      	nop
 8002b14:	e002      	b.n	8002b1c <_Z20LaserTrajex_workflowv+0x120>
		break;
 8002b16:	bf00      	nop
 8002b18:	e000      	b.n	8002b1c <_Z20LaserTrajex_workflowv+0x120>
		break;
 8002b1a:	bf00      	nop
	}
}
 8002b1c:	bf00      	nop
 8002b1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b22:	bf00      	nop
 8002b24:	200004b4 	.word	0x200004b4
 8002b28:	20000498 	.word	0x20000498
 8002b2c:	200004b5 	.word	0x200004b5
 8002b30:	200000f0 	.word	0x200000f0
 8002b34:	20000520 	.word	0x20000520
 8002b38:	200004a0 	.word	0x200004a0
 8002b3c:	20000675 	.word	0x20000675
 8002b40:	20000680 	.word	0x20000680
 8002b44:	20000677 	.word	0x20000677
 8002b48:	20000674 	.word	0x20000674
 8002b4c:	20000150 	.word	0x20000150
 8002b50:	20000394 	.word	0x20000394

08002b54 <_Z10ResetParamv>:

void ResetParam(){
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
	// Reset every variables at control
	// reset position buffer
	PWMOut = 0;
 8002b5a:	4b15      	ldr	r3, [pc, #84]	; (8002bb0 <_Z10ResetParamv+0x5c>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i <= position_order; i++){
 8002b60:	2300      	movs	r3, #0
 8002b62:	607b      	str	r3, [r7, #4]
 8002b64:	4b13      	ldr	r3, [pc, #76]	; (8002bb4 <_Z10ResetParamv+0x60>)
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	461a      	mov	r2, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	dc09      	bgt.n	8002b84 <_Z10ResetParamv+0x30>
			positionlog[i] = -1.0;
 8002b70:	4a11      	ldr	r2, [pc, #68]	; (8002bb8 <_Z10ResetParamv+0x64>)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	4413      	add	r3, r2
 8002b78:	4a10      	ldr	r2, [pc, #64]	; (8002bbc <_Z10ResetParamv+0x68>)
 8002b7a:	601a      	str	r2, [r3, #0]
	for(int i = 0; i <= position_order; i++){
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	3301      	adds	r3, #1
 8002b80:	607b      	str	r3, [r7, #4]
 8002b82:	e7ef      	b.n	8002b64 <_Z10ResetParamv+0x10>
		}
	position_order = 0;
 8002b84:	4b0b      	ldr	r3, [pc, #44]	; (8002bb4 <_Z10ResetParamv+0x60>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	701a      	strb	r2, [r3, #0]
	flag_LasxTraj = 0;
 8002b8a:	4b0d      	ldr	r3, [pc, #52]	; (8002bc0 <_Z10ResetParamv+0x6c>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	701a      	strb	r2, [r3, #0]
	trig_efftRead = 0;
 8002b90:	4b0c      	ldr	r3, [pc, #48]	; (8002bc4 <_Z10ResetParamv+0x70>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	701a      	strb	r2, [r3, #0]
	bluecounter = 0;
 8002b96:	4b0c      	ldr	r3, [pc, #48]	; (8002bc8 <_Z10ResetParamv+0x74>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	701a      	strb	r2, [r3, #0]
	efft_status = 0x00;
 8002b9c:	4b0b      	ldr	r3, [pc, #44]	; (8002bcc <_Z10ResetParamv+0x78>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	701a      	strb	r2, [r3, #0]
	//Integral = 0;
	//u_contr = 0;
}
 8002ba2:	bf00      	nop
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	20000514 	.word	0x20000514
 8002bb4:	200004b5 	.word	0x200004b5
 8002bb8:	200000f0 	.word	0x200000f0
 8002bbc:	bf800000 	.word	0xbf800000
 8002bc0:	200004b4 	.word	0x200004b4
 8002bc4:	20000677 	.word	0x20000677
 8002bc8:	2000066c 	.word	0x2000066c
 8002bcc:	20000674 	.word	0x20000674

08002bd0 <_Z10Unwrappingv>:
	//OutVelocity = 0.523598775 ;

}

//////////////////////// [Unwrapping] ///////////////////////
void Unwrapping(){
 8002bd0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002bd4:	af00      	add	r7, sp, #0

	if(micros() - TimeUnwrap >= 1000){
 8002bd6:	f000 fbd1 	bl	800337c <_Z6microsv>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	460b      	mov	r3, r1
 8002bde:	494c      	ldr	r1, [pc, #304]	; (8002d10 <_Z10Unwrappingv+0x140>)
 8002be0:	6809      	ldr	r1, [r1, #0]
 8002be2:	2000      	movs	r0, #0
 8002be4:	4688      	mov	r8, r1
 8002be6:	4681      	mov	r9, r0
 8002be8:	ebb2 0408 	subs.w	r4, r2, r8
 8002bec:	eb63 0509 	sbc.w	r5, r3, r9
 8002bf0:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 8002bf4:	f175 0300 	sbcs.w	r3, r5, #0
 8002bf8:	bf2c      	ite	cs
 8002bfa:	2301      	movcs	r3, #1
 8002bfc:	2300      	movcc	r3, #0
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d07c      	beq.n	8002cfe <_Z10Unwrappingv+0x12e>
		TimeUnwrap = micros();
 8002c04:	f000 fbba 	bl	800337c <_Z6microsv>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	4b40      	ldr	r3, [pc, #256]	; (8002d10 <_Z10Unwrappingv+0x140>)
 8002c0e:	601a      	str	r2, [r3, #0]
		Pn = BinPosXI*0.006136;
 8002c10:	4b40      	ldr	r3, [pc, #256]	; (8002d14 <_Z10Unwrappingv+0x144>)
 8002c12:	881b      	ldrh	r3, [r3, #0]
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7fd fc85 	bl	8000524 <__aeabi_i2d>
 8002c1a:	a33b      	add	r3, pc, #236	; (adr r3, 8002d08 <_Z10Unwrappingv+0x138>)
 8002c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c20:	f7fd fcea 	bl	80005f8 <__aeabi_dmul>
 8002c24:	4602      	mov	r2, r0
 8002c26:	460b      	mov	r3, r1
 8002c28:	4610      	mov	r0, r2
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	f7fd ff94 	bl	8000b58 <__aeabi_d2f>
 8002c30:	4603      	mov	r3, r0
 8002c32:	4a39      	ldr	r2, [pc, #228]	; (8002d18 <_Z10Unwrappingv+0x148>)
 8002c34:	6013      	str	r3, [r2, #0]
		if(Pn-P_n <= -1*e){
 8002c36:	4b38      	ldr	r3, [pc, #224]	; (8002d18 <_Z10Unwrappingv+0x148>)
 8002c38:	ed93 7a00 	vldr	s14, [r3]
 8002c3c:	4b37      	ldr	r3, [pc, #220]	; (8002d1c <_Z10Unwrappingv+0x14c>)
 8002c3e:	edd3 7a00 	vldr	s15, [r3]
 8002c42:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c46:	4b36      	ldr	r3, [pc, #216]	; (8002d20 <_Z10Unwrappingv+0x150>)
 8002c48:	edd3 7a00 	vldr	s15, [r3]
 8002c4c:	eef1 7a67 	vneg.f32	s15, s15
 8002c50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c58:	d80b      	bhi.n	8002c72 <_Z10Unwrappingv+0xa2>
			P0 = P_0 + P_max;
 8002c5a:	4b32      	ldr	r3, [pc, #200]	; (8002d24 <_Z10Unwrappingv+0x154>)
 8002c5c:	ed93 7a00 	vldr	s14, [r3]
 8002c60:	4b31      	ldr	r3, [pc, #196]	; (8002d28 <_Z10Unwrappingv+0x158>)
 8002c62:	edd3 7a00 	vldr	s15, [r3]
 8002c66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c6a:	4b30      	ldr	r3, [pc, #192]	; (8002d2c <_Z10Unwrappingv+0x15c>)
 8002c6c:	edc3 7a00 	vstr	s15, [r3]
 8002c70:	e01f      	b.n	8002cb2 <_Z10Unwrappingv+0xe2>
		}
		else if(Pn - P_n >= e){
 8002c72:	4b29      	ldr	r3, [pc, #164]	; (8002d18 <_Z10Unwrappingv+0x148>)
 8002c74:	ed93 7a00 	vldr	s14, [r3]
 8002c78:	4b28      	ldr	r3, [pc, #160]	; (8002d1c <_Z10Unwrappingv+0x14c>)
 8002c7a:	edd3 7a00 	vldr	s15, [r3]
 8002c7e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c82:	4b27      	ldr	r3, [pc, #156]	; (8002d20 <_Z10Unwrappingv+0x150>)
 8002c84:	edd3 7a00 	vldr	s15, [r3]
 8002c88:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c90:	db0b      	blt.n	8002caa <_Z10Unwrappingv+0xda>
			P0 = P_0 - P_max;
 8002c92:	4b24      	ldr	r3, [pc, #144]	; (8002d24 <_Z10Unwrappingv+0x154>)
 8002c94:	ed93 7a00 	vldr	s14, [r3]
 8002c98:	4b23      	ldr	r3, [pc, #140]	; (8002d28 <_Z10Unwrappingv+0x158>)
 8002c9a:	edd3 7a00 	vldr	s15, [r3]
 8002c9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ca2:	4b22      	ldr	r3, [pc, #136]	; (8002d2c <_Z10Unwrappingv+0x15c>)
 8002ca4:	edc3 7a00 	vstr	s15, [r3]
 8002ca8:	e003      	b.n	8002cb2 <_Z10Unwrappingv+0xe2>
		}
		else{
			P0 = P_0;
 8002caa:	4b1e      	ldr	r3, [pc, #120]	; (8002d24 <_Z10Unwrappingv+0x154>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a1f      	ldr	r2, [pc, #124]	; (8002d2c <_Z10Unwrappingv+0x15c>)
 8002cb0:	6013      	str	r3, [r2, #0]
		}

		OutUnwrap = Pn + P0;
 8002cb2:	4b19      	ldr	r3, [pc, #100]	; (8002d18 <_Z10Unwrappingv+0x148>)
 8002cb4:	ed93 7a00 	vldr	s14, [r3]
 8002cb8:	4b1c      	ldr	r3, [pc, #112]	; (8002d2c <_Z10Unwrappingv+0x15c>)
 8002cba:	edd3 7a00 	vldr	s15, [r3]
 8002cbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cc2:	4b1b      	ldr	r3, [pc, #108]	; (8002d30 <_Z10Unwrappingv+0x160>)
 8002cc4:	edc3 7a00 	vstr	s15, [r3]
		CurrentEn = BinPosXI * 0.006136;
 8002cc8:	4b12      	ldr	r3, [pc, #72]	; (8002d14 <_Z10Unwrappingv+0x144>)
 8002cca:	881b      	ldrh	r3, [r3, #0]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7fd fc29 	bl	8000524 <__aeabi_i2d>
 8002cd2:	a30d      	add	r3, pc, #52	; (adr r3, 8002d08 <_Z10Unwrappingv+0x138>)
 8002cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cd8:	f7fd fc8e 	bl	80005f8 <__aeabi_dmul>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	460b      	mov	r3, r1
 8002ce0:	4610      	mov	r0, r2
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	f7fd ff38 	bl	8000b58 <__aeabi_d2f>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	4a12      	ldr	r2, [pc, #72]	; (8002d34 <_Z10Unwrappingv+0x164>)
 8002cec:	6013      	str	r3, [r2, #0]
		P_n = Pn;
 8002cee:	4b0a      	ldr	r3, [pc, #40]	; (8002d18 <_Z10Unwrappingv+0x148>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a0a      	ldr	r2, [pc, #40]	; (8002d1c <_Z10Unwrappingv+0x14c>)
 8002cf4:	6013      	str	r3, [r2, #0]
		P_0 = P0;
 8002cf6:	4b0d      	ldr	r3, [pc, #52]	; (8002d2c <_Z10Unwrappingv+0x15c>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a0a      	ldr	r2, [pc, #40]	; (8002d24 <_Z10Unwrappingv+0x154>)
 8002cfc:	6013      	str	r3, [r2, #0]
	}
}
 8002cfe:	bf00      	nop
 8002d00:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002d04:	f3af 8000 	nop.w
 8002d08:	f540895d 	.word	0xf540895d
 8002d0c:	3f79220f 	.word	0x3f79220f
 8002d10:	20000668 	.word	0x20000668
 8002d14:	20000510 	.word	0x20000510
 8002d18:	20000658 	.word	0x20000658
 8002d1c:	2000065c 	.word	0x2000065c
 8002d20:	20000148 	.word	0x20000148
 8002d24:	20000654 	.word	0x20000654
 8002d28:	20000144 	.word	0x20000144
 8002d2c:	20000650 	.word	0x20000650
 8002d30:	20000660 	.word	0x20000660
 8002d34:	20000664 	.word	0x20000664

08002d38 <_Z12Kalmanfilterv>:
	}
}


/////////////////////////// [Kalman Filter] ///////////////////////
void Kalmanfilter(){
 8002d38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d3c:	b0d4      	sub	sp, #336	; 0x150
 8002d3e:	af00      	add	r7, sp, #0

	 if(micros() - TimeStampKalman >= 1000){
 8002d40:	f000 fb1c 	bl	800337c <_Z6microsv>
 8002d44:	4602      	mov	r2, r0
 8002d46:	460b      	mov	r3, r1
 8002d48:	499c      	ldr	r1, [pc, #624]	; (8002fbc <_Z12Kalmanfilterv+0x284>)
 8002d4a:	6809      	ldr	r1, [r1, #0]
 8002d4c:	2000      	movs	r0, #0
 8002d4e:	468a      	mov	sl, r1
 8002d50:	4683      	mov	fp, r0
 8002d52:	ebb2 040a 	subs.w	r4, r2, sl
 8002d56:	eb63 050b 	sbc.w	r5, r3, fp
 8002d5a:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 8002d5e:	f175 0300 	sbcs.w	r3, r5, #0
 8002d62:	bf2c      	ite	cs
 8002d64:	2301      	movcs	r3, #1
 8002d66:	2300      	movcc	r3, #0
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f000 811f 	beq.w	8002fae <_Z12Kalmanfilterv+0x276>
		 TimeStampKalman = micros();
 8002d70:	f000 fb04 	bl	800337c <_Z6microsv>
 8002d74:	4602      	mov	r2, r0
 8002d76:	460b      	mov	r3, r1
 8002d78:	4b90      	ldr	r3, [pc, #576]	; (8002fbc <_Z12Kalmanfilterv+0x284>)
 8002d7a:	601a      	str	r2, [r3, #0]
		 ////////// Predict ////////////////////
		 Q = G*Q1*G.transpose();
 8002d7c:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002d80:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002d84:	4a8e      	ldr	r2, [pc, #568]	; (8002fc0 <_Z12Kalmanfilterv+0x288>)
 8002d86:	498f      	ldr	r1, [pc, #572]	; (8002fc4 <_Z12Kalmanfilterv+0x28c>)
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f000 fdcf 	bl	800392c <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEmlIfEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNS6_18promote_scalar_argIfT_XsrNS6_14has_ReturnTypeINS_20ScalarBinaryOpTraitsIfS9_NS7_IfS9_EEEEEE5valueEE4typeEEEKS2_KNS6_19plain_constant_typeIS2_SG_E4typeEEERKS9_>
 8002d8e:	488d      	ldr	r0, [pc, #564]	; (8002fc4 <_Z12Kalmanfilterv+0x28c>)
 8002d90:	f000 fe05 	bl	800399e <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE9transposeEv>
 8002d94:	4602      	mov	r2, r0
 8002d96:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002d9a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002d9e:	601a      	str	r2, [r3, #0]
 8002da0:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002da4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002da8:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002dac:	f107 011c 	add.w	r1, r7, #28
 8002db0:	4618      	mov	r0, r3
 8002db2:	f000 fe26 	bl	8003a02 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEEmlINS_9TransposeIS6_EEEEKNS_7ProductISD_T_Li0EEERKNS0_ISJ_EE>
 8002db6:	f107 0308 	add.w	r3, r7, #8
 8002dba:	4619      	mov	r1, r3
 8002dbc:	4882      	ldr	r0, [pc, #520]	; (8002fc8 <_Z12Kalmanfilterv+0x290>)
 8002dbe:	f000 fe37 	bl	8003a30 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEaSINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS0_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS5_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEEEERS1_RKNS_9DenseBaseIT_EE>
		 X = A*X1 ;
 8002dc2:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002dc6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002dca:	4a80      	ldr	r2, [pc, #512]	; (8002fcc <_Z12Kalmanfilterv+0x294>)
 8002dcc:	4980      	ldr	r1, [pc, #512]	; (8002fd0 <_Z12Kalmanfilterv+0x298>)
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f000 fe3d 	bl	8003a4e <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmlINS1_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>
 8002dd4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002dd8:	4619      	mov	r1, r3
 8002dda:	487e      	ldr	r0, [pc, #504]	; (8002fd4 <_Z12Kalmanfilterv+0x29c>)
 8002ddc:	f000 fe4e 	bl	8003a7c <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEaSINS_7ProductINS0_IfLi3ELi3ELi0ELi3ELi3EEES1_Li0EEEEERS1_RKNS_9DenseBaseIT_EE>
		 P = A*O*A.transpose()+Q;
 8002de0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002de4:	4a7c      	ldr	r2, [pc, #496]	; (8002fd8 <_Z12Kalmanfilterv+0x2a0>)
 8002de6:	497a      	ldr	r1, [pc, #488]	; (8002fd0 <_Z12Kalmanfilterv+0x298>)
 8002de8:	4618      	mov	r0, r3
 8002dea:	f000 fe56 	bl	8003a9a <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmlIS2_EEKNS_7ProductIS2_T_Li0EEERKNS0_IS6_EE>
 8002dee:	4878      	ldr	r0, [pc, #480]	; (8002fd0 <_Z12Kalmanfilterv+0x298>)
 8002df0:	f000 fe6a 	bl	8003ac8 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE9transposeEv>
 8002df4:	4603      	mov	r3, r0
 8002df6:	663b      	str	r3, [r7, #96]	; 0x60
 8002df8:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002dfc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002e00:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002e04:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f000 fe70 	bl	8003aee <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEmlINS_9TransposeIS3_EEEEKNS1_IS4_T_Li0EEERKNS0_IS9_EE>
 8002e0e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002e12:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002e16:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8002e1a:	4a6b      	ldr	r2, [pc, #428]	; (8002fc8 <_Z12Kalmanfilterv+0x290>)
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f000 fe7d 	bl	8003b1c <_ZNK5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEEplIS3_EEKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIfNSB_6traitsIT_E6ScalarEEEKS7_KSE_EERKNS0_ISE_EE>
 8002e22:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002e26:	4619      	mov	r1, r3
 8002e28:	486c      	ldr	r0, [pc, #432]	; (8002fdc <_Z12Kalmanfilterv+0x2a4>)
 8002e2a:	f000 fe95 	bl	8003b58 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEaSINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS7_IS1_S1_Li0EEENS_9TransposeIS1_EELi0EEEKS1_EEEERS1_RKNS_9DenseBaseIT_EE>

		 //////////////// Update /////////////////////
	     Z << OutUnwrap ;
 8002e2e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002e32:	4a6b      	ldr	r2, [pc, #428]	; (8002fe0 <_Z12Kalmanfilterv+0x2a8>)
 8002e34:	496b      	ldr	r1, [pc, #428]	; (8002fe4 <_Z12Kalmanfilterv+0x2ac>)
 8002e36:	4618      	mov	r0, r3
 8002e38:	f000 fc8e 	bl	8003758 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEElsERKf>
 8002e3c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002e40:	4618      	mov	r0, r3
 8002e42:	f000 fc98 	bl	8003776 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
	//     Z << DiffVelo ;
		 K = (P*C.transpose())*(C*P*C.transpose()+R).inverse();
 8002e46:	4868      	ldr	r0, [pc, #416]	; (8002fe8 <_Z12Kalmanfilterv+0x2b0>)
 8002e48:	f000 fe95 	bl	8003b76 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE9transposeEv>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002e52:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002e56:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002e5a:	4960      	ldr	r1, [pc, #384]	; (8002fdc <_Z12Kalmanfilterv+0x2a4>)
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f000 fe9d 	bl	8003b9c <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmlINS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS9_EE>
 8002e62:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002e66:	4a5d      	ldr	r2, [pc, #372]	; (8002fdc <_Z12Kalmanfilterv+0x2a4>)
 8002e68:	495f      	ldr	r1, [pc, #380]	; (8002fe8 <_Z12Kalmanfilterv+0x2b0>)
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f000 fead 	bl	8003bca <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEmlINS1_IfLi3ELi3ELi0ELi3ELi3EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>
 8002e70:	485d      	ldr	r0, [pc, #372]	; (8002fe8 <_Z12Kalmanfilterv+0x2b0>)
 8002e72:	f000 fe80 	bl	8003b76 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE9transposeEv>
 8002e76:	4603      	mov	r3, r0
 8002e78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002e7c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002e80:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8002e84:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f000 feb5 	bl	8003bf8 <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEmlINS_9TransposeIS3_EEEEKNS1_IS5_T_Li0EEERKNS0_ISA_EE>
 8002e8e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002e92:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 8002e96:	4a55      	ldr	r2, [pc, #340]	; (8002fec <_Z12Kalmanfilterv+0x2b4>)
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f000 fec4 	bl	8003c26 <_ZNK5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEEplINS2_IfLi1ELi1ELi0ELi1ELi1EEEEEKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIfNSD_6traitsIT_E6ScalarEEEKS8_KSG_EERKNS0_ISG_EE>
 8002e9e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002ea2:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8002ea6:	4611      	mov	r1, r2
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f000 ff17 	bl	8003cdc <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7inverseEv>
 8002eae:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002eb2:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8002eb6:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f000 ff46 	bl	8003d4c <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEmlINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEEKNS1_IS7_T_Li0EEERKNS0_ISM_EE>
 8002ec0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	484a      	ldr	r0, [pc, #296]	; (8002ff0 <_Z12Kalmanfilterv+0x2b8>)
 8002ec8:	f000 ff57 	bl	8003d7a <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEaSINS_7ProductINS3_INS0_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS0_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS3_INS3_IS6_S4_Li0EEES7_Li0EEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERS1_RKNS_9DenseBaseIT_EE>
		 X1 = X+K*(Z-C*X);
 8002ecc:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8002ed0:	4a40      	ldr	r2, [pc, #256]	; (8002fd4 <_Z12Kalmanfilterv+0x29c>)
 8002ed2:	4945      	ldr	r1, [pc, #276]	; (8002fe8 <_Z12Kalmanfilterv+0x2b0>)
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f000 ff5f 	bl	8003d98 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEmlINS1_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>
 8002eda:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002ede:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 8002ee2:	4940      	ldr	r1, [pc, #256]	; (8002fe4 <_Z12Kalmanfilterv+0x2ac>)
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f000 ff6e 	bl	8003dc6 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEmiINS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEKNS_13CwiseBinaryOpINS_8internal20scalar_difference_opIfNSA_6traitsIT_E6ScalarEEEKS2_KSD_EERKNS0_ISD_EE>
 8002eea:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002eee:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8002ef2:	493f      	ldr	r1, [pc, #252]	; (8002ff0 <_Z12Kalmanfilterv+0x2b8>)
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f000 ffa3 	bl	8003e40 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEmlINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEEEEKNSB_IS2_T_Li0EEERKNS0_ISG_EE>
 8002efa:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002efe:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8002f02:	4934      	ldr	r1, [pc, #208]	; (8002fd4 <_Z12Kalmanfilterv+0x29c>)
 8002f04:	4618      	mov	r0, r3
 8002f06:	f000 ffc8 	bl	8003e9a <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEplINS_7ProductIS2_NS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS5_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEEKNS6_INS7_13scalar_sum_opIfNS7_6traitsIT_E6ScalarEEEKS2_KSJ_EERKNS0_ISJ_EE>
 8002f0a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002f0e:	4619      	mov	r1, r3
 8002f10:	482e      	ldr	r0, [pc, #184]	; (8002fcc <_Z12Kalmanfilterv+0x294>)
 8002f12:	f000 ffe0 	bl	8003ed6 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEaSINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS1_KNS_7ProductIS1_NS3_INS4_20scalar_difference_opIffEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS0_IfLi1ELi3ELi1ELi1ELi3EEES1_Li0EEEEELi0EEEEEEERS1_RKNS_9DenseBaseIT_EE>
		 O = (I-(K*C))*P;
 8002f16:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002f1a:	4a33      	ldr	r2, [pc, #204]	; (8002fe8 <_Z12Kalmanfilterv+0x2b0>)
 8002f1c:	4934      	ldr	r1, [pc, #208]	; (8002ff0 <_Z12Kalmanfilterv+0x2b8>)
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f000 ffe8 	bl	8003ef4 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEmlINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>
 8002f24:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002f28:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8002f2c:	4931      	ldr	r1, [pc, #196]	; (8002ff4 <_Z12Kalmanfilterv+0x2bc>)
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f000 fff7 	bl	8003f22 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmiINS_7ProductINS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEKNS_13CwiseBinaryOpINS_8internal20scalar_difference_opIfNSA_6traitsIT_E6ScalarEEEKS2_KSD_EERKNS0_ISD_EE>
 8002f34:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8002f38:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8002f3c:	4a27      	ldr	r2, [pc, #156]	; (8002fdc <_Z12Kalmanfilterv+0x2a4>)
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f001 f82c 	bl	8003f9c <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEmlIS6_EEKNS8_ISD_T_Li0EEERKNS0_ISG_EE>
 8002f44:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8002f48:	4619      	mov	r1, r3
 8002f4a:	4823      	ldr	r0, [pc, #140]	; (8002fd8 <_Z12Kalmanfilterv+0x2a0>)
 8002f4c:	f001 f83d 	bl	8003fca <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEaSINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS3_INS0_IfLi3ELi1ELi0ELi3ELi1EEENS0_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES1_Li0EEEEERS1_RKNS_9DenseBaseIT_EE>

		 KalP = X(0,0);
 8002f50:	2200      	movs	r2, #0
 8002f52:	2100      	movs	r1, #0
 8002f54:	481f      	ldr	r0, [pc, #124]	; (8002fd4 <_Z12Kalmanfilterv+0x29c>)
 8002f56:	f000 fca5 	bl	80038a4 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a26      	ldr	r2, [pc, #152]	; (8002ff8 <_Z12Kalmanfilterv+0x2c0>)
 8002f60:	6013      	str	r3, [r2, #0]
		 KalV = X(1,0);
 8002f62:	2200      	movs	r2, #0
 8002f64:	2101      	movs	r1, #1
 8002f66:	481b      	ldr	r0, [pc, #108]	; (8002fd4 <_Z12Kalmanfilterv+0x29c>)
 8002f68:	f000 fc9c 	bl	80038a4 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a22      	ldr	r2, [pc, #136]	; (8002ffc <_Z12Kalmanfilterv+0x2c4>)
 8002f72:	6013      	str	r3, [r2, #0]
		 KalA = X(2,0);
 8002f74:	2200      	movs	r2, #0
 8002f76:	2102      	movs	r1, #2
 8002f78:	4816      	ldr	r0, [pc, #88]	; (8002fd4 <_Z12Kalmanfilterv+0x29c>)
 8002f7a:	f000 fc93 	bl	80038a4 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a1f      	ldr	r2, [pc, #124]	; (8003000 <_Z12Kalmanfilterv+0x2c8>)
 8002f84:	6013      	str	r3, [r2, #0]
		 runtime = micros()-TimeStampKalman;
 8002f86:	f000 f9f9 	bl	800337c <_Z6microsv>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	490b      	ldr	r1, [pc, #44]	; (8002fbc <_Z12Kalmanfilterv+0x284>)
 8002f90:	6809      	ldr	r1, [r1, #0]
 8002f92:	2000      	movs	r0, #0
 8002f94:	4688      	mov	r8, r1
 8002f96:	4681      	mov	r9, r0
 8002f98:	ebb2 0108 	subs.w	r1, r2, r8
 8002f9c:	6039      	str	r1, [r7, #0]
 8002f9e:	eb63 0309 	sbc.w	r3, r3, r9
 8002fa2:	607b      	str	r3, [r7, #4]
 8002fa4:	4b17      	ldr	r3, [pc, #92]	; (8003004 <_Z12Kalmanfilterv+0x2cc>)
 8002fa6:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002faa:	e9c3 1200 	strd	r1, r2, [r3]

	     //ErrPos[0] = TargetDeg - BinPosXI*0.006136;
	 }

}
 8002fae:	bf00      	nop
 8002fb0:	f507 77a8 	add.w	r7, r7, #336	; 0x150
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fba:	bf00      	nop
 8002fbc:	20000528 	.word	0x20000528
 8002fc0:	20000140 	.word	0x20000140
 8002fc4:	200005f0 	.word	0x200005f0
 8002fc8:	200005fc 	.word	0x200005fc
 8002fcc:	2000062c 	.word	0x2000062c
 8002fd0:	20000538 	.word	0x20000538
 8002fd4:	20000620 	.word	0x20000620
 8002fd8:	20000580 	.word	0x20000580
 8002fdc:	2000055c 	.word	0x2000055c
 8002fe0:	20000660 	.word	0x20000660
 8002fe4:	200005d4 	.word	0x200005d4
 8002fe8:	200005e4 	.word	0x200005e4
 8002fec:	200005cc 	.word	0x200005cc
 8002ff0:	200005d8 	.word	0x200005d8
 8002ff4:	200005a4 	.word	0x200005a4
 8002ff8:	20000644 	.word	0x20000644
 8002ffc:	20000648 	.word	0x20000648
 8003000:	2000064c 	.word	0x2000064c
 8003004:	20000530 	.word	0x20000530

08003008 <_Z13GraytoBinarioth>:
	//if(flag_finishTra == 1){PWMOut = 0;}
}

///////////////////// [Abs Encoder I2C] ////////////////////////////////////////////
////////// [Absolute Encoder] ////////////////////////////////////////////
uint16_t GraytoBinario(uint16_t grayx,uint8_t numbit){ // numbit=10
 8003008:	b480      	push	{r7}
 800300a:	b087      	sub	sp, #28
 800300c:	af00      	add	r7, sp, #0
 800300e:	4603      	mov	r3, r0
 8003010:	460a      	mov	r2, r1
 8003012:	80fb      	strh	r3, [r7, #6]
 8003014:	4613      	mov	r3, r2
 8003016:	717b      	strb	r3, [r7, #5]

	uint16_t binaryout = 0b0;
 8003018:	2300      	movs	r3, #0
 800301a:	82fb      	strh	r3, [r7, #22]

    binaryout = (grayx >> (numbit-1))&0x01;
 800301c:	88fa      	ldrh	r2, [r7, #6]
 800301e:	797b      	ldrb	r3, [r7, #5]
 8003020:	3b01      	subs	r3, #1
 8003022:	fa42 f303 	asr.w	r3, r2, r3
 8003026:	b29b      	uxth	r3, r3
 8003028:	f003 0301 	and.w	r3, r3, #1
 800302c:	82fb      	strh	r3, [r7, #22]
    //std::cout << binaryout << std::endl;

    for (int i = 1; i < numbit ;i++){
 800302e:	2301      	movs	r3, #1
 8003030:	613b      	str	r3, [r7, #16]
 8003032:	797b      	ldrb	r3, [r7, #5]
 8003034:	693a      	ldr	r2, [r7, #16]
 8003036:	429a      	cmp	r2, r3
 8003038:	da1e      	bge.n	8003078 <_Z13GraytoBinarioth+0x70>
        /* XOR operation */
        int cp1 = binaryout&0x01 ;//>> (numbit-i)
 800303a:	8afb      	ldrh	r3, [r7, #22]
 800303c:	f003 0301 	and.w	r3, r3, #1
 8003040:	60fb      	str	r3, [r7, #12]
        int cp2 = grayx >> (numbit-(i+1))&0x01; //
 8003042:	88fa      	ldrh	r2, [r7, #6]
 8003044:	7979      	ldrb	r1, [r7, #5]
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	3301      	adds	r3, #1
 800304a:	1acb      	subs	r3, r1, r3
 800304c:	fa42 f303 	asr.w	r3, r2, r3
 8003050:	f003 0301 	and.w	r3, r3, #1
 8003054:	60bb      	str	r3, [r7, #8]

        if (cp1 == cp2)
 8003056:	68fa      	ldr	r2, [r7, #12]
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	429a      	cmp	r2, r3
 800305c:	d103      	bne.n	8003066 <_Z13GraytoBinarioth+0x5e>
            {binaryout = (binaryout << 1) + 0; } //qd = 0;
 800305e:	8afb      	ldrh	r3, [r7, #22]
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	82fb      	strh	r3, [r7, #22]
 8003064:	e004      	b.n	8003070 <_Z13GraytoBinarioth+0x68>
        else
            {binaryout = (binaryout << 1) + 1; } //qd = 1;
 8003066:	8afb      	ldrh	r3, [r7, #22]
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	b29b      	uxth	r3, r3
 800306c:	3301      	adds	r3, #1
 800306e:	82fb      	strh	r3, [r7, #22]
    for (int i = 1; i < numbit ;i++){
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	3301      	adds	r3, #1
 8003074:	613b      	str	r3, [r7, #16]
 8003076:	e7dc      	b.n	8003032 <_Z13GraytoBinarioth+0x2a>
        //std::cout << "cp" << i << " " << cp1 << cp2 << " " << qd << "  "<<binaryout << std::endl;
    }
    //BinPos = binaryout;
    return binaryout;
 8003078:	8afb      	ldrh	r3, [r7, #22]
}
 800307a:	4618      	mov	r0, r3
 800307c:	371c      	adds	r7, #28
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
	...

08003088 <_Z14IOExpenderInitv>:

void IOExpenderInit() {// call when start system
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af04      	add	r7, sp, #16
			0x00, 0x00, 0x00, 0x00,
			0x00, // 0x12 GPIOA
			0x00, // 0x13 GPIOB
			0x00, 0x00 };
	// OLATB -> Out data for pinB
	HAL_I2C_Mem_Write(&hi2c1, ADDR_IOXT, 0x00, I2C_MEMADD_SIZE_8BIT, Xetting,
 800308e:	2364      	movs	r3, #100	; 0x64
 8003090:	9302      	str	r3, [sp, #8]
 8003092:	2316      	movs	r3, #22
 8003094:	9301      	str	r3, [sp, #4]
 8003096:	4b05      	ldr	r3, [pc, #20]	; (80030ac <_Z14IOExpenderInitv+0x24>)
 8003098:	9300      	str	r3, [sp, #0]
 800309a:	2301      	movs	r3, #1
 800309c:	2200      	movs	r2, #0
 800309e:	2140      	movs	r1, #64	; 0x40
 80030a0:	4803      	ldr	r0, [pc, #12]	; (80030b0 <_Z14IOExpenderInitv+0x28>)
 80030a2:	f013 fca9 	bl	80169f8 <HAL_I2C_Mem_Write>
			0x16, 100);
}
 80030a6:	bf00      	nop
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	20000164 	.word	0x20000164
 80030b0:	20000214 	.word	0x20000214

080030b4 <_Z14AbsEncI2CReadxPh>:

void AbsEncI2CReadx(uint8_t *RawRAB){
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b086      	sub	sp, #24
 80030b8:	af04      	add	r7, sp, #16
 80030ba:	6078      	str	r0, [r7, #4]

	if(flag_absenc != 0 && hi2c1.State == HAL_I2C_STATE_READY){
 80030bc:	4b28      	ldr	r3, [pc, #160]	; (8003160 <_Z14AbsEncI2CReadxPh+0xac>)
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d007      	beq.n	80030d4 <_Z14AbsEncI2CReadxPh+0x20>
 80030c4:	4b27      	ldr	r3, [pc, #156]	; (8003164 <_Z14AbsEncI2CReadxPh+0xb0>)
 80030c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	2b20      	cmp	r3, #32
 80030ce:	d101      	bne.n	80030d4 <_Z14AbsEncI2CReadxPh+0x20>
 80030d0:	2301      	movs	r3, #1
 80030d2:	e000      	b.n	80030d6 <_Z14AbsEncI2CReadxPh+0x22>
 80030d4:	2300      	movs	r3, #0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d03e      	beq.n	8003158 <_Z14AbsEncI2CReadxPh+0xa4>
		switch(flag_absenc){
 80030da:	4b21      	ldr	r3, [pc, #132]	; (8003160 <_Z14AbsEncI2CReadxPh+0xac>)
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d002      	beq.n	80030e8 <_Z14AbsEncI2CReadxPh+0x34>
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d010      	beq.n	8003108 <_Z14AbsEncI2CReadxPh+0x54>
		default:
			break;
 80030e6:	e037      	b.n	8003158 <_Z14AbsEncI2CReadxPh+0xa4>

		case 1:
			//HAL_I2C_Master_Receive(&hi2c1, ADDR_IOXT, GrayCBitx, 1, 100);
			//HAL_I2C_Master_Seq_Receive_DMA(hi2c, DevAddress, pData, Size, XferOptions);
			HAL_I2C_Mem_Read(&hi2c1, ADDR_IOXT, 0x12, I2C_MEMADD_SIZE_8BIT,
 80030e8:	2364      	movs	r3, #100	; 0x64
 80030ea:	9302      	str	r3, [sp, #8]
 80030ec:	2302      	movs	r3, #2
 80030ee:	9301      	str	r3, [sp, #4]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	9300      	str	r3, [sp, #0]
 80030f4:	2301      	movs	r3, #1
 80030f6:	2212      	movs	r2, #18
 80030f8:	2140      	movs	r1, #64	; 0x40
 80030fa:	481a      	ldr	r0, [pc, #104]	; (8003164 <_Z14AbsEncI2CReadxPh+0xb0>)
 80030fc:	f013 fd76 	bl	8016bec <HAL_I2C_Mem_Read>
						RawRAB, 2, 100);
			flag_absenc = 2;
 8003100:	4b17      	ldr	r3, [pc, #92]	; (8003160 <_Z14AbsEncI2CReadxPh+0xac>)
 8003102:	2202      	movs	r2, #2
 8003104:	701a      	strb	r2, [r3, #0]
		break;
 8003106:	e027      	b.n	8003158 <_Z14AbsEncI2CReadxPh+0xa4>

		case 2:
			//invert in IPOL
			GrayCBitXI = (RawEnBitAB[1] << 8) | RawEnBitAB[0]; // GrayCBitx
 8003108:	4b17      	ldr	r3, [pc, #92]	; (8003168 <_Z14AbsEncI2CReadxPh+0xb4>)
 800310a:	785b      	ldrb	r3, [r3, #1]
 800310c:	021b      	lsls	r3, r3, #8
 800310e:	b21a      	sxth	r2, r3
 8003110:	4b15      	ldr	r3, [pc, #84]	; (8003168 <_Z14AbsEncI2CReadxPh+0xb4>)
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	b21b      	sxth	r3, r3
 8003116:	4313      	orrs	r3, r2
 8003118:	b21b      	sxth	r3, r3
 800311a:	b29a      	uxth	r2, r3
 800311c:	4b13      	ldr	r3, [pc, #76]	; (800316c <_Z14AbsEncI2CReadxPh+0xb8>)
 800311e:	801a      	strh	r2, [r3, #0]

			//GrayCBitXI = ~GrayCBitx - 0b1111110000000000; // invert and clear 6 high
			//GrayCBitXI = ~GrayCBitx & 0b0000001111111111;
			BinPosXI = GraytoBinario(GrayCBitXI, 10) + POSOFFSET;  //
 8003120:	4b12      	ldr	r3, [pc, #72]	; (800316c <_Z14AbsEncI2CReadxPh+0xb8>)
 8003122:	881b      	ldrh	r3, [r3, #0]
 8003124:	210a      	movs	r1, #10
 8003126:	4618      	mov	r0, r3
 8003128:	f7ff ff6e 	bl	8003008 <_Z13GraytoBinarioth>
 800312c:	4603      	mov	r3, r0
 800312e:	f2a3 3341 	subw	r3, r3, #833	; 0x341
 8003132:	b29a      	uxth	r2, r3
 8003134:	4b0e      	ldr	r3, [pc, #56]	; (8003170 <_Z14AbsEncI2CReadxPh+0xbc>)
 8003136:	801a      	strh	r2, [r3, #0]
			if (BinPosXI >= 1024){BinPosXI = BinPosXI % 1024;}
 8003138:	4b0d      	ldr	r3, [pc, #52]	; (8003170 <_Z14AbsEncI2CReadxPh+0xbc>)
 800313a:	881b      	ldrh	r3, [r3, #0]
 800313c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003140:	d306      	bcc.n	8003150 <_Z14AbsEncI2CReadxPh+0x9c>
 8003142:	4b0b      	ldr	r3, [pc, #44]	; (8003170 <_Z14AbsEncI2CReadxPh+0xbc>)
 8003144:	881b      	ldrh	r3, [r3, #0]
 8003146:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800314a:	b29a      	uxth	r2, r3
 800314c:	4b08      	ldr	r3, [pc, #32]	; (8003170 <_Z14AbsEncI2CReadxPh+0xbc>)
 800314e:	801a      	strh	r2, [r3, #0]
			flag_absenc = 0;
 8003150:	4b03      	ldr	r3, [pc, #12]	; (8003160 <_Z14AbsEncI2CReadxPh+0xac>)
 8003152:	2200      	movs	r2, #0
 8003154:	701a      	strb	r2, [r3, #0]
		break;
 8003156:	bf00      	nop
		}
	}

}
 8003158:	bf00      	nop
 800315a:	3708      	adds	r7, #8
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	20000512 	.word	0x20000512
 8003164:	20000214 	.word	0x20000214
 8003168:	2000050c 	.word	0x2000050c
 800316c:	2000050e 	.word	0x2000050e
 8003170:	20000510 	.word	0x20000510

08003174 <_Z13Efft_activatev>:

/////////////////////// [End Effector] //////////////////////////////////

void Efft_activate(){
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af02      	add	r7, sp, #8
	uint8_t cmmd = 0x45;
 800317a:	2345      	movs	r3, #69	; 0x45
 800317c:	71fb      	strb	r3, [r7, #7]

	static enum{ef_INIT, ef_shoot} efshoot = ef_INIT;
	switch(efshoot){
 800317e:	4b21      	ldr	r3, [pc, #132]	; (8003204 <_Z13Efft_activatev+0x90>)
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	2b01      	cmp	r3, #1
 8003184:	d01a      	beq.n	80031bc <_Z13Efft_activatev+0x48>
	default:
	case ef_INIT:
		if(flag_efftActi != 0 && hi2c3.State == HAL_I2C_STATE_READY){
 8003186:	4b20      	ldr	r3, [pc, #128]	; (8003208 <_Z13Efft_activatev+0x94>)
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d007      	beq.n	800319e <_Z13Efft_activatev+0x2a>
 800318e:	4b1f      	ldr	r3, [pc, #124]	; (800320c <_Z13Efft_activatev+0x98>)
 8003190:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b20      	cmp	r3, #32
 8003198:	d101      	bne.n	800319e <_Z13Efft_activatev+0x2a>
 800319a:	2301      	movs	r3, #1
 800319c:	e000      	b.n	80031a0 <_Z13Efft_activatev+0x2c>
 800319e:	2300      	movs	r3, #0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d028      	beq.n	80031f6 <_Z13Efft_activatev+0x82>
			HAL_I2C_Master_Seq_Transmit_IT(&hi2c3, ADDR_EFFT, &cmmd, 0, I2C_FIRST_FRAME);
 80031a4:	1dfa      	adds	r2, r7, #7
 80031a6:	2301      	movs	r3, #1
 80031a8:	9300      	str	r3, [sp, #0]
 80031aa:	2300      	movs	r3, #0
 80031ac:	2146      	movs	r1, #70	; 0x46
 80031ae:	4817      	ldr	r0, [pc, #92]	; (800320c <_Z13Efft_activatev+0x98>)
 80031b0:	f013 ff42 	bl	8017038 <HAL_I2C_Master_Seq_Transmit_IT>
			//HAL_I2C_Master_Seq_Transmit_IT(&hi2c3, ADDR_EFFT, &cmmd, 1, I2C_FIRST_AND_LAST_FRAME);
			//HAL_I2C_Master_Transmit(&hi2c3, ADDR_EFFT, &cmmd, 2, 100);
			efshoot = ef_shoot;
 80031b4:	4b13      	ldr	r3, [pc, #76]	; (8003204 <_Z13Efft_activatev+0x90>)
 80031b6:	2201      	movs	r2, #1
 80031b8:	701a      	strb	r2, [r3, #0]
		}
	break;
 80031ba:	e01c      	b.n	80031f6 <_Z13Efft_activatev+0x82>

	case ef_shoot:
		if (hi2c3.State == HAL_I2C_STATE_READY){
 80031bc:	4b13      	ldr	r3, [pc, #76]	; (800320c <_Z13Efft_activatev+0x98>)
 80031be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	2b20      	cmp	r3, #32
 80031c6:	bf0c      	ite	eq
 80031c8:	2301      	moveq	r3, #1
 80031ca:	2300      	movne	r3, #0
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d013      	beq.n	80031fa <_Z13Efft_activatev+0x86>
			HAL_I2C_Master_Seq_Transmit_IT(&hi2c3, ADDR_EFFT, &cmmd, 1, I2C_LAST_FRAME);
 80031d2:	1dfa      	adds	r2, r7, #7
 80031d4:	2320      	movs	r3, #32
 80031d6:	9300      	str	r3, [sp, #0]
 80031d8:	2301      	movs	r3, #1
 80031da:	2146      	movs	r1, #70	; 0x46
 80031dc:	480b      	ldr	r0, [pc, #44]	; (800320c <_Z13Efft_activatev+0x98>)
 80031de:	f013 ff2b 	bl	8017038 <HAL_I2C_Master_Seq_Transmit_IT>
			efshoot = ef_INIT;
 80031e2:	4b08      	ldr	r3, [pc, #32]	; (8003204 <_Z13Efft_activatev+0x90>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	701a      	strb	r2, [r3, #0]
			flag_efftActi = 0;
 80031e8:	4b07      	ldr	r3, [pc, #28]	; (8003208 <_Z13Efft_activatev+0x94>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	701a      	strb	r2, [r3, #0]
			trig_efftRead = 1;
 80031ee:	4b08      	ldr	r3, [pc, #32]	; (8003210 <_Z13Efft_activatev+0x9c>)
 80031f0:	2201      	movs	r2, #1
 80031f2:	701a      	strb	r2, [r3, #0]
		}
	break;
 80031f4:	e001      	b.n	80031fa <_Z13Efft_activatev+0x86>
	break;
 80031f6:	bf00      	nop
 80031f8:	e000      	b.n	80031fc <_Z13Efft_activatev+0x88>
	break;
 80031fa:	bf00      	nop
	}

}
 80031fc:	bf00      	nop
 80031fe:	3708      	adds	r7, #8
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}
 8003204:	20000716 	.word	0x20000716
 8003208:	20000675 	.word	0x20000675
 800320c:	20000268 	.word	0x20000268
 8003210:	20000677 	.word	0x20000677

08003214 <_Z9Efft_readPh>:

void Efft_read(uint8_t *Rddata){
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af02      	add	r7, sp, #8
 800321a:	6078      	str	r0, [r7, #4]
		//HAL_I2C_Mem_Read(&hi2c1, ADDR_EFFT, &readRQ, I2C_MEMADD_SIZE_8BIT, Rddata, 1, 100);
		flag_efftRead = 0;
	}
	*/
	static uint8_t efrdStatus = 0;
	switch(efrdStatus){
 800321c:	4b1f      	ldr	r3, [pc, #124]	; (800329c <_Z9Efft_readPh+0x88>)
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d01a      	beq.n	800325a <_Z9Efft_readPh+0x46>
	default:
	case 0:
		if (flag_efftRead != 0 && hi2c3.State == HAL_I2C_STATE_READY){
 8003224:	4b1e      	ldr	r3, [pc, #120]	; (80032a0 <_Z9Efft_readPh+0x8c>)
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d007      	beq.n	800323c <_Z9Efft_readPh+0x28>
 800322c:	4b1d      	ldr	r3, [pc, #116]	; (80032a4 <_Z9Efft_readPh+0x90>)
 800322e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003232:	b2db      	uxtb	r3, r3
 8003234:	2b20      	cmp	r3, #32
 8003236:	d101      	bne.n	800323c <_Z9Efft_readPh+0x28>
 8003238:	2301      	movs	r3, #1
 800323a:	e000      	b.n	800323e <_Z9Efft_readPh+0x2a>
 800323c:	2300      	movs	r3, #0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d025      	beq.n	800328e <_Z9Efft_readPh+0x7a>
			//HAL_I2C_Master_Transmit_IT(&hi2c3, ADDR_EFFT, 0x23, 1);
			HAL_I2C_Master_Seq_Transmit_IT(&hi2c3, ADDR_EFFT, &readRQ, 1, I2C_FIRST_AND_NEXT_FRAME);
 8003242:	2302      	movs	r3, #2
 8003244:	9300      	str	r3, [sp, #0]
 8003246:	2301      	movs	r3, #1
 8003248:	4a17      	ldr	r2, [pc, #92]	; (80032a8 <_Z9Efft_readPh+0x94>)
 800324a:	2146      	movs	r1, #70	; 0x46
 800324c:	4815      	ldr	r0, [pc, #84]	; (80032a4 <_Z9Efft_readPh+0x90>)
 800324e:	f013 fef3 	bl	8017038 <HAL_I2C_Master_Seq_Transmit_IT>
			//HAL_I2C_Master_Transmit(&hi2c3, ADDR_EFFT, &readRQ, 2, 100);
			//HAL_I2C_Master_Seq_Transmit_DMA(&hi2c3, ADDR_EFFT, &readRQ, 1, I2C_FIRST_AND_NEXT_FRAME);
			efrdStatus = 1;
 8003252:	4b12      	ldr	r3, [pc, #72]	; (800329c <_Z9Efft_readPh+0x88>)
 8003254:	2201      	movs	r2, #1
 8003256:	701a      	strb	r2, [r3, #0]
		}
	break;
 8003258:	e019      	b.n	800328e <_Z9Efft_readPh+0x7a>

	case 1:

		if (hi2c3.State == HAL_I2C_STATE_READY){
 800325a:	4b12      	ldr	r3, [pc, #72]	; (80032a4 <_Z9Efft_readPh+0x90>)
 800325c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b20      	cmp	r3, #32
 8003264:	bf0c      	ite	eq
 8003266:	2301      	moveq	r3, #1
 8003268:	2300      	movne	r3, #0
 800326a:	b2db      	uxtb	r3, r3
 800326c:	2b00      	cmp	r3, #0
 800326e:	d010      	beq.n	8003292 <_Z9Efft_readPh+0x7e>
			HAL_I2C_Master_Seq_Receive_IT(&hi2c3, ADDR_EFFT, Rddata, 1, I2C_LAST_FRAME);
 8003270:	2320      	movs	r3, #32
 8003272:	9300      	str	r3, [sp, #0]
 8003274:	2301      	movs	r3, #1
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	2146      	movs	r1, #70	; 0x46
 800327a:	480a      	ldr	r0, [pc, #40]	; (80032a4 <_Z9Efft_readPh+0x90>)
 800327c:	f013 ffa2 	bl	80171c4 <HAL_I2C_Master_Seq_Receive_IT>
			//HAL_I2C_Master_Seq_Receive_DMA(&hi2c3, ADDR_EFFT, Rddata, 1, I2C_LAST_FRAME);
			//HAL_I2C_Master_Receive(&hi2c3, ADDR_EFFT ,Rddata, 1, 100);
		flag_efftRead = 0;
 8003280:	4b07      	ldr	r3, [pc, #28]	; (80032a0 <_Z9Efft_readPh+0x8c>)
 8003282:	2200      	movs	r2, #0
 8003284:	701a      	strb	r2, [r3, #0]
		efrdStatus = 0;
 8003286:	4b05      	ldr	r3, [pc, #20]	; (800329c <_Z9Efft_readPh+0x88>)
 8003288:	2200      	movs	r2, #0
 800328a:	701a      	strb	r2, [r3, #0]
			}
	break;
 800328c:	e001      	b.n	8003292 <_Z9Efft_readPh+0x7e>
	break;
 800328e:	bf00      	nop
 8003290:	e000      	b.n	8003294 <_Z9Efft_readPh+0x80>
	break;
 8003292:	bf00      	nop
	}

}
 8003294:	bf00      	nop
 8003296:	3708      	adds	r7, #8
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	20000717 	.word	0x20000717
 80032a0:	20000676 	.word	0x20000676
 80032a4:	20000268 	.word	0x20000268
 80032a8:	2000017a 	.word	0x2000017a

080032ac <HAL_GPIO_EXTI_Callback>:

/////////////// Emer Interrupt /////////////////////////////////
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80032ac:	b480      	push	{r7}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	4603      	mov	r3, r0
 80032b4:	80fb      	strh	r3, [r7, #6]
	//============// EMER ////=====================
	if(GPIO_Pin == GPIO_PIN_11){
 80032b6:	88fb      	ldrh	r3, [r7, #6]
 80032b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032bc:	d108      	bne.n	80032d0 <HAL_GPIO_EXTI_Callback+0x24>
		//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
		//counter_e++;
		grandState = emer;
 80032be:	4b29      	ldr	r3, [pc, #164]	; (8003364 <HAL_GPIO_EXTI_Callback+0xb8>)
 80032c0:	2203      	movs	r2, #3
 80032c2:	701a      	strb	r2, [r3, #0]
		bluecounter = 0;
 80032c4:	4b28      	ldr	r3, [pc, #160]	; (8003368 <HAL_GPIO_EXTI_Callback+0xbc>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	701a      	strb	r2, [r3, #0]
		PWMOut = 0;
 80032ca:	4b28      	ldr	r3, [pc, #160]	; (800336c <HAL_GPIO_EXTI_Callback+0xc0>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	801a      	strh	r2, [r3, #0]
		// Motor Driver Torque Lock here
	}
	//=============// Stop ////======================
	if(GPIO_Pin == GPIO_PIN_10){
 80032d0:	88fb      	ldrh	r3, [r7, #6]
 80032d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032d6:	d110      	bne.n	80032fa <HAL_GPIO_EXTI_Callback+0x4e>
		PWMOut = 0;
 80032d8:	4b24      	ldr	r3, [pc, #144]	; (800336c <HAL_GPIO_EXTI_Callback+0xc0>)
 80032da:	2200      	movs	r2, #0
 80032dc:	801a      	strh	r2, [r3, #0]
		bluecounter = 0;
 80032de:	4b22      	ldr	r3, [pc, #136]	; (8003368 <HAL_GPIO_EXTI_Callback+0xbc>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	701a      	strb	r2, [r3, #0]
		if(grandState == work){grandState = stopnd;}
 80032e4:	4b1f      	ldr	r3, [pc, #124]	; (8003364 <HAL_GPIO_EXTI_Callback+0xb8>)
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d103      	bne.n	80032f4 <HAL_GPIO_EXTI_Callback+0x48>
 80032ec:	4b1d      	ldr	r3, [pc, #116]	; (8003364 <HAL_GPIO_EXTI_Callback+0xb8>)
 80032ee:	2204      	movs	r2, #4
 80032f0:	701a      	strb	r2, [r3, #0]
 80032f2:	e002      	b.n	80032fa <HAL_GPIO_EXTI_Callback+0x4e>
		else{grandState = stop;}
 80032f4:	4b1b      	ldr	r3, [pc, #108]	; (8003364 <HAL_GPIO_EXTI_Callback+0xb8>)
 80032f6:	2202      	movs	r2, #2
 80032f8:	701a      	strb	r2, [r3, #0]

		}
	//=========// work Blue button //=========//
	if(GPIO_Pin == GPIO_PIN_13){
 80032fa:	88fb      	ldrh	r3, [r7, #6]
 80032fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003300:	d11f      	bne.n	8003342 <HAL_GPIO_EXTI_Callback+0x96>
		bluecounter++;
 8003302:	4b19      	ldr	r3, [pc, #100]	; (8003368 <HAL_GPIO_EXTI_Callback+0xbc>)
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	3301      	adds	r3, #1
 8003308:	b2da      	uxtb	r2, r3
 800330a:	4b17      	ldr	r3, [pc, #92]	; (8003368 <HAL_GPIO_EXTI_Callback+0xbc>)
 800330c:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0; i <= sizeof(PosDataSet); i++){
 800330e:	2300      	movs	r3, #0
 8003310:	73fb      	strb	r3, [r7, #15]
 8003312:	7bfb      	ldrb	r3, [r7, #15]
 8003314:	2b50      	cmp	r3, #80	; 0x50
 8003316:	d80d      	bhi.n	8003334 <HAL_GPIO_EXTI_Callback+0x88>
		    		positionlog[i] = PosDataSet[i];
 8003318:	7bfa      	ldrb	r2, [r7, #15]
 800331a:	7bfb      	ldrb	r3, [r7, #15]
 800331c:	4914      	ldr	r1, [pc, #80]	; (8003370 <HAL_GPIO_EXTI_Callback+0xc4>)
 800331e:	0092      	lsls	r2, r2, #2
 8003320:	440a      	add	r2, r1
 8003322:	6812      	ldr	r2, [r2, #0]
 8003324:	4913      	ldr	r1, [pc, #76]	; (8003374 <HAL_GPIO_EXTI_Callback+0xc8>)
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	440b      	add	r3, r1
 800332a:	601a      	str	r2, [r3, #0]
		for(uint8_t i = 0; i <= sizeof(PosDataSet); i++){
 800332c:	7bfb      	ldrb	r3, [r7, #15]
 800332e:	3301      	adds	r3, #1
 8003330:	73fb      	strb	r3, [r7, #15]
 8003332:	e7ee      	b.n	8003312 <HAL_GPIO_EXTI_Callback+0x66>
		    	}
		if(grandState == Ready){grandState = work;}
 8003334:	4b0b      	ldr	r3, [pc, #44]	; (8003364 <HAL_GPIO_EXTI_Callback+0xb8>)
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d102      	bne.n	8003342 <HAL_GPIO_EXTI_Callback+0x96>
 800333c:	4b09      	ldr	r3, [pc, #36]	; (8003364 <HAL_GPIO_EXTI_Callback+0xb8>)
 800333e:	2201      	movs	r2, #1
 8003340:	701a      	strb	r2, [r3, #0]
		//flag_efftActi = 1;
		//trig_efftRead = 1;
	}

	//=============// setzero //================//
		if(GPIO_Pin == GPIO_PIN_2){
 8003342:	88fb      	ldrh	r3, [r7, #6]
 8003344:	2b04      	cmp	r3, #4
 8003346:	d106      	bne.n	8003356 <HAL_GPIO_EXTI_Callback+0xaa>
			Finalposition = 0;
 8003348:	4b0b      	ldr	r3, [pc, #44]	; (8003378 <HAL_GPIO_EXTI_Callback+0xcc>)
 800334a:	f04f 0200 	mov.w	r2, #0
 800334e:	601a      	str	r2, [r3, #0]
			grandState = SetZeroGr;
 8003350:	4b04      	ldr	r3, [pc, #16]	; (8003364 <HAL_GPIO_EXTI_Callback+0xb8>)
 8003352:	2205      	movs	r2, #5
 8003354:	701a      	strb	r2, [r3, #0]
		}
}
 8003356:	bf00      	nop
 8003358:	3714      	adds	r7, #20
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	20000498 	.word	0x20000498
 8003368:	2000066c 	.word	0x2000066c
 800336c:	20000514 	.word	0x20000514
 8003370:	200004b8 	.word	0x200004b8
 8003374:	200000f0 	.word	0x200000f0
 8003378:	20000520 	.word	0x20000520

0800337c <_Z6microsv>:

///////////////////////////////////// micro timer////////////////////////////////////
uint64_t micros()
{return _micros + htim11.Instance->CNT;}
 800337c:	b4b0      	push	{r4, r5, r7}
 800337e:	af00      	add	r7, sp, #0
 8003380:	4b09      	ldr	r3, [pc, #36]	; (80033a8 <_Z6microsv+0x2c>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003386:	2200      	movs	r2, #0
 8003388:	4618      	mov	r0, r3
 800338a:	4611      	mov	r1, r2
 800338c:	4b07      	ldr	r3, [pc, #28]	; (80033ac <_Z6microsv+0x30>)
 800338e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003392:	1884      	adds	r4, r0, r2
 8003394:	eb41 0503 	adc.w	r5, r1, r3
 8003398:	4622      	mov	r2, r4
 800339a:	462b      	mov	r3, r5
 800339c:	4610      	mov	r0, r2
 800339e:	4619      	mov	r1, r3
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bcb0      	pop	{r4, r5, r7}
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	2000034c 	.word	0x2000034c
 80033ac:	200004a8 	.word	0x200004a8

080033b0 <_Z6millisv>:
uint32_t millis()
{return _millis;}// + htim10.Instance->CNT
 80033b0:	b480      	push	{r7}
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	4b03      	ldr	r3, [pc, #12]	; (80033c4 <_Z6millisv+0x14>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4618      	mov	r0, r3
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	200004b0 	.word	0x200004b0

080033c8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80033c8:	b4b0      	push	{r4, r5, r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 if(htim == &htim11)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a0e      	ldr	r2, [pc, #56]	; (800340c <HAL_TIM_PeriodElapsedCallback+0x44>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d10a      	bne.n	80033ee <HAL_TIM_PeriodElapsedCallback+0x26>
 {_micros += 65535;}
 80033d8:	4b0d      	ldr	r3, [pc, #52]	; (8003410 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80033da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033de:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80033e2:	1854      	adds	r4, r2, r1
 80033e4:	f143 0500 	adc.w	r5, r3, #0
 80033e8:	4b09      	ldr	r3, [pc, #36]	; (8003410 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80033ea:	e9c3 4500 	strd	r4, r5, [r3]
 if(htim == &htim10)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a08      	ldr	r2, [pc, #32]	; (8003414 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d104      	bne.n	8003400 <HAL_TIM_PeriodElapsedCallback+0x38>
 {_millis++;}
 80033f6:	4b08      	ldr	r3, [pc, #32]	; (8003418 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	3301      	adds	r3, #1
 80033fc:	4a06      	ldr	r2, [pc, #24]	; (8003418 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80033fe:	6013      	str	r3, [r2, #0]
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	bcb0      	pop	{r4, r5, r7}
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	2000034c 	.word	0x2000034c
 8003410:	200004a8 	.word	0x200004a8
 8003414:	20000304 	.word	0x20000304
 8003418:	200004b0 	.word	0x200004b0

0800341c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800341c:	b480      	push	{r7}
 800341e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003420:	b672      	cpsid	i
}
 8003422:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003424:	e7fe      	b.n	8003424 <Error_Handler+0x8>

08003426 <_ZN5Eigen8symbolic10SymbolExprINS_8internal17symbolic_last_tagEEC1Ev>:
{
public:
  /** Alias to the template parameter \c tag */
  typedef tag Tag;

  SymbolExpr() {}
 8003426:	b480      	push	{r7}
 8003428:	b083      	sub	sp, #12
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4618      	mov	r0, r3
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <_ZN5Eigen8internal8FixedIntILi1EEC1Ev>:
template<int N> class FixedInt
{
public:
  static const int value = N;
  EIGEN_CONSTEXPR operator int() const { return value; }
  FixedInt() {}
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4618      	mov	r0, r3
 8003448:	370c      	adds	r7, #12
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr

08003452 <_ZNK5Eigen8internal8FixedIntILi1EEclEv>:
  template<int M>
  FixedInt<N&M> operator&( FixedInt<M>) const { return FixedInt<N&M>(); }

#if EIGEN_HAS_CXX14_VARIABLE_TEMPLATES
  // Needed in C++14 to allow fix<N>():
  FixedInt operator() () const { return *this; }
 8003452:	b480      	push	{r7}
 8003454:	b083      	sub	sp, #12
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
 800345a:	bf00      	nop
 800345c:	4618      	mov	r0, r3
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <_ZNK5Eigen8symbolic8BaseExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEEEplILi1EEENS0_7AddExprIS5_NS0_9ValueExprINS3_8FixedIntIXT_EEEEEEESB_>:
  AddExpr<Derived,ValueExpr<internal::FixedInt<N> > > operator+(internal::FixedInt<N>) const
 8003468:	b5b0      	push	{r4, r5, r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	7039      	strb	r1, [r7, #0]
  { return AddExpr<Derived,ValueExpr<internal::FixedInt<N> > >(derived(), ValueExpr<internal::FixedInt<N> >()); }
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 fdb8 	bl	8003fe8 <_ZNK5Eigen8symbolic8BaseExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEEE7derivedEv>
 8003478:	4604      	mov	r4, r0
 800347a:	f107 030c 	add.w	r3, r7, #12
 800347e:	4618      	mov	r0, r3
 8003480:	f000 fdbd 	bl	8003ffe <_ZN5Eigen8symbolic9ValueExprINS_8internal8FixedIntILi1EEEEC1Ev>
 8003484:	f107 020c 	add.w	r2, r7, #12
 8003488:	f107 0308 	add.w	r3, r7, #8
 800348c:	4621      	mov	r1, r4
 800348e:	4618      	mov	r0, r3
 8003490:	f000 fdc0 	bl	8004014 <_ZN5Eigen8symbolic7AddExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEENS0_9ValueExprINS3_8FixedIntILi1EEEEEEC1ERKS5_RKS9_>
 8003494:	bf00      	nop
 8003496:	4628      	mov	r0, r5
 8003498:	3710      	adds	r7, #16
 800349a:	46bd      	mov	sp, r7
 800349c:	bdb0      	pop	{r4, r5, r7, pc}

0800349e <_ZN5Eigen8internal22ignore_unused_variableIiEEvRKT_>:
#endif

// Suppresses 'unused variable' warnings.
namespace Eigen {
  namespace internal {
    template<typename T> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void ignore_unused_variable(const T&) {}
 800349e:	b480      	push	{r7}
 80034a0:	b083      	sub	sp, #12
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
 80034a6:	bf00      	nop
 80034a8:	370c      	adds	r7, #12
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr

080034b2 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1Ev>:
      * a matrix to 0 is not supported.
      *
      * \sa resize(Index,Index)
      */
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    Matrix() : Base()
 80034b2:	b580      	push	{r7, lr}
 80034b4:	b082      	sub	sp, #8
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4618      	mov	r0, r3
 80034be:	f000 fdc2 	bl	8004046 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
    {
      Base::_check_template_params();
 80034c2:	f000 fdd0 	bl	8004066 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE22_check_template_paramsEv>
      EIGEN_INITIALIZE_COEFFS_IF_THAT_OPTION_IS_ENABLED
    }
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4618      	mov	r0, r3
 80034ca:	3708      	adds	r7, #8
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1Ev>:
    Matrix() : Base()
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4618      	mov	r0, r3
 80034dc:	f000 fdd6 	bl	800408c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
      Base::_check_template_params();
 80034e0:	f000 fde4 	bl	80040ac <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE22_check_template_paramsEv>
    }
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4618      	mov	r0, r3
 80034e8:	3708      	adds	r7, #8
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1Ev>:
    Matrix() : Base()
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b082      	sub	sp, #8
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f000 fdea 	bl	80040d2 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
      Base::_check_template_params();
 80034fe:	f000 fdf8 	bl	80040f2 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv>
    }
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4618      	mov	r0, r3
 8003506:	3708      	adds	r7, #8
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <_ZN5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EEC1Ev>:
    Matrix() : Base()
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4618      	mov	r0, r3
 8003518:	f000 fdfe 	bl	8004118 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>
      Base::_check_template_params();
 800351c:	f000 fe0c 	bl	8004138 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE22_check_template_paramsEv>
    }
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4618      	mov	r0, r3
 8003524:	3708      	adds	r7, #8
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEElsERKf>:
  * \note According the c++ standard, the argument expressions of this comma initializer are evaluated in arbitrary order.
  *
  * \sa CommaInitializer::finished(), class CommaInitializer
  */
template<typename Derived>
EIGEN_DEVICE_FUNC inline CommaInitializer<Derived> DenseBase<Derived>::operator<< (const Scalar& s)
 800352a:	b580      	push	{r7, lr}
 800352c:	b084      	sub	sp, #16
 800352e:	af00      	add	r7, sp, #0
 8003530:	60f8      	str	r0, [r7, #12]
 8003532:	60b9      	str	r1, [r7, #8]
 8003534:	607a      	str	r2, [r7, #4]
{
  return CommaInitializer<Derived>(*static_cast<Derived*>(this), s);
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	68b9      	ldr	r1, [r7, #8]
 800353a:	68f8      	ldr	r0, [r7, #12]
 800353c:	f000 fe04 	bl	8004148 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKf>
}
 8003540:	68f8      	ldr	r0, [r7, #12]
 8003542:	3710      	adds	r7, #16
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>:
  inline ~CommaInitializer()
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
    finished();
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f000 fe39 	bl	80041c8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv>
  }
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4618      	mov	r0, r3
 800355a:	3708      	adds	r7, #8
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>:
  CommaInitializer& operator,(const Scalar& s)
 8003560:	b590      	push	{r4, r7, lr}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
    if (m_col==m_xpr.cols())
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	689c      	ldr	r4, [r3, #8]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4618      	mov	r0, r3
 8003574:	f000 fe5e 	bl	8004234 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8003578:	4603      	mov	r3, r0
 800357a:	429c      	cmp	r4, r3
 800357c:	bf0c      	ite	eq
 800357e:	2301      	moveq	r3, #1
 8003580:	2300      	movne	r3, #0
 8003582:	b2db      	uxtb	r3, r3
 8003584:	2b00      	cmp	r3, #0
 8003586:	d01d      	beq.n	80035c4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0x64>
      m_row+=m_currentBlockRows;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685a      	ldr	r2, [r3, #4]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	441a      	add	r2, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	605a      	str	r2, [r3, #4]
      m_col = 0;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	609a      	str	r2, [r3, #8]
      m_currentBlockRows = 1;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	60da      	str	r2, [r3, #12]
      eigen_assert(m_row<m_xpr.rows()
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685c      	ldr	r4, [r3, #4]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f000 fe4d 	bl	800424a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80035b0:	4603      	mov	r3, r0
 80035b2:	429c      	cmp	r4, r3
 80035b4:	db05      	blt.n	80035c2 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0x62>
 80035b6:	4b1d      	ldr	r3, [pc, #116]	; (800362c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xcc>)
 80035b8:	4a1d      	ldr	r2, [pc, #116]	; (8003630 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xd0>)
 80035ba:	2148      	movs	r1, #72	; 0x48
 80035bc:	481d      	ldr	r0, [pc, #116]	; (8003634 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xd4>)
 80035be:	f019 fd39 	bl	801d034 <__assert_func>
 80035c2:	bf00      	nop
    eigen_assert(m_col<m_xpr.cols()
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	689c      	ldr	r4, [r3, #8]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4618      	mov	r0, r3
 80035ce:	f000 fe31 	bl	8004234 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80035d2:	4603      	mov	r3, r0
 80035d4:	429c      	cmp	r4, r3
 80035d6:	db05      	blt.n	80035e4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0x84>
 80035d8:	4b17      	ldr	r3, [pc, #92]	; (8003638 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xd8>)
 80035da:	4a15      	ldr	r2, [pc, #84]	; (8003630 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xd0>)
 80035dc:	214b      	movs	r1, #75	; 0x4b
 80035de:	4815      	ldr	r0, [pc, #84]	; (8003634 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xd4>)
 80035e0:	f019 fd28 	bl	801d034 <__assert_func>
 80035e4:	bf00      	nop
    eigen_assert(m_currentBlockRows==1);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d005      	beq.n	80035fa <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0x9a>
 80035ee:	4b13      	ldr	r3, [pc, #76]	; (800363c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xdc>)
 80035f0:	4a0f      	ldr	r2, [pc, #60]	; (8003630 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xd0>)
 80035f2:	214d      	movs	r1, #77	; 0x4d
 80035f4:	480f      	ldr	r0, [pc, #60]	; (8003634 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xd4>)
 80035f6:	f019 fd1d 	bl	801d034 <__assert_func>
    m_xpr.coeffRef(m_row, m_col++) = s;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	461c      	mov	r4, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6858      	ldr	r0, [r3, #4]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	1c59      	adds	r1, r3, #1
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	6091      	str	r1, [r2, #8]
 800360e:	461a      	mov	r2, r3
 8003610:	4601      	mov	r1, r0
 8003612:	4620      	mov	r0, r4
 8003614:	f000 fe24 	bl	8004260 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8coeffRefEii>
 8003618:	4602      	mov	r2, r0
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	6013      	str	r3, [r2, #0]
    return *this;
 8003620:	687b      	ldr	r3, [r7, #4]
  }
 8003622:	4618      	mov	r0, r3
 8003624:	370c      	adds	r7, #12
 8003626:	46bd      	mov	sp, r7
 8003628:	bd90      	pop	{r4, r7, pc}
 800362a:	bf00      	nop
 800362c:	0801e0b0 	.word	0x0801e0b0
 8003630:	0801e100 	.word	0x0801e100
 8003634:	0801e1c4 	.word	0x0801e1c4
 8003638:	0801e220 	.word	0x0801e220
 800363c:	0801e278 	.word	0x0801e278

08003640 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEElsERKf>:
EIGEN_DEVICE_FUNC inline CommaInitializer<Derived> DenseBase<Derived>::operator<< (const Scalar& s)
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	607a      	str	r2, [r7, #4]
  return CommaInitializer<Derived>(*static_cast<Derived*>(this), s);
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	68b9      	ldr	r1, [r7, #8]
 8003650:	68f8      	ldr	r0, [r7, #12]
 8003652:	f000 fe1f 	bl	8004294 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKf>
}
 8003656:	68f8      	ldr	r0, [r7, #12]
 8003658:	3710      	adds	r7, #16
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>:
  inline ~CommaInitializer()
 800365e:	b580      	push	{r7, lr}
 8003660:	b082      	sub	sp, #8
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
    finished();
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 fe54 	bl	8004314 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv>
  }
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4618      	mov	r0, r3
 8003670:	3708      	adds	r7, #8
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
	...

08003678 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>:
  CommaInitializer& operator,(const Scalar& s)
 8003678:	b590      	push	{r4, r7, lr}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
    if (m_col==m_xpr.cols())
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	689c      	ldr	r4, [r3, #8]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4618      	mov	r0, r3
 800368c:	f000 fe78 	bl	8004380 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8003690:	4603      	mov	r3, r0
 8003692:	429c      	cmp	r4, r3
 8003694:	bf0c      	ite	eq
 8003696:	2301      	moveq	r3, #1
 8003698:	2300      	movne	r3, #0
 800369a:	b2db      	uxtb	r3, r3
 800369c:	2b00      	cmp	r3, #0
 800369e:	d01d      	beq.n	80036dc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0x64>
      m_row+=m_currentBlockRows;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685a      	ldr	r2, [r3, #4]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	441a      	add	r2, r3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	605a      	str	r2, [r3, #4]
      m_col = 0;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	609a      	str	r2, [r3, #8]
      m_currentBlockRows = 1;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	60da      	str	r2, [r3, #12]
      eigen_assert(m_row<m_xpr.rows()
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685c      	ldr	r4, [r3, #4]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f000 fe67 	bl	8004396 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80036c8:	4603      	mov	r3, r0
 80036ca:	429c      	cmp	r4, r3
 80036cc:	db05      	blt.n	80036da <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0x62>
 80036ce:	4b1d      	ldr	r3, [pc, #116]	; (8003744 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xcc>)
 80036d0:	4a1d      	ldr	r2, [pc, #116]	; (8003748 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xd0>)
 80036d2:	2148      	movs	r1, #72	; 0x48
 80036d4:	481d      	ldr	r0, [pc, #116]	; (800374c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xd4>)
 80036d6:	f019 fcad 	bl	801d034 <__assert_func>
 80036da:	bf00      	nop
    eigen_assert(m_col<m_xpr.cols()
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	689c      	ldr	r4, [r3, #8]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f000 fe4b 	bl	8004380 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80036ea:	4603      	mov	r3, r0
 80036ec:	429c      	cmp	r4, r3
 80036ee:	db05      	blt.n	80036fc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0x84>
 80036f0:	4b17      	ldr	r3, [pc, #92]	; (8003750 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xd8>)
 80036f2:	4a15      	ldr	r2, [pc, #84]	; (8003748 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xd0>)
 80036f4:	214b      	movs	r1, #75	; 0x4b
 80036f6:	4815      	ldr	r0, [pc, #84]	; (800374c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xd4>)
 80036f8:	f019 fc9c 	bl	801d034 <__assert_func>
 80036fc:	bf00      	nop
    eigen_assert(m_currentBlockRows==1);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	2b01      	cmp	r3, #1
 8003704:	d005      	beq.n	8003712 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0x9a>
 8003706:	4b13      	ldr	r3, [pc, #76]	; (8003754 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xdc>)
 8003708:	4a0f      	ldr	r2, [pc, #60]	; (8003748 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xd0>)
 800370a:	214d      	movs	r1, #77	; 0x4d
 800370c:	480f      	ldr	r0, [pc, #60]	; (800374c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xd4>)
 800370e:	f019 fc91 	bl	801d034 <__assert_func>
    m_xpr.coeffRef(m_row, m_col++) = s;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	461c      	mov	r4, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6858      	ldr	r0, [r3, #4]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	1c59      	adds	r1, r3, #1
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	6091      	str	r1, [r2, #8]
 8003726:	461a      	mov	r2, r3
 8003728:	4601      	mov	r1, r0
 800372a:	4620      	mov	r0, r4
 800372c:	f000 fe3e 	bl	80043ac <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8coeffRefEii>
 8003730:	4602      	mov	r2, r0
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	6013      	str	r3, [r2, #0]
    return *this;
 8003738:	687b      	ldr	r3, [r7, #4]
  }
 800373a:	4618      	mov	r0, r3
 800373c:	370c      	adds	r7, #12
 800373e:	46bd      	mov	sp, r7
 8003740:	bd90      	pop	{r4, r7, pc}
 8003742:	bf00      	nop
 8003744:	0801e0b0 	.word	0x0801e0b0
 8003748:	0801e290 	.word	0x0801e290
 800374c:	0801e1c4 	.word	0x0801e1c4
 8003750:	0801e220 	.word	0x0801e220
 8003754:	0801e278 	.word	0x0801e278

08003758 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEElsERKf>:
EIGEN_DEVICE_FUNC inline CommaInitializer<Derived> DenseBase<Derived>::operator<< (const Scalar& s)
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
  return CommaInitializer<Derived>(*static_cast<Derived*>(this), s);
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	68b9      	ldr	r1, [r7, #8]
 8003768:	68f8      	ldr	r0, [r7, #12]
 800376a:	f000 fe39 	bl	80043e0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS2_RKf>
}
 800376e:	68f8      	ldr	r0, [r7, #12]
 8003770:	3710      	adds	r7, #16
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>:
  inline ~CommaInitializer()
 8003776:	b580      	push	{r7, lr}
 8003778:	b082      	sub	sp, #8
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
    finished();
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 fe6e 	bl	8004460 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv>
  }
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4618      	mov	r0, r3
 8003788:	3708      	adds	r7, #8
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}

0800378e <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEElsERKf>:
EIGEN_DEVICE_FUNC inline CommaInitializer<Derived> DenseBase<Derived>::operator<< (const Scalar& s)
 800378e:	b580      	push	{r7, lr}
 8003790:	b084      	sub	sp, #16
 8003792:	af00      	add	r7, sp, #0
 8003794:	60f8      	str	r0, [r7, #12]
 8003796:	60b9      	str	r1, [r7, #8]
 8003798:	607a      	str	r2, [r7, #4]
  return CommaInitializer<Derived>(*static_cast<Derived*>(this), s);
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	68b9      	ldr	r1, [r7, #8]
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	f000 fe94 	bl	80044cc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_RKf>
}
 80037a4:	68f8      	ldr	r0, [r7, #12]
 80037a6:	3710      	adds	r7, #16
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>:
  inline ~CommaInitializer()
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
    finished();
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f000 fec9 	bl	800454c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv>
  }
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4618      	mov	r0, r3
 80037be:	3708      	adds	r7, #8
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf>:
  CommaInitializer& operator,(const Scalar& s)
 80037c4:	b590      	push	{r4, r7, lr}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
    if (m_col==m_xpr.cols())
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	689c      	ldr	r4, [r3, #8]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4618      	mov	r0, r3
 80037d8:	f000 feee 	bl	80045b8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 80037dc:	4603      	mov	r3, r0
 80037de:	429c      	cmp	r4, r3
 80037e0:	bf0c      	ite	eq
 80037e2:	2301      	moveq	r3, #1
 80037e4:	2300      	movne	r3, #0
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d01d      	beq.n	8003828 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0x64>
      m_row+=m_currentBlockRows;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685a      	ldr	r2, [r3, #4]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	441a      	add	r2, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	605a      	str	r2, [r3, #4]
      m_col = 0;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	609a      	str	r2, [r3, #8]
      m_currentBlockRows = 1;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	60da      	str	r2, [r3, #12]
      eigen_assert(m_row<m_xpr.rows()
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685c      	ldr	r4, [r3, #4]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4618      	mov	r0, r3
 8003810:	f000 fedd 	bl	80045ce <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8003814:	4603      	mov	r3, r0
 8003816:	429c      	cmp	r4, r3
 8003818:	db05      	blt.n	8003826 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0x62>
 800381a:	4b1d      	ldr	r3, [pc, #116]	; (8003890 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xcc>)
 800381c:	4a1d      	ldr	r2, [pc, #116]	; (8003894 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xd0>)
 800381e:	2148      	movs	r1, #72	; 0x48
 8003820:	481d      	ldr	r0, [pc, #116]	; (8003898 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xd4>)
 8003822:	f019 fc07 	bl	801d034 <__assert_func>
 8003826:	bf00      	nop
    eigen_assert(m_col<m_xpr.cols()
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	689c      	ldr	r4, [r3, #8]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4618      	mov	r0, r3
 8003832:	f000 fec1 	bl	80045b8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8003836:	4603      	mov	r3, r0
 8003838:	429c      	cmp	r4, r3
 800383a:	db05      	blt.n	8003848 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0x84>
 800383c:	4b17      	ldr	r3, [pc, #92]	; (800389c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xd8>)
 800383e:	4a15      	ldr	r2, [pc, #84]	; (8003894 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xd0>)
 8003840:	214b      	movs	r1, #75	; 0x4b
 8003842:	4815      	ldr	r0, [pc, #84]	; (8003898 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xd4>)
 8003844:	f019 fbf6 	bl	801d034 <__assert_func>
 8003848:	bf00      	nop
    eigen_assert(m_currentBlockRows==1);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	2b01      	cmp	r3, #1
 8003850:	d005      	beq.n	800385e <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0x9a>
 8003852:	4b13      	ldr	r3, [pc, #76]	; (80038a0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xdc>)
 8003854:	4a0f      	ldr	r2, [pc, #60]	; (8003894 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xd0>)
 8003856:	214d      	movs	r1, #77	; 0x4d
 8003858:	480f      	ldr	r0, [pc, #60]	; (8003898 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xd4>)
 800385a:	f019 fbeb 	bl	801d034 <__assert_func>
    m_xpr.coeffRef(m_row, m_col++) = s;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	461c      	mov	r4, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6858      	ldr	r0, [r3, #4]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	1c59      	adds	r1, r3, #1
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	6091      	str	r1, [r2, #8]
 8003872:	461a      	mov	r2, r3
 8003874:	4601      	mov	r1, r0
 8003876:	4620      	mov	r0, r4
 8003878:	f000 feb4 	bl	80045e4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8coeffRefEii>
 800387c:	4602      	mov	r2, r0
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	6013      	str	r3, [r2, #0]
    return *this;
 8003884:	687b      	ldr	r3, [r7, #4]
  }
 8003886:	4618      	mov	r0, r3
 8003888:	370c      	adds	r7, #12
 800388a:	46bd      	mov	sp, r7
 800388c:	bd90      	pop	{r4, r7, pc}
 800388e:	bf00      	nop
 8003890:	0801e0b0 	.word	0x0801e0b0
 8003894:	0801e354 	.word	0x0801e354
 8003898:	0801e1c4 	.word	0x0801e1c4
 800389c:	0801e220 	.word	0x0801e220
 80038a0:	0801e278 	.word	0x0801e278

080038a4 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>:
      * \sa operator[](Index)
      */

    EIGEN_DEVICE_FUNC
    EIGEN_STRONG_INLINE Scalar&
    operator()(Index row, Index col)
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]
    {
      eigen_assert(row >= 0 && row < rows()
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	db10      	blt.n	80038d8 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii+0x34>
 80038b6:	68f8      	ldr	r0, [r7, #12]
 80038b8:	f000 fead 	bl	8004616 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80038bc:	4602      	mov	r2, r0
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	4293      	cmp	r3, r2
 80038c2:	da09      	bge.n	80038d8 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii+0x34>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	db06      	blt.n	80038d8 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii+0x34>
 80038ca:	68f8      	ldr	r0, [r7, #12]
 80038cc:	f000 feb3 	bl	8004636 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80038d0:	4602      	mov	r2, r0
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4293      	cmp	r3, r2
 80038d6:	db06      	blt.n	80038e6 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii+0x42>
 80038d8:	4b08      	ldr	r3, [pc, #32]	; (80038fc <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii+0x58>)
 80038da:	4a09      	ldr	r2, [pc, #36]	; (8003900 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii+0x5c>)
 80038dc:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 80038e0:	4808      	ldr	r0, [pc, #32]	; (8003904 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii+0x60>)
 80038e2:	f019 fba7 	bl	801d034 <__assert_func>
          && col >= 0 && col < cols());
      return coeffRef(row, col);
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	68b9      	ldr	r1, [r7, #8]
 80038ea:	68f8      	ldr	r0, [r7, #12]
 80038ec:	f000 fecc 	bl	8004688 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EE8coeffRefEii>
 80038f0:	4603      	mov	r3, r0
    }
 80038f2:	4618      	mov	r0, r3
 80038f4:	3710      	adds	r7, #16
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	0801e418 	.word	0x0801e418
 8003900:	0801e450 	.word	0x0801e450
 8003904:	0801e53c 	.word	0x0801e53c

08003908 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS7_>:
  * on the behavior of CwiseNullaryOp.
  *
  * \sa class CwiseUnaryOp, class CwiseBinaryOp, DenseBase::NullaryExpr
  */
template<typename NullaryOp, typename PlainObjectType>
class CwiseNullaryOp : public internal::dense_xpr_base< CwiseNullaryOp<NullaryOp, PlainObjectType> >::type, internal::no_assignment_operator
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	1d1a      	adds	r2, r3, #4
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	3304      	adds	r3, #4
 800391a:	4619      	mov	r1, r3
 800391c:	4610      	mov	r0, r2
 800391e:	f000 ffaf 	bl	8004880 <_ZN5Eigen8internal18scalar_constant_opIfEC1ERKS2_>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4618      	mov	r0, r3
 8003926:	3708      	adds	r7, #8
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEmlIfEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNS6_18promote_scalar_argIfT_XsrNS6_14has_ReturnTypeINS_20ScalarBinaryOpTraitsIfS9_NS7_IfS9_EEEEEE5valueEE4typeEEEKS2_KNS6_19plain_constant_typeIS2_SG_E4typeEEERKS9_>:
  return CwiseBinaryOp<CustomBinaryOp, const Derived, const OtherDerived>(derived(), other.derived(), func);
}


#ifndef EIGEN_PARSED_BY_DOXYGEN
EIGEN_MAKE_SCALAR_BINARY_OP(operator*,product)
 800392c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800392e:	b089      	sub	sp, #36	; 0x24
 8003930:	af00      	add	r7, sp, #0
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	60b9      	str	r1, [r7, #8]
 8003936:	607a      	str	r2, [r7, #4]
 8003938:	68b8      	ldr	r0, [r7, #8]
 800393a:	f000 fec8 	bl	80046ce <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800393e:	4604      	mov	r4, r0
 8003940:	68b8      	ldr	r0, [r7, #8]
 8003942:	f000 fec4 	bl	80046ce <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8003946:	4603      	mov	r3, r0
 8003948:	4618      	mov	r0, r3
 800394a:	f000 fd24 	bl	8004396 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800394e:	4605      	mov	r5, r0
 8003950:	68b8      	ldr	r0, [r7, #8]
 8003952:	f000 febc 	bl	80046ce <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8003956:	4603      	mov	r3, r0
 8003958:	4618      	mov	r0, r3
 800395a:	f000 fd11 	bl	8004380 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800395e:	4606      	mov	r6, r0
 8003960:	f107 0318 	add.w	r3, r7, #24
 8003964:	6879      	ldr	r1, [r7, #4]
 8003966:	4618      	mov	r0, r3
 8003968:	f000 febc 	bl	80046e4 <_ZN5Eigen8internal18scalar_constant_opIfEC1ERKf>
 800396c:	f107 0318 	add.w	r3, r7, #24
 8003970:	f107 0010 	add.w	r0, r7, #16
 8003974:	4632      	mov	r2, r6
 8003976:	4629      	mov	r1, r5
 8003978:	f000 fed0 	bl	800471c <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_>
 800397c:	f107 031c 	add.w	r3, r7, #28
 8003980:	4618      	mov	r0, r3
 8003982:	f000 ff03 	bl	800478c <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 8003986:	f107 031c 	add.w	r3, r7, #28
 800398a:	f107 0210 	add.w	r2, r7, #16
 800398e:	4621      	mov	r1, r4
 8003990:	68f8      	ldr	r0, [r7, #12]
 8003992:	f000 ff35 	bl	8004800 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERS6_RSB_RKS3_>
 8003996:	68f8      	ldr	r0, [r7, #12]
 8003998:	3724      	adds	r7, #36	; 0x24
 800399a:	46bd      	mov	sp, r7
 800399c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800399e <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE9transposeEv>:
  *
  * \sa transposeInPlace(), adjoint() */
template<typename Derived>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
Transpose<Derived>
DenseBase<Derived>::transpose()
 800399e:	b580      	push	{r7, lr}
 80039a0:	b084      	sub	sp, #16
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
{
  return TransposeReturnType(derived());
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 ff86 	bl	80048b8 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80039ac:	4602      	mov	r2, r0
 80039ae:	f107 030c 	add.w	r3, r7, #12
 80039b2:	4611      	mov	r1, r2
 80039b4:	4618      	mov	r0, r3
 80039b6:	f000 ffa2 	bl	80048fe <_ZN5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_>
 80039ba:	68fb      	ldr	r3, [r7, #12]
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3710      	adds	r7, #16
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERKSC_>:
  * CwiseBinaryOp types explicitly.
  *
  * \sa MatrixBase::binaryExpr(const MatrixBase<OtherDerived> &,const CustomBinaryOp &) const, class CwiseUnaryOp, class CwiseNullaryOp
  */
template<typename BinaryOp, typename LhsType, typename RhsType>
class CwiseBinaryOp :
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	601a      	str	r2, [r3, #0]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	1d1a      	adds	r2, r3, #4
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	3304      	adds	r3, #4
 80039de:	4619      	mov	r1, r3
 80039e0:	4610      	mov	r0, r2
 80039e2:	f7ff ff91 	bl	8003908 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS7_>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f103 020c 	add.w	r2, r3, #12
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	330c      	adds	r3, #12
 80039f0:	4619      	mov	r1, r3
 80039f2:	4610      	mov	r0, r2
 80039f4:	f000 ff54 	bl	80048a0 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4618      	mov	r0, r3
 80039fc:	3708      	adds	r7, #8
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEEmlINS_9TransposeIS6_EEEEKNS_7ProductISD_T_Li0EEERKNS0_ISJ_EE>:
  */
template<typename Derived>
template<typename OtherDerived>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
const Product<Derived, OtherDerived>
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8003a02:	b590      	push	{r4, r7, lr}
 8003a04:	b085      	sub	sp, #20
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	60f8      	str	r0, [r7, #12]
 8003a0a:	60b9      	str	r1, [r7, #8]
 8003a0c:	607a      	str	r2, [r7, #4]
  EIGEN_STATIC_ASSERT(ProductIsValid || SameSizes, INVALID_MATRIX_PRODUCT)
#ifdef EIGEN_DEBUG_PRODUCT
  internal::product_type<Derived,OtherDerived>::debug();
#endif

  return Product<Derived, OtherDerived>(derived(), other.derived());
 8003a0e:	68b8      	ldr	r0, [r7, #8]
 8003a10:	f000 ff85 	bl	800491e <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE7derivedEv>
 8003a14:	4604      	mov	r4, r0
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 ff8c 	bl	8004934 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	461a      	mov	r2, r3
 8003a20:	4621      	mov	r1, r4
 8003a22:	68f8      	ldr	r0, [r7, #12]
 8003a24:	f000 ffd2 	bl	80049cc <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EEC1ERKSD_RKSF_>
}
 8003a28:	68f8      	ldr	r0, [r7, #12]
 8003a2a:	3714      	adds	r7, #20
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd90      	pop	{r4, r7, pc}

08003a30 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEaSINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS0_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS5_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEEEERS1_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Matrix& operator=(const DenseBase<OtherDerived>& other)
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
      return Base::_set(other);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6839      	ldr	r1, [r7, #0]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f000 fff4 	bl	8004a2c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4_setINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS1_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS7_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi0EEEEERS2_RKNS_9DenseBaseIT_EE>
 8003a44:	4603      	mov	r3, r0
    }
 8003a46:	4618      	mov	r0, r3
 8003a48:	3708      	adds	r7, #8
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmlINS1_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8003a4e:	b590      	push	{r4, r7, lr}
 8003a50:	b085      	sub	sp, #20
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	60f8      	str	r0, [r7, #12]
 8003a56:	60b9      	str	r1, [r7, #8]
 8003a58:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8003a5a:	68b8      	ldr	r0, [r7, #8]
 8003a5c:	f000 ffff 	bl	8004a5e <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8003a60:	4604      	mov	r4, r0
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 fe33 	bl	80046ce <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	4621      	mov	r1, r4
 8003a6e:	68f8      	ldr	r0, [r7, #12]
 8003a70:	f001 f824 	bl	8004abc <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_>
}
 8003a74:	68f8      	ldr	r0, [r7, #12]
 8003a76:	3714      	adds	r7, #20
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd90      	pop	{r4, r7, pc}

08003a7c <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEaSINS_7ProductINS0_IfLi3ELi3ELi0ELi3ELi3EEES1_Li0EEEEERS1_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Matrix& operator=(const DenseBase<OtherDerived>& other)
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
      return Base::_set(other);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6839      	ldr	r1, [r7, #0]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f001 f844 	bl	8004b18 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4_setINS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>
 8003a90:	4603      	mov	r3, r0
    }
 8003a92:	4618      	mov	r0, r3
 8003a94:	3708      	adds	r7, #8
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmlIS2_EEKNS_7ProductIS2_T_Li0EEERKNS0_IS6_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8003a9a:	b590      	push	{r4, r7, lr}
 8003a9c:	b085      	sub	sp, #20
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	60f8      	str	r0, [r7, #12]
 8003aa2:	60b9      	str	r1, [r7, #8]
 8003aa4:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8003aa6:	68b8      	ldr	r0, [r7, #8]
 8003aa8:	f000 ffd9 	bl	8004a5e <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8003aac:	4604      	mov	r4, r0
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 ffd5 	bl	8004a5e <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	4621      	mov	r1, r4
 8003aba:	68f8      	ldr	r0, [r7, #12]
 8003abc:	f001 f86a 	bl	8004b94 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEC1ERKS2_S5_>
}
 8003ac0:	68f8      	ldr	r0, [r7, #12]
 8003ac2:	3714      	adds	r7, #20
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd90      	pop	{r4, r7, pc}

08003ac8 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE9transposeEv>:
DenseBase<Derived>::transpose()
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  return TransposeReturnType(derived());
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f001 f88d 	bl	8004bf0 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	f107 030c 	add.w	r3, r7, #12
 8003adc:	4611      	mov	r1, r2
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f001 f8a9 	bl	8004c36 <_ZN5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_>
 8003ae4:	68fb      	ldr	r3, [r7, #12]
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEmlINS_9TransposeIS3_EEEEKNS1_IS4_T_Li0EEERKNS0_IS9_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8003aee:	b590      	push	{r4, r7, lr}
 8003af0:	b085      	sub	sp, #20
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	60f8      	str	r0, [r7, #12]
 8003af6:	60b9      	str	r1, [r7, #8]
 8003af8:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8003afa:	68b8      	ldr	r0, [r7, #8]
 8003afc:	f001 f8ab 	bl	8004c56 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEE7derivedEv>
 8003b00:	4604      	mov	r4, r0
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f001 f8b2 	bl	8004c6c <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	4621      	mov	r1, r4
 8003b0e:	68f8      	ldr	r0, [r7, #12]
 8003b10:	f001 f8f8 	bl	8004d04 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EEC1ERKS3_RKS5_>
}
 8003b14:	68f8      	ldr	r0, [r7, #12]
 8003b16:	3714      	adds	r7, #20
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd90      	pop	{r4, r7, pc}

08003b1c <_ZNK5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEEplIS3_EEKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIfNSB_6traitsIT_E6ScalarEEEKS7_KSE_EERKNS0_ISE_EE>:
EIGEN_MAKE_CWISE_BINARY_OP(operator+,sum)
 8003b1c:	b5b0      	push	{r4, r5, r7, lr}
 8003b1e:	b086      	sub	sp, #24
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	607a      	str	r2, [r7, #4]
 8003b28:	68b8      	ldr	r0, [r7, #8]
 8003b2a:	f001 f91b 	bl	8004d64 <_ZNK5Eigen9EigenBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEE7derivedEv>
 8003b2e:	4604      	mov	r4, r0
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f000 ff94 	bl	8004a5e <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8003b36:	4605      	mov	r5, r0
 8003b38:	f107 0314 	add.w	r3, r7, #20
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f001 f91c 	bl	8004d7a <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 8003b42:	f107 0314 	add.w	r3, r7, #20
 8003b46:	462a      	mov	r2, r5
 8003b48:	4621      	mov	r1, r4
 8003b4a:	68f8      	ldr	r0, [r7, #12]
 8003b4c:	f001 f954 	bl	8004df8 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_EC1ERSB_RSC_RKS3_>
 8003b50:	68f8      	ldr	r0, [r7, #12]
 8003b52:	3718      	adds	r7, #24
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bdb0      	pop	{r4, r5, r7, pc}

08003b58 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEaSINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS7_IS1_S1_Li0EEENS_9TransposeIS1_EELi0EEEKS1_EEEERS1_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Matrix& operator=(const DenseBase<OtherDerived>& other)
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
      return Base::_set(other);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6839      	ldr	r1, [r7, #0]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f001 f992 	bl	8004e90 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4_setINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS9_IS2_S2_Li0EEENS_9TransposeIS2_EELi0EEEKS2_EEEERS2_RKNS_9DenseBaseIT_EE>
 8003b6c:	4603      	mov	r3, r0
    }
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3708      	adds	r7, #8
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE9transposeEv>:
DenseBase<Derived>::transpose()
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b084      	sub	sp, #16
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
  return TransposeReturnType(derived());
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f001 f99f 	bl	8004ec2 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 8003b84:	4602      	mov	r2, r0
 8003b86:	f107 030c 	add.w	r3, r7, #12
 8003b8a:	4611      	mov	r1, r2
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f001 f9bb 	bl	8004f08 <_ZN5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_>
 8003b92:	68fb      	ldr	r3, [r7, #12]
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3710      	adds	r7, #16
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmlINS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS9_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8003b9c:	b590      	push	{r4, r7, lr}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8003ba8:	68b8      	ldr	r0, [r7, #8]
 8003baa:	f000 ff58 	bl	8004a5e <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8003bae:	4604      	mov	r4, r0
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f001 f9b9 	bl	8004f28 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	461a      	mov	r2, r3
 8003bba:	4621      	mov	r1, r4
 8003bbc:	68f8      	ldr	r0, [r7, #12]
 8003bbe:	f001 f9f1 	bl	8004fa4 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEC1ERKS2_RKS5_>
}
 8003bc2:	68f8      	ldr	r0, [r7, #12]
 8003bc4:	3714      	adds	r7, #20
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd90      	pop	{r4, r7, pc}

08003bca <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEmlINS1_IfLi3ELi3ELi0ELi3ELi3EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8003bca:	b590      	push	{r4, r7, lr}
 8003bcc:	b085      	sub	sp, #20
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	60f8      	str	r0, [r7, #12]
 8003bd2:	60b9      	str	r1, [r7, #8]
 8003bd4:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8003bd6:	68b8      	ldr	r0, [r7, #8]
 8003bd8:	f001 fa12 	bl	8005000 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 8003bdc:	4604      	mov	r4, r0
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 ff3d 	bl	8004a5e <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8003be4:	4603      	mov	r3, r0
 8003be6:	461a      	mov	r2, r3
 8003be8:	4621      	mov	r1, r4
 8003bea:	68f8      	ldr	r0, [r7, #12]
 8003bec:	f001 fa38 	bl	8005060 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEC1ERKS2_RKS3_>
}
 8003bf0:	68f8      	ldr	r0, [r7, #12]
 8003bf2:	3714      	adds	r7, #20
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd90      	pop	{r4, r7, pc}

08003bf8 <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEmlINS_9TransposeIS3_EEEEKNS1_IS5_T_Li0EEERKNS0_ISA_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8003bf8:	b590      	push	{r4, r7, lr}
 8003bfa:	b085      	sub	sp, #20
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8003c04:	68b8      	ldr	r0, [r7, #8]
 8003c06:	f001 fa59 	bl	80050bc <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE7derivedEv>
 8003c0a:	4604      	mov	r4, r0
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f001 f98b 	bl	8004f28 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 8003c12:	4603      	mov	r3, r0
 8003c14:	461a      	mov	r2, r3
 8003c16:	4621      	mov	r1, r4
 8003c18:	68f8      	ldr	r0, [r7, #12]
 8003c1a:	f001 fa8d 	bl	8005138 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EEC1ERKS4_RKS6_>
}
 8003c1e:	68f8      	ldr	r0, [r7, #12]
 8003c20:	3714      	adds	r7, #20
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd90      	pop	{r4, r7, pc}

08003c26 <_ZNK5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEEplINS2_IfLi1ELi1ELi0ELi1ELi1EEEEEKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIfNSD_6traitsIT_E6ScalarEEEKS8_KSG_EERKNS0_ISG_EE>:
 8003c26:	b5b0      	push	{r4, r5, r7, lr}
 8003c28:	b086      	sub	sp, #24
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	60f8      	str	r0, [r7, #12]
 8003c2e:	60b9      	str	r1, [r7, #8]
 8003c30:	607a      	str	r2, [r7, #4]
 8003c32:	68b8      	ldr	r0, [r7, #8]
 8003c34:	f001 fab0 	bl	8005198 <_ZNK5Eigen9EigenBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEE7derivedEv>
 8003c38:	4604      	mov	r4, r0
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f001 fab7 	bl	80051ae <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 8003c40:	4605      	mov	r5, r0
 8003c42:	f107 0314 	add.w	r3, r7, #20
 8003c46:	4618      	mov	r0, r3
 8003c48:	f001 f897 	bl	8004d7a <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 8003c4c:	f107 0314 	add.w	r3, r7, #20
 8003c50:	462a      	mov	r2, r5
 8003c52:	4621      	mov	r1, r4
 8003c54:	68f8      	ldr	r0, [r7, #12]
 8003c56:	f001 faff 	bl	8005258 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERSC_RSE_RKS3_>
 8003c5a:	68f8      	ldr	r0, [r7, #12]
 8003c5c:	3718      	adds	r7, #24
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bdb0      	pop	{r4, r5, r7, pc}

08003c62 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4rowsEv>:
  inline const Derived& const_derived() const
  { return *static_cast<const Derived*>(this); }

  /** \returns the number of rows. \sa cols(), RowsAtCompileTime */
  EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 8003c62:	b580      	push	{r7, lr}
 8003c64:	b082      	sub	sp, #8
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f001 fb34 	bl	80052d8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7derivedEv>
 8003c70:	4603      	mov	r3, r0
 8003c72:	4618      	mov	r0, r3
 8003c74:	f001 fb3b 	bl	80052ee <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3708      	adds	r7, #8
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}

08003c82 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4colsEv>:
  /** \returns the number of columns. \sa rows(), ColsAtCompileTime*/
  EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 8003c82:	b580      	push	{r7, lr}
 8003c84:	b082      	sub	sp, #8
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f001 fb24 	bl	80052d8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7derivedEv>
 8003c90:	4603      	mov	r3, r0
 8003c92:	4618      	mov	r0, r3
 8003c94:	f001 fb38 	bl	8005308 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3708      	adds	r7, #8
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}

08003ca2 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERKSF_>:
 8003ca2:	b580      	push	{r7, lr}
 8003ca4:	b082      	sub	sp, #8
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
 8003caa:	6039      	str	r1, [r7, #0]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	683a      	ldr	r2, [r7, #0]
 8003cb0:	ca07      	ldmia	r2, {r0, r1, r2}
 8003cb2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	68da      	ldr	r2, [r3, #12]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	60da      	str	r2, [r3, #12]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f103 0210 	add.w	r2, r3, #16
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	3310      	adds	r3, #16
 8003cc8:	4619      	mov	r1, r3
 8003cca:	4610      	mov	r0, r2
 8003ccc:	f001 f8d4 	bl	8004e78 <_ZN5Eigen8internal13scalar_sum_opIffEC1ERKS2_>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3708      	adds	r7, #8
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
	...

08003cdc <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7inverseEv>:
  *
  * \sa computeInverseAndDetWithCheck()
  */
template<typename Derived>
EIGEN_DEVICE_FUNC
inline const Inverse<Derived> MatrixBase<Derived>::inverse() const
 8003cdc:	b590      	push	{r4, r7, lr}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
{
  EIGEN_STATIC_ASSERT(!NumTraits<Scalar>::IsInteger,THIS_FUNCTION_IS_NOT_FOR_INTEGER_NUMERIC_TYPES)
  eigen_assert(rows() == cols());
 8003ce6:	6838      	ldr	r0, [r7, #0]
 8003ce8:	f7ff ffbb 	bl	8003c62 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4rowsEv>
 8003cec:	4604      	mov	r4, r0
 8003cee:	6838      	ldr	r0, [r7, #0]
 8003cf0:	f7ff ffc7 	bl	8003c82 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4colsEv>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	429c      	cmp	r4, r3
 8003cf8:	d006      	beq.n	8003d08 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7inverseEv+0x2c>
 8003cfa:	4b09      	ldr	r3, [pc, #36]	; (8003d20 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7inverseEv+0x44>)
 8003cfc:	4a09      	ldr	r2, [pc, #36]	; (8003d24 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7inverseEv+0x48>)
 8003cfe:	f240 115f 	movw	r1, #351	; 0x15f
 8003d02:	4809      	ldr	r0, [pc, #36]	; (8003d28 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7inverseEv+0x4c>)
 8003d04:	f019 f996 	bl	801d034 <__assert_func>
  return Inverse<Derived>(derived());
 8003d08:	6838      	ldr	r0, [r7, #0]
 8003d0a:	f001 fae5 	bl	80052d8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7derivedEv>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	4619      	mov	r1, r3
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f001 fb1d 	bl	8005352 <_ZN5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKSG_>
}
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd90      	pop	{r4, r7, pc}
 8003d20:	0801e598 	.word	0x0801e598
 8003d24:	0801e5ac 	.word	0x0801e5ac
 8003d28:	0801e700 	.word	0x0801e700

08003d2c <_ZN5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKSH_>:
  * This class represents an abstract expression of A.inverse()
  * and most of the time this is the only way it is used.
  *
  */
template<typename XprType>
class Inverse : public InverseImpl<XprType,typename internal::traits<XprType>::StorageKind>
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	683a      	ldr	r2, [r7, #0]
 8003d3a:	4611      	mov	r1, r2
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f7ff ffb0 	bl	8003ca2 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERKSF_>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4618      	mov	r0, r3
 8003d46:	3708      	adds	r7, #8
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEmlINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEEKNS1_IS7_T_Li0EEERKNS0_ISM_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8003d4c:	b590      	push	{r4, r7, lr}
 8003d4e:	b085      	sub	sp, #20
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8003d58:	68b8      	ldr	r0, [r7, #8]
 8003d5a:	f001 fb0c 	bl	8005376 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEE7derivedEv>
 8003d5e:	4604      	mov	r4, r0
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f001 fb13 	bl	800538c <_ZNK5Eigen9EigenBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEE7derivedEv>
 8003d66:	4603      	mov	r3, r0
 8003d68:	461a      	mov	r2, r3
 8003d6a:	4621      	mov	r1, r4
 8003d6c:	68f8      	ldr	r0, [r7, #12]
 8003d6e:	f001 fb57 	bl	8005420 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEC1ERKS6_RKSI_>
}
 8003d72:	68f8      	ldr	r0, [r7, #12]
 8003d74:	3714      	adds	r7, #20
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd90      	pop	{r4, r7, pc}

08003d7a <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEaSINS_7ProductINS3_INS0_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS0_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS3_INS3_IS6_S4_Li0EEES7_Li0EEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERS1_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Matrix& operator=(const DenseBase<OtherDerived>& other)
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	b082      	sub	sp, #8
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
 8003d82:	6039      	str	r1, [r7, #0]
      return Base::_set(other);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6839      	ldr	r1, [r7, #0]
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f001 fb7b 	bl	8005484 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4_setINS_7ProductINS5_INS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS5_INS5_IS8_S6_Li0EEES9_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERS2_RKNS_9DenseBaseIT_EE>
 8003d8e:	4603      	mov	r3, r0
    }
 8003d90:	4618      	mov	r0, r3
 8003d92:	3708      	adds	r7, #8
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEmlINS1_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8003d98:	b590      	push	{r4, r7, lr}
 8003d9a:	b085      	sub	sp, #20
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8003da4:	68b8      	ldr	r0, [r7, #8]
 8003da6:	f001 f92b 	bl	8005000 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 8003daa:	4604      	mov	r4, r0
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f000 fc8e 	bl	80046ce <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8003db2:	4603      	mov	r3, r0
 8003db4:	461a      	mov	r2, r3
 8003db6:	4621      	mov	r1, r4
 8003db8:	68f8      	ldr	r0, [r7, #12]
 8003dba:	f001 fba1 	bl	8005500 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_>
}
 8003dbe:	68f8      	ldr	r0, [r7, #12]
 8003dc0:	3714      	adds	r7, #20
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd90      	pop	{r4, r7, pc}

08003dc6 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEmiINS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEKNS_13CwiseBinaryOpINS_8internal20scalar_difference_opIfNSA_6traitsIT_E6ScalarEEEKS2_KSD_EERKNS0_ISD_EE>:
EIGEN_MAKE_CWISE_BINARY_OP(operator-,difference)
 8003dc6:	b5b0      	push	{r4, r5, r7, lr}
 8003dc8:	b086      	sub	sp, #24
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	60f8      	str	r0, [r7, #12]
 8003dce:	60b9      	str	r1, [r7, #8]
 8003dd0:	607a      	str	r2, [r7, #4]
 8003dd2:	68b8      	ldr	r0, [r7, #8]
 8003dd4:	f001 f9eb 	bl	80051ae <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 8003dd8:	4604      	mov	r4, r0
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f001 fbbe 	bl	800555c <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE7derivedEv>
 8003de0:	4605      	mov	r5, r0
 8003de2:	f107 0314 	add.w	r3, r7, #20
 8003de6:	4618      	mov	r0, r3
 8003de8:	f001 fbc3 	bl	8005572 <_ZN5Eigen8internal20scalar_difference_opIffEC1Ev>
 8003dec:	f107 0314 	add.w	r3, r7, #20
 8003df0:	462a      	mov	r2, r5
 8003df2:	4621      	mov	r1, r4
 8003df4:	68f8      	ldr	r0, [r7, #12]
 8003df6:	f001 fbfb 	bl	80055f0 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERS6_RSB_RKS3_>
 8003dfa:	68f8      	ldr	r0, [r7, #12]
 8003dfc:	3718      	adds	r7, #24
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bdb0      	pop	{r4, r5, r7, pc}

08003e02 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERKSC_>:
 8003e02:	b580      	push	{r7, lr}
 8003e04:	b082      	sub	sp, #8
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
 8003e0a:	6039      	str	r1, [r7, #0]
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	601a      	str	r2, [r3, #0]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	1d1a      	adds	r2, r3, #4
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	3304      	adds	r3, #4
 8003e1c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003e20:	e882 0003 	stmia.w	r2, {r0, r1}
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f103 020c 	add.w	r2, r3, #12
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	330c      	adds	r3, #12
 8003e2e:	4619      	mov	r1, r3
 8003e30:	4610      	mov	r0, r2
 8003e32:	f001 fc1f 	bl	8005674 <_ZN5Eigen8internal20scalar_difference_opIffEC1ERKS2_>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3708      	adds	r7, #8
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEmlINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEEEEKNSB_IS2_T_Li0EEERKNS0_ISG_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8003e40:	b590      	push	{r4, r7, lr}
 8003e42:	b085      	sub	sp, #20
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8003e4c:	68b8      	ldr	r0, [r7, #8]
 8003e4e:	f000 fc3e 	bl	80046ce <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8003e52:	4604      	mov	r4, r0
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f001 fc19 	bl	800568c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEE7derivedEv>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	4621      	mov	r1, r4
 8003e60:	68f8      	ldr	r0, [r7, #12]
 8003e62:	f001 fc51 	bl	8005708 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKS2_RKSC_>
}
 8003e66:	68f8      	ldr	r0, [r7, #12]
 8003e68:	3714      	adds	r7, #20
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd90      	pop	{r4, r7, pc}

08003e6e <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKSD_>:
  * The other template parameters are:
  * \tparam Option     can be DefaultProduct, AliasFreeProduct, or LazyProduct
  *
  */
template<typename _Lhs, typename _Rhs, int Option>
class Product : public ProductImpl<_Lhs,_Rhs,Option,
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	b082      	sub	sp, #8
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
 8003e76:	6039      	str	r1, [r7, #0]
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	601a      	str	r2, [r3, #0]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	1d1a      	adds	r2, r3, #4
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	3304      	adds	r3, #4
 8003e88:	4619      	mov	r1, r3
 8003e8a:	4610      	mov	r0, r2
 8003e8c:	f7ff ffb9 	bl	8003e02 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERKSC_>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4618      	mov	r0, r3
 8003e94:	3708      	adds	r7, #8
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEplINS_7ProductIS2_NS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS5_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEEKNS6_INS7_13scalar_sum_opIfNS7_6traitsIT_E6ScalarEEEKS2_KSJ_EERKNS0_ISJ_EE>:
EIGEN_MAKE_CWISE_BINARY_OP(operator+,sum)
 8003e9a:	b5b0      	push	{r4, r5, r7, lr}
 8003e9c:	b086      	sub	sp, #24
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	60f8      	str	r0, [r7, #12]
 8003ea2:	60b9      	str	r1, [r7, #8]
 8003ea4:	607a      	str	r2, [r7, #4]
 8003ea6:	68b8      	ldr	r0, [r7, #8]
 8003ea8:	f000 fc11 	bl	80046ce <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8003eac:	4604      	mov	r4, r0
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f001 fc5a 	bl	8005768 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEE7derivedEv>
 8003eb4:	4605      	mov	r5, r0
 8003eb6:	f107 0314 	add.w	r3, r7, #20
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f000 ff5d 	bl	8004d7a <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 8003ec0:	f107 0314 	add.w	r3, r7, #20
 8003ec4:	462a      	mov	r2, r5
 8003ec6:	4621      	mov	r1, r4
 8003ec8:	68f8      	ldr	r0, [r7, #12]
 8003eca:	f001 fc8d 	bl	80057e8 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEEC1ERS6_RSH_RKS3_>
 8003ece:	68f8      	ldr	r0, [r7, #12]
 8003ed0:	3718      	adds	r7, #24
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bdb0      	pop	{r4, r5, r7, pc}

08003ed6 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEaSINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS1_KNS_7ProductIS1_NS3_INS4_20scalar_difference_opIffEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS0_IfLi1ELi3ELi1ELi1ELi3EEES1_Li0EEEEELi0EEEEEEERS1_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Matrix& operator=(const DenseBase<OtherDerived>& other)
 8003ed6:	b580      	push	{r7, lr}
 8003ed8:	b082      	sub	sp, #8
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
 8003ede:	6039      	str	r1, [r7, #0]
      return Base::_set(other);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6839      	ldr	r1, [r7, #0]
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f001 fcbf 	bl	8005868 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4_setINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS2_KNS_7ProductIS2_NS5_INS6_20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>
 8003eea:	4603      	mov	r3, r0
    }
 8003eec:	4618      	mov	r0, r3
 8003eee:	3708      	adds	r7, #8
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEmlINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8003ef4:	b590      	push	{r4, r7, lr}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8003f00:	68b8      	ldr	r0, [r7, #8]
 8003f02:	f000 fbe4 	bl	80046ce <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8003f06:	4604      	mov	r4, r0
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f001 f879 	bl	8005000 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	461a      	mov	r2, r3
 8003f12:	4621      	mov	r1, r4
 8003f14:	68f8      	ldr	r0, [r7, #12]
 8003f16:	f001 fce5 	bl	80058e4 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEC1ERKS2_RKS3_>
}
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	3714      	adds	r7, #20
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd90      	pop	{r4, r7, pc}

08003f22 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmiINS_7ProductINS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEKNS_13CwiseBinaryOpINS_8internal20scalar_difference_opIfNSA_6traitsIT_E6ScalarEEEKS2_KSD_EERKNS0_ISD_EE>:
EIGEN_MAKE_CWISE_BINARY_OP(operator-,difference)
 8003f22:	b5b0      	push	{r4, r5, r7, lr}
 8003f24:	b086      	sub	sp, #24
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	60f8      	str	r0, [r7, #12]
 8003f2a:	60b9      	str	r1, [r7, #8]
 8003f2c:	607a      	str	r2, [r7, #4]
 8003f2e:	68b8      	ldr	r0, [r7, #8]
 8003f30:	f000 fd95 	bl	8004a5e <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8003f34:	4604      	mov	r4, r0
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f001 fd02 	bl	8005940 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE7derivedEv>
 8003f3c:	4605      	mov	r5, r0
 8003f3e:	f107 0314 	add.w	r3, r7, #20
 8003f42:	4618      	mov	r0, r3
 8003f44:	f001 fb15 	bl	8005572 <_ZN5Eigen8internal20scalar_difference_opIffEC1Ev>
 8003f48:	f107 0314 	add.w	r3, r7, #20
 8003f4c:	462a      	mov	r2, r5
 8003f4e:	4621      	mov	r1, r4
 8003f50:	68f8      	ldr	r0, [r7, #12]
 8003f52:	f001 fd35 	bl	80059c0 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERS6_RSB_RKS3_>
 8003f56:	68f8      	ldr	r0, [r7, #12]
 8003f58:	3718      	adds	r7, #24
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bdb0      	pop	{r4, r5, r7, pc}

08003f5e <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERKSC_>:
 8003f5e:	b580      	push	{r7, lr}
 8003f60:	b082      	sub	sp, #8
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	6078      	str	r0, [r7, #4]
 8003f66:	6039      	str	r1, [r7, #0]
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	601a      	str	r2, [r3, #0]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	1d1a      	adds	r2, r3, #4
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	3304      	adds	r3, #4
 8003f78:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003f7c:	e882 0003 	stmia.w	r2, {r0, r1}
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f103 020c 	add.w	r2, r3, #12
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	330c      	adds	r3, #12
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	4610      	mov	r0, r2
 8003f8e:	f001 fb71 	bl	8005674 <_ZN5Eigen8internal20scalar_difference_opIffEC1ERKS2_>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4618      	mov	r0, r3
 8003f96:	3708      	adds	r7, #8
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEmlIS6_EEKNS8_ISD_T_Li0EEERKNS0_ISG_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8003f9c:	b590      	push	{r4, r7, lr}
 8003f9e:	b085      	sub	sp, #20
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8003fa8:	68b8      	ldr	r0, [r7, #8]
 8003faa:	f001 fd4b 	bl	8005a44 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEE7derivedEv>
 8003fae:	4604      	mov	r4, r0
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f000 fd54 	bl	8004a5e <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	461a      	mov	r2, r3
 8003fba:	4621      	mov	r1, r4
 8003fbc:	68f8      	ldr	r0, [r7, #12]
 8003fbe:	f001 fd7f 	bl	8005ac0 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EEC1ERKSC_RS7_>
}
 8003fc2:	68f8      	ldr	r0, [r7, #12]
 8003fc4:	3714      	adds	r7, #20
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd90      	pop	{r4, r7, pc}

08003fca <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEaSINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS3_INS0_IfLi3ELi1ELi0ELi3ELi1EEENS0_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES1_Li0EEEEERS1_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Matrix& operator=(const DenseBase<OtherDerived>& other)
 8003fca:	b580      	push	{r7, lr}
 8003fcc:	b082      	sub	sp, #8
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
 8003fd2:	6039      	str	r1, [r7, #0]
      return Base::_set(other);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6839      	ldr	r1, [r7, #0]
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f001 fd9f 	bl	8005b1c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4_setINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS5_INS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>
 8003fde:	4603      	mov	r3, r0
    }
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3708      	adds	r7, #8
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <_ZNK5Eigen8symbolic8BaseExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	370c      	adds	r7, #12
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr

08003ffe <_ZN5Eigen8symbolic9ValueExprINS_8internal8FixedIntILi1EEEEC1Ev>:
  ValueExpr() {}
 8003ffe:	b480      	push	{r7}
 8004000:	b083      	sub	sp, #12
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4618      	mov	r0, r3
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <_ZN5Eigen8symbolic7AddExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEENS0_9ValueExprINS3_8FixedIntILi1EEEEEEC1ERKS5_RKS9_>:

template<typename Arg0, typename Arg1>
class AddExpr : public BaseExpr<AddExpr<Arg0,Arg1> >
{
public:
  AddExpr(const Arg0& arg0, const Arg1& arg1) : m_arg0(arg0), m_arg1(arg1) {}
 8004014:	b480      	push	{r7}
 8004016:	b085      	sub	sp, #20
 8004018:	af00      	add	r7, sp, #0
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	607a      	str	r2, [r7, #4]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	4618      	mov	r0, r3
 8004024:	3714      	adds	r7, #20
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr

0800402e <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>:
    EIGEN_MATRIX_FUNCTION_1(MatrixPowerReturnValue,        pow, power to \c p, const RealScalar& p)
    EIGEN_MATRIX_FUNCTION_1(MatrixComplexPowerReturnValue, pow, power to \c p, const std::complex<RealScalar>& p)

  protected:
    EIGEN_DEFAULT_COPY_CONSTRUCTOR(MatrixBase)
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(MatrixBase)
 800402e:	b580      	push	{r7, lr}
 8004030:	b082      	sub	sp, #8
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f001 fd89 	bl	8005b4e <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	4618      	mov	r0, r3
 8004040:	3708      	adds	r7, #8
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}

08004046 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>:
    // Prevent user from trying to instantiate PlainObjectBase objects
    // by making all its constructor protected. See bug 1074.
  protected:

    EIGEN_DEVICE_FUNC
    EIGEN_STRONG_INLINE PlainObjectBase() : m_storage()
 8004046:	b580      	push	{r7, lr}
 8004048:	b082      	sub	sp, #8
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f7ff ffed 	bl	800402e <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4618      	mov	r0, r3
 8004058:	f001 fd84 	bl	8005b64 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EEC1Ev>
    {
//       _check_template_params();
//       EIGEN_INITIALIZE_COEFFS_IF_THAT_OPTION_IS_ENABLED
    }
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4618      	mov	r0, r3
 8004060:	3708      	adds	r7, #8
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}

08004066 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE22_check_template_paramsEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    void swap(DenseBase<OtherDerived> const & other)
    { Base::swap(other.derived()); }

    EIGEN_DEVICE_FUNC
    static EIGEN_STRONG_INLINE void _check_template_params()
 8004066:	b480      	push	{r7}
 8004068:	af00      	add	r7, sp, #0
                        && ((MaxColsAtCompileTime == Dynamic) || (MaxColsAtCompileTime >= 0))
                        && (MaxRowsAtCompileTime == RowsAtCompileTime || RowsAtCompileTime==Dynamic)
                        && (MaxColsAtCompileTime == ColsAtCompileTime || ColsAtCompileTime==Dynamic)
                        && (Options & (DontAlign|RowMajor)) == Options),
        INVALID_MATRIX_TEMPLATE_PARAMETERS)
    }
 800406a:	bf00      	nop
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>:
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f001 fd7e 	bl	8005b7e <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4618      	mov	r0, r3
 8004086:	3708      	adds	r7, #8
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>:
    EIGEN_STRONG_INLINE PlainObjectBase() : m_storage()
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f7ff ffed 	bl	8004074 <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4618      	mov	r0, r3
 800409e:	f001 fd79 	bl	8005b94 <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EEC1Ev>
    }
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4618      	mov	r0, r3
 80040a6:	3708      	adds	r7, #8
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}

080040ac <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE22_check_template_paramsEv>:
    static EIGEN_STRONG_INLINE void _check_template_params()
 80040ac:	b480      	push	{r7}
 80040ae:	af00      	add	r7, sp, #0
    }
 80040b0:	bf00      	nop
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr

080040ba <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>:
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b082      	sub	sp, #8
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f001 fd73 	bl	8005bae <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4618      	mov	r0, r3
 80040cc:	3708      	adds	r7, #8
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}

080040d2 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>:
    EIGEN_STRONG_INLINE PlainObjectBase() : m_storage()
 80040d2:	b580      	push	{r7, lr}
 80040d4:	b082      	sub	sp, #8
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f7ff ffed 	bl	80040ba <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4618      	mov	r0, r3
 80040e4:	f001 fd6e 	bl	8005bc4 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EEC1Ev>
    }
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4618      	mov	r0, r3
 80040ec:	3708      	adds	r7, #8
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}

080040f2 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv>:
    static EIGEN_STRONG_INLINE void _check_template_params()
 80040f2:	b480      	push	{r7}
 80040f4:	af00      	add	r7, sp, #0
    }
 80040f6:	bf00      	nop
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>:
 8004100:	b580      	push	{r7, lr}
 8004102:	b082      	sub	sp, #8
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f001 fd68 	bl	8005bde <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4618      	mov	r0, r3
 8004112:	3708      	adds	r7, #8
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>:
    EIGEN_STRONG_INLINE PlainObjectBase() : m_storage()
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f7ff ffed 	bl	8004100 <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4618      	mov	r0, r3
 800412a:	f001 fd63 	bl	8005bf4 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EEC1Ev>
    }
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4618      	mov	r0, r3
 8004132:	3708      	adds	r7, #8
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE22_check_template_paramsEv>:
    static EIGEN_STRONG_INLINE void _check_template_params()
 8004138:	b480      	push	{r7}
 800413a:	af00      	add	r7, sp, #0
    }
 800413c:	bf00      	nop
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
	...

08004148 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKf>:
  inline CommaInitializer(XprType& xpr, const Scalar& s)
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	60b9      	str	r1, [r7, #8]
 8004152:	607a      	str	r2, [r7, #4]
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	68ba      	ldr	r2, [r7, #8]
 8004158:	601a      	str	r2, [r3, #0]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2200      	movs	r2, #0
 800415e:	605a      	str	r2, [r3, #4]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2201      	movs	r2, #1
 8004164:	609a      	str	r2, [r3, #8]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2201      	movs	r2, #1
 800416a:	60da      	str	r2, [r3, #12]
    eigen_assert(m_xpr.rows() > 0 && m_xpr.cols() > 0
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4618      	mov	r0, r3
 8004172:	f000 f86a 	bl	800424a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	dd07      	ble.n	800418c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKf+0x44>
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4618      	mov	r0, r3
 8004182:	f000 f857 	bl	8004234 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	dc05      	bgt.n	8004198 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKf+0x50>
 800418c:	4b0b      	ldr	r3, [pc, #44]	; (80041bc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKf+0x74>)
 800418e:	4a0c      	ldr	r2, [pc, #48]	; (80041c0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKf+0x78>)
 8004190:	2124      	movs	r1, #36	; 0x24
 8004192:	480c      	ldr	r0, [pc, #48]	; (80041c4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKf+0x7c>)
 8004194:	f018 ff4e 	bl	801d034 <__assert_func>
 8004198:	bf00      	nop
    m_xpr.coeffRef(0,0) = s;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	2200      	movs	r2, #0
 80041a0:	2100      	movs	r1, #0
 80041a2:	4618      	mov	r0, r3
 80041a4:	f000 f85c 	bl	8004260 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8coeffRefEii>
 80041a8:	4602      	mov	r2, r0
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	6013      	str	r3, [r2, #0]
  }
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	4618      	mov	r0, r3
 80041b4:	3710      	adds	r7, #16
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	0801e758 	.word	0x0801e758
 80041c0:	0801e7b4 	.word	0x0801e7b4
 80041c4:	0801e1c4 	.word	0x0801e1c4

080041c8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv>:
  inline XprType& finished() {
 80041c8:	b590      	push	{r4, r7, lr}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
      eigen_assert(((m_row+m_currentBlockRows) == m_xpr.rows() || m_xpr.cols() == 0)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	685a      	ldr	r2, [r3, #4]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	18d4      	adds	r4, r2, r3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4618      	mov	r0, r3
 80041e0:	f000 f833 	bl	800424a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80041e4:	4603      	mov	r3, r0
 80041e6:	429c      	cmp	r4, r3
 80041e8:	d007      	beq.n	80041fa <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv+0x32>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4618      	mov	r0, r3
 80041f0:	f000 f820 	bl	8004234 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d109      	bne.n	800420e <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv+0x46>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	689c      	ldr	r4, [r3, #8]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4618      	mov	r0, r3
 8004204:	f000 f816 	bl	8004234 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8004208:	4603      	mov	r3, r0
 800420a:	429c      	cmp	r4, r3
 800420c:	d005      	beq.n	800421a <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv+0x52>
 800420e:	4b06      	ldr	r3, [pc, #24]	; (8004228 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv+0x60>)
 8004210:	4a06      	ldr	r2, [pc, #24]	; (800422c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv+0x64>)
 8004212:	217a      	movs	r1, #122	; 0x7a
 8004214:	4806      	ldr	r0, [pc, #24]	; (8004230 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv+0x68>)
 8004216:	f018 ff0d 	bl	801d034 <__assert_func>
 800421a:	bf00      	nop
      return m_xpr;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
  }
 8004220:	4618      	mov	r0, r3
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	bd90      	pop	{r4, r7, pc}
 8004228:	0801e864 	.word	0x0801e864
 800422c:	0801e904 	.word	0x0801e904
 8004230:	0801e1c4 	.word	0x0801e1c4

08004234 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_storage.cols(); }
 8004234:	b580      	push	{r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	f001 fce7 	bl	8005c0e <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4colsEv>
 8004240:	4603      	mov	r3, r0
 8004242:	4618      	mov	r0, r3
 8004244:	3708      	adds	r7, #8
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}

0800424a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_storage.rows(); }
 800424a:	b580      	push	{r7, lr}
 800424c:	b082      	sub	sp, #8
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
 8004252:	f001 fce4 	bl	8005c1e <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4rowsEv>
 8004256:	4603      	mov	r3, r0
 8004258:	4618      	mov	r0, r3
 800425a:	3708      	adds	r7, #8
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8coeffRefEii>:
    EIGEN_STRONG_INLINE Scalar& coeffRef(Index rowId, Index colId)
 8004260:	b590      	push	{r4, r7, lr}
 8004262:	b085      	sub	sp, #20
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
        return m_storage.data()[rowId + colId * m_storage.rows()];
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	4618      	mov	r0, r3
 8004270:	f001 fcdd 	bl	8005c2e <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4dataEv>
 8004274:	4604      	mov	r4, r0
 8004276:	f001 fcd2 	bl	8005c1e <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4rowsEv>
 800427a:	4602      	mov	r2, r0
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	fb03 f202 	mul.w	r2, r3, r2
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	4413      	add	r3, r2
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	4423      	add	r3, r4
    }
 800428a:	4618      	mov	r0, r3
 800428c:	3714      	adds	r7, #20
 800428e:	46bd      	mov	sp, r7
 8004290:	bd90      	pop	{r4, r7, pc}
	...

08004294 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKf>:
  inline CommaInitializer(XprType& xpr, const Scalar& s)
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	607a      	str	r2, [r7, #4]
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	68ba      	ldr	r2, [r7, #8]
 80042a4:	601a      	str	r2, [r3, #0]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2200      	movs	r2, #0
 80042aa:	605a      	str	r2, [r3, #4]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2201      	movs	r2, #1
 80042b0:	609a      	str	r2, [r3, #8]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2201      	movs	r2, #1
 80042b6:	60da      	str	r2, [r3, #12]
    eigen_assert(m_xpr.rows() > 0 && m_xpr.cols() > 0
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4618      	mov	r0, r3
 80042be:	f000 f86a 	bl	8004396 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	dd07      	ble.n	80042d8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKf+0x44>
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4618      	mov	r0, r3
 80042ce:	f000 f857 	bl	8004380 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	dc05      	bgt.n	80042e4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKf+0x50>
 80042d8:	4b0b      	ldr	r3, [pc, #44]	; (8004308 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKf+0x74>)
 80042da:	4a0c      	ldr	r2, [pc, #48]	; (800430c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKf+0x78>)
 80042dc:	2124      	movs	r1, #36	; 0x24
 80042de:	480c      	ldr	r0, [pc, #48]	; (8004310 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKf+0x7c>)
 80042e0:	f018 fea8 	bl	801d034 <__assert_func>
 80042e4:	bf00      	nop
    m_xpr.coeffRef(0,0) = s;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2200      	movs	r2, #0
 80042ec:	2100      	movs	r1, #0
 80042ee:	4618      	mov	r0, r3
 80042f0:	f000 f85c 	bl	80043ac <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8coeffRefEii>
 80042f4:	4602      	mov	r2, r0
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	6013      	str	r3, [r2, #0]
  }
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	4618      	mov	r0, r3
 8004300:	3710      	adds	r7, #16
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	0801e758 	.word	0x0801e758
 800430c:	0801e96c 	.word	0x0801e96c
 8004310:	0801e1c4 	.word	0x0801e1c4

08004314 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv>:
  inline XprType& finished() {
 8004314:	b590      	push	{r4, r7, lr}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
      eigen_assert(((m_row+m_currentBlockRows) == m_xpr.rows() || m_xpr.cols() == 0)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685a      	ldr	r2, [r3, #4]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	18d4      	adds	r4, r2, r3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4618      	mov	r0, r3
 800432c:	f000 f833 	bl	8004396 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8004330:	4603      	mov	r3, r0
 8004332:	429c      	cmp	r4, r3
 8004334:	d007      	beq.n	8004346 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv+0x32>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4618      	mov	r0, r3
 800433c:	f000 f820 	bl	8004380 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d109      	bne.n	800435a <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv+0x46>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	689c      	ldr	r4, [r3, #8]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4618      	mov	r0, r3
 8004350:	f000 f816 	bl	8004380 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8004354:	4603      	mov	r3, r0
 8004356:	429c      	cmp	r4, r3
 8004358:	d005      	beq.n	8004366 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv+0x52>
 800435a:	4b06      	ldr	r3, [pc, #24]	; (8004374 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv+0x60>)
 800435c:	4a06      	ldr	r2, [pc, #24]	; (8004378 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv+0x64>)
 800435e:	217a      	movs	r1, #122	; 0x7a
 8004360:	4806      	ldr	r0, [pc, #24]	; (800437c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv+0x68>)
 8004362:	f018 fe67 	bl	801d034 <__assert_func>
 8004366:	bf00      	nop
      return m_xpr;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
  }
 800436c:	4618      	mov	r0, r3
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	bd90      	pop	{r4, r7, pc}
 8004374:	0801e864 	.word	0x0801e864
 8004378:	0801ea1c 	.word	0x0801ea1c
 800437c:	0801e1c4 	.word	0x0801e1c4

08004380 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_storage.cols(); }
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	f001 fc5c 	bl	8005c44 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4colsEv>
 800438c:	4603      	mov	r3, r0
 800438e:	4618      	mov	r0, r3
 8004390:	3708      	adds	r7, #8
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}

08004396 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_storage.rows(); }
 8004396:	b580      	push	{r7, lr}
 8004398:	b082      	sub	sp, #8
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
 800439e:	f001 fc59 	bl	8005c54 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4rowsEv>
 80043a2:	4603      	mov	r3, r0
 80043a4:	4618      	mov	r0, r3
 80043a6:	3708      	adds	r7, #8
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8coeffRefEii>:
    EIGEN_STRONG_INLINE Scalar& coeffRef(Index rowId, Index colId)
 80043ac:	b590      	push	{r4, r7, lr}
 80043ae:	b085      	sub	sp, #20
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	607a      	str	r2, [r7, #4]
        return m_storage.data()[rowId + colId * m_storage.rows()];
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	4618      	mov	r0, r3
 80043bc:	f001 fc52 	bl	8005c64 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4dataEv>
 80043c0:	4604      	mov	r4, r0
 80043c2:	f001 fc47 	bl	8005c54 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4rowsEv>
 80043c6:	4602      	mov	r2, r0
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	fb03 f202 	mul.w	r2, r3, r2
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	4413      	add	r3, r2
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	4423      	add	r3, r4
    }
 80043d6:	4618      	mov	r0, r3
 80043d8:	3714      	adds	r7, #20
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd90      	pop	{r4, r7, pc}
	...

080043e0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS2_RKf>:
  inline CommaInitializer(XprType& xpr, const Scalar& s)
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	60b9      	str	r1, [r7, #8]
 80043ea:	607a      	str	r2, [r7, #4]
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	68ba      	ldr	r2, [r7, #8]
 80043f0:	601a      	str	r2, [r3, #0]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	605a      	str	r2, [r3, #4]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2201      	movs	r2, #1
 80043fc:	609a      	str	r2, [r3, #8]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2201      	movs	r2, #1
 8004402:	60da      	str	r2, [r3, #12]
    eigen_assert(m_xpr.rows() > 0 && m_xpr.cols() > 0
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4618      	mov	r0, r3
 800440a:	f000 ff0e 	bl	800522a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800440e:	4603      	mov	r3, r0
 8004410:	2b00      	cmp	r3, #0
 8004412:	dd07      	ble.n	8004424 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS2_RKf+0x44>
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4618      	mov	r0, r3
 800441a:	f000 ff11 	bl	8005240 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	dc05      	bgt.n	8004430 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS2_RKf+0x50>
 8004424:	4b0b      	ldr	r3, [pc, #44]	; (8004454 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS2_RKf+0x74>)
 8004426:	4a0c      	ldr	r2, [pc, #48]	; (8004458 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS2_RKf+0x78>)
 8004428:	2124      	movs	r1, #36	; 0x24
 800442a:	480c      	ldr	r0, [pc, #48]	; (800445c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS2_RKf+0x7c>)
 800442c:	f018 fe02 	bl	801d034 <__assert_func>
 8004430:	bf00      	nop
    m_xpr.coeffRef(0,0) = s;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2200      	movs	r2, #0
 8004438:	2100      	movs	r1, #0
 800443a:	4618      	mov	r0, r3
 800443c:	f001 fc1d 	bl	8005c7a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8coeffRefEii>
 8004440:	4602      	mov	r2, r0
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	6013      	str	r3, [r2, #0]
  }
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	4618      	mov	r0, r3
 800444c:	3710      	adds	r7, #16
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	0801e758 	.word	0x0801e758
 8004458:	0801ea84 	.word	0x0801ea84
 800445c:	0801e1c4 	.word	0x0801e1c4

08004460 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv>:
  inline XprType& finished() {
 8004460:	b590      	push	{r4, r7, lr}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
      eigen_assert(((m_row+m_currentBlockRows) == m_xpr.rows() || m_xpr.cols() == 0)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685a      	ldr	r2, [r3, #4]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	18d4      	adds	r4, r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4618      	mov	r0, r3
 8004478:	f000 fed7 	bl	800522a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800447c:	4603      	mov	r3, r0
 800447e:	429c      	cmp	r4, r3
 8004480:	d007      	beq.n	8004492 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv+0x32>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4618      	mov	r0, r3
 8004488:	f000 feda 	bl	8005240 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d109      	bne.n	80044a6 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv+0x46>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	689c      	ldr	r4, [r3, #8]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4618      	mov	r0, r3
 800449c:	f000 fed0 	bl	8005240 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 80044a0:	4603      	mov	r3, r0
 80044a2:	429c      	cmp	r4, r3
 80044a4:	d005      	beq.n	80044b2 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv+0x52>
 80044a6:	4b06      	ldr	r3, [pc, #24]	; (80044c0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv+0x60>)
 80044a8:	4a06      	ldr	r2, [pc, #24]	; (80044c4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv+0x64>)
 80044aa:	217a      	movs	r1, #122	; 0x7a
 80044ac:	4806      	ldr	r0, [pc, #24]	; (80044c8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv+0x68>)
 80044ae:	f018 fdc1 	bl	801d034 <__assert_func>
 80044b2:	bf00      	nop
      return m_xpr;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
  }
 80044b8:	4618      	mov	r0, r3
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd90      	pop	{r4, r7, pc}
 80044c0:	0801e864 	.word	0x0801e864
 80044c4:	0801eb34 	.word	0x0801eb34
 80044c8:	0801e1c4 	.word	0x0801e1c4

080044cc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_RKf>:
  inline CommaInitializer(XprType& xpr, const Scalar& s)
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	68ba      	ldr	r2, [r7, #8]
 80044dc:	601a      	str	r2, [r3, #0]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	605a      	str	r2, [r3, #4]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2201      	movs	r2, #1
 80044e8:	609a      	str	r2, [r3, #8]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2201      	movs	r2, #1
 80044ee:	60da      	str	r2, [r3, #12]
    eigen_assert(m_xpr.rows() > 0 && m_xpr.cols() > 0
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4618      	mov	r0, r3
 80044f6:	f000 f86a 	bl	80045ce <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	dd07      	ble.n	8004510 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_RKf+0x44>
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4618      	mov	r0, r3
 8004506:	f000 f857 	bl	80045b8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	dc05      	bgt.n	800451c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_RKf+0x50>
 8004510:	4b0b      	ldr	r3, [pc, #44]	; (8004540 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_RKf+0x74>)
 8004512:	4a0c      	ldr	r2, [pc, #48]	; (8004544 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_RKf+0x78>)
 8004514:	2124      	movs	r1, #36	; 0x24
 8004516:	480c      	ldr	r0, [pc, #48]	; (8004548 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_RKf+0x7c>)
 8004518:	f018 fd8c 	bl	801d034 <__assert_func>
 800451c:	bf00      	nop
    m_xpr.coeffRef(0,0) = s;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2200      	movs	r2, #0
 8004524:	2100      	movs	r1, #0
 8004526:	4618      	mov	r0, r3
 8004528:	f000 f85c 	bl	80045e4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8coeffRefEii>
 800452c:	4602      	mov	r2, r0
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	6013      	str	r3, [r2, #0]
  }
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	4618      	mov	r0, r3
 8004538:	3710      	adds	r7, #16
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	0801e758 	.word	0x0801e758
 8004544:	0801eb9c 	.word	0x0801eb9c
 8004548:	0801e1c4 	.word	0x0801e1c4

0800454c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv>:
  inline XprType& finished() {
 800454c:	b590      	push	{r4, r7, lr}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
      eigen_assert(((m_row+m_currentBlockRows) == m_xpr.rows() || m_xpr.cols() == 0)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	685a      	ldr	r2, [r3, #4]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	18d4      	adds	r4, r2, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4618      	mov	r0, r3
 8004564:	f000 f833 	bl	80045ce <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8004568:	4603      	mov	r3, r0
 800456a:	429c      	cmp	r4, r3
 800456c:	d007      	beq.n	800457e <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv+0x32>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4618      	mov	r0, r3
 8004574:	f000 f820 	bl	80045b8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d109      	bne.n	8004592 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv+0x46>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	689c      	ldr	r4, [r3, #8]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4618      	mov	r0, r3
 8004588:	f000 f816 	bl	80045b8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 800458c:	4603      	mov	r3, r0
 800458e:	429c      	cmp	r4, r3
 8004590:	d005      	beq.n	800459e <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv+0x52>
 8004592:	4b06      	ldr	r3, [pc, #24]	; (80045ac <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv+0x60>)
 8004594:	4a06      	ldr	r2, [pc, #24]	; (80045b0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv+0x64>)
 8004596:	217a      	movs	r1, #122	; 0x7a
 8004598:	4806      	ldr	r0, [pc, #24]	; (80045b4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv+0x68>)
 800459a:	f018 fd4b 	bl	801d034 <__assert_func>
 800459e:	bf00      	nop
      return m_xpr;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
  }
 80045a4:	4618      	mov	r0, r3
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd90      	pop	{r4, r7, pc}
 80045ac:	0801e864 	.word	0x0801e864
 80045b0:	0801ec4c 	.word	0x0801ec4c
 80045b4:	0801e1c4 	.word	0x0801e1c4

080045b8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_storage.cols(); }
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	f001 fb74 	bl	8005cac <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4colsEv>
 80045c4:	4603      	mov	r3, r0
 80045c6:	4618      	mov	r0, r3
 80045c8:	3708      	adds	r7, #8
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}

080045ce <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_storage.rows(); }
 80045ce:	b580      	push	{r7, lr}
 80045d0:	b082      	sub	sp, #8
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	6078      	str	r0, [r7, #4]
 80045d6:	f001 fb71 	bl	8005cbc <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4rowsEv>
 80045da:	4603      	mov	r3, r0
 80045dc:	4618      	mov	r0, r3
 80045de:	3708      	adds	r7, #8
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8coeffRefEii>:
    EIGEN_STRONG_INLINE Scalar& coeffRef(Index rowId, Index colId)
 80045e4:	b590      	push	{r4, r7, lr}
 80045e6:	b085      	sub	sp, #20
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	607a      	str	r2, [r7, #4]
        return m_storage.data()[colId + rowId * m_storage.cols()];
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	4618      	mov	r0, r3
 80045f4:	f001 fb6a 	bl	8005ccc <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4dataEv>
 80045f8:	4604      	mov	r4, r0
 80045fa:	f001 fb57 	bl	8005cac <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4colsEv>
 80045fe:	4602      	mov	r2, r0
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	fb03 f202 	mul.w	r2, r3, r2
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4413      	add	r3, r2
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	4423      	add	r3, r4
    }
 800460e:	4618      	mov	r0, r3
 8004610:	3714      	adds	r7, #20
 8004612:	46bd      	mov	sp, r7
 8004614:	bd90      	pop	{r4, r7, pc}

08004616 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 8004616:	b580      	push	{r7, lr}
 8004618:	b082      	sub	sp, #8
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 f855 	bl	80046ce <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8004624:	4603      	mov	r3, r0
 8004626:	4618      	mov	r0, r3
 8004628:	f7ff feb5 	bl	8004396 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800462c:	4603      	mov	r3, r0
 800462e:	4618      	mov	r0, r3
 8004630:	3708      	adds	r7, #8
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}

08004636 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 8004636:	b580      	push	{r7, lr}
 8004638:	b082      	sub	sp, #8
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 f845 	bl	80046ce <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8004644:	4603      	mov	r3, r0
 8004646:	4618      	mov	r0, r3
 8004648:	f7ff fe9a 	bl	8004380 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800464c:	4603      	mov	r3, r0
 800464e:	4618      	mov	r0, r3
 8004650:	3708      	adds	r7, #8
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}

08004656 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
protected:
  Index m_outerStride;
};

template<typename Derived>
struct evaluator<PlainObjectBase<Derived> >
 8004656:	b580      	push	{r7, lr}
 8004658:	b082      	sub	sp, #8
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f001 fb4f 	bl	8005d02 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4618      	mov	r0, r3
 8004668:	3708      	adds	r7, #8
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>:

  plainobjectbase_evaluator_data<Scalar,OuterStrideAtCompileTime> m_d;
};

template<typename Scalar, int Rows, int Cols, int Options, int MaxRows, int MaxCols>
struct evaluator<Matrix<Scalar, Rows, Cols, Options, MaxRows, MaxCols> >
 800466e:	b580      	push	{r7, lr}
 8004670:	b082      	sub	sp, #8
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4618      	mov	r0, r3
 800467a:	f7ff ffec 	bl	8004656 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4618      	mov	r0, r3
 8004682:	3708      	adds	r7, #8
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EE8coeffRefEii>:
    EIGEN_STRONG_INLINE Scalar& coeffRef(Index row, Index col)
 8004688:	b590      	push	{r4, r7, lr}
 800468a:	b087      	sub	sp, #28
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]
      return internal::evaluator<Derived>(derived()).coeffRef(row,col);
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	f000 f90f 	bl	80048b8 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800469a:	4602      	mov	r2, r0
 800469c:	f107 0314 	add.w	r3, r7, #20
 80046a0:	4611      	mov	r1, r2
 80046a2:	4618      	mov	r0, r3
 80046a4:	f001 fb1d 	bl	8005ce2 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 80046a8:	f107 0314 	add.w	r3, r7, #20
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	68b9      	ldr	r1, [r7, #8]
 80046b0:	4618      	mov	r0, r3
 80046b2:	f001 fb31 	bl	8005d18 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEii>
 80046b6:	4604      	mov	r4, r0
 80046b8:	bf00      	nop
 80046ba:	f107 0314 	add.w	r3, r7, #20
 80046be:	4618      	mov	r0, r3
 80046c0:	f7ff ffd5 	bl	800466e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 80046c4:	4623      	mov	r3, r4
    }
 80046c6:	4618      	mov	r0, r3
 80046c8:	371c      	adds	r7, #28
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd90      	pop	{r4, r7, pc}

080046ce <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 80046ce:	b480      	push	{r7}
 80046d0:	b083      	sub	sp, #12
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4618      	mov	r0, r3
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <_ZN5Eigen8internal18scalar_constant_opIfEC1ERKf>:
namespace internal {

template<typename Scalar>
struct scalar_constant_op {
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE scalar_constant_op(const scalar_constant_op& other) : m_other(other.m_other) { }
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE scalar_constant_op(const Scalar& other) : m_other(other) { }
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	601a      	str	r2, [r3, #0]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4618      	mov	r0, r3
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <_ZN5Eigen10MatrixBaseINS_14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f001 fb1b 	bl	8005d48 <_ZN5Eigen9DenseBaseINS_14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4618      	mov	r0, r3
 8004716:	3708      	adds	r7, #8
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_>:

    typedef typename internal::dense_xpr_base<CwiseNullaryOp>::type Base;
    EIGEN_DENSE_PUBLIC_INTERFACE(CwiseNullaryOp)

    EIGEN_DEVICE_FUNC
    CwiseNullaryOp(Index rows, Index cols, const NullaryOp& func = NullaryOp())
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	60b9      	str	r1, [r7, #8]
 8004726:	607a      	str	r2, [r7, #4]
 8004728:	603b      	str	r3, [r7, #0]
      : m_rows(rows), m_cols(cols), m_functor(func)
 800472a:	68f8      	ldr	r0, [r7, #12]
 800472c:	f7ff ffea 	bl	8004704 <_ZN5Eigen10MatrixBaseINS_14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	68b9      	ldr	r1, [r7, #8]
 8004734:	4618      	mov	r0, r3
 8004736:	f001 fb13 	bl	8005d60 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	3301      	adds	r3, #1
 800473e:	6879      	ldr	r1, [r7, #4]
 8004740:	4618      	mov	r0, r3
 8004742:	f001 fb27 	bl	8005d94 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	3304      	adds	r3, #4
 800474a:	6839      	ldr	r1, [r7, #0]
 800474c:	4618      	mov	r0, r3
 800474e:	f000 f897 	bl	8004880 <_ZN5Eigen8internal18scalar_constant_opIfEC1ERKS2_>
    {
      eigen_assert(rows >= 0
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	2b00      	cmp	r3, #0
 8004756:	db08      	blt.n	800476a <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x4e>
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	2b03      	cmp	r3, #3
 800475c:	d105      	bne.n	800476a <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x4e>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2b00      	cmp	r3, #0
 8004762:	db02      	blt.n	800476a <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x4e>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2b01      	cmp	r3, #1
 8004768:	d005      	beq.n	8004776 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x5a>
 800476a:	4b05      	ldr	r3, [pc, #20]	; (8004780 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x64>)
 800476c:	4a05      	ldr	r2, [pc, #20]	; (8004784 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x68>)
 800476e:	2147      	movs	r1, #71	; 0x47
 8004770:	4805      	ldr	r0, [pc, #20]	; (8004788 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x6c>)
 8004772:	f018 fc5f 	bl	801d034 <__assert_func>
            && (RowsAtCompileTime == Dynamic || RowsAtCompileTime == rows)
            &&  cols >= 0
            && (ColsAtCompileTime == Dynamic || ColsAtCompileTime == cols));
    }
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	4618      	mov	r0, r3
 800477a:	3710      	adds	r7, #16
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	0801ecb4 	.word	0x0801ecb4
 8004784:	0801ed4c 	.word	0x0801ed4c
 8004788:	0801ee40 	.word	0x0801ee40

0800478c <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>:
template<typename LhsScalar,typename RhsScalar>
struct scalar_product_op  : binary_op_base<LhsScalar,RhsScalar>
{
  typedef typename ScalarBinaryOpTraits<LhsScalar,RhsScalar,scalar_product_op>::ReturnType result_type;
#ifndef EIGEN_SCALAR_BINARY_OP_PLUGIN
  EIGEN_EMPTY_STRUCT_CTOR(scalar_product_op)
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4618      	mov	r0, r3
 8004798:	370c      	adds	r7, #12
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr

080047a2 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEEC1Ev>:
 80047a2:	b580      	push	{r7, lr}
 80047a4:	b082      	sub	sp, #8
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f001 fb0c 	bl	8005dc8 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEEC1Ev>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	4618      	mov	r0, r3
 80047b4:	3708      	adds	r7, #8
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}

080047ba <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EENS_5DenseEEC1Ev>:
    const BinaryOp m_functor;
};

// Generic API dispatcher
template<typename BinaryOp, typename Lhs, typename Rhs, typename StorageKind>
class CwiseBinaryOpImpl
 80047ba:	b580      	push	{r7, lr}
 80047bc:	b082      	sub	sp, #8
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f7ff ffed 	bl	80047a2 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEEC1Ev>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	4618      	mov	r0, r3
 80047cc:	3708      	adds	r7, #8
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}

080047d2 <_ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>:

    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE EIGEN_CONSTEXPR
    Index rows() const { return m_rows.value(); }
 80047d2:	b580      	push	{r7, lr}
 80047d4:	b082      	sub	sp, #8
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
 80047da:	f001 fb00 	bl	8005dde <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 80047de:	4603      	mov	r3, r0
 80047e0:	4618      	mov	r0, r3
 80047e2:	3708      	adds	r7, #8
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <_ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE EIGEN_CONSTEXPR
    Index cols() const { return m_cols.value(); }
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	f001 fafd 	bl	8005dee <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 80047f4:	4603      	mov	r3, r0
 80047f6:	4618      	mov	r0, r3
 80047f8:	3708      	adds	r7, #8
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
	...

08004800 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERS6_RSB_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8004800:	b590      	push	{r4, r7, lr}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	607a      	str	r2, [r7, #4]
 800480c:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 800480e:	68f8      	ldr	r0, [r7, #12]
 8004810:	f7ff ffd3 	bl	80047ba <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EENS_5DenseEEC1Ev>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	68ba      	ldr	r2, [r7, #8]
 8004818:	601a      	str	r2, [r3, #0]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	3304      	adds	r3, #4
 800481e:	6879      	ldr	r1, [r7, #4]
 8004820:	4618      	mov	r0, r3
 8004822:	f7ff f871 	bl	8003908 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS7_>
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	330c      	adds	r3, #12
 800482a:	6839      	ldr	r1, [r7, #0]
 800482c:	4618      	mov	r0, r3
 800482e:	f000 f837 	bl	80048a0 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	4618      	mov	r0, r3
 8004836:	f7ff fdae 	bl	8004396 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800483a:	4604      	mov	r4, r0
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f7ff ffc8 	bl	80047d2 <_ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8004842:	4603      	mov	r3, r0
 8004844:	429c      	cmp	r4, r3
 8004846:	d10a      	bne.n	800485e <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERS6_RSB_RKS3_+0x5e>
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	4618      	mov	r0, r3
 800484c:	f7ff fd98 	bl	8004380 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8004850:	4604      	mov	r4, r0
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f7ff ffc8 	bl	80047e8 <_ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8004858:	4603      	mov	r3, r0
 800485a:	429c      	cmp	r4, r3
 800485c:	d005      	beq.n	800486a <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERS6_RSB_RKS3_+0x6a>
 800485e:	4b05      	ldr	r3, [pc, #20]	; (8004874 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERS6_RSB_RKS3_+0x74>)
 8004860:	4a05      	ldr	r2, [pc, #20]	; (8004878 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERS6_RSB_RKS3_+0x78>)
 8004862:	2174      	movs	r1, #116	; 0x74
 8004864:	4805      	ldr	r0, [pc, #20]	; (800487c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERS6_RSB_RKS3_+0x7c>)
 8004866:	f018 fbe5 	bl	801d034 <__assert_func>
    }
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	4618      	mov	r0, r3
 800486e:	3714      	adds	r7, #20
 8004870:	46bd      	mov	sp, r7
 8004872:	bd90      	pop	{r4, r7, pc}
 8004874:	0801ee9c 	.word	0x0801ee9c
 8004878:	0801eed8 	.word	0x0801eed8
 800487c:	0801f100 	.word	0x0801f100

08004880 <_ZN5Eigen8internal18scalar_constant_opIfEC1ERKS2_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE scalar_constant_op(const scalar_constant_op& other) : m_other(other.m_other) { }
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	601a      	str	r2, [r3, #0]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4618      	mov	r0, r3
 8004896:	370c      	adds	r7, #12
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>:
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4618      	mov	r0, r3
 80048ae:	370c      	adds	r7, #12
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr

080048b8 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>:
  Derived& derived() { return *static_cast<Derived*>(this); }
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4618      	mov	r0, r3
 80048c4:	370c      	adds	r7, #12
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr

080048ce <_ZN5Eigen10MatrixBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
 80048ce:	b580      	push	{r7, lr}
 80048d0:	b082      	sub	sp, #8
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f001 fa91 	bl	8005dfe <_ZN5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4618      	mov	r0, r3
 80048e0:	3708      	adds	r7, #8
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}

080048e6 <_ZN5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 80048e6:	b580      	push	{r7, lr}
 80048e8:	b082      	sub	sp, #8
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f7ff ffed 	bl	80048ce <_ZN5Eigen10MatrixBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4618      	mov	r0, r3
 80048f8:	3708      	adds	r7, #8
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}

080048fe <_ZN5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 80048fe:	b580      	push	{r7, lr}
 8004900:	b082      	sub	sp, #8
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
 8004906:	6039      	str	r1, [r7, #0]
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f7ff ffec 	bl	80048e6 <_ZN5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEEC1Ev>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	683a      	ldr	r2, [r7, #0]
 8004912:	601a      	str	r2, [r3, #0]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4618      	mov	r0, r3
 8004918:	3708      	adds	r7, #8
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}

0800491e <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800491e:	b480      	push	{r7}
 8004920:	b083      	sub	sp, #12
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4618      	mov	r0, r3
 800492a:	370c      	adds	r7, #12
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>:
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4618      	mov	r0, r3
 8004940:	370c      	adds	r7, #12
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr

0800494a <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi0EEEEC1Ev>:
 800494a:	b580      	push	{r7, lr}
 800494c:	b082      	sub	sp, #8
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f001 fa5e 	bl	8005e14 <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi0EEEEC1Ev>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4618      	mov	r0, r3
 800495c:	3708      	adds	r7, #8
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}

08004962 <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0ELi4EEC1Ev>:
};

namespace internal {

template<typename Lhs, typename Rhs, int Option, int ProductTag = internal::product_type<Lhs,Rhs>::ret>
class dense_product_base
 8004962:	b580      	push	{r7, lr}
 8004964:	b082      	sub	sp, #8
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f7ff ffed 	bl	800494a <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi0EEEEC1Ev>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4618      	mov	r0, r3
 8004974:	3708      	adds	r7, #8
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}

0800497a <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0ENS_5DenseEEC1Ev>:
  public:
    typedef typename internal::generic_xpr_base<Product<Lhs,Rhs,Option>, MatrixXpr, StorageKind>::type Base;
};

template<typename Lhs, typename Rhs, int Option>
class ProductImpl<Lhs,Rhs,Option,Dense>
 800497a:	b580      	push	{r7, lr}
 800497c:	b082      	sub	sp, #8
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f7ff ffed 	bl	8004962 <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0ELi4EEC1Ev>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4618      	mov	r0, r3
 800498c:	3708      	adds	r7, #8
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}

08004992 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 8004992:	b580      	push	{r7, lr}
 8004994:	b082      	sub	sp, #8
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4618      	mov	r0, r3
 80049a0:	f7ff fcee 	bl	8004380 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80049a4:	4603      	mov	r3, r0
    }
 80049a6:	4618      	mov	r0, r3
 80049a8:	3708      	adds	r7, #8
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}

080049ae <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 80049ae:	b580      	push	{r7, lr}
 80049b0:	b082      	sub	sp, #8
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7ff fce0 	bl	8004380 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80049c0:	4603      	mov	r3, r0
 80049c2:	4618      	mov	r0, r3
 80049c4:	3708      	adds	r7, #8
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
	...

080049cc <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EEC1ERKSD_RKSF_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 80049cc:	b590      	push	{r4, r7, lr}
 80049ce:	b085      	sub	sp, #20
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	607a      	str	r2, [r7, #4]
 80049d8:	68f8      	ldr	r0, [r7, #12]
 80049da:	f7ff ffce 	bl	800497a <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0ENS_5DenseEEC1Ev>
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	68b9      	ldr	r1, [r7, #8]
 80049e2:	4618      	mov	r0, r3
 80049e4:	f7fe ffee 	bl	80039c4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERKSC_>
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	3310      	adds	r3, #16
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	6812      	ldr	r2, [r2, #0]
 80049f0:	601a      	str	r2, [r3, #0]
      eigen_assert(lhs.cols() == rhs.rows()
 80049f2:	68b8      	ldr	r0, [r7, #8]
 80049f4:	f7ff ffcd 	bl	8004992 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4colsEv>
 80049f8:	4604      	mov	r4, r0
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f7ff ffd7 	bl	80049ae <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8004a00:	4603      	mov	r3, r0
 8004a02:	429c      	cmp	r4, r3
 8004a04:	d005      	beq.n	8004a12 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EEC1ERKSD_RKSF_+0x46>
 8004a06:	4b06      	ldr	r3, [pc, #24]	; (8004a20 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EEC1ERKSD_RKSF_+0x54>)
 8004a08:	4a06      	ldr	r2, [pc, #24]	; (8004a24 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EEC1ERKSD_RKSF_+0x58>)
 8004a0a:	2160      	movs	r1, #96	; 0x60
 8004a0c:	4806      	ldr	r0, [pc, #24]	; (8004a28 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EEC1ERKSD_RKSF_+0x5c>)
 8004a0e:	f018 fb11 	bl	801d034 <__assert_func>
 8004a12:	bf00      	nop
    }
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	4618      	mov	r0, r3
 8004a18:	3714      	adds	r7, #20
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd90      	pop	{r4, r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	0801f15c 	.word	0x0801f15c
 8004a24:	0801f1e8 	.word	0x0801f1e8
 8004a28:	0801f4ac 	.word	0x0801f4ac

08004a2c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4_setINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS1_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS7_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set(const DenseBase<OtherDerived>& other)
 8004a2c:	b590      	push	{r4, r7, lr}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
      internal::call_assignment(this->derived(), other.derived());
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 f8da 	bl	8004bf0 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8004a3c:	4604      	mov	r4, r0
 8004a3e:	6838      	ldr	r0, [r7, #0]
 8004a40:	f001 f9f3 	bl	8005e2a <_ZNK5Eigen9EigenBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi0EEEE7derivedEv>
 8004a44:	4603      	mov	r3, r0
 8004a46:	4619      	mov	r1, r3
 8004a48:	4620      	mov	r0, r4
 8004a4a:	f001 f9f9 	bl	8005e40 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEEEEvRT_RKT0_>
      return this->derived();
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 f8ce 	bl	8004bf0 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8004a54:	4603      	mov	r3, r0
    }
 8004a56:	4618      	mov	r0, r3
 8004a58:	370c      	adds	r7, #12
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd90      	pop	{r4, r7, pc}

08004a5e <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>:
 8004a5e:	b480      	push	{r7}
 8004a60:	b083      	sub	sp, #12
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4618      	mov	r0, r3
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>:
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f001 f9f4 	bl	8005e6a <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4618      	mov	r0, r3
 8004a86:	3708      	adds	r7, #8
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0ELi3EEC1Ev>:
class dense_product_base
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f7ff ffed 	bl	8004a74 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3708      	adds	r7, #8
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f7ff ffed 	bl	8004a8c <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0ELi3EEC1Ev>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3708      	adds	r7, #8
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}

08004abc <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8004abc:	b590      	push	{r4, r7, lr}
 8004abe:	b085      	sub	sp, #20
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	607a      	str	r2, [r7, #4]
 8004ac8:	68f8      	ldr	r0, [r7, #12]
 8004aca:	f7ff ffeb 	bl	8004aa4 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0ENS_5DenseEEC1Ev>
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	68ba      	ldr	r2, [r7, #8]
 8004ad2:	601a      	str	r2, [r3, #0]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	4618      	mov	r0, r3
 8004ade:	f7ff fba9 	bl	8004234 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8004ae2:	4604      	mov	r4, r0
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f7ff fc55 	bl	8004396 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8004aec:	4603      	mov	r3, r0
 8004aee:	429c      	cmp	r4, r3
 8004af0:	d005      	beq.n	8004afe <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x42>
 8004af2:	4b06      	ldr	r3, [pc, #24]	; (8004b0c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x50>)
 8004af4:	4a06      	ldr	r2, [pc, #24]	; (8004b10 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x54>)
 8004af6:	2160      	movs	r1, #96	; 0x60
 8004af8:	4806      	ldr	r0, [pc, #24]	; (8004b14 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x58>)
 8004afa:	f018 fa9b 	bl	801d034 <__assert_func>
 8004afe:	bf00      	nop
    }
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	4618      	mov	r0, r3
 8004b04:	3714      	adds	r7, #20
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd90      	pop	{r4, r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	0801f15c 	.word	0x0801f15c
 8004b10:	0801f500 	.word	0x0801f500
 8004b14:	0801f4ac 	.word	0x0801f4ac

08004b18 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4_setINS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set(const DenseBase<OtherDerived>& other)
 8004b18:	b590      	push	{r4, r7, lr}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
      internal::call_assignment(this->derived(), other.derived());
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f7ff fec8 	bl	80048b8 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8004b28:	4604      	mov	r4, r0
 8004b2a:	6838      	ldr	r0, [r7, #0]
 8004b2c:	f001 f9a8 	bl	8005e80 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE7derivedEv>
 8004b30:	4603      	mov	r3, r0
 8004b32:	4619      	mov	r1, r3
 8004b34:	4620      	mov	r0, r4
 8004b36:	f001 f9ae 	bl	8005e96 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEEvRT_RKT0_>
      return this->derived();
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f7ff febc 	bl	80048b8 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8004b40:	4603      	mov	r3, r0
    }
 8004b42:	4618      	mov	r0, r3
 8004b44:	370c      	adds	r7, #12
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd90      	pop	{r4, r7, pc}

08004b4a <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEC1Ev>:
 8004b4a:	b580      	push	{r7, lr}
 8004b4c:	b082      	sub	sp, #8
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f001 f9b4 	bl	8005ec0 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEC1Ev>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3708      	adds	r7, #8
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}

08004b62 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0ELi3EEC1Ev>:
class dense_product_base
 8004b62:	b580      	push	{r7, lr}
 8004b64:	b082      	sub	sp, #8
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f7ff ffed 	bl	8004b4a <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEC1Ev>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4618      	mov	r0, r3
 8004b74:	3708      	adds	r7, #8
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}

08004b7a <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8004b7a:	b580      	push	{r7, lr}
 8004b7c:	b082      	sub	sp, #8
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f7ff ffed 	bl	8004b62 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0ELi3EEC1Ev>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3708      	adds	r7, #8
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
	...

08004b94 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEC1ERKS2_S5_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8004b94:	b590      	push	{r4, r7, lr}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	607a      	str	r2, [r7, #4]
 8004ba0:	68f8      	ldr	r0, [r7, #12]
 8004ba2:	f7ff ffea 	bl	8004b7a <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0ENS_5DenseEEC1Ev>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	68ba      	ldr	r2, [r7, #8]
 8004baa:	601a      	str	r2, [r3, #0]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f7ff fb3d 	bl	8004234 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8004bba:	4604      	mov	r4, r0
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f7ff fb43 	bl	800424a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	429c      	cmp	r4, r3
 8004bc8:	d005      	beq.n	8004bd6 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEC1ERKS2_S5_+0x42>
 8004bca:	4b06      	ldr	r3, [pc, #24]	; (8004be4 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEC1ERKS2_S5_+0x50>)
 8004bcc:	4a06      	ldr	r2, [pc, #24]	; (8004be8 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEC1ERKS2_S5_+0x54>)
 8004bce:	2160      	movs	r1, #96	; 0x60
 8004bd0:	4806      	ldr	r0, [pc, #24]	; (8004bec <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEC1ERKS2_S5_+0x58>)
 8004bd2:	f018 fa2f 	bl	801d034 <__assert_func>
 8004bd6:	bf00      	nop
    }
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3714      	adds	r7, #20
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd90      	pop	{r4, r7, pc}
 8004be2:	bf00      	nop
 8004be4:	0801f15c 	.word	0x0801f15c
 8004be8:	0801f628 	.word	0x0801f628
 8004bec:	0801f4ac 	.word	0x0801f4ac

08004bf0 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>:
  Derived& derived() { return *static_cast<Derived*>(this); }
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	370c      	adds	r7, #12
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr

08004c06 <_ZN5Eigen10MatrixBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1Ev>:
 8004c06:	b580      	push	{r7, lr}
 8004c08:	b082      	sub	sp, #8
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f001 f961 	bl	8005ed6 <_ZN5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1Ev>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4618      	mov	r0, r3
 8004c18:	3708      	adds	r7, #8
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}

08004c1e <_ZN5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 8004c1e:	b580      	push	{r7, lr}
 8004c20:	b082      	sub	sp, #8
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f7ff ffed 	bl	8004c06 <_ZN5Eigen10MatrixBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1Ev>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3708      	adds	r7, #8
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}

08004c36 <_ZN5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 8004c36:	b580      	push	{r7, lr}
 8004c38:	b082      	sub	sp, #8
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
 8004c3e:	6039      	str	r1, [r7, #0]
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f7ff ffec 	bl	8004c1e <_ZN5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEEC1Ev>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	683a      	ldr	r2, [r7, #0]
 8004c4a:	601a      	str	r2, [r3, #0]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3708      	adds	r7, #8
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}

08004c56 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8004c56:	b480      	push	{r7}
 8004c58:	b083      	sub	sp, #12
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4618      	mov	r0, r3
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>:
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4618      	mov	r0, r3
 8004c78:	370c      	adds	r7, #12
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr

08004c82 <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEEC1Ev>:
 8004c82:	b580      	push	{r7, lr}
 8004c84:	b082      	sub	sp, #8
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f001 f92e 	bl	8005eec <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEEC1Ev>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4618      	mov	r0, r3
 8004c94:	3708      	adds	r7, #8
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}

08004c9a <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0ELi3EEC1Ev>:
class dense_product_base
 8004c9a:	b580      	push	{r7, lr}
 8004c9c:	b082      	sub	sp, #8
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	6078      	str	r0, [r7, #4]
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f7ff ffed 	bl	8004c82 <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEEC1Ev>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4618      	mov	r0, r3
 8004cac:	3708      	adds	r7, #8
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}

08004cb2 <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8004cb2:	b580      	push	{r7, lr}
 8004cb4:	b082      	sub	sp, #8
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f7ff ffed 	bl	8004c9a <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0ELi3EEC1Ev>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3708      	adds	r7, #8
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}

08004cca <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8004cca:	b580      	push	{r7, lr}
 8004ccc:	b082      	sub	sp, #8
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7ff faac 	bl	8004234 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3708      	adds	r7, #8
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 8004ce6:	b580      	push	{r7, lr}
 8004ce8:	b082      	sub	sp, #8
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f7ff fa9e 	bl	8004234 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3708      	adds	r7, #8
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
	...

08004d04 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EEC1ERKS3_RKS5_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8004d04:	b590      	push	{r4, r7, lr}
 8004d06:	b085      	sub	sp, #20
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	60b9      	str	r1, [r7, #8]
 8004d0e:	607a      	str	r2, [r7, #4]
 8004d10:	68f8      	ldr	r0, [r7, #12]
 8004d12:	f7ff ffce 	bl	8004cb2 <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0ENS_5DenseEEC1Ev>
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	68ba      	ldr	r2, [r7, #8]
 8004d1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004d1e:	e883 0003 	stmia.w	r3, {r0, r1}
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	3308      	adds	r3, #8
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	6812      	ldr	r2, [r2, #0]
 8004d2a:	601a      	str	r2, [r3, #0]
      eigen_assert(lhs.cols() == rhs.rows()
 8004d2c:	68b8      	ldr	r0, [r7, #8]
 8004d2e:	f7ff ffcc 	bl	8004cca <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4colsEv>
 8004d32:	4604      	mov	r4, r0
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f7ff ffd6 	bl	8004ce6 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	429c      	cmp	r4, r3
 8004d3e:	d005      	beq.n	8004d4c <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EEC1ERKS3_RKS5_+0x48>
 8004d40:	4b05      	ldr	r3, [pc, #20]	; (8004d58 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EEC1ERKS3_RKS5_+0x54>)
 8004d42:	4a06      	ldr	r2, [pc, #24]	; (8004d5c <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EEC1ERKS3_RKS5_+0x58>)
 8004d44:	2160      	movs	r1, #96	; 0x60
 8004d46:	4806      	ldr	r0, [pc, #24]	; (8004d60 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EEC1ERKS3_RKS5_+0x5c>)
 8004d48:	f018 f974 	bl	801d034 <__assert_func>
 8004d4c:	bf00      	nop
    }
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	4618      	mov	r0, r3
 8004d52:	3714      	adds	r7, #20
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd90      	pop	{r4, r7, pc}
 8004d58:	0801f15c 	.word	0x0801f15c
 8004d5c:	0801f750 	.word	0x0801f750
 8004d60:	0801f4ac 	.word	0x0801f4ac

08004d64 <_ZNK5Eigen9EigenBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEE7derivedEv>:
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	4618      	mov	r0, r3
 8004d70:	370c      	adds	r7, #12
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr

08004d7a <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>:
  EIGEN_EMPTY_STRUCT_CTOR(scalar_sum_op)
 8004d7a:	b480      	push	{r7}
 8004d7c:	b083      	sub	sp, #12
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4618      	mov	r0, r3
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1Ev>:
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f001 f8b2 	bl	8005f02 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1Ev>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4618      	mov	r0, r3
 8004da2:	3708      	adds	r7, #8
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_NS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f7ff ffed 	bl	8004d90 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1Ev>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4618      	mov	r0, r3
 8004dba:	3708      	adds	r7, #8
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f001 f8a4 	bl	8005f18 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4rowsEv>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3708      	adds	r7, #8
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}

08004dda <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8004dda:	b580      	push	{r7, lr}
 8004ddc:	b082      	sub	sp, #8
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	3308      	adds	r3, #8
 8004de6:	4618      	mov	r0, r3
 8004de8:	f001 f8a4 	bl	8005f34 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8004dec:	4603      	mov	r3, r0
 8004dee:	4618      	mov	r0, r3
 8004df0:	3708      	adds	r7, #8
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
	...

08004df8 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_EC1ERSB_RSC_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8004df8:	b590      	push	{r4, r7, lr}
 8004dfa:	b085      	sub	sp, #20
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	607a      	str	r2, [r7, #4]
 8004e04:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 8004e06:	68f8      	ldr	r0, [r7, #12]
 8004e08:	f7ff ffce 	bl	8004da8 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_NS_5DenseEEC1Ev>
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	68ba      	ldr	r2, [r7, #8]
 8004e10:	ca07      	ldmia	r2, {r0, r1, r2}
 8004e12:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	60da      	str	r2, [r3, #12]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	3310      	adds	r3, #16
 8004e20:	6839      	ldr	r1, [r7, #0]
 8004e22:	4618      	mov	r0, r3
 8004e24:	f000 f828 	bl	8004e78 <_ZN5Eigen8internal13scalar_sum_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8004e28:	68b8      	ldr	r0, [r7, #8]
 8004e2a:	f7ff ffc9 	bl	8004dc0 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4rowsEv>
 8004e2e:	4604      	mov	r4, r0
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4618      	mov	r0, r3
 8004e34:	f7ff fa09 	bl	800424a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	429c      	cmp	r4, r3
 8004e3c:	d10a      	bne.n	8004e54 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_EC1ERSB_RSC_RKS3_+0x5c>
 8004e3e:	68b8      	ldr	r0, [r7, #8]
 8004e40:	f7ff ffcb 	bl	8004dda <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4colsEv>
 8004e44:	4604      	mov	r4, r0
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f7ff f9f3 	bl	8004234 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	429c      	cmp	r4, r3
 8004e52:	d005      	beq.n	8004e60 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_EC1ERSB_RSC_RKS3_+0x68>
 8004e54:	4b05      	ldr	r3, [pc, #20]	; (8004e6c <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_EC1ERSB_RSC_RKS3_+0x74>)
 8004e56:	4a06      	ldr	r2, [pc, #24]	; (8004e70 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_EC1ERSB_RSC_RKS3_+0x78>)
 8004e58:	2174      	movs	r1, #116	; 0x74
 8004e5a:	4806      	ldr	r0, [pc, #24]	; (8004e74 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_EC1ERSB_RSC_RKS3_+0x7c>)
 8004e5c:	f018 f8ea 	bl	801d034 <__assert_func>
    }
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	4618      	mov	r0, r3
 8004e64:	3714      	adds	r7, #20
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd90      	pop	{r4, r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	0801ee9c 	.word	0x0801ee9c
 8004e70:	0801f8fc 	.word	0x0801f8fc
 8004e74:	0801f100 	.word	0x0801f100

08004e78 <_ZN5Eigen8internal13scalar_sum_opIffEC1ERKS2_>:
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4618      	mov	r0, r3
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4_setINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS9_IS2_S2_Li0EEENS_9TransposeIS2_EELi0EEEKS2_EEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set(const DenseBase<OtherDerived>& other)
 8004e90:	b590      	push	{r4, r7, lr}
 8004e92:	b083      	sub	sp, #12
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
      internal::call_assignment(this->derived(), other.derived());
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f7ff fea8 	bl	8004bf0 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8004ea0:	4604      	mov	r4, r0
 8004ea2:	6838      	ldr	r0, [r7, #0]
 8004ea4:	f001 f854 	bl	8005f50 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEE7derivedEv>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	4619      	mov	r1, r3
 8004eac:	4620      	mov	r0, r4
 8004eae:	f001 f85a 	bl	8005f66 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRT_RKT0_>
      return this->derived();
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f7ff fe9c 	bl	8004bf0 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8004eb8:	4603      	mov	r3, r0
    }
 8004eba:	4618      	mov	r0, r3
 8004ebc:	370c      	adds	r7, #12
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd90      	pop	{r4, r7, pc}

08004ec2 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>:
  Derived& derived() { return *static_cast<Derived*>(this); }
 8004ec2:	b480      	push	{r7}
 8004ec4:	b083      	sub	sp, #12
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4618      	mov	r0, r3
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <_ZN5Eigen10MatrixBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>:
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f001 f855 	bl	8005f90 <_ZN5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3708      	adds	r7, #8
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <_ZN5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b082      	sub	sp, #8
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f7ff ffed 	bl	8004ed8 <_ZN5Eigen10MatrixBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4618      	mov	r0, r3
 8004f02:	3708      	adds	r7, #8
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <_ZN5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f7ff ffec 	bl	8004ef0 <_ZN5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEEC1Ev>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	683a      	ldr	r2, [r7, #0]
 8004f1c:	601a      	str	r2, [r3, #0]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4618      	mov	r0, r3
 8004f22:	3708      	adds	r7, #8
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4618      	mov	r0, r3
 8004f34:	370c      	adds	r7, #12
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr

08004f3e <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEC1Ev>:
 8004f3e:	b580      	push	{r7, lr}
 8004f40:	b082      	sub	sp, #8
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f001 f82d 	bl	8005fa6 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEC1Ev>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3708      	adds	r7, #8
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}

08004f56 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0ELi3EEC1Ev>:
class dense_product_base
 8004f56:	b580      	push	{r7, lr}
 8004f58:	b082      	sub	sp, #8
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f7ff ffed 	bl	8004f3e <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEC1Ev>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4618      	mov	r0, r3
 8004f68:	3708      	adds	r7, #8
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}

08004f6e <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8004f6e:	b580      	push	{r7, lr}
 8004f70:	b082      	sub	sp, #8
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f7ff ffed 	bl	8004f56 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0ELi3EEC1Ev>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3708      	adds	r7, #8
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}

08004f86 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 8004f86:	b580      	push	{r7, lr}
 8004f88:	b082      	sub	sp, #8
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4618      	mov	r0, r3
 8004f94:	f7ff fb10 	bl	80045b8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3708      	adds	r7, #8
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
	...

08004fa4 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEC1ERKS2_RKS5_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8004fa4:	b590      	push	{r4, r7, lr}
 8004fa6:	b085      	sub	sp, #20
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	607a      	str	r2, [r7, #4]
 8004fb0:	68f8      	ldr	r0, [r7, #12]
 8004fb2:	f7ff ffdc 	bl	8004f6e <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0ENS_5DenseEEC1Ev>
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	68ba      	ldr	r2, [r7, #8]
 8004fba:	601a      	str	r2, [r3, #0]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	3304      	adds	r3, #4
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	6812      	ldr	r2, [r2, #0]
 8004fc4:	601a      	str	r2, [r3, #0]
      eigen_assert(lhs.cols() == rhs.rows()
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f7ff f933 	bl	8004234 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8004fce:	4604      	mov	r4, r0
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f7ff ffd8 	bl	8004f86 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	429c      	cmp	r4, r3
 8004fda:	d005      	beq.n	8004fe8 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEC1ERKS2_RKS5_+0x44>
 8004fdc:	4b05      	ldr	r3, [pc, #20]	; (8004ff4 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEC1ERKS2_RKS5_+0x50>)
 8004fde:	4a06      	ldr	r2, [pc, #24]	; (8004ff8 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEC1ERKS2_RKS5_+0x54>)
 8004fe0:	2160      	movs	r1, #96	; 0x60
 8004fe2:	4806      	ldr	r0, [pc, #24]	; (8004ffc <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEC1ERKS2_RKS5_+0x58>)
 8004fe4:	f018 f826 	bl	801d034 <__assert_func>
 8004fe8:	bf00      	nop
    }
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	4618      	mov	r0, r3
 8004fee:	3714      	adds	r7, #20
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd90      	pop	{r4, r7, pc}
 8004ff4:	0801f15c 	.word	0x0801f15c
 8004ff8:	0801fb70 	.word	0x0801fb70
 8004ffc:	0801f4ac 	.word	0x0801f4ac

08005000 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>:
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4618      	mov	r0, r3
 800500c:	370c      	adds	r7, #12
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr

08005016 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1Ev>:
 8005016:	b580      	push	{r7, lr}
 8005018:	b082      	sub	sp, #8
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 ffcc 	bl	8005fbc <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1Ev>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4618      	mov	r0, r3
 8005028:	3708      	adds	r7, #8
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}

0800502e <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0ELi3EEC1Ev>:
class dense_product_base
 800502e:	b580      	push	{r7, lr}
 8005030:	b082      	sub	sp, #8
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f7ff ffed 	bl	8005016 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1Ev>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4618      	mov	r0, r3
 8005040:	3708      	adds	r7, #8
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}

08005046 <_ZN5Eigen11ProductImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8005046:	b580      	push	{r7, lr}
 8005048:	b082      	sub	sp, #8
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f7ff ffed 	bl	800502e <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0ELi3EEC1Ev>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4618      	mov	r0, r3
 8005058:	3708      	adds	r7, #8
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
	...

08005060 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8005060:	b590      	push	{r4, r7, lr}
 8005062:	b085      	sub	sp, #20
 8005064:	af00      	add	r7, sp, #0
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	607a      	str	r2, [r7, #4]
 800506c:	68f8      	ldr	r0, [r7, #12]
 800506e:	f7ff ffea 	bl	8005046 <_ZN5Eigen11ProductImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0ENS_5DenseEEC1Ev>
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	68ba      	ldr	r2, [r7, #8]
 8005076:	601a      	str	r2, [r3, #0]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	4618      	mov	r0, r3
 8005082:	f7ff fa99 	bl	80045b8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8005086:	4604      	mov	r4, r0
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4618      	mov	r0, r3
 800508c:	f7ff f8dd 	bl	800424a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8005090:	4603      	mov	r3, r0
 8005092:	429c      	cmp	r4, r3
 8005094:	d005      	beq.n	80050a2 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEC1ERKS2_RKS3_+0x42>
 8005096:	4b06      	ldr	r3, [pc, #24]	; (80050b0 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEC1ERKS2_RKS3_+0x50>)
 8005098:	4a06      	ldr	r2, [pc, #24]	; (80050b4 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEC1ERKS2_RKS3_+0x54>)
 800509a:	2160      	movs	r1, #96	; 0x60
 800509c:	4806      	ldr	r0, [pc, #24]	; (80050b8 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEC1ERKS2_RKS3_+0x58>)
 800509e:	f017 ffc9 	bl	801d034 <__assert_func>
 80050a2:	bf00      	nop
    }
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	4618      	mov	r0, r3
 80050a8:	3714      	adds	r7, #20
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd90      	pop	{r4, r7, pc}
 80050ae:	bf00      	nop
 80050b0:	0801f15c 	.word	0x0801f15c
 80050b4:	0801fcbc 	.word	0x0801fcbc
 80050b8:	0801f4ac 	.word	0x0801f4ac

080050bc <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE7derivedEv>:
 80050bc:	b480      	push	{r7}
 80050be:	b083      	sub	sp, #12
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4618      	mov	r0, r3
 80050c8:	370c      	adds	r7, #12
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr

080050d2 <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEEC1Ev>:
 80050d2:	b580      	push	{r7, lr}
 80050d4:	b082      	sub	sp, #8
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f000 ff79 	bl	8005fd2 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEEC1Ev>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4618      	mov	r0, r3
 80050e4:	3708      	adds	r7, #8
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}

080050ea <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0ELi6EEC1Ev>:
class dense_product_base<Lhs, Rhs, Option, InnerProduct>
 80050ea:	b580      	push	{r7, lr}
 80050ec:	b082      	sub	sp, #8
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f7ff ffed 	bl	80050d2 <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEEC1Ev>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4618      	mov	r0, r3
 80050fc:	3708      	adds	r7, #8
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}

08005102 <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8005102:	b580      	push	{r7, lr}
 8005104:	b082      	sub	sp, #8
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f7ff ffed 	bl	80050ea <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0ELi6EEC1Ev>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4618      	mov	r0, r3
 8005114:	3708      	adds	r7, #8
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}

0800511a <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 800511a:	b580      	push	{r7, lr}
 800511c:	b082      	sub	sp, #8
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	4618      	mov	r0, r3
 8005128:	f7ff f884 	bl	8004234 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800512c:	4603      	mov	r3, r0
 800512e:	4618      	mov	r0, r3
 8005130:	3708      	adds	r7, #8
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
	...

08005138 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EEC1ERKS4_RKS6_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8005138:	b590      	push	{r4, r7, lr}
 800513a:	b085      	sub	sp, #20
 800513c:	af00      	add	r7, sp, #0
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	60b9      	str	r1, [r7, #8]
 8005142:	607a      	str	r2, [r7, #4]
 8005144:	68f8      	ldr	r0, [r7, #12]
 8005146:	f7ff ffdc 	bl	8005102 <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0ENS_5DenseEEC1Ev>
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	68ba      	ldr	r2, [r7, #8]
 800514e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005152:	e883 0003 	stmia.w	r3, {r0, r1}
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	3308      	adds	r3, #8
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	6812      	ldr	r2, [r2, #0]
 800515e:	601a      	str	r2, [r3, #0]
      eigen_assert(lhs.cols() == rhs.rows()
 8005160:	68b8      	ldr	r0, [r7, #8]
 8005162:	f7ff ffda 	bl	800511a <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4colsEv>
 8005166:	4604      	mov	r4, r0
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f7ff ff0c 	bl	8004f86 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 800516e:	4603      	mov	r3, r0
 8005170:	429c      	cmp	r4, r3
 8005172:	d005      	beq.n	8005180 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EEC1ERKS4_RKS6_+0x48>
 8005174:	4b05      	ldr	r3, [pc, #20]	; (800518c <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EEC1ERKS4_RKS6_+0x54>)
 8005176:	4a06      	ldr	r2, [pc, #24]	; (8005190 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EEC1ERKS4_RKS6_+0x58>)
 8005178:	2160      	movs	r1, #96	; 0x60
 800517a:	4806      	ldr	r0, [pc, #24]	; (8005194 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EEC1ERKS4_RKS6_+0x5c>)
 800517c:	f017 ff5a 	bl	801d034 <__assert_func>
 8005180:	bf00      	nop
    }
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	4618      	mov	r0, r3
 8005186:	3714      	adds	r7, #20
 8005188:	46bd      	mov	sp, r7
 800518a:	bd90      	pop	{r4, r7, pc}
 800518c:	0801f15c 	.word	0x0801f15c
 8005190:	0801fde4 	.word	0x0801fde4
 8005194:	0801f4ac 	.word	0x0801f4ac

08005198 <_ZNK5Eigen9EigenBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEE7derivedEv>:
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	4618      	mov	r0, r3
 80051a4:	370c      	adds	r7, #12
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr

080051ae <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>:
 80051ae:	b480      	push	{r7}
 80051b0:	b083      	sub	sp, #12
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	6078      	str	r0, [r7, #4]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4618      	mov	r0, r3
 80051ba:	370c      	adds	r7, #12
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>:
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b082      	sub	sp, #8
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f000 ff0b 	bl	8005fe8 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4618      	mov	r0, r3
 80051d6:	3708      	adds	r7, #8
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <_ZN5Eigen17CwiseBinaryOpImplINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 80051dc:	b580      	push	{r7, lr}
 80051de:	b082      	sub	sp, #8
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f7ff ffed 	bl	80051c4 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4618      	mov	r0, r3
 80051ee:	3708      	adds	r7, #8
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b082      	sub	sp, #8
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4618      	mov	r0, r3
 8005200:	f000 fefd 	bl	8005ffe <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4rowsEv>
 8005204:	4603      	mov	r3, r0
 8005206:	4618      	mov	r0, r3
 8005208:	3708      	adds	r7, #8
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}

0800520e <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 800520e:	b580      	push	{r7, lr}
 8005210:	b082      	sub	sp, #8
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	3308      	adds	r3, #8
 800521a:	4618      	mov	r0, r3
 800521c:	f000 fefd 	bl	800601a <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8005220:	4603      	mov	r3, r0
 8005222:	4618      	mov	r0, r3
 8005224:	3708      	adds	r7, #8
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}

0800522a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_storage.rows(); }
 800522a:	b580      	push	{r7, lr}
 800522c:	b082      	sub	sp, #8
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
 8005232:	f000 ff00 	bl	8006036 <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4rowsEv>
 8005236:	4603      	mov	r3, r0
 8005238:	4618      	mov	r0, r3
 800523a:	3708      	adds	r7, #8
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}

08005240 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_storage.cols(); }
 8005240:	b580      	push	{r7, lr}
 8005242:	b082      	sub	sp, #8
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	f000 fefd 	bl	8006046 <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4colsEv>
 800524c:	4603      	mov	r3, r0
 800524e:	4618      	mov	r0, r3
 8005250:	3708      	adds	r7, #8
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
	...

08005258 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERSC_RSE_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8005258:	b590      	push	{r4, r7, lr}
 800525a:	b085      	sub	sp, #20
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	607a      	str	r2, [r7, #4]
 8005264:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 8005266:	68f8      	ldr	r0, [r7, #12]
 8005268:	f7ff ffb8 	bl	80051dc <_ZN5Eigen17CwiseBinaryOpImplINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEENS_5DenseEEC1Ev>
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	68ba      	ldr	r2, [r7, #8]
 8005270:	ca07      	ldmia	r2, {r0, r1, r2}
 8005272:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	60da      	str	r2, [r3, #12]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	3310      	adds	r3, #16
 8005280:	6839      	ldr	r1, [r7, #0]
 8005282:	4618      	mov	r0, r3
 8005284:	f7ff fdf8 	bl	8004e78 <_ZN5Eigen8internal13scalar_sum_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8005288:	68b8      	ldr	r0, [r7, #8]
 800528a:	f7ff ffb3 	bl	80051f4 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4rowsEv>
 800528e:	4604      	mov	r4, r0
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4618      	mov	r0, r3
 8005294:	f7ff ffc9 	bl	800522a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8005298:	4603      	mov	r3, r0
 800529a:	429c      	cmp	r4, r3
 800529c:	d10a      	bne.n	80052b4 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERSC_RSE_RKS3_+0x5c>
 800529e:	68b8      	ldr	r0, [r7, #8]
 80052a0:	f7ff ffb5 	bl	800520e <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4colsEv>
 80052a4:	4604      	mov	r4, r0
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4618      	mov	r0, r3
 80052aa:	f7ff ffc9 	bl	8005240 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 80052ae:	4603      	mov	r3, r0
 80052b0:	429c      	cmp	r4, r3
 80052b2:	d005      	beq.n	80052c0 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERSC_RSE_RKS3_+0x68>
 80052b4:	4b05      	ldr	r3, [pc, #20]	; (80052cc <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERSC_RSE_RKS3_+0x74>)
 80052b6:	4a06      	ldr	r2, [pc, #24]	; (80052d0 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERSC_RSE_RKS3_+0x78>)
 80052b8:	2174      	movs	r1, #116	; 0x74
 80052ba:	4806      	ldr	r0, [pc, #24]	; (80052d4 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERSC_RSE_RKS3_+0x7c>)
 80052bc:	f017 feba 	bl	801d034 <__assert_func>
    }
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	4618      	mov	r0, r3
 80052c4:	3714      	adds	r7, #20
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd90      	pop	{r4, r7, pc}
 80052ca:	bf00      	nop
 80052cc:	0801ee9c 	.word	0x0801ee9c
 80052d0:	0801ff90 	.word	0x0801ff90
 80052d4:	0801f100 	.word	0x0801f100

080052d8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7derivedEv>:
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	4618      	mov	r0, r3
 80052e4:	370c      	adds	r7, #12
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr

080052ee <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 80052ee:	b580      	push	{r7, lr}
 80052f0:	b082      	sub	sp, #8
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4618      	mov	r0, r3
 80052fa:	f7ff ff7b 	bl	80051f4 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4rowsEv>
 80052fe:	4603      	mov	r3, r0
    }
 8005300:	4618      	mov	r0, r3
 8005302:	3708      	adds	r7, #8
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}

08005308 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	4618      	mov	r0, r3
 8005314:	f7ff ff7b 	bl	800520e <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4colsEv>
 8005318:	4603      	mov	r3, r0
    }
 800531a:	4618      	mov	r0, r3
 800531c:	3708      	adds	r7, #8
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}

08005322 <_ZN5Eigen10MatrixBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEC1Ev>:
 8005322:	b580      	push	{r7, lr}
 8005324:	b082      	sub	sp, #8
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 fe93 	bl	8006056 <_ZN5Eigen9DenseBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEC1Ev>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4618      	mov	r0, r3
 8005334:	3708      	adds	r7, #8
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}

0800533a <_ZN5Eigen11InverseImplINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS_5DenseEEC1Ev>:
  XprTypeNested m_xpr;
};

// Generic API dispatcher
template<typename XprType, typename StorageKind>
class InverseImpl
 800533a:	b580      	push	{r7, lr}
 800533c:	b082      	sub	sp, #8
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f7ff ffed 	bl	8005322 <_ZN5Eigen10MatrixBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEC1Ev>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4618      	mov	r0, r3
 800534c:	3708      	adds	r7, #8
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}

08005352 <_ZN5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKSG_>:
  explicit EIGEN_DEVICE_FUNC Inverse(const XprType &xpr)
 8005352:	b580      	push	{r7, lr}
 8005354:	b082      	sub	sp, #8
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
 800535a:	6039      	str	r1, [r7, #0]
    : m_xpr(xpr)
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f7ff ffec 	bl	800533a <_ZN5Eigen11InverseImplINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS_5DenseEEC1Ev>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6839      	ldr	r1, [r7, #0]
 8005366:	4618      	mov	r0, r3
 8005368:	f7fe fc9b 	bl	8003ca2 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERKSF_>
  {}
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4618      	mov	r0, r3
 8005370:	3708      	adds	r7, #8
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}

08005376 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEE7derivedEv>:
 8005376:	b480      	push	{r7}
 8005378:	b083      	sub	sp, #12
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4618      	mov	r0, r3
 8005382:	370c      	adds	r7, #12
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <_ZNK5Eigen9EigenBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEE7derivedEv>:
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4618      	mov	r0, r3
 8005398:	370c      	adds	r7, #12
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr

080053a2 <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEC1Ev>:
 80053a2:	b580      	push	{r7, lr}
 80053a4:	b082      	sub	sp, #8
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 fe5e 	bl	800606c <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEC1Ev>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	4618      	mov	r0, r3
 80053b4:	3708      	adds	r7, #8
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}

080053ba <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0ELi4EEC1Ev>:
class dense_product_base
 80053ba:	b580      	push	{r7, lr}
 80053bc:	b082      	sub	sp, #8
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f7ff ffed 	bl	80053a2 <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEC1Ev>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4618      	mov	r0, r3
 80053cc:	3708      	adds	r7, #8
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}

080053d2 <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 80053d2:	b580      	push	{r7, lr}
 80053d4:	b082      	sub	sp, #8
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f7ff ffed 	bl	80053ba <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0ELi4EEC1Ev>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4618      	mov	r0, r3
 80053e4:	3708      	adds	r7, #8
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}

080053ea <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 80053ea:	b580      	push	{r7, lr}
 80053ec:	b082      	sub	sp, #8
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	3304      	adds	r3, #4
 80053f6:	4618      	mov	r0, r3
 80053f8:	f000 fe0f 	bl	800601a <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 80053fc:	4603      	mov	r3, r0
 80053fe:	4618      	mov	r0, r3
 8005400:	3708      	adds	r7, #8
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}

08005406 <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4rowsEv>:
  EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR  Index rows() const EIGEN_NOEXCEPT { return m_xpr.cols(); }
 8005406:	b580      	push	{r7, lr}
 8005408:	b082      	sub	sp, #8
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4618      	mov	r0, r3
 8005412:	f7ff ff79 	bl	8005308 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 8005416:	4603      	mov	r3, r0
 8005418:	4618      	mov	r0, r3
 800541a:	3708      	adds	r7, #8
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}

08005420 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEC1ERKS6_RKSI_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8005420:	b590      	push	{r4, r7, lr}
 8005422:	b085      	sub	sp, #20
 8005424:	af00      	add	r7, sp, #0
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	607a      	str	r2, [r7, #4]
 800542c:	68f8      	ldr	r0, [r7, #12]
 800542e:	f7ff ffd0 	bl	80053d2 <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0ENS_5DenseEEC1Ev>
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	68ba      	ldr	r2, [r7, #8]
 8005436:	e892 0003 	ldmia.w	r2, {r0, r1}
 800543a:	e883 0003 	stmia.w	r3, {r0, r1}
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	3308      	adds	r3, #8
 8005442:	6879      	ldr	r1, [r7, #4]
 8005444:	4618      	mov	r0, r3
 8005446:	f7fe fc71 	bl	8003d2c <_ZN5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKSH_>
      eigen_assert(lhs.cols() == rhs.rows()
 800544a:	68b8      	ldr	r0, [r7, #8]
 800544c:	f7ff ffcd 	bl	80053ea <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4colsEv>
 8005450:	4604      	mov	r4, r0
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f7ff ffd7 	bl	8005406 <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4rowsEv>
 8005458:	4603      	mov	r3, r0
 800545a:	429c      	cmp	r4, r3
 800545c:	d005      	beq.n	800546a <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEC1ERKS6_RKSI_+0x4a>
 800545e:	4b06      	ldr	r3, [pc, #24]	; (8005478 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEC1ERKS6_RKSI_+0x58>)
 8005460:	4a06      	ldr	r2, [pc, #24]	; (800547c <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEC1ERKS6_RKSI_+0x5c>)
 8005462:	2160      	movs	r1, #96	; 0x60
 8005464:	4806      	ldr	r0, [pc, #24]	; (8005480 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEC1ERKS6_RKSI_+0x60>)
 8005466:	f017 fde5 	bl	801d034 <__assert_func>
 800546a:	bf00      	nop
    }
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	4618      	mov	r0, r3
 8005470:	3714      	adds	r7, #20
 8005472:	46bd      	mov	sp, r7
 8005474:	bd90      	pop	{r4, r7, pc}
 8005476:	bf00      	nop
 8005478:	0801f15c 	.word	0x0801f15c
 800547c:	08020204 	.word	0x08020204
 8005480:	0801f4ac 	.word	0x0801f4ac

08005484 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4_setINS_7ProductINS5_INS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS5_INS5_IS8_S6_Li0EEES9_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set(const DenseBase<OtherDerived>& other)
 8005484:	b590      	push	{r4, r7, lr}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]
      internal::call_assignment(this->derived(), other.derived());
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f7ff fa12 	bl	80048b8 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8005494:	4604      	mov	r4, r0
 8005496:	6838      	ldr	r0, [r7, #0]
 8005498:	f000 fdf3 	bl	8006082 <_ZNK5Eigen9EigenBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEE7derivedEv>
 800549c:	4603      	mov	r3, r0
 800549e:	4619      	mov	r1, r3
 80054a0:	4620      	mov	r0, r4
 80054a2:	f000 fdf9 	bl	8006098 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEEvRT_RKT0_>
      return this->derived();
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f7ff fa06 	bl	80048b8 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80054ac:	4603      	mov	r3, r0
    }
 80054ae:	4618      	mov	r0, r3
 80054b0:	370c      	adds	r7, #12
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd90      	pop	{r4, r7, pc}

080054b6 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>:
 80054b6:	b580      	push	{r7, lr}
 80054b8:	b082      	sub	sp, #8
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 fdff 	bl	80060c2 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4618      	mov	r0, r3
 80054c8:	3708      	adds	r7, #8
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}

080054ce <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0ELi6EEC1Ev>:
class dense_product_base<Lhs, Rhs, Option, InnerProduct>
 80054ce:	b580      	push	{r7, lr}
 80054d0:	b082      	sub	sp, #8
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f7ff ffed 	bl	80054b6 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4618      	mov	r0, r3
 80054e0:	3708      	adds	r7, #8
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}

080054e6 <_ZN5Eigen11ProductImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 80054e6:	b580      	push	{r7, lr}
 80054e8:	b082      	sub	sp, #8
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f7ff ffed 	bl	80054ce <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0ELi6EEC1Ev>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4618      	mov	r0, r3
 80054f8:	3708      	adds	r7, #8
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
	...

08005500 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8005500:	b590      	push	{r4, r7, lr}
 8005502:	b085      	sub	sp, #20
 8005504:	af00      	add	r7, sp, #0
 8005506:	60f8      	str	r0, [r7, #12]
 8005508:	60b9      	str	r1, [r7, #8]
 800550a:	607a      	str	r2, [r7, #4]
 800550c:	68f8      	ldr	r0, [r7, #12]
 800550e:	f7ff ffea 	bl	80054e6 <_ZN5Eigen11ProductImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0ENS_5DenseEEC1Ev>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	68ba      	ldr	r2, [r7, #8]
 8005516:	601a      	str	r2, [r3, #0]
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	4618      	mov	r0, r3
 8005522:	f7ff f849 	bl	80045b8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8005526:	4604      	mov	r4, r0
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	4618      	mov	r0, r3
 800552c:	f7fe ff33 	bl	8004396 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8005530:	4603      	mov	r3, r0
 8005532:	429c      	cmp	r4, r3
 8005534:	d005      	beq.n	8005542 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x42>
 8005536:	4b06      	ldr	r3, [pc, #24]	; (8005550 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x50>)
 8005538:	4a06      	ldr	r2, [pc, #24]	; (8005554 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x54>)
 800553a:	2160      	movs	r1, #96	; 0x60
 800553c:	4806      	ldr	r0, [pc, #24]	; (8005558 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x58>)
 800553e:	f017 fd79 	bl	801d034 <__assert_func>
 8005542:	bf00      	nop
    }
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	4618      	mov	r0, r3
 8005548:	3714      	adds	r7, #20
 800554a:	46bd      	mov	sp, r7
 800554c:	bd90      	pop	{r4, r7, pc}
 800554e:	bf00      	nop
 8005550:	0801f15c 	.word	0x0801f15c
 8005554:	0802058c 	.word	0x0802058c
 8005558:	0801f4ac 	.word	0x0801f4ac

0800555c <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE7derivedEv>:
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4618      	mov	r0, r3
 8005568:	370c      	adds	r7, #12
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr

08005572 <_ZN5Eigen8internal20scalar_difference_opIffEC1Ev>:
template<typename LhsScalar,typename RhsScalar>
struct scalar_difference_op : binary_op_base<LhsScalar,RhsScalar>
{
  typedef typename ScalarBinaryOpTraits<LhsScalar,RhsScalar,scalar_difference_op>::ReturnType result_type;
#ifndef EIGEN_SCALAR_BINARY_OP_PLUGIN
  EIGEN_EMPTY_STRUCT_CTOR(scalar_difference_op)
 8005572:	b480      	push	{r7}
 8005574:	b083      	sub	sp, #12
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4618      	mov	r0, r3
 800557e:	370c      	adds	r7, #12
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEC1Ev>:
 8005588:	b580      	push	{r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f000 fda1 	bl	80060d8 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEC1Ev>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4618      	mov	r0, r3
 800559a:	3708      	adds	r7, #8
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}

080055a0 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b082      	sub	sp, #8
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f7ff ffed 	bl	8005588 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEC1Ev>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4618      	mov	r0, r3
 80055b2:	3708      	adds	r7, #8
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b082      	sub	sp, #8
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4618      	mov	r0, r3
 80055c6:	f7ff f802 	bl	80045ce <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 80055ca:	4603      	mov	r3, r0
 80055cc:	4618      	mov	r0, r3
 80055ce:	3708      	adds	r7, #8
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	4618      	mov	r0, r3
 80055e2:	f7fe fecd 	bl	8004380 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80055e6:	4603      	mov	r3, r0
 80055e8:	4618      	mov	r0, r3
 80055ea:	3708      	adds	r7, #8
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERS6_RSB_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 80055f0:	b590      	push	{r4, r7, lr}
 80055f2:	b085      	sub	sp, #20
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	60f8      	str	r0, [r7, #12]
 80055f8:	60b9      	str	r1, [r7, #8]
 80055fa:	607a      	str	r2, [r7, #4]
 80055fc:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 80055fe:	68f8      	ldr	r0, [r7, #12]
 8005600:	f7ff ffce 	bl	80055a0 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS_5DenseEEC1Ev>
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	68ba      	ldr	r2, [r7, #8]
 8005608:	601a      	str	r2, [r3, #0]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	3304      	adds	r3, #4
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005614:	e883 0003 	stmia.w	r3, {r0, r1}
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	330c      	adds	r3, #12
 800561c:	6839      	ldr	r1, [r7, #0]
 800561e:	4618      	mov	r0, r3
 8005620:	f000 f828 	bl	8005674 <_ZN5Eigen8internal20scalar_difference_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	4618      	mov	r0, r3
 8005628:	f7ff fdff 	bl	800522a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800562c:	4604      	mov	r4, r0
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f7ff ffc2 	bl	80055b8 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4rowsEv>
 8005634:	4603      	mov	r3, r0
 8005636:	429c      	cmp	r4, r3
 8005638:	d10a      	bne.n	8005650 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERS6_RSB_RKS3_+0x60>
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	4618      	mov	r0, r3
 800563e:	f7ff fdff 	bl	8005240 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 8005642:	4604      	mov	r4, r0
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f7ff ffc5 	bl	80055d4 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4colsEv>
 800564a:	4603      	mov	r3, r0
 800564c:	429c      	cmp	r4, r3
 800564e:	d005      	beq.n	800565c <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERS6_RSB_RKS3_+0x6c>
 8005650:	4b05      	ldr	r3, [pc, #20]	; (8005668 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERS6_RSB_RKS3_+0x78>)
 8005652:	4a06      	ldr	r2, [pc, #24]	; (800566c <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERS6_RSB_RKS3_+0x7c>)
 8005654:	2174      	movs	r1, #116	; 0x74
 8005656:	4806      	ldr	r0, [pc, #24]	; (8005670 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERS6_RSB_RKS3_+0x80>)
 8005658:	f017 fcec 	bl	801d034 <__assert_func>
    }
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	4618      	mov	r0, r3
 8005660:	3714      	adds	r7, #20
 8005662:	46bd      	mov	sp, r7
 8005664:	bd90      	pop	{r4, r7, pc}
 8005666:	bf00      	nop
 8005668:	0801ee9c 	.word	0x0801ee9c
 800566c:	080206b4 	.word	0x080206b4
 8005670:	0801f100 	.word	0x0801f100

08005674 <_ZN5Eigen8internal20scalar_difference_opIffEC1ERKS2_>:
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4618      	mov	r0, r3
 8005682:	370c      	adds	r7, #12
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr

0800568c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEE7derivedEv>:
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4618      	mov	r0, r3
 8005698:	370c      	adds	r7, #12
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr

080056a2 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEC1Ev>:
 80056a2:	b580      	push	{r7, lr}
 80056a4:	b082      	sub	sp, #8
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f000 fd1f 	bl	80060ee <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEC1Ev>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4618      	mov	r0, r3
 80056b4:	3708      	adds	r7, #8
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}

080056ba <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0ELi4EEC1Ev>:
class dense_product_base
 80056ba:	b580      	push	{r7, lr}
 80056bc:	b082      	sub	sp, #8
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f7ff ffed 	bl	80056a2 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEC1Ev>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4618      	mov	r0, r3
 80056cc:	3708      	adds	r7, #8
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}

080056d2 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 80056d2:	b580      	push	{r7, lr}
 80056d4:	b082      	sub	sp, #8
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	6078      	str	r0, [r7, #4]
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f7ff ffed 	bl	80056ba <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0ELi4EEC1Ev>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4618      	mov	r0, r3
 80056e4:	3708      	adds	r7, #8
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}

080056ea <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 80056ea:	b580      	push	{r7, lr}
 80056ec:	b082      	sub	sp, #8
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4618      	mov	r0, r3
 80056f8:	f7ff fd97 	bl	800522a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 80056fc:	4603      	mov	r3, r0
    }
 80056fe:	4618      	mov	r0, r3
 8005700:	3708      	adds	r7, #8
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
	...

08005708 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKS2_RKSC_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8005708:	b590      	push	{r4, r7, lr}
 800570a:	b085      	sub	sp, #20
 800570c:	af00      	add	r7, sp, #0
 800570e:	60f8      	str	r0, [r7, #12]
 8005710:	60b9      	str	r1, [r7, #8]
 8005712:	607a      	str	r2, [r7, #4]
 8005714:	68f8      	ldr	r0, [r7, #12]
 8005716:	f7ff ffdc 	bl	80056d2 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0ENS_5DenseEEC1Ev>
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	68ba      	ldr	r2, [r7, #8]
 800571e:	601a      	str	r2, [r3, #0]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	3304      	adds	r3, #4
 8005724:	6879      	ldr	r1, [r7, #4]
 8005726:	4618      	mov	r0, r3
 8005728:	f7fe fb6b 	bl	8003e02 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERKSC_>
      eigen_assert(lhs.cols() == rhs.rows()
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	4618      	mov	r0, r3
 8005730:	f7fe fe26 	bl	8004380 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8005734:	4604      	mov	r4, r0
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f7ff ffd7 	bl	80056ea <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE4rowsEv>
 800573c:	4603      	mov	r3, r0
 800573e:	429c      	cmp	r4, r3
 8005740:	d005      	beq.n	800574e <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKS2_RKSC_+0x46>
 8005742:	4b06      	ldr	r3, [pc, #24]	; (800575c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKS2_RKSC_+0x54>)
 8005744:	4a06      	ldr	r2, [pc, #24]	; (8005760 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKS2_RKSC_+0x58>)
 8005746:	2160      	movs	r1, #96	; 0x60
 8005748:	4806      	ldr	r0, [pc, #24]	; (8005764 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKS2_RKSC_+0x5c>)
 800574a:	f017 fc73 	bl	801d034 <__assert_func>
 800574e:	bf00      	nop
    }
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	4618      	mov	r0, r3
 8005754:	3714      	adds	r7, #20
 8005756:	46bd      	mov	sp, r7
 8005758:	bd90      	pop	{r4, r7, pc}
 800575a:	bf00      	nop
 800575c:	0801f15c 	.word	0x0801f15c
 8005760:	080208ac 	.word	0x080208ac
 8005764:	0801f4ac 	.word	0x0801f4ac

08005768 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEE7derivedEv>:
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4618      	mov	r0, r3
 8005774:	370c      	adds	r7, #12
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr

0800577e <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS6_NS1_INS2_20scalar_difference_opIffEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS5_IfLi1ELi3ELi1ELi1ELi3EEES6_Li0EEEEELi0EEEEEEC1Ev>:
 800577e:	b580      	push	{r7, lr}
 8005780:	b082      	sub	sp, #8
 8005782:	af00      	add	r7, sp, #0
 8005784:	6078      	str	r0, [r7, #4]
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f000 fcbc 	bl	8006104 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS6_NS1_INS2_20scalar_difference_opIffEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS5_IfLi1ELi3ELi1ELi1ELi3EEES6_Li0EEEEELi0EEEEEEC1Ev>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4618      	mov	r0, r3
 8005790:	3708      	adds	r7, #8
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}

08005796 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS_13CwiseBinaryOpINS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 8005796:	b580      	push	{r7, lr}
 8005798:	b082      	sub	sp, #8
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f7ff ffed 	bl	800577e <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS6_NS1_INS2_20scalar_difference_opIffEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS5_IfLi1ELi3ELi1ELi1ELi3EEES6_Li0EEEEELi0EEEEEEC1Ev>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4618      	mov	r0, r3
 80057a8:	3708      	adds	r7, #8
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}

080057ae <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 80057ae:	b580      	push	{r7, lr}
 80057b0:	b082      	sub	sp, #8
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4618      	mov	r0, r3
 80057bc:	f7fe fdeb 	bl	8004396 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80057c0:	4603      	mov	r3, r0
 80057c2:	4618      	mov	r0, r3
 80057c4:	3708      	adds	r7, #8
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}

080057ca <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 80057ca:	b580      	push	{r7, lr}
 80057cc:	b082      	sub	sp, #8
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	3304      	adds	r3, #4
 80057d6:	4618      	mov	r0, r3
 80057d8:	f000 fc9f 	bl	800611a <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE4colsEv>
 80057dc:	4603      	mov	r3, r0
 80057de:	4618      	mov	r0, r3
 80057e0:	3708      	adds	r7, #8
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
	...

080057e8 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEEC1ERS6_RSH_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 80057e8:	b590      	push	{r4, r7, lr}
 80057ea:	b085      	sub	sp, #20
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	607a      	str	r2, [r7, #4]
 80057f4:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 80057f6:	68f8      	ldr	r0, [r7, #12]
 80057f8:	f7ff ffcd 	bl	8005796 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS_13CwiseBinaryOpINS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEENS_5DenseEEC1Ev>
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	68ba      	ldr	r2, [r7, #8]
 8005800:	601a      	str	r2, [r3, #0]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	3304      	adds	r3, #4
 8005806:	6879      	ldr	r1, [r7, #4]
 8005808:	4618      	mov	r0, r3
 800580a:	f7fe fb30 	bl	8003e6e <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKSD_>
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	3318      	adds	r3, #24
 8005812:	6839      	ldr	r1, [r7, #0]
 8005814:	4618      	mov	r0, r3
 8005816:	f7ff fb2f 	bl	8004e78 <_ZN5Eigen8internal13scalar_sum_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	4618      	mov	r0, r3
 800581e:	f7fe fdba 	bl	8004396 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8005822:	4604      	mov	r4, r0
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f7ff ffc2 	bl	80057ae <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE4rowsEv>
 800582a:	4603      	mov	r3, r0
 800582c:	429c      	cmp	r4, r3
 800582e:	d10a      	bne.n	8005846 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEEC1ERS6_RSH_RKS3_+0x5e>
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	4618      	mov	r0, r3
 8005834:	f7fe fda4 	bl	8004380 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8005838:	4604      	mov	r4, r0
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f7ff ffc5 	bl	80057ca <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE4colsEv>
 8005840:	4603      	mov	r3, r0
 8005842:	429c      	cmp	r4, r3
 8005844:	d005      	beq.n	8005852 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEEC1ERS6_RSH_RKS3_+0x6a>
 8005846:	4b05      	ldr	r3, [pc, #20]	; (800585c <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEEC1ERS6_RSH_RKS3_+0x74>)
 8005848:	4a05      	ldr	r2, [pc, #20]	; (8005860 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEEC1ERS6_RSH_RKS3_+0x78>)
 800584a:	2174      	movs	r1, #116	; 0x74
 800584c:	4805      	ldr	r0, [pc, #20]	; (8005864 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEEC1ERS6_RSH_RKS3_+0x7c>)
 800584e:	f017 fbf1 	bl	801d034 <__assert_func>
    }
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	4618      	mov	r0, r3
 8005856:	3714      	adds	r7, #20
 8005858:	46bd      	mov	sp, r7
 800585a:	bd90      	pop	{r4, r7, pc}
 800585c:	0801ee9c 	.word	0x0801ee9c
 8005860:	08020b18 	.word	0x08020b18
 8005864:	0801f100 	.word	0x0801f100

08005868 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4_setINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS2_KNS_7ProductIS2_NS5_INS6_20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set(const DenseBase<OtherDerived>& other)
 8005868:	b590      	push	{r4, r7, lr}
 800586a:	b083      	sub	sp, #12
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
      internal::call_assignment(this->derived(), other.derived());
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f7ff f820 	bl	80048b8 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8005878:	4604      	mov	r4, r0
 800587a:	6838      	ldr	r0, [r7, #0]
 800587c:	f000 fc5b 	bl	8006136 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS6_NS1_INS2_20scalar_difference_opIffEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS5_IfLi1ELi3ELi1ELi1ELi3EEES6_Li0EEEEELi0EEEEEE7derivedEv>
 8005880:	4603      	mov	r3, r0
 8005882:	4619      	mov	r1, r3
 8005884:	4620      	mov	r0, r4
 8005886:	f000 fc61 	bl	800614c <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKS3_KNS_7ProductIS3_NS4_INS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEEEEvRT_RKT0_>
      return this->derived();
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f7ff f814 	bl	80048b8 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8005890:	4603      	mov	r3, r0
    }
 8005892:	4618      	mov	r0, r3
 8005894:	370c      	adds	r7, #12
 8005896:	46bd      	mov	sp, r7
 8005898:	bd90      	pop	{r4, r7, pc}

0800589a <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1Ev>:
 800589a:	b580      	push	{r7, lr}
 800589c:	b082      	sub	sp, #8
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 fc67 	bl	8006176 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1Ev>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	4618      	mov	r0, r3
 80058ac:	3708      	adds	r7, #8
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}

080058b2 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0ELi4EEC1Ev>:
class dense_product_base
 80058b2:	b580      	push	{r7, lr}
 80058b4:	b082      	sub	sp, #8
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f7ff ffed 	bl	800589a <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1Ev>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4618      	mov	r0, r3
 80058c4:	3708      	adds	r7, #8
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}

080058ca <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 80058ca:	b580      	push	{r7, lr}
 80058cc:	b082      	sub	sp, #8
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f7ff ffed 	bl	80058b2 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0ELi4EEC1Ev>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4618      	mov	r0, r3
 80058dc:	3708      	adds	r7, #8
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
	...

080058e4 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 80058e4:	b590      	push	{r4, r7, lr}
 80058e6:	b085      	sub	sp, #20
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	607a      	str	r2, [r7, #4]
 80058f0:	68f8      	ldr	r0, [r7, #12]
 80058f2:	f7ff ffea 	bl	80058ca <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0ENS_5DenseEEC1Ev>
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	68ba      	ldr	r2, [r7, #8]
 80058fa:	601a      	str	r2, [r3, #0]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	4618      	mov	r0, r3
 8005906:	f7fe fd3b 	bl	8004380 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800590a:	4604      	mov	r4, r0
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	4618      	mov	r0, r3
 8005910:	f7fe fe5d 	bl	80045ce <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8005914:	4603      	mov	r3, r0
 8005916:	429c      	cmp	r4, r3
 8005918:	d005      	beq.n	8005926 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEC1ERKS2_RKS3_+0x42>
 800591a:	4b06      	ldr	r3, [pc, #24]	; (8005934 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEC1ERKS2_RKS3_+0x50>)
 800591c:	4a06      	ldr	r2, [pc, #24]	; (8005938 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEC1ERKS2_RKS3_+0x54>)
 800591e:	2160      	movs	r1, #96	; 0x60
 8005920:	4806      	ldr	r0, [pc, #24]	; (800593c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEC1ERKS2_RKS3_+0x58>)
 8005922:	f017 fb87 	bl	801d034 <__assert_func>
 8005926:	bf00      	nop
    }
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	4618      	mov	r0, r3
 800592c:	3714      	adds	r7, #20
 800592e:	46bd      	mov	sp, r7
 8005930:	bd90      	pop	{r4, r7, pc}
 8005932:	bf00      	nop
 8005934:	0801f15c 	.word	0x0801f15c
 8005938:	08020e4c 	.word	0x08020e4c
 800593c:	0801f4ac 	.word	0x0801f4ac

08005940 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE7derivedEv>:
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4618      	mov	r0, r3
 800594c:	370c      	adds	r7, #12
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr

08005956 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEC1Ev>:
 8005956:	b580      	push	{r7, lr}
 8005958:	b082      	sub	sp, #8
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 fc14 	bl	800618c <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEC1Ev>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	4618      	mov	r0, r3
 8005968:	3708      	adds	r7, #8
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}

0800596e <_ZN5Eigen17CwiseBinaryOpImplINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 800596e:	b580      	push	{r7, lr}
 8005970:	b082      	sub	sp, #8
 8005972:	af00      	add	r7, sp, #0
 8005974:	6078      	str	r0, [r7, #4]
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f7ff ffed 	bl	8005956 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEC1Ev>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4618      	mov	r0, r3
 8005980:	3708      	adds	r7, #8
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}

08005986 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8005986:	b580      	push	{r7, lr}
 8005988:	b082      	sub	sp, #8
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4618      	mov	r0, r3
 8005994:	f7fe fcff 	bl	8004396 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8005998:	4603      	mov	r3, r0
 800599a:	4618      	mov	r0, r3
 800599c:	3708      	adds	r7, #8
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}

080059a2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 80059a2:	b580      	push	{r7, lr}
 80059a4:	b082      	sub	sp, #8
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	4618      	mov	r0, r3
 80059b0:	f7fe fe02 	bl	80045b8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 80059b4:	4603      	mov	r3, r0
 80059b6:	4618      	mov	r0, r3
 80059b8:	3708      	adds	r7, #8
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
	...

080059c0 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERS6_RSB_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 80059c0:	b590      	push	{r4, r7, lr}
 80059c2:	b085      	sub	sp, #20
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	60f8      	str	r0, [r7, #12]
 80059c8:	60b9      	str	r1, [r7, #8]
 80059ca:	607a      	str	r2, [r7, #4]
 80059cc:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 80059ce:	68f8      	ldr	r0, [r7, #12]
 80059d0:	f7ff ffcd 	bl	800596e <_ZN5Eigen17CwiseBinaryOpImplINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS_5DenseEEC1Ev>
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	68ba      	ldr	r2, [r7, #8]
 80059d8:	601a      	str	r2, [r3, #0]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	3304      	adds	r3, #4
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80059e4:	e883 0003 	stmia.w	r3, {r0, r1}
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	330c      	adds	r3, #12
 80059ec:	6839      	ldr	r1, [r7, #0]
 80059ee:	4618      	mov	r0, r3
 80059f0:	f7ff fe40 	bl	8005674 <_ZN5Eigen8internal20scalar_difference_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	4618      	mov	r0, r3
 80059f8:	f7fe fc27 	bl	800424a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80059fc:	4604      	mov	r4, r0
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f7ff ffc1 	bl	8005986 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE4rowsEv>
 8005a04:	4603      	mov	r3, r0
 8005a06:	429c      	cmp	r4, r3
 8005a08:	d10a      	bne.n	8005a20 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERS6_RSB_RKS3_+0x60>
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f7fe fc11 	bl	8004234 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8005a12:	4604      	mov	r4, r0
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f7ff ffc4 	bl	80059a2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE4colsEv>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	429c      	cmp	r4, r3
 8005a1e:	d005      	beq.n	8005a2c <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERS6_RSB_RKS3_+0x6c>
 8005a20:	4b05      	ldr	r3, [pc, #20]	; (8005a38 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERS6_RSB_RKS3_+0x78>)
 8005a22:	4a06      	ldr	r2, [pc, #24]	; (8005a3c <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERS6_RSB_RKS3_+0x7c>)
 8005a24:	2174      	movs	r1, #116	; 0x74
 8005a26:	4806      	ldr	r0, [pc, #24]	; (8005a40 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERS6_RSB_RKS3_+0x80>)
 8005a28:	f017 fb04 	bl	801d034 <__assert_func>
    }
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3714      	adds	r7, #20
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd90      	pop	{r4, r7, pc}
 8005a36:	bf00      	nop
 8005a38:	0801ee9c 	.word	0x0801ee9c
 8005a3c:	08020f74 	.word	0x08020f74
 8005a40:	0801f100 	.word	0x0801f100

08005a44 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEE7derivedEv>:
 8005a44:	b480      	push	{r7}
 8005a46:	b083      	sub	sp, #12
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4618      	mov	r0, r3
 8005a50:	370c      	adds	r7, #12
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr

08005a5a <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li0EEEEC1Ev>:
 8005a5a:	b580      	push	{r7, lr}
 8005a5c:	b082      	sub	sp, #8
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f000 fb9d 	bl	80061a2 <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li0EEEEC1Ev>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3708      	adds	r7, #8
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}

08005a72 <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0ELi3EEC1Ev>:
class dense_product_base
 8005a72:	b580      	push	{r7, lr}
 8005a74:	b082      	sub	sp, #8
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f7ff ffed 	bl	8005a5a <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li0EEEEC1Ev>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4618      	mov	r0, r3
 8005a84:	3708      	adds	r7, #8
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}

08005a8a <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8005a8a:	b580      	push	{r7, lr}
 8005a8c:	b082      	sub	sp, #8
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	6078      	str	r0, [r7, #4]
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f7ff ffed 	bl	8005a72 <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0ELi3EEC1Ev>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3708      	adds	r7, #8
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}

08005aa2 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 8005aa2:	b580      	push	{r7, lr}
 8005aa4:	b082      	sub	sp, #8
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f7fe fbc0 	bl	8004234 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8005ab4:	4603      	mov	r3, r0
    }
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3708      	adds	r7, #8
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}
	...

08005ac0 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EEC1ERKSC_RS7_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8005ac0:	b590      	push	{r4, r7, lr}
 8005ac2:	b085      	sub	sp, #20
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	60b9      	str	r1, [r7, #8]
 8005aca:	607a      	str	r2, [r7, #4]
 8005acc:	68f8      	ldr	r0, [r7, #12]
 8005ace:	f7ff ffdc 	bl	8005a8a <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0ENS_5DenseEEC1Ev>
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	68b9      	ldr	r1, [r7, #8]
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f7fe fa41 	bl	8003f5e <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERKSC_>
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	611a      	str	r2, [r3, #16]
      eigen_assert(lhs.cols() == rhs.rows()
 8005ae2:	68b8      	ldr	r0, [r7, #8]
 8005ae4:	f7ff ffdd 	bl	8005aa2 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE4colsEv>
 8005ae8:	4604      	mov	r4, r0
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4618      	mov	r0, r3
 8005aee:	f7fe fbac 	bl	800424a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8005af2:	4603      	mov	r3, r0
 8005af4:	429c      	cmp	r4, r3
 8005af6:	d005      	beq.n	8005b04 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EEC1ERKSC_RS7_+0x44>
 8005af8:	4b05      	ldr	r3, [pc, #20]	; (8005b10 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EEC1ERKSC_RS7_+0x50>)
 8005afa:	4a06      	ldr	r2, [pc, #24]	; (8005b14 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EEC1ERKSC_RS7_+0x54>)
 8005afc:	2160      	movs	r1, #96	; 0x60
 8005afe:	4806      	ldr	r0, [pc, #24]	; (8005b18 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EEC1ERKSC_RS7_+0x58>)
 8005b00:	f017 fa98 	bl	801d034 <__assert_func>
 8005b04:	bf00      	nop
    }
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3714      	adds	r7, #20
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd90      	pop	{r4, r7, pc}
 8005b10:	0801f15c 	.word	0x0801f15c
 8005b14:	0802116c 	.word	0x0802116c
 8005b18:	0801f4ac 	.word	0x0801f4ac

08005b1c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4_setINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS5_INS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set(const DenseBase<OtherDerived>& other)
 8005b1c:	b590      	push	{r4, r7, lr}
 8005b1e:	b083      	sub	sp, #12
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]
      internal::call_assignment(this->derived(), other.derived());
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f7ff f862 	bl	8004bf0 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8005b2c:	4604      	mov	r4, r0
 8005b2e:	6838      	ldr	r0, [r7, #0]
 8005b30:	f000 fb42 	bl	80061b8 <_ZNK5Eigen9EigenBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li0EEEE7derivedEv>
 8005b34:	4603      	mov	r3, r0
 8005b36:	4619      	mov	r1, r3
 8005b38:	4620      	mov	r0, r4
 8005b3a:	f000 fb48 	bl	80061ce <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEEEEvRT_RKT0_>
      return this->derived();
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f7ff f856 	bl	8004bf0 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8005b44:	4603      	mov	r3, r0
    }
 8005b46:	4618      	mov	r0, r3
 8005b48:	370c      	adds	r7, #12
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd90      	pop	{r4, r7, pc}

08005b4e <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>:
    }

  protected:
    EIGEN_DEFAULT_COPY_CONSTRUCTOR(DenseBase)
    /** Default constructor. Do nothing. */
    EIGEN_DEVICE_FUNC DenseBase()
 8005b4e:	b480      	push	{r7}
 8005b50:	b083      	sub	sp, #12
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
#ifdef EIGEN_INTERNAL_DEBUGGING
      EIGEN_STATIC_ASSERT((EIGEN_IMPLIES(MaxRowsAtCompileTime==1 && MaxColsAtCompileTime!=1, int(IsRowMajor))
                        && EIGEN_IMPLIES(MaxColsAtCompileTime==1 && MaxRowsAtCompileTime!=1, int(!IsRowMajor))),
                          INVALID_STORAGE_ORDER_FOR_THIS_VECTOR_EXPRESSION)
#endif
    }
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4618      	mov	r0, r3
 8005b5a:	370c      	adds	r7, #12
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr

08005b64 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EEC1Ev>:
// purely fixed-size matrix
template<typename T, int Size, int _Rows, int _Cols, int _Options> class DenseStorage
{
    internal::plain_array<T,Size,_Options> m_data;
  public:
    EIGEN_DEVICE_FUNC DenseStorage() {
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b082      	sub	sp, #8
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f000 fb42 	bl	80061f8 <_ZN5Eigen8internal11plain_arrayIfLi9ELi0ELi0EEC1Ev>
      EIGEN_INTERNAL_DENSE_STORAGE_CTOR_PLUGIN(Index size = Size)
    }
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4618      	mov	r0, r3
 8005b78:	3708      	adds	r7, #8
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}

08005b7e <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8005b7e:	b480      	push	{r7}
 8005b80:	b083      	sub	sp, #12
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
    }
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4618      	mov	r0, r3
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EEC1Ev>:
    EIGEN_DEVICE_FUNC DenseStorage() {
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b082      	sub	sp, #8
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f000 fb35 	bl	800620e <_ZN5Eigen8internal11plain_arrayIfLi1ELi0ELi0EEC1Ev>
    }
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3708      	adds	r7, #8
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}

08005bae <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8005bae:	b480      	push	{r7}
 8005bb0:	b083      	sub	sp, #12
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
    }
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4618      	mov	r0, r3
 8005bba:	370c      	adds	r7, #12
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EEC1Ev>:
    EIGEN_DEVICE_FUNC DenseStorage() {
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b082      	sub	sp, #8
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f000 fb28 	bl	8006224 <_ZN5Eigen8internal11plain_arrayIfLi3ELi0ELi0EEC1Ev>
    }
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3708      	adds	r7, #8
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}

08005bde <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8005bde:	b480      	push	{r7}
 8005be0:	b083      	sub	sp, #12
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	6078      	str	r0, [r7, #4]
    }
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4618      	mov	r0, r3
 8005bea:	370c      	adds	r7, #12
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr

08005bf4 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EEC1Ev>:
    EIGEN_DEVICE_FUNC DenseStorage() {
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b082      	sub	sp, #8
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f000 fb1b 	bl	800623a <_ZN5Eigen8internal11plain_arrayIfLi3ELi1ELi0EEC1Ev>
    }
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	4618      	mov	r0, r3
 8005c08:	3708      	adds	r7, #8
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}

08005c0e <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4colsEv>:
    }
    EIGEN_DEVICE_FUNC void swap(DenseStorage& other) {
      numext::swap(m_data, other.m_data);
    }
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index rows(void) EIGEN_NOEXCEPT {return _Rows;}
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index cols(void) EIGEN_NOEXCEPT {return _Cols;}
 8005c0e:	b480      	push	{r7}
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	2303      	movs	r3, #3
 8005c14:	4618      	mov	r0, r3
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr

08005c1e <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4rowsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index rows(void) EIGEN_NOEXCEPT {return _Rows;}
 8005c1e:	b480      	push	{r7}
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	2303      	movs	r3, #3
 8005c24:	4618      	mov	r0, r3
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr

08005c2e <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC void conservativeResize(Index,Index,Index) {}
    EIGEN_DEVICE_FUNC void resize(Index,Index,Index) {}
    EIGEN_DEVICE_FUNC const T *data() const { return m_data.array; }
    EIGEN_DEVICE_FUNC T *data() { return m_data.array; }
 8005c2e:	b480      	push	{r7}
 8005c30:	b083      	sub	sp, #12
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4618      	mov	r0, r3
 8005c3a:	370c      	adds	r7, #12
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr

08005c44 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4colsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index cols(void) EIGEN_NOEXCEPT {return _Cols;}
 8005c44:	b480      	push	{r7}
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	2301      	movs	r3, #1
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4rowsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index rows(void) EIGEN_NOEXCEPT {return _Rows;}
 8005c54:	b480      	push	{r7}
 8005c56:	af00      	add	r7, sp, #0
 8005c58:	2303      	movs	r3, #3
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr

08005c64 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC T *data() { return m_data.array; }
 8005c64:	b480      	push	{r7}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4618      	mov	r0, r3
 8005c70:	370c      	adds	r7, #12
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr

08005c7a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8coeffRefEii>:
    EIGEN_STRONG_INLINE Scalar& coeffRef(Index rowId, Index colId)
 8005c7a:	b590      	push	{r4, r7, lr}
 8005c7c:	b085      	sub	sp, #20
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	60f8      	str	r0, [r7, #12]
 8005c82:	60b9      	str	r1, [r7, #8]
 8005c84:	607a      	str	r2, [r7, #4]
        return m_storage.data()[rowId + colId * m_storage.rows()];
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f000 fae1 	bl	8006250 <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4dataEv>
 8005c8e:	4604      	mov	r4, r0
 8005c90:	f000 f9d1 	bl	8006036 <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4rowsEv>
 8005c94:	4602      	mov	r2, r0
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	fb03 f202 	mul.w	r2, r3, r2
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	4413      	add	r3, r2
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	4423      	add	r3, r4
    }
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3714      	adds	r7, #20
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd90      	pop	{r4, r7, pc}

08005cac <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4colsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index cols(void) EIGEN_NOEXCEPT {return _Cols;}
 8005cac:	b480      	push	{r7}
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	2303      	movs	r3, #3
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4rowsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index rows(void) EIGEN_NOEXCEPT {return _Rows;}
 8005cbc:	b480      	push	{r7}
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr

08005ccc <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4dataEv>:
    EIGEN_DEVICE_FUNC T *data() { return m_data.array; }
 8005ccc:	b480      	push	{r7}
 8005cce:	b083      	sub	sp, #12
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	370c      	adds	r7, #12
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr

08005ce2 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>:

  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  evaluator() {}

  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  explicit evaluator(const XprType& m)
 8005ce2:	b580      	push	{r7, lr}
 8005ce4:	b082      	sub	sp, #8
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	6078      	str	r0, [r7, #4]
 8005cea:	6039      	str	r1, [r7, #0]
    : evaluator<PlainObjectBase<XprType> >(m)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	683a      	ldr	r2, [r7, #0]
 8005cf0:	4611      	mov	r1, r2
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f000 fab7 	bl	8006266 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKS5_>
  { }
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3708      	adds	r7, #8
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}

08005d02 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8005d02:	b480      	push	{r7}
 8005d04:	b083      	sub	sp, #12
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	6078      	str	r0, [r7, #4]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	370c      	adds	r7, #12
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEii>:
  Scalar& coeffRef(Index row, Index col)
 8005d18:	b590      	push	{r4, r7, lr}
 8005d1a:	b085      	sub	sp, #20
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	60f8      	str	r0, [r7, #12]
 8005d20:	60b9      	str	r1, [r7, #8]
 8005d22:	607a      	str	r2, [r7, #4]
      return const_cast<Scalar*>(m_d.data)[row + col * m_d.outerStride()];
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681c      	ldr	r4, [r3, #0]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f000 fab2 	bl	8006294 <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EE11outerStrideEv>
 8005d30:	4602      	mov	r2, r0
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	fb03 f202 	mul.w	r2, r3, r2
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	4413      	add	r3, r2
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	4423      	add	r3, r4
  }
 8005d40:	4618      	mov	r0, r3
 8005d42:	3714      	adds	r7, #20
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd90      	pop	{r4, r7, pc}

08005d48 <_ZN5Eigen9DenseBaseINS_14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
    }
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	4618      	mov	r0, r3
 8005d54:	370c      	adds	r7, #12
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr
	...

08005d60 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>:
  */
template<typename T, int Value> class variable_if_dynamic
{
  public:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(variable_if_dynamic)
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit variable_if_dynamic(T v) { EIGEN_ONLY_USED_FOR_DEBUG(v); eigen_assert(v == T(Value)); }
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b082      	sub	sp, #8
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	2b03      	cmp	r3, #3
 8005d6e:	d005      	beq.n	8005d7c <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei+0x1c>
 8005d70:	4b05      	ldr	r3, [pc, #20]	; (8005d88 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei+0x28>)
 8005d72:	4a06      	ldr	r2, [pc, #24]	; (8005d8c <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei+0x2c>)
 8005d74:	2185      	movs	r1, #133	; 0x85
 8005d76:	4806      	ldr	r0, [pc, #24]	; (8005d90 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei+0x30>)
 8005d78:	f017 f95c 	bl	801d034 <__assert_func>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3708      	adds	r7, #8
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop
 8005d88:	080213d8 	.word	0x080213d8
 8005d8c:	080213e8 	.word	0x080213e8
 8005d90:	08021450 	.word	0x08021450

08005d94 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>:
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b082      	sub	sp, #8
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d005      	beq.n	8005db0 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei+0x1c>
 8005da4:	4b05      	ldr	r3, [pc, #20]	; (8005dbc <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei+0x28>)
 8005da6:	4a06      	ldr	r2, [pc, #24]	; (8005dc0 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei+0x2c>)
 8005da8:	2185      	movs	r1, #133	; 0x85
 8005daa:	4806      	ldr	r0, [pc, #24]	; (8005dc4 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei+0x30>)
 8005dac:	f017 f942 	bl	801d034 <__assert_func>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	4618      	mov	r0, r3
 8005db4:	3708      	adds	r7, #8
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	bf00      	nop
 8005dbc:	080213d8 	.word	0x080213d8
 8005dc0:	080214ac 	.word	0x080214ac
 8005dc4:	08021450 	.word	0x08021450

08005dc8 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
    }
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	370c      	adds	r7, #12
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr

08005dde <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>:
    EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE EIGEN_CONSTEXPR
    T value() { return T(Value); }
 8005dde:	b480      	push	{r7}
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	2303      	movs	r3, #3
 8005de4:	4618      	mov	r0, r3
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr

08005dee <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>:
 8005dee:	b480      	push	{r7}
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	2301      	movs	r3, #1
 8005df4:	4618      	mov	r0, r3
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr

08005dfe <_ZN5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8005dfe:	b480      	push	{r7}
 8005e00:	b083      	sub	sp, #12
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
    }
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4618      	mov	r0, r3
 8005e0a:	370c      	adds	r7, #12
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr

08005e14 <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8005e14:	b480      	push	{r7}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
    }
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	4618      	mov	r0, r3
 8005e20:	370c      	adds	r7, #12
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr

08005e2a <_ZNK5Eigen9EigenBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi0EEEE7derivedEv>:
 8005e2a:	b480      	push	{r7}
 8005e2c:	b083      	sub	sp, #12
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	4618      	mov	r0, r3
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEEEEvRT_RKT0_>:
// So this intermediate function removes everything related to "assume-aliasing" such that Assignment
// does not has to bother about these annoying details.

template<typename Dst, typename Src>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
void call_assignment(Dst& dst, const Src& src)
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b084      	sub	sp, #16
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
{
  call_assignment(dst, src, internal::assign_op<typename Dst::Scalar,typename Src::Scalar>());
 8005e4a:	f107 030c 	add.w	r3, r7, #12
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f000 fa2b 	bl	80062aa <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8005e54:	f107 020c 	add.w	r2, r7, #12
 8005e58:	2300      	movs	r3, #0
 8005e5a:	6839      	ldr	r1, [r7, #0]
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f000 fa2f 	bl	80062c0 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISN_NS0_16evaluator_traitsISN_E5ShapeEEE5valueEPvE4typeE>
}
 8005e62:	bf00      	nop
 8005e64:	3710      	adds	r7, #16
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}

08005e6a <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8005e6a:	b480      	push	{r7}
 8005e6c:	b083      	sub	sp, #12
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
    }
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4618      	mov	r0, r3
 8005e76:	370c      	adds	r7, #12
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE7derivedEv>:
 8005e80:	b480      	push	{r7}
 8005e82:	b083      	sub	sp, #12
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	370c      	adds	r7, #12
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e94:	4770      	bx	lr

08005e96 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEEvRT_RKT0_>:
void call_assignment(Dst& dst, const Src& src)
 8005e96:	b580      	push	{r7, lr}
 8005e98:	b084      	sub	sp, #16
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	6078      	str	r0, [r7, #4]
 8005e9e:	6039      	str	r1, [r7, #0]
  call_assignment(dst, src, internal::assign_op<typename Dst::Scalar,typename Src::Scalar>());
 8005ea0:	f107 030c 	add.w	r3, r7, #12
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f000 fa00 	bl	80062aa <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8005eaa:	f107 020c 	add.w	r2, r7, #12
 8005eae:	2300      	movs	r3, #0
 8005eb0:	6839      	ldr	r1, [r7, #0]
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f000 fa1c 	bl	80062f0 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISB_NS0_16evaluator_traitsISB_E5ShapeEEE5valueEPvE4typeE>
}
 8005eb8:	bf00      	nop
 8005eba:	3710      	adds	r7, #16
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}

08005ec0 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
    }
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	4618      	mov	r0, r3
 8005ecc:	370c      	adds	r7, #12
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr

08005ed6 <_ZN5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8005ed6:	b480      	push	{r7}
 8005ed8:	b083      	sub	sp, #12
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
    }
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8005eec:	b480      	push	{r7}
 8005eee:	b083      	sub	sp, #12
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
    }
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	370c      	adds	r7, #12
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr

08005f02 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8005f02:	b480      	push	{r7}
 8005f04:	b083      	sub	sp, #12
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
    }
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	370c      	adds	r7, #12
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4618      	mov	r0, r3
 8005f26:	f7fe f990 	bl	800424a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3708      	adds	r7, #8
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b082      	sub	sp, #8
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4618      	mov	r0, r3
 8005f42:	f7fe f982 	bl	800424a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8005f46:	4603      	mov	r3, r0
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3708      	adds	r7, #8
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEE7derivedEv>:
 8005f50:	b480      	push	{r7}
 8005f52:	b083      	sub	sp, #12
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	370c      	adds	r7, #12
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr

08005f66 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRT_RKT0_>:
void call_assignment(Dst& dst, const Src& src)
 8005f66:	b580      	push	{r7, lr}
 8005f68:	b084      	sub	sp, #16
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	6078      	str	r0, [r7, #4]
 8005f6e:	6039      	str	r1, [r7, #0]
  call_assignment(dst, src, internal::assign_op<typename Dst::Scalar,typename Src::Scalar>());
 8005f70:	f107 030c 	add.w	r3, r7, #12
 8005f74:	4618      	mov	r0, r3
 8005f76:	f000 f998 	bl	80062aa <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8005f7a:	f107 020c 	add.w	r2, r7, #12
 8005f7e:	2300      	movs	r3, #0
 8005f80:	6839      	ldr	r1, [r7, #0]
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 f9cc 	bl	8006320 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXntsrNS0_25evaluator_assume_aliasingISJ_NS0_16evaluator_traitsISJ_E5ShapeEEE5valueEPvE4typeE>
}
 8005f88:	bf00      	nop
 8005f8a:	3710      	adds	r7, #16
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}

08005f90 <_ZN5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
    }
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	370c      	adds	r7, #12
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr

08005fa6 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8005fa6:	b480      	push	{r7}
 8005fa8:	b083      	sub	sp, #12
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
    }
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	370c      	adds	r7, #12
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr

08005fbc <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8005fbc:	b480      	push	{r7}
 8005fbe:	b083      	sub	sp, #12
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
    }
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	370c      	adds	r7, #12
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr

08005fd2 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8005fd2:	b480      	push	{r7}
 8005fd4:	b083      	sub	sp, #12
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
    }
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4618      	mov	r0, r3
 8005fde:	370c      	adds	r7, #12
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
    }
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	370c      	adds	r7, #12
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr

08005ffe <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4rowsEv>:
 8005ffe:	b580      	push	{r7, lr}
 8006000:	b082      	sub	sp, #8
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4618      	mov	r0, r3
 800600c:	f7fe fadf 	bl	80045ce <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8006010:	4603      	mov	r3, r0
 8006012:	4618      	mov	r0, r3
 8006014:	3708      	adds	r7, #8
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}

0800601a <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>:
 800601a:	b580      	push	{r7, lr}
 800601c:	b082      	sub	sp, #8
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4618      	mov	r0, r3
 8006028:	f7fe fad1 	bl	80045ce <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 800602c:	4603      	mov	r3, r0
 800602e:	4618      	mov	r0, r3
 8006030:	3708      	adds	r7, #8
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}

08006036 <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4rowsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index rows(void) EIGEN_NOEXCEPT {return _Rows;}
 8006036:	b480      	push	{r7}
 8006038:	af00      	add	r7, sp, #0
 800603a:	2301      	movs	r3, #1
 800603c:	4618      	mov	r0, r3
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr

08006046 <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4colsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index cols(void) EIGEN_NOEXCEPT {return _Cols;}
 8006046:	b480      	push	{r7}
 8006048:	af00      	add	r7, sp, #0
 800604a:	2301      	movs	r3, #1
 800604c:	4618      	mov	r0, r3
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr

08006056 <_ZN5Eigen9DenseBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006056:	b480      	push	{r7}
 8006058:	b083      	sub	sp, #12
 800605a:	af00      	add	r7, sp, #0
 800605c:	6078      	str	r0, [r7, #4]
    }
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4618      	mov	r0, r3
 8006062:	370c      	adds	r7, #12
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800606c:	b480      	push	{r7}
 800606e:	b083      	sub	sp, #12
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
    }
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4618      	mov	r0, r3
 8006078:	370c      	adds	r7, #12
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr

08006082 <_ZNK5Eigen9EigenBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEE7derivedEv>:
 8006082:	b480      	push	{r7}
 8006084:	b083      	sub	sp, #12
 8006086:	af00      	add	r7, sp, #0
 8006088:	6078      	str	r0, [r7, #4]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4618      	mov	r0, r3
 800608e:	370c      	adds	r7, #12
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr

08006098 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEEvRT_RKT0_>:
void call_assignment(Dst& dst, const Src& src)
 8006098:	b580      	push	{r7, lr}
 800609a:	b084      	sub	sp, #16
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	6039      	str	r1, [r7, #0]
  call_assignment(dst, src, internal::assign_op<typename Dst::Scalar,typename Src::Scalar>());
 80060a2:	f107 030c 	add.w	r3, r7, #12
 80060a6:	4618      	mov	r0, r3
 80060a8:	f000 f8ff 	bl	80062aa <_ZN5Eigen8internal9assign_opIffEC1Ev>
 80060ac:	f107 020c 	add.w	r2, r7, #12
 80060b0:	2300      	movs	r3, #0
 80060b2:	6839      	ldr	r1, [r7, #0]
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f000 f943 	bl	8006340 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISQ_NS0_16evaluator_traitsISQ_E5ShapeEEE5valueEPvE4typeE>
}
 80060ba:	bf00      	nop
 80060bc:	3710      	adds	r7, #16
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}

080060c2 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80060c2:	b480      	push	{r7}
 80060c4:	b083      	sub	sp, #12
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
    }
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4618      	mov	r0, r3
 80060ce:	370c      	adds	r7, #12
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr

080060d8 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80060d8:	b480      	push	{r7}
 80060da:	b083      	sub	sp, #12
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
    }
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	4618      	mov	r0, r3
 80060e4:	370c      	adds	r7, #12
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr

080060ee <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80060ee:	b480      	push	{r7}
 80060f0:	b083      	sub	sp, #12
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
    }
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	4618      	mov	r0, r3
 80060fa:	370c      	adds	r7, #12
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS6_NS1_INS2_20scalar_difference_opIffEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS5_IfLi1ELi3ELi1ELi1ELi3EEES6_Li0EEEEELi0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
    }
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	4618      	mov	r0, r3
 8006110:	370c      	adds	r7, #12
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr

0800611a <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 800611a:	b580      	push	{r7, lr}
 800611c:	b082      	sub	sp, #8
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4618      	mov	r0, r3
 8006128:	f7ff f88a 	bl	8005240 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800612c:	4603      	mov	r3, r0
    }
 800612e:	4618      	mov	r0, r3
 8006130:	3708      	adds	r7, #8
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}

08006136 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS6_NS1_INS2_20scalar_difference_opIffEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS5_IfLi1ELi3ELi1ELi1ELi3EEES6_Li0EEEEELi0EEEEEE7derivedEv>:
 8006136:	b480      	push	{r7}
 8006138:	b083      	sub	sp, #12
 800613a:	af00      	add	r7, sp, #0
 800613c:	6078      	str	r0, [r7, #4]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4618      	mov	r0, r3
 8006142:	370c      	adds	r7, #12
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr

0800614c <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKS3_KNS_7ProductIS3_NS4_INS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEEEEvRT_RKT0_>:
void call_assignment(Dst& dst, const Src& src)
 800614c:	b580      	push	{r7, lr}
 800614e:	b084      	sub	sp, #16
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	6039      	str	r1, [r7, #0]
  call_assignment(dst, src, internal::assign_op<typename Dst::Scalar,typename Src::Scalar>());
 8006156:	f107 030c 	add.w	r3, r7, #12
 800615a:	4618      	mov	r0, r3
 800615c:	f000 f8a5 	bl	80062aa <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8006160:	f107 020c 	add.w	r2, r7, #12
 8006164:	2300      	movs	r3, #0
 8006166:	6839      	ldr	r1, [r7, #0]
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f000 f901 	bl	8006370 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKS3_KNS_7ProductIS3_NS4_INS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISO_NS0_16evaluator_traitsISO_E5ShapeEEE5valueEPvE4typeE>
}
 800616e:	bf00      	nop
 8006170:	3710      	adds	r7, #16
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}

08006176 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006176:	b480      	push	{r7}
 8006178:	b083      	sub	sp, #12
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
    }
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	4618      	mov	r0, r3
 8006182:	370c      	adds	r7, #12
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr

0800618c <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800618c:	b480      	push	{r7}
 800618e:	b083      	sub	sp, #12
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
    }
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	4618      	mov	r0, r3
 8006198:	370c      	adds	r7, #12
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr

080061a2 <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80061a2:	b480      	push	{r7}
 80061a4:	b083      	sub	sp, #12
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
    }
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4618      	mov	r0, r3
 80061ae:	370c      	adds	r7, #12
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr

080061b8 <_ZNK5Eigen9EigenBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li0EEEE7derivedEv>:
 80061b8:	b480      	push	{r7}
 80061ba:	b083      	sub	sp, #12
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	4618      	mov	r0, r3
 80061c4:	370c      	adds	r7, #12
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr

080061ce <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEEEEvRT_RKT0_>:
void call_assignment(Dst& dst, const Src& src)
 80061ce:	b580      	push	{r7, lr}
 80061d0:	b084      	sub	sp, #16
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
 80061d6:	6039      	str	r1, [r7, #0]
  call_assignment(dst, src, internal::assign_op<typename Dst::Scalar,typename Src::Scalar>());
 80061d8:	f107 030c 	add.w	r3, r7, #12
 80061dc:	4618      	mov	r0, r3
 80061de:	f000 f864 	bl	80062aa <_ZN5Eigen8internal9assign_opIffEC1Ev>
 80061e2:	f107 020c 	add.w	r2, r7, #12
 80061e6:	2300      	movs	r3, #0
 80061e8:	6839      	ldr	r1, [r7, #0]
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 f8d8 	bl	80063a0 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISJ_NS0_16evaluator_traitsISJ_E5ShapeEEE5valueEPvE4typeE>
}
 80061f0:	bf00      	nop
 80061f2:	3710      	adds	r7, #16
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <_ZN5Eigen8internal11plain_arrayIfLi9ELi0ELi0EEC1Ev>:
  plain_array()
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b082      	sub	sp, #8
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
    check_static_allocation_size<T,Size>();
 8006200:	f000 f8e6 	bl	80063d0 <_ZN5Eigen8internal28check_static_allocation_sizeIfLi9EEEvv>
  }
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	4618      	mov	r0, r3
 8006208:	3708      	adds	r7, #8
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}

0800620e <_ZN5Eigen8internal11plain_arrayIfLi1ELi0ELi0EEC1Ev>:
  plain_array()
 800620e:	b580      	push	{r7, lr}
 8006210:	b082      	sub	sp, #8
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
    check_static_allocation_size<T,Size>();
 8006216:	f000 f8e2 	bl	80063de <_ZN5Eigen8internal28check_static_allocation_sizeIfLi1EEEvv>
  }
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4618      	mov	r0, r3
 800621e:	3708      	adds	r7, #8
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}

08006224 <_ZN5Eigen8internal11plain_arrayIfLi3ELi0ELi0EEC1Ev>:
  plain_array()
 8006224:	b580      	push	{r7, lr}
 8006226:	b082      	sub	sp, #8
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
    check_static_allocation_size<T,Size>();
 800622c:	f000 f8de 	bl	80063ec <_ZN5Eigen8internal28check_static_allocation_sizeIfLi3EEEvv>
  }
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	4618      	mov	r0, r3
 8006234:	3708      	adds	r7, #8
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}

0800623a <_ZN5Eigen8internal11plain_arrayIfLi3ELi1ELi0EEC1Ev>:
  plain_array()
 800623a:	b580      	push	{r7, lr}
 800623c:	b082      	sub	sp, #8
 800623e:	af00      	add	r7, sp, #0
 8006240:	6078      	str	r0, [r7, #4]
    check_static_allocation_size<T,Size>();
 8006242:	f000 f8d3 	bl	80063ec <_ZN5Eigen8internal28check_static_allocation_sizeIfLi3EEEvv>
  }
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	4618      	mov	r0, r3
 800624a:	3708      	adds	r7, #8
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC T *data() { return m_data.array; }
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	4618      	mov	r0, r3
 800625c:	370c      	adds	r7, #12
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr

08006266 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKS5_>:
  explicit evaluator(const PlainObjectType& m)
 8006266:	b590      	push	{r4, r7, lr}
 8006268:	b083      	sub	sp, #12
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
 800626e:	6039      	str	r1, [r7, #0]
    : m_d(m.data(),IsVectorAtCompileTime ? 0 : m.outerStride())
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f000 f8cf 	bl	8006414 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
 8006276:	687c      	ldr	r4, [r7, #4]
 8006278:	6838      	ldr	r0, [r7, #0]
 800627a:	f000 f8be 	bl	80063fa <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4dataEv>
 800627e:	4603      	mov	r3, r0
 8006280:	2200      	movs	r2, #0
 8006282:	4619      	mov	r1, r3
 8006284:	4620      	mov	r0, r4
 8006286:	f000 f8d0 	bl	800642a <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EEC1EPKfi>
  }
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4618      	mov	r0, r3
 800628e:	370c      	adds	r7, #12
 8006290:	46bd      	mov	sp, r7
 8006292:	bd90      	pop	{r4, r7, pc}

08006294 <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EE11outerStrideEv>:
  Index outerStride() const EIGEN_NOEXCEPT { return OuterStride; }
 8006294:	b480      	push	{r7}
 8006296:	b083      	sub	sp, #12
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	2300      	movs	r3, #0
 800629e:	4618      	mov	r0, r3
 80062a0:	370c      	adds	r7, #12
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr

080062aa <_ZN5Eigen8internal9assign_opIffEC1Ev>:
  * \brief Template functor for scalar/packet assignment
  *
  */
template<typename DstScalar,typename SrcScalar> struct assign_op {

  EIGEN_EMPTY_STRUCT_CTOR(assign_op)
 80062aa:	b480      	push	{r7}
 80062ac:	b083      	sub	sp, #12
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	4618      	mov	r0, r3
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISN_NS0_16evaluator_traitsISN_E5ShapeEEE5valueEPvE4typeE>:
}

// Deal with "assume-aliasing"
template<typename Dst, typename Src, typename Func>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
void call_assignment(Dst& dst, const Src& src, const Func& func, typename enable_if< evaluator_assume_aliasing<Src>::value, void*>::type = 0)
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b08e      	sub	sp, #56	; 0x38
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	60b9      	str	r1, [r7, #8]
 80062ca:	607a      	str	r2, [r7, #4]
 80062cc:	603b      	str	r3, [r7, #0]
{
  typename plain_matrix_type<Src>::type tmp(src);
 80062ce:	f107 0314 	add.w	r3, r7, #20
 80062d2:	68b9      	ldr	r1, [r7, #8]
 80062d4:	4618      	mov	r0, r3
 80062d6:	f000 f8ba 	bl	800644e <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS0_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS5_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEEEERKT_>
  call_assignment_no_alias(dst, tmp, func);
 80062da:	f107 0314 	add.w	r3, r7, #20
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	4619      	mov	r1, r3
 80062e2:	68f8      	ldr	r0, [r7, #12]
 80062e4:	f000 f8c8 	bl	8006478 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
}
 80062e8:	bf00      	nop
 80062ea:	3738      	adds	r7, #56	; 0x38
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}

080062f0 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISB_NS0_16evaluator_traitsISB_E5ShapeEEE5valueEPvE4typeE>:
void call_assignment(Dst& dst, const Src& src, const Func& func, typename enable_if< evaluator_assume_aliasing<Src>::value, void*>::type = 0)
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b088      	sub	sp, #32
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	60b9      	str	r1, [r7, #8]
 80062fa:	607a      	str	r2, [r7, #4]
 80062fc:	603b      	str	r3, [r7, #0]
  typename plain_matrix_type<Src>::type tmp(src);
 80062fe:	f107 0314 	add.w	r3, r7, #20
 8006302:	68b9      	ldr	r1, [r7, #8]
 8006304:	4618      	mov	r0, r3
 8006306:	f000 f8c8 	bl	800649a <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_7ProductINS0_IfLi3ELi3ELi0ELi3ELi3EEES1_Li0EEEEERKT_>
  call_assignment_no_alias(dst, tmp, func);
 800630a:	f107 0314 	add.w	r3, r7, #20
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	4619      	mov	r1, r3
 8006312:	68f8      	ldr	r0, [r7, #12]
 8006314:	f000 f8d6 	bl	80064c4 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
}
 8006318:	bf00      	nop
 800631a:	3720      	adds	r7, #32
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}

08006320 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXntsrNS0_25evaluator_assume_aliasingISJ_NS0_16evaluator_traitsISJ_E5ShapeEEE5valueEPvE4typeE>:

template<typename Dst, typename Src, typename Func>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
void call_assignment(Dst& dst, const Src& src, const Func& func, typename enable_if<!evaluator_assume_aliasing<Src>::value, void*>::type = 0)
 8006320:	b580      	push	{r7, lr}
 8006322:	b084      	sub	sp, #16
 8006324:	af00      	add	r7, sp, #0
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	607a      	str	r2, [r7, #4]
 800632c:	603b      	str	r3, [r7, #0]
{
  call_assignment_no_alias(dst, src, func);
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	68b9      	ldr	r1, [r7, #8]
 8006332:	68f8      	ldr	r0, [r7, #12]
 8006334:	f000 f8d7 	bl	80064e6 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
}
 8006338:	bf00      	nop
 800633a:	3710      	adds	r7, #16
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}

08006340 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISQ_NS0_16evaluator_traitsISQ_E5ShapeEEE5valueEPvE4typeE>:
void call_assignment(Dst& dst, const Src& src, const Func& func, typename enable_if< evaluator_assume_aliasing<Src>::value, void*>::type = 0)
 8006340:	b580      	push	{r7, lr}
 8006342:	b088      	sub	sp, #32
 8006344:	af00      	add	r7, sp, #0
 8006346:	60f8      	str	r0, [r7, #12]
 8006348:	60b9      	str	r1, [r7, #8]
 800634a:	607a      	str	r2, [r7, #4]
 800634c:	603b      	str	r3, [r7, #0]
  typename plain_matrix_type<Src>::type tmp(src);
 800634e:	f107 0314 	add.w	r3, r7, #20
 8006352:	68b9      	ldr	r1, [r7, #8]
 8006354:	4618      	mov	r0, r3
 8006356:	f000 f8d7 	bl	8006508 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_7ProductINS3_INS0_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS0_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS3_INS3_IS6_S4_Li0EEES7_Li0EEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERKT_>
  call_assignment_no_alias(dst, tmp, func);
 800635a:	f107 0314 	add.w	r3, r7, #20
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	4619      	mov	r1, r3
 8006362:	68f8      	ldr	r0, [r7, #12]
 8006364:	f000 f8ae 	bl	80064c4 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
}
 8006368:	bf00      	nop
 800636a:	3720      	adds	r7, #32
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}

08006370 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKS3_KNS_7ProductIS3_NS4_INS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISO_NS0_16evaluator_traitsISO_E5ShapeEEE5valueEPvE4typeE>:
void call_assignment(Dst& dst, const Src& src, const Func& func, typename enable_if< evaluator_assume_aliasing<Src>::value, void*>::type = 0)
 8006370:	b580      	push	{r7, lr}
 8006372:	b088      	sub	sp, #32
 8006374:	af00      	add	r7, sp, #0
 8006376:	60f8      	str	r0, [r7, #12]
 8006378:	60b9      	str	r1, [r7, #8]
 800637a:	607a      	str	r2, [r7, #4]
 800637c:	603b      	str	r3, [r7, #0]
  typename plain_matrix_type<Src>::type tmp(src);
 800637e:	f107 0314 	add.w	r3, r7, #20
 8006382:	68b9      	ldr	r1, [r7, #8]
 8006384:	4618      	mov	r0, r3
 8006386:	f000 f8d4 	bl	8006532 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS1_KNS_7ProductIS1_NS3_INS4_20scalar_difference_opIffEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS0_IfLi1ELi3ELi1ELi1ELi3EEES1_Li0EEEEELi0EEEEEEERKT_>
  call_assignment_no_alias(dst, tmp, func);
 800638a:	f107 0314 	add.w	r3, r7, #20
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	4619      	mov	r1, r3
 8006392:	68f8      	ldr	r0, [r7, #12]
 8006394:	f000 f896 	bl	80064c4 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
}
 8006398:	bf00      	nop
 800639a:	3720      	adds	r7, #32
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISJ_NS0_16evaluator_traitsISJ_E5ShapeEEE5valueEPvE4typeE>:
void call_assignment(Dst& dst, const Src& src, const Func& func, typename enable_if< evaluator_assume_aliasing<Src>::value, void*>::type = 0)
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b08e      	sub	sp, #56	; 0x38
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	607a      	str	r2, [r7, #4]
 80063ac:	603b      	str	r3, [r7, #0]
  typename plain_matrix_type<Src>::type tmp(src);
 80063ae:	f107 0314 	add.w	r3, r7, #20
 80063b2:	68b9      	ldr	r1, [r7, #8]
 80063b4:	4618      	mov	r0, r3
 80063b6:	f000 f8d1 	bl	800655c <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS3_INS0_IfLi3ELi1ELi0ELi3ELi1EEENS0_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES1_Li0EEEEERKT_>
  call_assignment_no_alias(dst, tmp, func);
 80063ba:	f107 0314 	add.w	r3, r7, #20
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	4619      	mov	r1, r3
 80063c2:	68f8      	ldr	r0, [r7, #12]
 80063c4:	f000 f858 	bl	8006478 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
}
 80063c8:	bf00      	nop
 80063ca:	3738      	adds	r7, #56	; 0x38
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <_ZN5Eigen8internal28check_static_allocation_sizeIfLi9EEEvv>:
void check_static_allocation_size()
 80063d0:	b480      	push	{r7}
 80063d2:	af00      	add	r7, sp, #0
}
 80063d4:	bf00      	nop
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr

080063de <_ZN5Eigen8internal28check_static_allocation_sizeIfLi1EEEvv>:
void check_static_allocation_size()
 80063de:	b480      	push	{r7}
 80063e0:	af00      	add	r7, sp, #0
}
 80063e2:	bf00      	nop
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <_ZN5Eigen8internal28check_static_allocation_sizeIfLi3EEEvv>:
void check_static_allocation_size()
 80063ec:	b480      	push	{r7}
 80063ee:	af00      	add	r7, sp, #0
}
 80063f0:	bf00      	nop
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr

080063fa <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4dataEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar *data() const
 80063fa:	b580      	push	{r7, lr}
 80063fc:	b082      	sub	sp, #8
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
    { return m_storage.data(); }
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4618      	mov	r0, r3
 8006406:	f000 f8be 	bl	8006586 <_ZNK5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4dataEv>
 800640a:	4603      	mov	r3, r0
 800640c:	4618      	mov	r0, r3
 800640e:	3708      	adds	r7, #8
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}

08006414 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8006414:	b480      	push	{r7}
 8006416:	b083      	sub	sp, #12
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	4618      	mov	r0, r3
 8006420:	370c      	adds	r7, #12
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr

0800642a <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EEC1EPKfi>:
  plainobjectbase_evaluator_data(const Scalar* ptr, Index outerStride) : data(ptr)
 800642a:	b580      	push	{r7, lr}
 800642c:	b084      	sub	sp, #16
 800642e:	af00      	add	r7, sp, #0
 8006430:	60f8      	str	r0, [r7, #12]
 8006432:	60b9      	str	r1, [r7, #8]
 8006434:	607a      	str	r2, [r7, #4]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	68ba      	ldr	r2, [r7, #8]
 800643a:	601a      	str	r2, [r3, #0]
    EIGEN_UNUSED_VARIABLE(outerStride);
 800643c:	1d3b      	adds	r3, r7, #4
 800643e:	4618      	mov	r0, r3
 8006440:	f7fd f82d 	bl	800349e <_ZN5Eigen8internal22ignore_unused_variableIiEEvRKT_>
  }
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	4618      	mov	r0, r3
 8006448:	3710      	adds	r7, #16
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}

0800644e <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS0_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS5_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEEEERKT_>:
#ifndef EIGEN_PARSED_BY_DOXYGEN

    // This constructor is for both 1x1 matrices and dynamic vectors
    template<typename T>
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    explicit Matrix(const T& x)
 800644e:	b580      	push	{r7, lr}
 8006450:	b082      	sub	sp, #8
 8006452:	af00      	add	r7, sp, #0
 8006454:	6078      	str	r0, [r7, #4]
 8006456:	6039      	str	r1, [r7, #0]
    {
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4618      	mov	r0, r3
 800645c:	f7fd fdf3 	bl	8004046 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
      Base::_check_template_params();
 8006460:	f7fd fe01 	bl	8004066 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6839      	ldr	r1, [r7, #0]
 8006468:	4618      	mov	r0, r3
 800646a:	f000 f8a3 	bl	80065b4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS1_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS7_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi0EEESK_EEvRKNS_9DenseBaseIT0_EE>
    }
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4618      	mov	r0, r3
 8006472:	3708      	adds	r7, #8
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}

08006478 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
}


template<typename Dst, typename Src, typename Func>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8006478:	b580      	push	{r7, lr}
 800647a:	b086      	sub	sp, #24
 800647c:	af00      	add	r7, sp, #0
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	60b9      	str	r1, [r7, #8]
 8006482:	607a      	str	r2, [r7, #4]
                      ) && int(Dst::SizeAtCompileTime) != 1
  };

  typedef typename internal::conditional<NeedToTranspose, Transpose<Dst>, Dst>::type ActualDstTypeCleaned;
  typedef typename internal::conditional<NeedToTranspose, Transpose<Dst>, Dst&>::type ActualDstType;
  ActualDstType actualDst(dst);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	617b      	str	r3, [r7, #20]
  // TODO check whether this is the right place to perform these checks:
  EIGEN_STATIC_ASSERT_LVALUE(Dst)
  EIGEN_STATIC_ASSERT_SAME_MATRIX_SIZE(ActualDstTypeCleaned,Src)
  EIGEN_CHECK_BINARY_COMPATIBILIY(Func,typename ActualDstTypeCleaned::Scalar,typename Src::Scalar);

  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	68b9      	ldr	r1, [r7, #8]
 800648c:	6978      	ldr	r0, [r7, #20]
 800648e:	f000 f89e 	bl	80065ce <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS3_RKS5_>
}
 8006492:	bf00      	nop
 8006494:	3718      	adds	r7, #24
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}

0800649a <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_7ProductINS0_IfLi3ELi3ELi0ELi3ELi3EEES1_Li0EEEEERKT_>:
    explicit Matrix(const T& x)
 800649a:	b580      	push	{r7, lr}
 800649c:	b082      	sub	sp, #8
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]
 80064a2:	6039      	str	r1, [r7, #0]
    {
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	4618      	mov	r0, r3
 80064a8:	f7fd fe13 	bl	80040d2 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
      Base::_check_template_params();
 80064ac:	f7fd fe21 	bl	80040f2 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6839      	ldr	r1, [r7, #0]
 80064b4:	4618      	mov	r0, r3
 80064b6:	f000 f89d 	bl	80065f4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEES7_EEvRKNS_9DenseBaseIT0_EE>
    }
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	4618      	mov	r0, r3
 80064be:	3708      	adds	r7, #8
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}

080064c4 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b086      	sub	sp, #24
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	60f8      	str	r0, [r7, #12]
 80064cc:	60b9      	str	r1, [r7, #8]
 80064ce:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	68b9      	ldr	r1, [r7, #8]
 80064d8:	6978      	ldr	r0, [r7, #20]
 80064da:	f000 f898 	bl	800660e <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS3_RKS5_>
}
 80064de:	bf00      	nop
 80064e0:	3718      	adds	r7, #24
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}

080064e6 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 80064e6:	b580      	push	{r7, lr}
 80064e8:	b086      	sub	sp, #24
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	60f8      	str	r0, [r7, #12]
 80064ee:	60b9      	str	r1, [r7, #8]
 80064f0:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	68b9      	ldr	r1, [r7, #8]
 80064fa:	6978      	ldr	r0, [r7, #20]
 80064fc:	f000 f89a 	bl	8006634 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>
}
 8006500:	bf00      	nop
 8006502:	3718      	adds	r7, #24
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}

08006508 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_7ProductINS3_INS0_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS0_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS3_INS3_IS6_S4_Li0EEES7_Li0EEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERKT_>:
    explicit Matrix(const T& x)
 8006508:	b580      	push	{r7, lr}
 800650a:	b082      	sub	sp, #8
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
    {
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4618      	mov	r0, r3
 8006516:	f7fd fddc 	bl	80040d2 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
      Base::_check_template_params();
 800651a:	f7fd fdea 	bl	80040f2 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6839      	ldr	r1, [r7, #0]
 8006522:	4618      	mov	r0, r3
 8006524:	f000 f899 	bl	800665a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_7ProductINS5_INS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS5_INS5_IS8_S6_Li0EEES9_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEESN_EEvRKNS_9DenseBaseIT0_EE>
    }
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4618      	mov	r0, r3
 800652c:	3708      	adds	r7, #8
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}

08006532 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS1_KNS_7ProductIS1_NS3_INS4_20scalar_difference_opIffEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS0_IfLi1ELi3ELi1ELi1ELi3EEES1_Li0EEEEELi0EEEEEEERKT_>:
    explicit Matrix(const T& x)
 8006532:	b580      	push	{r7, lr}
 8006534:	b082      	sub	sp, #8
 8006536:	af00      	add	r7, sp, #0
 8006538:	6078      	str	r0, [r7, #4]
 800653a:	6039      	str	r1, [r7, #0]
    {
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	4618      	mov	r0, r3
 8006540:	f7fd fdc7 	bl	80040d2 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
      Base::_check_template_params();
 8006544:	f7fd fdd5 	bl	80040f2 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6839      	ldr	r1, [r7, #0]
 800654c:	4618      	mov	r0, r3
 800654e:	f000 f891 	bl	8006674 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS2_KNS_7ProductIS2_NS5_INS6_20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEESL_EEvRKNS_9DenseBaseIT0_EE>
    }
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	4618      	mov	r0, r3
 8006556:	3708      	adds	r7, #8
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS3_INS0_IfLi3ELi1ELi0ELi3ELi1EEENS0_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES1_Li0EEEEERKT_>:
    explicit Matrix(const T& x)
 800655c:	b580      	push	{r7, lr}
 800655e:	b082      	sub	sp, #8
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	6039      	str	r1, [r7, #0]
    {
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4618      	mov	r0, r3
 800656a:	f7fd fd6c 	bl	8004046 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
      Base::_check_template_params();
 800656e:	f7fd fd7a 	bl	8004066 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6839      	ldr	r1, [r7, #0]
 8006576:	4618      	mov	r0, r3
 8006578:	f000 f889 	bl	800668e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS5_INS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES2_Li0EEESG_EEvRKNS_9DenseBaseIT0_EE>
    }
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	4618      	mov	r0, r3
 8006580:	3708      	adds	r7, #8
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}

08006586 <_ZNK5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC const T *data() const { return m_data.array; }
 8006586:	b480      	push	{r7}
 8006588:	b083      	sub	sp, #12
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4618      	mov	r0, r3
 8006592:	370c      	adds	r7, #12
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr

0800659c <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>:
    { }

    EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
    inline Index innerStride() const EIGEN_NOEXCEPT { return 1; }
    EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
    inline Index outerStride() const EIGEN_NOEXCEPT { return this->innerSize(); }
 800659c:	b580      	push	{r7, lr}
 800659e:	b082      	sub	sp, #8
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f000 f87f 	bl	80066a8 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE9innerSizeEv>
 80065aa:	4603      	mov	r3, r0
 80065ac:	4618      	mov	r0, r3
 80065ae:	3708      	adds	r7, #8
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}

080065b4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS1_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS7_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi0EEESK_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b082      	sub	sp, #8
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 80065be:	6839      	ldr	r1, [r7, #0]
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f000 f87d 	bl	80066c0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS1_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS7_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi0EEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 80065c6:	bf00      	nop
 80065c8:	3708      	adds	r7, #8
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}

080065ce <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS3_RKS5_>:
// both partial specialization+SFINAE without ambiguous specialization
template< typename DstXprType, typename SrcXprType, typename Functor, typename Weak>
struct Assignment<DstXprType, SrcXprType, Functor, Dense2Dense, Weak>
{
  EIGEN_DEVICE_FUNC
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 80065ce:	b580      	push	{r7, lr}
 80065d0:	b084      	sub	sp, #16
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	60f8      	str	r0, [r7, #12]
 80065d6:	60b9      	str	r1, [r7, #8]
 80065d8:	607a      	str	r2, [r7, #4]
  {
#ifndef EIGEN_NO_DEBUG
    internal::check_for_aliasing(dst, src);
 80065da:	68b9      	ldr	r1, [r7, #8]
 80065dc:	68f8      	ldr	r0, [r7, #12]
 80065de:	f000 f890 	bl	8006702 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_EEvRKT_RKT0_>
#endif

    call_dense_assignment_loop(dst, src, func);
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	68b9      	ldr	r1, [r7, #8]
 80065e6:	68f8      	ldr	r0, [r7, #12]
 80065e8:	f000 f8c4 	bl	8006774 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 80065ec:	bf00      	nop
 80065ee:	3710      	adds	r7, #16
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEES7_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b082      	sub	sp, #8
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 80065fe:	6839      	ldr	r1, [r7, #0]
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f000 f8ef 	bl	80067e4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 8006606:	bf00      	nop
 8006608:	3708      	adds	r7, #8
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}

0800660e <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS3_RKS5_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 800660e:	b580      	push	{r7, lr}
 8006610:	b084      	sub	sp, #16
 8006612:	af00      	add	r7, sp, #0
 8006614:	60f8      	str	r0, [r7, #12]
 8006616:	60b9      	str	r1, [r7, #8]
 8006618:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 800661a:	68b9      	ldr	r1, [r7, #8]
 800661c:	68f8      	ldr	r0, [r7, #12]
 800661e:	f000 f902 	bl	8006826 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_EEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	68b9      	ldr	r1, [r7, #8]
 8006626:	68f8      	ldr	r0, [r7, #12]
 8006628:	f000 f908 	bl	800683c <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800662c:	bf00      	nop
 800662e:	3710      	adds	r7, #16
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	60f8      	str	r0, [r7, #12]
 800663c:	60b9      	str	r1, [r7, #8]
 800663e:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 8006640:	68b9      	ldr	r1, [r7, #8]
 8006642:	68f8      	ldr	r0, [r7, #12]
 8006644:	f000 f932 	bl	80068ac <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	68b9      	ldr	r1, [r7, #8]
 800664c:	68f8      	ldr	r0, [r7, #12]
 800664e:	f000 f9ca 	bl	80069e6 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8006652:	bf00      	nop
 8006654:	3710      	adds	r7, #16
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}

0800665a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_7ProductINS5_INS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS5_INS5_IS8_S6_Li0EEES9_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEESN_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 800665a:	b580      	push	{r7, lr}
 800665c:	b082      	sub	sp, #8
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
 8006662:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 8006664:	6839      	ldr	r1, [r7, #0]
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 f9f5 	bl	8006a56 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_7ProductINS5_INS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS5_INS5_IS8_S6_Li0EEES9_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 800666c:	bf00      	nop
 800666e:	3708      	adds	r7, #8
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}

08006674 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS2_KNS_7ProductIS2_NS5_INS6_20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEESL_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 8006674:	b580      	push	{r7, lr}
 8006676:	b082      	sub	sp, #8
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 800667e:	6839      	ldr	r1, [r7, #0]
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 fa09 	bl	8006a98 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS2_KNS_7ProductIS2_NS5_INS6_20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 8006686:	bf00      	nop
 8006688:	3708      	adds	r7, #8
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}

0800668e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS5_INS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES2_Li0EEESG_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 800668e:	b580      	push	{r7, lr}
 8006690:	b082      	sub	sp, #8
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
 8006696:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 8006698:	6839      	ldr	r1, [r7, #0]
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 fa1d 	bl	8006ada <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS5_INS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 80066a0:	bf00      	nop
 80066a2:	3708      	adds	r7, #8
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE9innerSizeEv>:
    Index innerSize() const
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b082      	sub	sp, #8
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
      return IsVectorAtCompileTime ? this->size()
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f000 fa33 	bl	8006b1c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4sizeEv>
 80066b6:	4603      	mov	r3, r0
    }
 80066b8:	4618      	mov	r0, r3
 80066ba:	3708      	adds	r7, #8
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}

080066c0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS1_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS7_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 80066c0:	b5b0      	push	{r4, r5, r7, lr}
 80066c2:	b084      	sub	sp, #16
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f7fe fa90 	bl	8004bf0 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 80066d0:	4604      	mov	r4, r0
 80066d2:	6838      	ldr	r0, [r7, #0]
 80066d4:	f7ff fba9 	bl	8005e2a <_ZNK5Eigen9EigenBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi0EEEE7derivedEv>
 80066d8:	4605      	mov	r5, r0
 80066da:	f107 030c 	add.w	r3, r7, #12
 80066de:	4618      	mov	r0, r3
 80066e0:	f7ff fde3 	bl	80062aa <_ZN5Eigen8internal9assign_opIffEC1Ev>
 80066e4:	f107 030c 	add.w	r3, r7, #12
 80066e8:	461a      	mov	r2, r3
 80066ea:	4629      	mov	r1, r5
 80066ec:	4620      	mov	r0, r4
 80066ee:	f000 fa27 	bl	8006b40 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f7fe fa7c 	bl	8004bf0 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 80066f8:	4603      	mov	r3, r0
    }
 80066fa:	4618      	mov	r0, r3
 80066fc:	3710      	adds	r7, #16
 80066fe:	46bd      	mov	sp, r7
 8006700:	bdb0      	pop	{r4, r5, r7, pc}

08006702 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_EEvRKT_RKT0_>:
    {
    }
};

template<typename Dst, typename Src>
void check_for_aliasing(const Dst &dst, const Src &src)
 8006702:	b580      	push	{r7, lr}
 8006704:	b082      	sub	sp, #8
 8006706:	af00      	add	r7, sp, #0
 8006708:	6078      	str	r0, [r7, #4]
 800670a:	6039      	str	r1, [r7, #0]
{
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	4618      	mov	r0, r3
 8006710:	f7fd fd9b 	bl	800424a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8006714:	4603      	mov	r3, r0
 8006716:	2b01      	cmp	r3, #1
 8006718:	dd08      	ble.n	800672c <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_EEvRKT_RKT0_+0x2a>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	4618      	mov	r0, r3
 800671e:	f7fd fd89 	bl	8004234 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8006722:	4603      	mov	r3, r0
 8006724:	2b01      	cmp	r3, #1
 8006726:	dd01      	ble.n	800672c <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_EEvRKT_RKT0_+0x2a>
 8006728:	2301      	movs	r3, #1
 800672a:	e000      	b.n	800672e <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_EEvRKT_RKT0_+0x2c>
 800672c:	2300      	movs	r3, #0
 800672e:	2b00      	cmp	r3, #0
 8006730:	d003      	beq.n	800673a <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_EEvRKT_RKT0_+0x38>
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
 8006732:	6839      	ldr	r1, [r7, #0]
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 fa14 	bl	8006b62 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Lb0EE3runERKS3_S6_>
}
 800673a:	bf00      	nop
 800673c:	3708      	adds	r7, #8
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}

08006742 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEED1Ev>:
struct evaluator<PlainObjectBase<Derived> >
 8006742:	b580      	push	{r7, lr}
 8006744:	b082      	sub	sp, #8
 8006746:	af00      	add	r7, sp, #0
 8006748:	6078      	str	r0, [r7, #4]
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 fa24 	bl	8006b98 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	4618      	mov	r0, r3
 8006754:	3708      	adds	r7, #8
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}

0800675a <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>:
struct evaluator<Matrix<Scalar, Rows, Cols, Options, MaxRows, MaxCols> >
 800675a:	b580      	push	{r7, lr}
 800675c:	b082      	sub	sp, #8
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4618      	mov	r0, r3
 8006766:	f7ff ffec 	bl	8006742 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEED1Ev>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4618      	mov	r0, r3
 800676e:	3708      	adds	r7, #8
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}

08006774 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 8006774:	b580      	push	{r7, lr}
 8006776:	b08c      	sub	sp, #48	; 0x30
 8006778:	af02      	add	r7, sp, #8
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	60b9      	str	r1, [r7, #8]
 800677e:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 8006780:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006784:	68b9      	ldr	r1, [r7, #8]
 8006786:	4618      	mov	r0, r3
 8006788:	f000 f9f6 	bl	8006b78 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
  resize_if_allowed(dst, src, func);
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	68b9      	ldr	r1, [r7, #8]
 8006790:	68f8      	ldr	r0, [r7, #12]
 8006792:	f000 fa0d 	bl	8006bb0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 8006796:	f107 0320 	add.w	r3, r7, #32
 800679a:	68f9      	ldr	r1, [r7, #12]
 800679c:	4618      	mov	r0, r3
 800679e:	f000 f9eb 	bl	8006b78 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 80067a2:	68f8      	ldr	r0, [r7, #12]
 80067a4:	f000 fa50 	bl	8006c48 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE18const_cast_derivedEv>
 80067a8:	4603      	mov	r3, r0
 80067aa:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80067ae:	f107 0120 	add.w	r1, r7, #32
 80067b2:	f107 0010 	add.w	r0, r7, #16
 80067b6:	9300      	str	r3, [sp, #0]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f000 fa50 	bl	8006c5e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EEC1ERS5_RKS5_RKS7_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 80067be:	f107 0310 	add.w	r3, r7, #16
 80067c2:	4618      	mov	r0, r3
 80067c4:	f000 fa65 	bl	8006c92 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi2EE3runERS9_>
  DstEvaluatorType dstEvaluator(dst);
 80067c8:	f107 0320 	add.w	r3, r7, #32
 80067cc:	4618      	mov	r0, r3
 80067ce:	f7ff ffc4 	bl	800675a <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 80067d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067d6:	4618      	mov	r0, r3
 80067d8:	f7ff ffbf 	bl	800675a <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
}
 80067dc:	bf00      	nop
 80067de:	3728      	adds	r7, #40	; 0x28
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}

080067e4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 80067e4:	b5b0      	push	{r4, r5, r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f7fe f862 	bl	80048b8 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80067f4:	4604      	mov	r4, r0
 80067f6:	6838      	ldr	r0, [r7, #0]
 80067f8:	f7ff fb42 	bl	8005e80 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE7derivedEv>
 80067fc:	4605      	mov	r5, r0
 80067fe:	f107 030c 	add.w	r3, r7, #12
 8006802:	4618      	mov	r0, r3
 8006804:	f7ff fd51 	bl	80062aa <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8006808:	f107 030c 	add.w	r3, r7, #12
 800680c:	461a      	mov	r2, r3
 800680e:	4629      	mov	r1, r5
 8006810:	4620      	mov	r0, r4
 8006812:	f000 fa49 	bl	8006ca8 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f7fe f84e 	bl	80048b8 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800681c:	4603      	mov	r3, r0
    }
 800681e:	4618      	mov	r0, r3
 8006820:	3710      	adds	r7, #16
 8006822:	46bd      	mov	sp, r7
 8006824:	bdb0      	pop	{r4, r5, r7, pc}

08006826 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_EEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 8006826:	b480      	push	{r7}
 8006828:	b083      	sub	sp, #12
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
 800682e:	6039      	str	r1, [r7, #0]
}
 8006830:	bf00      	nop
 8006832:	370c      	adds	r7, #12
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr

0800683c <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 800683c:	b580      	push	{r7, lr}
 800683e:	b08c      	sub	sp, #48	; 0x30
 8006840:	af02      	add	r7, sp, #8
 8006842:	60f8      	str	r0, [r7, #12]
 8006844:	60b9      	str	r1, [r7, #8]
 8006846:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 8006848:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800684c:	68b9      	ldr	r1, [r7, #8]
 800684e:	4618      	mov	r0, r3
 8006850:	f7ff fa47 	bl	8005ce2 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
  resize_if_allowed(dst, src, func);
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	68b9      	ldr	r1, [r7, #8]
 8006858:	68f8      	ldr	r0, [r7, #12]
 800685a:	f000 fa37 	bl	8006ccc <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 800685e:	f107 0320 	add.w	r3, r7, #32
 8006862:	68f9      	ldr	r1, [r7, #12]
 8006864:	4618      	mov	r0, r3
 8006866:	f7ff fa3c 	bl	8005ce2 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 800686a:	68f8      	ldr	r0, [r7, #12]
 800686c:	f000 fa7a 	bl	8006d64 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv>
 8006870:	4603      	mov	r3, r0
 8006872:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8006876:	f107 0120 	add.w	r1, r7, #32
 800687a:	f107 0010 	add.w	r0, r7, #16
 800687e:	9300      	str	r3, [sp, #0]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f000 fa7a 	bl	8006d7a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIffEELi0EEC1ERS5_RKS5_RKS7_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 8006886:	f107 0310 	add.w	r3, r7, #16
 800688a:	4618      	mov	r0, r3
 800688c:	f000 fa8f 	bl	8006dae <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi2EE3runERS9_>
  DstEvaluatorType dstEvaluator(dst);
 8006890:	f107 0320 	add.w	r3, r7, #32
 8006894:	4618      	mov	r0, r3
 8006896:	f7fd feea 	bl	800466e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 800689a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800689e:	4618      	mov	r0, r3
 80068a0:	f7fd fee5 	bl	800466e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
}
 80068a4:	bf00      	nop
 80068a6:	3728      	adds	r7, #40	; 0x28
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b082      	sub	sp, #8
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	6039      	str	r1, [r7, #0]
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	4618      	mov	r0, r3
 80068ba:	f7fd fcc6 	bl	800424a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80068be:	4603      	mov	r3, r0
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	dd08      	ble.n	80068d6 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRKT_RKT0_+0x2a>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4618      	mov	r0, r3
 80068c8:	f7fd fcb4 	bl	8004234 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80068cc:	4603      	mov	r3, r0
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	dd01      	ble.n	80068d6 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRKT_RKT0_+0x2a>
 80068d2:	2301      	movs	r3, #1
 80068d4:	e000      	b.n	80068d8 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRKT_RKT0_+0x2c>
 80068d6:	2300      	movs	r3, #0
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d003      	beq.n	80068e4 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRKT_RKT0_+0x38>
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
 80068dc:	6839      	ldr	r1, [r7, #0]
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f000 fa70 	bl	8006dc4 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EELb0EE3runERSD_RKSE_>
}
 80068e4:	bf00      	nop
 80068e6:	3708      	adds	r7, #8
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEED1Ev>:
struct evaluator<PlainObjectBase<Derived> >
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b082      	sub	sp, #8
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f000 fa8a 	bl	8006e0e <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEED1Ev>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	4618      	mov	r0, r3
 80068fe:	3708      	adds	r7, #8
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}

08006904 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEED1Ev>:
struct evaluator<Matrix<Scalar, Rows, Cols, Options, MaxRows, MaxCols> >
 8006904:	b580      	push	{r7, lr}
 8006906:	b082      	sub	sp, #8
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	4618      	mov	r0, r3
 8006910:	f7ff ffec 	bl	80068ec <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEED1Ev>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	4618      	mov	r0, r3
 8006918:	3708      	adds	r7, #8
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}

0800691e <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEELi3ENS_10DenseShapeES9_ffED1Ev>:
};

// This is the default evaluator implementation for products:
// It creates a temporary and call generic_product_impl
template<typename Lhs, typename Rhs, int Options, int ProductTag, typename LhsShape, typename RhsShape>
struct product_evaluator<Product<Lhs, Rhs, Options>, ProductTag, LhsShape, RhsShape>
 800691e:	b580      	push	{r7, lr}
 8006920:	b082      	sub	sp, #8
 8006922:	af00      	add	r7, sp, #0
 8006924:	6078      	str	r0, [r7, #4]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	4618      	mov	r0, r3
 800692a:	f7ff ffeb 	bl	8006904 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEED1Ev>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	4618      	mov	r0, r3
 8006932:	3708      	adds	r7, #8
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 8006938:	b580      	push	{r7, lr}
 800693a:	b082      	sub	sp, #8
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	4618      	mov	r0, r3
 8006944:	f7ff ffeb 	bl	800691e <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEELi3ENS_10DenseShapeES9_ffED1Ev>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	4618      	mov	r0, r3
 800694c:	3708      	adds	r7, #8
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}

08006952 <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEED1Ev>:
struct evaluator<const T>
 8006952:	b580      	push	{r7, lr}
 8006954:	b082      	sub	sp, #8
 8006956:	af00      	add	r7, sp, #0
 8006958:	6078      	str	r0, [r7, #4]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4618      	mov	r0, r3
 800695e:	f7ff ffeb 	bl	8006938 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEED1Ev>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4618      	mov	r0, r3
 8006966:	3708      	adds	r7, #8
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}

0800696c <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>:
 800696c:	b580      	push	{r7, lr}
 800696e:	b082      	sub	sp, #8
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4618      	mov	r0, r3
 8006978:	f7ff feef 	bl	800675a <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4618      	mov	r0, r3
 8006980:	3708      	adds	r7, #8
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}

08006986 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE4DataD1Ev>:
  }

protected:

  // this helper permits to completely eliminate the functor if it is empty
  struct Data
 8006986:	b580      	push	{r7, lr}
 8006988:	b082      	sub	sp, #8
 800698a:	af00      	add	r7, sp, #0
 800698c:	6078      	str	r0, [r7, #4]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	332c      	adds	r3, #44	; 0x2c
 8006992:	4618      	mov	r0, r3
 8006994:	f7ff ffea 	bl	800696c <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	3304      	adds	r3, #4
 800699c:	4618      	mov	r0, r3
 800699e:	f7ff ffd8 	bl	8006952 <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEED1Ev>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4618      	mov	r0, r3
 80069a6:	3708      	adds	r7, #8
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}

080069ac <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b082      	sub	sp, #8
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	4618      	mov	r0, r3
 80069b8:	f7ff ffe5 	bl	8006986 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE4DataD1Ev>
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f000 fa1b 	bl	8006df8 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEED1Ev>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	4618      	mov	r0, r3
 80069c6:	3708      	adds	r7, #8
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}

080069cc <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b082      	sub	sp, #8
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4618      	mov	r0, r3
 80069d8:	f7ff ffe8 	bl	80069ac <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffED1Ev>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	4618      	mov	r0, r3
 80069e0:	3708      	adds	r7, #8
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}

080069e6 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 80069e6:	b580      	push	{r7, lr}
 80069e8:	b098      	sub	sp, #96	; 0x60
 80069ea:	af02      	add	r7, sp, #8
 80069ec:	60f8      	str	r0, [r7, #12]
 80069ee:	60b9      	str	r1, [r7, #8]
 80069f0:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 80069f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80069f6:	68b9      	ldr	r1, [r7, #8]
 80069f8:	4618      	mov	r0, r3
 80069fa:	f000 f9ee 	bl	8006dda <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1ERKSE_>
  resize_if_allowed(dst, src, func);
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	68b9      	ldr	r1, [r7, #8]
 8006a02:	68f8      	ldr	r0, [r7, #12]
 8006a04:	f000 fa28 	bl	8006e58 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 8006a08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a0c:	68f9      	ldr	r1, [r7, #12]
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f000 f8b2 	bl	8006b78 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 8006a14:	68f8      	ldr	r0, [r7, #12]
 8006a16:	f000 f917 	bl	8006c48 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE18const_cast_derivedEv>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006a20:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8006a24:	f107 0014 	add.w	r0, r7, #20
 8006a28:	9300      	str	r3, [sp, #0]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f000 fa5e 	bl	8006eec <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EEC1ERS5_RKSH_RKSJ_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 8006a30:	f107 0314 	add.w	r3, r7, #20
 8006a34:	4618      	mov	r0, r3
 8006a36:	f000 fa73 	bl	8006f20 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSL_>
  DstEvaluatorType dstEvaluator(dst);
 8006a3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f7ff fe8b 	bl	800675a <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 8006a44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f7ff ffbf 	bl	80069cc <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEED1Ev>
}
 8006a4e:	bf00      	nop
 8006a50:	3758      	adds	r7, #88	; 0x58
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}

08006a56 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_7ProductINS5_INS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS5_INS5_IS8_S6_Li0EEES9_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 8006a56:	b5b0      	push	{r4, r5, r7, lr}
 8006a58:	b084      	sub	sp, #16
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
 8006a5e:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f7fd ff29 	bl	80048b8 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8006a66:	4604      	mov	r4, r0
 8006a68:	6838      	ldr	r0, [r7, #0]
 8006a6a:	f7ff fb0a 	bl	8006082 <_ZNK5Eigen9EigenBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEE7derivedEv>
 8006a6e:	4605      	mov	r5, r0
 8006a70:	f107 030c 	add.w	r3, r7, #12
 8006a74:	4618      	mov	r0, r3
 8006a76:	f7ff fc18 	bl	80062aa <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8006a7a:	f107 030c 	add.w	r3, r7, #12
 8006a7e:	461a      	mov	r2, r3
 8006a80:	4629      	mov	r1, r5
 8006a82:	4620      	mov	r0, r4
 8006a84:	f000 fa57 	bl	8006f36 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f7fd ff15 	bl	80048b8 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8006a8e:	4603      	mov	r3, r0
    }
 8006a90:	4618      	mov	r0, r3
 8006a92:	3710      	adds	r7, #16
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bdb0      	pop	{r4, r5, r7, pc}

08006a98 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS2_KNS_7ProductIS2_NS5_INS6_20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 8006a98:	b5b0      	push	{r4, r5, r7, lr}
 8006a9a:	b084      	sub	sp, #16
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f7fd ff08 	bl	80048b8 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8006aa8:	4604      	mov	r4, r0
 8006aaa:	6838      	ldr	r0, [r7, #0]
 8006aac:	f7ff fb43 	bl	8006136 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS6_NS1_INS2_20scalar_difference_opIffEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS5_IfLi1ELi3ELi1ELi1ELi3EEES6_Li0EEEEELi0EEEEEE7derivedEv>
 8006ab0:	4605      	mov	r5, r0
 8006ab2:	f107 030c 	add.w	r3, r7, #12
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f7ff fbf7 	bl	80062aa <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8006abc:	f107 030c 	add.w	r3, r7, #12
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	4629      	mov	r1, r5
 8006ac4:	4620      	mov	r0, r4
 8006ac6:	f000 fa47 	bl	8006f58 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKS3_KNS_7ProductIS3_NS4_INS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f7fd fef4 	bl	80048b8 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8006ad0:	4603      	mov	r3, r0
    }
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3710      	adds	r7, #16
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bdb0      	pop	{r4, r5, r7, pc}

08006ada <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS5_INS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 8006ada:	b5b0      	push	{r4, r5, r7, lr}
 8006adc:	b084      	sub	sp, #16
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
 8006ae2:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f7fe f883 	bl	8004bf0 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8006aea:	4604      	mov	r4, r0
 8006aec:	6838      	ldr	r0, [r7, #0]
 8006aee:	f7ff fb63 	bl	80061b8 <_ZNK5Eigen9EigenBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li0EEEE7derivedEv>
 8006af2:	4605      	mov	r5, r0
 8006af4:	f107 030c 	add.w	r3, r7, #12
 8006af8:	4618      	mov	r0, r3
 8006afa:	f7ff fbd6 	bl	80062aa <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8006afe:	f107 030c 	add.w	r3, r7, #12
 8006b02:	461a      	mov	r2, r3
 8006b04:	4629      	mov	r1, r5
 8006b06:	4620      	mov	r0, r4
 8006b08:	f000 fa37 	bl	8006f7a <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f7fe f86f 	bl	8004bf0 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8006b12:	4603      	mov	r3, r0
    }
 8006b14:	4618      	mov	r0, r3
 8006b16:	3710      	adds	r7, #16
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bdb0      	pop	{r4, r5, r7, pc}

08006b1c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4sizeEv>:
  /** \returns the number of coefficients, which is rows()*cols().
    * \sa rows(), cols(), SizeAtCompileTime. */
  EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
  inline Index size() const EIGEN_NOEXCEPT { return rows() * cols(); }
 8006b1c:	b590      	push	{r4, r7, lr}
 8006b1e:	b083      	sub	sp, #12
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f7fd fd76 	bl	8004616 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8006b2a:	4604      	mov	r4, r0
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f7fd fd82 	bl	8004636 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8006b32:	4603      	mov	r3, r0
 8006b34:	fb04 f303 	mul.w	r3, r4, r3
 8006b38:	4618      	mov	r0, r3
 8006b3a:	370c      	adds	r7, #12
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd90      	pop	{r4, r7, pc}

08006b40 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b086      	sub	sp, #24
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	60f8      	str	r0, [r7, #12]
 8006b48:	60b9      	str	r1, [r7, #8]
 8006b4a:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	68b9      	ldr	r1, [r7, #8]
 8006b54:	6978      	ldr	r0, [r7, #20]
 8006b56:	f000 fa3c 	bl	8006fd2 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_>
}
 8006b5a:	bf00      	nop
 8006b5c:	3718      	adds	r7, #24
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}

08006b62 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Lb0EE3runERKS3_S6_>:
    static void run(const Derived&, const OtherDerived&)
 8006b62:	b480      	push	{r7}
 8006b64:	b083      	sub	sp, #12
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
 8006b6a:	6039      	str	r1, [r7, #0]
    }
 8006b6c:	bf00      	nop
 8006b6e:	370c      	adds	r7, #12
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr

08006b78 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>:
  explicit evaluator(const XprType& m)
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b082      	sub	sp, #8
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	6039      	str	r1, [r7, #0]
    : evaluator<PlainObjectBase<XprType> >(m)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	683a      	ldr	r2, [r7, #0]
 8006b86:	4611      	mov	r1, r2
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f000 fa5c 	bl	8007046 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1ERKS5_>
  { }
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4618      	mov	r0, r3
 8006b92:	3708      	adds	r7, #8
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}

08006b98 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	370c      	adds	r7, #12
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr
	...

08006bb0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b086      	sub	sp, #24
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	60f8      	str	r0, [r7, #12]
 8006bb8:	60b9      	str	r1, [r7, #8]
 8006bba:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f7fd fb43 	bl	800424a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8006bc4:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f7fd fb33 	bl	8004234 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8006bce:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f7fd fb39 	bl	800424a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8006bd8:	4602      	mov	r2, r0
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d107      	bne.n	8006bf0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	4618      	mov	r0, r3
 8006be4:	f7fd fb26 	bl	8004234 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8006be8:	4602      	mov	r2, r0
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d001      	beq.n	8006bf4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x44>
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	e000      	b.n	8006bf6 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x46>
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d005      	beq.n	8006c06 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x56>
    dst.resize(dstRows, dstCols);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	693a      	ldr	r2, [r7, #16]
 8006bfe:	6979      	ldr	r1, [r7, #20]
 8006c00:	4618      	mov	r0, r3
 8006c02:	f000 fa3b 	bl	800707c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f7fd fb1e 	bl	800424a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8006c0e:	4602      	mov	r2, r0
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d107      	bne.n	8006c26 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x76>
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f7fd fb0b 	bl	8004234 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d006      	beq.n	8006c34 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x84>
 8006c26:	4b05      	ldr	r3, [pc, #20]	; (8006c3c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 8006c28:	4a05      	ldr	r2, [pc, #20]	; (8006c40 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8006c2a:	f240 21fd 	movw	r1, #765	; 0x2fd
 8006c2e:	4805      	ldr	r0, [pc, #20]	; (8006c44 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x94>)
 8006c30:	f016 fa00 	bl	801d034 <__assert_func>
}
 8006c34:	bf00      	nop
 8006c36:	3718      	adds	r7, #24
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}
 8006c3c:	08021514 	.word	0x08021514
 8006c40:	08021544 	.word	0x08021544
 8006c44:	08021628 	.word	0x08021628

08006c48 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE18const_cast_derivedEv>:
  inline Derived& const_cast_derived() const
 8006c48:	b480      	push	{r7}
 8006c4a:	b083      	sub	sp, #12
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  { return *static_cast<Derived*>(const_cast<EigenBase*>(this)); }
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	4618      	mov	r0, r3
 8006c54:	370c      	adds	r7, #12
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr

08006c5e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EEC1ERS5_RKS5_RKS7_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8006c5e:	b480      	push	{r7}
 8006c60:	b085      	sub	sp, #20
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	60f8      	str	r0, [r7, #12]
 8006c66:	60b9      	str	r1, [r7, #8]
 8006c68:	607a      	str	r2, [r7, #4]
 8006c6a:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	68ba      	ldr	r2, [r7, #8]
 8006c70:	601a      	str	r2, [r3, #0]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	605a      	str	r2, [r3, #4]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	683a      	ldr	r2, [r7, #0]
 8006c7c:	609a      	str	r2, [r3, #8]
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	69ba      	ldr	r2, [r7, #24]
 8006c82:	60da      	str	r2, [r3, #12]
  }
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	4618      	mov	r0, r3
 8006c88:	3714      	adds	r7, #20
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr

08006c92 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi2EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8006c92:	b580      	push	{r7, lr}
 8006c94:	b082      	sub	sp, #8
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 fa20 	bl	80070e0 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi0ELi9EE3runERS9_>
  }
 8006ca0:	bf00      	nop
 8006ca2:	3708      	adds	r7, #8
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}

08006ca8 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b086      	sub	sp, #24
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	60f8      	str	r0, [r7, #12]
 8006cb0:	60b9      	str	r1, [r7, #8]
 8006cb2:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	68b9      	ldr	r1, [r7, #8]
 8006cbc:	6978      	ldr	r0, [r7, #20]
 8006cbe:	f000 fa3a 	bl	8007136 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_>
}
 8006cc2:	bf00      	nop
 8006cc4:	3718      	adds	r7, #24
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
	...

08006ccc <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b086      	sub	sp, #24
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	60f8      	str	r0, [r7, #12]
 8006cd4:	60b9      	str	r1, [r7, #8]
 8006cd6:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f7fd fb5b 	bl	8004396 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8006ce0:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f7fd fb4b 	bl	8004380 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8006cea:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f7fd fb51 	bl	8004396 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d107      	bne.n	8006d0c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f7fd fb3e 	bl	8004380 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8006d04:	4602      	mov	r2, r0
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d001      	beq.n	8006d10 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x44>
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	e000      	b.n	8006d12 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x46>
 8006d10:	2300      	movs	r3, #0
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d005      	beq.n	8006d22 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x56>
    dst.resize(dstRows, dstCols);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	693a      	ldr	r2, [r7, #16]
 8006d1a:	6979      	ldr	r1, [r7, #20]
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f000 fa45 	bl	80071ac <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	4618      	mov	r0, r3
 8006d26:	f7fd fb36 	bl	8004396 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d107      	bne.n	8006d42 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x76>
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	4618      	mov	r0, r3
 8006d36:	f7fd fb23 	bl	8004380 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8006d3a:	4602      	mov	r2, r0
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d006      	beq.n	8006d50 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x84>
 8006d42:	4b05      	ldr	r3, [pc, #20]	; (8006d58 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 8006d44:	4a05      	ldr	r2, [pc, #20]	; (8006d5c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8006d46:	f240 21fd 	movw	r1, #765	; 0x2fd
 8006d4a:	4805      	ldr	r0, [pc, #20]	; (8006d60 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x94>)
 8006d4c:	f016 f972 	bl	801d034 <__assert_func>
}
 8006d50:	bf00      	nop
 8006d52:	3718      	adds	r7, #24
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}
 8006d58:	08021514 	.word	0x08021514
 8006d5c:	08021684 	.word	0x08021684
 8006d60:	08021628 	.word	0x08021628

08006d64 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv>:
  inline Derived& const_cast_derived() const
 8006d64:	b480      	push	{r7}
 8006d66:	b083      	sub	sp, #12
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  { return *static_cast<Derived*>(const_cast<EigenBase*>(this)); }
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	4618      	mov	r0, r3
 8006d70:	370c      	adds	r7, #12
 8006d72:	46bd      	mov	sp, r7
 8006d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d78:	4770      	bx	lr

08006d7a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIffEELi0EEC1ERS5_RKS5_RKS7_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8006d7a:	b480      	push	{r7}
 8006d7c:	b085      	sub	sp, #20
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	60f8      	str	r0, [r7, #12]
 8006d82:	60b9      	str	r1, [r7, #8]
 8006d84:	607a      	str	r2, [r7, #4]
 8006d86:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	68ba      	ldr	r2, [r7, #8]
 8006d8c:	601a      	str	r2, [r3, #0]
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	605a      	str	r2, [r3, #4]
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	683a      	ldr	r2, [r7, #0]
 8006d98:	609a      	str	r2, [r3, #8]
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	69ba      	ldr	r2, [r7, #24]
 8006d9e:	60da      	str	r2, [r3, #12]
  }
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	4618      	mov	r0, r3
 8006da4:	3714      	adds	r7, #20
 8006da6:	46bd      	mov	sp, r7
 8006da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dac:	4770      	bx	lr

08006dae <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi2EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8006dae:	b580      	push	{r7, lr}
 8006db0:	b082      	sub	sp, #8
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f000 fa2a 	bl	8007210 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi0ELi3EE3runERS9_>
  }
 8006dbc:	bf00      	nop
 8006dbe:	3708      	adds	r7, #8
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}

08006dc4 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EELb0EE3runERSD_RKSE_>:
    static void run(const Derived&, const OtherDerived&)
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	6039      	str	r1, [r7, #0]
    }
 8006dce:	bf00      	nop
 8006dd0:	370c      	adds	r7, #12
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd8:	4770      	bx	lr

08006dda <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1ERKSE_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8006dda:	b580      	push	{r7, lr}
 8006ddc:	b082      	sub	sp, #8
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	6078      	str	r0, [r7, #4]
 8006de2:	6039      	str	r1, [r7, #0]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6839      	ldr	r1, [r7, #0]
 8006de8:	4618      	mov	r0, r3
 8006dea:	f000 fa20 	bl	800722e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffEC1ERKSE_>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	4618      	mov	r0, r3
 8006df2:	3708      	adds	r7, #8
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8006df8:	b480      	push	{r7}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	4618      	mov	r0, r3
 8006e04:	370c      	adds	r7, #12
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr

08006e0e <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEED1Ev>:
 8006e0e:	b480      	push	{r7}
 8006e10:	b083      	sub	sp, #12
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	6078      	str	r0, [r7, #4]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	4618      	mov	r0, r3
 8006e1a:	370c      	adds	r7, #12
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr

08006e24 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b082      	sub	sp, #8
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f7fd ffc6 	bl	8004dc0 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4rowsEv>
 8006e34:	4603      	mov	r3, r0
    }
 8006e36:	4618      	mov	r0, r3
 8006e38:	3708      	adds	r7, #8
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}

08006e3e <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 8006e3e:	b580      	push	{r7, lr}
 8006e40:	b082      	sub	sp, #8
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f7fd ffc6 	bl	8004dda <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4colsEv>
 8006e4e:	4603      	mov	r3, r0
    }
 8006e50:	4618      	mov	r0, r3
 8006e52:	3708      	adds	r7, #8
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}

08006e58 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b086      	sub	sp, #24
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	60f8      	str	r0, [r7, #12]
 8006e60:	60b9      	str	r1, [r7, #8]
 8006e62:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8006e64:	68b8      	ldr	r0, [r7, #8]
 8006e66:	f7ff ffdd 	bl	8006e24 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E4rowsEv>
 8006e6a:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8006e6c:	68b8      	ldr	r0, [r7, #8]
 8006e6e:	f7ff ffe6 	bl	8006e3e <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E4colsEv>
 8006e72:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	4618      	mov	r0, r3
 8006e78:	f7fd f9e7 	bl	800424a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d107      	bne.n	8006e94 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	4618      	mov	r0, r3
 8006e88:	f7fd f9d4 	bl	8004234 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d001      	beq.n	8006e98 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 8006e94:	2301      	movs	r3, #1
 8006e96:	e000      	b.n	8006e9a <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 8006e98:	2300      	movs	r3, #0
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d005      	beq.n	8006eaa <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	693a      	ldr	r2, [r7, #16]
 8006ea2:	6979      	ldr	r1, [r7, #20]
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f000 f8e9 	bl	800707c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	4618      	mov	r0, r3
 8006eae:	f7fd f9cc 	bl	800424a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8006eb2:	4602      	mov	r2, r0
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d107      	bne.n	8006eca <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f7fd f9b9 	bl	8004234 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8006ec2:	4602      	mov	r2, r0
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d006      	beq.n	8006ed8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 8006eca:	4b05      	ldr	r3, [pc, #20]	; (8006ee0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 8006ecc:	4a05      	ldr	r2, [pc, #20]	; (8006ee4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 8006ece:	f240 21fd 	movw	r1, #765	; 0x2fd
 8006ed2:	4805      	ldr	r0, [pc, #20]	; (8006ee8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8006ed4:	f016 f8ae 	bl	801d034 <__assert_func>
}
 8006ed8:	bf00      	nop
 8006eda:	3718      	adds	r7, #24
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	08021514 	.word	0x08021514
 8006ee4:	08021768 	.word	0x08021768
 8006ee8:	08021628 	.word	0x08021628

08006eec <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EEC1ERS5_RKSH_RKSJ_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8006eec:	b480      	push	{r7}
 8006eee:	b085      	sub	sp, #20
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	60f8      	str	r0, [r7, #12]
 8006ef4:	60b9      	str	r1, [r7, #8]
 8006ef6:	607a      	str	r2, [r7, #4]
 8006ef8:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	68ba      	ldr	r2, [r7, #8]
 8006efe:	601a      	str	r2, [r3, #0]
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	605a      	str	r2, [r3, #4]
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	683a      	ldr	r2, [r7, #0]
 8006f0a:	609a      	str	r2, [r3, #8]
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	69ba      	ldr	r2, [r7, #24]
 8006f10:	60da      	str	r2, [r3, #12]
  }
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	4618      	mov	r0, r3
 8006f16:	3714      	adds	r7, #20
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr

08006f20 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b082      	sub	sp, #8
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f000 f992 	bl	8007252 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSL_>
  }
 8006f2e:	bf00      	nop
 8006f30:	3708      	adds	r7, #8
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}

08006f36 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8006f36:	b580      	push	{r7, lr}
 8006f38:	b086      	sub	sp, #24
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	60f8      	str	r0, [r7, #12]
 8006f3e:	60b9      	str	r1, [r7, #8]
 8006f40:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	68b9      	ldr	r1, [r7, #8]
 8006f4a:	6978      	ldr	r0, [r7, #20]
 8006f4c:	f000 f9ac 	bl	80072a8 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_>
}
 8006f50:	bf00      	nop
 8006f52:	3718      	adds	r7, #24
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}

08006f58 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKS3_KNS_7ProductIS3_NS4_INS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b086      	sub	sp, #24
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	60f8      	str	r0, [r7, #12]
 8006f60:	60b9      	str	r1, [r7, #8]
 8006f62:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8006f68:	687a      	ldr	r2, [r7, #4]
 8006f6a:	68b9      	ldr	r1, [r7, #8]
 8006f6c:	6978      	ldr	r0, [r7, #20]
 8006f6e:	f000 f9d5 	bl	800731c <_ZN5Eigen8internal30assignment_from_xpr_op_productINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_9assign_opIffEENS0_13add_assign_opIffEEE3runINS5_INS0_13scalar_sum_opIffEEKS3_KSE_EESG_EEvRS3_RKT_RKT0_>
}
 8006f72:	bf00      	nop
 8006f74:	3718      	adds	r7, #24
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}

08006f7a <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8006f7a:	b580      	push	{r7, lr}
 8006f7c:	b086      	sub	sp, #24
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	60f8      	str	r0, [r7, #12]
 8006f82:	60b9      	str	r1, [r7, #8]
 8006f84:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8006f8a:	687a      	ldr	r2, [r7, #4]
 8006f8c:	68b9      	ldr	r1, [r7, #8]
 8006f8e:	6978      	ldr	r0, [r7, #20]
 8006f90:	f000 fa09 	bl	80073a6 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>
}
 8006f94:	bf00      	nop
 8006f96:	3718      	adds	r7, #24
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE4rowsEv>:
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b082      	sub	sp, #8
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f000 fa37 	bl	800741a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4rowsEv>
 8006fac:	4603      	mov	r3, r0
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3708      	adds	r7, #8
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}

08006fb6 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8006fb6:	b580      	push	{r7, lr}
 8006fb8:	b082      	sub	sp, #8
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	6078      	str	r0, [r7, #4]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	3310      	adds	r3, #16
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f000 fa37 	bl	8007436 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3708      	adds	r7, #8
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}

08006fd2 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_>:
struct Assignment<DstXprType, Product<Lhs,Rhs,Options>, internal::assign_op<Scalar,Scalar>, Dense2Dense,
  typename enable_if<(Options==DefaultProduct || Options==AliasFreeProduct)>::type>
{
  typedef Product<Lhs,Rhs,Options> SrcXprType;
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<Scalar,Scalar> &)
 8006fd2:	b590      	push	{r4, r7, lr}
 8006fd4:	b087      	sub	sp, #28
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	60f8      	str	r0, [r7, #12]
 8006fda:	60b9      	str	r1, [r7, #8]
 8006fdc:	607a      	str	r2, [r7, #4]
  {
    Index dstRows = src.rows();
 8006fde:	68b8      	ldr	r0, [r7, #8]
 8006fe0:	f7ff ffdc 	bl	8006f9c <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE4rowsEv>
 8006fe4:	6178      	str	r0, [r7, #20]
    Index dstCols = src.cols();
 8006fe6:	68b8      	ldr	r0, [r7, #8]
 8006fe8:	f7ff ffe5 	bl	8006fb6 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE4colsEv>
 8006fec:	6138      	str	r0, [r7, #16]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f7fd f92a 	bl	800424a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8006ff6:	4602      	mov	r2, r0
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d107      	bne.n	800700e <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x3c>
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	4618      	mov	r0, r3
 8007002:	f7fd f917 	bl	8004234 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8007006:	4602      	mov	r2, r0
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	4293      	cmp	r3, r2
 800700c:	d001      	beq.n	8007012 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x40>
 800700e:	2301      	movs	r3, #1
 8007010:	e000      	b.n	8007014 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x42>
 8007012:	2300      	movs	r3, #0
 8007014:	2b00      	cmp	r3, #0
 8007016:	d005      	beq.n	8007024 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x52>
      dst.resize(dstRows, dstCols);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	693a      	ldr	r2, [r7, #16]
 800701c:	6979      	ldr	r1, [r7, #20]
 800701e:	4618      	mov	r0, r3
 8007020:	f000 f82c 	bl	800707c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
    // FIXME shall we handle nested_eval here?
    generic_product_impl<Lhs, Rhs>::evalTo(dst, src.lhs(), src.rhs());
 8007024:	68b8      	ldr	r0, [r7, #8]
 8007026:	f000 fa14 	bl	8007452 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE3lhsEv>
 800702a:	4604      	mov	r4, r0
 800702c:	68b8      	ldr	r0, [r7, #8]
 800702e:	f000 fa1b 	bl	8007468 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE3rhsEv>
 8007032:	4603      	mov	r3, r0
 8007034:	461a      	mov	r2, r3
 8007036:	4621      	mov	r1, r4
 8007038:	68f8      	ldr	r0, [r7, #12]
 800703a:	f000 fa21 	bl	8007480 <_ZN5Eigen8internal20generic_product_implINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EENS_10DenseShapeESG_Li3EE6evalToINS5_IfLi3ELi3ELi0ELi3ELi3EEEEEvRT_RKSD_RKSF_>
  }
 800703e:	bf00      	nop
 8007040:	371c      	adds	r7, #28
 8007042:	46bd      	mov	sp, r7
 8007044:	bd90      	pop	{r4, r7, pc}

08007046 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1ERKS5_>:
  explicit evaluator(const PlainObjectType& m)
 8007046:	b5b0      	push	{r4, r5, r7, lr}
 8007048:	b082      	sub	sp, #8
 800704a:	af00      	add	r7, sp, #0
 800704c:	6078      	str	r0, [r7, #4]
 800704e:	6039      	str	r1, [r7, #0]
    : m_d(m.data(),IsVectorAtCompileTime ? 0 : m.outerStride())
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f000 fa50 	bl	80074f6 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
 8007056:	687c      	ldr	r4, [r7, #4]
 8007058:	6838      	ldr	r0, [r7, #0]
 800705a:	f000 fa2f 	bl	80074bc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4dataEv>
 800705e:	4605      	mov	r5, r0
 8007060:	6838      	ldr	r0, [r7, #0]
 8007062:	f000 fa38 	bl	80074d6 <_ZNK5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3EE11outerStrideEv>
 8007066:	4603      	mov	r3, r0
 8007068:	461a      	mov	r2, r3
 800706a:	4629      	mov	r1, r5
 800706c:	4620      	mov	r0, r4
 800706e:	f000 fa4d 	bl	800750c <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EEC1EPKfi>
  }
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	4618      	mov	r0, r3
 8007076:	3708      	adds	r7, #8
 8007078:	46bd      	mov	sp, r7
 800707a:	bdb0      	pop	{r4, r5, r7, pc}

0800707c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>:
    EIGEN_STRONG_INLINE void resize(Index rows, Index cols)
 800707c:	b580      	push	{r7, lr}
 800707e:	b086      	sub	sp, #24
 8007080:	af00      	add	r7, sp, #0
 8007082:	60f8      	str	r0, [r7, #12]
 8007084:	60b9      	str	r1, [r7, #8]
 8007086:	607a      	str	r2, [r7, #4]
      eigen_assert(   EIGEN_IMPLIES(RowsAtCompileTime!=Dynamic,rows==RowsAtCompileTime)
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	2b03      	cmp	r3, #3
 800708c:	d108      	bne.n	80070a0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x24>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2b03      	cmp	r3, #3
 8007092:	d105      	bne.n	80070a0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x24>
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	2b00      	cmp	r3, #0
 8007098:	db02      	blt.n	80070a0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x24>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2b00      	cmp	r3, #0
 800709e:	da06      	bge.n	80070ae <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x32>
 80070a0:	4b0c      	ldr	r3, [pc, #48]	; (80070d4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x58>)
 80070a2:	4a0d      	ldr	r2, [pc, #52]	; (80070d8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x5c>)
 80070a4:	f240 1111 	movw	r1, #273	; 0x111
 80070a8:	480c      	ldr	r0, [pc, #48]	; (80070dc <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x60>)
 80070aa:	f015 ffc3 	bl	801d034 <__assert_func>
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	617b      	str	r3, [r7, #20]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	613b      	str	r3, [r7, #16]
  }
 80070b6:	bf00      	nop
        m_storage.resize(rows*cols, rows, cols);
 80070b8:	68f8      	ldr	r0, [r7, #12]
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	687a      	ldr	r2, [r7, #4]
 80070be:	fb02 f103 	mul.w	r1, r2, r3
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	68ba      	ldr	r2, [r7, #8]
 80070c6:	f000 fa33 	bl	8007530 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE6resizeEiii>
    }
 80070ca:	bf00      	nop
 80070cc:	3718      	adds	r7, #24
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}
 80070d2:	bf00      	nop
 80070d4:	0802192c 	.word	0x0802192c
 80070d8:	08021abc 	.word	0x08021abc
 80070dc:	08021b48 	.word	0x08021b48

080070e0 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi0ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b082      	sub	sp, #8
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 80070e8:	2100      	movs	r1, #0
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 fa2d 	bl	800754a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f000 fa48 	bl	8007586 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi9EE3runERS9_>
  }
 80070f6:	bf00      	nop
 80070f8:	3708      	adds	r7, #8
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}

080070fe <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 80070fe:	b580      	push	{r7, lr}
 8007100:	b082      	sub	sp, #8
 8007102:	af00      	add	r7, sp, #0
 8007104:	6078      	str	r0, [r7, #4]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4618      	mov	r0, r3
 800710c:	f7fd f89d 	bl	800424a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8007110:	4603      	mov	r3, r0
 8007112:	4618      	mov	r0, r3
 8007114:	3708      	adds	r7, #8
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}

0800711a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 800711a:	b580      	push	{r7, lr}
 800711c:	b082      	sub	sp, #8
 800711e:	af00      	add	r7, sp, #0
 8007120:	6078      	str	r0, [r7, #4]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	4618      	mov	r0, r3
 8007128:	f7fd f92a 	bl	8004380 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800712c:	4603      	mov	r3, r0
 800712e:	4618      	mov	r0, r3
 8007130:	3708      	adds	r7, #8
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}

08007136 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<Scalar,Scalar> &)
 8007136:	b590      	push	{r4, r7, lr}
 8007138:	b087      	sub	sp, #28
 800713a:	af00      	add	r7, sp, #0
 800713c:	60f8      	str	r0, [r7, #12]
 800713e:	60b9      	str	r1, [r7, #8]
 8007140:	607a      	str	r2, [r7, #4]
    Index dstRows = src.rows();
 8007142:	68b8      	ldr	r0, [r7, #8]
 8007144:	f7ff ffdb 	bl	80070fe <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4rowsEv>
 8007148:	6178      	str	r0, [r7, #20]
    Index dstCols = src.cols();
 800714a:	68b8      	ldr	r0, [r7, #8]
 800714c:	f7ff ffe5 	bl	800711a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4colsEv>
 8007150:	6138      	str	r0, [r7, #16]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	4618      	mov	r0, r3
 8007156:	f7fd f91e 	bl	8004396 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800715a:	4602      	mov	r2, r0
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	4293      	cmp	r3, r2
 8007160:	d107      	bne.n	8007172 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_+0x3c>
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	4618      	mov	r0, r3
 8007166:	f7fd f90b 	bl	8004380 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800716a:	4602      	mov	r2, r0
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	4293      	cmp	r3, r2
 8007170:	d001      	beq.n	8007176 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_+0x40>
 8007172:	2301      	movs	r3, #1
 8007174:	e000      	b.n	8007178 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_+0x42>
 8007176:	2300      	movs	r3, #0
 8007178:	2b00      	cmp	r3, #0
 800717a:	d005      	beq.n	8007188 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_+0x52>
      dst.resize(dstRows, dstCols);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	693a      	ldr	r2, [r7, #16]
 8007180:	6979      	ldr	r1, [r7, #20]
 8007182:	4618      	mov	r0, r3
 8007184:	f000 f812 	bl	80071ac <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
    generic_product_impl<Lhs, Rhs>::evalTo(dst, src.lhs(), src.rhs());
 8007188:	68b8      	ldr	r0, [r7, #8]
 800718a:	f000 fa0b 	bl	80075a4 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3lhsEv>
 800718e:	4604      	mov	r4, r0
 8007190:	68b8      	ldr	r0, [r7, #8]
 8007192:	f000 fa13 	bl	80075bc <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3rhsEv>
 8007196:	4603      	mov	r3, r0
 8007198:	461a      	mov	r2, r3
 800719a:	4621      	mov	r1, r4
 800719c:	68f8      	ldr	r0, [r7, #12]
 800719e:	f000 fa19 	bl	80075d4 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEENS_10DenseShapeES5_Li3EE6evalToIS4_EEvRT_RKS3_RKS4_>
  }
 80071a2:	bf00      	nop
 80071a4:	371c      	adds	r7, #28
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd90      	pop	{r4, r7, pc}
	...

080071ac <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>:
    EIGEN_STRONG_INLINE void resize(Index rows, Index cols)
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b086      	sub	sp, #24
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	60f8      	str	r0, [r7, #12]
 80071b4:	60b9      	str	r1, [r7, #8]
 80071b6:	607a      	str	r2, [r7, #4]
      eigen_assert(   EIGEN_IMPLIES(RowsAtCompileTime!=Dynamic,rows==RowsAtCompileTime)
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	2b03      	cmp	r3, #3
 80071bc:	d108      	bne.n	80071d0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x24>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d105      	bne.n	80071d0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x24>
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	db02      	blt.n	80071d0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x24>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	da06      	bge.n	80071de <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x32>
 80071d0:	4b0c      	ldr	r3, [pc, #48]	; (8007204 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x58>)
 80071d2:	4a0d      	ldr	r2, [pc, #52]	; (8007208 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x5c>)
 80071d4:	f240 1111 	movw	r1, #273	; 0x111
 80071d8:	480c      	ldr	r0, [pc, #48]	; (800720c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x60>)
 80071da:	f015 ff2b 	bl	801d034 <__assert_func>
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	617b      	str	r3, [r7, #20]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	613b      	str	r3, [r7, #16]
  }
 80071e6:	bf00      	nop
        m_storage.resize(rows*cols, rows, cols);
 80071e8:	68f8      	ldr	r0, [r7, #12]
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	687a      	ldr	r2, [r7, #4]
 80071ee:	fb02 f103 	mul.w	r1, r2, r3
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	68ba      	ldr	r2, [r7, #8]
 80071f6:	f000 fa0b 	bl	8007610 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE6resizeEiii>
    }
 80071fa:	bf00      	nop
 80071fc:	3718      	adds	r7, #24
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}
 8007202:	bf00      	nop
 8007204:	0802192c 	.word	0x0802192c
 8007208:	08021ba4 	.word	0x08021ba4
 800720c:	08021b48 	.word	0x08021b48

08007210 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi0ELi3EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8007210:	b580      	push	{r7, lr}
 8007212:	b082      	sub	sp, #8
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8007218:	2100      	movs	r1, #0
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 fa05 	bl	800762a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f000 fa20 	bl	8007666 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi3EE3runERS9_>
  }
 8007226:	bf00      	nop
 8007228:	3708      	adds	r7, #8
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}

0800722e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffEC1ERKSE_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 800722e:	b580      	push	{r7, lr}
 8007230:	b082      	sub	sp, #8
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
 8007236:	6039      	str	r1, [r7, #0]
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 fa23 	bl	8007684 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1Ev>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6839      	ldr	r1, [r7, #0]
 8007242:	4618      	mov	r0, r3
 8007244:	f000 fa29 	bl	800769a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE4DataC1ERKSE_>
  }
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	4618      	mov	r0, r3
 800724c:	3708      	adds	r7, #8
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}

08007252 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8007252:	b580      	push	{r7, lr}
 8007254:	b082      	sub	sp, #8
 8007256:	af00      	add	r7, sp, #0
 8007258:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800725a:	2200      	movs	r2, #0
 800725c:	2100      	movs	r1, #0
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 fa43 	bl	80076ea <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 fa59 	bl	800771c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSL_>
  }
 800726a:	bf00      	nop
 800726c:	3708      	adds	r7, #8
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}

08007272 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8007272:	b580      	push	{r7, lr}
 8007274:	b082      	sub	sp, #8
 8007276:	af00      	add	r7, sp, #0
 8007278:	6078      	str	r0, [r7, #4]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	4618      	mov	r0, r3
 800727e:	f000 fa5d 	bl	800773c <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4rowsEv>
 8007282:	4603      	mov	r3, r0
 8007284:	4618      	mov	r0, r3
 8007286:	3708      	adds	r7, #8
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}

0800728c <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 800728c:	b580      	push	{r7, lr}
 800728e:	b082      	sub	sp, #8
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	3308      	adds	r3, #8
 8007298:	4618      	mov	r0, r3
 800729a:	f000 fa5d 	bl	8007758 <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4colsEv>
 800729e:	4603      	mov	r3, r0
 80072a0:	4618      	mov	r0, r3
 80072a2:	3708      	adds	r7, #8
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<Scalar,Scalar> &)
 80072a8:	b590      	push	{r4, r7, lr}
 80072aa:	b087      	sub	sp, #28
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	60f8      	str	r0, [r7, #12]
 80072b0:	60b9      	str	r1, [r7, #8]
 80072b2:	607a      	str	r2, [r7, #4]
    Index dstRows = src.rows();
 80072b4:	68b8      	ldr	r0, [r7, #8]
 80072b6:	f7ff ffdc 	bl	8007272 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE4rowsEv>
 80072ba:	6178      	str	r0, [r7, #20]
    Index dstCols = src.cols();
 80072bc:	68b8      	ldr	r0, [r7, #8]
 80072be:	f7ff ffe5 	bl	800728c <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE4colsEv>
 80072c2:	6138      	str	r0, [r7, #16]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	4618      	mov	r0, r3
 80072c8:	f7fd f865 	bl	8004396 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80072cc:	4602      	mov	r2, r0
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d107      	bne.n	80072e4 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_+0x3c>
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	4618      	mov	r0, r3
 80072d8:	f7fd f852 	bl	8004380 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80072dc:	4602      	mov	r2, r0
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d001      	beq.n	80072e8 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_+0x40>
 80072e4:	2301      	movs	r3, #1
 80072e6:	e000      	b.n	80072ea <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_+0x42>
 80072e8:	2300      	movs	r3, #0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d005      	beq.n	80072fa <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_+0x52>
      dst.resize(dstRows, dstCols);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	693a      	ldr	r2, [r7, #16]
 80072f2:	6979      	ldr	r1, [r7, #20]
 80072f4:	4618      	mov	r0, r3
 80072f6:	f7ff ff59 	bl	80071ac <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
    generic_product_impl<Lhs, Rhs>::evalTo(dst, src.lhs(), src.rhs());
 80072fa:	68b8      	ldr	r0, [r7, #8]
 80072fc:	f000 fa39 	bl	8007772 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE3lhsEv>
 8007300:	4604      	mov	r4, r0
 8007302:	68b8      	ldr	r0, [r7, #8]
 8007304:	f000 fa40 	bl	8007788 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE3rhsEv>
 8007308:	4603      	mov	r3, r0
 800730a:	461a      	mov	r2, r3
 800730c:	4621      	mov	r1, r4
 800730e:	68f8      	ldr	r0, [r7, #12]
 8007310:	f000 fa46 	bl	80077a0 <_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEENS_10DenseShapeESK_Li3EE6evalToINS3_IfLi3ELi1ELi0ELi3ELi1EEEEEvRT_RKS8_RKSJ_>
  }
 8007314:	bf00      	nop
 8007316:	371c      	adds	r7, #28
 8007318:	46bd      	mov	sp, r7
 800731a:	bd90      	pop	{r4, r7, pc}

0800731c <_ZN5Eigen8internal30assignment_from_xpr_op_productINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_9assign_opIffEENS0_13add_assign_opIffEEE3runINS5_INS0_13scalar_sum_opIffEEKS3_KSE_EESG_EEvRS3_RKT_RKT0_>:
template<typename DstXprType, typename OtherXpr, typename ProductType, typename Func1, typename Func2>
struct assignment_from_xpr_op_product
{
  template<typename SrcXprType, typename InitialFunc>
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  void run(DstXprType &dst, const SrcXprType &src, const InitialFunc& /*func*/)
 800731c:	b590      	push	{r4, r7, lr}
 800731e:	b087      	sub	sp, #28
 8007320:	af00      	add	r7, sp, #0
 8007322:	60f8      	str	r0, [r7, #12]
 8007324:	60b9      	str	r1, [r7, #8]
 8007326:	607a      	str	r2, [r7, #4]
  {
    call_assignment_no_alias(dst, src.lhs(), Func1());
 8007328:	68b8      	ldr	r0, [r7, #8]
 800732a:	f000 fa57 	bl	80077dc <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEE3lhsEv>
 800732e:	4604      	mov	r4, r0
 8007330:	f107 0310 	add.w	r3, r7, #16
 8007334:	4618      	mov	r0, r3
 8007336:	f7fe ffb8 	bl	80062aa <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800733a:	f107 0310 	add.w	r3, r7, #16
 800733e:	461a      	mov	r2, r3
 8007340:	4621      	mov	r1, r4
 8007342:	68f8      	ldr	r0, [r7, #12]
 8007344:	f7ff f8be 	bl	80064c4 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
    call_assignment_no_alias(dst, src.rhs(), Func2());
 8007348:	68b8      	ldr	r0, [r7, #8]
 800734a:	f000 fa53 	bl	80077f4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEE3rhsEv>
 800734e:	4604      	mov	r4, r0
 8007350:	f107 0314 	add.w	r3, r7, #20
 8007354:	4618      	mov	r0, r3
 8007356:	f000 fa59 	bl	800780c <_ZN5Eigen8internal13add_assign_opIffEC1Ev>
 800735a:	f107 0314 	add.w	r3, r7, #20
 800735e:	461a      	mov	r2, r3
 8007360:	4621      	mov	r1, r4
 8007362:	68f8      	ldr	r0, [r7, #12]
 8007364:	f000 fa5d 	bl	8007822 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8007368:	bf00      	nop
 800736a:	371c      	adds	r7, #28
 800736c:	46bd      	mov	sp, r7
 800736e:	bd90      	pop	{r4, r7, pc}

08007370 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8007370:	b580      	push	{r7, lr}
 8007372:	b082      	sub	sp, #8
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	4618      	mov	r0, r3
 800737c:	f000 fa62 	bl	8007844 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE4rowsEv>
 8007380:	4603      	mov	r3, r0
 8007382:	4618      	mov	r0, r3
 8007384:	3708      	adds	r7, #8
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}

0800738a <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 800738a:	b580      	push	{r7, lr}
 800738c:	b082      	sub	sp, #8
 800738e:	af00      	add	r7, sp, #0
 8007390:	6078      	str	r0, [r7, #4]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	691b      	ldr	r3, [r3, #16]
 8007396:	4618      	mov	r0, r3
 8007398:	f7fc ff4c 	bl	8004234 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800739c:	4603      	mov	r3, r0
 800739e:	4618      	mov	r0, r3
 80073a0:	3708      	adds	r7, #8
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}

080073a6 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<Scalar,Scalar> &)
 80073a6:	b590      	push	{r4, r7, lr}
 80073a8:	b087      	sub	sp, #28
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	60f8      	str	r0, [r7, #12]
 80073ae:	60b9      	str	r1, [r7, #8]
 80073b0:	607a      	str	r2, [r7, #4]
    Index dstRows = src.rows();
 80073b2:	68b8      	ldr	r0, [r7, #8]
 80073b4:	f7ff ffdc 	bl	8007370 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE4rowsEv>
 80073b8:	6178      	str	r0, [r7, #20]
    Index dstCols = src.cols();
 80073ba:	68b8      	ldr	r0, [r7, #8]
 80073bc:	f7ff ffe5 	bl	800738a <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE4colsEv>
 80073c0:	6138      	str	r0, [r7, #16]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	4618      	mov	r0, r3
 80073c6:	f7fc ff40 	bl	800424a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80073ca:	4602      	mov	r2, r0
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d107      	bne.n	80073e2 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x3c>
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	4618      	mov	r0, r3
 80073d6:	f7fc ff2d 	bl	8004234 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80073da:	4602      	mov	r2, r0
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	4293      	cmp	r3, r2
 80073e0:	d001      	beq.n	80073e6 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x40>
 80073e2:	2301      	movs	r3, #1
 80073e4:	e000      	b.n	80073e8 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x42>
 80073e6:	2300      	movs	r3, #0
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d005      	beq.n	80073f8 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x52>
      dst.resize(dstRows, dstCols);
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	693a      	ldr	r2, [r7, #16]
 80073f0:	6979      	ldr	r1, [r7, #20]
 80073f2:	4618      	mov	r0, r3
 80073f4:	f7ff fe42 	bl	800707c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
    generic_product_impl<Lhs, Rhs>::evalTo(dst, src.lhs(), src.rhs());
 80073f8:	68b8      	ldr	r0, [r7, #8]
 80073fa:	f000 fa31 	bl	8007860 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE3lhsEv>
 80073fe:	4604      	mov	r4, r0
 8007400:	68b8      	ldr	r0, [r7, #8]
 8007402:	f000 fa38 	bl	8007876 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE3rhsEv>
 8007406:	4603      	mov	r3, r0
 8007408:	461a      	mov	r2, r3
 800740a:	4621      	mov	r1, r4
 800740c:	68f8      	ldr	r0, [r7, #12]
 800740e:	f000 fa3e 	bl	800788e <_ZN5Eigen8internal20generic_product_implINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_NS_10DenseShapeESE_Li3EE6evalToIS6_EEvRT_RKSD_RS7_>
  }
 8007412:	bf00      	nop
 8007414:	371c      	adds	r7, #28
 8007416:	46bd      	mov	sp, r7
 8007418:	bd90      	pop	{r4, r7, pc}

0800741a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 800741a:	b580      	push	{r7, lr}
 800741c:	b082      	sub	sp, #8
 800741e:	af00      	add	r7, sp, #0
 8007420:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4618      	mov	r0, r3
 8007428:	f7fc ffb5 	bl	8004396 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800742c:	4603      	mov	r3, r0
    }
 800742e:	4618      	mov	r0, r3
 8007430:	3708      	adds	r7, #8
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}

08007436 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 8007436:	b580      	push	{r7, lr}
 8007438:	b082      	sub	sp, #8
 800743a:	af00      	add	r7, sp, #0
 800743c:	6078      	str	r0, [r7, #4]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4618      	mov	r0, r3
 8007444:	f7fc ffa7 	bl	8004396 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8007448:	4603      	mov	r3, r0
 800744a:	4618      	mov	r0, r3
 800744c:	3708      	adds	r7, #8
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}

08007452 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8007452:	b480      	push	{r7}
 8007454:	b083      	sub	sp, #12
 8007456:	af00      	add	r7, sp, #0
 8007458:	6078      	str	r0, [r7, #4]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	4618      	mov	r0, r3
 800745e:	370c      	adds	r7, #12
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr

08007468 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8007468:	b480      	push	{r7}
 800746a:	b083      	sub	sp, #12
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	3310      	adds	r3, #16
 8007474:	4618      	mov	r0, r3
 8007476:	370c      	adds	r7, #12
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr

08007480 <_ZN5Eigen8internal20generic_product_implINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EENS_10DenseShapeESG_Li3EE6evalToINS5_IfLi3ELi3ELi0ELi3ELi3EEEEEvRT_RKSD_RKSF_>:
struct generic_product_impl<Lhs,Rhs,DenseShape,DenseShape,CoeffBasedProductMode>
{
  typedef typename Product<Lhs,Rhs>::Scalar Scalar;

  template<typename Dst>
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 8007480:	b580      	push	{r7, lr}
 8007482:	b08a      	sub	sp, #40	; 0x28
 8007484:	af00      	add	r7, sp, #0
 8007486:	60f8      	str	r0, [r7, #12]
 8007488:	60b9      	str	r1, [r7, #8]
 800748a:	607a      	str	r2, [r7, #4]
  {
    // Same as: dst.noalias() = lhs.lazyProduct(rhs);
    // but easier on the compiler side
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 800748c:	f107 0310 	add.w	r3, r7, #16
 8007490:	687a      	ldr	r2, [r7, #4]
 8007492:	68b9      	ldr	r1, [r7, #8]
 8007494:	4618      	mov	r0, r3
 8007496:	f000 fa18 	bl	80078ca <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE11lazyProductINS_9TransposeIS6_EEEEKNS_7ProductISD_T_Li1EEERKNS0_ISJ_EE>
 800749a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800749e:	4618      	mov	r0, r3
 80074a0:	f7fe ff03 	bl	80062aa <_ZN5Eigen8internal9assign_opIffEC1Ev>
 80074a4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80074a8:	f107 0310 	add.w	r3, r7, #16
 80074ac:	4619      	mov	r1, r3
 80074ae:	68f8      	ldr	r0, [r7, #12]
 80074b0:	f000 fa22 	bl	80078f8 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 80074b4:	bf00      	nop
 80074b6:	3728      	adds	r7, #40	; 0x28
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}

080074bc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4dataEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar *data() const
 80074bc:	b580      	push	{r7, lr}
 80074be:	b082      	sub	sp, #8
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
    { return m_storage.data(); }
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	4618      	mov	r0, r3
 80074c8:	f000 fa27 	bl	800791a <_ZNK5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4dataEv>
 80074cc:	4603      	mov	r3, r0
 80074ce:	4618      	mov	r0, r3
 80074d0:	3708      	adds	r7, #8
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}

080074d6 <_ZNK5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3EE11outerStrideEv>:
      *          in a column-major matrix).
      *
      * \sa innerStride(), rowStride(), colStride()
      */
    EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
    inline Index outerStride() const EIGEN_NOEXCEPT
 80074d6:	b580      	push	{r7, lr}
 80074d8:	b082      	sub	sp, #8
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]
    {
      return derived().outerStride();
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f7fd fabd 	bl	8004a5e <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 80074e4:	4603      	mov	r3, r0
 80074e6:	4618      	mov	r0, r3
 80074e8:	f000 fa22 	bl	8007930 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>
 80074ec:	4603      	mov	r3, r0
    }
 80074ee:	4618      	mov	r0, r3
 80074f0:	3708      	adds	r7, #8
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}

080074f6 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 80074f6:	b480      	push	{r7}
 80074f8:	b083      	sub	sp, #12
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	6078      	str	r0, [r7, #4]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	4618      	mov	r0, r3
 8007502:	370c      	adds	r7, #12
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr

0800750c <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EEC1EPKfi>:
  plainobjectbase_evaluator_data(const Scalar* ptr, Index outerStride) : data(ptr)
 800750c:	b580      	push	{r7, lr}
 800750e:	b084      	sub	sp, #16
 8007510:	af00      	add	r7, sp, #0
 8007512:	60f8      	str	r0, [r7, #12]
 8007514:	60b9      	str	r1, [r7, #8]
 8007516:	607a      	str	r2, [r7, #4]
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	68ba      	ldr	r2, [r7, #8]
 800751c:	601a      	str	r2, [r3, #0]
    EIGEN_UNUSED_VARIABLE(outerStride);
 800751e:	1d3b      	adds	r3, r7, #4
 8007520:	4618      	mov	r0, r3
 8007522:	f7fb ffbc 	bl	800349e <_ZN5Eigen8internal22ignore_unused_variableIiEEvRKT_>
  }
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	4618      	mov	r0, r3
 800752a:	3710      	adds	r7, #16
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE6resizeEiii>:
    EIGEN_DEVICE_FUNC void resize(Index,Index,Index) {}
 8007530:	b480      	push	{r7}
 8007532:	b085      	sub	sp, #20
 8007534:	af00      	add	r7, sp, #0
 8007536:	60f8      	str	r0, [r7, #12]
 8007538:	60b9      	str	r1, [r7, #8]
 800753a:	607a      	str	r2, [r7, #4]
 800753c:	603b      	str	r3, [r7, #0]
 800753e:	bf00      	nop
 8007540:	3714      	adds	r7, #20
 8007542:	46bd      	mov	sp, r7
 8007544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007548:	4770      	bx	lr

0800754a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 800754a:	b5b0      	push	{r4, r5, r7, lr}
 800754c:	b082      	sub	sp, #8
 800754e:	af00      	add	r7, sp, #0
 8007550:	6078      	str	r0, [r7, #4]
 8007552:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	689c      	ldr	r4, [r3, #8]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	6839      	ldr	r1, [r7, #0]
 800755e:	4618      	mov	r0, r3
 8007560:	f000 f9f2 	bl	8007948 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEi>
 8007564:	4605      	mov	r5, r0
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	6839      	ldr	r1, [r7, #0]
 800756c:	4618      	mov	r0, r3
 800756e:	f000 f9fb 	bl	8007968 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE5coeffEi>
 8007572:	4603      	mov	r3, r0
 8007574:	461a      	mov	r2, r3
 8007576:	4629      	mov	r1, r5
 8007578:	4620      	mov	r0, r4
 800757a:	f000 fa05 	bl	8007988 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 800757e:	bf00      	nop
 8007580:	3708      	adds	r7, #8
 8007582:	46bd      	mov	sp, r7
 8007584:	bdb0      	pop	{r4, r5, r7, pc}

08007586 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8007586:	b580      	push	{r7, lr}
 8007588:	b082      	sub	sp, #8
 800758a:	af00      	add	r7, sp, #0
 800758c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800758e:	2101      	movs	r1, #1
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f7ff ffda 	bl	800754a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f000 fa06 	bl	80079a8 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi2ELi9EE3runERS9_>
  }
 800759c:	bf00      	nop
 800759e:	3708      	adds	r7, #8
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 80075a4:	b480      	push	{r7}
 80075a6:	b083      	sub	sp, #12
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4618      	mov	r0, r3
 80075b2:	370c      	adds	r7, #12
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr

080075bc <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 80075bc:	b480      	push	{r7}
 80075be:	b083      	sub	sp, #12
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	4618      	mov	r0, r3
 80075ca:	370c      	adds	r7, #12
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr

080075d4 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEENS_10DenseShapeES5_Li3EE6evalToIS4_EEvRT_RKS3_RKS4_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b088      	sub	sp, #32
 80075d8:	af00      	add	r7, sp, #0
 80075da:	60f8      	str	r0, [r7, #12]
 80075dc:	60b9      	str	r1, [r7, #8]
 80075de:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 80075e0:	f107 0314 	add.w	r3, r7, #20
 80075e4:	687a      	ldr	r2, [r7, #4]
 80075e6:	68b9      	ldr	r1, [r7, #8]
 80075e8:	4618      	mov	r0, r3
 80075ea:	f000 f9ec 	bl	80079c6 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE11lazyProductINS1_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS7_EE>
 80075ee:	f107 031c 	add.w	r3, r7, #28
 80075f2:	4618      	mov	r0, r3
 80075f4:	f7fe fe59 	bl	80062aa <_ZN5Eigen8internal9assign_opIffEC1Ev>
 80075f8:	f107 021c 	add.w	r2, r7, #28
 80075fc:	f107 0314 	add.w	r3, r7, #20
 8007600:	4619      	mov	r1, r3
 8007602:	68f8      	ldr	r0, [r7, #12]
 8007604:	f000 f9f6 	bl	80079f4 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8007608:	bf00      	nop
 800760a:	3720      	adds	r7, #32
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}

08007610 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE6resizeEiii>:
 8007610:	b480      	push	{r7}
 8007612:	b085      	sub	sp, #20
 8007614:	af00      	add	r7, sp, #0
 8007616:	60f8      	str	r0, [r7, #12]
 8007618:	60b9      	str	r1, [r7, #8]
 800761a:	607a      	str	r2, [r7, #4]
 800761c:	603b      	str	r3, [r7, #0]
 800761e:	bf00      	nop
 8007620:	3714      	adds	r7, #20
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr

0800762a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 800762a:	b5b0      	push	{r4, r5, r7, lr}
 800762c:	b082      	sub	sp, #8
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
 8007632:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	689c      	ldr	r4, [r3, #8]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	6839      	ldr	r1, [r7, #0]
 800763e:	4618      	mov	r0, r3
 8007640:	f000 f9e9 	bl	8007a16 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi>
 8007644:	4605      	mov	r5, r0
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	6839      	ldr	r1, [r7, #0]
 800764c:	4618      	mov	r0, r3
 800764e:	f000 f9f2 	bl	8007a36 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffEi>
 8007652:	4603      	mov	r3, r0
 8007654:	461a      	mov	r2, r3
 8007656:	4629      	mov	r1, r5
 8007658:	4620      	mov	r0, r4
 800765a:	f000 f995 	bl	8007988 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 800765e:	bf00      	nop
 8007660:	3708      	adds	r7, #8
 8007662:	46bd      	mov	sp, r7
 8007664:	bdb0      	pop	{r4, r5, r7, pc}

08007666 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi3EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8007666:	b580      	push	{r7, lr}
 8007668:	b082      	sub	sp, #8
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800766e:	2101      	movs	r1, #1
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f7ff ffda 	bl	800762a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f000 f9ed 	bl	8007a56 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi2ELi3EE3runERS9_>
  }
 800767c:	bf00      	nop
 800767e:	3708      	adds	r7, #8
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}

08007684 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8007684:	b480      	push	{r7}
 8007686:	b083      	sub	sp, #12
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	4618      	mov	r0, r3
 8007690:	370c      	adds	r7, #12
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr

0800769a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE4DataC1ERKSE_>:
  {
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 800769a:	b590      	push	{r4, r7, lr}
 800769c:	b083      	sub	sp, #12
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
 80076a2:	6039      	str	r1, [r7, #0]
 80076a4:	687c      	ldr	r4, [r7, #4]
 80076a6:	6838      	ldr	r0, [r7, #0]
 80076a8:	f000 f9e4 	bl	8007a74 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E7functorEv>
 80076ac:	4603      	mov	r3, r0
 80076ae:	4619      	mov	r1, r3
 80076b0:	4620      	mov	r0, r4
 80076b2:	f7fd fbe1 	bl	8004e78 <_ZN5Eigen8internal13scalar_sum_opIffEC1ERKS2_>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	1d1c      	adds	r4, r3, #4
 80076ba:	6838      	ldr	r0, [r7, #0]
 80076bc:	f000 f9e6 	bl	8007a8c <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E3lhsEv>
 80076c0:	4603      	mov	r3, r0
 80076c2:	4619      	mov	r1, r3
 80076c4:	4620      	mov	r0, r4
 80076c6:	f000 f9f8 	bl	8007aba <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEEC1ERS9_>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80076d0:	6838      	ldr	r0, [r7, #0]
 80076d2:	f000 f9e6 	bl	8007aa2 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E3rhsEv>
 80076d6:	4603      	mov	r3, r0
 80076d8:	4619      	mov	r1, r3
 80076da:	4620      	mov	r0, r4
 80076dc:	f000 f9fc 	bl	8007ad8 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS4_>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	4618      	mov	r0, r3
 80076e4:	370c      	adds	r7, #12
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd90      	pop	{r4, r7, pc}

080076ea <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeffByOuterInner(Index outer, Index inner)
 80076ea:	b580      	push	{r7, lr}
 80076ec:	b086      	sub	sp, #24
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	60f8      	str	r0, [r7, #12]
 80076f2:	60b9      	str	r1, [r7, #8]
 80076f4:	607a      	str	r2, [r7, #4]
    Index row = rowIndexByOuterInner(outer, inner);
 80076f6:	6879      	ldr	r1, [r7, #4]
 80076f8:	68b8      	ldr	r0, [r7, #8]
 80076fa:	f000 f9fc 	bl	8007af6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>
 80076fe:	6178      	str	r0, [r7, #20]
    Index col = colIndexByOuterInner(outer, inner);
 8007700:	6879      	ldr	r1, [r7, #4]
 8007702:	68b8      	ldr	r0, [r7, #8]
 8007704:	f000 fa03 	bl	8007b0e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>
 8007708:	6138      	str	r0, [r7, #16]
    assignCoeff(row, col);
 800770a:	693a      	ldr	r2, [r7, #16]
 800770c:	6979      	ldr	r1, [r7, #20]
 800770e:	68f8      	ldr	r0, [r7, #12]
 8007710:	f000 fa09 	bl	8007b26 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE11assignCoeffEii>
  }
 8007714:	bf00      	nop
 8007716:	3718      	adds	r7, #24
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}

0800771c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800771c:	b580      	push	{r7, lr}
 800771e:	b082      	sub	sp, #8
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8007724:	2201      	movs	r2, #1
 8007726:	2100      	movs	r1, #0
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f7ff ffde 	bl	80076ea <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 fa1f 	bl	8007b72 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSL_>
  }
 8007734:	bf00      	nop
 8007736:	3708      	adds	r7, #8
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}

0800773c <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 800773c:	b580      	push	{r7, lr}
 800773e:	b082      	sub	sp, #8
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4618      	mov	r0, r3
 800774a:	f7fc fd7e 	bl	800424a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800774e:	4603      	mov	r3, r0
 8007750:	4618      	mov	r0, r3
 8007752:	3708      	adds	r7, #8
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}

08007758 <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4colsEv>:
  EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR  Index cols() const EIGEN_NOEXCEPT { return m_xpr.rows(); }
 8007758:	b580      	push	{r7, lr}
 800775a:	b082      	sub	sp, #8
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	4618      	mov	r0, r3
 8007764:	f7fd fdc3 	bl	80052ee <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8007768:	4603      	mov	r3, r0
 800776a:	4618      	mov	r0, r3
 800776c:	3708      	adds	r7, #8
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}

08007772 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8007772:	b480      	push	{r7}
 8007774:	b083      	sub	sp, #12
 8007776:	af00      	add	r7, sp, #0
 8007778:	6078      	str	r0, [r7, #4]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	4618      	mov	r0, r3
 800777e:	370c      	adds	r7, #12
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr

08007788 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8007788:	b480      	push	{r7}
 800778a:	b083      	sub	sp, #12
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	3308      	adds	r3, #8
 8007794:	4618      	mov	r0, r3
 8007796:	370c      	adds	r7, #12
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr

080077a0 <_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEENS_10DenseShapeESK_Li3EE6evalToINS3_IfLi3ELi1ELi0ELi3ELi1EEEEEvRT_RKS8_RKSJ_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b08c      	sub	sp, #48	; 0x30
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	60f8      	str	r0, [r7, #12]
 80077a8:	60b9      	str	r1, [r7, #8]
 80077aa:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 80077ac:	f107 0310 	add.w	r3, r7, #16
 80077b0:	687a      	ldr	r2, [r7, #4]
 80077b2:	68b9      	ldr	r1, [r7, #8]
 80077b4:	4618      	mov	r0, r3
 80077b6:	f000 f9ec 	bl	8007b92 <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEE11lazyProductINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEEKNS1_IS7_T_Li1EEERKNS0_ISM_EE>
 80077ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80077be:	4618      	mov	r0, r3
 80077c0:	f7fe fd73 	bl	80062aa <_ZN5Eigen8internal9assign_opIffEC1Ev>
 80077c4:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80077c8:	f107 0310 	add.w	r3, r7, #16
 80077cc:	4619      	mov	r1, r3
 80077ce:	68f8      	ldr	r0, [r7, #12]
 80077d0:	f000 f9f6 	bl	8007bc0 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 80077d4:	bf00      	nop
 80077d6:	3730      	adds	r7, #48	; 0x30
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}

080077dc <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 80077dc:	b480      	push	{r7}
 80077de:	b083      	sub	sp, #12
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4618      	mov	r0, r3
 80077ea:	370c      	adds	r7, #12
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr

080077f4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 80077f4:	b480      	push	{r7}
 80077f6:	b083      	sub	sp, #12
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	3304      	adds	r3, #4
 8007800:	4618      	mov	r0, r3
 8007802:	370c      	adds	r7, #12
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr

0800780c <_ZN5Eigen8internal13add_assign_opIffEC1Ev>:
  * \brief Template functor for scalar/packet assignment with addition
  *
  */
template<typename DstScalar,typename SrcScalar> struct add_assign_op {

  EIGEN_EMPTY_STRUCT_CTOR(add_assign_op)
 800780c:	b480      	push	{r7}
 800780e:	b083      	sub	sp, #12
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	4618      	mov	r0, r3
 8007818:	370c      	adds	r7, #12
 800781a:	46bd      	mov	sp, r7
 800781c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007820:	4770      	bx	lr

08007822 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8007822:	b580      	push	{r7, lr}
 8007824:	b086      	sub	sp, #24
 8007826:	af00      	add	r7, sp, #0
 8007828:	60f8      	str	r0, [r7, #12]
 800782a:	60b9      	str	r1, [r7, #8]
 800782c:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8007832:	687a      	ldr	r2, [r7, #4]
 8007834:	68b9      	ldr	r1, [r7, #8]
 8007836:	6978      	ldr	r0, [r7, #20]
 8007838:	f000 f9d4 	bl	8007be4 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>
}
 800783c:	bf00      	nop
 800783e:	3718      	adds	r7, #24
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}

08007844 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 8007844:	b580      	push	{r7, lr}
 8007846:	b082      	sub	sp, #8
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4618      	mov	r0, r3
 8007852:	f7fc fcfa 	bl	800424a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8007856:	4603      	mov	r3, r0
    }
 8007858:	4618      	mov	r0, r3
 800785a:	3708      	adds	r7, #8
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8007860:	b480      	push	{r7}
 8007862:	b083      	sub	sp, #12
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	4618      	mov	r0, r3
 800786c:	370c      	adds	r7, #12
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr

08007876 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8007876:	b480      	push	{r7}
 8007878:	b083      	sub	sp, #12
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	691b      	ldr	r3, [r3, #16]
 8007882:	4618      	mov	r0, r3
 8007884:	370c      	adds	r7, #12
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr

0800788e <_ZN5Eigen8internal20generic_product_implINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_NS_10DenseShapeESE_Li3EE6evalToIS6_EEvRT_RKSD_RS7_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 800788e:	b580      	push	{r7, lr}
 8007890:	b08a      	sub	sp, #40	; 0x28
 8007892:	af00      	add	r7, sp, #0
 8007894:	60f8      	str	r0, [r7, #12]
 8007896:	60b9      	str	r1, [r7, #8]
 8007898:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 800789a:	f107 0310 	add.w	r3, r7, #16
 800789e:	687a      	ldr	r2, [r7, #4]
 80078a0:	68b9      	ldr	r1, [r7, #8]
 80078a2:	4618      	mov	r0, r3
 80078a4:	f000 f9d8 	bl	8007c58 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEE11lazyProductIS6_EEKNS8_ISD_T_Li1EEERKNS0_ISG_EE>
 80078a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078ac:	4618      	mov	r0, r3
 80078ae:	f7fe fcfc 	bl	80062aa <_ZN5Eigen8internal9assign_opIffEC1Ev>
 80078b2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80078b6:	f107 0310 	add.w	r3, r7, #16
 80078ba:	4619      	mov	r1, r3
 80078bc:	68f8      	ldr	r0, [r7, #12]
 80078be:	f000 f9e2 	bl	8007c86 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 80078c2:	bf00      	nop
 80078c4:	3728      	adds	r7, #40	; 0x28
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}

080078ca <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE11lazyProductINS_9TransposeIS6_EEEEKNS_7ProductISD_T_Li1EEERKNS0_ISJ_EE>:
  */
template<typename Derived>
template<typename OtherDerived>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
const Product<Derived,OtherDerived,LazyProduct>
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 80078ca:	b590      	push	{r4, r7, lr}
 80078cc:	b085      	sub	sp, #20
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	60f8      	str	r0, [r7, #12]
 80078d2:	60b9      	str	r1, [r7, #8]
 80078d4:	607a      	str	r2, [r7, #4]
    INVALID_VECTOR_VECTOR_PRODUCT__IF_YOU_WANTED_A_DOT_OR_COEFF_WISE_PRODUCT_YOU_MUST_USE_THE_EXPLICIT_FUNCTIONS)
  EIGEN_STATIC_ASSERT(ProductIsValid || !(SameSizes && !AreVectors),
    INVALID_MATRIX_PRODUCT__IF_YOU_WANTED_A_COEFF_WISE_PRODUCT_YOU_MUST_USE_THE_EXPLICIT_FUNCTION)
  EIGEN_STATIC_ASSERT(ProductIsValid || SameSizes, INVALID_MATRIX_PRODUCT)

  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 80078d6:	68b8      	ldr	r0, [r7, #8]
 80078d8:	f7fd f821 	bl	800491e <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE7derivedEv>
 80078dc:	4604      	mov	r4, r0
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f7fd f828 	bl	8004934 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 80078e4:	4603      	mov	r3, r0
 80078e6:	461a      	mov	r2, r3
 80078e8:	4621      	mov	r1, r4
 80078ea:	68f8      	ldr	r0, [r7, #12]
 80078ec:	f000 fa00 	bl	8007cf0 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EEC1ERKSD_RKSF_>
}
 80078f0:	68f8      	ldr	r0, [r7, #12]
 80078f2:	3714      	adds	r7, #20
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd90      	pop	{r4, r7, pc}

080078f8 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b086      	sub	sp, #24
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	60f8      	str	r0, [r7, #12]
 8007900:	60b9      	str	r1, [r7, #8]
 8007902:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8007908:	687a      	ldr	r2, [r7, #4]
 800790a:	68b9      	ldr	r1, [r7, #8]
 800790c:	6978      	ldr	r0, [r7, #20]
 800790e:	f000 fa1f 	bl	8007d50 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_>
}
 8007912:	bf00      	nop
 8007914:	3718      	adds	r7, #24
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}

0800791a <_ZNK5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC const T *data() const { return m_data.array; }
 800791a:	b480      	push	{r7}
 800791c:	b083      	sub	sp, #12
 800791e:	af00      	add	r7, sp, #0
 8007920:	6078      	str	r0, [r7, #4]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	4618      	mov	r0, r3
 8007926:	370c      	adds	r7, #12
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr

08007930 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>:
 8007930:	b580      	push	{r7, lr}
 8007932:	b082      	sub	sp, #8
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f000 fa1c 	bl	8007d76 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE9innerSizeEv>
 800793e:	4603      	mov	r3, r0
 8007940:	4618      	mov	r0, r3
 8007942:	3708      	adds	r7, #8
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}

08007948 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEi>:
  Scalar& coeffRef(Index index)
 8007948:	b480      	push	{r7}
 800794a:	b083      	sub	sp, #12
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	6039      	str	r1, [r7, #0]
    return const_cast<Scalar*>(m_d.data)[index];
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681a      	ldr	r2, [r3, #0]
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	009b      	lsls	r3, r3, #2
 800795a:	4413      	add	r3, r2
  }
 800795c:	4618      	mov	r0, r3
 800795e:	370c      	adds	r7, #12
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr

08007968 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE5coeffEi>:
  CoeffReturnType coeff(Index index) const
 8007968:	b480      	push	{r7}
 800796a:	b083      	sub	sp, #12
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	6039      	str	r1, [r7, #0]
    return m_d.data[index];
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681a      	ldr	r2, [r3, #0]
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	009b      	lsls	r3, r3, #2
 800797a:	4413      	add	r3, r2
  }
 800797c:	4618      	mov	r0, r3
 800797e:	370c      	adds	r7, #12
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr

08007988 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a = b; }
 8007988:	b480      	push	{r7}
 800798a:	b085      	sub	sp, #20
 800798c:	af00      	add	r7, sp, #0
 800798e:	60f8      	str	r0, [r7, #12]
 8007990:	60b9      	str	r1, [r7, #8]
 8007992:	607a      	str	r2, [r7, #4]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681a      	ldr	r2, [r3, #0]
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	601a      	str	r2, [r3, #0]
 800799c:	bf00      	nop
 800799e:	3714      	adds	r7, #20
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr

080079a8 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi2ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b082      	sub	sp, #8
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 80079b0:	2102      	movs	r1, #2
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f7ff fdc9 	bl	800754a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f000 f9e8 	bl	8007d8e <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi3ELi9EE3runERS9_>
  }
 80079be:	bf00      	nop
 80079c0:	3708      	adds	r7, #8
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}

080079c6 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE11lazyProductINS1_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS7_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 80079c6:	b590      	push	{r4, r7, lr}
 80079c8:	b085      	sub	sp, #20
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	60f8      	str	r0, [r7, #12]
 80079ce:	60b9      	str	r1, [r7, #8]
 80079d0:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 80079d2:	68b8      	ldr	r0, [r7, #8]
 80079d4:	f7fd f843 	bl	8004a5e <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 80079d8:	4604      	mov	r4, r0
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f7fc fe77 	bl	80046ce <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80079e0:	4603      	mov	r3, r0
 80079e2:	461a      	mov	r2, r3
 80079e4:	4621      	mov	r1, r4
 80079e6:	68f8      	ldr	r0, [r7, #12]
 80079e8:	f000 fa04 	bl	8007df4 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EEC1ERKS2_RKS3_>
}
 80079ec:	68f8      	ldr	r0, [r7, #12]
 80079ee:	3714      	adds	r7, #20
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd90      	pop	{r4, r7, pc}

080079f4 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b086      	sub	sp, #24
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	60f8      	str	r0, [r7, #12]
 80079fc:	60b9      	str	r1, [r7, #8]
 80079fe:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	68b9      	ldr	r1, [r7, #8]
 8007a08:	6978      	ldr	r0, [r7, #20]
 8007a0a:	f000 fa21 	bl	8007e50 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_>
}
 8007a0e:	bf00      	nop
 8007a10:	3718      	adds	r7, #24
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}

08007a16 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi>:
  Scalar& coeffRef(Index index)
 8007a16:	b480      	push	{r7}
 8007a18:	b083      	sub	sp, #12
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	6078      	str	r0, [r7, #4]
 8007a1e:	6039      	str	r1, [r7, #0]
    return const_cast<Scalar*>(m_d.data)[index];
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681a      	ldr	r2, [r3, #0]
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	009b      	lsls	r3, r3, #2
 8007a28:	4413      	add	r3, r2
  }
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	370c      	adds	r7, #12
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a34:	4770      	bx	lr

08007a36 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffEi>:
  CoeffReturnType coeff(Index index) const
 8007a36:	b480      	push	{r7}
 8007a38:	b083      	sub	sp, #12
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	6078      	str	r0, [r7, #4]
 8007a3e:	6039      	str	r1, [r7, #0]
    return m_d.data[index];
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681a      	ldr	r2, [r3, #0]
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	009b      	lsls	r3, r3, #2
 8007a48:	4413      	add	r3, r2
  }
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	370c      	adds	r7, #12
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr

08007a56 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi2ELi3EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8007a56:	b580      	push	{r7, lr}
 8007a58:	b082      	sub	sp, #8
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8007a5e:	2102      	movs	r1, #2
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f7ff fde2 	bl	800762a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 fa05 	bl	8007e76 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi3ELi3EE3runERS9_>
  }
 8007a6c:	bf00      	nop
 8007a6e:	3708      	adds	r7, #8
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}

08007a74 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 8007a74:	b480      	push	{r7}
 8007a76:	b083      	sub	sp, #12
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	3310      	adds	r3, #16
 8007a80:	4618      	mov	r0, r3
 8007a82:	370c      	adds	r7, #12
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr

08007a8c <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 8007a8c:	b480      	push	{r7}
 8007a8e:	b083      	sub	sp, #12
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	4618      	mov	r0, r3
 8007a98:	370c      	adds	r7, #12
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa0:	4770      	bx	lr

08007aa2 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 8007aa2:	b480      	push	{r7}
 8007aa4:	b083      	sub	sp, #12
 8007aa6:	af00      	add	r7, sp, #0
 8007aa8:	6078      	str	r0, [r7, #4]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	68db      	ldr	r3, [r3, #12]
 8007aae:	4618      	mov	r0, r3
 8007ab0:	370c      	adds	r7, #12
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab8:	4770      	bx	lr

08007aba <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEEC1ERS9_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8007aba:	b580      	push	{r7, lr}
 8007abc:	b082      	sub	sp, #8
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	6078      	str	r0, [r7, #4]
 8007ac2:	6039      	str	r1, [r7, #0]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6839      	ldr	r1, [r7, #0]
 8007ac8:	4618      	mov	r0, r3
 8007aca:	f000 f9de 	bl	8007e8a <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEEC1ERKS8_>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3708      	adds	r7, #8
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}

08007ad8 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS4_>:
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b082      	sub	sp, #8
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	6039      	str	r1, [r7, #0]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6839      	ldr	r1, [r7, #0]
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f7ff f846 	bl	8006b78 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	4618      	mov	r0, r3
 8007af0:	3708      	adds	r7, #8
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}

08007af6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index rowIndexByOuterInner(Index outer, Index inner)
 8007af6:	b480      	push	{r7}
 8007af8:	b083      	sub	sp, #12
 8007afa:	af00      	add	r7, sp, #0
 8007afc:	6078      	str	r0, [r7, #4]
 8007afe:	6039      	str	r1, [r7, #0]
      : inner;
 8007b00:	683b      	ldr	r3, [r7, #0]
  }
 8007b02:	4618      	mov	r0, r3
 8007b04:	370c      	adds	r7, #12
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr

08007b0e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index colIndexByOuterInner(Index outer, Index inner)
 8007b0e:	b480      	push	{r7}
 8007b10:	b083      	sub	sp, #12
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]
 8007b16:	6039      	str	r1, [r7, #0]
      : outer;
 8007b18:	687b      	ldr	r3, [r7, #4]
  }
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	370c      	adds	r7, #12
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b24:	4770      	bx	lr

08007b26 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE11assignCoeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index row, Index col)
 8007b26:	b5b0      	push	{r4, r5, r7, lr}
 8007b28:	b086      	sub	sp, #24
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	60f8      	str	r0, [r7, #12]
 8007b2e:	60b9      	str	r1, [r7, #8]
 8007b30:	607a      	str	r2, [r7, #4]
    m_functor.assignCoeff(m_dst.coeffRef(row,col), m_src.coeff(row,col));
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	689c      	ldr	r4, [r3, #8]
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	687a      	ldr	r2, [r7, #4]
 8007b3c:	68b9      	ldr	r1, [r7, #8]
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f000 f9b2 	bl	8007ea8 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEii>
 8007b44:	4605      	mov	r5, r0
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	687a      	ldr	r2, [r7, #4]
 8007b4c:	68b9      	ldr	r1, [r7, #8]
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f000 f9c2 	bl	8007ed8 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE5coeffEii>
 8007b54:	eef0 7a40 	vmov.f32	s15, s0
 8007b58:	edc7 7a05 	vstr	s15, [r7, #20]
 8007b5c:	f107 0314 	add.w	r3, r7, #20
 8007b60:	461a      	mov	r2, r3
 8007b62:	4629      	mov	r1, r5
 8007b64:	4620      	mov	r0, r4
 8007b66:	f7ff ff0f 	bl	8007988 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 8007b6a:	bf00      	nop
 8007b6c:	3718      	adds	r7, #24
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bdb0      	pop	{r4, r5, r7, pc}

08007b72 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8007b72:	b580      	push	{r7, lr}
 8007b74:	b082      	sub	sp, #8
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8007b7a:	2202      	movs	r2, #2
 8007b7c:	2100      	movs	r1, #0
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f7ff fdb3 	bl	80076ea <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f000 f9ce 	bl	8007f26 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSL_>
  }
 8007b8a:	bf00      	nop
 8007b8c:	3708      	adds	r7, #8
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}

08007b92 <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEE11lazyProductINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEEKNS1_IS7_T_Li1EEERKNS0_ISM_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 8007b92:	b590      	push	{r4, r7, lr}
 8007b94:	b085      	sub	sp, #20
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	60f8      	str	r0, [r7, #12]
 8007b9a:	60b9      	str	r1, [r7, #8]
 8007b9c:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 8007b9e:	68b8      	ldr	r0, [r7, #8]
 8007ba0:	f7fd fbe9 	bl	8005376 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEE7derivedEv>
 8007ba4:	4604      	mov	r4, r0
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f7fd fbf0 	bl	800538c <_ZNK5Eigen9EigenBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEE7derivedEv>
 8007bac:	4603      	mov	r3, r0
 8007bae:	461a      	mov	r2, r3
 8007bb0:	4621      	mov	r1, r4
 8007bb2:	68f8      	ldr	r0, [r7, #12]
 8007bb4:	f000 f9ec 	bl	8007f90 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEC1ERKS6_RKSI_>
}
 8007bb8:	68f8      	ldr	r0, [r7, #12]
 8007bba:	3714      	adds	r7, #20
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd90      	pop	{r4, r7, pc}

08007bc0 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b086      	sub	sp, #24
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	60f8      	str	r0, [r7, #12]
 8007bc8:	60b9      	str	r1, [r7, #8]
 8007bca:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	68b9      	ldr	r1, [r7, #8]
 8007bd4:	6978      	ldr	r0, [r7, #20]
 8007bd6:	f000 fa0d 	bl	8007ff4 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_>
}
 8007bda:	bf00      	nop
 8007bdc:	3718      	adds	r7, #24
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
	...

08007be4 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::add_assign_op<Scalar,Scalar> &)
 8007be4:	b590      	push	{r4, r7, lr}
 8007be6:	b085      	sub	sp, #20
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	60f8      	str	r0, [r7, #12]
 8007bec:	60b9      	str	r1, [r7, #8]
 8007bee:	607a      	str	r2, [r7, #4]
    eigen_assert(dst.rows() == src.rows() && dst.cols() == src.cols());
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f7fc fbcf 	bl	8004396 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8007bf8:	4604      	mov	r4, r0
 8007bfa:	68b8      	ldr	r0, [r7, #8]
 8007bfc:	f7fd fdd7 	bl	80057ae <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE4rowsEv>
 8007c00:	4603      	mov	r3, r0
 8007c02:	429c      	cmp	r4, r3
 8007c04:	d10a      	bne.n	8007c1c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x38>
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f7fc fbb9 	bl	8004380 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8007c0e:	4604      	mov	r4, r0
 8007c10:	68b8      	ldr	r0, [r7, #8]
 8007c12:	f7fd fdda 	bl	80057ca <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE4colsEv>
 8007c16:	4603      	mov	r3, r0
 8007c18:	429c      	cmp	r4, r3
 8007c1a:	d005      	beq.n	8007c28 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x44>
 8007c1c:	4b0b      	ldr	r3, [pc, #44]	; (8007c4c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x68>)
 8007c1e:	4a0c      	ldr	r2, [pc, #48]	; (8007c50 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x6c>)
 8007c20:	21a1      	movs	r1, #161	; 0xa1
 8007c22:	480c      	ldr	r0, [pc, #48]	; (8007c54 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x70>)
 8007c24:	f015 fa06 	bl	801d034 <__assert_func>
    generic_product_impl<Lhs, Rhs>::addTo(dst, src.lhs(), src.rhs());
 8007c28:	68b8      	ldr	r0, [r7, #8]
 8007c2a:	f000 f9f6 	bl	800801a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE3lhsEv>
 8007c2e:	4604      	mov	r4, r0
 8007c30:	68b8      	ldr	r0, [r7, #8]
 8007c32:	f000 f9fe 	bl	8008032 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE3rhsEv>
 8007c36:	4603      	mov	r3, r0
 8007c38:	461a      	mov	r2, r3
 8007c3a:	4621      	mov	r1, r4
 8007c3c:	68f8      	ldr	r0, [r7, #12]
 8007c3e:	f000 fa04 	bl	800804a <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEENS_10DenseShapeESE_Li3EE5addToIS3_EEvRT_RKS3_RKSD_>
  }
 8007c42:	bf00      	nop
 8007c44:	3714      	adds	r7, #20
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd90      	pop	{r4, r7, pc}
 8007c4a:	bf00      	nop
 8007c4c:	08021c30 	.word	0x08021c30
 8007c50:	08021c68 	.word	0x08021c68
 8007c54:	08022128 	.word	0x08022128

08007c58 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEE11lazyProductIS6_EEKNS8_ISD_T_Li1EEERKNS0_ISG_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 8007c58:	b590      	push	{r4, r7, lr}
 8007c5a:	b085      	sub	sp, #20
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	60f8      	str	r0, [r7, #12]
 8007c60:	60b9      	str	r1, [r7, #8]
 8007c62:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 8007c64:	68b8      	ldr	r0, [r7, #8]
 8007c66:	f7fd feed 	bl	8005a44 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEE7derivedEv>
 8007c6a:	4604      	mov	r4, r0
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f7fc fef6 	bl	8004a5e <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8007c72:	4603      	mov	r3, r0
 8007c74:	461a      	mov	r2, r3
 8007c76:	4621      	mov	r1, r4
 8007c78:	68f8      	ldr	r0, [r7, #12]
 8007c7a:	f000 fa29 	bl	80080d0 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EEC1ERKSC_RS7_>
}
 8007c7e:	68f8      	ldr	r0, [r7, #12]
 8007c80:	3714      	adds	r7, #20
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd90      	pop	{r4, r7, pc}

08007c86 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8007c86:	b580      	push	{r7, lr}
 8007c88:	b086      	sub	sp, #24
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	60f8      	str	r0, [r7, #12]
 8007c8e:	60b9      	str	r1, [r7, #8]
 8007c90:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8007c96:	687a      	ldr	r2, [r7, #4]
 8007c98:	68b9      	ldr	r1, [r7, #8]
 8007c9a:	6978      	ldr	r0, [r7, #20]
 8007c9c:	f000 fa46 	bl	800812c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>
}
 8007ca0:	bf00      	nop
 8007ca2:	3718      	adds	r7, #24
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}

08007ca8 <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1Ev>:
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b082      	sub	sp, #8
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f000 fa4e 	bl	8008152 <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1Ev>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3708      	adds	r7, #8
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1ELi4EEC1Ev>:
class dense_product_base
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b082      	sub	sp, #8
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f7ff ffed 	bl	8007ca8 <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1Ev>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3708      	adds	r7, #8
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b082      	sub	sp, #8
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f7ff ffed 	bl	8007cc0 <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1ELi4EEC1Ev>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3708      	adds	r7, #8
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EEC1ERKSD_RKSF_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8007cf0:	b590      	push	{r4, r7, lr}
 8007cf2:	b085      	sub	sp, #20
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	60f8      	str	r0, [r7, #12]
 8007cf8:	60b9      	str	r1, [r7, #8]
 8007cfa:	607a      	str	r2, [r7, #4]
 8007cfc:	68f8      	ldr	r0, [r7, #12]
 8007cfe:	f7ff ffeb 	bl	8007cd8 <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1ENS_5DenseEEC1Ev>
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	68b9      	ldr	r1, [r7, #8]
 8007d06:	4618      	mov	r0, r3
 8007d08:	f7fb fe5c 	bl	80039c4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERKSC_>
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	3310      	adds	r3, #16
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	6812      	ldr	r2, [r2, #0]
 8007d14:	601a      	str	r2, [r3, #0]
      eigen_assert(lhs.cols() == rhs.rows()
 8007d16:	68b8      	ldr	r0, [r7, #8]
 8007d18:	f7fc fe3b 	bl	8004992 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4colsEv>
 8007d1c:	4604      	mov	r4, r0
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f7fc fe45 	bl	80049ae <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8007d24:	4603      	mov	r3, r0
 8007d26:	429c      	cmp	r4, r3
 8007d28:	d005      	beq.n	8007d36 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EEC1ERKSD_RKSF_+0x46>
 8007d2a:	4b06      	ldr	r3, [pc, #24]	; (8007d44 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EEC1ERKSD_RKSF_+0x54>)
 8007d2c:	4a06      	ldr	r2, [pc, #24]	; (8007d48 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EEC1ERKSD_RKSF_+0x58>)
 8007d2e:	2160      	movs	r1, #96	; 0x60
 8007d30:	4806      	ldr	r0, [pc, #24]	; (8007d4c <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EEC1ERKSD_RKSF_+0x5c>)
 8007d32:	f015 f97f 	bl	801d034 <__assert_func>
 8007d36:	bf00      	nop
    }
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3714      	adds	r7, #20
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd90      	pop	{r4, r7, pc}
 8007d42:	bf00      	nop
 8007d44:	0801f15c 	.word	0x0801f15c
 8007d48:	08022188 	.word	0x08022188
 8007d4c:	0801f4ac 	.word	0x0801f4ac

08007d50 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b084      	sub	sp, #16
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	60f8      	str	r0, [r7, #12]
 8007d58:	60b9      	str	r1, [r7, #8]
 8007d5a:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 8007d5c:	68b9      	ldr	r1, [r7, #8]
 8007d5e:	68f8      	ldr	r0, [r7, #12]
 8007d60:	f000 fa02 	bl	8008168 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	68b9      	ldr	r1, [r7, #8]
 8007d68:	68f8      	ldr	r0, [r7, #12]
 8007d6a:	f000 fab3 	bl	80082d4 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8007d6e:	bf00      	nop
 8007d70:	3710      	adds	r7, #16
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}

08007d76 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE9innerSizeEv>:
    Index innerSize() const
 8007d76:	b580      	push	{r7, lr}
 8007d78:	b082      	sub	sp, #8
 8007d7a:	af00      	add	r7, sp, #0
 8007d7c:	6078      	str	r0, [r7, #4]
      return IsVectorAtCompileTime ? this->size()
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f000 fae0 	bl	8008344 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8007d84:	4603      	mov	r3, r0
    }
 8007d86:	4618      	mov	r0, r3
 8007d88:	3708      	adds	r7, #8
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}

08007d8e <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi3ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8007d8e:	b580      	push	{r7, lr}
 8007d90:	b082      	sub	sp, #8
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8007d96:	2103      	movs	r1, #3
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f7ff fbd6 	bl	800754a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 fae0 	bl	8008364 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi4ELi9EE3runERS9_>
  }
 8007da4:	bf00      	nop
 8007da6:	3708      	adds	r7, #8
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}

08007dac <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1Ev>:
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b082      	sub	sp, #8
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f000 fae4 	bl	8008382 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1Ev>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3708      	adds	r7, #8
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}

08007dc4 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi1ELi3EEC1Ev>:
class dense_product_base
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b082      	sub	sp, #8
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f7ff ffed 	bl	8007dac <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1Ev>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3708      	adds	r7, #8
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b082      	sub	sp, #8
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f7ff ffed 	bl	8007dc4 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi1ELi3EEC1Ev>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	4618      	mov	r0, r3
 8007dee:	3708      	adds	r7, #8
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8007df4:	b590      	push	{r4, r7, lr}
 8007df6:	b085      	sub	sp, #20
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	60f8      	str	r0, [r7, #12]
 8007dfc:	60b9      	str	r1, [r7, #8]
 8007dfe:	607a      	str	r2, [r7, #4]
 8007e00:	68f8      	ldr	r0, [r7, #12]
 8007e02:	f7ff ffeb 	bl	8007ddc <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1ENS_5DenseEEC1Ev>
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	68ba      	ldr	r2, [r7, #8]
 8007e0a:	601a      	str	r2, [r3, #0]
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	687a      	ldr	r2, [r7, #4]
 8007e10:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	4618      	mov	r0, r3
 8007e16:	f7fc fa0d 	bl	8004234 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8007e1a:	4604      	mov	r4, r0
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f7fc fab9 	bl	8004396 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8007e24:	4603      	mov	r3, r0
 8007e26:	429c      	cmp	r4, r3
 8007e28:	d005      	beq.n	8007e36 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EEC1ERKS2_RKS3_+0x42>
 8007e2a:	4b06      	ldr	r3, [pc, #24]	; (8007e44 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EEC1ERKS2_RKS3_+0x50>)
 8007e2c:	4a06      	ldr	r2, [pc, #24]	; (8007e48 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EEC1ERKS2_RKS3_+0x54>)
 8007e2e:	2160      	movs	r1, #96	; 0x60
 8007e30:	4806      	ldr	r0, [pc, #24]	; (8007e4c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EEC1ERKS2_RKS3_+0x58>)
 8007e32:	f015 f8ff 	bl	801d034 <__assert_func>
 8007e36:	bf00      	nop
    }
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3714      	adds	r7, #20
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd90      	pop	{r4, r7, pc}
 8007e42:	bf00      	nop
 8007e44:	0801f15c 	.word	0x0801f15c
 8007e48:	0802244c 	.word	0x0802244c
 8007e4c:	0801f4ac 	.word	0x0801f4ac

08007e50 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	60f8      	str	r0, [r7, #12]
 8007e58:	60b9      	str	r1, [r7, #8]
 8007e5a:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 8007e5c:	68b9      	ldr	r1, [r7, #8]
 8007e5e:	68f8      	ldr	r0, [r7, #12]
 8007e60:	f000 fa9a 	bl	8008398 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 8007e64:	687a      	ldr	r2, [r7, #4]
 8007e66:	68b9      	ldr	r1, [r7, #8]
 8007e68:	68f8      	ldr	r0, [r7, #12]
 8007e6a:	f000 fac3 	bl	80083f4 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8007e6e:	bf00      	nop
 8007e70:	3710      	adds	r7, #16
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}

08007e76 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi3ELi3EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 8007e76:	b480      	push	{r7}
 8007e78:	b083      	sub	sp, #12
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	6078      	str	r0, [r7, #4]
 8007e7e:	bf00      	nop
 8007e80:	370c      	adds	r7, #12
 8007e82:	46bd      	mov	sp, r7
 8007e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e88:	4770      	bx	lr

08007e8a <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEEC1ERKS8_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8007e8a:	b580      	push	{r7, lr}
 8007e8c:	b082      	sub	sp, #8
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
 8007e92:	6039      	str	r1, [r7, #0]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6839      	ldr	r1, [r7, #0]
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f000 fae3 	bl	8008464 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEELi3ENS_10DenseShapeES9_ffEC1ERKS8_>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3708      	adds	r7, #8
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEii>:
  Scalar& coeffRef(Index row, Index col)
 8007ea8:	b590      	push	{r4, r7, lr}
 8007eaa:	b085      	sub	sp, #20
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	60f8      	str	r0, [r7, #12]
 8007eb0:	60b9      	str	r1, [r7, #8]
 8007eb2:	607a      	str	r2, [r7, #4]
      return const_cast<Scalar*>(m_d.data)[row + col * m_d.outerStride()];
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681c      	ldr	r4, [r3, #0]
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f000 fb0f 	bl	80084de <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EE11outerStrideEv>
 8007ec0:	4602      	mov	r2, r0
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	fb03 f202 	mul.w	r2, r3, r2
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	4413      	add	r3, r2
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	4423      	add	r3, r4
  }
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3714      	adds	r7, #20
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd90      	pop	{r4, r7, pc}

08007ed8 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8007ed8:	b5b0      	push	{r4, r5, r7, lr}
 8007eda:	b084      	sub	sp, #16
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	60f8      	str	r0, [r7, #12]
 8007ee0:	60b9      	str	r1, [r7, #8]
 8007ee2:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f000 fb04 	bl	80084f4 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE4Data4funcEv>
 8007eec:	4604      	mov	r4, r0
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	3304      	adds	r3, #4
 8007ef2:	687a      	ldr	r2, [r7, #4]
 8007ef4:	68b9      	ldr	r1, [r7, #8]
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f000 fb07 	bl	800850a <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEE5coeffEii>
 8007efc:	4605      	mov	r5, r0
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	332c      	adds	r3, #44	; 0x2c
 8007f02:	687a      	ldr	r2, [r7, #4]
 8007f04:	68b9      	ldr	r1, [r7, #8]
 8007f06:	4618      	mov	r0, r3
 8007f08:	f000 fb17 	bl	800853a <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE5coeffEii>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	461a      	mov	r2, r3
 8007f10:	4629      	mov	r1, r5
 8007f12:	4620      	mov	r0, r4
 8007f14:	f000 fb29 	bl	800856a <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 8007f18:	eef0 7a40 	vmov.f32	s15, s0
  }
 8007f1c:	eeb0 0a67 	vmov.f32	s0, s15
 8007f20:	3710      	adds	r7, #16
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bdb0      	pop	{r4, r5, r7, pc}

08007f26 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8007f26:	b580      	push	{r7, lr}
 8007f28:	b082      	sub	sp, #8
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8007f2e:	2200      	movs	r2, #0
 8007f30:	2101      	movs	r1, #1
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f7ff fbd9 	bl	80076ea <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f000 fb2b 	bl	8008594 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSL_>
  }
 8007f3e:	bf00      	nop
 8007f40:	3708      	adds	r7, #8
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}

08007f46 <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1Ev>:
 8007f46:	b580      	push	{r7, lr}
 8007f48:	b082      	sub	sp, #8
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	6078      	str	r0, [r7, #4]
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f000 fb30 	bl	80085b4 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1Ev>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	4618      	mov	r0, r3
 8007f58:	3708      	adds	r7, #8
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}

08007f5e <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1ELi4EEC1Ev>:
class dense_product_base
 8007f5e:	b580      	push	{r7, lr}
 8007f60:	b082      	sub	sp, #8
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	6078      	str	r0, [r7, #4]
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f7ff ffed 	bl	8007f46 <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1Ev>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3708      	adds	r7, #8
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}

08007f76 <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8007f76:	b580      	push	{r7, lr}
 8007f78:	b082      	sub	sp, #8
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	6078      	str	r0, [r7, #4]
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f7ff ffed 	bl	8007f5e <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1ELi4EEC1Ev>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	4618      	mov	r0, r3
 8007f88:	3708      	adds	r7, #8
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}
	...

08007f90 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEC1ERKS6_RKSI_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8007f90:	b590      	push	{r4, r7, lr}
 8007f92:	b085      	sub	sp, #20
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	60f8      	str	r0, [r7, #12]
 8007f98:	60b9      	str	r1, [r7, #8]
 8007f9a:	607a      	str	r2, [r7, #4]
 8007f9c:	68f8      	ldr	r0, [r7, #12]
 8007f9e:	f7ff ffea 	bl	8007f76 <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1ENS_5DenseEEC1Ev>
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	68ba      	ldr	r2, [r7, #8]
 8007fa6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007faa:	e883 0003 	stmia.w	r3, {r0, r1}
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	3308      	adds	r3, #8
 8007fb2:	6879      	ldr	r1, [r7, #4]
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f7fb feb9 	bl	8003d2c <_ZN5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKSH_>
      eigen_assert(lhs.cols() == rhs.rows()
 8007fba:	68b8      	ldr	r0, [r7, #8]
 8007fbc:	f7fd fa15 	bl	80053ea <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4colsEv>
 8007fc0:	4604      	mov	r4, r0
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f7fd fa1f 	bl	8005406 <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4rowsEv>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	429c      	cmp	r4, r3
 8007fcc:	d005      	beq.n	8007fda <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEC1ERKS6_RKSI_+0x4a>
 8007fce:	4b06      	ldr	r3, [pc, #24]	; (8007fe8 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEC1ERKS6_RKSI_+0x58>)
 8007fd0:	4a06      	ldr	r2, [pc, #24]	; (8007fec <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEC1ERKS6_RKSI_+0x5c>)
 8007fd2:	2160      	movs	r1, #96	; 0x60
 8007fd4:	4806      	ldr	r0, [pc, #24]	; (8007ff0 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEC1ERKS6_RKSI_+0x60>)
 8007fd6:	f015 f82d 	bl	801d034 <__assert_func>
 8007fda:	bf00      	nop
    }
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3714      	adds	r7, #20
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd90      	pop	{r4, r7, pc}
 8007fe6:	bf00      	nop
 8007fe8:	0801f15c 	.word	0x0801f15c
 8007fec:	08022574 	.word	0x08022574
 8007ff0:	0801f4ac 	.word	0x0801f4ac

08007ff4 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b084      	sub	sp, #16
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	60f8      	str	r0, [r7, #12]
 8007ffc:	60b9      	str	r1, [r7, #8]
 8007ffe:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 8008000:	68b9      	ldr	r1, [r7, #8]
 8008002:	68f8      	ldr	r0, [r7, #12]
 8008004:	f000 fae1 	bl	80085ca <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 8008008:	687a      	ldr	r2, [r7, #4]
 800800a:	68b9      	ldr	r1, [r7, #8]
 800800c:	68f8      	ldr	r0, [r7, #12]
 800800e:	f000 fb23 	bl	8008658 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8008012:	bf00      	nop
 8008014:	3710      	adds	r7, #16
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}

0800801a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800801a:	b480      	push	{r7}
 800801c:	b083      	sub	sp, #12
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4618      	mov	r0, r3
 8008028:	370c      	adds	r7, #12
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr

08008032 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8008032:	b480      	push	{r7}
 8008034:	b083      	sub	sp, #12
 8008036:	af00      	add	r7, sp, #0
 8008038:	6078      	str	r0, [r7, #4]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	3304      	adds	r3, #4
 800803e:	4618      	mov	r0, r3
 8008040:	370c      	adds	r7, #12
 8008042:	46bd      	mov	sp, r7
 8008044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008048:	4770      	bx	lr

0800804a <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEENS_10DenseShapeESE_Li3EE5addToIS3_EEvRT_RKS3_RKSD_>:

  template<typename Dst>
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void addTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 800804a:	b580      	push	{r7, lr}
 800804c:	b08a      	sub	sp, #40	; 0x28
 800804e:	af00      	add	r7, sp, #0
 8008050:	60f8      	str	r0, [r7, #12]
 8008052:	60b9      	str	r1, [r7, #8]
 8008054:	607a      	str	r2, [r7, #4]
  {
    // dst.noalias() += lhs.lazyProduct(rhs);
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::add_assign_op<typename Dst::Scalar,Scalar>());
 8008056:	f107 0310 	add.w	r3, r7, #16
 800805a:	687a      	ldr	r2, [r7, #4]
 800805c:	68b9      	ldr	r1, [r7, #8]
 800805e:	4618      	mov	r0, r3
 8008060:	f000 fb32 	bl	80086c8 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE11lazyProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEEEEKNSB_IS2_T_Li1EEERKNS0_ISG_EE>
 8008064:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008068:	4618      	mov	r0, r3
 800806a:	f7ff fbcf 	bl	800780c <_ZN5Eigen8internal13add_assign_opIffEC1Ev>
 800806e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8008072:	f107 0310 	add.w	r3, r7, #16
 8008076:	4619      	mov	r1, r3
 8008078:	68f8      	ldr	r0, [r7, #12]
 800807a:	f000 fb3c 	bl	80086f6 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800807e:	bf00      	nop
 8008080:	3728      	adds	r7, #40	; 0x28
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}

08008086 <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1Ev>:
 8008086:	b580      	push	{r7, lr}
 8008088:	b082      	sub	sp, #8
 800808a:	af00      	add	r7, sp, #0
 800808c:	6078      	str	r0, [r7, #4]
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 fb42 	bl	8008718 <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1Ev>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	4618      	mov	r0, r3
 8008098:	3708      	adds	r7, #8
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}

0800809e <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1ELi3EEC1Ev>:
class dense_product_base
 800809e:	b580      	push	{r7, lr}
 80080a0:	b082      	sub	sp, #8
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	6078      	str	r0, [r7, #4]
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f7ff ffed 	bl	8008086 <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1Ev>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	4618      	mov	r0, r3
 80080b0:	3708      	adds	r7, #8
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}

080080b6 <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 80080b6:	b580      	push	{r7, lr}
 80080b8:	b082      	sub	sp, #8
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	6078      	str	r0, [r7, #4]
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f7ff ffed 	bl	800809e <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1ELi3EEC1Ev>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	4618      	mov	r0, r3
 80080c8:	3708      	adds	r7, #8
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
	...

080080d0 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EEC1ERKSC_RS7_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 80080d0:	b590      	push	{r4, r7, lr}
 80080d2:	b085      	sub	sp, #20
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	60f8      	str	r0, [r7, #12]
 80080d8:	60b9      	str	r1, [r7, #8]
 80080da:	607a      	str	r2, [r7, #4]
 80080dc:	68f8      	ldr	r0, [r7, #12]
 80080de:	f7ff ffea 	bl	80080b6 <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1ENS_5DenseEEC1Ev>
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	68b9      	ldr	r1, [r7, #8]
 80080e6:	4618      	mov	r0, r3
 80080e8:	f7fb ff39 	bl	8003f5e <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERKSC_>
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	687a      	ldr	r2, [r7, #4]
 80080f0:	611a      	str	r2, [r3, #16]
      eigen_assert(lhs.cols() == rhs.rows()
 80080f2:	68b8      	ldr	r0, [r7, #8]
 80080f4:	f7fd fcd5 	bl	8005aa2 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE4colsEv>
 80080f8:	4604      	mov	r4, r0
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	4618      	mov	r0, r3
 80080fe:	f7fc f8a4 	bl	800424a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8008102:	4603      	mov	r3, r0
 8008104:	429c      	cmp	r4, r3
 8008106:	d005      	beq.n	8008114 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EEC1ERKSC_RS7_+0x44>
 8008108:	4b05      	ldr	r3, [pc, #20]	; (8008120 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EEC1ERKSC_RS7_+0x50>)
 800810a:	4a06      	ldr	r2, [pc, #24]	; (8008124 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EEC1ERKSC_RS7_+0x54>)
 800810c:	2160      	movs	r1, #96	; 0x60
 800810e:	4806      	ldr	r0, [pc, #24]	; (8008128 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EEC1ERKSC_RS7_+0x58>)
 8008110:	f014 ff90 	bl	801d034 <__assert_func>
 8008114:	bf00      	nop
    }
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	4618      	mov	r0, r3
 800811a:	3714      	adds	r7, #20
 800811c:	46bd      	mov	sp, r7
 800811e:	bd90      	pop	{r4, r7, pc}
 8008120:	0801f15c 	.word	0x0801f15c
 8008124:	080228fc 	.word	0x080228fc
 8008128:	0801f4ac 	.word	0x0801f4ac

0800812c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 800812c:	b580      	push	{r7, lr}
 800812e:	b084      	sub	sp, #16
 8008130:	af00      	add	r7, sp, #0
 8008132:	60f8      	str	r0, [r7, #12]
 8008134:	60b9      	str	r1, [r7, #8]
 8008136:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 8008138:	68b9      	ldr	r1, [r7, #8]
 800813a:	68f8      	ldr	r0, [r7, #12]
 800813c:	f000 faf7 	bl	800872e <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 8008140:	687a      	ldr	r2, [r7, #4]
 8008142:	68b9      	ldr	r1, [r7, #8]
 8008144:	68f8      	ldr	r0, [r7, #12]
 8008146:	f000 fb35 	bl	80087b4 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800814a:	bf00      	nop
 800814c:	3710      	adds	r7, #16
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}

08008152 <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8008152:	b480      	push	{r7}
 8008154:	b083      	sub	sp, #12
 8008156:	af00      	add	r7, sp, #0
 8008158:	6078      	str	r0, [r7, #4]
    }
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	4618      	mov	r0, r3
 800815e:	370c      	adds	r7, #12
 8008160:	46bd      	mov	sp, r7
 8008162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008166:	4770      	bx	lr

08008168 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 8008168:	b580      	push	{r7, lr}
 800816a:	b082      	sub	sp, #8
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	6039      	str	r1, [r7, #0]
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	4618      	mov	r0, r3
 8008176:	f7fc f868 	bl	800424a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800817a:	4603      	mov	r3, r0
 800817c:	2b01      	cmp	r3, #1
 800817e:	dd08      	ble.n	8008192 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEEEvRKT_RKT0_+0x2a>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	4618      	mov	r0, r3
 8008184:	f7fc f856 	bl	8004234 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8008188:	4603      	mov	r3, r0
 800818a:	2b01      	cmp	r3, #1
 800818c:	dd01      	ble.n	8008192 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEEEvRKT_RKT0_+0x2a>
 800818e:	2301      	movs	r3, #1
 8008190:	e000      	b.n	8008194 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEEEvRKT_RKT0_+0x2c>
 8008192:	2300      	movs	r3, #0
 8008194:	2b00      	cmp	r3, #0
 8008196:	d003      	beq.n	80081a0 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEEEvRKT_RKT0_+0x38>
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
 8008198:	6839      	ldr	r1, [r7, #0]
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f000 fb42 	bl	8008824 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEELb0EE3runERKS3_RKSI_>
}
 80081a0:	bf00      	nop
 80081a2:	3708      	adds	r7, #8
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>:
struct evaluator<const T>
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b082      	sub	sp, #8
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	4618      	mov	r0, r3
 80081b4:	f7fc fa5b 	bl	800466e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	4618      	mov	r0, r3
 80081bc:	3708      	adds	r7, #8
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}

080081c2 <_ZN5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
struct evaluator<CwiseNullaryOp<NullaryOp,PlainObjectType> >
 80081c2:	b580      	push	{r7, lr}
 80081c4:	b082      	sub	sp, #8
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	6078      	str	r0, [r7, #4]
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 fb5a 	bl	8008884 <_ZN5Eigen8internal14evaluator_baseINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	4618      	mov	r0, r3
 80081d4:	3708      	adds	r7, #8
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}

080081da <_ZN5Eigen8internal9evaluatorIKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
struct evaluator<const T>
 80081da:	b580      	push	{r7, lr}
 80081dc:	b082      	sub	sp, #8
 80081de:	af00      	add	r7, sp, #0
 80081e0:	6078      	str	r0, [r7, #4]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	4618      	mov	r0, r3
 80081e6:	f7ff ffec 	bl	80081c2 <_ZN5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	4618      	mov	r0, r3
 80081ee:	3708      	adds	r7, #8
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}

080081f4 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE4DataD1Ev>:
  struct Data
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b082      	sub	sp, #8
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	3308      	adds	r3, #8
 8008200:	4618      	mov	r0, r3
 8008202:	f7ff ffea 	bl	80081da <_ZN5Eigen8internal9evaluatorIKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	3304      	adds	r3, #4
 800820a:	4618      	mov	r0, r3
 800820c:	f7ff ffcc 	bl	80081a8 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	4618      	mov	r0, r3
 8008214:	3708      	adds	r7, #8
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}

0800821a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 800821a:	b580      	push	{r7, lr}
 800821c:	b082      	sub	sp, #8
 800821e:	af00      	add	r7, sp, #0
 8008220:	6078      	str	r0, [r7, #4]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	4618      	mov	r0, r3
 8008226:	f7ff ffe5 	bl	80081f4 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE4DataD1Ev>
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f000 fb1f 	bl	800886e <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED1Ev>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	4618      	mov	r0, r3
 8008234:	3708      	adds	r7, #8
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}

0800823a <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 800823a:	b580      	push	{r7, lr}
 800823c:	b082      	sub	sp, #8
 800823e:	af00      	add	r7, sp, #0
 8008240:	6078      	str	r0, [r7, #4]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	4618      	mov	r0, r3
 8008246:	f7ff ffe8 	bl	800821a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffED1Ev>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	4618      	mov	r0, r3
 800824e:	3708      	adds	r7, #8
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 8008254:	b580      	push	{r7, lr}
 8008256:	b082      	sub	sp, #8
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	4618      	mov	r0, r3
 8008260:	f7fc fa05 	bl	800466e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f000 fb18 	bl	800889a <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	4618      	mov	r0, r3
 800826e:	3708      	adds	r7, #8
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}

08008274 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 8008274:	b580      	push	{r7, lr}
 8008276:	b082      	sub	sp, #8
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	4618      	mov	r0, r3
 8008280:	f7ff ffe8 	bl	8008254 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedEfED1Ev>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	4618      	mov	r0, r3
 8008288:	3708      	adds	r7, #8
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}

0800828e <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEELi4ENS_10DenseShapeESI_ffED1Ev>:

template<int StorageOrder, int UnrollingIndex, typename Lhs, typename Rhs, typename Packet, int LoadMode>
struct etor_product_packet_impl;

template<typename Lhs, typename Rhs, int ProductTag>
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 800828e:	b580      	push	{r7, lr}
 8008290:	b082      	sub	sp, #8
 8008292:	af00      	add	r7, sp, #0
 8008294:	6078      	str	r0, [r7, #4]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	3324      	adds	r3, #36	; 0x24
 800829a:	4618      	mov	r0, r3
 800829c:	f7ff ffea 	bl	8008274 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	3314      	adds	r3, #20
 80082a4:	4618      	mov	r0, r3
 80082a6:	f7ff ffc8 	bl	800823a <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED1Ev>
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f000 fad4 	bl	8008858 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEED1Ev>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	4618      	mov	r0, r3
 80082b4:	3708      	adds	r7, #8
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}

080082ba <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 80082ba:	b580      	push	{r7, lr}
 80082bc:	b082      	sub	sp, #8
 80082be:	af00      	add	r7, sp, #0
 80082c0:	6078      	str	r0, [r7, #4]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	4618      	mov	r0, r3
 80082c6:	f7ff ffe2 	bl	800828e <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEELi4ENS_10DenseShapeESI_ffED1Ev>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	4618      	mov	r0, r3
 80082ce:	3708      	adds	r7, #8
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}

080082d4 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b096      	sub	sp, #88	; 0x58
 80082d8:	af02      	add	r7, sp, #8
 80082da:	60f8      	str	r0, [r7, #12]
 80082dc:	60b9      	str	r1, [r7, #8]
 80082de:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 80082e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80082e4:	68b9      	ldr	r1, [r7, #8]
 80082e6:	4618      	mov	r0, r3
 80082e8:	f000 faa7 	bl	800883a <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1ERKSH_>
  resize_if_allowed(dst, src, func);
 80082ec:	687a      	ldr	r2, [r7, #4]
 80082ee:	68b9      	ldr	r1, [r7, #8]
 80082f0:	68f8      	ldr	r0, [r7, #12]
 80082f2:	f000 faf9 	bl	80088e8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 80082f6:	f107 0320 	add.w	r3, r7, #32
 80082fa:	68f9      	ldr	r1, [r7, #12]
 80082fc:	4618      	mov	r0, r3
 80082fe:	f7fe fc3b 	bl	8006b78 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 8008302:	68f8      	ldr	r0, [r7, #12]
 8008304:	f7fe fca0 	bl	8006c48 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE18const_cast_derivedEv>
 8008308:	4603      	mov	r3, r0
 800830a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800830e:	f107 0120 	add.w	r1, r7, #32
 8008312:	f107 0010 	add.w	r0, r7, #16
 8008316:	9300      	str	r3, [sp, #0]
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f000 fb2f 	bl	800897c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSL_RKSN_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 800831e:	f107 0310 	add.w	r3, r7, #16
 8008322:	4618      	mov	r0, r3
 8008324:	f000 fb44 	bl	80089b0 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSP_>
  DstEvaluatorType dstEvaluator(dst);
 8008328:	f107 0320 	add.w	r3, r7, #32
 800832c:	4618      	mov	r0, r3
 800832e:	f7fe fa14 	bl	800675a <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 8008332:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008336:	4618      	mov	r0, r3
 8008338:	f7ff ffbf 	bl	80082ba <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEED1Ev>
}
 800833c:	bf00      	nop
 800833e:	3750      	adds	r7, #80	; 0x50
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}

08008344 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 8008344:	b580      	push	{r7, lr}
 8008346:	b082      	sub	sp, #8
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f7fc fb86 	bl	8004a5e <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8008352:	4603      	mov	r3, r0
 8008354:	4618      	mov	r0, r3
 8008356:	f7fb ff78 	bl	800424a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800835a:	4603      	mov	r3, r0
 800835c:	4618      	mov	r0, r3
 800835e:	3708      	adds	r7, #8
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi4ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8008364:	b580      	push	{r7, lr}
 8008366:	b082      	sub	sp, #8
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800836c:	2104      	movs	r1, #4
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f7ff f8eb 	bl	800754a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f000 fb26 	bl	80089c6 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi5ELi9EE3runERS9_>
  }
 800837a:	bf00      	nop
 800837c:	3708      	adds	r7, #8
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}

08008382 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8008382:	b480      	push	{r7}
 8008384:	b083      	sub	sp, #12
 8008386:	af00      	add	r7, sp, #0
 8008388:	6078      	str	r0, [r7, #4]
    }
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	4618      	mov	r0, r3
 800838e:	370c      	adds	r7, #12
 8008390:	46bd      	mov	sp, r7
 8008392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008396:	4770      	bx	lr

08008398 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 8008398:	b480      	push	{r7}
 800839a:	b083      	sub	sp, #12
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
 80083a0:	6039      	str	r1, [r7, #0]
}
 80083a2:	bf00      	nop
 80083a4:	370c      	adds	r7, #12
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr

080083ae <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEELi3ENS_10DenseShapeES7_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 80083ae:	b580      	push	{r7, lr}
 80083b0:	b082      	sub	sp, #8
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	6078      	str	r0, [r7, #4]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	330c      	adds	r3, #12
 80083ba:	4618      	mov	r0, r3
 80083bc:	f7fc f957 	bl	800466e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	3308      	adds	r3, #8
 80083c4:	4618      	mov	r0, r3
 80083c6:	f7fe f9c8 	bl	800675a <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f000 fb19 	bl	8008a02 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEED1Ev>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	4618      	mov	r0, r3
 80083d4:	3708      	adds	r7, #8
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}

080083da <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 80083da:	b580      	push	{r7, lr}
 80083dc:	b082      	sub	sp, #8
 80083de:	af00      	add	r7, sp, #0
 80083e0:	6078      	str	r0, [r7, #4]
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	4618      	mov	r0, r3
 80083e6:	f7ff ffe2 	bl	80083ae <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEELi3ENS_10DenseShapeES7_ffED1Ev>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	4618      	mov	r0, r3
 80083ee:	3708      	adds	r7, #8
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}

080083f4 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b090      	sub	sp, #64	; 0x40
 80083f8:	af02      	add	r7, sp, #8
 80083fa:	60f8      	str	r0, [r7, #12]
 80083fc:	60b9      	str	r1, [r7, #8]
 80083fe:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 8008400:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008404:	68b9      	ldr	r1, [r7, #8]
 8008406:	4618      	mov	r0, r3
 8008408:	f000 faec 	bl	80089e4 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1ERKS6_>
  resize_if_allowed(dst, src, func);
 800840c:	687a      	ldr	r2, [r7, #4]
 800840e:	68b9      	ldr	r1, [r7, #8]
 8008410:	68f8      	ldr	r0, [r7, #12]
 8008412:	f000 fb1d 	bl	8008a50 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 8008416:	f107 0320 	add.w	r3, r7, #32
 800841a:	68f9      	ldr	r1, [r7, #12]
 800841c:	4618      	mov	r0, r3
 800841e:	f7fd fc60 	bl	8005ce2 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 8008422:	68f8      	ldr	r0, [r7, #12]
 8008424:	f7fe fc9e 	bl	8006d64 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv>
 8008428:	4603      	mov	r3, r0
 800842a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800842e:	f107 0120 	add.w	r1, r7, #32
 8008432:	f107 0010 	add.w	r0, r7, #16
 8008436:	9300      	str	r3, [sp, #0]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f000 fb53 	bl	8008ae4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKS9_RKSB_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 800843e:	f107 0310 	add.w	r3, r7, #16
 8008442:	4618      	mov	r0, r3
 8008444:	f000 fb68 	bl	8008b18 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSD_>
  DstEvaluatorType dstEvaluator(dst);
 8008448:	f107 0320 	add.w	r3, r7, #32
 800844c:	4618      	mov	r0, r3
 800844e:	f7fc f90e 	bl	800466e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 8008452:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008456:	4618      	mov	r0, r3
 8008458:	f7ff ffbf 	bl	80083da <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEED1Ev>
}
 800845c:	bf00      	nop
 800845e:	3738      	adds	r7, #56	; 0x38
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}

08008464 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEELi3ENS_10DenseShapeES9_ffEC1ERKS8_>:
  explicit product_evaluator(const XprType& xpr)
 8008464:	b5b0      	push	{r4, r5, r7, lr}
 8008466:	b084      	sub	sp, #16
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	6039      	str	r1, [r7, #0]
    : m_result(xpr.rows(), xpr.cols())
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	4618      	mov	r0, r3
 8008472:	f000 fb5c 	bl	8008b2e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	1d1c      	adds	r4, r3, #4
 800847a:	6838      	ldr	r0, [r7, #0]
 800847c:	f7fc fca0 	bl	8004dc0 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4rowsEv>
 8008480:	4603      	mov	r3, r0
 8008482:	60bb      	str	r3, [r7, #8]
 8008484:	6838      	ldr	r0, [r7, #0]
 8008486:	f7fc fca8 	bl	8004dda <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4colsEv>
 800848a:	4603      	mov	r3, r0
 800848c:	60fb      	str	r3, [r7, #12]
 800848e:	f107 020c 	add.w	r2, r7, #12
 8008492:	f107 0308 	add.w	r3, r7, #8
 8008496:	4619      	mov	r1, r3
 8008498:	4620      	mov	r0, r4
 800849a:	f000 fb55 	bl	8008b48 <_ZN5Eigen6MatrixIfLi3ELi3ELi1ELi3ELi3EEC1IiiEERKT_RKT0_>
    ::new (static_cast<Base*>(this)) Base(m_result);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	4619      	mov	r1, r3
 80084a2:	2004      	movs	r0, #4
 80084a4:	f7f8 fd2a 	bl	8000efc <_ZnwjPv>
 80084a8:	4602      	mov	r2, r0
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	3304      	adds	r3, #4
 80084ae:	4619      	mov	r1, r3
 80084b0:	4610      	mov	r0, r2
 80084b2:	f000 fb62 	bl	8008b7a <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1ERKS3_>
    generic_product_impl<Lhs, Rhs, LhsShape, RhsShape, ProductTag>::evalTo(m_result, xpr.lhs(), xpr.rhs());
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	1d1c      	adds	r4, r3, #4
 80084ba:	6838      	ldr	r0, [r7, #0]
 80084bc:	f000 fb6d 	bl	8008b9a <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE3lhsEv>
 80084c0:	4605      	mov	r5, r0
 80084c2:	6838      	ldr	r0, [r7, #0]
 80084c4:	f000 fb74 	bl	8008bb0 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE3rhsEv>
 80084c8:	4603      	mov	r3, r0
 80084ca:	461a      	mov	r2, r3
 80084cc:	4629      	mov	r1, r5
 80084ce:	4620      	mov	r0, r4
 80084d0:	f000 fb7a 	bl	8008bc8 <_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EENS_10DenseShapeES8_Li3EE6evalToINS3_IfLi3ELi3ELi1ELi3ELi3EEEEEvRT_RKS5_RKS7_>
  }
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	4618      	mov	r0, r3
 80084d8:	3710      	adds	r7, #16
 80084da:	46bd      	mov	sp, r7
 80084dc:	bdb0      	pop	{r4, r5, r7, pc}

080084de <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EE11outerStrideEv>:
  Index outerStride() const EIGEN_NOEXCEPT { return OuterStride; }
 80084de:	b480      	push	{r7}
 80084e0:	b083      	sub	sp, #12
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	6078      	str	r0, [r7, #4]
 80084e6:	2303      	movs	r3, #3
 80084e8:	4618      	mov	r0, r3
 80084ea:	370c      	adds	r7, #12
 80084ec:	46bd      	mov	sp, r7
 80084ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f2:	4770      	bx	lr

080084f4 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE4Data4funcEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    const BinaryOp& func() const { return op; }
 80084f4:	b480      	push	{r7}
 80084f6:	b083      	sub	sp, #12
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	4618      	mov	r0, r3
 8008500:	370c      	adds	r7, #12
 8008502:	46bd      	mov	sp, r7
 8008504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008508:	4770      	bx	lr

0800850a <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800850a:	b590      	push	{r4, r7, lr}
 800850c:	b085      	sub	sp, #20
 800850e:	af00      	add	r7, sp, #0
 8008510:	60f8      	str	r0, [r7, #12]
 8008512:	60b9      	str	r1, [r7, #8]
 8008514:	607a      	str	r2, [r7, #4]
      return m_d.data[row * m_d.outerStride() + col];
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681c      	ldr	r4, [r3, #0]
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	4618      	mov	r0, r3
 800851e:	f7ff ffde 	bl	80084de <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EE11outerStrideEv>
 8008522:	4602      	mov	r2, r0
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	fb03 f202 	mul.w	r2, r3, r2
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	4413      	add	r3, r2
 800852e:	009b      	lsls	r3, r3, #2
 8008530:	4423      	add	r3, r4
  }
 8008532:	4618      	mov	r0, r3
 8008534:	3714      	adds	r7, #20
 8008536:	46bd      	mov	sp, r7
 8008538:	bd90      	pop	{r4, r7, pc}

0800853a <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800853a:	b590      	push	{r4, r7, lr}
 800853c:	b085      	sub	sp, #20
 800853e:	af00      	add	r7, sp, #0
 8008540:	60f8      	str	r0, [r7, #12]
 8008542:	60b9      	str	r1, [r7, #8]
 8008544:	607a      	str	r2, [r7, #4]
      return m_d.data[row + col * m_d.outerStride()];
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681c      	ldr	r4, [r3, #0]
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	4618      	mov	r0, r3
 800854e:	f7ff ffc6 	bl	80084de <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EE11outerStrideEv>
 8008552:	4602      	mov	r2, r0
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	fb03 f202 	mul.w	r2, r3, r2
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	4413      	add	r3, r2
 800855e:	009b      	lsls	r3, r3, #2
 8008560:	4423      	add	r3, r4
  }
 8008562:	4618      	mov	r0, r3
 8008564:	3714      	adds	r7, #20
 8008566:	46bd      	mov	sp, r7
 8008568:	bd90      	pop	{r4, r7, pc}

0800856a <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 800856a:	b480      	push	{r7}
 800856c:	b085      	sub	sp, #20
 800856e:	af00      	add	r7, sp, #0
 8008570:	60f8      	str	r0, [r7, #12]
 8008572:	60b9      	str	r1, [r7, #8]
 8008574:	607a      	str	r2, [r7, #4]
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	ed93 7a00 	vldr	s14, [r3]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	edd3 7a00 	vldr	s15, [r3]
 8008582:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008586:	eeb0 0a67 	vmov.f32	s0, s15
 800858a:	3714      	adds	r7, #20
 800858c:	46bd      	mov	sp, r7
 800858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008592:	4770      	bx	lr

08008594 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8008594:	b580      	push	{r7, lr}
 8008596:	b082      	sub	sp, #8
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800859c:	2201      	movs	r2, #1
 800859e:	2101      	movs	r1, #1
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f7ff f8a2 	bl	80076ea <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f000 fb2c 	bl	8008c04 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSL_>
  }
 80085ac:	bf00      	nop
 80085ae:	3708      	adds	r7, #8
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}

080085b4 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80085b4:	b480      	push	{r7}
 80085b6:	b083      	sub	sp, #12
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
    }
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	4618      	mov	r0, r3
 80085c0:	370c      	adds	r7, #12
 80085c2:	46bd      	mov	sp, r7
 80085c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c8:	4770      	bx	lr

080085ca <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 80085ca:	b480      	push	{r7}
 80085cc:	b083      	sub	sp, #12
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	6078      	str	r0, [r7, #4]
 80085d2:	6039      	str	r1, [r7, #0]
}
 80085d4:	bf00      	nop
 80085d6:	370c      	adds	r7, #12
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr

080085e0 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEED1Ev>:
struct evaluator<PlainObjectBase<Derived> >
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b082      	sub	sp, #8
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f000 fb35 	bl	8008c58 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	4618      	mov	r0, r3
 80085f2:	3708      	adds	r7, #8
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}

080085f8 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>:
struct evaluator<Matrix<Scalar, Rows, Cols, Options, MaxRows, MaxCols> >
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b082      	sub	sp, #8
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	4618      	mov	r0, r3
 8008604:	f7ff ffec 	bl	80085e0 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEED1Ev>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	4618      	mov	r0, r3
 800860c:	3708      	adds	r7, #8
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}

08008612 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEELi4ENS_10DenseShapeESL_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 8008612:	b580      	push	{r7, lr}
 8008614:	b082      	sub	sp, #8
 8008616:	af00      	add	r7, sp, #0
 8008618:	6078      	str	r0, [r7, #4]
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	3314      	adds	r3, #20
 800861e:	4618      	mov	r0, r3
 8008620:	f7ff ffea 	bl	80085f8 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	3310      	adds	r3, #16
 8008628:	4618      	mov	r0, r3
 800862a:	f7fc f820 	bl	800466e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f000 fb07 	bl	8008c42 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEED1Ev>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	4618      	mov	r0, r3
 8008638:	3708      	adds	r7, #8
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}

0800863e <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 800863e:	b580      	push	{r7, lr}
 8008640:	b082      	sub	sp, #8
 8008642:	af00      	add	r7, sp, #0
 8008644:	6078      	str	r0, [r7, #4]
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	4618      	mov	r0, r3
 800864a:	f7ff ffe2 	bl	8008612 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEELi4ENS_10DenseShapeESL_ffED1Ev>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	4618      	mov	r0, r3
 8008652:	3708      	adds	r7, #8
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}

08008658 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 8008658:	b580      	push	{r7, lr}
 800865a:	b092      	sub	sp, #72	; 0x48
 800865c:	af02      	add	r7, sp, #8
 800865e:	60f8      	str	r0, [r7, #12]
 8008660:	60b9      	str	r1, [r7, #8]
 8008662:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 8008664:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008668:	68b9      	ldr	r1, [r7, #8]
 800866a:	4618      	mov	r0, r3
 800866c:	f000 fada 	bl	8008c24 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1ERKSK_>
  resize_if_allowed(dst, src, func);
 8008670:	687a      	ldr	r2, [r7, #4]
 8008672:	68b9      	ldr	r1, [r7, #8]
 8008674:	68f8      	ldr	r0, [r7, #12]
 8008676:	f000 fb15 	bl	8008ca4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 800867a:	f107 0320 	add.w	r3, r7, #32
 800867e:	68f9      	ldr	r1, [r7, #12]
 8008680:	4618      	mov	r0, r3
 8008682:	f7fd fb2e 	bl	8005ce2 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 8008686:	68f8      	ldr	r0, [r7, #12]
 8008688:	f7fe fb6c 	bl	8006d64 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv>
 800868c:	4603      	mov	r3, r0
 800868e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8008692:	f107 0120 	add.w	r1, r7, #32
 8008696:	f107 0010 	add.w	r0, r7, #16
 800869a:	9300      	str	r3, [sp, #0]
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f000 fb4b 	bl	8008d38 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS6_INS6_IS9_S7_Li0EEESA_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSO_RKSQ_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 80086a2:	f107 0310 	add.w	r3, r7, #16
 80086a6:	4618      	mov	r0, r3
 80086a8:	f000 fb60 	bl	8008d6c <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSS_>
  DstEvaluatorType dstEvaluator(dst);
 80086ac:	f107 0320 	add.w	r3, r7, #32
 80086b0:	4618      	mov	r0, r3
 80086b2:	f7fb ffdc 	bl	800466e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 80086b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80086ba:	4618      	mov	r0, r3
 80086bc:	f7ff ffbf 	bl	800863e <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEED1Ev>
}
 80086c0:	bf00      	nop
 80086c2:	3740      	adds	r7, #64	; 0x40
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}

080086c8 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE11lazyProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEEEEKNSB_IS2_T_Li1EEERKNS0_ISG_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 80086c8:	b590      	push	{r4, r7, lr}
 80086ca:	b085      	sub	sp, #20
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	60f8      	str	r0, [r7, #12]
 80086d0:	60b9      	str	r1, [r7, #8]
 80086d2:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 80086d4:	68b8      	ldr	r0, [r7, #8]
 80086d6:	f7fb fffa 	bl	80046ce <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80086da:	4604      	mov	r4, r0
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f7fc ffd5 	bl	800568c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEE7derivedEv>
 80086e2:	4603      	mov	r3, r0
 80086e4:	461a      	mov	r2, r3
 80086e6:	4621      	mov	r1, r4
 80086e8:	68f8      	ldr	r0, [r7, #12]
 80086ea:	f000 fb6f 	bl	8008dcc <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EEC1ERKS2_RKSC_>
}
 80086ee:	68f8      	ldr	r0, [r7, #12]
 80086f0:	3714      	adds	r7, #20
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd90      	pop	{r4, r7, pc}

080086f6 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 80086f6:	b580      	push	{r7, lr}
 80086f8:	b086      	sub	sp, #24
 80086fa:	af00      	add	r7, sp, #0
 80086fc:	60f8      	str	r0, [r7, #12]
 80086fe:	60b9      	str	r1, [r7, #8]
 8008700:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8008706:	687a      	ldr	r2, [r7, #4]
 8008708:	68b9      	ldr	r1, [r7, #8]
 800870a:	6978      	ldr	r0, [r7, #20]
 800870c:	f000 fb8e 	bl	8008e2c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>
}
 8008710:	bf00      	nop
 8008712:	3718      	adds	r7, #24
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}

08008718 <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8008718:	b480      	push	{r7}
 800871a:	b083      	sub	sp, #12
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
    }
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	4618      	mov	r0, r3
 8008724:	370c      	adds	r7, #12
 8008726:	46bd      	mov	sp, r7
 8008728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872c:	4770      	bx	lr

0800872e <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 800872e:	b580      	push	{r7, lr}
 8008730:	b082      	sub	sp, #8
 8008732:	af00      	add	r7, sp, #0
 8008734:	6078      	str	r0, [r7, #4]
 8008736:	6039      	str	r1, [r7, #0]
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	4618      	mov	r0, r3
 800873c:	f7fb fd85 	bl	800424a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8008740:	4603      	mov	r3, r0
 8008742:	2b01      	cmp	r3, #1
 8008744:	dd08      	ble.n	8008758 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEEEvRKT_RKT0_+0x2a>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	4618      	mov	r0, r3
 800874a:	f7fb fd73 	bl	8004234 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800874e:	4603      	mov	r3, r0
 8008750:	2b01      	cmp	r3, #1
 8008752:	dd01      	ble.n	8008758 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEEEvRKT_RKT0_+0x2a>
 8008754:	2301      	movs	r3, #1
 8008756:	e000      	b.n	800875a <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEEEvRKT_RKT0_+0x2c>
 8008758:	2300      	movs	r3, #0
 800875a:	2b00      	cmp	r3, #0
 800875c:	d003      	beq.n	8008766 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEEEvRKT_RKT0_+0x38>
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
 800875e:	6839      	ldr	r1, [r7, #0]
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f000 fb76 	bl	8008e52 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEELb0EE3runERS8_RKSE_>
}
 8008766:	bf00      	nop
 8008768:	3708      	adds	r7, #8
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}

0800876e <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEELi3ENS_10DenseShapeESF_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 800876e:	b580      	push	{r7, lr}
 8008770:	b082      	sub	sp, #8
 8008772:	af00      	add	r7, sp, #0
 8008774:	6078      	str	r0, [r7, #4]
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	332c      	adds	r3, #44	; 0x2c
 800877a:	4618      	mov	r0, r3
 800877c:	f7fd ffed 	bl	800675a <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	3328      	adds	r3, #40	; 0x28
 8008784:	4618      	mov	r0, r3
 8008786:	f7fd ffe8 	bl	800675a <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f000 fb7b 	bl	8008e86 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEED1Ev>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	4618      	mov	r0, r3
 8008794:	3708      	adds	r7, #8
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}

0800879a <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 800879a:	b580      	push	{r7, lr}
 800879c:	b082      	sub	sp, #8
 800879e:	af00      	add	r7, sp, #0
 80087a0:	6078      	str	r0, [r7, #4]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	4618      	mov	r0, r3
 80087a6:	f7ff ffe2 	bl	800876e <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEELi3ENS_10DenseShapeESF_ffED1Ev>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	4618      	mov	r0, r3
 80087ae:	3708      	adds	r7, #8
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}

080087b4 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b098      	sub	sp, #96	; 0x60
 80087b8:	af02      	add	r7, sp, #8
 80087ba:	60f8      	str	r0, [r7, #12]
 80087bc:	60b9      	str	r1, [r7, #8]
 80087be:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 80087c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80087c4:	68b9      	ldr	r1, [r7, #8]
 80087c6:	4618      	mov	r0, r3
 80087c8:	f000 fb4e 	bl	8008e68 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1ERKSE_>
  resize_if_allowed(dst, src, func);
 80087cc:	687a      	ldr	r2, [r7, #4]
 80087ce:	68b9      	ldr	r1, [r7, #8]
 80087d0:	68f8      	ldr	r0, [r7, #12]
 80087d2:	f000 fb7f 	bl	8008ed4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 80087d6:	f107 0320 	add.w	r3, r7, #32
 80087da:	68f9      	ldr	r1, [r7, #12]
 80087dc:	4618      	mov	r0, r3
 80087de:	f7fe f9cb 	bl	8006b78 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 80087e2:	68f8      	ldr	r0, [r7, #12]
 80087e4:	f7fe fa30 	bl	8006c48 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE18const_cast_derivedEv>
 80087e8:	4603      	mov	r3, r0
 80087ea:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80087ee:	f107 0120 	add.w	r1, r7, #32
 80087f2:	f107 0010 	add.w	r0, r7, #16
 80087f6:	9300      	str	r3, [sp, #0]
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f000 fbb5 	bl	8008f68 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSH_RKSJ_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 80087fe:	f107 0310 	add.w	r3, r7, #16
 8008802:	4618      	mov	r0, r3
 8008804:	f000 fbca 	bl	8008f9c <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSL_>
  DstEvaluatorType dstEvaluator(dst);
 8008808:	f107 0320 	add.w	r3, r7, #32
 800880c:	4618      	mov	r0, r3
 800880e:	f7fd ffa4 	bl	800675a <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 8008812:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008816:	4618      	mov	r0, r3
 8008818:	f7ff ffbf 	bl	800879a <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEED1Ev>
}
 800881c:	bf00      	nop
 800881e:	3758      	adds	r7, #88	; 0x58
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}

08008824 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEELb0EE3runERKS3_RKSI_>:
    static void run(const Derived&, const OtherDerived&)
 8008824:	b480      	push	{r7}
 8008826:	b083      	sub	sp, #12
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
 800882c:	6039      	str	r1, [r7, #0]
    }
 800882e:	bf00      	nop
 8008830:	370c      	adds	r7, #12
 8008832:	46bd      	mov	sp, r7
 8008834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008838:	4770      	bx	lr

0800883a <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1ERKSH_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800883a:	b580      	push	{r7, lr}
 800883c:	b082      	sub	sp, #8
 800883e:	af00      	add	r7, sp, #0
 8008840:	6078      	str	r0, [r7, #4]
 8008842:	6039      	str	r1, [r7, #0]
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6839      	ldr	r1, [r7, #0]
 8008848:	4618      	mov	r0, r3
 800884a:	f000 fbb2 	bl	8008fb2 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEELi4ENS_10DenseShapeESI_ffEC1ERKSH_>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	4618      	mov	r0, r3
 8008852:	3708      	adds	r7, #8
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}

08008858 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8008858:	b480      	push	{r7}
 800885a:	b083      	sub	sp, #12
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	4618      	mov	r0, r3
 8008864:	370c      	adds	r7, #12
 8008866:	46bd      	mov	sp, r7
 8008868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886c:	4770      	bx	lr

0800886e <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED1Ev>:
 800886e:	b480      	push	{r7}
 8008870:	b083      	sub	sp, #12
 8008872:	af00      	add	r7, sp, #0
 8008874:	6078      	str	r0, [r7, #4]
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	4618      	mov	r0, r3
 800887a:	370c      	adds	r7, #12
 800887c:	46bd      	mov	sp, r7
 800887e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008882:	4770      	bx	lr

08008884 <_ZN5Eigen8internal14evaluator_baseINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
 8008884:	b480      	push	{r7}
 8008886:	b083      	sub	sp, #12
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	4618      	mov	r0, r3
 8008890:	370c      	adds	r7, #12
 8008892:	46bd      	mov	sp, r7
 8008894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008898:	4770      	bx	lr

0800889a <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
 800889a:	b480      	push	{r7}
 800889c:	b083      	sub	sp, #12
 800889e:	af00      	add	r7, sp, #0
 80088a0:	6078      	str	r0, [r7, #4]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	4618      	mov	r0, r3
 80088a6:	370c      	adds	r7, #12
 80088a8:	46bd      	mov	sp, r7
 80088aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ae:	4770      	bx	lr

080088b0 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b082      	sub	sp, #8
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	4618      	mov	r0, r3
 80088bc:	f7fe fdad 	bl	800741a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4rowsEv>
 80088c0:	4603      	mov	r3, r0
 80088c2:	4618      	mov	r0, r3
 80088c4:	3708      	adds	r7, #8
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}

080088ca <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 80088ca:	b580      	push	{r7, lr}
 80088cc:	b082      	sub	sp, #8
 80088ce:	af00      	add	r7, sp, #0
 80088d0:	6078      	str	r0, [r7, #4]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	3310      	adds	r3, #16
 80088d6:	4618      	mov	r0, r3
 80088d8:	f7fe fdad 	bl	8007436 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80088dc:	4603      	mov	r3, r0
 80088de:	4618      	mov	r0, r3
 80088e0:	3708      	adds	r7, #8
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}
	...

080088e8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b086      	sub	sp, #24
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	60f8      	str	r0, [r7, #12]
 80088f0:	60b9      	str	r1, [r7, #8]
 80088f2:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 80088f4:	68b8      	ldr	r0, [r7, #8]
 80088f6:	f7ff ffdb 	bl	80088b0 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE4rowsEv>
 80088fa:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 80088fc:	68b8      	ldr	r0, [r7, #8]
 80088fe:	f7ff ffe4 	bl	80088ca <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE4colsEv>
 8008902:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	4618      	mov	r0, r3
 8008908:	f7fb fc9f 	bl	800424a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800890c:	4602      	mov	r2, r0
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	4293      	cmp	r3, r2
 8008912:	d107      	bne.n	8008924 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	4618      	mov	r0, r3
 8008918:	f7fb fc8c 	bl	8004234 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800891c:	4602      	mov	r2, r0
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	4293      	cmp	r3, r2
 8008922:	d001      	beq.n	8008928 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 8008924:	2301      	movs	r3, #1
 8008926:	e000      	b.n	800892a <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 8008928:	2300      	movs	r3, #0
 800892a:	2b00      	cmp	r3, #0
 800892c:	d005      	beq.n	800893a <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	693a      	ldr	r2, [r7, #16]
 8008932:	6979      	ldr	r1, [r7, #20]
 8008934:	4618      	mov	r0, r3
 8008936:	f7fe fba1 	bl	800707c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	4618      	mov	r0, r3
 800893e:	f7fb fc84 	bl	800424a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8008942:	4602      	mov	r2, r0
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	4293      	cmp	r3, r2
 8008948:	d107      	bne.n	800895a <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	4618      	mov	r0, r3
 800894e:	f7fb fc71 	bl	8004234 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8008952:	4602      	mov	r2, r0
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	4293      	cmp	r3, r2
 8008958:	d006      	beq.n	8008968 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 800895a:	4b05      	ldr	r3, [pc, #20]	; (8008970 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 800895c:	4a05      	ldr	r2, [pc, #20]	; (8008974 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 800895e:	f240 21fd 	movw	r1, #765	; 0x2fd
 8008962:	4805      	ldr	r0, [pc, #20]	; (8008978 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8008964:	f014 fb66 	bl	801d034 <__assert_func>
}
 8008968:	bf00      	nop
 800896a:	3718      	adds	r7, #24
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}
 8008970:	08021514 	.word	0x08021514
 8008974:	08022b68 	.word	0x08022b68
 8008978:	08021628 	.word	0x08021628

0800897c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSL_RKSN_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 800897c:	b480      	push	{r7}
 800897e:	b085      	sub	sp, #20
 8008980:	af00      	add	r7, sp, #0
 8008982:	60f8      	str	r0, [r7, #12]
 8008984:	60b9      	str	r1, [r7, #8]
 8008986:	607a      	str	r2, [r7, #4]
 8008988:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	68ba      	ldr	r2, [r7, #8]
 800898e:	601a      	str	r2, [r3, #0]
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	687a      	ldr	r2, [r7, #4]
 8008994:	605a      	str	r2, [r3, #4]
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	683a      	ldr	r2, [r7, #0]
 800899a:	609a      	str	r2, [r3, #8]
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	69ba      	ldr	r2, [r7, #24]
 80089a0:	60da      	str	r2, [r3, #12]
  }
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	4618      	mov	r0, r3
 80089a6:	3714      	adds	r7, #20
 80089a8:	46bd      	mov	sp, r7
 80089aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ae:	4770      	bx	lr

080089b0 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b082      	sub	sp, #8
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f000 fb32 	bl	8009022 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSP_>
  }
 80089be:	bf00      	nop
 80089c0:	3708      	adds	r7, #8
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}

080089c6 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi5ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 80089c6:	b580      	push	{r7, lr}
 80089c8:	b082      	sub	sp, #8
 80089ca:	af00      	add	r7, sp, #0
 80089cc:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 80089ce:	2105      	movs	r1, #5
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f7fe fdba 	bl	800754a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f000 fb33 	bl	8009042 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi6ELi9EE3runERS9_>
  }
 80089dc:	bf00      	nop
 80089de:	3708      	adds	r7, #8
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}

080089e4 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1ERKS6_>:
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b082      	sub	sp, #8
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
 80089ec:	6039      	str	r1, [r7, #0]
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6839      	ldr	r1, [r7, #0]
 80089f2:	4618      	mov	r0, r3
 80089f4:	f000 fb34 	bl	8009060 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEELi3ENS_10DenseShapeES7_ffEC1ERKS6_>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	4618      	mov	r0, r3
 80089fc:	3708      	adds	r7, #8
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}

08008a02 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEED1Ev>:
 8008a02:	b480      	push	{r7}
 8008a04:	b083      	sub	sp, #12
 8008a06:	af00      	add	r7, sp, #0
 8008a08:	6078      	str	r0, [r7, #4]
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	370c      	adds	r7, #12
 8008a10:	46bd      	mov	sp, r7
 8008a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a16:	4770      	bx	lr

08008a18 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b082      	sub	sp, #8
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	4618      	mov	r0, r3
 8008a26:	f7fb fc10 	bl	800424a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3708      	adds	r7, #8
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}

08008a34 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b082      	sub	sp, #8
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	4618      	mov	r0, r3
 8008a42:	f7fb fc9d 	bl	8004380 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8008a46:	4603      	mov	r3, r0
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3708      	adds	r7, #8
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}

08008a50 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b086      	sub	sp, #24
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	60f8      	str	r0, [r7, #12]
 8008a58:	60b9      	str	r1, [r7, #8]
 8008a5a:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8008a5c:	68b8      	ldr	r0, [r7, #8]
 8008a5e:	f7ff ffdb 	bl	8008a18 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE4rowsEv>
 8008a62:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8008a64:	68b8      	ldr	r0, [r7, #8]
 8008a66:	f7ff ffe5 	bl	8008a34 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE4colsEv>
 8008a6a:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f7fb fc91 	bl	8004396 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8008a74:	4602      	mov	r2, r0
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d107      	bne.n	8008a8c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f7fb fc7e 	bl	8004380 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8008a84:	4602      	mov	r2, r0
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d001      	beq.n	8008a90 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	e000      	b.n	8008a92 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 8008a90:	2300      	movs	r3, #0
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d005      	beq.n	8008aa2 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	693a      	ldr	r2, [r7, #16]
 8008a9a:	6979      	ldr	r1, [r7, #20]
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f7fe fb85 	bl	80071ac <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f7fb fc76 	bl	8004396 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8008aaa:	4602      	mov	r2, r0
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d107      	bne.n	8008ac2 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f7fb fc63 	bl	8004380 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8008aba:	4602      	mov	r2, r0
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d006      	beq.n	8008ad0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 8008ac2:	4b05      	ldr	r3, [pc, #20]	; (8008ad8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 8008ac4:	4a05      	ldr	r2, [pc, #20]	; (8008adc <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 8008ac6:	f240 21fd 	movw	r1, #765	; 0x2fd
 8008aca:	4805      	ldr	r0, [pc, #20]	; (8008ae0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8008acc:	f014 fab2 	bl	801d034 <__assert_func>
}
 8008ad0:	bf00      	nop
 8008ad2:	3718      	adds	r7, #24
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}
 8008ad8:	08021514 	.word	0x08021514
 8008adc:	08022d48 	.word	0x08022d48
 8008ae0:	08021628 	.word	0x08021628

08008ae4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKS9_RKSB_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8008ae4:	b480      	push	{r7}
 8008ae6:	b085      	sub	sp, #20
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	60f8      	str	r0, [r7, #12]
 8008aec:	60b9      	str	r1, [r7, #8]
 8008aee:	607a      	str	r2, [r7, #4]
 8008af0:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	68ba      	ldr	r2, [r7, #8]
 8008af6:	601a      	str	r2, [r3, #0]
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	687a      	ldr	r2, [r7, #4]
 8008afc:	605a      	str	r2, [r3, #4]
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	683a      	ldr	r2, [r7, #0]
 8008b02:	609a      	str	r2, [r3, #8]
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	69ba      	ldr	r2, [r7, #24]
 8008b08:	60da      	str	r2, [r3, #12]
  }
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3714      	adds	r7, #20
 8008b10:	46bd      	mov	sp, r7
 8008b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b16:	4770      	bx	lr

08008b18 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b082      	sub	sp, #8
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f000 fad2 	bl	80090ca <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSD_>
  }
 8008b26:	bf00      	nop
 8008b28:	3708      	adds	r7, #8
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}

08008b2e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>:
  evaluator() {}
 8008b2e:	b580      	push	{r7, lr}
 8008b30:	b082      	sub	sp, #8
 8008b32:	af00      	add	r7, sp, #0
 8008b34:	6078      	str	r0, [r7, #4]
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f000 fad5 	bl	80090e8 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEEC1Ev>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	4618      	mov	r0, r3
 8008b42:	3708      	adds	r7, #8
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}

08008b48 <_ZN5Eigen6MatrixIfLi3ELi3ELi1ELi3ELi3EEC1IiiEERKT_RKT0_>:
    Matrix(const T0& x, const T1& y)
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b084      	sub	sp, #16
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	60f8      	str	r0, [r7, #12]
 8008b50:	60b9      	str	r1, [r7, #8]
 8008b52:	607a      	str	r2, [r7, #4]
    {
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	4618      	mov	r0, r3
 8008b58:	f000 fae4 	bl	8009124 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>
      Base::_check_template_params();
 8008b5c:	f000 faf2 	bl	8009144 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE22_check_template_paramsEv>
      Base::template _init2<T0,T1>(x, y);
 8008b60:	68f8      	ldr	r0, [r7, #12]
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	6819      	ldr	r1, [r3, #0]
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681a      	ldr	r2, [r3, #0]
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	f000 faf1 	bl	8009152 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6_init2IiiEEviiPNS_8internal9enable_ifILb1ET_E4typeE>
    }
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	4618      	mov	r0, r3
 8008b74:	3710      	adds	r7, #16
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}

08008b7a <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1ERKS3_>:
  explicit evaluator(const XprType& m)
 8008b7a:	b580      	push	{r7, lr}
 8008b7c:	b082      	sub	sp, #8
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	6078      	str	r0, [r7, #4]
 8008b82:	6039      	str	r1, [r7, #0]
    : evaluator<PlainObjectBase<XprType> >(m)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	683a      	ldr	r2, [r7, #0]
 8008b88:	4611      	mov	r1, r2
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f000 faf5 	bl	800917a <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEEC1ERKS5_>
  { }
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	4618      	mov	r0, r3
 8008b94:	3708      	adds	r7, #8
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}

08008b9a <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8008b9a:	b480      	push	{r7}
 8008b9c:	b083      	sub	sp, #12
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	6078      	str	r0, [r7, #4]
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	370c      	adds	r7, #12
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr

08008bb0 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8008bb0:	b480      	push	{r7}
 8008bb2:	b083      	sub	sp, #12
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	3308      	adds	r3, #8
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	370c      	adds	r7, #12
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc6:	4770      	bx	lr

08008bc8 <_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EENS_10DenseShapeES8_Li3EE6evalToINS3_IfLi3ELi3ELi1ELi3ELi3EEEEEvRT_RKS5_RKS7_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b088      	sub	sp, #32
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	60f8      	str	r0, [r7, #12]
 8008bd0:	60b9      	str	r1, [r7, #8]
 8008bd2:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 8008bd4:	f107 0310 	add.w	r3, r7, #16
 8008bd8:	687a      	ldr	r2, [r7, #4]
 8008bda:	68b9      	ldr	r1, [r7, #8]
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f000 fae7 	bl	80091b0 <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEE11lazyProductINS_9TransposeIS3_EEEEKNS1_IS4_T_Li1EEERKNS0_IS9_EE>
 8008be2:	f107 031c 	add.w	r3, r7, #28
 8008be6:	4618      	mov	r0, r3
 8008be8:	f7fd fb5f 	bl	80062aa <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8008bec:	f107 021c 	add.w	r2, r7, #28
 8008bf0:	f107 0310 	add.w	r3, r7, #16
 8008bf4:	4619      	mov	r1, r3
 8008bf6:	68f8      	ldr	r0, [r7, #12]
 8008bf8:	f000 faf1 	bl	80091de <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8008bfc:	bf00      	nop
 8008bfe:	3720      	adds	r7, #32
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b082      	sub	sp, #8
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8008c0c:	2202      	movs	r2, #2
 8008c0e:	2101      	movs	r1, #1
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f7fe fd6a 	bl	80076ea <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f000 faf2 	bl	8009200 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSL_>
  }
 8008c1c:	bf00      	nop
 8008c1e:	3708      	adds	r7, #8
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}

08008c24 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1ERKSK_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b082      	sub	sp, #8
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
 8008c2c:	6039      	str	r1, [r7, #0]
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6839      	ldr	r1, [r7, #0]
 8008c32:	4618      	mov	r0, r3
 8008c34:	f000 faf4 	bl	8009220 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEELi4ENS_10DenseShapeESL_ffEC1ERKSK_>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3708      	adds	r7, #8
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}

08008c42 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8008c42:	b480      	push	{r7}
 8008c44:	b083      	sub	sp, #12
 8008c46:	af00      	add	r7, sp, #0
 8008c48:	6078      	str	r0, [r7, #4]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	370c      	adds	r7, #12
 8008c50:	46bd      	mov	sp, r7
 8008c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c56:	4770      	bx	lr

08008c58 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>:
 8008c58:	b480      	push	{r7}
 8008c5a:	b083      	sub	sp, #12
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	4618      	mov	r0, r3
 8008c64:	370c      	adds	r7, #12
 8008c66:	46bd      	mov	sp, r7
 8008c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6c:	4770      	bx	lr

08008c6e <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8008c6e:	b580      	push	{r7, lr}
 8008c70:	b082      	sub	sp, #8
 8008c72:	af00      	add	r7, sp, #0
 8008c74:	6078      	str	r0, [r7, #4]
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f7fe fd5f 	bl	800773c <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4rowsEv>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	4618      	mov	r0, r3
 8008c82:	3708      	adds	r7, #8
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}

08008c88 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b082      	sub	sp, #8
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	3308      	adds	r3, #8
 8008c94:	4618      	mov	r0, r3
 8008c96:	f7fe fd5f 	bl	8007758 <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4colsEv>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3708      	adds	r7, #8
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}

08008ca4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b086      	sub	sp, #24
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	60f8      	str	r0, [r7, #12]
 8008cac:	60b9      	str	r1, [r7, #8]
 8008cae:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8008cb0:	68b8      	ldr	r0, [r7, #8]
 8008cb2:	f7ff ffdc 	bl	8008c6e <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE4rowsEv>
 8008cb6:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8008cb8:	68b8      	ldr	r0, [r7, #8]
 8008cba:	f7ff ffe5 	bl	8008c88 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE4colsEv>
 8008cbe:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f7fb fb67 	bl	8004396 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8008cc8:	4602      	mov	r2, r0
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d107      	bne.n	8008ce0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f7fb fb54 	bl	8004380 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8008cd8:	4602      	mov	r2, r0
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d001      	beq.n	8008ce4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	e000      	b.n	8008ce6 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d005      	beq.n	8008cf6 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	693a      	ldr	r2, [r7, #16]
 8008cee:	6979      	ldr	r1, [r7, #20]
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f7fe fa5b 	bl	80071ac <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	f7fb fb4c 	bl	8004396 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8008cfe:	4602      	mov	r2, r0
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d107      	bne.n	8008d16 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f7fb fb39 	bl	8004380 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8008d0e:	4602      	mov	r2, r0
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d006      	beq.n	8008d24 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 8008d16:	4b05      	ldr	r3, [pc, #20]	; (8008d2c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 8008d18:	4a05      	ldr	r2, [pc, #20]	; (8008d30 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 8008d1a:	f240 21fd 	movw	r1, #765	; 0x2fd
 8008d1e:	4805      	ldr	r0, [pc, #20]	; (8008d34 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8008d20:	f014 f988 	bl	801d034 <__assert_func>
}
 8008d24:	bf00      	nop
 8008d26:	3718      	adds	r7, #24
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd80      	pop	{r7, pc}
 8008d2c:	08021514 	.word	0x08021514
 8008d30:	08022e5c 	.word	0x08022e5c
 8008d34:	08021628 	.word	0x08021628

08008d38 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS6_INS6_IS9_S7_Li0EEESA_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSO_RKSQ_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8008d38:	b480      	push	{r7}
 8008d3a:	b085      	sub	sp, #20
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	60f8      	str	r0, [r7, #12]
 8008d40:	60b9      	str	r1, [r7, #8]
 8008d42:	607a      	str	r2, [r7, #4]
 8008d44:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	68ba      	ldr	r2, [r7, #8]
 8008d4a:	601a      	str	r2, [r3, #0]
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	687a      	ldr	r2, [r7, #4]
 8008d50:	605a      	str	r2, [r3, #4]
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	683a      	ldr	r2, [r7, #0]
 8008d56:	609a      	str	r2, [r3, #8]
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	69ba      	ldr	r2, [r7, #24]
 8008d5c:	60da      	str	r2, [r3, #12]
  }
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	4618      	mov	r0, r3
 8008d62:	3714      	adds	r7, #20
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr

08008d6c <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSS_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b082      	sub	sp, #8
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f000 fa8e 	bl	8009296 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSS_>
  }
 8008d7a:	bf00      	nop
 8008d7c:	3708      	adds	r7, #8
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}

08008d82 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEEEC1Ev>:
 8008d82:	b580      	push	{r7, lr}
 8008d84:	b082      	sub	sp, #8
 8008d86:	af00      	add	r7, sp, #0
 8008d88:	6078      	str	r0, [r7, #4]
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f000 fa92 	bl	80092b4 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEEEC1Ev>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	4618      	mov	r0, r3
 8008d94:	3708      	adds	r7, #8
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}

08008d9a <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1ELi4EEC1Ev>:
class dense_product_base
 8008d9a:	b580      	push	{r7, lr}
 8008d9c:	b082      	sub	sp, #8
 8008d9e:	af00      	add	r7, sp, #0
 8008da0:	6078      	str	r0, [r7, #4]
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f7ff ffed 	bl	8008d82 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEEEC1Ev>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	4618      	mov	r0, r3
 8008dac:	3708      	adds	r7, #8
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}

08008db2 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8008db2:	b580      	push	{r7, lr}
 8008db4:	b082      	sub	sp, #8
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	6078      	str	r0, [r7, #4]
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f7ff ffed 	bl	8008d9a <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1ELi4EEC1Ev>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3708      	adds	r7, #8
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}
	...

08008dcc <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EEC1ERKS2_RKSC_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8008dcc:	b590      	push	{r4, r7, lr}
 8008dce:	b085      	sub	sp, #20
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	60f8      	str	r0, [r7, #12]
 8008dd4:	60b9      	str	r1, [r7, #8]
 8008dd6:	607a      	str	r2, [r7, #4]
 8008dd8:	68f8      	ldr	r0, [r7, #12]
 8008dda:	f7ff ffea 	bl	8008db2 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1ENS_5DenseEEC1Ev>
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	68ba      	ldr	r2, [r7, #8]
 8008de2:	601a      	str	r2, [r3, #0]
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	3304      	adds	r3, #4
 8008de8:	6879      	ldr	r1, [r7, #4]
 8008dea:	4618      	mov	r0, r3
 8008dec:	f7fb f809 	bl	8003e02 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERKSC_>
      eigen_assert(lhs.cols() == rhs.rows()
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	4618      	mov	r0, r3
 8008df4:	f7fb fac4 	bl	8004380 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8008df8:	4604      	mov	r4, r0
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f7fc fc75 	bl	80056ea <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE4rowsEv>
 8008e00:	4603      	mov	r3, r0
 8008e02:	429c      	cmp	r4, r3
 8008e04:	d005      	beq.n	8008e12 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EEC1ERKS2_RKSC_+0x46>
 8008e06:	4b06      	ldr	r3, [pc, #24]	; (8008e20 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EEC1ERKS2_RKSC_+0x54>)
 8008e08:	4a06      	ldr	r2, [pc, #24]	; (8008e24 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EEC1ERKS2_RKSC_+0x58>)
 8008e0a:	2160      	movs	r1, #96	; 0x60
 8008e0c:	4806      	ldr	r0, [pc, #24]	; (8008e28 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EEC1ERKS2_RKSC_+0x5c>)
 8008e0e:	f014 f911 	bl	801d034 <__assert_func>
 8008e12:	bf00      	nop
    }
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	4618      	mov	r0, r3
 8008e18:	3714      	adds	r7, #20
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd90      	pop	{r4, r7, pc}
 8008e1e:	bf00      	nop
 8008e20:	0801f15c 	.word	0x0801f15c
 8008e24:	080230a0 	.word	0x080230a0
 8008e28:	0801f4ac 	.word	0x0801f4ac

08008e2c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b084      	sub	sp, #16
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	60f8      	str	r0, [r7, #12]
 8008e34:	60b9      	str	r1, [r7, #8]
 8008e36:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 8008e38:	68b9      	ldr	r1, [r7, #8]
 8008e3a:	68f8      	ldr	r0, [r7, #12]
 8008e3c:	f000 fa45 	bl	80092ca <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 8008e40:	687a      	ldr	r2, [r7, #4]
 8008e42:	68b9      	ldr	r1, [r7, #8]
 8008e44:	68f8      	ldr	r0, [r7, #12]
 8008e46:	f000 fa6e 	bl	8009326 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8008e4a:	bf00      	nop
 8008e4c:	3710      	adds	r7, #16
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}

08008e52 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEELb0EE3runERS8_RKSE_>:
    static void run(const Derived&, const OtherDerived&)
 8008e52:	b480      	push	{r7}
 8008e54:	b083      	sub	sp, #12
 8008e56:	af00      	add	r7, sp, #0
 8008e58:	6078      	str	r0, [r7, #4]
 8008e5a:	6039      	str	r1, [r7, #0]
    }
 8008e5c:	bf00      	nop
 8008e5e:	370c      	adds	r7, #12
 8008e60:	46bd      	mov	sp, r7
 8008e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e66:	4770      	bx	lr

08008e68 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1ERKSE_>:
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b082      	sub	sp, #8
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	6039      	str	r1, [r7, #0]
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6839      	ldr	r1, [r7, #0]
 8008e76:	4618      	mov	r0, r3
 8008e78:	f000 fa8d 	bl	8009396 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEELi3ENS_10DenseShapeESF_ffEC1ERKSE_>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	4618      	mov	r0, r3
 8008e80:	3708      	adds	r7, #8
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}

08008e86 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEED1Ev>:
 8008e86:	b480      	push	{r7}
 8008e88:	b083      	sub	sp, #12
 8008e8a:	af00      	add	r7, sp, #0
 8008e8c:	6078      	str	r0, [r7, #4]
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	4618      	mov	r0, r3
 8008e92:	370c      	adds	r7, #12
 8008e94:	46bd      	mov	sp, r7
 8008e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9a:	4770      	bx	lr

08008e9c <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b082      	sub	sp, #8
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f7fe fccc 	bl	8007844 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE4rowsEv>
 8008eac:	4603      	mov	r3, r0
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3708      	adds	r7, #8
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}

08008eb6 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8008eb6:	b580      	push	{r7, lr}
 8008eb8:	b082      	sub	sp, #8
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	6078      	str	r0, [r7, #4]
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	691b      	ldr	r3, [r3, #16]
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f7fb f9b6 	bl	8004234 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	4618      	mov	r0, r3
 8008ecc:	3708      	adds	r7, #8
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}
	...

08008ed4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b086      	sub	sp, #24
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	60f8      	str	r0, [r7, #12]
 8008edc:	60b9      	str	r1, [r7, #8]
 8008ede:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8008ee0:	68b8      	ldr	r0, [r7, #8]
 8008ee2:	f7ff ffdb 	bl	8008e9c <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE4rowsEv>
 8008ee6:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8008ee8:	68b8      	ldr	r0, [r7, #8]
 8008eea:	f7ff ffe4 	bl	8008eb6 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE4colsEv>
 8008eee:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f7fb f9a9 	bl	800424a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8008ef8:	4602      	mov	r2, r0
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d107      	bne.n	8008f10 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	4618      	mov	r0, r3
 8008f04:	f7fb f996 	bl	8004234 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8008f08:	4602      	mov	r2, r0
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d001      	beq.n	8008f14 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 8008f10:	2301      	movs	r3, #1
 8008f12:	e000      	b.n	8008f16 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 8008f14:	2300      	movs	r3, #0
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d005      	beq.n	8008f26 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	693a      	ldr	r2, [r7, #16]
 8008f1e:	6979      	ldr	r1, [r7, #20]
 8008f20:	4618      	mov	r0, r3
 8008f22:	f7fe f8ab 	bl	800707c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f7fb f98e 	bl	800424a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8008f2e:	4602      	mov	r2, r0
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d107      	bne.n	8008f46 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f7fb f97b 	bl	8004234 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8008f3e:	4602      	mov	r2, r0
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	4293      	cmp	r3, r2
 8008f44:	d006      	beq.n	8008f54 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 8008f46:	4b05      	ldr	r3, [pc, #20]	; (8008f5c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 8008f48:	4a05      	ldr	r2, [pc, #20]	; (8008f60 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 8008f4a:	f240 21fd 	movw	r1, #765	; 0x2fd
 8008f4e:	4805      	ldr	r0, [pc, #20]	; (8008f64 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8008f50:	f014 f870 	bl	801d034 <__assert_func>
}
 8008f54:	bf00      	nop
 8008f56:	3718      	adds	r7, #24
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}
 8008f5c:	08021514 	.word	0x08021514
 8008f60:	0802330c 	.word	0x0802330c
 8008f64:	08021628 	.word	0x08021628

08008f68 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSH_RKSJ_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8008f68:	b480      	push	{r7}
 8008f6a:	b085      	sub	sp, #20
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	60f8      	str	r0, [r7, #12]
 8008f70:	60b9      	str	r1, [r7, #8]
 8008f72:	607a      	str	r2, [r7, #4]
 8008f74:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	68ba      	ldr	r2, [r7, #8]
 8008f7a:	601a      	str	r2, [r3, #0]
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	687a      	ldr	r2, [r7, #4]
 8008f80:	605a      	str	r2, [r3, #4]
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	683a      	ldr	r2, [r7, #0]
 8008f86:	609a      	str	r2, [r3, #8]
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	69ba      	ldr	r2, [r7, #24]
 8008f8c:	60da      	str	r2, [r3, #12]
  }
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	4618      	mov	r0, r3
 8008f92:	3714      	adds	r7, #20
 8008f94:	46bd      	mov	sp, r7
 8008f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9a:	4770      	bx	lr

08008f9c <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b082      	sub	sp, #8
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f000 fa2c 	bl	8009402 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSL_>
  }
 8008faa:	bf00      	nop
 8008fac:	3708      	adds	r7, #8
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}

08008fb2 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEELi4ENS_10DenseShapeESI_ffEC1ERKSH_>:
  typedef Product<Lhs, Rhs, LazyProduct> XprType;
  typedef typename XprType::Scalar Scalar;
  typedef typename XprType::CoeffReturnType CoeffReturnType;

  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  explicit product_evaluator(const XprType& xpr)
 8008fb2:	b590      	push	{r4, r7, lr}
 8008fb4:	b083      	sub	sp, #12
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	6078      	str	r0, [r7, #4]
 8008fba:	6039      	str	r1, [r7, #0]
    : m_lhs(xpr.lhs()),
      m_rhs(xpr.rhs()),
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
                            //       or perhaps declare them on the fly on the packet method... We have experiment to check what's best.
      m_innerDim(xpr.lhs().cols())
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f000 fa47 	bl	8009450 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1Ev>
 8008fc2:	687c      	ldr	r4, [r7, #4]
    : m_lhs(xpr.lhs()),
 8008fc4:	6838      	ldr	r0, [r7, #0]
 8008fc6:	f000 fa2c 	bl	8009422 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE3lhsEv>
 8008fca:	4603      	mov	r3, r0
      m_innerDim(xpr.lhs().cols())
 8008fcc:	4619      	mov	r1, r3
 8008fce:	4620      	mov	r0, r4
 8008fd0:	f7fa fcf8 	bl	80039c4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERKSC_>
      m_rhs(xpr.rhs()),
 8008fd4:	6838      	ldr	r0, [r7, #0]
 8008fd6:	f000 fa2f 	bl	8009438 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE3rhsEv>
 8008fda:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	3310      	adds	r3, #16
 8008fe0:	6812      	ldr	r2, [r2, #0]
 8008fe2:	601a      	str	r2, [r3, #0]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	3314      	adds	r3, #20
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 8008fe8:	687a      	ldr	r2, [r7, #4]
      m_innerDim(xpr.lhs().cols())
 8008fea:	4611      	mov	r1, r2
 8008fec:	4618      	mov	r0, r3
 8008fee:	f000 fa3a 	bl	8009466 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC1ERKSD_>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f103 0224 	add.w	r2, r3, #36	; 0x24
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	3310      	adds	r3, #16
      m_innerDim(xpr.lhs().cols())
 8008ffc:	4619      	mov	r1, r3
 8008ffe:	4610      	mov	r0, r2
 8009000:	f000 fa40 	bl	8009484 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKS5_>
 8009004:	6838      	ldr	r0, [r7, #0]
 8009006:	f000 fa0c 	bl	8009422 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE3lhsEv>
 800900a:	4603      	mov	r3, r0
 800900c:	4618      	mov	r0, r3
 800900e:	f7fb fcc0 	bl	8004992 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4colsEv>
 8009012:	4602      	mov	r2, r0
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	629a      	str	r2, [r3, #40]	; 0x28
    std::cerr << "CanVectorizeInner=    " << CanVectorizeInner << "\n";
    std::cerr << "EvalToRowMajor=       " << EvalToRowMajor << "\n";
    std::cerr << "Alignment=            " << Alignment << "\n";
    std::cerr << "Flags=                " << Flags << "\n";
#endif
  }
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	4618      	mov	r0, r3
 800901c:	370c      	adds	r7, #12
 800901e:	46bd      	mov	sp, r7
 8009020:	bd90      	pop	{r4, r7, pc}

08009022 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8009022:	b580      	push	{r7, lr}
 8009024:	b082      	sub	sp, #8
 8009026:	af00      	add	r7, sp, #0
 8009028:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800902a:	2200      	movs	r2, #0
 800902c:	2100      	movs	r1, #0
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f000 fa37 	bl	80094a2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f000 fa4d 	bl	80094d4 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSP_>
  }
 800903a:	bf00      	nop
 800903c:	3708      	adds	r7, #8
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}

08009042 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi6ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8009042:	b580      	push	{r7, lr}
 8009044:	b082      	sub	sp, #8
 8009046:	af00      	add	r7, sp, #0
 8009048:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800904a:	2106      	movs	r1, #6
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f7fe fa7c 	bl	800754a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f000 fa4e 	bl	80094f4 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi7ELi9EE3runERS9_>
  }
 8009058:	bf00      	nop
 800905a:	3708      	adds	r7, #8
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}

08009060 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEELi3ENS_10DenseShapeES7_ffEC1ERKS6_>:
  explicit product_evaluator(const XprType& xpr)
 8009060:	b580      	push	{r7, lr}
 8009062:	b082      	sub	sp, #8
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
 8009068:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f000 fa69 	bl	8009542 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1Ev>
    : m_lhs(xpr.lhs()),
 8009070:	6838      	ldr	r0, [r7, #0]
 8009072:	f000 fa4e 	bl	8009512 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE3lhsEv>
 8009076:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	601a      	str	r2, [r3, #0]
      m_rhs(xpr.rhs()),
 800907c:	6838      	ldr	r0, [r7, #0]
 800907e:	f000 fa54 	bl	800952a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE3rhsEv>
 8009082:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	605a      	str	r2, [r3, #4]
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f103 0208 	add.w	r2, r3, #8
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
      m_innerDim(xpr.lhs().cols())
 8009092:	4619      	mov	r1, r3
 8009094:	4610      	mov	r0, r2
 8009096:	f7fd fd6f 	bl	8006b78 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f103 020c 	add.w	r2, r3, #12
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	685b      	ldr	r3, [r3, #4]
      m_innerDim(xpr.lhs().cols())
 80090a4:	4619      	mov	r1, r3
 80090a6:	4610      	mov	r0, r2
 80090a8:	f7fc fe1b 	bl	8005ce2 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 80090ac:	6838      	ldr	r0, [r7, #0]
 80090ae:	f000 fa30 	bl	8009512 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE3lhsEv>
 80090b2:	4603      	mov	r3, r0
 80090b4:	4618      	mov	r0, r3
 80090b6:	f7fb f8bd 	bl	8004234 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80090ba:	4602      	mov	r2, r0
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	611a      	str	r2, [r3, #16]
  }
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	4618      	mov	r0, r3
 80090c4:	3708      	adds	r7, #8
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}

080090ca <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 80090ca:	b580      	push	{r7, lr}
 80090cc:	b082      	sub	sp, #8
 80090ce:	af00      	add	r7, sp, #0
 80090d0:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 80090d2:	2100      	movs	r1, #0
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f000 fa3f 	bl	8009558 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f000 fa5f 	bl	800959e <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSD_>
  }
 80090e0:	bf00      	nop
 80090e2:	3708      	adds	r7, #8
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}

080090e8 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEEC1Ev>:
  evaluator()
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b082      	sub	sp, #8
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
    : m_d(0,OuterStrideAtCompileTime)
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f000 fa63 	bl	80095bc <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2203      	movs	r2, #3
 80090fa:	2100      	movs	r1, #0
 80090fc:	4618      	mov	r0, r3
 80090fe:	f7fe fa05 	bl	800750c <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EEC1EPKfi>
  }
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	4618      	mov	r0, r3
 8009106:	3708      	adds	r7, #8
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}

0800910c <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>:
 800910c:	b580      	push	{r7, lr}
 800910e:	b082      	sub	sp, #8
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f000 fa5c 	bl	80095d2 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	4618      	mov	r0, r3
 800911e:	3708      	adds	r7, #8
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}

08009124 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>:
    EIGEN_STRONG_INLINE PlainObjectBase() : m_storage()
 8009124:	b580      	push	{r7, lr}
 8009126:	b082      	sub	sp, #8
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f7ff ffed 	bl	800910c <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	4618      	mov	r0, r3
 8009136:	f000 fa57 	bl	80095e8 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EEC1Ev>
    }
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	4618      	mov	r0, r3
 800913e:	3708      	adds	r7, #8
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}

08009144 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE22_check_template_paramsEv>:
    static EIGEN_STRONG_INLINE void _check_template_params()
 8009144:	b480      	push	{r7}
 8009146:	af00      	add	r7, sp, #0
    }
 8009148:	bf00      	nop
 800914a:	46bd      	mov	sp, r7
 800914c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009150:	4770      	bx	lr

08009152 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6_init2IiiEEviiPNS_8internal9enable_ifILb1ET_E4typeE>:
    EIGEN_STRONG_INLINE void _init2(Index rows, Index cols, typename internal::enable_if<Base::SizeAtCompileTime!=2,T0>::type* = 0)
 8009152:	b580      	push	{r7, lr}
 8009154:	b086      	sub	sp, #24
 8009156:	af00      	add	r7, sp, #0
 8009158:	60f8      	str	r0, [r7, #12]
 800915a:	60b9      	str	r1, [r7, #8]
 800915c:	607a      	str	r2, [r7, #4]
 800915e:	603b      	str	r3, [r7, #0]
      const bool t0_is_integer_alike = internal::is_valid_index_type<T0>::value;
 8009160:	2301      	movs	r3, #1
 8009162:	75fb      	strb	r3, [r7, #23]
      const bool t1_is_integer_alike = internal::is_valid_index_type<T1>::value;
 8009164:	2301      	movs	r3, #1
 8009166:	75bb      	strb	r3, [r7, #22]
      resize(rows,cols);
 8009168:	687a      	ldr	r2, [r7, #4]
 800916a:	68b9      	ldr	r1, [r7, #8]
 800916c:	68f8      	ldr	r0, [r7, #12]
 800916e:	f000 fa49 	bl	8009604 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii>
    }
 8009172:	bf00      	nop
 8009174:	3718      	adds	r7, #24
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}

0800917a <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEEC1ERKS5_>:
  explicit evaluator(const PlainObjectType& m)
 800917a:	b5b0      	push	{r4, r5, r7, lr}
 800917c:	b082      	sub	sp, #8
 800917e:	af00      	add	r7, sp, #0
 8009180:	6078      	str	r0, [r7, #4]
 8009182:	6039      	str	r1, [r7, #0]
    : m_d(m.data(),IsVectorAtCompileTime ? 0 : m.outerStride())
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f000 fa19 	bl	80095bc <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>
 800918a:	687c      	ldr	r4, [r7, #4]
 800918c:	6838      	ldr	r0, [r7, #0]
 800918e:	f000 fa6b 	bl	8009668 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4dataEv>
 8009192:	4605      	mov	r5, r0
 8009194:	6838      	ldr	r0, [r7, #0]
 8009196:	f000 fa74 	bl	8009682 <_ZNK5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEELi3EE11outerStrideEv>
 800919a:	4603      	mov	r3, r0
 800919c:	461a      	mov	r2, r3
 800919e:	4629      	mov	r1, r5
 80091a0:	4620      	mov	r0, r4
 80091a2:	f7fe f9b3 	bl	800750c <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EEC1EPKfi>
  }
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	4618      	mov	r0, r3
 80091aa:	3708      	adds	r7, #8
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bdb0      	pop	{r4, r5, r7, pc}

080091b0 <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEE11lazyProductINS_9TransposeIS3_EEEEKNS1_IS4_T_Li1EEERKNS0_IS9_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 80091b0:	b590      	push	{r4, r7, lr}
 80091b2:	b085      	sub	sp, #20
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	60f8      	str	r0, [r7, #12]
 80091b8:	60b9      	str	r1, [r7, #8]
 80091ba:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 80091bc:	68b8      	ldr	r0, [r7, #8]
 80091be:	f7fb fd4a 	bl	8004c56 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEE7derivedEv>
 80091c2:	4604      	mov	r4, r0
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f7fb fd51 	bl	8004c6c <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>
 80091ca:	4603      	mov	r3, r0
 80091cc:	461a      	mov	r2, r3
 80091ce:	4621      	mov	r1, r4
 80091d0:	68f8      	ldr	r0, [r7, #12]
 80091d2:	f000 fa8b 	bl	80096ec <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EEC1ERKS3_RKS5_>
}
 80091d6:	68f8      	ldr	r0, [r7, #12]
 80091d8:	3714      	adds	r7, #20
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd90      	pop	{r4, r7, pc}

080091de <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 80091de:	b580      	push	{r7, lr}
 80091e0:	b086      	sub	sp, #24
 80091e2:	af00      	add	r7, sp, #0
 80091e4:	60f8      	str	r0, [r7, #12]
 80091e6:	60b9      	str	r1, [r7, #8]
 80091e8:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 80091ee:	687a      	ldr	r2, [r7, #4]
 80091f0:	68b9      	ldr	r1, [r7, #8]
 80091f2:	6978      	ldr	r0, [r7, #20]
 80091f4:	f000 faaa 	bl	800974c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_>
}
 80091f8:	bf00      	nop
 80091fa:	3718      	adds	r7, #24
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}

08009200 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8009200:	b580      	push	{r7, lr}
 8009202:	b082      	sub	sp, #8
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8009208:	2200      	movs	r2, #0
 800920a:	2102      	movs	r1, #2
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f7fe fa6c 	bl	80076ea <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f000 faad 	bl	8009772 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSL_>
  }
 8009218:	bf00      	nop
 800921a:	3708      	adds	r7, #8
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}

08009220 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEELi4ENS_10DenseShapeESL_ffEC1ERKSK_>:
  explicit product_evaluator(const XprType& xpr)
 8009220:	b590      	push	{r4, r7, lr}
 8009222:	b083      	sub	sp, #12
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
 8009228:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f000 fac8 	bl	80097c0 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1Ev>
 8009230:	687c      	ldr	r4, [r7, #4]
    : m_lhs(xpr.lhs()),
 8009232:	6838      	ldr	r0, [r7, #0]
 8009234:	f000 faad 	bl	8009792 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE3lhsEv>
 8009238:	4603      	mov	r3, r0
      m_innerDim(xpr.lhs().cols())
 800923a:	4619      	mov	r1, r3
 800923c:	4620      	mov	r0, r4
 800923e:	f000 faca 	bl	80097d6 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_7ProductINS0_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS0_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEERKT_>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f103 040c 	add.w	r4, r3, #12
      m_rhs(xpr.rhs()),
 8009248:	6838      	ldr	r0, [r7, #0]
 800924a:	f000 faad 	bl	80097a8 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE3rhsEv>
 800924e:	4603      	mov	r3, r0
      m_innerDim(xpr.lhs().cols())
 8009250:	4619      	mov	r1, r3
 8009252:	4620      	mov	r0, r4
 8009254:	f000 fad4 	bl	8009800 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1INS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS8_INS0_IfLi1ELi3ELi1ELi1ELi3EEENS0_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS1_EEEEEERKT_>
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	3310      	adds	r3, #16
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 800925c:	687a      	ldr	r2, [r7, #4]
      m_innerDim(xpr.lhs().cols())
 800925e:	4611      	mov	r1, r2
 8009260:	4618      	mov	r0, r3
 8009262:	f7fc fd3e 	bl	8005ce2 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f103 0214 	add.w	r2, r3, #20
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	330c      	adds	r3, #12
      m_innerDim(xpr.lhs().cols())
 8009270:	4619      	mov	r1, r3
 8009272:	4610      	mov	r0, r2
 8009274:	f000 fad9 	bl	800982a <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
 8009278:	6838      	ldr	r0, [r7, #0]
 800927a:	f000 fa8a 	bl	8009792 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE3lhsEv>
 800927e:	4603      	mov	r3, r0
 8009280:	4618      	mov	r0, r3
 8009282:	f7fc f8b2 	bl	80053ea <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4colsEv>
 8009286:	4602      	mov	r2, r0
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	619a      	str	r2, [r3, #24]
  }
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	4618      	mov	r0, r3
 8009290:	370c      	adds	r7, #12
 8009292:	46bd      	mov	sp, r7
 8009294:	bd90      	pop	{r4, r7, pc}

08009296 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSS_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8009296:	b580      	push	{r7, lr}
 8009298:	b082      	sub	sp, #8
 800929a:	af00      	add	r7, sp, #0
 800929c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800929e:	2100      	movs	r1, #0
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f000 fad2 	bl	800984a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS6_INS6_IS9_S7_Li0EEESA_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f000 faf2 	bl	8009890 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSS_>
  }
 80092ac:	bf00      	nop
 80092ae:	3708      	adds	r7, #8
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}

080092b4 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80092b4:	b480      	push	{r7}
 80092b6:	b083      	sub	sp, #12
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
    }
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	4618      	mov	r0, r3
 80092c0:	370c      	adds	r7, #12
 80092c2:	46bd      	mov	sp, r7
 80092c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c8:	4770      	bx	lr

080092ca <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 80092ca:	b480      	push	{r7}
 80092cc:	b083      	sub	sp, #12
 80092ce:	af00      	add	r7, sp, #0
 80092d0:	6078      	str	r0, [r7, #4]
 80092d2:	6039      	str	r1, [r7, #0]
}
 80092d4:	bf00      	nop
 80092d6:	370c      	adds	r7, #12
 80092d8:	46bd      	mov	sp, r7
 80092da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092de:	4770      	bx	lr

080092e0 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEELi4ENS_10DenseShapeESF_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b082      	sub	sp, #8
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	330c      	adds	r3, #12
 80092ec:	4618      	mov	r0, r3
 80092ee:	f7ff f983 	bl	80085f8 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	3308      	adds	r3, #8
 80092f6:	4618      	mov	r0, r3
 80092f8:	f7fb f9b9 	bl	800466e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f000 fae5 	bl	80098cc <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEED1Ev>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	4618      	mov	r0, r3
 8009306:	3708      	adds	r7, #8
 8009308:	46bd      	mov	sp, r7
 800930a:	bd80      	pop	{r7, pc}

0800930c <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 800930c:	b580      	push	{r7, lr}
 800930e:	b082      	sub	sp, #8
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	4618      	mov	r0, r3
 8009318:	f7ff ffe2 	bl	80092e0 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEELi4ENS_10DenseShapeESF_ffED1Ev>
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	4618      	mov	r0, r3
 8009320:	3708      	adds	r7, #8
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}

08009326 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 8009326:	b580      	push	{r7, lr}
 8009328:	b090      	sub	sp, #64	; 0x40
 800932a:	af02      	add	r7, sp, #8
 800932c:	60f8      	str	r0, [r7, #12]
 800932e:	60b9      	str	r1, [r7, #8]
 8009330:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 8009332:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009336:	68b9      	ldr	r1, [r7, #8]
 8009338:	4618      	mov	r0, r3
 800933a:	f000 fab8 	bl	80098ae <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEC1ERKSE_>
  resize_if_allowed(dst, src, func);
 800933e:	687a      	ldr	r2, [r7, #4]
 8009340:	68b9      	ldr	r1, [r7, #8]
 8009342:	68f8      	ldr	r0, [r7, #12]
 8009344:	f000 faea 	bl	800991c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>
  DstEvaluatorType dstEvaluator(dst);
 8009348:	f107 0320 	add.w	r3, r7, #32
 800934c:	68f9      	ldr	r1, [r7, #12]
 800934e:	4618      	mov	r0, r3
 8009350:	f7fc fcc7 	bl	8005ce2 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 8009354:	68f8      	ldr	r0, [r7, #12]
 8009356:	f7fd fd05 	bl	8006d64 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv>
 800935a:	4603      	mov	r3, r0
 800935c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8009360:	f107 0120 	add.w	r1, r7, #32
 8009364:	f107 0010 	add.w	r0, r7, #16
 8009368:	9300      	str	r3, [sp, #0]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f000 fb04 	bl	8009978 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductIS4_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS6_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEC1ERS5_RKSH_RKSJ_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 8009370:	f107 0310 	add.w	r3, r7, #16
 8009374:	4618      	mov	r0, r3
 8009376:	f000 fb19 	bl	80099ac <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi1ELi2EE3runERSL_>
  DstEvaluatorType dstEvaluator(dst);
 800937a:	f107 0320 	add.w	r3, r7, #32
 800937e:	4618      	mov	r0, r3
 8009380:	f7fb f975 	bl	800466e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 8009384:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009388:	4618      	mov	r0, r3
 800938a:	f7ff ffbf 	bl	800930c <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEED1Ev>
}
 800938e:	bf00      	nop
 8009390:	3738      	adds	r7, #56	; 0x38
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}

08009396 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEELi3ENS_10DenseShapeESF_ffEC1ERKSE_>:
  explicit product_evaluator(const XprType& xpr)
 8009396:	b590      	push	{r4, r7, lr}
 8009398:	b083      	sub	sp, #12
 800939a:	af00      	add	r7, sp, #0
 800939c:	6078      	str	r0, [r7, #4]
 800939e:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f000 fb25 	bl	80099f0 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1Ev>
 80093a6:	687c      	ldr	r4, [r7, #4]
    : m_lhs(xpr.lhs()),
 80093a8:	6838      	ldr	r0, [r7, #0]
 80093aa:	f000 fb0a 	bl	80099c2 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE3lhsEv>
 80093ae:	4603      	mov	r3, r0
      m_innerDim(xpr.lhs().cols())
 80093b0:	4619      	mov	r1, r3
 80093b2:	4620      	mov	r0, r4
 80093b4:	f000 fb27 	bl	8009a06 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS_7ProductINS0_IfLi3ELi1ELi0ELi3ELi1EEENS0_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEERKT_>
      m_rhs(xpr.rhs()),
 80093b8:	6838      	ldr	r0, [r7, #0]
 80093ba:	f000 fb0d 	bl	80099d8 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE3rhsEv>
 80093be:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	625a      	str	r2, [r3, #36]	; 0x24
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	3328      	adds	r3, #40	; 0x28
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 80093c8:	687a      	ldr	r2, [r7, #4]
      m_innerDim(xpr.lhs().cols())
 80093ca:	4611      	mov	r1, r2
 80093cc:	4618      	mov	r0, r3
 80093ce:	f7fd fbd3 	bl	8006b78 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f103 022c 	add.w	r2, r3, #44	; 0x2c
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      m_innerDim(xpr.lhs().cols())
 80093dc:	4619      	mov	r1, r3
 80093de:	4610      	mov	r0, r2
 80093e0:	f7fd fbca 	bl	8006b78 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 80093e4:	6838      	ldr	r0, [r7, #0]
 80093e6:	f000 faec 	bl	80099c2 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE3lhsEv>
 80093ea:	4603      	mov	r3, r0
 80093ec:	4618      	mov	r0, r3
 80093ee:	f7fc fb58 	bl	8005aa2 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE4colsEv>
 80093f2:	4602      	mov	r2, r0
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	631a      	str	r2, [r3, #48]	; 0x30
  }
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	4618      	mov	r0, r3
 80093fc:	370c      	adds	r7, #12
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd90      	pop	{r4, r7, pc}

08009402 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8009402:	b580      	push	{r7, lr}
 8009404:	b082      	sub	sp, #8
 8009406:	af00      	add	r7, sp, #0
 8009408:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800940a:	2200      	movs	r2, #0
 800940c:	2100      	movs	r1, #0
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f000 fb0e 	bl	8009a30 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f000 fb24 	bl	8009a62 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSL_>
  }
 800941a:	bf00      	nop
 800941c:	3708      	adds	r7, #8
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}

08009422 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8009422:	b480      	push	{r7}
 8009424:	b083      	sub	sp, #12
 8009426:	af00      	add	r7, sp, #0
 8009428:	6078      	str	r0, [r7, #4]
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	4618      	mov	r0, r3
 800942e:	370c      	adds	r7, #12
 8009430:	46bd      	mov	sp, r7
 8009432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009436:	4770      	bx	lr

08009438 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8009438:	b480      	push	{r7}
 800943a:	b083      	sub	sp, #12
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	3310      	adds	r3, #16
 8009444:	4618      	mov	r0, r3
 8009446:	370c      	adds	r7, #12
 8009448:	46bd      	mov	sp, r7
 800944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944e:	4770      	bx	lr

08009450 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8009450:	b480      	push	{r7}
 8009452:	b083      	sub	sp, #12
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	4618      	mov	r0, r3
 800945c:	370c      	adds	r7, #12
 800945e:	46bd      	mov	sp, r7
 8009460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009464:	4770      	bx	lr

08009466 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC1ERKSD_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8009466:	b580      	push	{r7, lr}
 8009468:	b082      	sub	sp, #8
 800946a:	af00      	add	r7, sp, #0
 800946c:	6078      	str	r0, [r7, #4]
 800946e:	6039      	str	r1, [r7, #0]
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6839      	ldr	r1, [r7, #0]
 8009474:	4618      	mov	r0, r3
 8009476:	f000 fb04 	bl	8009a82 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffEC1ERKSD_>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	4618      	mov	r0, r3
 800947e:	3708      	adds	r7, #8
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}

08009484 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKS5_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 8009484:	b580      	push	{r7, lr}
 8009486:	b082      	sub	sp, #8
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
 800948c:	6039      	str	r1, [r7, #0]
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6839      	ldr	r1, [r7, #0]
 8009492:	4618      	mov	r0, r3
 8009494:	f000 fb07 	bl	8009aa6 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedEfEC1ERKS5_>
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	4618      	mov	r0, r3
 800949c:	3708      	adds	r7, #8
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}

080094a2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeffByOuterInner(Index outer, Index inner)
 80094a2:	b580      	push	{r7, lr}
 80094a4:	b086      	sub	sp, #24
 80094a6:	af00      	add	r7, sp, #0
 80094a8:	60f8      	str	r0, [r7, #12]
 80094aa:	60b9      	str	r1, [r7, #8]
 80094ac:	607a      	str	r2, [r7, #4]
    Index row = rowIndexByOuterInner(outer, inner);
 80094ae:	6879      	ldr	r1, [r7, #4]
 80094b0:	68b8      	ldr	r0, [r7, #8]
 80094b2:	f000 fb0e 	bl	8009ad2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>
 80094b6:	6178      	str	r0, [r7, #20]
    Index col = colIndexByOuterInner(outer, inner);
 80094b8:	6879      	ldr	r1, [r7, #4]
 80094ba:	68b8      	ldr	r0, [r7, #8]
 80094bc:	f000 fb15 	bl	8009aea <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>
 80094c0:	6138      	str	r0, [r7, #16]
    assignCoeff(row, col);
 80094c2:	693a      	ldr	r2, [r7, #16]
 80094c4:	6979      	ldr	r1, [r7, #20]
 80094c6:	68f8      	ldr	r0, [r7, #12]
 80094c8:	f000 fb1b 	bl	8009b02 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>
  }
 80094cc:	bf00      	nop
 80094ce:	3718      	adds	r7, #24
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}

080094d4 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b082      	sub	sp, #8
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 80094dc:	2201      	movs	r2, #1
 80094de:	2100      	movs	r1, #0
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f7ff ffde 	bl	80094a2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f000 fb31 	bl	8009b4e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSP_>
  }
 80094ec:	bf00      	nop
 80094ee:	3708      	adds	r7, #8
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd80      	pop	{r7, pc}

080094f4 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi7ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b082      	sub	sp, #8
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 80094fc:	2107      	movs	r1, #7
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f7fe f823 	bl	800754a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f000 fb32 	bl	8009b6e <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi8ELi9EE3runERS9_>
  }
 800950a:	bf00      	nop
 800950c:	3708      	adds	r7, #8
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}

08009512 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8009512:	b480      	push	{r7}
 8009514:	b083      	sub	sp, #12
 8009516:	af00      	add	r7, sp, #0
 8009518:	6078      	str	r0, [r7, #4]
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	4618      	mov	r0, r3
 8009520:	370c      	adds	r7, #12
 8009522:	46bd      	mov	sp, r7
 8009524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009528:	4770      	bx	lr

0800952a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800952a:	b480      	push	{r7}
 800952c:	b083      	sub	sp, #12
 800952e:	af00      	add	r7, sp, #0
 8009530:	6078      	str	r0, [r7, #4]
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	685b      	ldr	r3, [r3, #4]
 8009536:	4618      	mov	r0, r3
 8009538:	370c      	adds	r7, #12
 800953a:	46bd      	mov	sp, r7
 800953c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009540:	4770      	bx	lr

08009542 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8009542:	b480      	push	{r7}
 8009544:	b083      	sub	sp, #12
 8009546:	af00      	add	r7, sp, #0
 8009548:	6078      	str	r0, [r7, #4]
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	4618      	mov	r0, r3
 800954e:	370c      	adds	r7, #12
 8009550:	46bd      	mov	sp, r7
 8009552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009556:	4770      	bx	lr

08009558 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 8009558:	b5b0      	push	{r4, r5, r7, lr}
 800955a:	b084      	sub	sp, #16
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	689c      	ldr	r4, [r3, #8]
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	6839      	ldr	r1, [r7, #0]
 800956c:	4618      	mov	r0, r3
 800956e:	f7fe fa52 	bl	8007a16 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi>
 8009572:	4605      	mov	r5, r0
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	685b      	ldr	r3, [r3, #4]
 8009578:	6839      	ldr	r1, [r7, #0]
 800957a:	4618      	mov	r0, r3
 800957c:	f000 fb06 	bl	8009b8c <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEELi3ENS_10DenseShapeES7_ffE5coeffEi>
 8009580:	eef0 7a40 	vmov.f32	s15, s0
 8009584:	edc7 7a03 	vstr	s15, [r7, #12]
 8009588:	f107 030c 	add.w	r3, r7, #12
 800958c:	461a      	mov	r2, r3
 800958e:	4629      	mov	r1, r5
 8009590:	4620      	mov	r0, r4
 8009592:	f7fe f9f9 	bl	8007988 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 8009596:	bf00      	nop
 8009598:	3710      	adds	r7, #16
 800959a:	46bd      	mov	sp, r7
 800959c:	bdb0      	pop	{r4, r5, r7, pc}

0800959e <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800959e:	b580      	push	{r7, lr}
 80095a0:	b082      	sub	sp, #8
 80095a2:	af00      	add	r7, sp, #0
 80095a4:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 80095a6:	2101      	movs	r1, #1
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f7ff ffd5 	bl	8009558 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f000 fb25 	bl	8009bfe <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSD_>
  }
 80095b4:	bf00      	nop
 80095b6:	3708      	adds	r7, #8
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}

080095bc <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>:
 80095bc:	b480      	push	{r7}
 80095be:	b083      	sub	sp, #12
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	4618      	mov	r0, r3
 80095c8:	370c      	adds	r7, #12
 80095ca:	46bd      	mov	sp, r7
 80095cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d0:	4770      	bx	lr

080095d2 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80095d2:	b480      	push	{r7}
 80095d4:	b083      	sub	sp, #12
 80095d6:	af00      	add	r7, sp, #0
 80095d8:	6078      	str	r0, [r7, #4]
    }
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	4618      	mov	r0, r3
 80095de:	370c      	adds	r7, #12
 80095e0:	46bd      	mov	sp, r7
 80095e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e6:	4770      	bx	lr

080095e8 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EEC1Ev>:
    EIGEN_DEVICE_FUNC DenseStorage() {
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b082      	sub	sp, #8
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	4618      	mov	r0, r3
 80095f4:	f000 fb12 	bl	8009c1c <_ZN5Eigen8internal11plain_arrayIfLi9ELi1ELi0EEC1Ev>
    }
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	4618      	mov	r0, r3
 80095fc:	3708      	adds	r7, #8
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}
	...

08009604 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii>:
    EIGEN_STRONG_INLINE void resize(Index rows, Index cols)
 8009604:	b580      	push	{r7, lr}
 8009606:	b086      	sub	sp, #24
 8009608:	af00      	add	r7, sp, #0
 800960a:	60f8      	str	r0, [r7, #12]
 800960c:	60b9      	str	r1, [r7, #8]
 800960e:	607a      	str	r2, [r7, #4]
      eigen_assert(   EIGEN_IMPLIES(RowsAtCompileTime!=Dynamic,rows==RowsAtCompileTime)
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	2b03      	cmp	r3, #3
 8009614:	d108      	bne.n	8009628 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii+0x24>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2b03      	cmp	r3, #3
 800961a:	d105      	bne.n	8009628 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii+0x24>
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	2b00      	cmp	r3, #0
 8009620:	db02      	blt.n	8009628 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii+0x24>
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2b00      	cmp	r3, #0
 8009626:	da06      	bge.n	8009636 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii+0x32>
 8009628:	4b0c      	ldr	r3, [pc, #48]	; (800965c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii+0x58>)
 800962a:	4a0d      	ldr	r2, [pc, #52]	; (8009660 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii+0x5c>)
 800962c:	f240 1111 	movw	r1, #273	; 0x111
 8009630:	480c      	ldr	r0, [pc, #48]	; (8009664 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii+0x60>)
 8009632:	f013 fcff 	bl	801d034 <__assert_func>
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	617b      	str	r3, [r7, #20]
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	613b      	str	r3, [r7, #16]
  }
 800963e:	bf00      	nop
        m_storage.resize(rows*cols, rows, cols);
 8009640:	68f8      	ldr	r0, [r7, #12]
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	687a      	ldr	r2, [r7, #4]
 8009646:	fb02 f103 	mul.w	r1, r2, r3
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	68ba      	ldr	r2, [r7, #8]
 800964e:	f000 faf0 	bl	8009c32 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE6resizeEiii>
    }
 8009652:	bf00      	nop
 8009654:	3718      	adds	r7, #24
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}
 800965a:	bf00      	nop
 800965c:	0802192c 	.word	0x0802192c
 8009660:	080234c4 	.word	0x080234c4
 8009664:	08021b48 	.word	0x08021b48

08009668 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4dataEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar *data() const
 8009668:	b580      	push	{r7, lr}
 800966a:	b082      	sub	sp, #8
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
    { return m_storage.data(); }
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	4618      	mov	r0, r3
 8009674:	f000 faea 	bl	8009c4c <_ZNK5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE4dataEv>
 8009678:	4603      	mov	r3, r0
 800967a:	4618      	mov	r0, r3
 800967c:	3708      	adds	r7, #8
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}

08009682 <_ZNK5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEELi3EE11outerStrideEv>:
    inline Index outerStride() const EIGEN_NOEXCEPT
 8009682:	b580      	push	{r7, lr}
 8009684:	b082      	sub	sp, #8
 8009686:	af00      	add	r7, sp, #0
 8009688:	6078      	str	r0, [r7, #4]
      return derived().outerStride();
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f000 fae9 	bl	8009c62 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE7derivedEv>
 8009690:	4603      	mov	r3, r0
 8009692:	4618      	mov	r0, r3
 8009694:	f000 faf0 	bl	8009c78 <_ZNK5Eigen6MatrixIfLi3ELi3ELi1ELi3ELi3EE11outerStrideEv>
 8009698:	4603      	mov	r3, r0
    }
 800969a:	4618      	mov	r0, r3
 800969c:	3708      	adds	r7, #8
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}

080096a2 <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi1EEEEC1Ev>:
 80096a2:	b580      	push	{r7, lr}
 80096a4:	b082      	sub	sp, #8
 80096a6:	af00      	add	r7, sp, #0
 80096a8:	6078      	str	r0, [r7, #4]
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f000 faf0 	bl	8009c90 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi1EEEEC1Ev>
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	4618      	mov	r0, r3
 80096b4:	3708      	adds	r7, #8
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}

080096ba <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1ELi3EEC1Ev>:
class dense_product_base
 80096ba:	b580      	push	{r7, lr}
 80096bc:	b082      	sub	sp, #8
 80096be:	af00      	add	r7, sp, #0
 80096c0:	6078      	str	r0, [r7, #4]
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f7ff ffed 	bl	80096a2 <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi1EEEEC1Ev>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	4618      	mov	r0, r3
 80096cc:	3708      	adds	r7, #8
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}

080096d2 <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 80096d2:	b580      	push	{r7, lr}
 80096d4:	b082      	sub	sp, #8
 80096d6:	af00      	add	r7, sp, #0
 80096d8:	6078      	str	r0, [r7, #4]
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f7ff ffed 	bl	80096ba <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1ELi3EEC1Ev>
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	4618      	mov	r0, r3
 80096e4:	3708      	adds	r7, #8
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}
	...

080096ec <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EEC1ERKS3_RKS5_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 80096ec:	b590      	push	{r4, r7, lr}
 80096ee:	b085      	sub	sp, #20
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	60f8      	str	r0, [r7, #12]
 80096f4:	60b9      	str	r1, [r7, #8]
 80096f6:	607a      	str	r2, [r7, #4]
 80096f8:	68f8      	ldr	r0, [r7, #12]
 80096fa:	f7ff ffea 	bl	80096d2 <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi1ENS_5DenseEEC1Ev>
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	68ba      	ldr	r2, [r7, #8]
 8009702:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009706:	e883 0003 	stmia.w	r3, {r0, r1}
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	3308      	adds	r3, #8
 800970e:	687a      	ldr	r2, [r7, #4]
 8009710:	6812      	ldr	r2, [r2, #0]
 8009712:	601a      	str	r2, [r3, #0]
      eigen_assert(lhs.cols() == rhs.rows()
 8009714:	68b8      	ldr	r0, [r7, #8]
 8009716:	f7fb fad8 	bl	8004cca <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4colsEv>
 800971a:	4604      	mov	r4, r0
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f7fb fae2 	bl	8004ce6 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8009722:	4603      	mov	r3, r0
 8009724:	429c      	cmp	r4, r3
 8009726:	d005      	beq.n	8009734 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EEC1ERKS3_RKS5_+0x48>
 8009728:	4b05      	ldr	r3, [pc, #20]	; (8009740 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EEC1ERKS3_RKS5_+0x54>)
 800972a:	4a06      	ldr	r2, [pc, #24]	; (8009744 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EEC1ERKS3_RKS5_+0x58>)
 800972c:	2160      	movs	r1, #96	; 0x60
 800972e:	4806      	ldr	r0, [pc, #24]	; (8009748 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EEC1ERKS3_RKS5_+0x5c>)
 8009730:	f013 fc80 	bl	801d034 <__assert_func>
 8009734:	bf00      	nop
    }
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	4618      	mov	r0, r3
 800973a:	3714      	adds	r7, #20
 800973c:	46bd      	mov	sp, r7
 800973e:	bd90      	pop	{r4, r7, pc}
 8009740:	0801f15c 	.word	0x0801f15c
 8009744:	08023558 	.word	0x08023558
 8009748:	0801f4ac 	.word	0x0801f4ac

0800974c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 800974c:	b580      	push	{r7, lr}
 800974e:	b084      	sub	sp, #16
 8009750:	af00      	add	r7, sp, #0
 8009752:	60f8      	str	r0, [r7, #12]
 8009754:	60b9      	str	r1, [r7, #8]
 8009756:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 8009758:	68b9      	ldr	r1, [r7, #8]
 800975a:	68f8      	ldr	r0, [r7, #12]
 800975c:	f000 fab9 	bl	8009cd2 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 8009760:	687a      	ldr	r2, [r7, #4]
 8009762:	68b9      	ldr	r1, [r7, #8]
 8009764:	68f8      	ldr	r0, [r7, #12]
 8009766:	f000 fb14 	bl	8009d92 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800976a:	bf00      	nop
 800976c:	3710      	adds	r7, #16
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}

08009772 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8009772:	b580      	push	{r7, lr}
 8009774:	b082      	sub	sp, #8
 8009776:	af00      	add	r7, sp, #0
 8009778:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800977a:	2201      	movs	r2, #1
 800977c:	2102      	movs	r1, #2
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f7fd ffb3 	bl	80076ea <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f000 fb3c 	bl	8009e02 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSL_>
  }
 800978a:	bf00      	nop
 800978c:	3708      	adds	r7, #8
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}

08009792 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8009792:	b480      	push	{r7}
 8009794:	b083      	sub	sp, #12
 8009796:	af00      	add	r7, sp, #0
 8009798:	6078      	str	r0, [r7, #4]
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	4618      	mov	r0, r3
 800979e:	370c      	adds	r7, #12
 80097a0:	46bd      	mov	sp, r7
 80097a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a6:	4770      	bx	lr

080097a8 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 80097a8:	b480      	push	{r7}
 80097aa:	b083      	sub	sp, #12
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	3308      	adds	r3, #8
 80097b4:	4618      	mov	r0, r3
 80097b6:	370c      	adds	r7, #12
 80097b8:	46bd      	mov	sp, r7
 80097ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097be:	4770      	bx	lr

080097c0 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1Ev>:
 80097c0:	b480      	push	{r7}
 80097c2:	b083      	sub	sp, #12
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	4618      	mov	r0, r3
 80097cc:	370c      	adds	r7, #12
 80097ce:	46bd      	mov	sp, r7
 80097d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d4:	4770      	bx	lr

080097d6 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_7ProductINS0_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS0_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEERKT_>:
    explicit Matrix(const T& x)
 80097d6:	b580      	push	{r7, lr}
 80097d8:	b082      	sub	sp, #8
 80097da:	af00      	add	r7, sp, #0
 80097dc:	6078      	str	r0, [r7, #4]
 80097de:	6039      	str	r1, [r7, #0]
    {
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	4618      	mov	r0, r3
 80097e4:	f7fa fc75 	bl	80040d2 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
      Base::_check_template_params();
 80097e8:	f7fa fc83 	bl	80040f2 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	6839      	ldr	r1, [r7, #0]
 80097f0:	4618      	mov	r0, r3
 80097f2:	f000 fb16 	bl	8009e22 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEESA_EEvRKNS_9DenseBaseIT0_EE>
    }
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	4618      	mov	r0, r3
 80097fa:	3708      	adds	r7, #8
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}

08009800 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1INS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS8_INS0_IfLi1ELi3ELi1ELi1ELi3EEENS0_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS1_EEEEEERKT_>:
    explicit Matrix(const T& x)
 8009800:	b580      	push	{r7, lr}
 8009802:	b082      	sub	sp, #8
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
 8009808:	6039      	str	r1, [r7, #0]
    {
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	4618      	mov	r0, r3
 800980e:	f7fa fc3d 	bl	800408c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
      Base::_check_template_params();
 8009812:	f7fa fc4b 	bl	80040ac <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6839      	ldr	r1, [r7, #0]
 800981a:	4618      	mov	r0, r3
 800981c:	f000 fb0e 	bl	8009e3c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init1INS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS2_EEEESK_EEvRKNS_9DenseBaseIT0_EE>
    }
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	4618      	mov	r0, r3
 8009824:	3708      	adds	r7, #8
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}

0800982a <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>:
  explicit evaluator(const XprType& m)
 800982a:	b580      	push	{r7, lr}
 800982c:	b082      	sub	sp, #8
 800982e:	af00      	add	r7, sp, #0
 8009830:	6078      	str	r0, [r7, #4]
 8009832:	6039      	str	r1, [r7, #0]
    : evaluator<PlainObjectBase<XprType> >(m)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	683a      	ldr	r2, [r7, #0]
 8009838:	4611      	mov	r1, r2
 800983a:	4618      	mov	r0, r3
 800983c:	f000 fb0b 	bl	8009e56 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKS5_>
  { }
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	4618      	mov	r0, r3
 8009844:	3708      	adds	r7, #8
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}

0800984a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS6_INS6_IS9_S7_Li0EEESA_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 800984a:	b5b0      	push	{r4, r5, r7, lr}
 800984c:	b084      	sub	sp, #16
 800984e:	af00      	add	r7, sp, #0
 8009850:	6078      	str	r0, [r7, #4]
 8009852:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	689c      	ldr	r4, [r3, #8]
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	6839      	ldr	r1, [r7, #0]
 800985e:	4618      	mov	r0, r3
 8009860:	f7fe f8d9 	bl	8007a16 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi>
 8009864:	4605      	mov	r5, r0
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	685b      	ldr	r3, [r3, #4]
 800986a:	6839      	ldr	r1, [r7, #0]
 800986c:	4618      	mov	r0, r3
 800986e:	f000 fb09 	bl	8009e84 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEELi4ENS_10DenseShapeESL_ffE5coeffEi>
 8009872:	eef0 7a40 	vmov.f32	s15, s0
 8009876:	edc7 7a03 	vstr	s15, [r7, #12]
 800987a:	f107 030c 	add.w	r3, r7, #12
 800987e:	461a      	mov	r2, r3
 8009880:	4629      	mov	r1, r5
 8009882:	4620      	mov	r0, r4
 8009884:	f7fe f880 	bl	8007988 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 8009888:	bf00      	nop
 800988a:	3710      	adds	r7, #16
 800988c:	46bd      	mov	sp, r7
 800988e:	bdb0      	pop	{r4, r5, r7, pc}

08009890 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSS_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8009890:	b580      	push	{r7, lr}
 8009892:	b082      	sub	sp, #8
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8009898:	2101      	movs	r1, #1
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f7ff ffd5 	bl	800984a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS6_INS6_IS9_S7_Li0EEESA_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	f000 fb28 	bl	8009ef6 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSS_>
  }
 80098a6:	bf00      	nop
 80098a8:	3708      	adds	r7, #8
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}

080098ae <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEC1ERKSE_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 80098ae:	b580      	push	{r7, lr}
 80098b0:	b082      	sub	sp, #8
 80098b2:	af00      	add	r7, sp, #0
 80098b4:	6078      	str	r0, [r7, #4]
 80098b6:	6039      	str	r1, [r7, #0]
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	6839      	ldr	r1, [r7, #0]
 80098bc:	4618      	mov	r0, r3
 80098be:	f000 fb29 	bl	8009f14 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEELi4ENS_10DenseShapeESF_ffEC1ERKSE_>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	4618      	mov	r0, r3
 80098c6:	3708      	adds	r7, #8
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}

080098cc <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 80098cc:	b480      	push	{r7}
 80098ce:	b083      	sub	sp, #12
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	4618      	mov	r0, r3
 80098d8:	370c      	adds	r7, #12
 80098da:	46bd      	mov	sp, r7
 80098dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e0:	4770      	bx	lr

080098e2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 80098e2:	b580      	push	{r7, lr}
 80098e4:	b082      	sub	sp, #8
 80098e6:	af00      	add	r7, sp, #0
 80098e8:	6078      	str	r0, [r7, #4]
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	4618      	mov	r0, r3
 80098f0:	f7fa fd51 	bl	8004396 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80098f4:	4603      	mov	r3, r0
 80098f6:	4618      	mov	r0, r3
 80098f8:	3708      	adds	r7, #8
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}

080098fe <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 80098fe:	b580      	push	{r7, lr}
 8009900:	b082      	sub	sp, #8
 8009902:	af00      	add	r7, sp, #0
 8009904:	6078      	str	r0, [r7, #4]
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	3304      	adds	r3, #4
 800990a:	4618      	mov	r0, r3
 800990c:	f7fc fc05 	bl	800611a <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE4colsEv>
 8009910:	4603      	mov	r3, r0
 8009912:	4618      	mov	r0, r3
 8009914:	3708      	adds	r7, #8
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}
	...

0800991c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const Functor &/*func*/)
 800991c:	b590      	push	{r4, r7, lr}
 800991e:	b085      	sub	sp, #20
 8009920:	af00      	add	r7, sp, #0
 8009922:	60f8      	str	r0, [r7, #12]
 8009924:	60b9      	str	r1, [r7, #8]
 8009926:	607a      	str	r2, [r7, #4]
  eigen_assert(dst.rows() == src.rows() && dst.cols() == src.cols());
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	4618      	mov	r0, r3
 800992c:	f7fa fd33 	bl	8004396 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8009930:	4604      	mov	r4, r0
 8009932:	68b8      	ldr	r0, [r7, #8]
 8009934:	f7ff ffd5 	bl	80098e2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE4rowsEv>
 8009938:	4603      	mov	r3, r0
 800993a:	429c      	cmp	r4, r3
 800993c:	d10a      	bne.n	8009954 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_+0x38>
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	4618      	mov	r0, r3
 8009942:	f7fa fd1d 	bl	8004380 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8009946:	4604      	mov	r4, r0
 8009948:	68b8      	ldr	r0, [r7, #8]
 800994a:	f7ff ffd8 	bl	80098fe <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE4colsEv>
 800994e:	4603      	mov	r3, r0
 8009950:	429c      	cmp	r4, r3
 8009952:	d006      	beq.n	8009962 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_+0x46>
 8009954:	4b05      	ldr	r3, [pc, #20]	; (800996c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_+0x50>)
 8009956:	4a06      	ldr	r2, [pc, #24]	; (8009970 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_+0x54>)
 8009958:	f240 21f2 	movw	r1, #754	; 0x2f2
 800995c:	4805      	ldr	r0, [pc, #20]	; (8009974 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_+0x58>)
 800995e:	f013 fb69 	bl	801d034 <__assert_func>
}
 8009962:	bf00      	nop
 8009964:	3714      	adds	r7, #20
 8009966:	46bd      	mov	sp, r7
 8009968:	bd90      	pop	{r4, r7, pc}
 800996a:	bf00      	nop
 800996c:	08021c30 	.word	0x08021c30
 8009970:	08023704 	.word	0x08023704
 8009974:	08021628 	.word	0x08021628

08009978 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductIS4_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS6_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEC1ERS5_RKSH_RKSJ_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8009978:	b480      	push	{r7}
 800997a:	b085      	sub	sp, #20
 800997c:	af00      	add	r7, sp, #0
 800997e:	60f8      	str	r0, [r7, #12]
 8009980:	60b9      	str	r1, [r7, #8]
 8009982:	607a      	str	r2, [r7, #4]
 8009984:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	68ba      	ldr	r2, [r7, #8]
 800998a:	601a      	str	r2, [r3, #0]
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	687a      	ldr	r2, [r7, #4]
 8009990:	605a      	str	r2, [r3, #4]
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	683a      	ldr	r2, [r7, #0]
 8009996:	609a      	str	r2, [r3, #8]
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	69ba      	ldr	r2, [r7, #24]
 800999c:	60da      	str	r2, [r3, #12]
  }
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	4618      	mov	r0, r3
 80099a2:	3714      	adds	r7, #20
 80099a4:	46bd      	mov	sp, r7
 80099a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099aa:	4770      	bx	lr

080099ac <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi1ELi2EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b082      	sub	sp, #8
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f000 fae6 	bl	8009f86 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi0ELi3EE3runERSL_>
  }
 80099ba:	bf00      	nop
 80099bc:	3708      	adds	r7, #8
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}

080099c2 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 80099c2:	b480      	push	{r7}
 80099c4:	b083      	sub	sp, #12
 80099c6:	af00      	add	r7, sp, #0
 80099c8:	6078      	str	r0, [r7, #4]
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	4618      	mov	r0, r3
 80099ce:	370c      	adds	r7, #12
 80099d0:	46bd      	mov	sp, r7
 80099d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d6:	4770      	bx	lr

080099d8 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 80099d8:	b480      	push	{r7}
 80099da:	b083      	sub	sp, #12
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	691b      	ldr	r3, [r3, #16]
 80099e4:	4618      	mov	r0, r3
 80099e6:	370c      	adds	r7, #12
 80099e8:	46bd      	mov	sp, r7
 80099ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ee:	4770      	bx	lr

080099f0 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 80099f0:	b480      	push	{r7}
 80099f2:	b083      	sub	sp, #12
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	4618      	mov	r0, r3
 80099fc:	370c      	adds	r7, #12
 80099fe:	46bd      	mov	sp, r7
 8009a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a04:	4770      	bx	lr

08009a06 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS_7ProductINS0_IfLi3ELi1ELi0ELi3ELi1EEENS0_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEERKT_>:
    explicit Matrix(const T& x)
 8009a06:	b580      	push	{r7, lr}
 8009a08:	b082      	sub	sp, #8
 8009a0a:	af00      	add	r7, sp, #0
 8009a0c:	6078      	str	r0, [r7, #4]
 8009a0e:	6039      	str	r1, [r7, #0]
    {
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	4618      	mov	r0, r3
 8009a14:	f7fa fb17 	bl	8004046 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
      Base::_check_template_params();
 8009a18:	f7fa fb25 	bl	8004066 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	6839      	ldr	r1, [r7, #0]
 8009a20:	4618      	mov	r0, r3
 8009a22:	f000 fabf 	bl	8009fa4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEESF_EEvRKNS_9DenseBaseIT0_EE>
    }
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	4618      	mov	r0, r3
 8009a2a:	3708      	adds	r7, #8
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bd80      	pop	{r7, pc}

08009a30 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeffByOuterInner(Index outer, Index inner)
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b086      	sub	sp, #24
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	60f8      	str	r0, [r7, #12]
 8009a38:	60b9      	str	r1, [r7, #8]
 8009a3a:	607a      	str	r2, [r7, #4]
    Index row = rowIndexByOuterInner(outer, inner);
 8009a3c:	6879      	ldr	r1, [r7, #4]
 8009a3e:	68b8      	ldr	r0, [r7, #8]
 8009a40:	f000 fabd 	bl	8009fbe <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>
 8009a44:	6178      	str	r0, [r7, #20]
    Index col = colIndexByOuterInner(outer, inner);
 8009a46:	6879      	ldr	r1, [r7, #4]
 8009a48:	68b8      	ldr	r0, [r7, #8]
 8009a4a:	f000 fac4 	bl	8009fd6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>
 8009a4e:	6138      	str	r0, [r7, #16]
    assignCoeff(row, col);
 8009a50:	693a      	ldr	r2, [r7, #16]
 8009a52:	6979      	ldr	r1, [r7, #20]
 8009a54:	68f8      	ldr	r0, [r7, #12]
 8009a56:	f000 faca 	bl	8009fee <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>
  }
 8009a5a:	bf00      	nop
 8009a5c:	3718      	adds	r7, #24
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}

08009a62 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8009a62:	b580      	push	{r7, lr}
 8009a64:	b082      	sub	sp, #8
 8009a66:	af00      	add	r7, sp, #0
 8009a68:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8009a6a:	2201      	movs	r2, #1
 8009a6c:	2100      	movs	r1, #0
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f7ff ffde 	bl	8009a30 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f000 fae0 	bl	800a03a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSL_>
  }
 8009a7a:	bf00      	nop
 8009a7c:	3708      	adds	r7, #8
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}

08009a82 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffEC1ERKSD_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 8009a82:	b580      	push	{r7, lr}
 8009a84:	b082      	sub	sp, #8
 8009a86:	af00      	add	r7, sp, #0
 8009a88:	6078      	str	r0, [r7, #4]
 8009a8a:	6039      	str	r1, [r7, #0]
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f000 fae4 	bl	800a05a <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC1Ev>
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6839      	ldr	r1, [r7, #0]
 8009a96:	4618      	mov	r0, r3
 8009a98:	f000 faea 	bl	800a070 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE4DataC1ERKSD_>
  }
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	3708      	adds	r7, #8
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bd80      	pop	{r7, pc}

08009aa6 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedEfEC1ERKS5_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 8009aa6:	b590      	push	{r4, r7, lr}
 8009aa8:	b083      	sub	sp, #12
 8009aaa:	af00      	add	r7, sp, #0
 8009aac:	6078      	str	r0, [r7, #4]
 8009aae:	6039      	str	r1, [r7, #0]
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f000 fb11 	bl	800a0d8 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 8009ab6:	687c      	ldr	r4, [r7, #4]
 8009ab8:	6838      	ldr	r0, [r7, #0]
 8009aba:	f000 fb01 	bl	800a0c0 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE16nestedExpressionEv>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	4619      	mov	r1, r3
 8009ac2:	4620      	mov	r0, r4
 8009ac4:	f7fc f90d 	bl	8005ce2 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	4618      	mov	r0, r3
 8009acc:	370c      	adds	r7, #12
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd90      	pop	{r4, r7, pc}

08009ad2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index rowIndexByOuterInner(Index outer, Index inner)
 8009ad2:	b480      	push	{r7}
 8009ad4:	b083      	sub	sp, #12
 8009ad6:	af00      	add	r7, sp, #0
 8009ad8:	6078      	str	r0, [r7, #4]
 8009ada:	6039      	str	r1, [r7, #0]
      : inner;
 8009adc:	683b      	ldr	r3, [r7, #0]
  }
 8009ade:	4618      	mov	r0, r3
 8009ae0:	370c      	adds	r7, #12
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae8:	4770      	bx	lr

08009aea <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index colIndexByOuterInner(Index outer, Index inner)
 8009aea:	b480      	push	{r7}
 8009aec:	b083      	sub	sp, #12
 8009aee:	af00      	add	r7, sp, #0
 8009af0:	6078      	str	r0, [r7, #4]
 8009af2:	6039      	str	r1, [r7, #0]
      : outer;
 8009af4:	687b      	ldr	r3, [r7, #4]
  }
 8009af6:	4618      	mov	r0, r3
 8009af8:	370c      	adds	r7, #12
 8009afa:	46bd      	mov	sp, r7
 8009afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b00:	4770      	bx	lr

08009b02 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index row, Index col)
 8009b02:	b5b0      	push	{r4, r5, r7, lr}
 8009b04:	b086      	sub	sp, #24
 8009b06:	af00      	add	r7, sp, #0
 8009b08:	60f8      	str	r0, [r7, #12]
 8009b0a:	60b9      	str	r1, [r7, #8]
 8009b0c:	607a      	str	r2, [r7, #4]
    m_functor.assignCoeff(m_dst.coeffRef(row,col), m_src.coeff(row,col));
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	689c      	ldr	r4, [r3, #8]
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	687a      	ldr	r2, [r7, #4]
 8009b18:	68b9      	ldr	r1, [r7, #8]
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	f7fe f9c4 	bl	8007ea8 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEii>
 8009b20:	4605      	mov	r5, r0
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	685b      	ldr	r3, [r3, #4]
 8009b26:	687a      	ldr	r2, [r7, #4]
 8009b28:	68b9      	ldr	r1, [r7, #8]
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f000 fadf 	bl	800a0ee <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEELi4ENS_10DenseShapeESI_ffE5coeffEii>
 8009b30:	eef0 7a40 	vmov.f32	s15, s0
 8009b34:	edc7 7a05 	vstr	s15, [r7, #20]
 8009b38:	f107 0314 	add.w	r3, r7, #20
 8009b3c:	461a      	mov	r2, r3
 8009b3e:	4629      	mov	r1, r5
 8009b40:	4620      	mov	r0, r4
 8009b42:	f7fd ff21 	bl	8007988 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 8009b46:	bf00      	nop
 8009b48:	3718      	adds	r7, #24
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bdb0      	pop	{r4, r5, r7, pc}

08009b4e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8009b4e:	b580      	push	{r7, lr}
 8009b50:	b082      	sub	sp, #8
 8009b52:	af00      	add	r7, sp, #0
 8009b54:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8009b56:	2202      	movs	r2, #2
 8009b58:	2100      	movs	r1, #0
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f7ff fca1 	bl	80094a2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f000 faf7 	bl	800a154 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSP_>
  }
 8009b66:	bf00      	nop
 8009b68:	3708      	adds	r7, #8
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}

08009b6e <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi8ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8009b6e:	b580      	push	{r7, lr}
 8009b70:	b082      	sub	sp, #8
 8009b72:	af00      	add	r7, sp, #0
 8009b74:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8009b76:	2108      	movs	r1, #8
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f7fd fce6 	bl	800754a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f000 faf8 	bl	800a174 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi9ELi9EE3runERS9_>
  }
 8009b84:	bf00      	nop
 8009b86:	3708      	adds	r7, #8
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bd80      	pop	{r7, pc}

08009b8c <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEELi3ENS_10DenseShapeES7_ffE5coeffEi>:
  /* Allow index-based non-packet access. It is impossible though to allow index-based packed access,
   * which is why we don't set the LinearAccessBit.
   * TODO: this seems possible when the result is a vector
   */
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  const CoeffReturnType coeff(Index index) const
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b0a4      	sub	sp, #144	; 0x90
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
 8009b94:	6039      	str	r1, [r7, #0]
  {
    const Index row = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? 0 : index;
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    const Index col = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? index : 0;
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6819      	ldr	r1, [r3, #0]
 8009ba6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009baa:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f000 faea 	bl	800a188 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3rowEi>
 8009bb4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009bb8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8009bbc:	4611      	mov	r1, r2
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	f000 faf5 	bl	800a1ae <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE9transposeEv>
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	6859      	ldr	r1, [r3, #4]
 8009bc8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8009bcc:	2200      	movs	r2, #0
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f000 fafe 	bl	800a1d0 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE3colEi>
 8009bd4:	f107 030c 	add.w	r3, r7, #12
 8009bd8:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8009bdc:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8009be0:	4618      	mov	r0, r3
 8009be2:	f000 fb08 	bl	800a1f6 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IKNS3_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>
 8009be6:	f107 030c 	add.w	r3, r7, #12
 8009bea:	4618      	mov	r0, r3
 8009bec:	f000 fb31 	bl	800a252 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE3sumEv>
 8009bf0:	eef0 7a40 	vmov.f32	s15, s0
  }
 8009bf4:	eeb0 0a67 	vmov.f32	s0, s15
 8009bf8:	3790      	adds	r7, #144	; 0x90
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd80      	pop	{r7, pc}

08009bfe <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8009bfe:	b580      	push	{r7, lr}
 8009c00:	b082      	sub	sp, #8
 8009c02:	af00      	add	r7, sp, #0
 8009c04:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8009c06:	2102      	movs	r1, #2
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f7ff fca5 	bl	8009558 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f000 fb3a 	bl	800a288 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSD_>
  }
 8009c14:	bf00      	nop
 8009c16:	3708      	adds	r7, #8
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}

08009c1c <_ZN5Eigen8internal11plain_arrayIfLi9ELi1ELi0EEC1Ev>:
  plain_array()
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b082      	sub	sp, #8
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
    check_static_allocation_size<T,Size>();
 8009c24:	f7fc fbd4 	bl	80063d0 <_ZN5Eigen8internal28check_static_allocation_sizeIfLi9EEEvv>
  }
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	3708      	adds	r7, #8
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}

08009c32 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE6resizeEiii>:
    EIGEN_DEVICE_FUNC void resize(Index,Index,Index) {}
 8009c32:	b480      	push	{r7}
 8009c34:	b085      	sub	sp, #20
 8009c36:	af00      	add	r7, sp, #0
 8009c38:	60f8      	str	r0, [r7, #12]
 8009c3a:	60b9      	str	r1, [r7, #8]
 8009c3c:	607a      	str	r2, [r7, #4]
 8009c3e:	603b      	str	r3, [r7, #0]
 8009c40:	bf00      	nop
 8009c42:	3714      	adds	r7, #20
 8009c44:	46bd      	mov	sp, r7
 8009c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4a:	4770      	bx	lr

08009c4c <_ZNK5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE4dataEv>:
    EIGEN_DEVICE_FUNC const T *data() const { return m_data.array; }
 8009c4c:	b480      	push	{r7}
 8009c4e:	b083      	sub	sp, #12
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	4618      	mov	r0, r3
 8009c58:	370c      	adds	r7, #12
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c60:	4770      	bx	lr

08009c62 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8009c62:	b480      	push	{r7}
 8009c64:	b083      	sub	sp, #12
 8009c66:	af00      	add	r7, sp, #0
 8009c68:	6078      	str	r0, [r7, #4]
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	370c      	adds	r7, #12
 8009c70:	46bd      	mov	sp, r7
 8009c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c76:	4770      	bx	lr

08009c78 <_ZNK5Eigen6MatrixIfLi3ELi3ELi1ELi3ELi3EE11outerStrideEv>:
    inline Index outerStride() const EIGEN_NOEXCEPT { return this->innerSize(); }
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b082      	sub	sp, #8
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f000 fb0b 	bl	800a29c <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE9innerSizeEv>
 8009c86:	4603      	mov	r3, r0
 8009c88:	4618      	mov	r0, r3
 8009c8a:	3708      	adds	r7, #8
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}

08009c90 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8009c90:	b480      	push	{r7}
 8009c92:	b083      	sub	sp, #12
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
    }
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	370c      	adds	r7, #12
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca4:	4770      	bx	lr

08009ca6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_storage.rows(); }
 8009ca6:	b580      	push	{r7, lr}
 8009ca8:	b082      	sub	sp, #8
 8009caa:	af00      	add	r7, sp, #0
 8009cac:	6078      	str	r0, [r7, #4]
 8009cae:	f000 fb01 	bl	800a2b4 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE4rowsEv>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	3708      	adds	r7, #8
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}

08009cbc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_storage.cols(); }
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b082      	sub	sp, #8
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
 8009cc4:	f000 fafe 	bl	800a2c4 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE4colsEv>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	4618      	mov	r0, r3
 8009ccc:	3708      	adds	r7, #8
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}

08009cd2 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 8009cd2:	b580      	push	{r7, lr}
 8009cd4:	b082      	sub	sp, #8
 8009cd6:	af00      	add	r7, sp, #0
 8009cd8:	6078      	str	r0, [r7, #4]
 8009cda:	6039      	str	r1, [r7, #0]
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	4618      	mov	r0, r3
 8009ce0:	f7ff ffe1 	bl	8009ca6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4rowsEv>
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	2b01      	cmp	r3, #1
 8009ce8:	dd08      	ble.n	8009cfc <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEEEvRKT_RKT0_+0x2a>
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	4618      	mov	r0, r3
 8009cee:	f7ff ffe5 	bl	8009cbc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4colsEv>
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	2b01      	cmp	r3, #1
 8009cf6:	dd01      	ble.n	8009cfc <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEEEvRKT_RKT0_+0x2a>
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	e000      	b.n	8009cfe <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEEEvRKT_RKT0_+0x2c>
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d003      	beq.n	8009d0a <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEEEvRKT_RKT0_+0x38>
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
 8009d02:	6839      	ldr	r1, [r7, #0]
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f000 fae5 	bl	800a2d4 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEELb0EE3runERKS3_RKS9_>
}
 8009d0a:	bf00      	nop
 8009d0c:	3708      	adds	r7, #8
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}

08009d12 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 8009d12:	b580      	push	{r7, lr}
 8009d14:	b082      	sub	sp, #8
 8009d16:	af00      	add	r7, sp, #0
 8009d18:	6078      	str	r0, [r7, #4]
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f7fc fd1c 	bl	800675a <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f000 fafb 	bl	800a31e <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEED1Ev>
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	3708      	adds	r7, #8
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}

08009d32 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 8009d32:	b580      	push	{r7, lr}
 8009d34:	b082      	sub	sp, #8
 8009d36:	af00      	add	r7, sp, #0
 8009d38:	6078      	str	r0, [r7, #4]
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	f7ff ffe8 	bl	8009d12 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS0_10IndexBasedEfED1Ev>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	4618      	mov	r0, r3
 8009d46:	3708      	adds	r7, #8
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}

08009d4c <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEELi3ENS_10DenseShapeES9_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b082      	sub	sp, #8
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	332c      	adds	r3, #44	; 0x2c
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f7ff ffea 	bl	8009d32 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEED1Ev>
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	3328      	adds	r3, #40	; 0x28
 8009d62:	4618      	mov	r0, r3
 8009d64:	f7fc fcf9 	bl	800675a <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f000 facd 	bl	800a308 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEED1Ev>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	4618      	mov	r0, r3
 8009d72:	3708      	adds	r7, #8
 8009d74:	46bd      	mov	sp, r7
 8009d76:	bd80      	pop	{r7, pc}

08009d78 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b082      	sub	sp, #8
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	4618      	mov	r0, r3
 8009d84:	f7ff ffe2 	bl	8009d4c <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEELi3ENS_10DenseShapeES9_ffED1Ev>
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3708      	adds	r7, #8
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}

08009d92 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 8009d92:	b580      	push	{r7, lr}
 8009d94:	b098      	sub	sp, #96	; 0x60
 8009d96:	af02      	add	r7, sp, #8
 8009d98:	60f8      	str	r0, [r7, #12]
 8009d9a:	60b9      	str	r1, [r7, #8]
 8009d9c:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 8009d9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009da2:	68b9      	ldr	r1, [r7, #8]
 8009da4:	4618      	mov	r0, r3
 8009da6:	f000 faa0 	bl	800a2ea <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEEC1ERKS8_>
  resize_if_allowed(dst, src, func);
 8009daa:	687a      	ldr	r2, [r7, #4]
 8009dac:	68b9      	ldr	r1, [r7, #8]
 8009dae:	68f8      	ldr	r0, [r7, #12]
 8009db0:	f000 fadc 	bl	800a36c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 8009db4:	f107 0320 	add.w	r3, r7, #32
 8009db8:	68f9      	ldr	r1, [r7, #12]
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f7fe fedd 	bl	8008b7a <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 8009dc0:	68f8      	ldr	r0, [r7, #12]
 8009dc2:	f000 fb1d 	bl	800a400 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE18const_cast_derivedEv>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8009dcc:	f107 0120 	add.w	r1, r7, #32
 8009dd0:	f107 0010 	add.w	r0, r7, #16
 8009dd4:	9300      	str	r3, [sp, #0]
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f000 fb1d 	bl	800a416 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSC_RKSE_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 8009ddc:	f107 0310 	add.w	r3, r7, #16
 8009de0:	4618      	mov	r0, r3
 8009de2:	f000 fb32 	bl	800a44a <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSG_>
  DstEvaluatorType dstEvaluator(dst);
 8009de6:	f107 0320 	add.w	r3, r7, #32
 8009dea:	4618      	mov	r0, r3
 8009dec:	f7fc fd8a 	bl	8006904 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 8009df0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009df4:	4618      	mov	r0, r3
 8009df6:	f7ff ffbf 	bl	8009d78 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEED1Ev>
}
 8009dfa:	bf00      	nop
 8009dfc:	3758      	adds	r7, #88	; 0x58
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}

08009e02 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8009e02:	b580      	push	{r7, lr}
 8009e04:	b082      	sub	sp, #8
 8009e06:	af00      	add	r7, sp, #0
 8009e08:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8009e0a:	2202      	movs	r2, #2
 8009e0c:	2102      	movs	r1, #2
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f7fd fc6b 	bl	80076ea <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f000 fb23 	bl	800a460 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSL_>
  }
 8009e1a:	bf00      	nop
 8009e1c:	3708      	adds	r7, #8
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}

08009e22 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEESA_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 8009e22:	b580      	push	{r7, lr}
 8009e24:	b082      	sub	sp, #8
 8009e26:	af00      	add	r7, sp, #0
 8009e28:	6078      	str	r0, [r7, #4]
 8009e2a:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 8009e2c:	6839      	ldr	r1, [r7, #0]
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f000 fb20 	bl	800a474 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 8009e34:	bf00      	nop
 8009e36:	3708      	adds	r7, #8
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}

08009e3c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init1INS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS2_EEEESK_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b082      	sub	sp, #8
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
 8009e44:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 8009e46:	6839      	ldr	r1, [r7, #0]
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f000 fb34 	bl	800a4b6 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE12_set_noaliasINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS2_EEEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 8009e4e:	bf00      	nop
 8009e50:	3708      	adds	r7, #8
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}

08009e56 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKS5_>:
  explicit evaluator(const PlainObjectType& m)
 8009e56:	b590      	push	{r4, r7, lr}
 8009e58:	b083      	sub	sp, #12
 8009e5a:	af00      	add	r7, sp, #0
 8009e5c:	6078      	str	r0, [r7, #4]
 8009e5e:	6039      	str	r1, [r7, #0]
    : m_d(m.data(),IsVectorAtCompileTime ? 0 : m.outerStride())
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f000 fb56 	bl	800a512 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
 8009e66:	687c      	ldr	r4, [r7, #4]
 8009e68:	6838      	ldr	r0, [r7, #0]
 8009e6a:	f000 fb45 	bl	800a4f8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4dataEv>
 8009e6e:	4603      	mov	r3, r0
 8009e70:	2200      	movs	r2, #0
 8009e72:	4619      	mov	r1, r3
 8009e74:	4620      	mov	r0, r4
 8009e76:	f7fc fad8 	bl	800642a <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EEC1EPKfi>
  }
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	370c      	adds	r7, #12
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd90      	pop	{r4, r7, pc}

08009e84 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEELi4ENS_10DenseShapeESL_ffE5coeffEi>:
  const CoeffReturnType coeff(Index index) const
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b0a2      	sub	sp, #136	; 0x88
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
 8009e8c:	6039      	str	r1, [r7, #0]
    const Index row = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? 0 : index;
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    const Index col = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? index : 0;
 8009e94:	2300      	movs	r3, #0
 8009e96:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 8009e9a:	6879      	ldr	r1, [r7, #4]
 8009e9c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8009ea0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f000 fb3f 	bl	800a528 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE3rowEi>
 8009eaa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009eae:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8009eb2:	4611      	mov	r1, r2
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	f000 fb4a 	bl	800a54e <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE9transposeEv>
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	f103 010c 	add.w	r1, r3, #12
 8009ec0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f000 fb52 	bl	800a570 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE3colEi>
 8009ecc:	f107 030c 	add.w	r3, r7, #12
 8009ed0:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8009ed4:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8009ed8:	4618      	mov	r0, r3
 8009eda:	f000 fb5c 	bl	800a596 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE12cwiseProductINS2_IKNS3_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>
 8009ede:	f107 030c 	add.w	r3, r7, #12
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	f000 fb85 	bl	800a5f2 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE3sumEv>
 8009ee8:	eef0 7a40 	vmov.f32	s15, s0
  }
 8009eec:	eeb0 0a67 	vmov.f32	s0, s15
 8009ef0:	3788      	adds	r7, #136	; 0x88
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}

08009ef6 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSS_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8009ef6:	b580      	push	{r7, lr}
 8009ef8:	b082      	sub	sp, #8
 8009efa:	af00      	add	r7, sp, #0
 8009efc:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8009efe:	2102      	movs	r1, #2
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	f7ff fca2 	bl	800984a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS6_INS6_IS9_S7_Li0EEESA_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f000 fb8e 	bl	800a628 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSS_>
  }
 8009f0c:	bf00      	nop
 8009f0e:	3708      	adds	r7, #8
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}

08009f14 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEELi4ENS_10DenseShapeESF_ffEC1ERKSE_>:
  explicit product_evaluator(const XprType& xpr)
 8009f14:	b590      	push	{r4, r7, lr}
 8009f16:	b083      	sub	sp, #12
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
 8009f1c:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f000 fba4 	bl	800a66c <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEC1Ev>
    : m_lhs(xpr.lhs()),
 8009f24:	6838      	ldr	r0, [r7, #0]
 8009f26:	f000 fb89 	bl	800a63c <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE3lhsEv>
 8009f2a:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	601a      	str	r2, [r3, #0]
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	1d1c      	adds	r4, r3, #4
      m_rhs(xpr.rhs()),
 8009f34:	6838      	ldr	r0, [r7, #0]
 8009f36:	f000 fb8d 	bl	800a654 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE3rhsEv>
 8009f3a:	4603      	mov	r3, r0
      m_innerDim(xpr.lhs().cols())
 8009f3c:	4619      	mov	r1, r3
 8009f3e:	4620      	mov	r0, r4
 8009f40:	f000 fb9f 	bl	800a682 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS_7ProductINS0_IfLi1ELi3ELi1ELi1ELi3EEENS0_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEERKT_>
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f103 0208 	add.w	r2, r3, #8
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
      m_innerDim(xpr.lhs().cols())
 8009f4e:	4619      	mov	r1, r3
 8009f50:	4610      	mov	r0, r2
 8009f52:	f7fb fec6 	bl	8005ce2 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	f103 020c 	add.w	r2, r3, #12
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	3304      	adds	r3, #4
      m_innerDim(xpr.lhs().cols())
 8009f60:	4619      	mov	r1, r3
 8009f62:	4610      	mov	r0, r2
 8009f64:	f7ff fc61 	bl	800982a <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
 8009f68:	6838      	ldr	r0, [r7, #0]
 8009f6a:	f000 fb67 	bl	800a63c <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE3lhsEv>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	4618      	mov	r0, r3
 8009f72:	f7fa fa05 	bl	8004380 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8009f76:	4602      	mov	r2, r0
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	611a      	str	r2, [r3, #16]
  }
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	4618      	mov	r0, r3
 8009f80:	370c      	adds	r7, #12
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd90      	pop	{r4, r7, pc}

08009f86 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi0ELi3EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8009f86:	b580      	push	{r7, lr}
 8009f88:	b082      	sub	sp, #8
 8009f8a:	af00      	add	r7, sp, #0
 8009f8c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8009f8e:	2100      	movs	r1, #0
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f000 fb8b 	bl	800a6ac <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductIS4_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS6_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f000 fbab 	bl	800a6f2 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi1ELi3EE3runERSL_>
  }
 8009f9c:	bf00      	nop
 8009f9e:	3708      	adds	r7, #8
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}

08009fa4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEESF_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b082      	sub	sp, #8
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
 8009fac:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 8009fae:	6839      	ldr	r1, [r7, #0]
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f000 fbad 	bl	800a710 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 8009fb6:	bf00      	nop
 8009fb8:	3708      	adds	r7, #8
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}

08009fbe <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index rowIndexByOuterInner(Index outer, Index inner)
 8009fbe:	b480      	push	{r7}
 8009fc0:	b083      	sub	sp, #12
 8009fc2:	af00      	add	r7, sp, #0
 8009fc4:	6078      	str	r0, [r7, #4]
 8009fc6:	6039      	str	r1, [r7, #0]
      : inner;
 8009fc8:	683b      	ldr	r3, [r7, #0]
  }
 8009fca:	4618      	mov	r0, r3
 8009fcc:	370c      	adds	r7, #12
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd4:	4770      	bx	lr

08009fd6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index colIndexByOuterInner(Index outer, Index inner)
 8009fd6:	b480      	push	{r7}
 8009fd8:	b083      	sub	sp, #12
 8009fda:	af00      	add	r7, sp, #0
 8009fdc:	6078      	str	r0, [r7, #4]
 8009fde:	6039      	str	r1, [r7, #0]
      : outer;
 8009fe0:	687b      	ldr	r3, [r7, #4]
  }
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	370c      	adds	r7, #12
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fec:	4770      	bx	lr

08009fee <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index row, Index col)
 8009fee:	b5b0      	push	{r4, r5, r7, lr}
 8009ff0:	b086      	sub	sp, #24
 8009ff2:	af00      	add	r7, sp, #0
 8009ff4:	60f8      	str	r0, [r7, #12]
 8009ff6:	60b9      	str	r1, [r7, #8]
 8009ff8:	607a      	str	r2, [r7, #4]
    m_functor.assignCoeff(m_dst.coeffRef(row,col), m_src.coeff(row,col));
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	689c      	ldr	r4, [r3, #8]
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	687a      	ldr	r2, [r7, #4]
 800a004:	68b9      	ldr	r1, [r7, #8]
 800a006:	4618      	mov	r0, r3
 800a008:	f7fd ff4e 	bl	8007ea8 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEii>
 800a00c:	4605      	mov	r5, r0
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	685b      	ldr	r3, [r3, #4]
 800a012:	687a      	ldr	r2, [r7, #4]
 800a014:	68b9      	ldr	r1, [r7, #8]
 800a016:	4618      	mov	r0, r3
 800a018:	f000 fb9b 	bl	800a752 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEELi3ENS_10DenseShapeESF_ffE5coeffEii>
 800a01c:	eef0 7a40 	vmov.f32	s15, s0
 800a020:	edc7 7a05 	vstr	s15, [r7, #20]
 800a024:	f107 0314 	add.w	r3, r7, #20
 800a028:	461a      	mov	r2, r3
 800a02a:	4629      	mov	r1, r5
 800a02c:	4620      	mov	r0, r4
 800a02e:	f7fd fcab 	bl	8007988 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 800a032:	bf00      	nop
 800a034:	3718      	adds	r7, #24
 800a036:	46bd      	mov	sp, r7
 800a038:	bdb0      	pop	{r4, r5, r7, pc}

0800a03a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800a03a:	b580      	push	{r7, lr}
 800a03c:	b082      	sub	sp, #8
 800a03e:	af00      	add	r7, sp, #0
 800a040:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800a042:	2202      	movs	r2, #2
 800a044:	2100      	movs	r1, #0
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	f7ff fcf2 	bl	8009a30 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a04c:	6878      	ldr	r0, [r7, #4]
 800a04e:	f000 fbb2 	bl	800a7b6 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSL_>
  }
 800a052:	bf00      	nop
 800a054:	3708      	adds	r7, #8
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}

0800a05a <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800a05a:	b480      	push	{r7}
 800a05c:	b083      	sub	sp, #12
 800a05e:	af00      	add	r7, sp, #0
 800a060:	6078      	str	r0, [r7, #4]
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	4618      	mov	r0, r3
 800a066:	370c      	adds	r7, #12
 800a068:	46bd      	mov	sp, r7
 800a06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06e:	4770      	bx	lr

0800a070 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE4DataC1ERKSD_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 800a070:	b590      	push	{r4, r7, lr}
 800a072:	b083      	sub	sp, #12
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
 800a078:	6039      	str	r1, [r7, #0]
 800a07a:	687c      	ldr	r4, [r7, #4]
 800a07c:	6838      	ldr	r0, [r7, #0]
 800a07e:	f000 fbaa 	bl	800a7d6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE7functorEv>
 800a082:	4603      	mov	r3, r0
 800a084:	4619      	mov	r1, r3
 800a086:	4620      	mov	r0, r4
 800a088:	f7fa fc0a 	bl	80048a0 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	1d1c      	adds	r4, r3, #4
 800a090:	6838      	ldr	r0, [r7, #0]
 800a092:	f000 fbac 	bl	800a7ee <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE3lhsEv>
 800a096:	4603      	mov	r3, r0
 800a098:	4619      	mov	r1, r3
 800a09a:	4620      	mov	r0, r4
 800a09c:	f000 fbbf 	bl	800a81e <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS4_>
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f103 0408 	add.w	r4, r3, #8
 800a0a6:	6838      	ldr	r0, [r7, #0]
 800a0a8:	f000 fbad 	bl	800a806 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE3rhsEv>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	4619      	mov	r1, r3
 800a0b0:	4620      	mov	r0, r4
 800a0b2:	f000 fbc3 	bl	800a83c <_ZN5Eigen8internal9evaluatorIKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERS9_>
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	370c      	adds	r7, #12
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd90      	pop	{r4, r7, pc}

0800a0c0 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 800a0c0:	b480      	push	{r7}
 800a0c2:	b083      	sub	sp, #12
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	370c      	adds	r7, #12
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d6:	4770      	bx	lr

0800a0d8 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800a0d8:	b480      	push	{r7}
 800a0da:	b083      	sub	sp, #12
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	370c      	adds	r7, #12
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ec:	4770      	bx	lr

0800a0ee <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEELi4ENS_10DenseShapeESI_ffE5coeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const CoeffReturnType coeff(Index row, Index col) const
 800a0ee:	b580      	push	{r7, lr}
 800a0f0:	b0a4      	sub	sp, #144	; 0x90
 800a0f2:	af00      	add	r7, sp, #0
 800a0f4:	60f8      	str	r0, [r7, #12]
 800a0f6:	60b9      	str	r1, [r7, #8]
 800a0f8:	607a      	str	r2, [r7, #4]
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 800a0fa:	68f9      	ldr	r1, [r7, #12]
 800a0fc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a100:	68ba      	ldr	r2, [r7, #8]
 800a102:	4618      	mov	r0, r3
 800a104:	f000 fbde 	bl	800a8c4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE3rowEi>
 800a108:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a10c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800a110:	4611      	mov	r1, r2
 800a112:	4618      	mov	r0, r3
 800a114:	f000 fbf9 	bl	800a90a <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE9transposeEv>
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	f103 0110 	add.w	r1, r3, #16
 800a11e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800a122:	687a      	ldr	r2, [r7, #4]
 800a124:	4618      	mov	r0, r3
 800a126:	f000 fc01 	bl	800a92c <_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE3colEi>
 800a12a:	f107 0310 	add.w	r3, r7, #16
 800a12e:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800a132:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800a136:	4618      	mov	r0, r3
 800a138:	f000 fc0b 	bl	800a952 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEE12cwiseProductINS2_IKNS1_IS8_EELi1ELi1ELb0EEEEEKNS3_INS5_IfNS4_6traitsIT_E6ScalarEEEKSJ_KSQ_EERKNS0_ISQ_EE>
 800a13c:	f107 0310 	add.w	r3, r7, #16
 800a140:	4618      	mov	r0, r3
 800a142:	f000 fc34 	bl	800a9ae <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE3sumEv>
 800a146:	eef0 7a40 	vmov.f32	s15, s0
  }
 800a14a:	eeb0 0a67 	vmov.f32	s0, s15
 800a14e:	3790      	adds	r7, #144	; 0x90
 800a150:	46bd      	mov	sp, r7
 800a152:	bd80      	pop	{r7, pc}

0800a154 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800a154:	b580      	push	{r7, lr}
 800a156:	b082      	sub	sp, #8
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800a15c:	2200      	movs	r2, #0
 800a15e:	2101      	movs	r1, #1
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	f7ff f99e 	bl	80094a2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f000 fc3c 	bl	800a9e4 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSP_>
  }
 800a16c:	bf00      	nop
 800a16e:	3708      	adds	r7, #8
 800a170:	46bd      	mov	sp, r7
 800a172:	bd80      	pop	{r7, pc}

0800a174 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi9ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 800a174:	b480      	push	{r7}
 800a176:	b083      	sub	sp, #12
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
 800a17c:	bf00      	nop
 800a17e:	370c      	adds	r7, #12
 800a180:	46bd      	mov	sp, r7
 800a182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a186:	4770      	bx	lr

0800a188 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3rowEi>:
  return RowXpr(derived(), i);
}

/// This is the const version of row(). */
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
ConstRowXpr row(Index i) const
 800a188:	b580      	push	{r7, lr}
 800a18a:	b084      	sub	sp, #16
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	60f8      	str	r0, [r7, #12]
 800a190:	60b9      	str	r1, [r7, #8]
 800a192:	607a      	str	r2, [r7, #4]
{
  return ConstRowXpr(derived(), i);
 800a194:	68b8      	ldr	r0, [r7, #8]
 800a196:	f7fa fc62 	bl	8004a5e <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800a19a:	4603      	mov	r3, r0
 800a19c:	687a      	ldr	r2, [r7, #4]
 800a19e:	4619      	mov	r1, r3
 800a1a0:	68f8      	ldr	r0, [r7, #12]
 800a1a2:	f000 fc2f 	bl	800aa04 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i>
}
 800a1a6:	68f8      	ldr	r0, [r7, #12]
 800a1a8:	3710      	adds	r7, #16
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}

0800a1ae <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE9transposeEv>:
DenseBase<Derived>::transpose() const
 800a1ae:	b580      	push	{r7, lr}
 800a1b0:	b082      	sub	sp, #8
 800a1b2:	af00      	add	r7, sp, #0
 800a1b4:	6078      	str	r0, [r7, #4]
 800a1b6:	6039      	str	r1, [r7, #0]
  return ConstTransposeReturnType(derived());
 800a1b8:	6838      	ldr	r0, [r7, #0]
 800a1ba:	f000 fc4d 	bl	800aa58 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE7derivedEv>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	4619      	mov	r1, r3
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	f000 fc6b 	bl	800aa9e <_ZN5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1ERS6_>
}
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	3708      	adds	r7, #8
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}

0800a1d0 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE3colEi>:
ConstColXpr col(Index i) const
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b084      	sub	sp, #16
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	60f8      	str	r0, [r7, #12]
 800a1d8:	60b9      	str	r1, [r7, #8]
 800a1da:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 800a1dc:	68b8      	ldr	r0, [r7, #8]
 800a1de:	f7fa fa76 	bl	80046ce <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	687a      	ldr	r2, [r7, #4]
 800a1e6:	4619      	mov	r1, r3
 800a1e8:	68f8      	ldr	r0, [r7, #12]
 800a1ea:	f000 fc6f 	bl	800aacc <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i>
}
 800a1ee:	68f8      	ldr	r0, [r7, #12]
 800a1f0:	3710      	adds	r7, #16
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bd80      	pop	{r7, pc}

0800a1f6 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IKNS3_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>:
  * \sa class CwiseBinaryOp, cwiseAbs2
  */
template<typename OtherDerived>
EIGEN_DEVICE_FUNC
EIGEN_STRONG_INLINE const EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 800a1f6:	b5b0      	push	{r4, r5, r7, lr}
 800a1f8:	b086      	sub	sp, #24
 800a1fa:	af00      	add	r7, sp, #0
 800a1fc:	60f8      	str	r0, [r7, #12]
 800a1fe:	60b9      	str	r1, [r7, #8]
 800a200:	607a      	str	r2, [r7, #4]
{
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 800a202:	68b8      	ldr	r0, [r7, #8]
 800a204:	f000 fc8a 	bl	800ab1c <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE7derivedEv>
 800a208:	4604      	mov	r4, r0
 800a20a:	6878      	ldr	r0, [r7, #4]
 800a20c:	f000 fc91 	bl	800ab32 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE7derivedEv>
 800a210:	4605      	mov	r5, r0
 800a212:	f107 0314 	add.w	r3, r7, #20
 800a216:	4618      	mov	r0, r3
 800a218:	f7fa fab8 	bl	800478c <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 800a21c:	f107 0314 	add.w	r3, r7, #20
 800a220:	462a      	mov	r2, r5
 800a222:	4621      	mov	r1, r4
 800a224:	68f8      	ldr	r0, [r7, #12]
 800a226:	f000 fcd7 	bl	800abd8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_>
}
 800a22a:	68f8      	ldr	r0, [r7, #12]
 800a22c:	3718      	adds	r7, #24
 800a22e:	46bd      	mov	sp, r7
 800a230:	bdb0      	pop	{r4, r5, r7, pc}

0800a232 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 800a232:	b580      	push	{r7, lr}
 800a234:	b082      	sub	sp, #8
 800a236:	af00      	add	r7, sp, #0
 800a238:	6078      	str	r0, [r7, #4]
 800a23a:	6878      	ldr	r0, [r7, #4]
 800a23c:	f000 fd2a 	bl	800ac94 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE7derivedEv>
 800a240:	4603      	mov	r3, r0
 800a242:	4618      	mov	r0, r3
 800a244:	f000 fd31 	bl	800acaa <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE4rowsEv>
 800a248:	4603      	mov	r3, r0
 800a24a:	4618      	mov	r0, r3
 800a24c:	3708      	adds	r7, #8
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}

0800a252 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE3sumEv>:
  *
  * \sa trace(), prod(), mean()
  */
template<typename Derived>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE typename internal::traits<Derived>::Scalar
DenseBase<Derived>::sum() const
 800a252:	b590      	push	{r4, r7, lr}
 800a254:	b085      	sub	sp, #20
 800a256:	af00      	add	r7, sp, #0
 800a258:	6078      	str	r0, [r7, #4]
{
  if(SizeAtCompileTime==0 || (SizeAtCompileTime==Dynamic && size()==0))
    return Scalar(0);
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	f000 fd1a 	bl	800ac94 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE7derivedEv>
 800a260:	4604      	mov	r4, r0
 800a262:	f107 030c 	add.w	r3, r7, #12
 800a266:	4618      	mov	r0, r3
 800a268:	f7fa fd87 	bl	8004d7a <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 800a26c:	f107 030c 	add.w	r3, r7, #12
 800a270:	4619      	mov	r1, r3
 800a272:	4620      	mov	r0, r4
 800a274:	f000 fdf4 	bl	800ae60 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 800a278:	eef0 7a40 	vmov.f32	s15, s0
 800a27c:	bf00      	nop
}
 800a27e:	eeb0 0a67 	vmov.f32	s0, s15
 800a282:	3714      	adds	r7, #20
 800a284:	46bd      	mov	sp, r7
 800a286:	bd90      	pop	{r4, r7, pc}

0800a288 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSD_>:
 800a288:	b480      	push	{r7}
 800a28a:	b083      	sub	sp, #12
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
 800a290:	bf00      	nop
 800a292:	370c      	adds	r7, #12
 800a294:	46bd      	mov	sp, r7
 800a296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29a:	4770      	bx	lr

0800a29c <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE9innerSizeEv>:
    Index innerSize() const
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b082      	sub	sp, #8
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
      return IsVectorAtCompileTime ? this->size()
 800a2a4:	6878      	ldr	r0, [r7, #4]
 800a2a6:	f000 fe21 	bl	800aeec <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4colsEv>
 800a2aa:	4603      	mov	r3, r0
    }
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	3708      	adds	r7, #8
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd80      	pop	{r7, pc}

0800a2b4 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE4rowsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index rows(void) EIGEN_NOEXCEPT {return _Rows;}
 800a2b4:	b480      	push	{r7}
 800a2b6:	af00      	add	r7, sp, #0
 800a2b8:	2303      	movs	r3, #3
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c2:	4770      	bx	lr

0800a2c4 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE4colsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index cols(void) EIGEN_NOEXCEPT {return _Cols;}
 800a2c4:	b480      	push	{r7}
 800a2c6:	af00      	add	r7, sp, #0
 800a2c8:	2303      	movs	r3, #3
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d2:	4770      	bx	lr

0800a2d4 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEELb0EE3runERKS3_RKS9_>:
    static void run(const Derived&, const OtherDerived&)
 800a2d4:	b480      	push	{r7}
 800a2d6:	b083      	sub	sp, #12
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
 800a2dc:	6039      	str	r1, [r7, #0]
    }
 800a2de:	bf00      	nop
 800a2e0:	370c      	adds	r7, #12
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e8:	4770      	bx	lr

0800a2ea <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEEC1ERKS8_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800a2ea:	b580      	push	{r7, lr}
 800a2ec:	b082      	sub	sp, #8
 800a2ee:	af00      	add	r7, sp, #0
 800a2f0:	6078      	str	r0, [r7, #4]
 800a2f2:	6039      	str	r1, [r7, #0]
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	6839      	ldr	r1, [r7, #0]
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	f000 fe07 	bl	800af0c <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEELi3ENS_10DenseShapeES9_ffEC1ERKS8_>
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	4618      	mov	r0, r3
 800a302:	3708      	adds	r7, #8
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}

0800a308 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800a308:	b480      	push	{r7}
 800a30a:	b083      	sub	sp, #12
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	4618      	mov	r0, r3
 800a314:	370c      	adds	r7, #12
 800a316:	46bd      	mov	sp, r7
 800a318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31c:	4770      	bx	lr

0800a31e <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEED1Ev>:
 800a31e:	b480      	push	{r7}
 800a320:	b083      	sub	sp, #12
 800a322:	af00      	add	r7, sp, #0
 800a324:	6078      	str	r0, [r7, #4]
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	4618      	mov	r0, r3
 800a32a:	370c      	adds	r7, #12
 800a32c:	46bd      	mov	sp, r7
 800a32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a332:	4770      	bx	lr

0800a334 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 800a334:	b580      	push	{r7, lr}
 800a336:	b082      	sub	sp, #8
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	4618      	mov	r0, r3
 800a340:	f7fb fdea 	bl	8005f18 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4rowsEv>
 800a344:	4603      	mov	r3, r0
 800a346:	4618      	mov	r0, r3
 800a348:	3708      	adds	r7, #8
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}

0800a34e <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 800a34e:	b580      	push	{r7, lr}
 800a350:	b082      	sub	sp, #8
 800a352:	af00      	add	r7, sp, #0
 800a354:	6078      	str	r0, [r7, #4]
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	3308      	adds	r3, #8
 800a35a:	4618      	mov	r0, r3
 800a35c:	f7fb fdea 	bl	8005f34 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800a360:	4603      	mov	r3, r0
 800a362:	4618      	mov	r0, r3
 800a364:	3708      	adds	r7, #8
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}
	...

0800a36c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b086      	sub	sp, #24
 800a370:	af00      	add	r7, sp, #0
 800a372:	60f8      	str	r0, [r7, #12]
 800a374:	60b9      	str	r1, [r7, #8]
 800a376:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 800a378:	68b8      	ldr	r0, [r7, #8]
 800a37a:	f7ff ffdb 	bl	800a334 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE4rowsEv>
 800a37e:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 800a380:	68b8      	ldr	r0, [r7, #8]
 800a382:	f7ff ffe4 	bl	800a34e <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE4colsEv>
 800a386:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	4618      	mov	r0, r3
 800a38c:	f7ff fc8b 	bl	8009ca6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4rowsEv>
 800a390:	4602      	mov	r2, r0
 800a392:	697b      	ldr	r3, [r7, #20]
 800a394:	4293      	cmp	r3, r2
 800a396:	d107      	bne.n	800a3a8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	4618      	mov	r0, r3
 800a39c:	f7ff fc8e 	bl	8009cbc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4colsEv>
 800a3a0:	4602      	mov	r2, r0
 800a3a2:	693b      	ldr	r3, [r7, #16]
 800a3a4:	4293      	cmp	r3, r2
 800a3a6:	d001      	beq.n	800a3ac <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 800a3a8:	2301      	movs	r3, #1
 800a3aa:	e000      	b.n	800a3ae <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d005      	beq.n	800a3be <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	693a      	ldr	r2, [r7, #16]
 800a3b6:	6979      	ldr	r1, [r7, #20]
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	f7ff f923 	bl	8009604 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	f7ff fc70 	bl	8009ca6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4rowsEv>
 800a3c6:	4602      	mov	r2, r0
 800a3c8:	697b      	ldr	r3, [r7, #20]
 800a3ca:	4293      	cmp	r3, r2
 800a3cc:	d107      	bne.n	800a3de <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	f7ff fc73 	bl	8009cbc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4colsEv>
 800a3d6:	4602      	mov	r2, r0
 800a3d8:	693b      	ldr	r3, [r7, #16]
 800a3da:	4293      	cmp	r3, r2
 800a3dc:	d006      	beq.n	800a3ec <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 800a3de:	4b05      	ldr	r3, [pc, #20]	; (800a3f4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 800a3e0:	4a05      	ldr	r2, [pc, #20]	; (800a3f8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 800a3e2:	f240 21fd 	movw	r1, #765	; 0x2fd
 800a3e6:	4805      	ldr	r0, [pc, #20]	; (800a3fc <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 800a3e8:	f012 fe24 	bl	801d034 <__assert_func>
}
 800a3ec:	bf00      	nop
 800a3ee:	3718      	adds	r7, #24
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bd80      	pop	{r7, pc}
 800a3f4:	08021514 	.word	0x08021514
 800a3f8:	080238c0 	.word	0x080238c0
 800a3fc:	08021628 	.word	0x08021628

0800a400 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE18const_cast_derivedEv>:
  inline Derived& const_cast_derived() const
 800a400:	b480      	push	{r7}
 800a402:	b083      	sub	sp, #12
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
  { return *static_cast<Derived*>(const_cast<EigenBase*>(this)); }
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	4618      	mov	r0, r3
 800a40c:	370c      	adds	r7, #12
 800a40e:	46bd      	mov	sp, r7
 800a410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a414:	4770      	bx	lr

0800a416 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSC_RKSE_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 800a416:	b480      	push	{r7}
 800a418:	b085      	sub	sp, #20
 800a41a:	af00      	add	r7, sp, #0
 800a41c:	60f8      	str	r0, [r7, #12]
 800a41e:	60b9      	str	r1, [r7, #8]
 800a420:	607a      	str	r2, [r7, #4]
 800a422:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	68ba      	ldr	r2, [r7, #8]
 800a428:	601a      	str	r2, [r3, #0]
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	687a      	ldr	r2, [r7, #4]
 800a42e:	605a      	str	r2, [r3, #4]
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	683a      	ldr	r2, [r7, #0]
 800a434:	609a      	str	r2, [r3, #8]
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	69ba      	ldr	r2, [r7, #24]
 800a43a:	60da      	str	r2, [r3, #12]
  }
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	4618      	mov	r0, r3
 800a440:	3714      	adds	r7, #20
 800a442:	46bd      	mov	sp, r7
 800a444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a448:	4770      	bx	lr

0800a44a <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800a44a:	b580      	push	{r7, lr}
 800a44c:	b082      	sub	sp, #8
 800a44e:	af00      	add	r7, sp, #0
 800a450:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	f000 fd92 	bl	800af7c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSG_>
  }
 800a458:	bf00      	nop
 800a45a:	3708      	adds	r7, #8
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bd80      	pop	{r7, pc}

0800a460 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 800a460:	b480      	push	{r7}
 800a462:	b083      	sub	sp, #12
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
 800a468:	bf00      	nop
 800a46a:	370c      	adds	r7, #12
 800a46c:	46bd      	mov	sp, r7
 800a46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a472:	4770      	bx	lr

0800a474 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 800a474:	b5b0      	push	{r4, r5, r7, lr}
 800a476:	b084      	sub	sp, #16
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
 800a47c:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 800a47e:	6878      	ldr	r0, [r7, #4]
 800a480:	f7fa fa1a 	bl	80048b8 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800a484:	4604      	mov	r4, r0
 800a486:	6838      	ldr	r0, [r7, #0]
 800a488:	f7fa ff75 	bl	8005376 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEE7derivedEv>
 800a48c:	4605      	mov	r5, r0
 800a48e:	f107 030c 	add.w	r3, r7, #12
 800a492:	4618      	mov	r0, r3
 800a494:	f7fb ff09 	bl	80062aa <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800a498:	f107 030c 	add.w	r3, r7, #12
 800a49c:	461a      	mov	r2, r3
 800a49e:	4629      	mov	r1, r5
 800a4a0:	4620      	mov	r0, r4
 800a4a2:	f000 fd7b 	bl	800af9c <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	f7fa fa06 	bl	80048b8 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800a4ac:	4603      	mov	r3, r0
    }
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	3710      	adds	r7, #16
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bdb0      	pop	{r4, r5, r7, pc}

0800a4b6 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE12_set_noaliasINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS2_EEEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 800a4b6:	b5b0      	push	{r4, r5, r7, lr}
 800a4b8:	b084      	sub	sp, #16
 800a4ba:	af00      	add	r7, sp, #0
 800a4bc:	6078      	str	r0, [r7, #4]
 800a4be:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 800a4c0:	6878      	ldr	r0, [r7, #4]
 800a4c2:	f000 fd7c 	bl	800afbe <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800a4c6:	4604      	mov	r4, r0
 800a4c8:	6838      	ldr	r0, [r7, #0]
 800a4ca:	f7fa ff5f 	bl	800538c <_ZNK5Eigen9EigenBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEE7derivedEv>
 800a4ce:	4605      	mov	r5, r0
 800a4d0:	f107 030c 	add.w	r3, r7, #12
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f7fb fee8 	bl	80062aa <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800a4da:	f107 030c 	add.w	r3, r7, #12
 800a4de:	461a      	mov	r2, r3
 800a4e0:	4629      	mov	r1, r5
 800a4e2:	4620      	mov	r0, r4
 800a4e4:	f000 fd76 	bl	800afd4 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 800a4e8:	6878      	ldr	r0, [r7, #4]
 800a4ea:	f000 fd68 	bl	800afbe <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800a4ee:	4603      	mov	r3, r0
    }
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	3710      	adds	r7, #16
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bdb0      	pop	{r4, r5, r7, pc}

0800a4f8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4dataEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar *data() const
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b082      	sub	sp, #8
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
    { return m_storage.data(); }
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	4618      	mov	r0, r3
 800a504:	f000 fd77 	bl	800aff6 <_ZNK5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4dataEv>
 800a508:	4603      	mov	r3, r0
 800a50a:	4618      	mov	r0, r3
 800a50c:	3708      	adds	r7, #8
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}

0800a512 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800a512:	b480      	push	{r7}
 800a514:	b083      	sub	sp, #12
 800a516:	af00      	add	r7, sp, #0
 800a518:	6078      	str	r0, [r7, #4]
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	4618      	mov	r0, r3
 800a51e:	370c      	adds	r7, #12
 800a520:	46bd      	mov	sp, r7
 800a522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a526:	4770      	bx	lr

0800a528 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE3rowEi>:
ConstRowXpr row(Index i) const
 800a528:	b580      	push	{r7, lr}
 800a52a:	b084      	sub	sp, #16
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	60f8      	str	r0, [r7, #12]
 800a530:	60b9      	str	r1, [r7, #8]
 800a532:	607a      	str	r2, [r7, #4]
  return ConstRowXpr(derived(), i);
 800a534:	68b8      	ldr	r0, [r7, #8]
 800a536:	f7fa f8ca 	bl	80046ce <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800a53a:	4603      	mov	r3, r0
 800a53c:	687a      	ldr	r2, [r7, #4]
 800a53e:	4619      	mov	r1, r3
 800a540:	68f8      	ldr	r0, [r7, #12]
 800a542:	f000 fd6f 	bl	800b024 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEC1ERS3_i>
}
 800a546:	68f8      	ldr	r0, [r7, #12]
 800a548:	3710      	adds	r7, #16
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bd80      	pop	{r7, pc}

0800a54e <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE9transposeEv>:
DenseBase<Derived>::transpose() const
 800a54e:	b580      	push	{r7, lr}
 800a550:	b082      	sub	sp, #8
 800a552:	af00      	add	r7, sp, #0
 800a554:	6078      	str	r0, [r7, #4]
 800a556:	6039      	str	r1, [r7, #0]
  return ConstTransposeReturnType(derived());
 800a558:	6838      	ldr	r0, [r7, #0]
 800a55a:	f000 fd8d 	bl	800b078 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE7derivedEv>
 800a55e:	4603      	mov	r3, r0
 800a560:	4619      	mov	r1, r3
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	f000 fdab 	bl	800b0be <_ZN5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1ERS6_>
}
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	3708      	adds	r7, #8
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd80      	pop	{r7, pc}

0800a570 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE3colEi>:
ConstColXpr col(Index i) const
 800a570:	b580      	push	{r7, lr}
 800a572:	b084      	sub	sp, #16
 800a574:	af00      	add	r7, sp, #0
 800a576:	60f8      	str	r0, [r7, #12]
 800a578:	60b9      	str	r1, [r7, #8]
 800a57a:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 800a57c:	68b8      	ldr	r0, [r7, #8]
 800a57e:	f7fa fe16 	bl	80051ae <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800a582:	4603      	mov	r3, r0
 800a584:	687a      	ldr	r2, [r7, #4]
 800a586:	4619      	mov	r1, r3
 800a588:	68f8      	ldr	r0, [r7, #12]
 800a58a:	f000 fdaf 	bl	800b0ec <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i>
}
 800a58e:	68f8      	ldr	r0, [r7, #12]
 800a590:	3710      	adds	r7, #16
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}

0800a596 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE12cwiseProductINS2_IKNS3_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 800a596:	b5b0      	push	{r4, r5, r7, lr}
 800a598:	b086      	sub	sp, #24
 800a59a:	af00      	add	r7, sp, #0
 800a59c:	60f8      	str	r0, [r7, #12]
 800a59e:	60b9      	str	r1, [r7, #8]
 800a5a0:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 800a5a2:	68b8      	ldr	r0, [r7, #8]
 800a5a4:	f000 fdd4 	bl	800b150 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE7derivedEv>
 800a5a8:	4604      	mov	r4, r0
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	f000 fddb 	bl	800b166 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE7derivedEv>
 800a5b0:	4605      	mov	r5, r0
 800a5b2:	f107 0314 	add.w	r3, r7, #20
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	f7fa f8e8 	bl	800478c <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 800a5bc:	f107 0314 	add.w	r3, r7, #20
 800a5c0:	462a      	mov	r2, r5
 800a5c2:	4621      	mov	r1, r4
 800a5c4:	68f8      	ldr	r0, [r7, #12]
 800a5c6:	f000 fe21 	bl	800b20c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERSC_RSG_RKS3_>
}
 800a5ca:	68f8      	ldr	r0, [r7, #12]
 800a5cc:	3718      	adds	r7, #24
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bdb0      	pop	{r4, r5, r7, pc}

0800a5d2 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 800a5d2:	b580      	push	{r7, lr}
 800a5d4:	b082      	sub	sp, #8
 800a5d6:	af00      	add	r7, sp, #0
 800a5d8:	6078      	str	r0, [r7, #4]
 800a5da:	6878      	ldr	r0, [r7, #4]
 800a5dc:	f000 fe72 	bl	800b2c4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE7derivedEv>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f000 fe79 	bl	800b2da <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE4rowsEv>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	3708      	adds	r7, #8
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	bd80      	pop	{r7, pc}

0800a5f2 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 800a5f2:	b590      	push	{r4, r7, lr}
 800a5f4:	b085      	sub	sp, #20
 800a5f6:	af00      	add	r7, sp, #0
 800a5f8:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 800a5fa:	6878      	ldr	r0, [r7, #4]
 800a5fc:	f000 fe62 	bl	800b2c4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE7derivedEv>
 800a600:	4604      	mov	r4, r0
 800a602:	f107 030c 	add.w	r3, r7, #12
 800a606:	4618      	mov	r0, r3
 800a608:	f7fa fbb7 	bl	8004d7a <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 800a60c:	f107 030c 	add.w	r3, r7, #12
 800a610:	4619      	mov	r1, r3
 800a612:	4620      	mov	r0, r4
 800a614:	f000 ff3c 	bl	800b490 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 800a618:	eef0 7a40 	vmov.f32	s15, s0
 800a61c:	bf00      	nop
}
 800a61e:	eeb0 0a67 	vmov.f32	s0, s15
 800a622:	3714      	adds	r7, #20
 800a624:	46bd      	mov	sp, r7
 800a626:	bd90      	pop	{r4, r7, pc}

0800a628 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSS_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 800a628:	b480      	push	{r7}
 800a62a:	b083      	sub	sp, #12
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
 800a630:	bf00      	nop
 800a632:	370c      	adds	r7, #12
 800a634:	46bd      	mov	sp, r7
 800a636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63a:	4770      	bx	lr

0800a63c <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800a63c:	b480      	push	{r7}
 800a63e:	b083      	sub	sp, #12
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	4618      	mov	r0, r3
 800a64a:	370c      	adds	r7, #12
 800a64c:	46bd      	mov	sp, r7
 800a64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a652:	4770      	bx	lr

0800a654 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800a654:	b480      	push	{r7}
 800a656:	b083      	sub	sp, #12
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	3304      	adds	r3, #4
 800a660:	4618      	mov	r0, r3
 800a662:	370c      	adds	r7, #12
 800a664:	46bd      	mov	sp, r7
 800a666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66a:	4770      	bx	lr

0800a66c <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEC1Ev>:
 800a66c:	b480      	push	{r7}
 800a66e:	b083      	sub	sp, #12
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	4618      	mov	r0, r3
 800a678:	370c      	adds	r7, #12
 800a67a:	46bd      	mov	sp, r7
 800a67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a680:	4770      	bx	lr

0800a682 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS_7ProductINS0_IfLi1ELi3ELi1ELi1ELi3EEENS0_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEERKT_>:
    explicit Matrix(const T& x)
 800a682:	b580      	push	{r7, lr}
 800a684:	b082      	sub	sp, #8
 800a686:	af00      	add	r7, sp, #0
 800a688:	6078      	str	r0, [r7, #4]
 800a68a:	6039      	str	r1, [r7, #0]
    {
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	4618      	mov	r0, r3
 800a690:	f7f9 fcfc 	bl	800408c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
      Base::_check_template_params();
 800a694:	f7f9 fd0a 	bl	80040ac <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	6839      	ldr	r1, [r7, #0]
 800a69c:	4618      	mov	r0, r3
 800a69e:	f000 ff3d 	bl	800b51c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEESF_EEvRKNS_9DenseBaseIT0_EE>
    }
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	3708      	adds	r7, #8
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	bd80      	pop	{r7, pc}

0800a6ac <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductIS4_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS6_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 800a6ac:	b5b0      	push	{r4, r5, r7, lr}
 800a6ae:	b084      	sub	sp, #16
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
 800a6b4:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	689c      	ldr	r4, [r3, #8]
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	6839      	ldr	r1, [r7, #0]
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	f7fd f9a8 	bl	8007a16 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi>
 800a6c6:	4605      	mov	r5, r0
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	685b      	ldr	r3, [r3, #4]
 800a6cc:	6839      	ldr	r1, [r7, #0]
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	f000 ff31 	bl	800b536 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEELi4ENS_10DenseShapeESF_ffE5coeffEi>
 800a6d4:	eef0 7a40 	vmov.f32	s15, s0
 800a6d8:	edc7 7a03 	vstr	s15, [r7, #12]
 800a6dc:	f107 030c 	add.w	r3, r7, #12
 800a6e0:	461a      	mov	r2, r3
 800a6e2:	4629      	mov	r1, r5
 800a6e4:	4620      	mov	r0, r4
 800a6e6:	f000 ff5f 	bl	800b5a8 <_ZNK5Eigen8internal13add_assign_opIffE11assignCoeffERfRKf>
  }
 800a6ea:	bf00      	nop
 800a6ec:	3710      	adds	r7, #16
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bdb0      	pop	{r4, r5, r7, pc}

0800a6f2 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi1ELi3EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800a6f2:	b580      	push	{r7, lr}
 800a6f4:	b082      	sub	sp, #8
 800a6f6:	af00      	add	r7, sp, #0
 800a6f8:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800a6fa:	2101      	movs	r1, #1
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f7ff ffd5 	bl	800a6ac <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductIS4_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS6_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f000 ff67 	bl	800b5d6 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi2ELi3EE3runERSL_>
  }
 800a708:	bf00      	nop
 800a70a:	3708      	adds	r7, #8
 800a70c:	46bd      	mov	sp, r7
 800a70e:	bd80      	pop	{r7, pc}

0800a710 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 800a710:	b5b0      	push	{r4, r5, r7, lr}
 800a712:	b084      	sub	sp, #16
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
 800a718:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 800a71a:	6878      	ldr	r0, [r7, #4]
 800a71c:	f7fa fa68 	bl	8004bf0 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800a720:	4604      	mov	r4, r0
 800a722:	6838      	ldr	r0, [r7, #0]
 800a724:	f7fb f98e 	bl	8005a44 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEE7derivedEv>
 800a728:	4605      	mov	r5, r0
 800a72a:	f107 030c 	add.w	r3, r7, #12
 800a72e:	4618      	mov	r0, r3
 800a730:	f7fb fdbb 	bl	80062aa <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800a734:	f107 030c 	add.w	r3, r7, #12
 800a738:	461a      	mov	r2, r3
 800a73a:	4629      	mov	r1, r5
 800a73c:	4620      	mov	r0, r4
 800a73e:	f000 ff59 	bl	800b5f4 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 800a742:	6878      	ldr	r0, [r7, #4]
 800a744:	f7fa fa54 	bl	8004bf0 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800a748:	4603      	mov	r3, r0
    }
 800a74a:	4618      	mov	r0, r3
 800a74c:	3710      	adds	r7, #16
 800a74e:	46bd      	mov	sp, r7
 800a750:	bdb0      	pop	{r4, r5, r7, pc}

0800a752 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEELi3ENS_10DenseShapeESF_ffE5coeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const CoeffReturnType coeff(Index row, Index col) const
 800a752:	b580      	push	{r7, lr}
 800a754:	b0a4      	sub	sp, #144	; 0x90
 800a756:	af00      	add	r7, sp, #0
 800a758:	60f8      	str	r0, [r7, #12]
 800a75a:	60b9      	str	r1, [r7, #8]
 800a75c:	607a      	str	r2, [r7, #4]
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 800a75e:	68f9      	ldr	r1, [r7, #12]
 800a760:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a764:	68ba      	ldr	r2, [r7, #8]
 800a766:	4618      	mov	r0, r3
 800a768:	f7ff fd0e 	bl	800a188 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3rowEi>
 800a76c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a770:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800a774:	4611      	mov	r1, r2
 800a776:	4618      	mov	r0, r3
 800a778:	f7ff fd19 	bl	800a1ae <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE9transposeEv>
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800a780:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800a784:	687a      	ldr	r2, [r7, #4]
 800a786:	4618      	mov	r0, r3
 800a788:	f000 ff45 	bl	800b616 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3colEi>
 800a78c:	f107 0314 	add.w	r3, r7, #20
 800a790:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800a794:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800a798:	4618      	mov	r0, r3
 800a79a:	f000 ff4f 	bl	800b63c <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IS5_Li3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSD_6traitsIT_E6ScalarEEEKS8_KSG_EERKNS0_ISG_EE>
 800a79e:	f107 0314 	add.w	r3, r7, #20
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f000 ff78 	bl	800b698 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE3sumEv>
 800a7a8:	eef0 7a40 	vmov.f32	s15, s0
  }
 800a7ac:	eeb0 0a67 	vmov.f32	s0, s15
 800a7b0:	3790      	adds	r7, #144	; 0x90
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	bd80      	pop	{r7, pc}

0800a7b6 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800a7b6:	b580      	push	{r7, lr}
 800a7b8:	b082      	sub	sp, #8
 800a7ba:	af00      	add	r7, sp, #0
 800a7bc:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800a7be:	2200      	movs	r2, #0
 800a7c0:	2101      	movs	r1, #1
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	f7ff f934 	bl	8009a30 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a7c8:	6878      	ldr	r0, [r7, #4]
 800a7ca:	f000 ff80 	bl	800b6ce <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSL_>
  }
 800a7ce:	bf00      	nop
 800a7d0:	3708      	adds	r7, #8
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}

0800a7d6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 800a7d6:	b480      	push	{r7}
 800a7d8:	b083      	sub	sp, #12
 800a7da:	af00      	add	r7, sp, #0
 800a7dc:	6078      	str	r0, [r7, #4]
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	330c      	adds	r3, #12
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	370c      	adds	r7, #12
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ec:	4770      	bx	lr

0800a7ee <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800a7ee:	b480      	push	{r7}
 800a7f0:	b083      	sub	sp, #12
 800a7f2:	af00      	add	r7, sp, #0
 800a7f4:	6078      	str	r0, [r7, #4]
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	370c      	adds	r7, #12
 800a7fe:	46bd      	mov	sp, r7
 800a800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a804:	4770      	bx	lr

0800a806 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800a806:	b480      	push	{r7}
 800a808:	b083      	sub	sp, #12
 800a80a:	af00      	add	r7, sp, #0
 800a80c:	6078      	str	r0, [r7, #4]
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	3304      	adds	r3, #4
 800a812:	4618      	mov	r0, r3
 800a814:	370c      	adds	r7, #12
 800a816:	46bd      	mov	sp, r7
 800a818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81c:	4770      	bx	lr

0800a81e <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS4_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 800a81e:	b580      	push	{r7, lr}
 800a820:	b082      	sub	sp, #8
 800a822:	af00      	add	r7, sp, #0
 800a824:	6078      	str	r0, [r7, #4]
 800a826:	6039      	str	r1, [r7, #0]
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6839      	ldr	r1, [r7, #0]
 800a82c:	4618      	mov	r0, r3
 800a82e:	f7fb fa58 	bl	8005ce2 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	4618      	mov	r0, r3
 800a836:	3708      	adds	r7, #8
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}

0800a83c <_ZN5Eigen8internal9evaluatorIKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERS9_>:
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b082      	sub	sp, #8
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
 800a844:	6039      	str	r1, [r7, #0]
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6839      	ldr	r1, [r7, #0]
 800a84a:	4618      	mov	r0, r3
 800a84c:	f000 ff4f 	bl	800b6ee <_ZN5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKS8_>
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	4618      	mov	r0, r3
 800a854:	3708      	adds	r7, #8
 800a856:	46bd      	mov	sp, r7
 800a858:	bd80      	pop	{r7, pc}

0800a85a <_ZN5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EEC1ERKSF_>:
    typedef typename internal::ref_selector<XprType>::non_const_type XprTypeNested;
  public:

    typedef typename internal::dense_xpr_base<BlockType>::type Base;
    EIGEN_DENSE_PUBLIC_INTERFACE(BlockType)
    EIGEN_INHERIT_ASSIGNMENT_OPERATORS(BlockImpl_dense)
 800a85a:	b580      	push	{r7, lr}
 800a85c:	b082      	sub	sp, #8
 800a85e:	af00      	add	r7, sp, #0
 800a860:	6078      	str	r0, [r7, #4]
 800a862:	6039      	str	r1, [r7, #0]
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	683a      	ldr	r2, [r7, #0]
 800a868:	4611      	mov	r1, r2
 800a86a:	4618      	mov	r0, r3
 800a86c:	f7f9 f8aa 	bl	80039c4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERKSC_>
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	3310      	adds	r3, #16
 800a874:	683a      	ldr	r2, [r7, #0]
 800a876:	6912      	ldr	r2, [r2, #16]
 800a878:	601a      	str	r2, [r3, #0]
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	4618      	mov	r0, r3
 800a87e:	3708      	adds	r7, #8
 800a880:	46bd      	mov	sp, r7
 800a882:	bd80      	pop	{r7, pc}

0800a884 <_ZN5Eigen9BlockImplIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ENS_5DenseEEC1ERKSG_>:
    EIGEN_INHERIT_ASSIGNMENT_OPERATORS(BlockImpl)
 800a884:	b580      	push	{r7, lr}
 800a886:	b082      	sub	sp, #8
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
 800a88c:	6039      	str	r1, [r7, #0]
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	683a      	ldr	r2, [r7, #0]
 800a892:	4611      	mov	r1, r2
 800a894:	4618      	mov	r0, r3
 800a896:	f7ff ffe0 	bl	800a85a <_ZN5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EEC1ERKSF_>
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	4618      	mov	r0, r3
 800a89e:	3708      	adds	r7, #8
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	bd80      	pop	{r7, pc}

0800a8a4 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERKSF_>:
    EIGEN_INHERIT_ASSIGNMENT_OPERATORS(Block)
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b082      	sub	sp, #8
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
 800a8ac:	6039      	str	r1, [r7, #0]
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	683a      	ldr	r2, [r7, #0]
 800a8b2:	4611      	mov	r1, r2
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f7ff ffe5 	bl	800a884 <_ZN5Eigen9BlockImplIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ENS_5DenseEEC1ERKSG_>
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	4618      	mov	r0, r3
 800a8be:	3708      	adds	r7, #8
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bd80      	pop	{r7, pc}

0800a8c4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE3rowEi>:
ConstRowXpr row(Index i) const
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b084      	sub	sp, #16
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	60f8      	str	r0, [r7, #12]
 800a8cc:	60b9      	str	r1, [r7, #8]
 800a8ce:	607a      	str	r2, [r7, #4]
  return ConstRowXpr(derived(), i);
 800a8d0:	68b8      	ldr	r0, [r7, #8]
 800a8d2:	f7fa f824 	bl	800491e <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE7derivedEv>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	687a      	ldr	r2, [r7, #4]
 800a8da:	4619      	mov	r1, r3
 800a8dc:	68f8      	ldr	r0, [r7, #12]
 800a8de:	f000 ff1d 	bl	800b71c <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERSE_i>
}
 800a8e2:	68f8      	ldr	r0, [r7, #12]
 800a8e4:	3710      	adds	r7, #16
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bd80      	pop	{r7, pc}

0800a8ea <_ZN5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERKSI_>:
    EIGEN_INHERIT_ASSIGNMENT_OPERATORS(Transpose)
 800a8ea:	b580      	push	{r7, lr}
 800a8ec:	b082      	sub	sp, #8
 800a8ee:	af00      	add	r7, sp, #0
 800a8f0:	6078      	str	r0, [r7, #4]
 800a8f2:	6039      	str	r1, [r7, #0]
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	683a      	ldr	r2, [r7, #0]
 800a8f8:	4611      	mov	r1, r2
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	f7ff ffd2 	bl	800a8a4 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERKSF_>
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	4618      	mov	r0, r3
 800a904:	3708      	adds	r7, #8
 800a906:	46bd      	mov	sp, r7
 800a908:	bd80      	pop	{r7, pc}

0800a90a <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE9transposeEv>:
DenseBase<Derived>::transpose() const
 800a90a:	b580      	push	{r7, lr}
 800a90c:	b082      	sub	sp, #8
 800a90e:	af00      	add	r7, sp, #0
 800a910:	6078      	str	r0, [r7, #4]
 800a912:	6039      	str	r1, [r7, #0]
  return ConstTransposeReturnType(derived());
 800a914:	6838      	ldr	r0, [r7, #0]
 800a916:	f000 ff29 	bl	800b76c <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE7derivedEv>
 800a91a:	4603      	mov	r3, r0
 800a91c:	4619      	mov	r1, r3
 800a91e:	6878      	ldr	r0, [r7, #4]
 800a920:	f000 ff47 	bl	800b7b2 <_ZN5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERSH_>
}
 800a924:	6878      	ldr	r0, [r7, #4]
 800a926:	3708      	adds	r7, #8
 800a928:	46bd      	mov	sp, r7
 800a92a:	bd80      	pop	{r7, pc}

0800a92c <_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE3colEi>:
ConstColXpr col(Index i) const
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b084      	sub	sp, #16
 800a930:	af00      	add	r7, sp, #0
 800a932:	60f8      	str	r0, [r7, #12]
 800a934:	60b9      	str	r1, [r7, #8]
 800a936:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 800a938:	68b8      	ldr	r0, [r7, #8]
 800a93a:	f7f9 fffb 	bl	8004934 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 800a93e:	4603      	mov	r3, r0
 800a940:	687a      	ldr	r2, [r7, #4]
 800a942:	4619      	mov	r1, r3
 800a944:	68f8      	ldr	r0, [r7, #12]
 800a946:	f000 ff47 	bl	800b7d8 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEC1ERS5_i>
}
 800a94a:	68f8      	ldr	r0, [r7, #12]
 800a94c:	3710      	adds	r7, #16
 800a94e:	46bd      	mov	sp, r7
 800a950:	bd80      	pop	{r7, pc}

0800a952 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEE12cwiseProductINS2_IKNS1_IS8_EELi1ELi1ELb0EEEEEKNS3_INS5_IfNS4_6traitsIT_E6ScalarEEEKSJ_KSQ_EERKNS0_ISQ_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 800a952:	b5b0      	push	{r4, r5, r7, lr}
 800a954:	b086      	sub	sp, #24
 800a956:	af00      	add	r7, sp, #0
 800a958:	60f8      	str	r0, [r7, #12]
 800a95a:	60b9      	str	r1, [r7, #8]
 800a95c:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 800a95e:	68b8      	ldr	r0, [r7, #8]
 800a960:	f000 ff62 	bl	800b828 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEE7derivedEv>
 800a964:	4604      	mov	r4, r0
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f000 ff69 	bl	800b83e <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEE7derivedEv>
 800a96c:	4605      	mov	r5, r0
 800a96e:	f107 0314 	add.w	r3, r7, #20
 800a972:	4618      	mov	r0, r3
 800a974:	f7f9 ff0a 	bl	800478c <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 800a978:	f107 0314 	add.w	r3, r7, #20
 800a97c:	462a      	mov	r2, r5
 800a97e:	4621      	mov	r1, r4
 800a980:	68f8      	ldr	r0, [r7, #12]
 800a982:	f000 ffaf 	bl	800b8e4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEEC1ERSJ_RSN_RKS3_>
}
 800a986:	68f8      	ldr	r0, [r7, #12]
 800a988:	3718      	adds	r7, #24
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bdb0      	pop	{r4, r5, r7, pc}

0800a98e <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE4rowsEv>:
 800a98e:	b580      	push	{r7, lr}
 800a990:	b082      	sub	sp, #8
 800a992:	af00      	add	r7, sp, #0
 800a994:	6078      	str	r0, [r7, #4]
 800a996:	6878      	ldr	r0, [r7, #4]
 800a998:	f000 fffe 	bl	800b998 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE7derivedEv>
 800a99c:	4603      	mov	r3, r0
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f001 f805 	bl	800b9ae <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE4rowsEv>
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3708      	adds	r7, #8
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}

0800a9ae <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 800a9ae:	b590      	push	{r4, r7, lr}
 800a9b0:	b085      	sub	sp, #20
 800a9b2:	af00      	add	r7, sp, #0
 800a9b4:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	f000 ffee 	bl	800b998 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE7derivedEv>
 800a9bc:	4604      	mov	r4, r0
 800a9be:	f107 030c 	add.w	r3, r7, #12
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f7fa f9d9 	bl	8004d7a <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 800a9c8:	f107 030c 	add.w	r3, r7, #12
 800a9cc:	4619      	mov	r1, r3
 800a9ce:	4620      	mov	r0, r4
 800a9d0:	f001 f8da 	bl	800bb88 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 800a9d4:	eef0 7a40 	vmov.f32	s15, s0
 800a9d8:	bf00      	nop
}
 800a9da:	eeb0 0a67 	vmov.f32	s0, s15
 800a9de:	3714      	adds	r7, #20
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	bd90      	pop	{r4, r7, pc}

0800a9e4 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b082      	sub	sp, #8
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800a9ec:	2201      	movs	r2, #1
 800a9ee:	2101      	movs	r1, #1
 800a9f0:	6878      	ldr	r0, [r7, #4]
 800a9f2:	f7fe fd56 	bl	80094a2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f001 f90c 	bl	800bc14 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSP_>
  }
 800a9fc:	bf00      	nop
 800a9fe:	3708      	adds	r7, #8
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}

0800aa04 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b084      	sub	sp, #16
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	60f8      	str	r0, [r7, #12]
 800aa0c:	60b9      	str	r1, [r7, #8]
 800aa0e:	607a      	str	r2, [r7, #4]
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	687a      	ldr	r2, [r7, #4]
 800aa14:	68b9      	ldr	r1, [r7, #8]
 800aa16:	4618      	mov	r0, r3
 800aa18:	f001 f90c 	bl	800bc34 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	db07      	blt.n	800aa32 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i+0x2e>
 800aa22:	68bb      	ldr	r3, [r7, #8]
 800aa24:	4618      	mov	r0, r3
 800aa26:	f7f9 fc10 	bl	800424a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800aa2a:	4602      	mov	r2, r0
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	4293      	cmp	r3, r2
 800aa30:	db05      	blt.n	800aa3e <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i+0x3a>
 800aa32:	4b06      	ldr	r3, [pc, #24]	; (800aa4c <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i+0x48>)
 800aa34:	4a06      	ldr	r2, [pc, #24]	; (800aa50 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i+0x4c>)
 800aa36:	2178      	movs	r1, #120	; 0x78
 800aa38:	4806      	ldr	r0, [pc, #24]	; (800aa54 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i+0x50>)
 800aa3a:	f012 fafb 	bl	801d034 <__assert_func>
 800aa3e:	bf00      	nop
    }
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	4618      	mov	r0, r3
 800aa44:	3710      	adds	r7, #16
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}
 800aa4a:	bf00      	nop
 800aa4c:	08023a20 	.word	0x08023a20
 800aa50:	08023ac8 	.word	0x08023ac8
 800aa54:	08023ba4 	.word	0x08023ba4

0800aa58 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800aa58:	b480      	push	{r7}
 800aa5a:	b083      	sub	sp, #12
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	4618      	mov	r0, r3
 800aa64:	370c      	adds	r7, #12
 800aa66:	46bd      	mov	sp, r7
 800aa68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6c:	4770      	bx	lr

0800aa6e <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>:
 800aa6e:	b580      	push	{r7, lr}
 800aa70:	b082      	sub	sp, #8
 800aa72:	af00      	add	r7, sp, #0
 800aa74:	6078      	str	r0, [r7, #4]
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	f001 f8ed 	bl	800bc56 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	4618      	mov	r0, r3
 800aa80:	3708      	adds	r7, #8
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}

0800aa86 <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 800aa86:	b580      	push	{r7, lr}
 800aa88:	b082      	sub	sp, #8
 800aa8a:	af00      	add	r7, sp, #0
 800aa8c:	6078      	str	r0, [r7, #4]
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f7ff ffed 	bl	800aa6e <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	4618      	mov	r0, r3
 800aa98:	3708      	adds	r7, #8
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}

0800aa9e <_ZN5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1ERS6_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 800aa9e:	b5b0      	push	{r4, r5, r7, lr}
 800aaa0:	b082      	sub	sp, #8
 800aaa2:	af00      	add	r7, sp, #0
 800aaa4:	6078      	str	r0, [r7, #4]
 800aaa6:	6039      	str	r1, [r7, #0]
 800aaa8:	6878      	ldr	r0, [r7, #4]
 800aaaa:	f7ff ffec 	bl	800aa86 <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS_5DenseEEC1Ev>
 800aaae:	687a      	ldr	r2, [r7, #4]
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	4614      	mov	r4, r2
 800aab4:	461d      	mov	r5, r3
 800aab6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aab8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aaba:	e895 0003 	ldmia.w	r5, {r0, r1}
 800aabe:	e884 0003 	stmia.w	r4, {r0, r1}
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	4618      	mov	r0, r3
 800aac6:	3708      	adds	r7, #8
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bdb0      	pop	{r4, r5, r7, pc}

0800aacc <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800aacc:	b580      	push	{r7, lr}
 800aace:	b084      	sub	sp, #16
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	60f8      	str	r0, [r7, #12]
 800aad4:	60b9      	str	r1, [r7, #8]
 800aad6:	607a      	str	r2, [r7, #4]
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	687a      	ldr	r2, [r7, #4]
 800aadc:	68b9      	ldr	r1, [r7, #8]
 800aade:	4618      	mov	r0, r3
 800aae0:	f001 f8c4 	bl	800bc6c <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	db07      	blt.n	800aafa <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i+0x2e>
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	4618      	mov	r0, r3
 800aaee:	f7f9 fc47 	bl	8004380 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800aaf2:	4602      	mov	r2, r0
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	4293      	cmp	r3, r2
 800aaf8:	db05      	blt.n	800ab06 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i+0x3a>
 800aafa:	4b05      	ldr	r3, [pc, #20]	; (800ab10 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i+0x44>)
 800aafc:	4a05      	ldr	r2, [pc, #20]	; (800ab14 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i+0x48>)
 800aafe:	2178      	movs	r1, #120	; 0x78
 800ab00:	4805      	ldr	r0, [pc, #20]	; (800ab18 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i+0x4c>)
 800ab02:	f012 fa97 	bl	801d034 <__assert_func>
    }
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	4618      	mov	r0, r3
 800ab0a:	3710      	adds	r7, #16
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bd80      	pop	{r7, pc}
 800ab10:	08023a20 	.word	0x08023a20
 800ab14:	08023bf8 	.word	0x08023bf8
 800ab18:	08023ba4 	.word	0x08023ba4

0800ab1c <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE7derivedEv>:
 800ab1c:	b480      	push	{r7}
 800ab1e:	b083      	sub	sp, #12
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	4618      	mov	r0, r3
 800ab28:	370c      	adds	r7, #12
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab30:	4770      	bx	lr

0800ab32 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE7derivedEv>:
 800ab32:	b480      	push	{r7}
 800ab34:	b083      	sub	sp, #12
 800ab36:	af00      	add	r7, sp, #0
 800ab38:	6078      	str	r0, [r7, #4]
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	370c      	adds	r7, #12
 800ab40:	46bd      	mov	sp, r7
 800ab42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab46:	4770      	bx	lr

0800ab48 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1Ev>:
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b082      	sub	sp, #8
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f001 f89c 	bl	800bc8e <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1Ev>
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	4618      	mov	r0, r3
 800ab5a:	3708      	adds	r7, #8
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bd80      	pop	{r7, pc}

0800ab60 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b082      	sub	sp, #8
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
 800ab68:	6878      	ldr	r0, [r7, #4]
 800ab6a:	f7ff ffed 	bl	800ab48 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1Ev>
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	4618      	mov	r0, r3
 800ab72:	3708      	adds	r7, #8
 800ab74:	46bd      	mov	sp, r7
 800ab76:	bd80      	pop	{r7, pc}

0800ab78 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b082      	sub	sp, #8
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	4618      	mov	r0, r3
 800ab84:	f001 f88e 	bl	800bca4 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4colsEv>
 800ab88:	4603      	mov	r3, r0
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	3708      	adds	r7, #8
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	bd80      	pop	{r7, pc}

0800ab92 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 800ab92:	b580      	push	{r7, lr}
 800ab94:	b082      	sub	sp, #8
 800ab96:	af00      	add	r7, sp, #0
 800ab98:	6078      	str	r0, [r7, #4]
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	f001 f88c 	bl	800bcba <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4rowsEv>
 800aba2:	4603      	mov	r3, r0
 800aba4:	4618      	mov	r0, r3
 800aba6:	3708      	adds	r7, #8
 800aba8:	46bd      	mov	sp, r7
 800abaa:	bd80      	pop	{r7, pc}

0800abac <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4rowsEv>:

    typedef typename Base::CoeffReturnType CoeffReturnType;

    /** \copydoc DenseBase::rows() */
    EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 800abac:	b580      	push	{r7, lr}
 800abae:	b082      	sub	sp, #8
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
 800abb4:	f7fb f913 	bl	8005dde <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 800abb8:	4603      	mov	r3, r0
 800abba:	4618      	mov	r0, r3
 800abbc:	3708      	adds	r7, #8
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}

0800abc2 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4colsEv>:
    /** \copydoc DenseBase::cols() */
    EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 800abc2:	b580      	push	{r7, lr}
 800abc4:	b082      	sub	sp, #8
 800abc6:	af00      	add	r7, sp, #0
 800abc8:	6078      	str	r0, [r7, #4]
 800abca:	f7fb f910 	bl	8005dee <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800abce:	4603      	mov	r3, r0
 800abd0:	4618      	mov	r0, r3
 800abd2:	3708      	adds	r7, #8
 800abd4:	46bd      	mov	sp, r7
 800abd6:	bd80      	pop	{r7, pc}

0800abd8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 800abd8:	b5b0      	push	{r4, r5, r7, lr}
 800abda:	b084      	sub	sp, #16
 800abdc:	af00      	add	r7, sp, #0
 800abde:	60f8      	str	r0, [r7, #12]
 800abe0:	60b9      	str	r1, [r7, #8]
 800abe2:	607a      	str	r2, [r7, #4]
 800abe4:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 800abe6:	68f8      	ldr	r0, [r7, #12]
 800abe8:	f7ff ffba 	bl	800ab60 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEENS_5DenseEEC1Ev>
 800abec:	68fa      	ldr	r2, [r7, #12]
 800abee:	68bb      	ldr	r3, [r7, #8]
 800abf0:	4614      	mov	r4, r2
 800abf2:	461d      	mov	r5, r3
 800abf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800abf6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800abf8:	e895 0003 	ldmia.w	r5, {r0, r1}
 800abfc:	e884 0003 	stmia.w	r4, {r0, r1}
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	f103 0218 	add.w	r2, r3, #24
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	4614      	mov	r4, r2
 800ac0a:	461d      	mov	r5, r3
 800ac0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ac0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ac10:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ac14:	e884 0003 	stmia.w	r4, {r0, r1}
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	3330      	adds	r3, #48	; 0x30
 800ac1c:	6839      	ldr	r1, [r7, #0]
 800ac1e:	4618      	mov	r0, r3
 800ac20:	f7f9 fe3e 	bl	80048a0 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 800ac24:	68b8      	ldr	r0, [r7, #8]
 800ac26:	f7ff ffa7 	bl	800ab78 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 800ac2a:	4604      	mov	r4, r0
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	4618      	mov	r0, r3
 800ac30:	f7ff ffbc 	bl	800abac <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4rowsEv>
 800ac34:	4603      	mov	r3, r0
 800ac36:	429c      	cmp	r4, r3
 800ac38:	d10a      	bne.n	800ac50 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x78>
 800ac3a:	68b8      	ldr	r0, [r7, #8]
 800ac3c:	f7ff ffa9 	bl	800ab92 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 800ac40:	4604      	mov	r4, r0
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	4618      	mov	r0, r3
 800ac46:	f7ff ffbc 	bl	800abc2 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4colsEv>
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	429c      	cmp	r4, r3
 800ac4e:	d005      	beq.n	800ac5c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x84>
 800ac50:	4b05      	ldr	r3, [pc, #20]	; (800ac68 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x90>)
 800ac52:	4a06      	ldr	r2, [pc, #24]	; (800ac6c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x94>)
 800ac54:	2174      	movs	r1, #116	; 0x74
 800ac56:	4806      	ldr	r0, [pc, #24]	; (800ac70 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x98>)
 800ac58:	f012 f9ec 	bl	801d034 <__assert_func>
    }
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	4618      	mov	r0, r3
 800ac60:	3710      	adds	r7, #16
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bdb0      	pop	{r4, r5, r7, pc}
 800ac66:	bf00      	nop
 800ac68:	0801ee9c 	.word	0x0801ee9c
 800ac6c:	08023cd4 	.word	0x08023cd4
 800ac70:	0801f100 	.word	0x0801f100

0800ac74 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b082      	sub	sp, #8
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
 800ac7c:	6878      	ldr	r0, [r7, #4]
 800ac7e:	f000 f809 	bl	800ac94 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE7derivedEv>
 800ac82:	4603      	mov	r3, r0
 800ac84:	4618      	mov	r0, r3
 800ac86:	f001 f823 	bl	800bcd0 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE4colsEv>
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	3708      	adds	r7, #8
 800ac90:	46bd      	mov	sp, r7
 800ac92:	bd80      	pop	{r7, pc}

0800ac94 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800ac94:	b480      	push	{r7}
 800ac96:	b083      	sub	sp, #12
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	4618      	mov	r0, r3
 800aca0:	370c      	adds	r7, #12
 800aca2:	46bd      	mov	sp, r7
 800aca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca8:	4770      	bx	lr

0800acaa <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 800acaa:	b580      	push	{r7, lr}
 800acac:	b082      	sub	sp, #8
 800acae:	af00      	add	r7, sp, #0
 800acb0:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	4618      	mov	r0, r3
 800acb6:	f7ff ff5f 	bl	800ab78 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 800acba:	4603      	mov	r3, r0
    }
 800acbc:	4618      	mov	r0, r3
 800acbe:	3708      	adds	r7, #8
 800acc0:	46bd      	mov	sp, r7
 800acc2:	bd80      	pop	{r7, pc}

0800acc4 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEED1Ev>:
// but that might complicate template specialization
template<typename Derived, typename PlainObjectType>
struct mapbase_evaluator;

template<typename Derived, typename PlainObjectType>
struct mapbase_evaluator : evaluator_base<Derived>
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b082      	sub	sp, #8
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f001 f831 	bl	800bd34 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEED1Ev>
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	4618      	mov	r0, r3
 800acd6:	3708      	adds	r7, #8
 800acd8:	46bd      	mov	sp, r7
 800acda:	bd80      	pop	{r7, pc}

0800acdc <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EED1Ev>:

// TODO: This evaluator does not actually use the child evaluator;
// all action is via the data() as returned by the Block expression.

template<typename ArgType, int BlockRows, int BlockCols, bool InnerPanel>
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800acdc:	b580      	push	{r7, lr}
 800acde:	b082      	sub	sp, #8
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	4618      	mov	r0, r3
 800ace8:	f7ff ffec 	bl	800acc4 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	4618      	mov	r0, r3
 800acf0:	3708      	adds	r7, #8
 800acf2:	46bd      	mov	sp, r7
 800acf4:	bd80      	pop	{r7, pc}

0800acf6 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800acf6:	b580      	push	{r7, lr}
 800acf8:	b082      	sub	sp, #8
 800acfa:	af00      	add	r7, sp, #0
 800acfc:	6078      	str	r0, [r7, #4]
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	4618      	mov	r0, r3
 800ad02:	f7ff ffeb 	bl	800acdc <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EED1Ev>
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	4618      	mov	r0, r3
 800ad0a:	3708      	adds	r7, #8
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}

0800ad10 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEED1Ev>:
struct evaluator<const T>
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b082      	sub	sp, #8
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	f7ff ffeb 	bl	800acf6 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEED1Ev>
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	4618      	mov	r0, r3
 800ad24:	3708      	adds	r7, #8
 800ad26:	46bd      	mov	sp, r7
 800ad28:	bd80      	pop	{r7, pc}

0800ad2a <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 800ad2a:	b580      	push	{r7, lr}
 800ad2c:	b082      	sub	sp, #8
 800ad2e:	af00      	add	r7, sp, #0
 800ad30:	6078      	str	r0, [r7, #4]
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	4618      	mov	r0, r3
 800ad36:	f7ff ffeb 	bl	800ad10 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEED1Ev>
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	f000 ffef 	bl	800bd1e <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	4618      	mov	r0, r3
 800ad44:	3708      	adds	r7, #8
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bd80      	pop	{r7, pc}

0800ad4a <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 800ad4a:	b580      	push	{r7, lr}
 800ad4c:	b082      	sub	sp, #8
 800ad4e:	af00      	add	r7, sp, #0
 800ad50:	6078      	str	r0, [r7, #4]
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	4618      	mov	r0, r3
 800ad56:	f7ff ffe8 	bl	800ad2a <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfED1Ev>
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	3708      	adds	r7, #8
 800ad60:	46bd      	mov	sp, r7
 800ad62:	bd80      	pop	{r7, pc}

0800ad64 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>:
struct evaluator<const T>
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b082      	sub	sp, #8
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	4618      	mov	r0, r3
 800ad70:	f7ff ffeb 	bl	800ad4a <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	4618      	mov	r0, r3
 800ad78:	3708      	adds	r7, #8
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}

0800ad7e <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_ED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 800ad7e:	b580      	push	{r7, lr}
 800ad80:	b082      	sub	sp, #8
 800ad82:	af00      	add	r7, sp, #0
 800ad84:	6078      	str	r0, [r7, #4]
 800ad86:	6878      	ldr	r0, [r7, #4]
 800ad88:	f000 ffdf 	bl	800bd4a <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEED1Ev>
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	4618      	mov	r0, r3
 800ad90:	3708      	adds	r7, #8
 800ad92:	46bd      	mov	sp, r7
 800ad94:	bd80      	pop	{r7, pc}

0800ad96 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800ad96:	b580      	push	{r7, lr}
 800ad98:	b082      	sub	sp, #8
 800ad9a:	af00      	add	r7, sp, #0
 800ad9c:	6078      	str	r0, [r7, #4]
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	4618      	mov	r0, r3
 800ada2:	f7ff ffec 	bl	800ad7e <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_ED1Ev>
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	4618      	mov	r0, r3
 800adaa:	3708      	adds	r7, #8
 800adac:	46bd      	mov	sp, r7
 800adae:	bd80      	pop	{r7, pc}

0800adb0 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b082      	sub	sp, #8
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	4618      	mov	r0, r3
 800adbc:	f7ff ffeb 	bl	800ad96 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EED1Ev>
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	4618      	mov	r0, r3
 800adc4:	3708      	adds	r7, #8
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd80      	pop	{r7, pc}

0800adca <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEED1Ev>:
struct evaluator<const T>
 800adca:	b580      	push	{r7, lr}
 800adcc:	b082      	sub	sp, #8
 800adce:	af00      	add	r7, sp, #0
 800add0:	6078      	str	r0, [r7, #4]
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	4618      	mov	r0, r3
 800add6:	f7ff ffeb 	bl	800adb0 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEED1Ev>
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	4618      	mov	r0, r3
 800adde:	3708      	adds	r7, #8
 800ade0:	46bd      	mov	sp, r7
 800ade2:	bd80      	pop	{r7, pc}

0800ade4 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>:
  struct Data
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b082      	sub	sp, #8
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	330c      	adds	r3, #12
 800adf0:	4618      	mov	r0, r3
 800adf2:	f7ff ffea 	bl	800adca <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEED1Ev>
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	3304      	adds	r3, #4
 800adfa:	4618      	mov	r0, r3
 800adfc:	f7ff ffb2 	bl	800ad64 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	4618      	mov	r0, r3
 800ae04:	3708      	adds	r7, #8
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bd80      	pop	{r7, pc}

0800ae0a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 800ae0a:	b580      	push	{r7, lr}
 800ae0c:	b082      	sub	sp, #8
 800ae0e:	af00      	add	r7, sp, #0
 800ae10:	6078      	str	r0, [r7, #4]
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	4618      	mov	r0, r3
 800ae16:	f7ff ffe5 	bl	800ade4 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f000 ff74 	bl	800bd08 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEED1Ev>
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	4618      	mov	r0, r3
 800ae24:	3708      	adds	r7, #8
 800ae26:	46bd      	mov	sp, r7
 800ae28:	bd80      	pop	{r7, pc}

0800ae2a <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 800ae2a:	b580      	push	{r7, lr}
 800ae2c:	b082      	sub	sp, #8
 800ae2e:	af00      	add	r7, sp, #0
 800ae30:	6078      	str	r0, [r7, #4]
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	4618      	mov	r0, r3
 800ae36:	f7ff ffe8 	bl	800ae0a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffED1Ev>
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	3708      	adds	r7, #8
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bd80      	pop	{r7, pc}

0800ae44 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b082      	sub	sp, #8
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	4618      	mov	r0, r3
 800ae50:	f7ff ffeb 	bl	800ae2a <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEED1Ev>
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	4618      	mov	r0, r3
 800ae58:	3708      	adds	r7, #8
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	bd80      	pop	{r7, pc}
	...

0800ae60 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 800ae60:	b580      	push	{r7, lr}
 800ae62:	ed2d 8b02 	vpush	{d8}
 800ae66:	b088      	sub	sp, #32
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
 800ae6c:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f7ff f9df 	bl	800a232 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE4rowsEv>
 800ae74:	4603      	mov	r3, r0
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	dd05      	ble.n	800ae86 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 800ae7a:	6878      	ldr	r0, [r7, #4]
 800ae7c:	f7ff fefa 	bl	800ac74 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE4colsEv>
 800ae80:	4603      	mov	r3, r0
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	dc06      	bgt.n	800ae94 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 800ae86:	4b16      	ldr	r3, [pc, #88]	; (800aee0 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 800ae88:	4a16      	ldr	r2, [pc, #88]	; (800aee4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 800ae8a:	f240 119b 	movw	r1, #411	; 0x19b
 800ae8e:	4816      	ldr	r0, [pc, #88]	; (800aee8 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 800ae90:	f012 f8d0 	bl	801d034 <__assert_func>
 800ae94:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800ae96:	6878      	ldr	r0, [r7, #4]
 800ae98:	f7ff fefc 	bl	800ac94 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE7derivedEv>
 800ae9c:	4602      	mov	r2, r0
 800ae9e:	f107 030c 	add.w	r3, r7, #12
 800aea2:	4611      	mov	r1, r2
 800aea4:	4618      	mov	r0, r3
 800aea6:	f000 ff20 	bl	800bcea <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1ERKSI_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800aeaa:	6878      	ldr	r0, [r7, #4]
 800aeac:	f7ff fef2 	bl	800ac94 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE7derivedEv>
 800aeb0:	4602      	mov	r2, r0
 800aeb2:	f107 030c 	add.w	r3, r7, #12
 800aeb6:	6839      	ldr	r1, [r7, #0]
 800aeb8:	4618      	mov	r0, r3
 800aeba:	f000 ff51 	bl	800bd60 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>
 800aebe:	eeb0 8a40 	vmov.f32	s16, s0
 800aec2:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800aec4:	f107 030c 	add.w	r3, r7, #12
 800aec8:	4618      	mov	r0, r3
 800aeca:	f7ff ffbb 	bl	800ae44 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800aece:	eef0 7a48 	vmov.f32	s15, s16
}
 800aed2:	eeb0 0a67 	vmov.f32	s0, s15
 800aed6:	3720      	adds	r7, #32
 800aed8:	46bd      	mov	sp, r7
 800aeda:	ecbd 8b02 	vpop	{d8}
 800aede:	bd80      	pop	{r7, pc}
 800aee0:	08023f1c 	.word	0x08023f1c
 800aee4:	08023f60 	.word	0x08023f60
 800aee8:	08024128 	.word	0x08024128

0800aeec <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b082      	sub	sp, #8
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	f7fe feb4 	bl	8009c62 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE7derivedEv>
 800aefa:	4603      	mov	r3, r0
 800aefc:	4618      	mov	r0, r3
 800aefe:	f7fe fedd 	bl	8009cbc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4colsEv>
 800af02:	4603      	mov	r3, r0
 800af04:	4618      	mov	r0, r3
 800af06:	3708      	adds	r7, #8
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd80      	pop	{r7, pc}

0800af0c <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEELi3ENS_10DenseShapeES9_ffEC1ERKS8_>:
  explicit product_evaluator(const XprType& xpr)
 800af0c:	b590      	push	{r4, r7, lr}
 800af0e:	b083      	sub	sp, #12
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
 800af14:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 800af16:	6878      	ldr	r0, [r7, #4]
 800af18:	f000 ff4a 	bl	800bdb0 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEEC1Ev>
 800af1c:	687c      	ldr	r4, [r7, #4]
    : m_lhs(xpr.lhs()),
 800af1e:	6838      	ldr	r0, [r7, #0]
 800af20:	f000 ff2f 	bl	800bd82 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE3lhsEv>
 800af24:	4603      	mov	r3, r0
      m_innerDim(xpr.lhs().cols())
 800af26:	4619      	mov	r1, r3
 800af28:	4620      	mov	r0, r4
 800af2a:	f000 ff4c 	bl	800bdc6 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_7ProductIS1_S1_Li0EEEEERKT_>
      m_rhs(xpr.rhs()),
 800af2e:	6838      	ldr	r0, [r7, #0]
 800af30:	f000 ff32 	bl	800bd98 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE3rhsEv>
 800af34:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	3324      	adds	r3, #36	; 0x24
 800af3a:	6812      	ldr	r2, [r2, #0]
 800af3c:	601a      	str	r2, [r3, #0]
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	3328      	adds	r3, #40	; 0x28
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 800af42:	687a      	ldr	r2, [r7, #4]
      m_innerDim(xpr.lhs().cols())
 800af44:	4611      	mov	r1, r2
 800af46:	4618      	mov	r0, r3
 800af48:	f7fb fe16 	bl	8006b78 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	f103 022c 	add.w	r2, r3, #44	; 0x2c
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	3324      	adds	r3, #36	; 0x24
      m_innerDim(xpr.lhs().cols())
 800af56:	4619      	mov	r1, r3
 800af58:	4610      	mov	r0, r2
 800af5a:	f000 ff49 	bl	800bdf0 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1ERKS5_>
 800af5e:	6838      	ldr	r0, [r7, #0]
 800af60:	f000 ff0f 	bl	800bd82 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE3lhsEv>
 800af64:	4603      	mov	r3, r0
 800af66:	4618      	mov	r0, r3
 800af68:	f7f9 feaf 	bl	8004cca <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4colsEv>
 800af6c:	4602      	mov	r2, r0
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	631a      	str	r2, [r3, #48]	; 0x30
  }
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	4618      	mov	r0, r3
 800af76:	370c      	adds	r7, #12
 800af78:	46bd      	mov	sp, r7
 800af7a:	bd90      	pop	{r4, r7, pc}

0800af7c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b082      	sub	sp, #8
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800af84:	2200      	movs	r2, #0
 800af86:	2100      	movs	r1, #0
 800af88:	6878      	ldr	r0, [r7, #4]
 800af8a:	f000 ff40 	bl	800be0e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800af8e:	6878      	ldr	r0, [r7, #4]
 800af90:	f000 ff56 	bl	800be40 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSG_>
  }
 800af94:	bf00      	nop
 800af96:	3708      	adds	r7, #8
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}

0800af9c <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b086      	sub	sp, #24
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	60f8      	str	r0, [r7, #12]
 800afa4:	60b9      	str	r1, [r7, #8]
 800afa6:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800afac:	687a      	ldr	r2, [r7, #4]
 800afae:	68b9      	ldr	r1, [r7, #8]
 800afb0:	6978      	ldr	r0, [r7, #20]
 800afb2:	f000 ff55 	bl	800be60 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_>
}
 800afb6:	bf00      	nop
 800afb8:	3718      	adds	r7, #24
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}

0800afbe <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>:
  Derived& derived() { return *static_cast<Derived*>(this); }
 800afbe:	b480      	push	{r7}
 800afc0:	b083      	sub	sp, #12
 800afc2:	af00      	add	r7, sp, #0
 800afc4:	6078      	str	r0, [r7, #4]
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	4618      	mov	r0, r3
 800afca:	370c      	adds	r7, #12
 800afcc:	46bd      	mov	sp, r7
 800afce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd2:	4770      	bx	lr

0800afd4 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b086      	sub	sp, #24
 800afd8:	af00      	add	r7, sp, #0
 800afda:	60f8      	str	r0, [r7, #12]
 800afdc:	60b9      	str	r1, [r7, #8]
 800afde:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800afe4:	687a      	ldr	r2, [r7, #4]
 800afe6:	68b9      	ldr	r1, [r7, #8]
 800afe8:	6978      	ldr	r0, [r7, #20]
 800afea:	f000 ff73 	bl	800bed4 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_>
}
 800afee:	bf00      	nop
 800aff0:	3718      	adds	r7, #24
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}

0800aff6 <_ZNK5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC const T *data() const { return m_data.array; }
 800aff6:	b480      	push	{r7}
 800aff8:	b083      	sub	sp, #12
 800affa:	af00      	add	r7, sp, #0
 800affc:	6078      	str	r0, [r7, #4]
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	4618      	mov	r0, r3
 800b002:	370c      	adds	r7, #12
 800b004:	46bd      	mov	sp, r7
 800b006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00a:	4770      	bx	lr

0800b00c <_ZNK5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EE11outerStrideEv>:
    inline Index outerStride() const EIGEN_NOEXCEPT { return this->innerSize(); }
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b082      	sub	sp, #8
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
 800b014:	6878      	ldr	r0, [r7, #4]
 800b016:	f000 ff9c 	bl	800bf52 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE9innerSizeEv>
 800b01a:	4603      	mov	r3, r0
 800b01c:	4618      	mov	r0, r3
 800b01e:	3708      	adds	r7, #8
 800b020:	46bd      	mov	sp, r7
 800b022:	bd80      	pop	{r7, pc}

0800b024 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800b024:	b580      	push	{r7, lr}
 800b026:	b084      	sub	sp, #16
 800b028:	af00      	add	r7, sp, #0
 800b02a:	60f8      	str	r0, [r7, #12]
 800b02c:	60b9      	str	r1, [r7, #8]
 800b02e:	607a      	str	r2, [r7, #4]
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	687a      	ldr	r2, [r7, #4]
 800b034:	68b9      	ldr	r1, [r7, #8]
 800b036:	4618      	mov	r0, r3
 800b038:	f000 ff97 	bl	800bf6a <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	db07      	blt.n	800b052 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEC1ERS3_i+0x2e>
 800b042:	68bb      	ldr	r3, [r7, #8]
 800b044:	4618      	mov	r0, r3
 800b046:	f7f9 f9a6 	bl	8004396 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800b04a:	4602      	mov	r2, r0
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	4293      	cmp	r3, r2
 800b050:	db05      	blt.n	800b05e <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEC1ERS3_i+0x3a>
 800b052:	4b06      	ldr	r3, [pc, #24]	; (800b06c <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEC1ERS3_i+0x48>)
 800b054:	4a06      	ldr	r2, [pc, #24]	; (800b070 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEC1ERS3_i+0x4c>)
 800b056:	2178      	movs	r1, #120	; 0x78
 800b058:	4806      	ldr	r0, [pc, #24]	; (800b074 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEC1ERS3_i+0x50>)
 800b05a:	f011 ffeb 	bl	801d034 <__assert_func>
 800b05e:	bf00      	nop
    }
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	4618      	mov	r0, r3
 800b064:	3710      	adds	r7, #16
 800b066:	46bd      	mov	sp, r7
 800b068:	bd80      	pop	{r7, pc}
 800b06a:	bf00      	nop
 800b06c:	08023a20 	.word	0x08023a20
 800b070:	0802417c 	.word	0x0802417c
 800b074:	08023ba4 	.word	0x08023ba4

0800b078 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800b078:	b480      	push	{r7}
 800b07a:	b083      	sub	sp, #12
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	4618      	mov	r0, r3
 800b084:	370c      	adds	r7, #12
 800b086:	46bd      	mov	sp, r7
 800b088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08c:	4770      	bx	lr

0800b08e <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1Ev>:
 800b08e:	b580      	push	{r7, lr}
 800b090:	b082      	sub	sp, #8
 800b092:	af00      	add	r7, sp, #0
 800b094:	6078      	str	r0, [r7, #4]
 800b096:	6878      	ldr	r0, [r7, #4]
 800b098:	f000 ff78 	bl	800bf8c <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1Ev>
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	4618      	mov	r0, r3
 800b0a0:	3708      	adds	r7, #8
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	bd80      	pop	{r7, pc}

0800b0a6 <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 800b0a6:	b580      	push	{r7, lr}
 800b0a8:	b082      	sub	sp, #8
 800b0aa:	af00      	add	r7, sp, #0
 800b0ac:	6078      	str	r0, [r7, #4]
 800b0ae:	6878      	ldr	r0, [r7, #4]
 800b0b0:	f7ff ffed 	bl	800b08e <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1Ev>
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	3708      	adds	r7, #8
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}

0800b0be <_ZN5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1ERS6_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 800b0be:	b5b0      	push	{r4, r5, r7, lr}
 800b0c0:	b082      	sub	sp, #8
 800b0c2:	af00      	add	r7, sp, #0
 800b0c4:	6078      	str	r0, [r7, #4]
 800b0c6:	6039      	str	r1, [r7, #0]
 800b0c8:	6878      	ldr	r0, [r7, #4]
 800b0ca:	f7ff ffec 	bl	800b0a6 <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS_5DenseEEC1Ev>
 800b0ce:	687a      	ldr	r2, [r7, #4]
 800b0d0:	683b      	ldr	r3, [r7, #0]
 800b0d2:	4614      	mov	r4, r2
 800b0d4:	461d      	mov	r5, r3
 800b0d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b0d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b0da:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b0de:	e884 0003 	stmia.w	r4, {r0, r1}
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	3708      	adds	r7, #8
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	bdb0      	pop	{r4, r5, r7, pc}

0800b0ec <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b084      	sub	sp, #16
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	60f8      	str	r0, [r7, #12]
 800b0f4:	60b9      	str	r1, [r7, #8]
 800b0f6:	607a      	str	r2, [r7, #4]
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	687a      	ldr	r2, [r7, #4]
 800b0fc:	68b9      	ldr	r1, [r7, #8]
 800b0fe:	4618      	mov	r0, r3
 800b100:	f000 ff4f 	bl	800bfa2 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2b00      	cmp	r3, #0
 800b108:	db0f      	blt.n	800b12a <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i+0x3e>
 800b10a:	68bb      	ldr	r3, [r7, #8]
 800b10c:	4618      	mov	r0, r3
 800b10e:	f7fa f88c 	bl	800522a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800b112:	4602      	mov	r2, r0
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	4293      	cmp	r3, r2
 800b118:	db0d      	blt.n	800b136 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i+0x4a>
 800b11a:	68bb      	ldr	r3, [r7, #8]
 800b11c:	4618      	mov	r0, r3
 800b11e:	f7fa f88f 	bl	8005240 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800b122:	4602      	mov	r2, r0
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	4293      	cmp	r3, r2
 800b128:	db05      	blt.n	800b136 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i+0x4a>
 800b12a:	4b06      	ldr	r3, [pc, #24]	; (800b144 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i+0x58>)
 800b12c:	4a06      	ldr	r2, [pc, #24]	; (800b148 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i+0x5c>)
 800b12e:	2178      	movs	r1, #120	; 0x78
 800b130:	4806      	ldr	r0, [pc, #24]	; (800b14c <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i+0x60>)
 800b132:	f011 ff7f 	bl	801d034 <__assert_func>
 800b136:	bf00      	nop
    }
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	4618      	mov	r0, r3
 800b13c:	3710      	adds	r7, #16
 800b13e:	46bd      	mov	sp, r7
 800b140:	bd80      	pop	{r7, pc}
 800b142:	bf00      	nop
 800b144:	08023a20 	.word	0x08023a20
 800b148:	08024258 	.word	0x08024258
 800b14c:	08023ba4 	.word	0x08023ba4

0800b150 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE7derivedEv>:
 800b150:	b480      	push	{r7}
 800b152:	b083      	sub	sp, #12
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	4618      	mov	r0, r3
 800b15c:	370c      	adds	r7, #12
 800b15e:	46bd      	mov	sp, r7
 800b160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b164:	4770      	bx	lr

0800b166 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE7derivedEv>:
 800b166:	b480      	push	{r7}
 800b168:	b083      	sub	sp, #12
 800b16a:	af00      	add	r7, sp, #0
 800b16c:	6078      	str	r0, [r7, #4]
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	4618      	mov	r0, r3
 800b172:	370c      	adds	r7, #12
 800b174:	46bd      	mov	sp, r7
 800b176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17a:	4770      	bx	lr

0800b17c <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1Ev>:
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b082      	sub	sp, #8
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
 800b184:	6878      	ldr	r0, [r7, #4]
 800b186:	f000 ff1d 	bl	800bfc4 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1Ev>
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	4618      	mov	r0, r3
 800b18e:	3708      	adds	r7, #8
 800b190:	46bd      	mov	sp, r7
 800b192:	bd80      	pop	{r7, pc}

0800b194 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 800b194:	b580      	push	{r7, lr}
 800b196:	b082      	sub	sp, #8
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
 800b19c:	6878      	ldr	r0, [r7, #4]
 800b19e:	f7ff ffed 	bl	800b17c <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1Ev>
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	3708      	adds	r7, #8
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	bd80      	pop	{r7, pc}

0800b1ac <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b082      	sub	sp, #8
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	f000 ff0f 	bl	800bfda <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE4colsEv>
 800b1bc:	4603      	mov	r3, r0
 800b1be:	4618      	mov	r0, r3
 800b1c0:	3708      	adds	r7, #8
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	bd80      	pop	{r7, pc}

0800b1c6 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 800b1c6:	b580      	push	{r7, lr}
 800b1c8:	b082      	sub	sp, #8
 800b1ca:	af00      	add	r7, sp, #0
 800b1cc:	6078      	str	r0, [r7, #4]
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	f000 ff0d 	bl	800bff0 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE4rowsEv>
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	4618      	mov	r0, r3
 800b1da:	3708      	adds	r7, #8
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	bd80      	pop	{r7, pc}

0800b1e0 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b082      	sub	sp, #8
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
 800b1e8:	f7fa fe01 	bl	8005dee <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800b1ec:	4603      	mov	r3, r0
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	3708      	adds	r7, #8
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	bd80      	pop	{r7, pc}

0800b1f6 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 800b1f6:	b580      	push	{r7, lr}
 800b1f8:	b082      	sub	sp, #8
 800b1fa:	af00      	add	r7, sp, #0
 800b1fc:	6078      	str	r0, [r7, #4]
 800b1fe:	f7fa fdf6 	bl	8005dee <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800b202:	4603      	mov	r3, r0
 800b204:	4618      	mov	r0, r3
 800b206:	3708      	adds	r7, #8
 800b208:	46bd      	mov	sp, r7
 800b20a:	bd80      	pop	{r7, pc}

0800b20c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERSC_RSG_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 800b20c:	b5b0      	push	{r4, r5, r7, lr}
 800b20e:	b084      	sub	sp, #16
 800b210:	af00      	add	r7, sp, #0
 800b212:	60f8      	str	r0, [r7, #12]
 800b214:	60b9      	str	r1, [r7, #8]
 800b216:	607a      	str	r2, [r7, #4]
 800b218:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 800b21a:	68f8      	ldr	r0, [r7, #12]
 800b21c:	f7ff ffba 	bl	800b194 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEENS_5DenseEEC1Ev>
 800b220:	68fa      	ldr	r2, [r7, #12]
 800b222:	68bb      	ldr	r3, [r7, #8]
 800b224:	4614      	mov	r4, r2
 800b226:	461d      	mov	r5, r3
 800b228:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b22a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b22c:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b230:	e884 0003 	stmia.w	r4, {r0, r1}
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	f103 0218 	add.w	r2, r3, #24
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	4614      	mov	r4, r2
 800b23e:	461d      	mov	r5, r3
 800b240:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b242:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b244:	682b      	ldr	r3, [r5, #0]
 800b246:	6023      	str	r3, [r4, #0]
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	332c      	adds	r3, #44	; 0x2c
 800b24c:	6839      	ldr	r1, [r7, #0]
 800b24e:	4618      	mov	r0, r3
 800b250:	f7f9 fb26 	bl	80048a0 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 800b254:	68b8      	ldr	r0, [r7, #8]
 800b256:	f7ff ffa9 	bl	800b1ac <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4rowsEv>
 800b25a:	4604      	mov	r4, r0
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	4618      	mov	r0, r3
 800b260:	f7ff ffbe 	bl	800b1e0 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE4rowsEv>
 800b264:	4603      	mov	r3, r0
 800b266:	429c      	cmp	r4, r3
 800b268:	d10a      	bne.n	800b280 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x74>
 800b26a:	68b8      	ldr	r0, [r7, #8]
 800b26c:	f7ff ffab 	bl	800b1c6 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4colsEv>
 800b270:	4604      	mov	r4, r0
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	4618      	mov	r0, r3
 800b276:	f7ff ffbe 	bl	800b1f6 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE4colsEv>
 800b27a:	4603      	mov	r3, r0
 800b27c:	429c      	cmp	r4, r3
 800b27e:	d005      	beq.n	800b28c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x80>
 800b280:	4b05      	ldr	r3, [pc, #20]	; (800b298 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x8c>)
 800b282:	4a06      	ldr	r2, [pc, #24]	; (800b29c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x90>)
 800b284:	2174      	movs	r1, #116	; 0x74
 800b286:	4806      	ldr	r0, [pc, #24]	; (800b2a0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x94>)
 800b288:	f011 fed4 	bl	801d034 <__assert_func>
    }
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	4618      	mov	r0, r3
 800b290:	3710      	adds	r7, #16
 800b292:	46bd      	mov	sp, r7
 800b294:	bdb0      	pop	{r4, r5, r7, pc}
 800b296:	bf00      	nop
 800b298:	0801ee9c 	.word	0x0801ee9c
 800b29c:	08024334 	.word	0x08024334
 800b2a0:	0801f100 	.word	0x0801f100

0800b2a4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b082      	sub	sp, #8
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	f000 f809 	bl	800b2c4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE7derivedEv>
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	f000 fea6 	bl	800c006 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE4colsEv>
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	4618      	mov	r0, r3
 800b2be:	3708      	adds	r7, #8
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bd80      	pop	{r7, pc}

0800b2c4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800b2c4:	b480      	push	{r7}
 800b2c6:	b083      	sub	sp, #12
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	370c      	adds	r7, #12
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d8:	4770      	bx	lr

0800b2da <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 800b2da:	b580      	push	{r7, lr}
 800b2dc:	b082      	sub	sp, #8
 800b2de:	af00      	add	r7, sp, #0
 800b2e0:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	f7ff ff61 	bl	800b1ac <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4rowsEv>
 800b2ea:	4603      	mov	r3, r0
    }
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	3708      	adds	r7, #8
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	bd80      	pop	{r7, pc}

0800b2f4 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b082      	sub	sp, #8
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
 800b2fc:	6878      	ldr	r0, [r7, #4]
 800b2fe:	f000 feb4 	bl	800c06a <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEED1Ev>
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	4618      	mov	r0, r3
 800b306:	3708      	adds	r7, #8
 800b308:	46bd      	mov	sp, r7
 800b30a:	bd80      	pop	{r7, pc}

0800b30c <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b082      	sub	sp, #8
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	4618      	mov	r0, r3
 800b318:	f7ff ffec 	bl	800b2f4 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	4618      	mov	r0, r3
 800b320:	3708      	adds	r7, #8
 800b322:	46bd      	mov	sp, r7
 800b324:	bd80      	pop	{r7, pc}

0800b326 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800b326:	b580      	push	{r7, lr}
 800b328:	b082      	sub	sp, #8
 800b32a:	af00      	add	r7, sp, #0
 800b32c:	6078      	str	r0, [r7, #4]
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	4618      	mov	r0, r3
 800b332:	f7ff ffeb 	bl	800b30c <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EED1Ev>
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	4618      	mov	r0, r3
 800b33a:	3708      	adds	r7, #8
 800b33c:	46bd      	mov	sp, r7
 800b33e:	bd80      	pop	{r7, pc}

0800b340 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<const T>
 800b340:	b580      	push	{r7, lr}
 800b342:	b082      	sub	sp, #8
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	4618      	mov	r0, r3
 800b34c:	f7ff ffeb 	bl	800b326 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEED1Ev>
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	4618      	mov	r0, r3
 800b354:	3708      	adds	r7, #8
 800b356:	46bd      	mov	sp, r7
 800b358:	bd80      	pop	{r7, pc}

0800b35a <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 800b35a:	b580      	push	{r7, lr}
 800b35c:	b082      	sub	sp, #8
 800b35e:	af00      	add	r7, sp, #0
 800b360:	6078      	str	r0, [r7, #4]
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	4618      	mov	r0, r3
 800b366:	f7ff ffeb 	bl	800b340 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEED1Ev>
 800b36a:	6878      	ldr	r0, [r7, #4]
 800b36c:	f000 fe72 	bl	800c054 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEED1Ev>
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	4618      	mov	r0, r3
 800b374:	3708      	adds	r7, #8
 800b376:	46bd      	mov	sp, r7
 800b378:	bd80      	pop	{r7, pc}

0800b37a <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 800b37a:	b580      	push	{r7, lr}
 800b37c:	b082      	sub	sp, #8
 800b37e:	af00      	add	r7, sp, #0
 800b380:	6078      	str	r0, [r7, #4]
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	4618      	mov	r0, r3
 800b386:	f7ff ffe8 	bl	800b35a <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEENS0_10IndexBasedEfED1Ev>
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	4618      	mov	r0, r3
 800b38e:	3708      	adds	r7, #8
 800b390:	46bd      	mov	sp, r7
 800b392:	bd80      	pop	{r7, pc}

0800b394 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEED1Ev>:
struct evaluator<const T>
 800b394:	b580      	push	{r7, lr}
 800b396:	b082      	sub	sp, #8
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	4618      	mov	r0, r3
 800b3a0:	f7ff ffeb 	bl	800b37a <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEED1Ev>
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	3708      	adds	r7, #8
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	bd80      	pop	{r7, pc}

0800b3ae <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_ED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 800b3ae:	b580      	push	{r7, lr}
 800b3b0:	b082      	sub	sp, #8
 800b3b2:	af00      	add	r7, sp, #0
 800b3b4:	6078      	str	r0, [r7, #4]
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	f000 fe62 	bl	800c080 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEED1Ev>
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	4618      	mov	r0, r3
 800b3c0:	3708      	adds	r7, #8
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	bd80      	pop	{r7, pc}

0800b3c6 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800b3c6:	b580      	push	{r7, lr}
 800b3c8:	b082      	sub	sp, #8
 800b3ca:	af00      	add	r7, sp, #0
 800b3cc:	6078      	str	r0, [r7, #4]
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	f7ff ffec 	bl	800b3ae <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_ED1Ev>
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	4618      	mov	r0, r3
 800b3da:	3708      	adds	r7, #8
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	bd80      	pop	{r7, pc}

0800b3e0 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b082      	sub	sp, #8
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	f7ff ffeb 	bl	800b3c6 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EED1Ev>
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	3708      	adds	r7, #8
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bd80      	pop	{r7, pc}

0800b3fa <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEED1Ev>:
struct evaluator<const T>
 800b3fa:	b580      	push	{r7, lr}
 800b3fc:	b082      	sub	sp, #8
 800b3fe:	af00      	add	r7, sp, #0
 800b400:	6078      	str	r0, [r7, #4]
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	4618      	mov	r0, r3
 800b406:	f7ff ffeb 	bl	800b3e0 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEED1Ev>
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	4618      	mov	r0, r3
 800b40e:	3708      	adds	r7, #8
 800b410:	46bd      	mov	sp, r7
 800b412:	bd80      	pop	{r7, pc}

0800b414 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>:
  struct Data
 800b414:	b580      	push	{r7, lr}
 800b416:	b082      	sub	sp, #8
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	330c      	adds	r3, #12
 800b420:	4618      	mov	r0, r3
 800b422:	f7ff ffea 	bl	800b3fa <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEED1Ev>
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	3304      	adds	r3, #4
 800b42a:	4618      	mov	r0, r3
 800b42c:	f7ff ffb2 	bl	800b394 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEED1Ev>
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	4618      	mov	r0, r3
 800b434:	3708      	adds	r7, #8
 800b436:	46bd      	mov	sp, r7
 800b438:	bd80      	pop	{r7, pc}

0800b43a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 800b43a:	b580      	push	{r7, lr}
 800b43c:	b082      	sub	sp, #8
 800b43e:	af00      	add	r7, sp, #0
 800b440:	6078      	str	r0, [r7, #4]
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	4618      	mov	r0, r3
 800b446:	f7ff ffe5 	bl	800b414 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f000 fdf7 	bl	800c03e <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEED1Ev>
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	4618      	mov	r0, r3
 800b454:	3708      	adds	r7, #8
 800b456:	46bd      	mov	sp, r7
 800b458:	bd80      	pop	{r7, pc}

0800b45a <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 800b45a:	b580      	push	{r7, lr}
 800b45c:	b082      	sub	sp, #8
 800b45e:	af00      	add	r7, sp, #0
 800b460:	6078      	str	r0, [r7, #4]
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	4618      	mov	r0, r3
 800b466:	f7ff ffe8 	bl	800b43a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffED1Ev>
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	4618      	mov	r0, r3
 800b46e:	3708      	adds	r7, #8
 800b470:	46bd      	mov	sp, r7
 800b472:	bd80      	pop	{r7, pc}

0800b474 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 800b474:	b580      	push	{r7, lr}
 800b476:	b082      	sub	sp, #8
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	4618      	mov	r0, r3
 800b480:	f7ff ffeb 	bl	800b45a <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEED1Ev>
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	4618      	mov	r0, r3
 800b488:	3708      	adds	r7, #8
 800b48a:	46bd      	mov	sp, r7
 800b48c:	bd80      	pop	{r7, pc}
	...

0800b490 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 800b490:	b580      	push	{r7, lr}
 800b492:	ed2d 8b02 	vpush	{d8}
 800b496:	b088      	sub	sp, #32
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
 800b49c:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 800b49e:	6878      	ldr	r0, [r7, #4]
 800b4a0:	f7ff f897 	bl	800a5d2 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE4rowsEv>
 800b4a4:	4603      	mov	r3, r0
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	dd05      	ble.n	800b4b6 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 800b4aa:	6878      	ldr	r0, [r7, #4]
 800b4ac:	f7ff fefa 	bl	800b2a4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE4colsEv>
 800b4b0:	4603      	mov	r3, r0
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	dc06      	bgt.n	800b4c4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 800b4b6:	4b16      	ldr	r3, [pc, #88]	; (800b510 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 800b4b8:	4a16      	ldr	r2, [pc, #88]	; (800b514 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 800b4ba:	f240 119b 	movw	r1, #411	; 0x19b
 800b4be:	4816      	ldr	r0, [pc, #88]	; (800b518 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 800b4c0:	f011 fdb8 	bl	801d034 <__assert_func>
 800b4c4:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800b4c6:	6878      	ldr	r0, [r7, #4]
 800b4c8:	f7ff fefc 	bl	800b2c4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE7derivedEv>
 800b4cc:	4602      	mov	r2, r0
 800b4ce:	f107 030c 	add.w	r3, r7, #12
 800b4d2:	4611      	mov	r1, r2
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	f000 fda3 	bl	800c020 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1ERKSI_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800b4da:	6878      	ldr	r0, [r7, #4]
 800b4dc:	f7ff fef2 	bl	800b2c4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE7derivedEv>
 800b4e0:	4602      	mov	r2, r0
 800b4e2:	f107 030c 	add.w	r3, r7, #12
 800b4e6:	6839      	ldr	r1, [r7, #0]
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	f000 fdd4 	bl	800c096 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>
 800b4ee:	eeb0 8a40 	vmov.f32	s16, s0
 800b4f2:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800b4f4:	f107 030c 	add.w	r3, r7, #12
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	f7ff ffbb 	bl	800b474 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800b4fe:	eef0 7a48 	vmov.f32	s15, s16
}
 800b502:	eeb0 0a67 	vmov.f32	s0, s15
 800b506:	3720      	adds	r7, #32
 800b508:	46bd      	mov	sp, r7
 800b50a:	ecbd 8b02 	vpop	{d8}
 800b50e:	bd80      	pop	{r7, pc}
 800b510:	08023f1c 	.word	0x08023f1c
 800b514:	0802457c 	.word	0x0802457c
 800b518:	08024128 	.word	0x08024128

0800b51c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEESF_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b082      	sub	sp, #8
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
 800b524:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 800b526:	6839      	ldr	r1, [r7, #0]
 800b528:	6878      	ldr	r0, [r7, #4]
 800b52a:	f000 fdc5 	bl	800c0b8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 800b52e:	bf00      	nop
 800b530:	3708      	adds	r7, #8
 800b532:	46bd      	mov	sp, r7
 800b534:	bd80      	pop	{r7, pc}

0800b536 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEELi4ENS_10DenseShapeESF_ffE5coeffEi>:
  const CoeffReturnType coeff(Index index) const
 800b536:	b580      	push	{r7, lr}
 800b538:	b0a2      	sub	sp, #136	; 0x88
 800b53a:	af00      	add	r7, sp, #0
 800b53c:	6078      	str	r0, [r7, #4]
 800b53e:	6039      	str	r1, [r7, #0]
    const Index row = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? 0 : index;
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    const Index col = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? index : 0;
 800b546:	2300      	movs	r3, #0
 800b548:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	6819      	ldr	r1, [r3, #0]
 800b550:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800b554:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800b558:	4618      	mov	r0, r3
 800b55a:	f7fe ffe5 	bl	800a528 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE3rowEi>
 800b55e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b562:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800b566:	4611      	mov	r1, r2
 800b568:	4618      	mov	r0, r3
 800b56a:	f7fe fff0 	bl	800a54e <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE9transposeEv>
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	1d19      	adds	r1, r3, #4
 800b572:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800b576:	2200      	movs	r2, #0
 800b578:	4618      	mov	r0, r3
 800b57a:	f7fe fff9 	bl	800a570 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE3colEi>
 800b57e:	f107 030c 	add.w	r3, r7, #12
 800b582:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800b586:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800b58a:	4618      	mov	r0, r3
 800b58c:	f7ff f803 	bl	800a596 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE12cwiseProductINS2_IKNS3_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>
 800b590:	f107 030c 	add.w	r3, r7, #12
 800b594:	4618      	mov	r0, r3
 800b596:	f7ff f82c 	bl	800a5f2 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE3sumEv>
 800b59a:	eef0 7a40 	vmov.f32	s15, s0
  }
 800b59e:	eeb0 0a67 	vmov.f32	s0, s15
 800b5a2:	3788      	adds	r7, #136	; 0x88
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	bd80      	pop	{r7, pc}

0800b5a8 <_ZNK5Eigen8internal13add_assign_opIffE11assignCoeffERfRKf>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a += b; }
 800b5a8:	b480      	push	{r7}
 800b5aa:	b085      	sub	sp, #20
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	60f8      	str	r0, [r7, #12]
 800b5b0:	60b9      	str	r1, [r7, #8]
 800b5b2:	607a      	str	r2, [r7, #4]
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	ed93 7a00 	vldr	s14, [r3]
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	edd3 7a00 	vldr	s15, [r3]
 800b5c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b5c4:	68bb      	ldr	r3, [r7, #8]
 800b5c6:	edc3 7a00 	vstr	s15, [r3]
 800b5ca:	bf00      	nop
 800b5cc:	3714      	adds	r7, #20
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d4:	4770      	bx	lr

0800b5d6 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi2ELi3EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800b5d6:	b580      	push	{r7, lr}
 800b5d8:	b082      	sub	sp, #8
 800b5da:	af00      	add	r7, sp, #0
 800b5dc:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800b5de:	2102      	movs	r1, #2
 800b5e0:	6878      	ldr	r0, [r7, #4]
 800b5e2:	f7ff f863 	bl	800a6ac <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductIS4_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS6_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800b5e6:	6878      	ldr	r0, [r7, #4]
 800b5e8:	f000 fd87 	bl	800c0fa <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi3ELi3EE3runERSL_>
  }
 800b5ec:	bf00      	nop
 800b5ee:	3708      	adds	r7, #8
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	bd80      	pop	{r7, pc}

0800b5f4 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b086      	sub	sp, #24
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	60f8      	str	r0, [r7, #12]
 800b5fc:	60b9      	str	r1, [r7, #8]
 800b5fe:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800b604:	687a      	ldr	r2, [r7, #4]
 800b606:	68b9      	ldr	r1, [r7, #8]
 800b608:	6978      	ldr	r0, [r7, #20]
 800b60a:	f000 fd80 	bl	800c10e <_ZN5Eigen8internal30assignment_from_xpr_op_productINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_9assign_opIffEENS0_13sub_assign_opIffEEE3runINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KS7_EES9_EEvRS3_RKT_RKT0_>
}
 800b60e:	bf00      	nop
 800b610:	3718      	adds	r7, #24
 800b612:	46bd      	mov	sp, r7
 800b614:	bd80      	pop	{r7, pc}

0800b616 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3colEi>:
ConstColXpr col(Index i) const
 800b616:	b580      	push	{r7, lr}
 800b618:	b084      	sub	sp, #16
 800b61a:	af00      	add	r7, sp, #0
 800b61c:	60f8      	str	r0, [r7, #12]
 800b61e:	60b9      	str	r1, [r7, #8]
 800b620:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 800b622:	68b8      	ldr	r0, [r7, #8]
 800b624:	f7f9 fa1b 	bl	8004a5e <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800b628:	4603      	mov	r3, r0
 800b62a:	687a      	ldr	r2, [r7, #4]
 800b62c:	4619      	mov	r1, r3
 800b62e:	68f8      	ldr	r0, [r7, #12]
 800b630:	f000 fd98 	bl	800c164 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i>
}
 800b634:	68f8      	ldr	r0, [r7, #12]
 800b636:	3710      	adds	r7, #16
 800b638:	46bd      	mov	sp, r7
 800b63a:	bd80      	pop	{r7, pc}

0800b63c <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IS5_Li3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSD_6traitsIT_E6ScalarEEEKS8_KSG_EERKNS0_ISG_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 800b63c:	b5b0      	push	{r4, r5, r7, lr}
 800b63e:	b086      	sub	sp, #24
 800b640:	af00      	add	r7, sp, #0
 800b642:	60f8      	str	r0, [r7, #12]
 800b644:	60b9      	str	r1, [r7, #8]
 800b646:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 800b648:	68b8      	ldr	r0, [r7, #8]
 800b64a:	f7ff fa67 	bl	800ab1c <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE7derivedEv>
 800b64e:	4604      	mov	r4, r0
 800b650:	6878      	ldr	r0, [r7, #4]
 800b652:	f000 fdaf 	bl	800c1b4 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE7derivedEv>
 800b656:	4605      	mov	r5, r0
 800b658:	f107 0314 	add.w	r3, r7, #20
 800b65c:	4618      	mov	r0, r3
 800b65e:	f7f9 f895 	bl	800478c <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 800b662:	f107 0314 	add.w	r3, r7, #20
 800b666:	462a      	mov	r2, r5
 800b668:	4621      	mov	r1, r4
 800b66a:	68f8      	ldr	r0, [r7, #12]
 800b66c:	f000 fddc 	bl	800c228 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEEC1ERSC_RSE_RKS3_>
}
 800b670:	68f8      	ldr	r0, [r7, #12]
 800b672:	3718      	adds	r7, #24
 800b674:	46bd      	mov	sp, r7
 800b676:	bdb0      	pop	{r4, r5, r7, pc}

0800b678 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 800b678:	b580      	push	{r7, lr}
 800b67a:	b082      	sub	sp, #8
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
 800b680:	6878      	ldr	r0, [r7, #4]
 800b682:	f000 fe2f 	bl	800c2e4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE7derivedEv>
 800b686:	4603      	mov	r3, r0
 800b688:	4618      	mov	r0, r3
 800b68a:	f000 fe36 	bl	800c2fa <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE4rowsEv>
 800b68e:	4603      	mov	r3, r0
 800b690:	4618      	mov	r0, r3
 800b692:	3708      	adds	r7, #8
 800b694:	46bd      	mov	sp, r7
 800b696:	bd80      	pop	{r7, pc}

0800b698 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 800b698:	b590      	push	{r4, r7, lr}
 800b69a:	b085      	sub	sp, #20
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 800b6a0:	6878      	ldr	r0, [r7, #4]
 800b6a2:	f000 fe1f 	bl	800c2e4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE7derivedEv>
 800b6a6:	4604      	mov	r4, r0
 800b6a8:	f107 030c 	add.w	r3, r7, #12
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	f7f9 fb64 	bl	8004d7a <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 800b6b2:	f107 030c 	add.w	r3, r7, #12
 800b6b6:	4619      	mov	r1, r3
 800b6b8:	4620      	mov	r0, r4
 800b6ba:	f000 fe9b 	bl	800c3f4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 800b6be:	eef0 7a40 	vmov.f32	s15, s0
 800b6c2:	bf00      	nop
}
 800b6c4:	eeb0 0a67 	vmov.f32	s0, s15
 800b6c8:	3714      	adds	r7, #20
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	bd90      	pop	{r4, r7, pc}

0800b6ce <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800b6ce:	b580      	push	{r7, lr}
 800b6d0:	b082      	sub	sp, #8
 800b6d2:	af00      	add	r7, sp, #0
 800b6d4:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800b6d6:	2201      	movs	r2, #1
 800b6d8:	2101      	movs	r1, #1
 800b6da:	6878      	ldr	r0, [r7, #4]
 800b6dc:	f7fe f9a8 	bl	8009a30 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800b6e0:	6878      	ldr	r0, [r7, #4]
 800b6e2:	f000 fecd 	bl	800c480 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSL_>
  }
 800b6e6:	bf00      	nop
 800b6e8:	3708      	adds	r7, #8
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd80      	pop	{r7, pc}

0800b6ee <_ZN5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKS8_>:
  EIGEN_DEVICE_FUNC explicit evaluator(const XprType& n)
 800b6ee:	b590      	push	{r4, r7, lr}
 800b6f0:	b083      	sub	sp, #12
 800b6f2:	af00      	add	r7, sp, #0
 800b6f4:	6078      	str	r0, [r7, #4]
 800b6f6:	6039      	str	r1, [r7, #0]
    : m_functor(n.functor()), m_wrapper()
 800b6f8:	6878      	ldr	r0, [r7, #4]
 800b6fa:	f000 fedd 	bl	800c4b8 <_ZN5Eigen8internal14evaluator_baseINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 800b6fe:	687c      	ldr	r4, [r7, #4]
 800b700:	6838      	ldr	r0, [r7, #0]
 800b702:	f000 fecd 	bl	800c4a0 <_ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7functorEv>
 800b706:	4603      	mov	r3, r0
 800b708:	4619      	mov	r1, r3
 800b70a:	4620      	mov	r0, r4
 800b70c:	f7f9 f8b8 	bl	8004880 <_ZN5Eigen8internal18scalar_constant_opIfEC1ERKS2_>
  }
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	4618      	mov	r0, r3
 800b714:	370c      	adds	r7, #12
 800b716:	46bd      	mov	sp, r7
 800b718:	bd90      	pop	{r4, r7, pc}
	...

0800b71c <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERSE_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b084      	sub	sp, #16
 800b720:	af00      	add	r7, sp, #0
 800b722:	60f8      	str	r0, [r7, #12]
 800b724:	60b9      	str	r1, [r7, #8]
 800b726:	607a      	str	r2, [r7, #4]
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	687a      	ldr	r2, [r7, #4]
 800b72c:	68b9      	ldr	r1, [r7, #8]
 800b72e:	4618      	mov	r0, r3
 800b730:	f000 fecd 	bl	800c4ce <_ZN5Eigen9BlockImplIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ENS_5DenseEEC1ERSE_i>
      eigen_assert( (i>=0) && (
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2b00      	cmp	r3, #0
 800b738:	db06      	blt.n	800b748 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERSE_i+0x2c>
 800b73a:	68b8      	ldr	r0, [r7, #8]
 800b73c:	f7fb fe6d 	bl	800741a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4rowsEv>
 800b740:	4602      	mov	r2, r0
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	4293      	cmp	r3, r2
 800b746:	db05      	blt.n	800b754 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERSE_i+0x38>
 800b748:	4b05      	ldr	r3, [pc, #20]	; (800b760 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERSE_i+0x44>)
 800b74a:	4a06      	ldr	r2, [pc, #24]	; (800b764 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERSE_i+0x48>)
 800b74c:	2178      	movs	r1, #120	; 0x78
 800b74e:	4806      	ldr	r0, [pc, #24]	; (800b768 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERSE_i+0x4c>)
 800b750:	f011 fc70 	bl	801d034 <__assert_func>
 800b754:	bf00      	nop
    }
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	4618      	mov	r0, r3
 800b75a:	3710      	adds	r7, #16
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bd80      	pop	{r7, pc}
 800b760:	08023a20 	.word	0x08023a20
 800b764:	08024744 	.word	0x08024744
 800b768:	08023ba4 	.word	0x08023ba4

0800b76c <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800b76c:	b480      	push	{r7}
 800b76e:	b083      	sub	sp, #12
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	4618      	mov	r0, r3
 800b778:	370c      	adds	r7, #12
 800b77a:	46bd      	mov	sp, r7
 800b77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b780:	4770      	bx	lr

0800b782 <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1Ev>:
 800b782:	b580      	push	{r7, lr}
 800b784:	b082      	sub	sp, #8
 800b786:	af00      	add	r7, sp, #0
 800b788:	6078      	str	r0, [r7, #4]
 800b78a:	6878      	ldr	r0, [r7, #4]
 800b78c:	f000 feb0 	bl	800c4f0 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1Ev>
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	4618      	mov	r0, r3
 800b794:	3708      	adds	r7, #8
 800b796:	46bd      	mov	sp, r7
 800b798:	bd80      	pop	{r7, pc}

0800b79a <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 800b79a:	b580      	push	{r7, lr}
 800b79c:	b082      	sub	sp, #8
 800b79e:	af00      	add	r7, sp, #0
 800b7a0:	6078      	str	r0, [r7, #4]
 800b7a2:	6878      	ldr	r0, [r7, #4]
 800b7a4:	f7ff ffed 	bl	800b782 <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1Ev>
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	3708      	adds	r7, #8
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	bd80      	pop	{r7, pc}

0800b7b2 <_ZN5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERSH_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 800b7b2:	b580      	push	{r7, lr}
 800b7b4:	b082      	sub	sp, #8
 800b7b6:	af00      	add	r7, sp, #0
 800b7b8:	6078      	str	r0, [r7, #4]
 800b7ba:	6039      	str	r1, [r7, #0]
 800b7bc:	6878      	ldr	r0, [r7, #4]
 800b7be:	f7ff ffec 	bl	800b79a <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS_5DenseEEC1Ev>
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	6839      	ldr	r1, [r7, #0]
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	f7ff f86c 	bl	800a8a4 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERKSF_>
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	3708      	adds	r7, #8
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bd80      	pop	{r7, pc}
	...

0800b7d8 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEC1ERS5_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b084      	sub	sp, #16
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	60f8      	str	r0, [r7, #12]
 800b7e0:	60b9      	str	r1, [r7, #8]
 800b7e2:	607a      	str	r2, [r7, #4]
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	687a      	ldr	r2, [r7, #4]
 800b7e8:	68b9      	ldr	r1, [r7, #8]
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	f000 fe8b 	bl	800c506 <_ZN5Eigen9BlockImplIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ENS_5DenseEEC1ERS5_i>
      eigen_assert( (i>=0) && (
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	db06      	blt.n	800b804 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEC1ERS5_i+0x2c>
 800b7f6:	68b8      	ldr	r0, [r7, #8]
 800b7f8:	f7fb fe1d 	bl	8007436 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800b7fc:	4602      	mov	r2, r0
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	4293      	cmp	r3, r2
 800b802:	db05      	blt.n	800b810 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEC1ERS5_i+0x38>
 800b804:	4b05      	ldr	r3, [pc, #20]	; (800b81c <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEC1ERS5_i+0x44>)
 800b806:	4a06      	ldr	r2, [pc, #24]	; (800b820 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEC1ERS5_i+0x48>)
 800b808:	2178      	movs	r1, #120	; 0x78
 800b80a:	4806      	ldr	r0, [pc, #24]	; (800b824 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEC1ERS5_i+0x4c>)
 800b80c:	f011 fc12 	bl	801d034 <__assert_func>
    }
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	4618      	mov	r0, r3
 800b814:	3710      	adds	r7, #16
 800b816:	46bd      	mov	sp, r7
 800b818:	bd80      	pop	{r7, pc}
 800b81a:	bf00      	nop
 800b81c:	08023a20 	.word	0x08023a20
 800b820:	080248dc 	.word	0x080248dc
 800b824:	08023ba4 	.word	0x08023ba4

0800b828 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEE7derivedEv>:
 800b828:	b480      	push	{r7}
 800b82a:	b083      	sub	sp, #12
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	4618      	mov	r0, r3
 800b834:	370c      	adds	r7, #12
 800b836:	46bd      	mov	sp, r7
 800b838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83c:	4770      	bx	lr

0800b83e <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEE7derivedEv>:
 800b83e:	b480      	push	{r7}
 800b840:	b083      	sub	sp, #12
 800b842:	af00      	add	r7, sp, #0
 800b844:	6078      	str	r0, [r7, #4]
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	4618      	mov	r0, r3
 800b84a:	370c      	adds	r7, #12
 800b84c:	46bd      	mov	sp, r7
 800b84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b852:	4770      	bx	lr

0800b854 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1Ev>:
 800b854:	b580      	push	{r7, lr}
 800b856:	b082      	sub	sp, #8
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f000 fe63 	bl	800c528 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1Ev>
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	4618      	mov	r0, r3
 800b866:	3708      	adds	r7, #8
 800b868:	46bd      	mov	sp, r7
 800b86a:	bd80      	pop	{r7, pc}

0800b86c <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpIS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS8_EELi1ELi1ELb0EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b082      	sub	sp, #8
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
 800b874:	6878      	ldr	r0, [r7, #4]
 800b876:	f7ff ffed 	bl	800b854 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1Ev>
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	4618      	mov	r0, r3
 800b87e:	3708      	adds	r7, #8
 800b880:	46bd      	mov	sp, r7
 800b882:	bd80      	pop	{r7, pc}

0800b884 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 800b884:	b580      	push	{r7, lr}
 800b886:	b082      	sub	sp, #8
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	4618      	mov	r0, r3
 800b890:	f000 fe55 	bl	800c53e <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE4colsEv>
 800b894:	4603      	mov	r3, r0
 800b896:	4618      	mov	r0, r3
 800b898:	3708      	adds	r7, #8
 800b89a:	46bd      	mov	sp, r7
 800b89c:	bd80      	pop	{r7, pc}

0800b89e <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 800b89e:	b580      	push	{r7, lr}
 800b8a0:	b082      	sub	sp, #8
 800b8a2:	af00      	add	r7, sp, #0
 800b8a4:	6078      	str	r0, [r7, #4]
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	f000 fe53 	bl	800c554 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE4rowsEv>
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	3708      	adds	r7, #8
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	bd80      	pop	{r7, pc}

0800b8b8 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b082      	sub	sp, #8
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
 800b8c0:	f7fa fa95 	bl	8005dee <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800b8c4:	4603      	mov	r3, r0
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	3708      	adds	r7, #8
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	bd80      	pop	{r7, pc}

0800b8ce <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 800b8ce:	b580      	push	{r7, lr}
 800b8d0:	b082      	sub	sp, #8
 800b8d2:	af00      	add	r7, sp, #0
 800b8d4:	6078      	str	r0, [r7, #4]
 800b8d6:	f7fa fa8a 	bl	8005dee <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800b8da:	4603      	mov	r3, r0
 800b8dc:	4618      	mov	r0, r3
 800b8de:	3708      	adds	r7, #8
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	bd80      	pop	{r7, pc}

0800b8e4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEEC1ERSJ_RSN_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 800b8e4:	b5b0      	push	{r4, r5, r7, lr}
 800b8e6:	b084      	sub	sp, #16
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	60f8      	str	r0, [r7, #12]
 800b8ec:	60b9      	str	r1, [r7, #8]
 800b8ee:	607a      	str	r2, [r7, #4]
 800b8f0:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 800b8f2:	68f8      	ldr	r0, [r7, #12]
 800b8f4:	f7ff ffba 	bl	800b86c <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpIS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS8_EELi1ELi1ELb0EEENS_5DenseEEC1Ev>
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	3304      	adds	r3, #4
 800b8fc:	68b9      	ldr	r1, [r7, #8]
 800b8fe:	4618      	mov	r0, r3
 800b900:	f7fe fff3 	bl	800a8ea <_ZN5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERKSI_>
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	f103 021c 	add.w	r2, r3, #28
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	4614      	mov	r4, r2
 800b90e:	461d      	mov	r5, r3
 800b910:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b912:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b914:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b918:	e884 0003 	stmia.w	r4, {r0, r1}
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	3334      	adds	r3, #52	; 0x34
 800b920:	6839      	ldr	r1, [r7, #0]
 800b922:	4618      	mov	r0, r3
 800b924:	f7f8 ffbc 	bl	80048a0 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 800b928:	68b8      	ldr	r0, [r7, #8]
 800b92a:	f7ff ffab 	bl	800b884 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE4rowsEv>
 800b92e:	4604      	mov	r4, r0
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	4618      	mov	r0, r3
 800b934:	f7ff ffc0 	bl	800b8b8 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE4rowsEv>
 800b938:	4603      	mov	r3, r0
 800b93a:	429c      	cmp	r4, r3
 800b93c:	d10a      	bne.n	800b954 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEEC1ERSJ_RSN_RKS3_+0x70>
 800b93e:	68b8      	ldr	r0, [r7, #8]
 800b940:	f7ff ffad 	bl	800b89e <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE4colsEv>
 800b944:	4604      	mov	r4, r0
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	4618      	mov	r0, r3
 800b94a:	f7ff ffc0 	bl	800b8ce <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE4colsEv>
 800b94e:	4603      	mov	r3, r0
 800b950:	429c      	cmp	r4, r3
 800b952:	d005      	beq.n	800b960 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEEC1ERSJ_RSN_RKS3_+0x7c>
 800b954:	4b05      	ldr	r3, [pc, #20]	; (800b96c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEEC1ERSJ_RSN_RKS3_+0x88>)
 800b956:	4a06      	ldr	r2, [pc, #24]	; (800b970 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEEC1ERSJ_RSN_RKS3_+0x8c>)
 800b958:	2174      	movs	r1, #116	; 0x74
 800b95a:	4806      	ldr	r0, [pc, #24]	; (800b974 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEEC1ERSJ_RSN_RKS3_+0x90>)
 800b95c:	f011 fb6a 	bl	801d034 <__assert_func>
    }
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	4618      	mov	r0, r3
 800b964:	3710      	adds	r7, #16
 800b966:	46bd      	mov	sp, r7
 800b968:	bdb0      	pop	{r4, r5, r7, pc}
 800b96a:	bf00      	nop
 800b96c:	0801ee9c 	.word	0x0801ee9c
 800b970:	080249cc 	.word	0x080249cc
 800b974:	0801f100 	.word	0x0801f100

0800b978 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800b978:	b580      	push	{r7, lr}
 800b97a:	b082      	sub	sp, #8
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
 800b980:	6878      	ldr	r0, [r7, #4]
 800b982:	f000 f809 	bl	800b998 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE7derivedEv>
 800b986:	4603      	mov	r3, r0
 800b988:	4618      	mov	r0, r3
 800b98a:	f000 fdee 	bl	800c56a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE4colsEv>
 800b98e:	4603      	mov	r3, r0
 800b990:	4618      	mov	r0, r3
 800b992:	3708      	adds	r7, #8
 800b994:	46bd      	mov	sp, r7
 800b996:	bd80      	pop	{r7, pc}

0800b998 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800b998:	b480      	push	{r7}
 800b99a:	b083      	sub	sp, #12
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	370c      	adds	r7, #12
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ac:	4770      	bx	lr

0800b9ae <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 800b9ae:	b580      	push	{r7, lr}
 800b9b0:	b082      	sub	sp, #8
 800b9b2:	af00      	add	r7, sp, #0
 800b9b4:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	3304      	adds	r3, #4
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	f7ff ff62 	bl	800b884 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE4rowsEv>
 800b9c0:	4603      	mov	r3, r0
    }
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	3708      	adds	r7, #8
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	bd80      	pop	{r7, pc}

0800b9ca <_ZN5Eigen8internal9evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED1Ev>:
struct evaluator<const T>
 800b9ca:	b580      	push	{r7, lr}
 800b9cc:	b082      	sub	sp, #8
 800b9ce:	af00      	add	r7, sp, #0
 800b9d0:	6078      	str	r0, [r7, #4]
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	f7fc fc30 	bl	800823a <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED1Ev>
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	4618      	mov	r0, r3
 800b9de:	3708      	adds	r7, #8
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	bd80      	pop	{r7, pc}

0800b9e4 <_ZN5Eigen8internal15unary_evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel>, IndexBased>
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b082      	sub	sp, #8
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	f7ff ffeb 	bl	800b9ca <_ZN5Eigen8internal9evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED1Ev>
 800b9f4:	6878      	ldr	r0, [r7, #4]
 800b9f6:	f000 fdeb 	bl	800c5d0 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEED1Ev>
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	3708      	adds	r7, #8
 800ba00:	46bd      	mov	sp, r7
 800ba02:	bd80      	pop	{r7, pc}

0800ba04 <_ZN5Eigen8internal15block_evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /*HasDirectAccess*/ false>
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b082      	sub	sp, #8
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	4618      	mov	r0, r3
 800ba10:	f7ff ffe8 	bl	800b9e4 <_ZN5Eigen8internal15unary_evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS0_10IndexBasedEfED1Ev>
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	4618      	mov	r0, r3
 800ba18:	3708      	adds	r7, #8
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bd80      	pop	{r7, pc}

0800ba1e <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800ba1e:	b580      	push	{r7, lr}
 800ba20:	b082      	sub	sp, #8
 800ba22:	af00      	add	r7, sp, #0
 800ba24:	6078      	str	r0, [r7, #4]
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	4618      	mov	r0, r3
 800ba2a:	f7ff ffeb 	bl	800ba04 <_ZN5Eigen8internal15block_evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EED1Ev>
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	4618      	mov	r0, r3
 800ba32:	3708      	adds	r7, #8
 800ba34:	46bd      	mov	sp, r7
 800ba36:	bd80      	pop	{r7, pc}

0800ba38 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<const T>
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b082      	sub	sp, #8
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	4618      	mov	r0, r3
 800ba44:	f7ff ffeb 	bl	800ba1e <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEED1Ev>
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	3708      	adds	r7, #8
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	bd80      	pop	{r7, pc}

0800ba52 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 800ba52:	b580      	push	{r7, lr}
 800ba54:	b082      	sub	sp, #8
 800ba56:	af00      	add	r7, sp, #0
 800ba58:	6078      	str	r0, [r7, #4]
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	f7ff ffeb 	bl	800ba38 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEED1Ev>
 800ba62:	6878      	ldr	r0, [r7, #4]
 800ba64:	f000 fda9 	bl	800c5ba <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEED1Ev>
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	3708      	adds	r7, #8
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	bd80      	pop	{r7, pc}

0800ba72 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 800ba72:	b580      	push	{r7, lr}
 800ba74:	b082      	sub	sp, #8
 800ba76:	af00      	add	r7, sp, #0
 800ba78:	6078      	str	r0, [r7, #4]
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	f7ff ffe8 	bl	800ba52 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEENS0_10IndexBasedEfED1Ev>
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	4618      	mov	r0, r3
 800ba86:	3708      	adds	r7, #8
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	bd80      	pop	{r7, pc}

0800ba8c <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEED1Ev>:
struct evaluator<const T>
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b082      	sub	sp, #8
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	4618      	mov	r0, r3
 800ba98:	f7ff ffeb 	bl	800ba72 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEED1Ev>
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	4618      	mov	r0, r3
 800baa0:	3708      	adds	r7, #8
 800baa2:	46bd      	mov	sp, r7
 800baa4:	bd80      	pop	{r7, pc}

0800baa6 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 800baa6:	b580      	push	{r7, lr}
 800baa8:	b082      	sub	sp, #8
 800baaa:	af00      	add	r7, sp, #0
 800baac:	6078      	str	r0, [r7, #4]
 800baae:	6878      	ldr	r0, [r7, #4]
 800bab0:	f000 fd99 	bl	800c5e6 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEED1Ev>
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	4618      	mov	r0, r3
 800bab8:	3708      	adds	r7, #8
 800baba:	46bd      	mov	sp, r7
 800babc:	bd80      	pop	{r7, pc}

0800babe <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800babe:	b580      	push	{r7, lr}
 800bac0:	b082      	sub	sp, #8
 800bac2:	af00      	add	r7, sp, #0
 800bac4:	6078      	str	r0, [r7, #4]
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	4618      	mov	r0, r3
 800baca:	f7ff ffec 	bl	800baa6 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEED1Ev>
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	4618      	mov	r0, r3
 800bad2:	3708      	adds	r7, #8
 800bad4:	46bd      	mov	sp, r7
 800bad6:	bd80      	pop	{r7, pc}

0800bad8 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800bad8:	b580      	push	{r7, lr}
 800bada:	b082      	sub	sp, #8
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	4618      	mov	r0, r3
 800bae4:	f7ff ffeb 	bl	800babe <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EED1Ev>
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	4618      	mov	r0, r3
 800baec:	3708      	adds	r7, #8
 800baee:	46bd      	mov	sp, r7
 800baf0:	bd80      	pop	{r7, pc}

0800baf2 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<const T>
 800baf2:	b580      	push	{r7, lr}
 800baf4:	b082      	sub	sp, #8
 800baf6:	af00      	add	r7, sp, #0
 800baf8:	6078      	str	r0, [r7, #4]
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	4618      	mov	r0, r3
 800bafe:	f7ff ffeb 	bl	800bad8 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEED1Ev>
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	4618      	mov	r0, r3
 800bb06:	3708      	adds	r7, #8
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	bd80      	pop	{r7, pc}

0800bb0c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE4DataD1Ev>:
  struct Data
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b082      	sub	sp, #8
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	3320      	adds	r3, #32
 800bb18:	4618      	mov	r0, r3
 800bb1a:	f7ff ffea 	bl	800baf2 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEED1Ev>
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	3304      	adds	r3, #4
 800bb22:	4618      	mov	r0, r3
 800bb24:	f7ff ffb2 	bl	800ba8c <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEED1Ev>
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	3708      	adds	r7, #8
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bd80      	pop	{r7, pc}

0800bb32 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 800bb32:	b580      	push	{r7, lr}
 800bb34:	b082      	sub	sp, #8
 800bb36:	af00      	add	r7, sp, #0
 800bb38:	6078      	str	r0, [r7, #4]
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	f7ff ffe5 	bl	800bb0c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE4DataD1Ev>
 800bb42:	6878      	ldr	r0, [r7, #4]
 800bb44:	f000 fd2e 	bl	800c5a4 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEED1Ev>
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	3708      	adds	r7, #8
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	bd80      	pop	{r7, pc}

0800bb52 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 800bb52:	b580      	push	{r7, lr}
 800bb54:	b082      	sub	sp, #8
 800bb56:	af00      	add	r7, sp, #0
 800bb58:	6078      	str	r0, [r7, #4]
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	f7ff ffe8 	bl	800bb32 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffED1Ev>
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	4618      	mov	r0, r3
 800bb66:	3708      	adds	r7, #8
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	bd80      	pop	{r7, pc}

0800bb6c <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b082      	sub	sp, #8
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	4618      	mov	r0, r3
 800bb78:	f7ff ffeb 	bl	800bb52 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEED1Ev>
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	4618      	mov	r0, r3
 800bb80:	3708      	adds	r7, #8
 800bb82:	46bd      	mov	sp, r7
 800bb84:	bd80      	pop	{r7, pc}
	...

0800bb88 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	ed2d 8b02 	vpush	{d8}
 800bb8e:	b08c      	sub	sp, #48	; 0x30
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
 800bb94:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f7fe fef9 	bl	800a98e <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE4rowsEv>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	dd05      	ble.n	800bbae <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 800bba2:	6878      	ldr	r0, [r7, #4]
 800bba4:	f7ff fee8 	bl	800b978 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE4colsEv>
 800bba8:	4603      	mov	r3, r0
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	dc06      	bgt.n	800bbbc <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 800bbae:	4b16      	ldr	r3, [pc, #88]	; (800bc08 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 800bbb0:	4a16      	ldr	r2, [pc, #88]	; (800bc0c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 800bbb2:	f240 119b 	movw	r1, #411	; 0x19b
 800bbb6:	4816      	ldr	r0, [pc, #88]	; (800bc10 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 800bbb8:	f011 fa3c 	bl	801d034 <__assert_func>
 800bbbc:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800bbbe:	6878      	ldr	r0, [r7, #4]
 800bbc0:	f7ff feea 	bl	800b998 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE7derivedEv>
 800bbc4:	4602      	mov	r2, r0
 800bbc6:	f107 0308 	add.w	r3, r7, #8
 800bbca:	4611      	mov	r1, r2
 800bbcc:	4618      	mov	r0, r3
 800bbce:	f000 fcda 	bl	800c586 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1ERKSP_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800bbd2:	6878      	ldr	r0, [r7, #4]
 800bbd4:	f7ff fee0 	bl	800b998 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE7derivedEv>
 800bbd8:	4602      	mov	r2, r0
 800bbda:	f107 0308 	add.w	r3, r7, #8
 800bbde:	6839      	ldr	r1, [r7, #0]
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	f000 fd0b 	bl	800c5fc <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS5_IS7_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEELi1ELi1ELb0EEEEEKNS9_IKNS8_ISB_EELi1ELi1ELb0EEEEEEELi0ELi2EE3runISS_EEfRKST_RKS3_RKT_>
 800bbe6:	eeb0 8a40 	vmov.f32	s16, s0
 800bbea:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800bbec:	f107 0308 	add.w	r3, r7, #8
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	f7ff ffbb 	bl	800bb6c <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800bbf6:	eef0 7a48 	vmov.f32	s15, s16
}
 800bbfa:	eeb0 0a67 	vmov.f32	s0, s15
 800bbfe:	3730      	adds	r7, #48	; 0x30
 800bc00:	46bd      	mov	sp, r7
 800bc02:	ecbd 8b02 	vpop	{d8}
 800bc06:	bd80      	pop	{r7, pc}
 800bc08:	08023f1c 	.word	0x08023f1c
 800bc0c:	08024db4 	.word	0x08024db4
 800bc10:	08024128 	.word	0x08024128

0800bc14 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b082      	sub	sp, #8
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800bc1c:	2202      	movs	r2, #2
 800bc1e:	2101      	movs	r1, #1
 800bc20:	6878      	ldr	r0, [r7, #4]
 800bc22:	f7fd fc3e 	bl	80094a2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800bc26:	6878      	ldr	r0, [r7, #4]
 800bc28:	f000 fcf9 	bl	800c61e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSP_>
  }
 800bc2c:	bf00      	nop
 800bc2e:	3708      	adds	r7, #8
 800bc30:	46bd      	mov	sp, r7
 800bc32:	bd80      	pop	{r7, pc}

0800bc34 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ENS_5DenseEEC1ERS3_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b084      	sub	sp, #16
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	60f8      	str	r0, [r7, #12]
 800bc3c:	60b9      	str	r1, [r7, #8]
 800bc3e:	607a      	str	r2, [r7, #4]
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	687a      	ldr	r2, [r7, #4]
 800bc44:	68b9      	ldr	r1, [r7, #8]
 800bc46:	4618      	mov	r0, r3
 800bc48:	f000 fcf9 	bl	800c63e <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EEC1ERS4_i>
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	4618      	mov	r0, r3
 800bc50:	3710      	adds	r7, #16
 800bc52:	46bd      	mov	sp, r7
 800bc54:	bd80      	pop	{r7, pc}

0800bc56 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800bc56:	b480      	push	{r7}
 800bc58:	b083      	sub	sp, #12
 800bc5a:	af00      	add	r7, sp, #0
 800bc5c:	6078      	str	r0, [r7, #4]
    }
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	4618      	mov	r0, r3
 800bc62:	370c      	adds	r7, #12
 800bc64:	46bd      	mov	sp, r7
 800bc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6a:	4770      	bx	lr

0800bc6c <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ENS_5DenseEEC1ERS3_i>:
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b084      	sub	sp, #16
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	60f8      	str	r0, [r7, #12]
 800bc74:	60b9      	str	r1, [r7, #8]
 800bc76:	607a      	str	r2, [r7, #4]
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	687a      	ldr	r2, [r7, #4]
 800bc7c:	68b9      	ldr	r1, [r7, #8]
 800bc7e:	4618      	mov	r0, r3
 800bc80:	f000 fd13 	bl	800c6aa <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EEC1ERS4_i>
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	4618      	mov	r0, r3
 800bc88:	3710      	adds	r7, #16
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	bd80      	pop	{r7, pc}

0800bc8e <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800bc8e:	b480      	push	{r7}
 800bc90:	b083      	sub	sp, #12
 800bc92:	af00      	add	r7, sp, #0
 800bc94:	6078      	str	r0, [r7, #4]
    }
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	4618      	mov	r0, r3
 800bc9a:	370c      	adds	r7, #12
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca2:	4770      	bx	lr

0800bca4 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4colsEv>:
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b082      	sub	sp, #8
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
 800bcac:	f7fa f897 	bl	8005dde <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 800bcb0:	4603      	mov	r3, r0
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	3708      	adds	r7, #8
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	bd80      	pop	{r7, pc}

0800bcba <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 800bcba:	b580      	push	{r7, lr}
 800bcbc:	b082      	sub	sp, #8
 800bcbe:	af00      	add	r7, sp, #0
 800bcc0:	6078      	str	r0, [r7, #4]
 800bcc2:	f7fa f894 	bl	8005dee <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800bcc6:	4603      	mov	r3, r0
 800bcc8:	4618      	mov	r0, r3
 800bcca:	3708      	adds	r7, #8
 800bccc:	46bd      	mov	sp, r7
 800bcce:	bd80      	pop	{r7, pc}

0800bcd0 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b082      	sub	sp, #8
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	4618      	mov	r0, r3
 800bcdc:	f7fe ff59 	bl	800ab92 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 800bce0:	4603      	mov	r3, r0
    }
 800bce2:	4618      	mov	r0, r3
 800bce4:	3708      	adds	r7, #8
 800bce6:	46bd      	mov	sp, r7
 800bce8:	bd80      	pop	{r7, pc}

0800bcea <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1ERKSI_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 800bcea:	b580      	push	{r7, lr}
 800bcec:	b082      	sub	sp, #8
 800bcee:	af00      	add	r7, sp, #0
 800bcf0:	6078      	str	r0, [r7, #4]
 800bcf2:	6039      	str	r1, [r7, #0]
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	6839      	ldr	r1, [r7, #0]
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	f000 fd0c 	bl	800c716 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1ERKSI_>
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	4618      	mov	r0, r3
 800bd02:	3708      	adds	r7, #8
 800bd04:	46bd      	mov	sp, r7
 800bd06:	bd80      	pop	{r7, pc}

0800bd08 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800bd08:	b480      	push	{r7}
 800bd0a:	b083      	sub	sp, #12
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	4618      	mov	r0, r3
 800bd14:	370c      	adds	r7, #12
 800bd16:	46bd      	mov	sp, r7
 800bd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1c:	4770      	bx	lr

0800bd1e <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>:
 800bd1e:	b480      	push	{r7}
 800bd20:	b083      	sub	sp, #12
 800bd22:	af00      	add	r7, sp, #0
 800bd24:	6078      	str	r0, [r7, #4]
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	4618      	mov	r0, r3
 800bd2a:	370c      	adds	r7, #12
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd32:	4770      	bx	lr

0800bd34 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEED1Ev>:
 800bd34:	b480      	push	{r7}
 800bd36:	b083      	sub	sp, #12
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	4618      	mov	r0, r3
 800bd40:	370c      	adds	r7, #12
 800bd42:	46bd      	mov	sp, r7
 800bd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd48:	4770      	bx	lr

0800bd4a <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEED1Ev>:
 800bd4a:	b480      	push	{r7}
 800bd4c:	b083      	sub	sp, #12
 800bd4e:	af00      	add	r7, sp, #0
 800bd50:	6078      	str	r0, [r7, #4]
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	4618      	mov	r0, r3
 800bd56:	370c      	adds	r7, #12
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5e:	4770      	bx	lr

0800bd60 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b084      	sub	sp, #16
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	60f8      	str	r0, [r7, #12]
 800bd68:	60b9      	str	r1, [r7, #8]
 800bd6a:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 800bd6c:	68b9      	ldr	r1, [r7, #8]
 800bd6e:	68f8      	ldr	r0, [r7, #12]
 800bd70:	f000 fce0 	bl	800c734 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi0ELi3EE3runERKSM_RKS3_>
 800bd74:	eef0 7a40 	vmov.f32	s15, s0
  }
 800bd78:	eeb0 0a67 	vmov.f32	s0, s15
 800bd7c:	3710      	adds	r7, #16
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	bd80      	pop	{r7, pc}

0800bd82 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800bd82:	b480      	push	{r7}
 800bd84:	b083      	sub	sp, #12
 800bd86:	af00      	add	r7, sp, #0
 800bd88:	6078      	str	r0, [r7, #4]
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	370c      	adds	r7, #12
 800bd90:	46bd      	mov	sp, r7
 800bd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd96:	4770      	bx	lr

0800bd98 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800bd98:	b480      	push	{r7}
 800bd9a:	b083      	sub	sp, #12
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	3308      	adds	r3, #8
 800bda4:	4618      	mov	r0, r3
 800bda6:	370c      	adds	r7, #12
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdae:	4770      	bx	lr

0800bdb0 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800bdb0:	b480      	push	{r7}
 800bdb2:	b083      	sub	sp, #12
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	4618      	mov	r0, r3
 800bdbc:	370c      	adds	r7, #12
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc4:	4770      	bx	lr

0800bdc6 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_7ProductIS1_S1_Li0EEEEERKT_>:
    explicit Matrix(const T& x)
 800bdc6:	b580      	push	{r7, lr}
 800bdc8:	b082      	sub	sp, #8
 800bdca:	af00      	add	r7, sp, #0
 800bdcc:	6078      	str	r0, [r7, #4]
 800bdce:	6039      	str	r1, [r7, #0]
    {
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	f7f8 f937 	bl	8004046 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
      Base::_check_template_params();
 800bdd8:	f7f8 f945 	bl	8004066 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	6839      	ldr	r1, [r7, #0]
 800bde0:	4618      	mov	r0, r3
 800bde2:	f000 fccb 	bl	800c77c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_7ProductIS2_S2_Li0EEES6_EEvRKNS_9DenseBaseIT0_EE>
    }
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	4618      	mov	r0, r3
 800bdea:	3708      	adds	r7, #8
 800bdec:	46bd      	mov	sp, r7
 800bdee:	bd80      	pop	{r7, pc}

0800bdf0 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1ERKS5_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b082      	sub	sp, #8
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
 800bdf8:	6039      	str	r1, [r7, #0]
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	6839      	ldr	r1, [r7, #0]
 800bdfe:	4618      	mov	r0, r3
 800be00:	f000 fcc9 	bl	800c796 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS0_10IndexBasedEfEC1ERKS5_>
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	4618      	mov	r0, r3
 800be08:	3708      	adds	r7, #8
 800be0a:	46bd      	mov	sp, r7
 800be0c:	bd80      	pop	{r7, pc}

0800be0e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeffByOuterInner(Index outer, Index inner)
 800be0e:	b580      	push	{r7, lr}
 800be10:	b086      	sub	sp, #24
 800be12:	af00      	add	r7, sp, #0
 800be14:	60f8      	str	r0, [r7, #12]
 800be16:	60b9      	str	r1, [r7, #8]
 800be18:	607a      	str	r2, [r7, #4]
    Index row = rowIndexByOuterInner(outer, inner);
 800be1a:	6879      	ldr	r1, [r7, #4]
 800be1c:	68b8      	ldr	r0, [r7, #8]
 800be1e:	f000 fcd0 	bl	800c7c2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>
 800be22:	6178      	str	r0, [r7, #20]
    Index col = colIndexByOuterInner(outer, inner);
 800be24:	6879      	ldr	r1, [r7, #4]
 800be26:	68b8      	ldr	r0, [r7, #8]
 800be28:	f000 fcd7 	bl	800c7da <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>
 800be2c:	6138      	str	r0, [r7, #16]
    assignCoeff(row, col);
 800be2e:	693a      	ldr	r2, [r7, #16]
 800be30:	6979      	ldr	r1, [r7, #20]
 800be32:	68f8      	ldr	r0, [r7, #12]
 800be34:	f000 fcdd 	bl	800c7f2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>
  }
 800be38:	bf00      	nop
 800be3a:	3718      	adds	r7, #24
 800be3c:	46bd      	mov	sp, r7
 800be3e:	bd80      	pop	{r7, pc}

0800be40 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800be40:	b580      	push	{r7, lr}
 800be42:	b082      	sub	sp, #8
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800be48:	2201      	movs	r2, #1
 800be4a:	2100      	movs	r1, #0
 800be4c:	6878      	ldr	r0, [r7, #4]
 800be4e:	f7ff ffde 	bl	800be0e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800be52:	6878      	ldr	r0, [r7, #4]
 800be54:	f000 fcf3 	bl	800c83e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSG_>
  }
 800be58:	bf00      	nop
 800be5a:	3708      	adds	r7, #8
 800be5c:	46bd      	mov	sp, r7
 800be5e:	bd80      	pop	{r7, pc}

0800be60 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<Scalar,Scalar> &)
 800be60:	b590      	push	{r4, r7, lr}
 800be62:	b087      	sub	sp, #28
 800be64:	af00      	add	r7, sp, #0
 800be66:	60f8      	str	r0, [r7, #12]
 800be68:	60b9      	str	r1, [r7, #8]
 800be6a:	607a      	str	r2, [r7, #4]
    Index dstRows = src.rows();
 800be6c:	68b8      	ldr	r0, [r7, #8]
 800be6e:	f7fb fc65 	bl	800773c <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4rowsEv>
 800be72:	6178      	str	r0, [r7, #20]
    Index dstCols = src.cols();
 800be74:	68b8      	ldr	r0, [r7, #8]
 800be76:	f7f9 fab8 	bl	80053ea <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4colsEv>
 800be7a:	6138      	str	r0, [r7, #16]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	4618      	mov	r0, r3
 800be80:	f7f8 fa89 	bl	8004396 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800be84:	4602      	mov	r2, r0
 800be86:	697b      	ldr	r3, [r7, #20]
 800be88:	4293      	cmp	r3, r2
 800be8a:	d107      	bne.n	800be9c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_+0x3c>
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	4618      	mov	r0, r3
 800be90:	f7f8 fa76 	bl	8004380 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800be94:	4602      	mov	r2, r0
 800be96:	693b      	ldr	r3, [r7, #16]
 800be98:	4293      	cmp	r3, r2
 800be9a:	d001      	beq.n	800bea0 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_+0x40>
 800be9c:	2301      	movs	r3, #1
 800be9e:	e000      	b.n	800bea2 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_+0x42>
 800bea0:	2300      	movs	r3, #0
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d005      	beq.n	800beb2 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_+0x52>
      dst.resize(dstRows, dstCols);
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	693a      	ldr	r2, [r7, #16]
 800beaa:	6979      	ldr	r1, [r7, #20]
 800beac:	4618      	mov	r0, r3
 800beae:	f7fb f97d 	bl	80071ac <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
    generic_product_impl<Lhs, Rhs>::evalTo(dst, src.lhs(), src.rhs());
 800beb2:	68b8      	ldr	r0, [r7, #8]
 800beb4:	f000 fcd3 	bl	800c85e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE3lhsEv>
 800beb8:	4604      	mov	r4, r0
 800beba:	68b8      	ldr	r0, [r7, #8]
 800bebc:	f000 fcdb 	bl	800c876 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE3rhsEv>
 800bec0:	4603      	mov	r3, r0
 800bec2:	461a      	mov	r2, r3
 800bec4:	4621      	mov	r1, r4
 800bec6:	68f8      	ldr	r0, [r7, #12]
 800bec8:	f000 fce1 	bl	800c88e <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEENS_10DenseShapeES7_Li3EE6evalToINS2_IfLi3ELi1ELi0ELi3ELi1EEEEEvRT_RKS3_RKS6_>
  }
 800becc:	bf00      	nop
 800bece:	371c      	adds	r7, #28
 800bed0:	46bd      	mov	sp, r7
 800bed2:	bd90      	pop	{r4, r7, pc}

0800bed4 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_>:
  static void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<typename DstXprType::Scalar,typename XprType::Scalar> &)
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b088      	sub	sp, #32
 800bed8:	af00      	add	r7, sp, #0
 800beda:	60f8      	str	r0, [r7, #12]
 800bedc:	60b9      	str	r1, [r7, #8]
 800bede:	607a      	str	r2, [r7, #4]
    Index dstRows = src.rows();
 800bee0:	68b8      	ldr	r0, [r7, #8]
 800bee2:	f7f9 fa90 	bl	8005406 <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4rowsEv>
 800bee6:	61f8      	str	r0, [r7, #28]
    Index dstCols = src.cols();
 800bee8:	68b8      	ldr	r0, [r7, #8]
 800beea:	f7fb fc35 	bl	8007758 <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4colsEv>
 800beee:	61b8      	str	r0, [r7, #24]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	4618      	mov	r0, r3
 800bef4:	f7f9 f999 	bl	800522a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800bef8:	4602      	mov	r2, r0
 800befa:	69fb      	ldr	r3, [r7, #28]
 800befc:	4293      	cmp	r3, r2
 800befe:	d107      	bne.n	800bf10 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x3c>
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	4618      	mov	r0, r3
 800bf04:	f7f9 f99c 	bl	8005240 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800bf08:	4602      	mov	r2, r0
 800bf0a:	69bb      	ldr	r3, [r7, #24]
 800bf0c:	4293      	cmp	r3, r2
 800bf0e:	d001      	beq.n	800bf14 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x40>
 800bf10:	2301      	movs	r3, #1
 800bf12:	e000      	b.n	800bf16 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x42>
 800bf14:	2300      	movs	r3, #0
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d005      	beq.n	800bf26 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x52>
      dst.resize(dstRows, dstCols);
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	69ba      	ldr	r2, [r7, #24]
 800bf1e:	69f9      	ldr	r1, [r7, #28]
 800bf20:	4618      	mov	r0, r3
 800bf22:	f000 fcd3 	bl	800c8cc <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii>
    const int Size = EIGEN_PLAIN_ENUM_MIN(XprType::ColsAtCompileTime,DstXprType::ColsAtCompileTime);
 800bf26:	2301      	movs	r3, #1
 800bf28:	617b      	str	r3, [r7, #20]
    ActualXprType actual_xpr(src.nestedExpression());
 800bf2a:	68b8      	ldr	r0, [r7, #8]
 800bf2c:	f000 fd00 	bl	800c930 <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE16nestedExpressionEv>
 800bf30:	4602      	mov	r2, r0
 800bf32:	f107 0310 	add.w	r3, r7, #16
 800bf36:	4611      	mov	r1, r2
 800bf38:	4618      	mov	r0, r3
 800bf3a:	f000 fd04 	bl	800c946 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS7_INS0_IfLi1ELi3ELi1ELi1ELi3EEENS0_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS1_EEEERKT_>
    compute_inverse<ActualXprTypeCleanded, DstXprType>::run(actual_xpr, dst);
 800bf3e:	f107 0310 	add.w	r3, r7, #16
 800bf42:	68f9      	ldr	r1, [r7, #12]
 800bf44:	4618      	mov	r0, r3
 800bf46:	f000 fd13 	bl	800c970 <_ZN5Eigen8internal15compute_inverseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_Li1EE3runERKS3_RS3_>
  }
 800bf4a:	bf00      	nop
 800bf4c:	3720      	adds	r7, #32
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	bd80      	pop	{r7, pc}

0800bf52 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE9innerSizeEv>:
    Index innerSize() const
 800bf52:	b580      	push	{r7, lr}
 800bf54:	b082      	sub	sp, #8
 800bf56:	af00      	add	r7, sp, #0
 800bf58:	6078      	str	r0, [r7, #4]
      return IsVectorAtCompileTime ? this->size()
 800bf5a:	6878      	ldr	r0, [r7, #4]
 800bf5c:	f000 fd47 	bl	800c9ee <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4sizeEv>
 800bf60:	4603      	mov	r3, r0
    }
 800bf62:	4618      	mov	r0, r3
 800bf64:	3708      	adds	r7, #8
 800bf66:	46bd      	mov	sp, r7
 800bf68:	bd80      	pop	{r7, pc}

0800bf6a <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ENS_5DenseEEC1ERS3_i>:
 800bf6a:	b580      	push	{r7, lr}
 800bf6c:	b084      	sub	sp, #16
 800bf6e:	af00      	add	r7, sp, #0
 800bf70:	60f8      	str	r0, [r7, #12]
 800bf72:	60b9      	str	r1, [r7, #8]
 800bf74:	607a      	str	r2, [r7, #4]
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	687a      	ldr	r2, [r7, #4]
 800bf7a:	68b9      	ldr	r1, [r7, #8]
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	f000 fd58 	bl	800ca32 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EEC1ERS4_i>
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	4618      	mov	r0, r3
 800bf86:	3710      	adds	r7, #16
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	bd80      	pop	{r7, pc}

0800bf8c <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800bf8c:	b480      	push	{r7}
 800bf8e:	b083      	sub	sp, #12
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
    }
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	4618      	mov	r0, r3
 800bf98:	370c      	adds	r7, #12
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa0:	4770      	bx	lr

0800bfa2 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ENS_5DenseEEC1ERS3_i>:
 800bfa2:	b580      	push	{r7, lr}
 800bfa4:	b084      	sub	sp, #16
 800bfa6:	af00      	add	r7, sp, #0
 800bfa8:	60f8      	str	r0, [r7, #12]
 800bfaa:	60b9      	str	r1, [r7, #8]
 800bfac:	607a      	str	r2, [r7, #4]
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	687a      	ldr	r2, [r7, #4]
 800bfb2:	68b9      	ldr	r1, [r7, #8]
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	f000 fd6d 	bl	800ca94 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EEC1ERS4_i>
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	3710      	adds	r7, #16
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd80      	pop	{r7, pc}

0800bfc4 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800bfc4:	b480      	push	{r7}
 800bfc6:	b083      	sub	sp, #12
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
    }
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	4618      	mov	r0, r3
 800bfd0:	370c      	adds	r7, #12
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd8:	4770      	bx	lr

0800bfda <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 800bfda:	b580      	push	{r7, lr}
 800bfdc:	b082      	sub	sp, #8
 800bfde:	af00      	add	r7, sp, #0
 800bfe0:	6078      	str	r0, [r7, #4]
 800bfe2:	f7f9 ff04 	bl	8005dee <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800bfe6:	4603      	mov	r3, r0
 800bfe8:	4618      	mov	r0, r3
 800bfea:	3708      	adds	r7, #8
 800bfec:	46bd      	mov	sp, r7
 800bfee:	bd80      	pop	{r7, pc}

0800bff0 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b082      	sub	sp, #8
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
 800bff8:	f7f9 fef9 	bl	8005dee <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800bffc:	4603      	mov	r3, r0
 800bffe:	4618      	mov	r0, r3
 800c000:	3708      	adds	r7, #8
 800c002:	46bd      	mov	sp, r7
 800c004:	bd80      	pop	{r7, pc}

0800c006 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 800c006:	b580      	push	{r7, lr}
 800c008:	b082      	sub	sp, #8
 800c00a:	af00      	add	r7, sp, #0
 800c00c:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	4618      	mov	r0, r3
 800c012:	f7ff f8d8 	bl	800b1c6 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4colsEv>
 800c016:	4603      	mov	r3, r0
    }
 800c018:	4618      	mov	r0, r3
 800c01a:	3708      	adds	r7, #8
 800c01c:	46bd      	mov	sp, r7
 800c01e:	bd80      	pop	{r7, pc}

0800c020 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1ERKSI_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 800c020:	b580      	push	{r7, lr}
 800c022:	b082      	sub	sp, #8
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
 800c028:	6039      	str	r1, [r7, #0]
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	6839      	ldr	r1, [r7, #0]
 800c02e:	4618      	mov	r0, r3
 800c030:	f000 fd61 	bl	800caf6 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1ERKSI_>
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	4618      	mov	r0, r3
 800c038:	3708      	adds	r7, #8
 800c03a:	46bd      	mov	sp, r7
 800c03c:	bd80      	pop	{r7, pc}

0800c03e <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800c03e:	b480      	push	{r7}
 800c040:	b083      	sub	sp, #12
 800c042:	af00      	add	r7, sp, #0
 800c044:	6078      	str	r0, [r7, #4]
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	4618      	mov	r0, r3
 800c04a:	370c      	adds	r7, #12
 800c04c:	46bd      	mov	sp, r7
 800c04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c052:	4770      	bx	lr

0800c054 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEED1Ev>:
 800c054:	b480      	push	{r7}
 800c056:	b083      	sub	sp, #12
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	4618      	mov	r0, r3
 800c060:	370c      	adds	r7, #12
 800c062:	46bd      	mov	sp, r7
 800c064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c068:	4770      	bx	lr

0800c06a <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEED1Ev>:
 800c06a:	b480      	push	{r7}
 800c06c:	b083      	sub	sp, #12
 800c06e:	af00      	add	r7, sp, #0
 800c070:	6078      	str	r0, [r7, #4]
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	4618      	mov	r0, r3
 800c076:	370c      	adds	r7, #12
 800c078:	46bd      	mov	sp, r7
 800c07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07e:	4770      	bx	lr

0800c080 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEED1Ev>:
 800c080:	b480      	push	{r7}
 800c082:	b083      	sub	sp, #12
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	4618      	mov	r0, r3
 800c08c:	370c      	adds	r7, #12
 800c08e:	46bd      	mov	sp, r7
 800c090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c094:	4770      	bx	lr

0800c096 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 800c096:	b580      	push	{r7, lr}
 800c098:	b084      	sub	sp, #16
 800c09a:	af00      	add	r7, sp, #0
 800c09c:	60f8      	str	r0, [r7, #12]
 800c09e:	60b9      	str	r1, [r7, #8]
 800c0a0:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 800c0a2:	68b9      	ldr	r1, [r7, #8]
 800c0a4:	68f8      	ldr	r0, [r7, #12]
 800c0a6:	f000 fd35 	bl	800cb14 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEELi0ELi1EE3runERKSM_RKS3_>
 800c0aa:	eef0 7a40 	vmov.f32	s15, s0
  }
 800c0ae:	eeb0 0a67 	vmov.f32	s0, s15
 800c0b2:	3710      	adds	r7, #16
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	bd80      	pop	{r7, pc}

0800c0b8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 800c0b8:	b5b0      	push	{r4, r5, r7, lr}
 800c0ba:	b084      	sub	sp, #16
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
 800c0c0:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 800c0c2:	6878      	ldr	r0, [r7, #4]
 800c0c4:	f7fe ff7b 	bl	800afbe <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800c0c8:	4604      	mov	r4, r0
 800c0ca:	6838      	ldr	r0, [r7, #0]
 800c0cc:	f7f9 fade 	bl	800568c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEE7derivedEv>
 800c0d0:	4605      	mov	r5, r0
 800c0d2:	f107 030c 	add.w	r3, r7, #12
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	f7fa f8e7 	bl	80062aa <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800c0dc:	f107 030c 	add.w	r3, r7, #12
 800c0e0:	461a      	mov	r2, r3
 800c0e2:	4629      	mov	r1, r5
 800c0e4:	4620      	mov	r0, r4
 800c0e6:	f000 fd26 	bl	800cb36 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 800c0ea:	6878      	ldr	r0, [r7, #4]
 800c0ec:	f7fe ff67 	bl	800afbe <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800c0f0:	4603      	mov	r3, r0
    }
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	3710      	adds	r7, #16
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	bdb0      	pop	{r4, r5, r7, pc}

0800c0fa <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi3ELi3EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 800c0fa:	b480      	push	{r7}
 800c0fc:	b083      	sub	sp, #12
 800c0fe:	af00      	add	r7, sp, #0
 800c100:	6078      	str	r0, [r7, #4]
 800c102:	bf00      	nop
 800c104:	370c      	adds	r7, #12
 800c106:	46bd      	mov	sp, r7
 800c108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10c:	4770      	bx	lr

0800c10e <_ZN5Eigen8internal30assignment_from_xpr_op_productINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_9assign_opIffEENS0_13sub_assign_opIffEEE3runINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KS7_EES9_EEvRS3_RKT_RKT0_>:
  void run(DstXprType &dst, const SrcXprType &src, const InitialFunc& /*func*/)
 800c10e:	b590      	push	{r4, r7, lr}
 800c110:	b087      	sub	sp, #28
 800c112:	af00      	add	r7, sp, #0
 800c114:	60f8      	str	r0, [r7, #12]
 800c116:	60b9      	str	r1, [r7, #8]
 800c118:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, src.lhs(), Func1());
 800c11a:	68b8      	ldr	r0, [r7, #8]
 800c11c:	f000 fd1c 	bl	800cb58 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE3lhsEv>
 800c120:	4604      	mov	r4, r0
 800c122:	f107 0310 	add.w	r3, r7, #16
 800c126:	4618      	mov	r0, r3
 800c128:	f7fa f8bf 	bl	80062aa <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800c12c:	f107 0310 	add.w	r3, r7, #16
 800c130:	461a      	mov	r2, r3
 800c132:	4621      	mov	r1, r4
 800c134:	68f8      	ldr	r0, [r7, #12]
 800c136:	f7fa f99f 	bl	8006478 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
    call_assignment_no_alias(dst, src.rhs(), Func2());
 800c13a:	68b8      	ldr	r0, [r7, #8]
 800c13c:	f000 fd18 	bl	800cb70 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE3rhsEv>
 800c140:	4604      	mov	r4, r0
 800c142:	f107 0314 	add.w	r3, r7, #20
 800c146:	4618      	mov	r0, r3
 800c148:	f000 fd1e 	bl	800cb88 <_ZN5Eigen8internal13sub_assign_opIffEC1Ev>
 800c14c:	f107 0314 	add.w	r3, r7, #20
 800c150:	461a      	mov	r2, r3
 800c152:	4621      	mov	r1, r4
 800c154:	68f8      	ldr	r0, [r7, #12]
 800c156:	f000 fd22 	bl	800cb9e <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800c15a:	bf00      	nop
 800c15c:	371c      	adds	r7, #28
 800c15e:	46bd      	mov	sp, r7
 800c160:	bd90      	pop	{r4, r7, pc}
	...

0800c164 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800c164:	b580      	push	{r7, lr}
 800c166:	b084      	sub	sp, #16
 800c168:	af00      	add	r7, sp, #0
 800c16a:	60f8      	str	r0, [r7, #12]
 800c16c:	60b9      	str	r1, [r7, #8]
 800c16e:	607a      	str	r2, [r7, #4]
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	687a      	ldr	r2, [r7, #4]
 800c174:	68b9      	ldr	r1, [r7, #8]
 800c176:	4618      	mov	r0, r3
 800c178:	f000 fd22 	bl	800cbc0 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	db07      	blt.n	800c192 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i+0x2e>
 800c182:	68bb      	ldr	r3, [r7, #8]
 800c184:	4618      	mov	r0, r3
 800c186:	f7f8 f855 	bl	8004234 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800c18a:	4602      	mov	r2, r0
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	4293      	cmp	r3, r2
 800c190:	db05      	blt.n	800c19e <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i+0x3a>
 800c192:	4b05      	ldr	r3, [pc, #20]	; (800c1a8 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i+0x44>)
 800c194:	4a05      	ldr	r2, [pc, #20]	; (800c1ac <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i+0x48>)
 800c196:	2178      	movs	r1, #120	; 0x78
 800c198:	4805      	ldr	r0, [pc, #20]	; (800c1b0 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i+0x4c>)
 800c19a:	f010 ff4b 	bl	801d034 <__assert_func>
    }
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	3710      	adds	r7, #16
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	bd80      	pop	{r7, pc}
 800c1a8:	08023a20 	.word	0x08023a20
 800c1ac:	08025048 	.word	0x08025048
 800c1b0:	08023ba4 	.word	0x08023ba4

0800c1b4 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE7derivedEv>:
 800c1b4:	b480      	push	{r7}
 800c1b6:	b083      	sub	sp, #12
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	4618      	mov	r0, r3
 800c1c0:	370c      	adds	r7, #12
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c8:	4770      	bx	lr

0800c1ca <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1Ev>:
 800c1ca:	b580      	push	{r7, lr}
 800c1cc:	b082      	sub	sp, #8
 800c1ce:	af00      	add	r7, sp, #0
 800c1d0:	6078      	str	r0, [r7, #4]
 800c1d2:	6878      	ldr	r0, [r7, #4]
 800c1d4:	f000 fd05 	bl	800cbe2 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1Ev>
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	4618      	mov	r0, r3
 800c1dc:	3708      	adds	r7, #8
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	bd80      	pop	{r7, pc}

0800c1e2 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 800c1e2:	b580      	push	{r7, lr}
 800c1e4:	b082      	sub	sp, #8
 800c1e6:	af00      	add	r7, sp, #0
 800c1e8:	6078      	str	r0, [r7, #4]
 800c1ea:	6878      	ldr	r0, [r7, #4]
 800c1ec:	f7ff ffed 	bl	800c1ca <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1Ev>
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	3708      	adds	r7, #8
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	bd80      	pop	{r7, pc}

0800c1fa <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4rowsEv>:
 800c1fa:	b580      	push	{r7, lr}
 800c1fc:	b082      	sub	sp, #8
 800c1fe:	af00      	add	r7, sp, #0
 800c200:	6078      	str	r0, [r7, #4]
 800c202:	f7f9 fdec 	bl	8005dde <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 800c206:	4603      	mov	r3, r0
 800c208:	4618      	mov	r0, r3
 800c20a:	3708      	adds	r7, #8
 800c20c:	46bd      	mov	sp, r7
 800c20e:	bd80      	pop	{r7, pc}

0800c210 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 800c210:	b580      	push	{r7, lr}
 800c212:	b082      	sub	sp, #8
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
 800c218:	f7f9 fde9 	bl	8005dee <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800c21c:	4603      	mov	r3, r0
 800c21e:	4618      	mov	r0, r3
 800c220:	3708      	adds	r7, #8
 800c222:	46bd      	mov	sp, r7
 800c224:	bd80      	pop	{r7, pc}
	...

0800c228 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEEC1ERSC_RSE_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 800c228:	b5b0      	push	{r4, r5, r7, lr}
 800c22a:	b084      	sub	sp, #16
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	60f8      	str	r0, [r7, #12]
 800c230:	60b9      	str	r1, [r7, #8]
 800c232:	607a      	str	r2, [r7, #4]
 800c234:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 800c236:	68f8      	ldr	r0, [r7, #12]
 800c238:	f7ff ffd3 	bl	800c1e2 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEENS_5DenseEEC1Ev>
 800c23c:	68fa      	ldr	r2, [r7, #12]
 800c23e:	68bb      	ldr	r3, [r7, #8]
 800c240:	4614      	mov	r4, r2
 800c242:	461d      	mov	r5, r3
 800c244:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c246:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c248:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c24c:	e884 0003 	stmia.w	r4, {r0, r1}
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	f103 0218 	add.w	r2, r3, #24
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	4614      	mov	r4, r2
 800c25a:	461d      	mov	r5, r3
 800c25c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c25e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c260:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c264:	e884 0003 	stmia.w	r4, {r0, r1}
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	3330      	adds	r3, #48	; 0x30
 800c26c:	6839      	ldr	r1, [r7, #0]
 800c26e:	4618      	mov	r0, r3
 800c270:	f7f8 fb16 	bl	80048a0 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 800c274:	68b8      	ldr	r0, [r7, #8]
 800c276:	f7fe fc7f 	bl	800ab78 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 800c27a:	4604      	mov	r4, r0
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	4618      	mov	r0, r3
 800c280:	f7ff ffbb 	bl	800c1fa <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4rowsEv>
 800c284:	4603      	mov	r3, r0
 800c286:	429c      	cmp	r4, r3
 800c288:	d10a      	bne.n	800c2a0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEEC1ERSC_RSE_RKS3_+0x78>
 800c28a:	68b8      	ldr	r0, [r7, #8]
 800c28c:	f7fe fc81 	bl	800ab92 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 800c290:	4604      	mov	r4, r0
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	4618      	mov	r0, r3
 800c296:	f7ff ffbb 	bl	800c210 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4colsEv>
 800c29a:	4603      	mov	r3, r0
 800c29c:	429c      	cmp	r4, r3
 800c29e:	d005      	beq.n	800c2ac <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEEC1ERSC_RSE_RKS3_+0x84>
 800c2a0:	4b05      	ldr	r3, [pc, #20]	; (800c2b8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEEC1ERSC_RSE_RKS3_+0x90>)
 800c2a2:	4a06      	ldr	r2, [pc, #24]	; (800c2bc <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEEC1ERSC_RSE_RKS3_+0x94>)
 800c2a4:	2174      	movs	r1, #116	; 0x74
 800c2a6:	4806      	ldr	r0, [pc, #24]	; (800c2c0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEEC1ERSC_RSE_RKS3_+0x98>)
 800c2a8:	f010 fec4 	bl	801d034 <__assert_func>
    }
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	3710      	adds	r7, #16
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	bdb0      	pop	{r4, r5, r7, pc}
 800c2b6:	bf00      	nop
 800c2b8:	0801ee9c 	.word	0x0801ee9c
 800c2bc:	08025124 	.word	0x08025124
 800c2c0:	0801f100 	.word	0x0801f100

0800c2c4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b082      	sub	sp, #8
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
 800c2cc:	6878      	ldr	r0, [r7, #4]
 800c2ce:	f000 f809 	bl	800c2e4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE7derivedEv>
 800c2d2:	4603      	mov	r3, r0
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	f000 fc8f 	bl	800cbf8 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE4colsEv>
 800c2da:	4603      	mov	r3, r0
 800c2dc:	4618      	mov	r0, r3
 800c2de:	3708      	adds	r7, #8
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	bd80      	pop	{r7, pc}

0800c2e4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800c2e4:	b480      	push	{r7}
 800c2e6:	b083      	sub	sp, #12
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	6078      	str	r0, [r7, #4]
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	370c      	adds	r7, #12
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f8:	4770      	bx	lr

0800c2fa <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 800c2fa:	b580      	push	{r7, lr}
 800c2fc:	b082      	sub	sp, #8
 800c2fe:	af00      	add	r7, sp, #0
 800c300:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	4618      	mov	r0, r3
 800c306:	f7fe fc37 	bl	800ab78 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 800c30a:	4603      	mov	r3, r0
    }
 800c30c:	4618      	mov	r0, r3
 800c30e:	3708      	adds	r7, #8
 800c310:	46bd      	mov	sp, r7
 800c312:	bd80      	pop	{r7, pc}

0800c314 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 800c314:	b580      	push	{r7, lr}
 800c316:	b082      	sub	sp, #8
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
 800c31c:	6878      	ldr	r0, [r7, #4]
 800c31e:	f000 fc92 	bl	800cc46 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	4618      	mov	r0, r3
 800c326:	3708      	adds	r7, #8
 800c328:	46bd      	mov	sp, r7
 800c32a:	bd80      	pop	{r7, pc}

0800c32c <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b082      	sub	sp, #8
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	4618      	mov	r0, r3
 800c338:	f7ff ffec 	bl	800c314 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	4618      	mov	r0, r3
 800c340:	3708      	adds	r7, #8
 800c342:	46bd      	mov	sp, r7
 800c344:	bd80      	pop	{r7, pc}

0800c346 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800c346:	b580      	push	{r7, lr}
 800c348:	b082      	sub	sp, #8
 800c34a:	af00      	add	r7, sp, #0
 800c34c:	6078      	str	r0, [r7, #4]
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	4618      	mov	r0, r3
 800c352:	f7ff ffeb 	bl	800c32c <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EED1Ev>
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	4618      	mov	r0, r3
 800c35a:	3708      	adds	r7, #8
 800c35c:	46bd      	mov	sp, r7
 800c35e:	bd80      	pop	{r7, pc}

0800c360 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>:
struct evaluator<const T>
 800c360:	b580      	push	{r7, lr}
 800c362:	b082      	sub	sp, #8
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	4618      	mov	r0, r3
 800c36c:	f7ff ffeb 	bl	800c346 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	4618      	mov	r0, r3
 800c374:	3708      	adds	r7, #8
 800c376:	46bd      	mov	sp, r7
 800c378:	bd80      	pop	{r7, pc}

0800c37a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE4DataD1Ev>:
  struct Data
 800c37a:	b580      	push	{r7, lr}
 800c37c:	b082      	sub	sp, #8
 800c37e:	af00      	add	r7, sp, #0
 800c380:	6078      	str	r0, [r7, #4]
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	330c      	adds	r3, #12
 800c386:	4618      	mov	r0, r3
 800c388:	f7ff ffea 	bl	800c360 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	3304      	adds	r3, #4
 800c390:	4618      	mov	r0, r3
 800c392:	f7fe fce7 	bl	800ad64 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	4618      	mov	r0, r3
 800c39a:	3708      	adds	r7, #8
 800c39c:	46bd      	mov	sp, r7
 800c39e:	bd80      	pop	{r7, pc}

0800c3a0 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b082      	sub	sp, #8
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	f7ff ffe5 	bl	800c37a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE4DataD1Ev>
 800c3b0:	6878      	ldr	r0, [r7, #4]
 800c3b2:	f000 fc3d 	bl	800cc30 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEED1Ev>
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	3708      	adds	r7, #8
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	bd80      	pop	{r7, pc}

0800c3c0 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b082      	sub	sp, #8
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	6078      	str	r0, [r7, #4]
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	f7ff ffe8 	bl	800c3a0 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffED1Ev>
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	3708      	adds	r7, #8
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	bd80      	pop	{r7, pc}

0800c3da <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 800c3da:	b580      	push	{r7, lr}
 800c3dc:	b082      	sub	sp, #8
 800c3de:	af00      	add	r7, sp, #0
 800c3e0:	6078      	str	r0, [r7, #4]
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	f7ff ffeb 	bl	800c3c0 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEED1Ev>
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	3708      	adds	r7, #8
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	bd80      	pop	{r7, pc}

0800c3f4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	ed2d 8b02 	vpush	{d8}
 800c3fa:	b088      	sub	sp, #32
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
 800c400:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 800c402:	6878      	ldr	r0, [r7, #4]
 800c404:	f7ff f938 	bl	800b678 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE4rowsEv>
 800c408:	4603      	mov	r3, r0
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	dd05      	ble.n	800c41a <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 800c40e:	6878      	ldr	r0, [r7, #4]
 800c410:	f7ff ff58 	bl	800c2c4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE4colsEv>
 800c414:	4603      	mov	r3, r0
 800c416:	2b00      	cmp	r3, #0
 800c418:	dc06      	bgt.n	800c428 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 800c41a:	4b16      	ldr	r3, [pc, #88]	; (800c474 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 800c41c:	4a16      	ldr	r2, [pc, #88]	; (800c478 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 800c41e:	f240 119b 	movw	r1, #411	; 0x19b
 800c422:	4816      	ldr	r0, [pc, #88]	; (800c47c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 800c424:	f010 fe06 	bl	801d034 <__assert_func>
 800c428:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800c42a:	6878      	ldr	r0, [r7, #4]
 800c42c:	f7ff ff5a 	bl	800c2e4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE7derivedEv>
 800c430:	4602      	mov	r2, r0
 800c432:	f107 030c 	add.w	r3, r7, #12
 800c436:	4611      	mov	r1, r2
 800c438:	4618      	mov	r0, r3
 800c43a:	f000 fbea 	bl	800cc12 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1ERKSG_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800c43e:	6878      	ldr	r0, [r7, #4]
 800c440:	f7ff ff50 	bl	800c2e4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE7derivedEv>
 800c444:	4602      	mov	r2, r0
 800c446:	f107 030c 	add.w	r3, r7, #12
 800c44a:	6839      	ldr	r1, [r7, #0]
 800c44c:	4618      	mov	r0, r3
 800c44e:	f000 fc05 	bl	800cc5c <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi0ELi2EE3runISJ_EEfRKSK_RKS3_RKT_>
 800c452:	eeb0 8a40 	vmov.f32	s16, s0
 800c456:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800c458:	f107 030c 	add.w	r3, r7, #12
 800c45c:	4618      	mov	r0, r3
 800c45e:	f7ff ffbc 	bl	800c3da <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800c462:	eef0 7a48 	vmov.f32	s15, s16
}
 800c466:	eeb0 0a67 	vmov.f32	s0, s15
 800c46a:	3720      	adds	r7, #32
 800c46c:	46bd      	mov	sp, r7
 800c46e:	ecbd 8b02 	vpop	{d8}
 800c472:	bd80      	pop	{r7, pc}
 800c474:	08023f1c 	.word	0x08023f1c
 800c478:	0802536c 	.word	0x0802536c
 800c47c:	08024128 	.word	0x08024128

0800c480 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800c480:	b580      	push	{r7, lr}
 800c482:	b082      	sub	sp, #8
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800c488:	2202      	movs	r2, #2
 800c48a:	2101      	movs	r1, #1
 800c48c:	6878      	ldr	r0, [r7, #4]
 800c48e:	f7fd facf 	bl	8009a30 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800c492:	6878      	ldr	r0, [r7, #4]
 800c494:	f000 fbf3 	bl	800cc7e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSL_>
  }
 800c498:	bf00      	nop
 800c49a:	3708      	adds	r7, #8
 800c49c:	46bd      	mov	sp, r7
 800c49e:	bd80      	pop	{r7, pc}

0800c4a0 <_ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7functorEv>:

    /** \returns the functor representing the nullary operation */
    EIGEN_DEVICE_FUNC
    const NullaryOp& functor() const { return m_functor; }
 800c4a0:	b480      	push	{r7}
 800c4a2:	b083      	sub	sp, #12
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	3304      	adds	r3, #4
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	370c      	adds	r7, #12
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b6:	4770      	bx	lr

0800c4b8 <_ZN5Eigen8internal14evaluator_baseINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800c4b8:	b480      	push	{r7}
 800c4ba:	b083      	sub	sp, #12
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	370c      	adds	r7, #12
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4cc:	4770      	bx	lr

0800c4ce <_ZN5Eigen9BlockImplIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ENS_5DenseEEC1ERSE_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 800c4ce:	b580      	push	{r7, lr}
 800c4d0:	b084      	sub	sp, #16
 800c4d2:	af00      	add	r7, sp, #0
 800c4d4:	60f8      	str	r0, [r7, #12]
 800c4d6:	60b9      	str	r1, [r7, #8]
 800c4d8:	607a      	str	r2, [r7, #4]
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	687a      	ldr	r2, [r7, #4]
 800c4de:	68b9      	ldr	r1, [r7, #8]
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	f000 fbe8 	bl	800ccb6 <_ZN5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EEC1ERSE_i>
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	3710      	adds	r7, #16
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	bd80      	pop	{r7, pc}

0800c4f0 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800c4f0:	b480      	push	{r7}
 800c4f2:	b083      	sub	sp, #12
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
    }
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	370c      	adds	r7, #12
 800c4fe:	46bd      	mov	sp, r7
 800c500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c504:	4770      	bx	lr

0800c506 <_ZN5Eigen9BlockImplIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ENS_5DenseEEC1ERS5_i>:
 800c506:	b580      	push	{r7, lr}
 800c508:	b084      	sub	sp, #16
 800c50a:	af00      	add	r7, sp, #0
 800c50c:	60f8      	str	r0, [r7, #12]
 800c50e:	60b9      	str	r1, [r7, #8]
 800c510:	607a      	str	r2, [r7, #4]
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	687a      	ldr	r2, [r7, #4]
 800c516:	68b9      	ldr	r1, [r7, #8]
 800c518:	4618      	mov	r0, r3
 800c51a:	f000 fbf7 	bl	800cd0c <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EEC1ERS6_i>
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	4618      	mov	r0, r3
 800c522:	3710      	adds	r7, #16
 800c524:	46bd      	mov	sp, r7
 800c526:	bd80      	pop	{r7, pc}

0800c528 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800c528:	b480      	push	{r7}
 800c52a:	b083      	sub	sp, #12
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
    }
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	4618      	mov	r0, r3
 800c534:	370c      	adds	r7, #12
 800c536:	46bd      	mov	sp, r7
 800c538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53c:	4770      	bx	lr

0800c53e <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE4colsEv>:
      : m_xpr(xpr), m_startRow(startRow), m_startCol(startCol),
                    m_blockRows(blockRows), m_blockCols(blockCols)
    {}

    EIGEN_DEVICE_FUNC inline Index rows() const { return m_blockRows.value(); }
    EIGEN_DEVICE_FUNC inline Index cols() const { return m_blockCols.value(); }
 800c53e:	b580      	push	{r7, lr}
 800c540:	b082      	sub	sp, #8
 800c542:	af00      	add	r7, sp, #0
 800c544:	6078      	str	r0, [r7, #4]
 800c546:	f7f9 fc52 	bl	8005dee <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800c54a:	4603      	mov	r3, r0
 800c54c:	4618      	mov	r0, r3
 800c54e:	3708      	adds	r7, #8
 800c550:	46bd      	mov	sp, r7
 800c552:	bd80      	pop	{r7, pc}

0800c554 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE4rowsEv>:
    EIGEN_DEVICE_FUNC inline Index rows() const { return m_blockRows.value(); }
 800c554:	b580      	push	{r7, lr}
 800c556:	b082      	sub	sp, #8
 800c558:	af00      	add	r7, sp, #0
 800c55a:	6078      	str	r0, [r7, #4]
 800c55c:	f7f9 fc47 	bl	8005dee <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800c560:	4603      	mov	r3, r0
 800c562:	4618      	mov	r0, r3
 800c564:	3708      	adds	r7, #8
 800c566:	46bd      	mov	sp, r7
 800c568:	bd80      	pop	{r7, pc}

0800c56a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 800c56a:	b580      	push	{r7, lr}
 800c56c:	b082      	sub	sp, #8
 800c56e:	af00      	add	r7, sp, #0
 800c570:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	3304      	adds	r3, #4
 800c576:	4618      	mov	r0, r3
 800c578:	f7ff f991 	bl	800b89e <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE4colsEv>
 800c57c:	4603      	mov	r3, r0
    }
 800c57e:	4618      	mov	r0, r3
 800c580:	3708      	adds	r7, #8
 800c582:	46bd      	mov	sp, r7
 800c584:	bd80      	pop	{r7, pc}

0800c586 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1ERKSP_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 800c586:	b580      	push	{r7, lr}
 800c588:	b082      	sub	sp, #8
 800c58a:	af00      	add	r7, sp, #0
 800c58c:	6078      	str	r0, [r7, #4]
 800c58e:	6039      	str	r1, [r7, #0]
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	6839      	ldr	r1, [r7, #0]
 800c594:	4618      	mov	r0, r3
 800c596:	f000 fbeb 	bl	800cd70 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1ERKSP_>
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	4618      	mov	r0, r3
 800c59e:	3708      	adds	r7, #8
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	bd80      	pop	{r7, pc}

0800c5a4 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800c5a4:	b480      	push	{r7}
 800c5a6:	b083      	sub	sp, #12
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	370c      	adds	r7, #12
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b8:	4770      	bx	lr

0800c5ba <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEED1Ev>:
 800c5ba:	b480      	push	{r7}
 800c5bc:	b083      	sub	sp, #12
 800c5be:	af00      	add	r7, sp, #0
 800c5c0:	6078      	str	r0, [r7, #4]
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	370c      	adds	r7, #12
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ce:	4770      	bx	lr

0800c5d0 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEED1Ev>:
 800c5d0:	b480      	push	{r7}
 800c5d2:	b083      	sub	sp, #12
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	4618      	mov	r0, r3
 800c5dc:	370c      	adds	r7, #12
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e4:	4770      	bx	lr

0800c5e6 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEED1Ev>:
 800c5e6:	b480      	push	{r7}
 800c5e8:	b083      	sub	sp, #12
 800c5ea:	af00      	add	r7, sp, #0
 800c5ec:	6078      	str	r0, [r7, #4]
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	370c      	adds	r7, #12
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fa:	4770      	bx	lr

0800c5fc <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS5_IS7_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEELi1ELi1ELb0EEEEEKNS9_IKNS8_ISB_EELi1ELi1ELb0EEEEEEELi0ELi2EE3runISS_EEfRKST_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b084      	sub	sp, #16
 800c600:	af00      	add	r7, sp, #0
 800c602:	60f8      	str	r0, [r7, #12]
 800c604:	60b9      	str	r1, [r7, #8]
 800c606:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 800c608:	68b9      	ldr	r1, [r7, #8]
 800c60a:	68f8      	ldr	r0, [r7, #12]
 800c60c:	f000 fbbf 	bl	800cd8e <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS5_IS7_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEELi1ELi1ELb0EEEEEKNS9_IKNS8_ISB_EELi1ELi1ELb0EEEEEEELi0ELi1EE3runERKST_RKS3_>
 800c610:	eef0 7a40 	vmov.f32	s15, s0
  }
 800c614:	eeb0 0a67 	vmov.f32	s0, s15
 800c618:	3710      	adds	r7, #16
 800c61a:	46bd      	mov	sp, r7
 800c61c:	bd80      	pop	{r7, pc}

0800c61e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800c61e:	b580      	push	{r7, lr}
 800c620:	b082      	sub	sp, #8
 800c622:	af00      	add	r7, sp, #0
 800c624:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800c626:	2200      	movs	r2, #0
 800c628:	2102      	movs	r1, #2
 800c62a:	6878      	ldr	r0, [r7, #4]
 800c62c:	f7fc ff39 	bl	80094a2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800c630:	6878      	ldr	r0, [r7, #4]
 800c632:	f000 fbbd 	bl	800cdb0 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSP_>
  }
 800c636:	bf00      	nop
 800c638:	3708      	adds	r7, #8
 800c63a:	46bd      	mov	sp, r7
 800c63c:	bd80      	pop	{r7, pc}

0800c63e <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EEC1ERS4_i>:
    EIGEN_INHERIT_ASSIGNMENT_OPERATORS(BlockImpl_dense)

    /** Column or Row constructor
      */
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    BlockImpl_dense(XprType& xpr, Index i)
 800c63e:	b5b0      	push	{r4, r5, r7, lr}
 800c640:	b084      	sub	sp, #16
 800c642:	af00      	add	r7, sp, #0
 800c644:	60f8      	str	r0, [r7, #12]
 800c646:	60b9      	str	r1, [r7, #8]
 800c648:	607a      	str	r2, [r7, #4]
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
             BlockRows==1 ? 1 : xpr.rows(),
             BlockCols==1 ? 1 : xpr.cols()),
        m_xpr(xpr),
        m_startRow( (BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) ? i : 0),
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800c64a:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800c64c:	68bb      	ldr	r3, [r7, #8]
 800c64e:	4618      	mov	r0, r3
 800c650:	f7fa ff34 	bl	80074bc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4dataEv>
 800c654:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 800c656:	68b8      	ldr	r0, [r7, #8]
 800c658:	f000 fbba 	bl	800cdd0 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11innerStrideEv>
 800c65c:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	fb02 f303 	mul.w	r3, r2, r3
 800c664:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800c666:	441d      	add	r5, r3
 800c668:	68bb      	ldr	r3, [r7, #8]
 800c66a:	4618      	mov	r0, r3
 800c66c:	f7f7 fde2 	bl	8004234 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800c670:	4603      	mov	r3, r0
 800c672:	2201      	movs	r2, #1
 800c674:	4629      	mov	r1, r5
 800c676:	4620      	mov	r0, r4
 800c678:	f000 fbc2 	bl	800ce00 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii>
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	68ba      	ldr	r2, [r7, #8]
 800c680:	609a      	str	r2, [r3, #8]
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	330c      	adds	r3, #12
 800c686:	6879      	ldr	r1, [r7, #4]
 800c688:	4618      	mov	r0, r3
 800c68a:	f000 fbf7 	bl	800ce7c <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	3310      	adds	r3, #16
 800c692:	2100      	movs	r1, #0
 800c694:	4618      	mov	r0, r3
 800c696:	f000 fbf1 	bl	800ce7c <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
    {
      init();
 800c69a:	68f8      	ldr	r0, [r7, #12]
 800c69c:	f000 fbfd 	bl	800ce9a <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE4initEv>
    }
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	3710      	adds	r7, #16
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	bdb0      	pop	{r4, r5, r7, pc}

0800c6aa <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EEC1ERS4_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 800c6aa:	b5b0      	push	{r4, r5, r7, lr}
 800c6ac:	b084      	sub	sp, #16
 800c6ae:	af00      	add	r7, sp, #0
 800c6b0:	60f8      	str	r0, [r7, #12]
 800c6b2:	60b9      	str	r1, [r7, #8]
 800c6b4:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800c6b6:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800c6b8:	68bb      	ldr	r3, [r7, #8]
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	f7f9 fe9d 	bl	80063fa <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4dataEv>
 800c6c0:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 800c6c2:	68b8      	ldr	r0, [r7, #8]
 800c6c4:	f7f9 ff6a 	bl	800659c <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>
 800c6c8:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	fb02 f303 	mul.w	r3, r2, r3
 800c6d0:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800c6d2:	441d      	add	r5, r3
 800c6d4:	68bb      	ldr	r3, [r7, #8]
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	f7f7 fe5d 	bl	8004396 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800c6dc:	4602      	mov	r2, r0
 800c6de:	2301      	movs	r3, #1
 800c6e0:	4629      	mov	r1, r5
 800c6e2:	4620      	mov	r0, r4
 800c6e4:	f000 fc00 	bl	800cee8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii>
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	68ba      	ldr	r2, [r7, #8]
 800c6ec:	609a      	str	r2, [r3, #8]
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	330c      	adds	r3, #12
 800c6f2:	2100      	movs	r1, #0
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	f000 fbc1 	bl	800ce7c <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	3310      	adds	r3, #16
 800c6fe:	6879      	ldr	r1, [r7, #4]
 800c700:	4618      	mov	r0, r3
 800c702:	f000 fc2f 	bl	800cf64 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
      init();
 800c706:	68f8      	ldr	r0, [r7, #12]
 800c708:	f000 fc46 	bl	800cf98 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EE4initEv>
    }
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	4618      	mov	r0, r3
 800c710:	3710      	adds	r7, #16
 800c712:	46bd      	mov	sp, r7
 800c714:	bdb0      	pop	{r4, r5, r7, pc}

0800c716 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1ERKSI_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800c716:	b580      	push	{r7, lr}
 800c718:	b082      	sub	sp, #8
 800c71a:	af00      	add	r7, sp, #0
 800c71c:	6078      	str	r0, [r7, #4]
 800c71e:	6039      	str	r1, [r7, #0]
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	6839      	ldr	r1, [r7, #0]
 800c724:	4618      	mov	r0, r3
 800c726:	f000 fc47 	bl	800cfb8 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	4618      	mov	r0, r3
 800c72e:	3708      	adds	r7, #8
 800c730:	46bd      	mov	sp, r7
 800c732:	bd80      	pop	{r7, pc}

0800c734 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi0ELi3EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 800c734:	b580      	push	{r7, lr}
 800c736:	b084      	sub	sp, #16
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
 800c73c:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800c73e:	6839      	ldr	r1, [r7, #0]
 800c740:	6878      	ldr	r0, [r7, #4]
 800c742:	f000 fc4b 	bl	800cfdc <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi0ELi1EE3runERKSM_RKS3_>
 800c746:	eef0 7a40 	vmov.f32	s15, s0
 800c74a:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 800c74e:	6839      	ldr	r1, [r7, #0]
 800c750:	6878      	ldr	r0, [r7, #4]
 800c752:	f000 fc54 	bl	800cffe <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi1ELi2EE3runERKSM_RKS3_>
 800c756:	eef0 7a40 	vmov.f32	s15, s0
 800c75a:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800c75e:	f107 020c 	add.w	r2, r7, #12
 800c762:	f107 0308 	add.w	r3, r7, #8
 800c766:	4619      	mov	r1, r3
 800c768:	6838      	ldr	r0, [r7, #0]
 800c76a:	f7fb fefe 	bl	800856a <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 800c76e:	eef0 7a40 	vmov.f32	s15, s0
  }
 800c772:	eeb0 0a67 	vmov.f32	s0, s15
 800c776:	3710      	adds	r7, #16
 800c778:	46bd      	mov	sp, r7
 800c77a:	bd80      	pop	{r7, pc}

0800c77c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_7ProductIS2_S2_Li0EEES6_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 800c77c:	b580      	push	{r7, lr}
 800c77e:	b082      	sub	sp, #8
 800c780:	af00      	add	r7, sp, #0
 800c782:	6078      	str	r0, [r7, #4]
 800c784:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 800c786:	6839      	ldr	r1, [r7, #0]
 800c788:	6878      	ldr	r0, [r7, #4]
 800c78a:	f000 fc5c 	bl	800d046 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_7ProductIS2_S2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 800c78e:	bf00      	nop
 800c790:	3708      	adds	r7, #8
 800c792:	46bd      	mov	sp, r7
 800c794:	bd80      	pop	{r7, pc}

0800c796 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS0_10IndexBasedEfEC1ERKS5_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 800c796:	b590      	push	{r4, r7, lr}
 800c798:	b083      	sub	sp, #12
 800c79a:	af00      	add	r7, sp, #0
 800c79c:	6078      	str	r0, [r7, #4]
 800c79e:	6039      	str	r1, [r7, #0]
 800c7a0:	6878      	ldr	r0, [r7, #4]
 800c7a2:	f000 fc7d 	bl	800d0a0 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1Ev>
 800c7a6:	687c      	ldr	r4, [r7, #4]
 800c7a8:	6838      	ldr	r0, [r7, #0]
 800c7aa:	f000 fc6d 	bl	800d088 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE16nestedExpressionEv>
 800c7ae:	4603      	mov	r3, r0
 800c7b0:	4619      	mov	r1, r3
 800c7b2:	4620      	mov	r0, r4
 800c7b4:	f7fa f9e0 	bl	8006b78 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	370c      	adds	r7, #12
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	bd90      	pop	{r4, r7, pc}

0800c7c2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index rowIndexByOuterInner(Index outer, Index inner)
 800c7c2:	b480      	push	{r7}
 800c7c4:	b083      	sub	sp, #12
 800c7c6:	af00      	add	r7, sp, #0
 800c7c8:	6078      	str	r0, [r7, #4]
 800c7ca:	6039      	str	r1, [r7, #0]
      : inner;
 800c7cc:	687b      	ldr	r3, [r7, #4]
  }
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	370c      	adds	r7, #12
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d8:	4770      	bx	lr

0800c7da <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index colIndexByOuterInner(Index outer, Index inner)
 800c7da:	b480      	push	{r7}
 800c7dc:	b083      	sub	sp, #12
 800c7de:	af00      	add	r7, sp, #0
 800c7e0:	6078      	str	r0, [r7, #4]
 800c7e2:	6039      	str	r1, [r7, #0]
      : outer;
 800c7e4:	683b      	ldr	r3, [r7, #0]
  }
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	370c      	adds	r7, #12
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f0:	4770      	bx	lr

0800c7f2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index row, Index col)
 800c7f2:	b5b0      	push	{r4, r5, r7, lr}
 800c7f4:	b086      	sub	sp, #24
 800c7f6:	af00      	add	r7, sp, #0
 800c7f8:	60f8      	str	r0, [r7, #12]
 800c7fa:	60b9      	str	r1, [r7, #8]
 800c7fc:	607a      	str	r2, [r7, #4]
    m_functor.assignCoeff(m_dst.coeffRef(row,col), m_src.coeff(row,col));
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	689c      	ldr	r4, [r3, #8]
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	687a      	ldr	r2, [r7, #4]
 800c808:	68b9      	ldr	r1, [r7, #8]
 800c80a:	4618      	mov	r0, r3
 800c80c:	f000 fc53 	bl	800d0b6 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEE8coeffRefEii>
 800c810:	4605      	mov	r5, r0
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	685b      	ldr	r3, [r3, #4]
 800c816:	687a      	ldr	r2, [r7, #4]
 800c818:	68b9      	ldr	r1, [r7, #8]
 800c81a:	4618      	mov	r0, r3
 800c81c:	f000 fc63 	bl	800d0e6 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEELi3ENS_10DenseShapeES9_ffE5coeffEii>
 800c820:	eef0 7a40 	vmov.f32	s15, s0
 800c824:	edc7 7a05 	vstr	s15, [r7, #20]
 800c828:	f107 0314 	add.w	r3, r7, #20
 800c82c:	461a      	mov	r2, r3
 800c82e:	4629      	mov	r1, r5
 800c830:	4620      	mov	r0, r4
 800c832:	f7fb f8a9 	bl	8007988 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 800c836:	bf00      	nop
 800c838:	3718      	adds	r7, #24
 800c83a:	46bd      	mov	sp, r7
 800c83c:	bdb0      	pop	{r4, r5, r7, pc}

0800c83e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800c83e:	b580      	push	{r7, lr}
 800c840:	b082      	sub	sp, #8
 800c842:	af00      	add	r7, sp, #0
 800c844:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800c846:	2202      	movs	r2, #2
 800c848:	2100      	movs	r1, #0
 800c84a:	6878      	ldr	r0, [r7, #4]
 800c84c:	f7ff fadf 	bl	800be0e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800c850:	6878      	ldr	r0, [r7, #4]
 800c852:	f000 fc7b 	bl	800d14c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSG_>
  }
 800c856:	bf00      	nop
 800c858:	3708      	adds	r7, #8
 800c85a:	46bd      	mov	sp, r7
 800c85c:	bd80      	pop	{r7, pc}

0800c85e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800c85e:	b480      	push	{r7}
 800c860:	b083      	sub	sp, #12
 800c862:	af00      	add	r7, sp, #0
 800c864:	6078      	str	r0, [r7, #4]
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	4618      	mov	r0, r3
 800c86c:	370c      	adds	r7, #12
 800c86e:	46bd      	mov	sp, r7
 800c870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c874:	4770      	bx	lr

0800c876 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800c876:	b480      	push	{r7}
 800c878:	b083      	sub	sp, #12
 800c87a:	af00      	add	r7, sp, #0
 800c87c:	6078      	str	r0, [r7, #4]
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	3304      	adds	r3, #4
 800c882:	4618      	mov	r0, r3
 800c884:	370c      	adds	r7, #12
 800c886:	46bd      	mov	sp, r7
 800c888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88c:	4770      	bx	lr

0800c88e <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEENS_10DenseShapeES7_Li3EE6evalToINS2_IfLi3ELi1ELi0ELi3ELi1EEEEEvRT_RKS3_RKS6_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 800c88e:	b580      	push	{r7, lr}
 800c890:	b088      	sub	sp, #32
 800c892:	af00      	add	r7, sp, #0
 800c894:	60f8      	str	r0, [r7, #12]
 800c896:	60b9      	str	r1, [r7, #8]
 800c898:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 800c89a:	f107 0314 	add.w	r3, r7, #20
 800c89e:	687a      	ldr	r2, [r7, #4]
 800c8a0:	68b9      	ldr	r1, [r7, #8]
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	f000 fc62 	bl	800d16c <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE11lazyProductINS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS9_EE>
 800c8a8:	f107 031c 	add.w	r3, r7, #28
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	f7f9 fcfc 	bl	80062aa <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800c8b2:	f107 021c 	add.w	r2, r7, #28
 800c8b6:	f107 0314 	add.w	r3, r7, #20
 800c8ba:	4619      	mov	r1, r3
 800c8bc:	68f8      	ldr	r0, [r7, #12]
 800c8be:	f000 fc6c 	bl	800d19a <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800c8c2:	bf00      	nop
 800c8c4:	3720      	adds	r7, #32
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	bd80      	pop	{r7, pc}
	...

0800c8cc <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii>:
    EIGEN_STRONG_INLINE void resize(Index rows, Index cols)
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b086      	sub	sp, #24
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	60f8      	str	r0, [r7, #12]
 800c8d4:	60b9      	str	r1, [r7, #8]
 800c8d6:	607a      	str	r2, [r7, #4]
      eigen_assert(   EIGEN_IMPLIES(RowsAtCompileTime!=Dynamic,rows==RowsAtCompileTime)
 800c8d8:	68bb      	ldr	r3, [r7, #8]
 800c8da:	2b01      	cmp	r3, #1
 800c8dc:	d108      	bne.n	800c8f0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii+0x24>
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	2b01      	cmp	r3, #1
 800c8e2:	d105      	bne.n	800c8f0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii+0x24>
 800c8e4:	68bb      	ldr	r3, [r7, #8]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	db02      	blt.n	800c8f0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii+0x24>
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	da06      	bge.n	800c8fe <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii+0x32>
 800c8f0:	4b0c      	ldr	r3, [pc, #48]	; (800c924 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii+0x58>)
 800c8f2:	4a0d      	ldr	r2, [pc, #52]	; (800c928 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii+0x5c>)
 800c8f4:	f240 1111 	movw	r1, #273	; 0x111
 800c8f8:	480c      	ldr	r0, [pc, #48]	; (800c92c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii+0x60>)
 800c8fa:	f010 fb9b 	bl	801d034 <__assert_func>
 800c8fe:	68bb      	ldr	r3, [r7, #8]
 800c900:	617b      	str	r3, [r7, #20]
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	613b      	str	r3, [r7, #16]
  }
 800c906:	bf00      	nop
        m_storage.resize(rows*cols, rows, cols);
 800c908:	68f8      	ldr	r0, [r7, #12]
 800c90a:	68bb      	ldr	r3, [r7, #8]
 800c90c:	687a      	ldr	r2, [r7, #4]
 800c90e:	fb02 f103 	mul.w	r1, r2, r3
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	68ba      	ldr	r2, [r7, #8]
 800c916:	f000 fc51 	bl	800d1bc <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE6resizeEiii>
    }
 800c91a:	bf00      	nop
 800c91c:	3718      	adds	r7, #24
 800c91e:	46bd      	mov	sp, r7
 800c920:	bd80      	pop	{r7, pc}
 800c922:	bf00      	nop
 800c924:	0802192c 	.word	0x0802192c
 800c928:	08025534 	.word	0x08025534
 800c92c:	08021b48 	.word	0x08021b48

0800c930 <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE16nestedExpressionEv>:
  EIGEN_DEVICE_FUNC const XprTypeNestedCleaned& nestedExpression() const { return m_xpr; }
 800c930:	b480      	push	{r7}
 800c932:	b083      	sub	sp, #12
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	4618      	mov	r0, r3
 800c93c:	370c      	adds	r7, #12
 800c93e:	46bd      	mov	sp, r7
 800c940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c944:	4770      	bx	lr

0800c946 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS7_INS0_IfLi1ELi3ELi1ELi1ELi3EEENS0_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS1_EEEERKT_>:
    explicit Matrix(const T& x)
 800c946:	b580      	push	{r7, lr}
 800c948:	b082      	sub	sp, #8
 800c94a:	af00      	add	r7, sp, #0
 800c94c:	6078      	str	r0, [r7, #4]
 800c94e:	6039      	str	r1, [r7, #0]
    {
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	4618      	mov	r0, r3
 800c954:	f7f7 fb9a 	bl	800408c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
      Base::_check_template_params();
 800c958:	f7f7 fba8 	bl	80040ac <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	6839      	ldr	r1, [r7, #0]
 800c960:	4618      	mov	r0, r3
 800c962:	f000 fc38 	bl	800d1d6 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS9_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS2_EESI_EEvRKNS_9DenseBaseIT0_EE>
    }
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	4618      	mov	r0, r3
 800c96a:	3708      	adds	r7, #8
 800c96c:	46bd      	mov	sp, r7
 800c96e:	bd80      	pop	{r7, pc}

0800c970 <_ZN5Eigen8internal15compute_inverseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_Li1EE3runERKS3_RS3_>:
  static inline void run(const MatrixType& matrix, ResultType& result)
 800c970:	b580      	push	{r7, lr}
 800c972:	ed2d 8b02 	vpush	{d8}
 800c976:	b084      	sub	sp, #16
 800c978:	af00      	add	r7, sp, #0
 800c97a:	6078      	str	r0, [r7, #4]
 800c97c:	6039      	str	r1, [r7, #0]
    internal::evaluator<MatrixType> matrixEval(matrix);
 800c97e:	f107 030c 	add.w	r3, r7, #12
 800c982:	6879      	ldr	r1, [r7, #4]
 800c984:	4618      	mov	r0, r3
 800c986:	f7fc ff50 	bl	800982a <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
    result.coeffRef(0,0) = Scalar(1) / matrixEval.coeff(0,0);
 800c98a:	f107 030c 	add.w	r3, r7, #12
 800c98e:	2200      	movs	r2, #0
 800c990:	2100      	movs	r1, #0
 800c992:	4618      	mov	r0, r3
 800c994:	f000 fc2c 	bl	800d1f0 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE5coeffEii>
 800c998:	4603      	mov	r3, r0
 800c99a:	ed93 8a00 	vldr	s16, [r3]
 800c99e:	683b      	ldr	r3, [r7, #0]
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	2100      	movs	r1, #0
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	f7f9 f968 	bl	8005c7a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8coeffRefEii>
 800c9aa:	4603      	mov	r3, r0
 800c9ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c9b0:	eec7 7a08 	vdiv.f32	s15, s14, s16
 800c9b4:	edc3 7a00 	vstr	s15, [r3]
    internal::evaluator<MatrixType> matrixEval(matrix);
 800c9b8:	f107 030c 	add.w	r3, r7, #12
 800c9bc:	4618      	mov	r0, r3
 800c9be:	f7fb fe1b 	bl	80085f8 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
  }
 800c9c2:	bf00      	nop
 800c9c4:	3710      	adds	r7, #16
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	ecbd 8b02 	vpop	{d8}
 800c9cc:	bd80      	pop	{r7, pc}

0800c9ce <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 800c9ce:	b580      	push	{r7, lr}
 800c9d0:	b082      	sub	sp, #8
 800c9d2:	af00      	add	r7, sp, #0
 800c9d4:	6078      	str	r0, [r7, #4]
 800c9d6:	6878      	ldr	r0, [r7, #4]
 800c9d8:	f7f8 fbe9 	bl	80051ae <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800c9dc:	4603      	mov	r3, r0
 800c9de:	4618      	mov	r0, r3
 800c9e0:	f7f8 fc23 	bl	800522a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800c9e4:	4603      	mov	r3, r0
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	3708      	adds	r7, #8
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	bd80      	pop	{r7, pc}

0800c9ee <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4sizeEv>:
  inline Index size() const EIGEN_NOEXCEPT { return rows() * cols(); }
 800c9ee:	b590      	push	{r4, r7, lr}
 800c9f0:	b083      	sub	sp, #12
 800c9f2:	af00      	add	r7, sp, #0
 800c9f4:	6078      	str	r0, [r7, #4]
 800c9f6:	6878      	ldr	r0, [r7, #4]
 800c9f8:	f7ff ffe9 	bl	800c9ce <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800c9fc:	4604      	mov	r4, r0
 800c9fe:	6878      	ldr	r0, [r7, #4]
 800ca00:	f000 f807 	bl	800ca12 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800ca04:	4603      	mov	r3, r0
 800ca06:	fb04 f303 	mul.w	r3, r4, r3
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	370c      	adds	r7, #12
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	bd90      	pop	{r4, r7, pc}

0800ca12 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800ca12:	b580      	push	{r7, lr}
 800ca14:	b082      	sub	sp, #8
 800ca16:	af00      	add	r7, sp, #0
 800ca18:	6078      	str	r0, [r7, #4]
 800ca1a:	6878      	ldr	r0, [r7, #4]
 800ca1c:	f7f8 fbc7 	bl	80051ae <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800ca20:	4603      	mov	r3, r0
 800ca22:	4618      	mov	r0, r3
 800ca24:	f7f8 fc0c 	bl	8005240 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800ca28:	4603      	mov	r3, r0
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	3708      	adds	r7, #8
 800ca2e:	46bd      	mov	sp, r7
 800ca30:	bd80      	pop	{r7, pc}

0800ca32 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EEC1ERS4_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 800ca32:	b5b0      	push	{r4, r5, r7, lr}
 800ca34:	b084      	sub	sp, #16
 800ca36:	af00      	add	r7, sp, #0
 800ca38:	60f8      	str	r0, [r7, #12]
 800ca3a:	60b9      	str	r1, [r7, #8]
 800ca3c:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800ca3e:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800ca40:	68bb      	ldr	r3, [r7, #8]
 800ca42:	4618      	mov	r0, r3
 800ca44:	f7f9 fcd9 	bl	80063fa <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4dataEv>
 800ca48:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 800ca4a:	68b8      	ldr	r0, [r7, #8]
 800ca4c:	f000 fa35 	bl	800ceba <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11innerStrideEv>
 800ca50:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	fb02 f303 	mul.w	r3, r2, r3
 800ca58:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800ca5a:	18e9      	adds	r1, r5, r3
 800ca5c:	2301      	movs	r3, #1
 800ca5e:	2201      	movs	r2, #1
 800ca60:	4620      	mov	r0, r4
 800ca62:	f000 fbe9 	bl	800d238 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii>
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	68ba      	ldr	r2, [r7, #8]
 800ca6a:	609a      	str	r2, [r3, #8]
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	330c      	adds	r3, #12
 800ca70:	6879      	ldr	r1, [r7, #4]
 800ca72:	4618      	mov	r0, r3
 800ca74:	f000 fa02 	bl	800ce7c <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	3310      	adds	r3, #16
 800ca7c:	2100      	movs	r1, #0
 800ca7e:	4618      	mov	r0, r3
 800ca80:	f000 fa70 	bl	800cf64 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
      init();
 800ca84:	68f8      	ldr	r0, [r7, #12]
 800ca86:	f000 fc15 	bl	800d2b4 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EE4initEv>
    }
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	3710      	adds	r7, #16
 800ca90:	46bd      	mov	sp, r7
 800ca92:	bdb0      	pop	{r4, r5, r7, pc}

0800ca94 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EEC1ERS4_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 800ca94:	b5b0      	push	{r4, r5, r7, lr}
 800ca96:	b084      	sub	sp, #16
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	60f8      	str	r0, [r7, #12]
 800ca9c:	60b9      	str	r1, [r7, #8]
 800ca9e:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800caa0:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800caa2:	68bb      	ldr	r3, [r7, #8]
 800caa4:	4618      	mov	r0, r3
 800caa6:	f7fd fd27 	bl	800a4f8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4dataEv>
 800caaa:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 800caac:	68b8      	ldr	r0, [r7, #8]
 800caae:	f000 fc11 	bl	800d2d4 <_ZNK5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EE11innerStrideEv>
 800cab2:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	fb02 f303 	mul.w	r3, r2, r3
 800caba:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800cabc:	18e9      	adds	r1, r5, r3
 800cabe:	2301      	movs	r3, #1
 800cac0:	2201      	movs	r2, #1
 800cac2:	4620      	mov	r0, r4
 800cac4:	f000 fc1e 	bl	800d304 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii>
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	68ba      	ldr	r2, [r7, #8]
 800cacc:	609a      	str	r2, [r3, #8]
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	330c      	adds	r3, #12
 800cad2:	6879      	ldr	r1, [r7, #4]
 800cad4:	4618      	mov	r0, r3
 800cad6:	f000 fa45 	bl	800cf64 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	330d      	adds	r3, #13
 800cade:	6879      	ldr	r1, [r7, #4]
 800cae0:	4618      	mov	r0, r3
 800cae2:	f000 fa3f 	bl	800cf64 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
      init();
 800cae6:	68f8      	ldr	r0, [r7, #12]
 800cae8:	f000 fc4a 	bl	800d380 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EE4initEv>
    }
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	4618      	mov	r0, r3
 800caf0:	3710      	adds	r7, #16
 800caf2:	46bd      	mov	sp, r7
 800caf4:	bdb0      	pop	{r4, r5, r7, pc}

0800caf6 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1ERKSI_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800caf6:	b580      	push	{r7, lr}
 800caf8:	b082      	sub	sp, #8
 800cafa:	af00      	add	r7, sp, #0
 800cafc:	6078      	str	r0, [r7, #4]
 800cafe:	6039      	str	r1, [r7, #0]
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	6839      	ldr	r1, [r7, #0]
 800cb04:	4618      	mov	r0, r3
 800cb06:	f000 fc4b 	bl	800d3a0 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	3708      	adds	r7, #8
 800cb10:	46bd      	mov	sp, r7
 800cb12:	bd80      	pop	{r7, pc}

0800cb14 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEELi0ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b082      	sub	sp, #8
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
 800cb1c:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800cb1e:	2200      	movs	r2, #0
 800cb20:	2100      	movs	r1, #0
 800cb22:	6878      	ldr	r0, [r7, #4]
 800cb24:	f000 fc4e 	bl	800d3c4 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 800cb28:	eef0 7a40 	vmov.f32	s15, s0
  }
 800cb2c:	eeb0 0a67 	vmov.f32	s0, s15
 800cb30:	3708      	adds	r7, #8
 800cb32:	46bd      	mov	sp, r7
 800cb34:	bd80      	pop	{r7, pc}

0800cb36 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800cb36:	b580      	push	{r7, lr}
 800cb38:	b086      	sub	sp, #24
 800cb3a:	af00      	add	r7, sp, #0
 800cb3c:	60f8      	str	r0, [r7, #12]
 800cb3e:	60b9      	str	r1, [r7, #8]
 800cb40:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800cb46:	687a      	ldr	r2, [r7, #4]
 800cb48:	68b9      	ldr	r1, [r7, #8]
 800cb4a:	6978      	ldr	r0, [r7, #20]
 800cb4c:	f000 fc4d 	bl	800d3ea <_ZN5Eigen8internal30assignment_from_xpr_op_productINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_9assign_opIffEENS0_13sub_assign_opIffEEE3runINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KS7_EES9_EEvRS3_RKT_RKT0_>
}
 800cb50:	bf00      	nop
 800cb52:	3718      	adds	r7, #24
 800cb54:	46bd      	mov	sp, r7
 800cb56:	bd80      	pop	{r7, pc}

0800cb58 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800cb58:	b480      	push	{r7}
 800cb5a:	b083      	sub	sp, #12
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	6078      	str	r0, [r7, #4]
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	4618      	mov	r0, r3
 800cb66:	370c      	adds	r7, #12
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6e:	4770      	bx	lr

0800cb70 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800cb70:	b480      	push	{r7}
 800cb72:	b083      	sub	sp, #12
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	3304      	adds	r3, #4
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	370c      	adds	r7, #12
 800cb80:	46bd      	mov	sp, r7
 800cb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb86:	4770      	bx	lr

0800cb88 <_ZN5Eigen8internal13sub_assign_opIffEC1Ev>:
  * \brief Template functor for scalar/packet assignment with subtraction
  *
  */
template<typename DstScalar,typename SrcScalar> struct sub_assign_op {

  EIGEN_EMPTY_STRUCT_CTOR(sub_assign_op)
 800cb88:	b480      	push	{r7}
 800cb8a:	b083      	sub	sp, #12
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	6078      	str	r0, [r7, #4]
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	4618      	mov	r0, r3
 800cb94:	370c      	adds	r7, #12
 800cb96:	46bd      	mov	sp, r7
 800cb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9c:	4770      	bx	lr

0800cb9e <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800cb9e:	b580      	push	{r7, lr}
 800cba0:	b086      	sub	sp, #24
 800cba2:	af00      	add	r7, sp, #0
 800cba4:	60f8      	str	r0, [r7, #12]
 800cba6:	60b9      	str	r1, [r7, #8]
 800cba8:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800cbae:	687a      	ldr	r2, [r7, #4]
 800cbb0:	68b9      	ldr	r1, [r7, #8]
 800cbb2:	6978      	ldr	r0, [r7, #20]
 800cbb4:	f000 fc44 	bl	800d440 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_>
}
 800cbb8:	bf00      	nop
 800cbba:	3718      	adds	r7, #24
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	bd80      	pop	{r7, pc}

0800cbc0 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ENS_5DenseEEC1ERS3_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b084      	sub	sp, #16
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	60f8      	str	r0, [r7, #12]
 800cbc8:	60b9      	str	r1, [r7, #8]
 800cbca:	607a      	str	r2, [r7, #4]
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	687a      	ldr	r2, [r7, #4]
 800cbd0:	68b9      	ldr	r1, [r7, #8]
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	f000 fc6e 	bl	800d4b4 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EEC1ERS4_i>
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	4618      	mov	r0, r3
 800cbdc:	3710      	adds	r7, #16
 800cbde:	46bd      	mov	sp, r7
 800cbe0:	bd80      	pop	{r7, pc}

0800cbe2 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800cbe2:	b480      	push	{r7}
 800cbe4:	b083      	sub	sp, #12
 800cbe6:	af00      	add	r7, sp, #0
 800cbe8:	6078      	str	r0, [r7, #4]
    }
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	4618      	mov	r0, r3
 800cbee:	370c      	adds	r7, #12
 800cbf0:	46bd      	mov	sp, r7
 800cbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf6:	4770      	bx	lr

0800cbf8 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b082      	sub	sp, #8
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	4618      	mov	r0, r3
 800cc04:	f7fd ffc5 	bl	800ab92 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 800cc08:	4603      	mov	r3, r0
    }
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	3708      	adds	r7, #8
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	bd80      	pop	{r7, pc}

0800cc12 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1ERKSG_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 800cc12:	b580      	push	{r7, lr}
 800cc14:	b082      	sub	sp, #8
 800cc16:	af00      	add	r7, sp, #0
 800cc18:	6078      	str	r0, [r7, #4]
 800cc1a:	6039      	str	r1, [r7, #0]
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	6839      	ldr	r1, [r7, #0]
 800cc20:	4618      	mov	r0, r3
 800cc22:	f000 fc7d 	bl	800d520 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1ERKSG_>
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	4618      	mov	r0, r3
 800cc2a:	3708      	adds	r7, #8
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	bd80      	pop	{r7, pc}

0800cc30 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800cc30:	b480      	push	{r7}
 800cc32:	b083      	sub	sp, #12
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	6078      	str	r0, [r7, #4]
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	370c      	adds	r7, #12
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc44:	4770      	bx	lr

0800cc46 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>:
 800cc46:	b480      	push	{r7}
 800cc48:	b083      	sub	sp, #12
 800cc4a:	af00      	add	r7, sp, #0
 800cc4c:	6078      	str	r0, [r7, #4]
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	4618      	mov	r0, r3
 800cc52:	370c      	adds	r7, #12
 800cc54:	46bd      	mov	sp, r7
 800cc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5a:	4770      	bx	lr

0800cc5c <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi0ELi2EE3runISJ_EEfRKSK_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	b084      	sub	sp, #16
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	60f8      	str	r0, [r7, #12]
 800cc64:	60b9      	str	r1, [r7, #8]
 800cc66:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 800cc68:	68b9      	ldr	r1, [r7, #8]
 800cc6a:	68f8      	ldr	r0, [r7, #12]
 800cc6c:	f000 fc67 	bl	800d53e <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi0ELi3EE3runERKSK_RKS3_>
 800cc70:	eef0 7a40 	vmov.f32	s15, s0
  }
 800cc74:	eeb0 0a67 	vmov.f32	s0, s15
 800cc78:	3710      	adds	r7, #16
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	bd80      	pop	{r7, pc}

0800cc7e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800cc7e:	b580      	push	{r7, lr}
 800cc80:	b082      	sub	sp, #8
 800cc82:	af00      	add	r7, sp, #0
 800cc84:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800cc86:	2200      	movs	r2, #0
 800cc88:	2102      	movs	r1, #2
 800cc8a:	6878      	ldr	r0, [r7, #4]
 800cc8c:	f7fc fed0 	bl	8009a30 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800cc90:	6878      	ldr	r0, [r7, #4]
 800cc92:	f000 fc78 	bl	800d586 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSL_>
  }
 800cc96:	bf00      	nop
 800cc98:	3708      	adds	r7, #8
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	bd80      	pop	{r7, pc}

0800cc9e <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1Ev>:
 800cc9e:	b580      	push	{r7, lr}
 800cca0:	b082      	sub	sp, #8
 800cca2:	af00      	add	r7, sp, #0
 800cca4:	6078      	str	r0, [r7, #4]
 800cca6:	6878      	ldr	r0, [r7, #4]
 800cca8:	f000 fc7d 	bl	800d5a6 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1Ev>
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	4618      	mov	r0, r3
 800ccb0:	3708      	adds	r7, #8
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	bd80      	pop	{r7, pc}

0800ccb6 <_ZN5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EEC1ERSE_i>:
    inline BlockImpl_dense(XprType& xpr, Index i)
 800ccb6:	b580      	push	{r7, lr}
 800ccb8:	b084      	sub	sp, #16
 800ccba:	af00      	add	r7, sp, #0
 800ccbc:	60f8      	str	r0, [r7, #12]
 800ccbe:	60b9      	str	r1, [r7, #8]
 800ccc0:	607a      	str	r2, [r7, #4]
        m_blockCols(BlockCols==1 ? 1 : xpr.cols())
 800ccc2:	68f8      	ldr	r0, [r7, #12]
 800ccc4:	f7ff ffeb 	bl	800cc9e <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1Ev>
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	68b9      	ldr	r1, [r7, #8]
 800cccc:	4618      	mov	r0, r3
 800ccce:	f7f6 fe79 	bl	80039c4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERKSC_>
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	3310      	adds	r3, #16
 800ccd6:	6879      	ldr	r1, [r7, #4]
 800ccd8:	4618      	mov	r0, r3
 800ccda:	f000 f8cf 	bl	800ce7c <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	3314      	adds	r3, #20
 800cce2:	2100      	movs	r1, #0
 800cce4:	4618      	mov	r0, r3
 800cce6:	f000 f93d 	bl	800cf64 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	3315      	adds	r3, #21
 800ccee:	2101      	movs	r1, #1
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	f7f9 f84f 	bl	8005d94 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	3316      	adds	r3, #22
 800ccfa:	2101      	movs	r1, #1
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	f7f9 f849 	bl	8005d94 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
    {}
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	4618      	mov	r0, r3
 800cd06:	3710      	adds	r7, #16
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	bd80      	pop	{r7, pc}

0800cd0c <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EEC1ERS6_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 800cd0c:	b5b0      	push	{r4, r5, r7, lr}
 800cd0e:	b084      	sub	sp, #16
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	60f8      	str	r0, [r7, #12]
 800cd14:	60b9      	str	r1, [r7, #8]
 800cd16:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800cd18:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800cd1a:	68b8      	ldr	r0, [r7, #8]
 800cd1c:	f000 fc4e 	bl	800d5bc <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE4dataEv>
 800cd20:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 800cd22:	68b8      	ldr	r0, [r7, #8]
 800cd24:	f000 fc5e 	bl	800d5e4 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE11innerStrideEv>
 800cd28:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	fb02 f303 	mul.w	r3, r2, r3
 800cd30:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800cd32:	18e9      	adds	r1, r5, r3
 800cd34:	2301      	movs	r3, #1
 800cd36:	2201      	movs	r2, #1
 800cd38:	4620      	mov	r0, r4
 800cd3a:	f000 fc87 	bl	800d64c <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii>
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	3308      	adds	r3, #8
 800cd42:	68ba      	ldr	r2, [r7, #8]
 800cd44:	6812      	ldr	r2, [r2, #0]
 800cd46:	601a      	str	r2, [r3, #0]
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	330c      	adds	r3, #12
 800cd4c:	2100      	movs	r1, #0
 800cd4e:	4618      	mov	r0, r3
 800cd50:	f000 f908 	bl	800cf64 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	3310      	adds	r3, #16
 800cd58:	6879      	ldr	r1, [r7, #4]
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	f000 f88e 	bl	800ce7c <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
      init();
 800cd60:	68f8      	ldr	r0, [r7, #12]
 800cd62:	f000 fcb1 	bl	800d6c8 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EE4initEv>
    }
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	4618      	mov	r0, r3
 800cd6a:	3710      	adds	r7, #16
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	bdb0      	pop	{r4, r5, r7, pc}

0800cd70 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1ERKSP_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b082      	sub	sp, #8
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]
 800cd78:	6039      	str	r1, [r7, #0]
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	6839      	ldr	r1, [r7, #0]
 800cd7e:	4618      	mov	r0, r3
 800cd80:	f000 fcb2 	bl	800d6e8 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffEC1ERKSP_>
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	4618      	mov	r0, r3
 800cd88:	3708      	adds	r7, #8
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	bd80      	pop	{r7, pc}

0800cd8e <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS5_IS7_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEELi1ELi1ELb0EEEEEKNS9_IKNS8_ISB_EELi1ELi1ELb0EEEEEEELi0ELi1EE3runERKST_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800cd8e:	b580      	push	{r7, lr}
 800cd90:	b082      	sub	sp, #8
 800cd92:	af00      	add	r7, sp, #0
 800cd94:	6078      	str	r0, [r7, #4]
 800cd96:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800cd98:	2200      	movs	r2, #0
 800cd9a:	2100      	movs	r1, #0
 800cd9c:	6878      	ldr	r0, [r7, #4]
 800cd9e:	f000 fcb5 	bl	800d70c <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE17coeffByOuterInnerEii>
 800cda2:	eef0 7a40 	vmov.f32	s15, s0
  }
 800cda6:	eeb0 0a67 	vmov.f32	s0, s15
 800cdaa:	3708      	adds	r7, #8
 800cdac:	46bd      	mov	sp, r7
 800cdae:	bd80      	pop	{r7, pc}

0800cdb0 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b082      	sub	sp, #8
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800cdb8:	2201      	movs	r2, #1
 800cdba:	2102      	movs	r1, #2
 800cdbc:	6878      	ldr	r0, [r7, #4]
 800cdbe:	f7fc fb70 	bl	80094a2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800cdc2:	6878      	ldr	r0, [r7, #4]
 800cdc4:	f000 fcb5 	bl	800d732 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSP_>
  }
 800cdc8:	bf00      	nop
 800cdca:	3708      	adds	r7, #8
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	bd80      	pop	{r7, pc}

0800cdd0 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11innerStrideEv>:
    inline Index innerStride() const EIGEN_NOEXCEPT { return 1; }
 800cdd0:	b480      	push	{r7}
 800cdd2:	b083      	sub	sp, #12
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
 800cdd8:	2301      	movs	r3, #1
 800cdda:	4618      	mov	r0, r3
 800cddc:	370c      	adds	r7, #12
 800cdde:	46bd      	mov	sp, r7
 800cde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde4:	4770      	bx	lr

0800cde6 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>:
 800cde6:	b580      	push	{r7, lr}
 800cde8:	b082      	sub	sp, #8
 800cdea:	af00      	add	r7, sp, #0
 800cdec:	6078      	str	r0, [r7, #4]
 800cdee:	6878      	ldr	r0, [r7, #4]
 800cdf0:	f000 fcaf 	bl	800d752 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	3708      	adds	r7, #8
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	bd80      	pop	{r7, pc}
	...

0800ce00 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii>:
      checkSanity<Derived>();
    }

    /** \internal Constructor for dynamically sized matrices */
    EIGEN_DEVICE_FUNC
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b084      	sub	sp, #16
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	60f8      	str	r0, [r7, #12]
 800ce08:	60b9      	str	r1, [r7, #8]
 800ce0a:	607a      	str	r2, [r7, #4]
 800ce0c:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 800ce0e:	68f8      	ldr	r0, [r7, #12]
 800ce10:	f7ff ffe9 	bl	800cde6 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	68ba      	ldr	r2, [r7, #8]
 800ce18:	601a      	str	r2, [r3, #0]
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	3304      	adds	r3, #4
 800ce1e:	6879      	ldr	r1, [r7, #4]
 800ce20:	4618      	mov	r0, r3
 800ce22:	f7f8 ffb7 	bl	8005d94 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	3305      	adds	r3, #5
 800ce2a:	6839      	ldr	r1, [r7, #0]
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	f7f8 ff97 	bl	8005d60 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
    {
      eigen_assert( (dataPtr == 0)
 800ce32:	68bb      	ldr	r3, [r7, #8]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d011      	beq.n	800ce5c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x5c>
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	db08      	blt.n	800ce50 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x50>
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	2b01      	cmp	r3, #1
 800ce42:	d105      	bne.n	800ce50 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x50>
 800ce44:	683b      	ldr	r3, [r7, #0]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	db02      	blt.n	800ce50 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x50>
 800ce4a:	683b      	ldr	r3, [r7, #0]
 800ce4c:	2b03      	cmp	r3, #3
 800ce4e:	d005      	beq.n	800ce5c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x5c>
 800ce50:	4b07      	ldr	r3, [pc, #28]	; (800ce70 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x70>)
 800ce52:	4a08      	ldr	r2, [pc, #32]	; (800ce74 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x74>)
 800ce54:	21b0      	movs	r1, #176	; 0xb0
 800ce56:	4808      	ldr	r0, [pc, #32]	; (800ce78 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x78>)
 800ce58:	f010 f8ec 	bl	801d034 <__assert_func>
              || (   rows >= 0 && (RowsAtCompileTime == Dynamic || RowsAtCompileTime == rows)
                  && cols >= 0 && (ColsAtCompileTime == Dynamic || ColsAtCompileTime == cols)));
      checkSanity<Derived>();
 800ce5c:	2100      	movs	r1, #0
 800ce5e:	68f8      	ldr	r0, [r7, #12]
 800ce60:	f000 fc82 	bl	800d768 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	4618      	mov	r0, r3
 800ce68:	3710      	adds	r7, #16
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	bd80      	pop	{r7, pc}
 800ce6e:	bf00      	nop
 800ce70:	080255c0 	.word	0x080255c0
 800ce74:	0802566c 	.word	0x0802566c
 800ce78:	08025770 	.word	0x08025770

0800ce7c <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>:

template<typename T> class variable_if_dynamic<T, Dynamic>
{
    T m_value;
  public:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit variable_if_dynamic(T value = 0) EIGEN_NO_THROW : m_value(value) {}
 800ce7c:	b480      	push	{r7}
 800ce7e:	b083      	sub	sp, #12
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
 800ce84:	6039      	str	r1, [r7, #0]
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	683a      	ldr	r2, [r7, #0]
 800ce8a:	601a      	str	r2, [r3, #0]
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	4618      	mov	r0, r3
 800ce90:	370c      	adds	r7, #12
 800ce92:	46bd      	mov	sp, r7
 800ce94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce98:	4770      	bx	lr

0800ce9a <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE4initEv>:
    }
    #endif

  protected:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    void init()
 800ce9a:	b580      	push	{r7, lr}
 800ce9c:	b082      	sub	sp, #8
 800ce9e:	af00      	add	r7, sp, #0
 800cea0:	6078      	str	r0, [r7, #4]
    {
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
                    ? m_xpr.outerStride()
                    : m_xpr.innerStride();
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	689b      	ldr	r3, [r3, #8]
                    ? m_xpr.outerStride()
 800cea6:	4618      	mov	r0, r3
 800cea8:	f7ff ff92 	bl	800cdd0 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11innerStrideEv>
 800ceac:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	615a      	str	r2, [r3, #20]
    }
 800ceb2:	bf00      	nop
 800ceb4:	3708      	adds	r7, #8
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	bd80      	pop	{r7, pc}

0800ceba <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11innerStrideEv>:
 800ceba:	b480      	push	{r7}
 800cebc:	b083      	sub	sp, #12
 800cebe:	af00      	add	r7, sp, #0
 800cec0:	6078      	str	r0, [r7, #4]
 800cec2:	2301      	movs	r3, #1
 800cec4:	4618      	mov	r0, r3
 800cec6:	370c      	adds	r7, #12
 800cec8:	46bd      	mov	sp, r7
 800ceca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cece:	4770      	bx	lr

0800ced0 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1Ev>:
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b082      	sub	sp, #8
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
 800ced8:	6878      	ldr	r0, [r7, #4]
 800ceda:	f000 fc50 	bl	800d77e <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1Ev>
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	4618      	mov	r0, r3
 800cee2:	3708      	adds	r7, #8
 800cee4:	46bd      	mov	sp, r7
 800cee6:	bd80      	pop	{r7, pc}

0800cee8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 800cee8:	b580      	push	{r7, lr}
 800ceea:	b084      	sub	sp, #16
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	60f8      	str	r0, [r7, #12]
 800cef0:	60b9      	str	r1, [r7, #8]
 800cef2:	607a      	str	r2, [r7, #4]
 800cef4:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 800cef6:	68f8      	ldr	r0, [r7, #12]
 800cef8:	f7ff ffea 	bl	800ced0 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1Ev>
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	68ba      	ldr	r2, [r7, #8]
 800cf00:	601a      	str	r2, [r3, #0]
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	3304      	adds	r3, #4
 800cf06:	6879      	ldr	r1, [r7, #4]
 800cf08:	4618      	mov	r0, r3
 800cf0a:	f7f8 ff29 	bl	8005d60 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	3305      	adds	r3, #5
 800cf12:	6839      	ldr	r1, [r7, #0]
 800cf14:	4618      	mov	r0, r3
 800cf16:	f7f8 ff3d 	bl	8005d94 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 800cf1a:	68bb      	ldr	r3, [r7, #8]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d011      	beq.n	800cf44 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	db08      	blt.n	800cf38 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	2b03      	cmp	r3, #3
 800cf2a:	d105      	bne.n	800cf38 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800cf2c:	683b      	ldr	r3, [r7, #0]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	db02      	blt.n	800cf38 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800cf32:	683b      	ldr	r3, [r7, #0]
 800cf34:	2b01      	cmp	r3, #1
 800cf36:	d005      	beq.n	800cf44 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 800cf38:	4b07      	ldr	r3, [pc, #28]	; (800cf58 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x70>)
 800cf3a:	4a08      	ldr	r2, [pc, #32]	; (800cf5c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x74>)
 800cf3c:	21b0      	movs	r1, #176	; 0xb0
 800cf3e:	4808      	ldr	r0, [pc, #32]	; (800cf60 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x78>)
 800cf40:	f010 f878 	bl	801d034 <__assert_func>
      checkSanity<Derived>();
 800cf44:	2100      	movs	r1, #0
 800cf46:	68f8      	ldr	r0, [r7, #12]
 800cf48:	f000 fc24 	bl	800d794 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	4618      	mov	r0, r3
 800cf50:	3710      	adds	r7, #16
 800cf52:	46bd      	mov	sp, r7
 800cf54:	bd80      	pop	{r7, pc}
 800cf56:	bf00      	nop
 800cf58:	080255c0 	.word	0x080255c0
 800cf5c:	080257c4 	.word	0x080257c4
 800cf60:	08025770 	.word	0x08025770

0800cf64 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit variable_if_dynamic(T v) { EIGEN_ONLY_USED_FOR_DEBUG(v); eigen_assert(v == T(Value)); }
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b082      	sub	sp, #8
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
 800cf6c:	6039      	str	r1, [r7, #0]
 800cf6e:	683b      	ldr	r3, [r7, #0]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d005      	beq.n	800cf80 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei+0x1c>
 800cf74:	4b05      	ldr	r3, [pc, #20]	; (800cf8c <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei+0x28>)
 800cf76:	4a06      	ldr	r2, [pc, #24]	; (800cf90 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei+0x2c>)
 800cf78:	2185      	movs	r1, #133	; 0x85
 800cf7a:	4806      	ldr	r0, [pc, #24]	; (800cf94 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei+0x30>)
 800cf7c:	f010 f85a 	bl	801d034 <__assert_func>
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	4618      	mov	r0, r3
 800cf84:	3708      	adds	r7, #8
 800cf86:	46bd      	mov	sp, r7
 800cf88:	bd80      	pop	{r7, pc}
 800cf8a:	bf00      	nop
 800cf8c:	080213d8 	.word	0x080213d8
 800cf90:	080258c8 	.word	0x080258c8
 800cf94:	08021450 	.word	0x08021450

0800cf98 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EE4initEv>:
    void init()
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b082      	sub	sp, #8
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	689b      	ldr	r3, [r3, #8]
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	f7f9 faf9 	bl	800659c <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>
 800cfaa:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	615a      	str	r2, [r3, #20]
    }
 800cfb0:	bf00      	nop
 800cfb2:	3708      	adds	r7, #8
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	bd80      	pop	{r7, pc}

0800cfb8 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b082      	sub	sp, #8
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
 800cfc0:	6039      	str	r1, [r7, #0]
 800cfc2:	6878      	ldr	r0, [r7, #4]
 800cfc4:	f000 fbf1 	bl	800d7aa <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1Ev>
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	6839      	ldr	r1, [r7, #0]
 800cfcc:	4618      	mov	r0, r3
 800cfce:	f000 fbf7 	bl	800d7c0 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>
  }
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	3708      	adds	r7, #8
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	bd80      	pop	{r7, pc}

0800cfdc <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi0ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b082      	sub	sp, #8
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
 800cfe4:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	2100      	movs	r1, #0
 800cfea:	6878      	ldr	r0, [r7, #4]
 800cfec:	f000 fc10 	bl	800d810 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 800cff0:	eef0 7a40 	vmov.f32	s15, s0
  }
 800cff4:	eeb0 0a67 	vmov.f32	s0, s15
 800cff8:	3708      	adds	r7, #8
 800cffa:	46bd      	mov	sp, r7
 800cffc:	bd80      	pop	{r7, pc}

0800cffe <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi1ELi2EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 800cffe:	b580      	push	{r7, lr}
 800d000:	b084      	sub	sp, #16
 800d002:	af00      	add	r7, sp, #0
 800d004:	6078      	str	r0, [r7, #4]
 800d006:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800d008:	6839      	ldr	r1, [r7, #0]
 800d00a:	6878      	ldr	r0, [r7, #4]
 800d00c:	f000 fc13 	bl	800d836 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi1ELi1EE3runERKSM_RKS3_>
 800d010:	eef0 7a40 	vmov.f32	s15, s0
 800d014:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 800d018:	6839      	ldr	r1, [r7, #0]
 800d01a:	6878      	ldr	r0, [r7, #4]
 800d01c:	f000 fc1c 	bl	800d858 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi2ELi1EE3runERKSM_RKS3_>
 800d020:	eef0 7a40 	vmov.f32	s15, s0
 800d024:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800d028:	f107 020c 	add.w	r2, r7, #12
 800d02c:	f107 0308 	add.w	r3, r7, #8
 800d030:	4619      	mov	r1, r3
 800d032:	6838      	ldr	r0, [r7, #0]
 800d034:	f7fb fa99 	bl	800856a <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 800d038:	eef0 7a40 	vmov.f32	s15, s0
  }
 800d03c:	eeb0 0a67 	vmov.f32	s0, s15
 800d040:	3710      	adds	r7, #16
 800d042:	46bd      	mov	sp, r7
 800d044:	bd80      	pop	{r7, pc}

0800d046 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_7ProductIS2_S2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 800d046:	b5b0      	push	{r4, r5, r7, lr}
 800d048:	b084      	sub	sp, #16
 800d04a:	af00      	add	r7, sp, #0
 800d04c:	6078      	str	r0, [r7, #4]
 800d04e:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 800d050:	6878      	ldr	r0, [r7, #4]
 800d052:	f7f7 fdcd 	bl	8004bf0 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800d056:	4604      	mov	r4, r0
 800d058:	6838      	ldr	r0, [r7, #0]
 800d05a:	f7f7 fdfc 	bl	8004c56 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEE7derivedEv>
 800d05e:	4605      	mov	r5, r0
 800d060:	f107 030c 	add.w	r3, r7, #12
 800d064:	4618      	mov	r0, r3
 800d066:	f7f9 f920 	bl	80062aa <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800d06a:	f107 030c 	add.w	r3, r7, #12
 800d06e:	461a      	mov	r2, r3
 800d070:	4629      	mov	r1, r5
 800d072:	4620      	mov	r0, r4
 800d074:	f000 fc01 	bl	800d87a <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 800d078:	6878      	ldr	r0, [r7, #4]
 800d07a:	f7f7 fdb9 	bl	8004bf0 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800d07e:	4603      	mov	r3, r0
    }
 800d080:	4618      	mov	r0, r3
 800d082:	3710      	adds	r7, #16
 800d084:	46bd      	mov	sp, r7
 800d086:	bdb0      	pop	{r4, r5, r7, pc}

0800d088 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 800d088:	b480      	push	{r7}
 800d08a:	b083      	sub	sp, #12
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	4618      	mov	r0, r3
 800d096:	370c      	adds	r7, #12
 800d098:	46bd      	mov	sp, r7
 800d09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09e:	4770      	bx	lr

0800d0a0 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800d0a0:	b480      	push	{r7}
 800d0a2:	b083      	sub	sp, #12
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	370c      	adds	r7, #12
 800d0ae:	46bd      	mov	sp, r7
 800d0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b4:	4770      	bx	lr

0800d0b6 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEE8coeffRefEii>:
  Scalar& coeffRef(Index row, Index col)
 800d0b6:	b590      	push	{r4, r7, lr}
 800d0b8:	b085      	sub	sp, #20
 800d0ba:	af00      	add	r7, sp, #0
 800d0bc:	60f8      	str	r0, [r7, #12]
 800d0be:	60b9      	str	r1, [r7, #8]
 800d0c0:	607a      	str	r2, [r7, #4]
      return const_cast<Scalar*>(m_d.data)[row * m_d.outerStride() + col];
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	681c      	ldr	r4, [r3, #0]
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	f7fb fa08 	bl	80084de <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EE11outerStrideEv>
 800d0ce:	4602      	mov	r2, r0
 800d0d0:	68bb      	ldr	r3, [r7, #8]
 800d0d2:	fb03 f202 	mul.w	r2, r3, r2
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	4413      	add	r3, r2
 800d0da:	009b      	lsls	r3, r3, #2
 800d0dc:	4423      	add	r3, r4
  }
 800d0de:	4618      	mov	r0, r3
 800d0e0:	3714      	adds	r7, #20
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	bd90      	pop	{r4, r7, pc}

0800d0e6 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEELi3ENS_10DenseShapeES9_ffE5coeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const CoeffReturnType coeff(Index row, Index col) const
 800d0e6:	b580      	push	{r7, lr}
 800d0e8:	b0a4      	sub	sp, #144	; 0x90
 800d0ea:	af00      	add	r7, sp, #0
 800d0ec:	60f8      	str	r0, [r7, #12]
 800d0ee:	60b9      	str	r1, [r7, #8]
 800d0f0:	607a      	str	r2, [r7, #4]
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 800d0f2:	68f9      	ldr	r1, [r7, #12]
 800d0f4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800d0f8:	68ba      	ldr	r2, [r7, #8]
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	f7fd f844 	bl	800a188 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3rowEi>
 800d100:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d104:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800d108:	4611      	mov	r1, r2
 800d10a:	4618      	mov	r0, r3
 800d10c:	f7fd f84f 	bl	800a1ae <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE9transposeEv>
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800d116:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800d11a:	687a      	ldr	r2, [r7, #4]
 800d11c:	4618      	mov	r0, r3
 800d11e:	f000 fbbd 	bl	800d89c <_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE3colEi>
 800d122:	f107 0314 	add.w	r3, r7, #20
 800d126:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800d12a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800d12e:	4618      	mov	r0, r3
 800d130:	f000 fbc7 	bl	800d8c2 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IKNS1_IS4_EELi3ELi1ELb0EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>
 800d134:	f107 0314 	add.w	r3, r7, #20
 800d138:	4618      	mov	r0, r3
 800d13a:	f000 fbf0 	bl	800d91e <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE3sumEv>
 800d13e:	eef0 7a40 	vmov.f32	s15, s0
  }
 800d142:	eeb0 0a67 	vmov.f32	s0, s15
 800d146:	3790      	adds	r7, #144	; 0x90
 800d148:	46bd      	mov	sp, r7
 800d14a:	bd80      	pop	{r7, pc}

0800d14c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b082      	sub	sp, #8
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800d154:	2200      	movs	r2, #0
 800d156:	2101      	movs	r1, #1
 800d158:	6878      	ldr	r0, [r7, #4]
 800d15a:	f7fe fe58 	bl	800be0e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800d15e:	6878      	ldr	r0, [r7, #4]
 800d160:	f000 fbf8 	bl	800d954 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSG_>
  }
 800d164:	bf00      	nop
 800d166:	3708      	adds	r7, #8
 800d168:	46bd      	mov	sp, r7
 800d16a:	bd80      	pop	{r7, pc}

0800d16c <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE11lazyProductINS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS9_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 800d16c:	b590      	push	{r4, r7, lr}
 800d16e:	b085      	sub	sp, #20
 800d170:	af00      	add	r7, sp, #0
 800d172:	60f8      	str	r0, [r7, #12]
 800d174:	60b9      	str	r1, [r7, #8]
 800d176:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 800d178:	68b8      	ldr	r0, [r7, #8]
 800d17a:	f7f7 fc70 	bl	8004a5e <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800d17e:	4604      	mov	r4, r0
 800d180:	6878      	ldr	r0, [r7, #4]
 800d182:	f7f7 fed1 	bl	8004f28 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 800d186:	4603      	mov	r3, r0
 800d188:	461a      	mov	r2, r3
 800d18a:	4621      	mov	r1, r4
 800d18c:	68f8      	ldr	r0, [r7, #12]
 800d18e:	f000 fc15 	bl	800d9bc <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEC1ERKS2_RKS5_>
}
 800d192:	68f8      	ldr	r0, [r7, #12]
 800d194:	3714      	adds	r7, #20
 800d196:	46bd      	mov	sp, r7
 800d198:	bd90      	pop	{r4, r7, pc}

0800d19a <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800d19a:	b580      	push	{r7, lr}
 800d19c:	b086      	sub	sp, #24
 800d19e:	af00      	add	r7, sp, #0
 800d1a0:	60f8      	str	r0, [r7, #12]
 800d1a2:	60b9      	str	r1, [r7, #8]
 800d1a4:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800d1aa:	687a      	ldr	r2, [r7, #4]
 800d1ac:	68b9      	ldr	r1, [r7, #8]
 800d1ae:	6978      	ldr	r0, [r7, #20]
 800d1b0:	f000 fc32 	bl	800da18 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_>
}
 800d1b4:	bf00      	nop
 800d1b6:	3718      	adds	r7, #24
 800d1b8:	46bd      	mov	sp, r7
 800d1ba:	bd80      	pop	{r7, pc}

0800d1bc <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE6resizeEiii>:
    EIGEN_DEVICE_FUNC void resize(Index,Index,Index) {}
 800d1bc:	b480      	push	{r7}
 800d1be:	b085      	sub	sp, #20
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	60f8      	str	r0, [r7, #12]
 800d1c4:	60b9      	str	r1, [r7, #8]
 800d1c6:	607a      	str	r2, [r7, #4]
 800d1c8:	603b      	str	r3, [r7, #0]
 800d1ca:	bf00      	nop
 800d1cc:	3714      	adds	r7, #20
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d4:	4770      	bx	lr

0800d1d6 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS9_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS2_EESI_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 800d1d6:	b580      	push	{r7, lr}
 800d1d8:	b082      	sub	sp, #8
 800d1da:	af00      	add	r7, sp, #0
 800d1dc:	6078      	str	r0, [r7, #4]
 800d1de:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 800d1e0:	6839      	ldr	r1, [r7, #0]
 800d1e2:	6878      	ldr	r0, [r7, #4]
 800d1e4:	f000 fc2b 	bl	800da3e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS9_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS2_EEEERS2_RKNS_9DenseBaseIT_EE>
    }
 800d1e8:	bf00      	nop
 800d1ea:	3708      	adds	r7, #8
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	bd80      	pop	{r7, pc}

0800d1f0 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800d1f0:	b590      	push	{r4, r7, lr}
 800d1f2:	b085      	sub	sp, #20
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	60f8      	str	r0, [r7, #12]
 800d1f8:	60b9      	str	r1, [r7, #8]
 800d1fa:	607a      	str	r2, [r7, #4]
      return m_d.data[row + col * m_d.outerStride()];
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	681c      	ldr	r4, [r3, #0]
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	4618      	mov	r0, r3
 800d204:	f7f9 f846 	bl	8006294 <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EE11outerStrideEv>
 800d208:	4602      	mov	r2, r0
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	fb03 f202 	mul.w	r2, r3, r2
 800d210:	68bb      	ldr	r3, [r7, #8]
 800d212:	4413      	add	r3, r2
 800d214:	009b      	lsls	r3, r3, #2
 800d216:	4423      	add	r3, r4
  }
 800d218:	4618      	mov	r0, r3
 800d21a:	3714      	adds	r7, #20
 800d21c:	46bd      	mov	sp, r7
 800d21e:	bd90      	pop	{r4, r7, pc}

0800d220 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1Ev>:
 800d220:	b580      	push	{r7, lr}
 800d222:	b082      	sub	sp, #8
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
 800d228:	6878      	ldr	r0, [r7, #4]
 800d22a:	f000 fc29 	bl	800da80 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1Ev>
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	4618      	mov	r0, r3
 800d232:	3708      	adds	r7, #8
 800d234:	46bd      	mov	sp, r7
 800d236:	bd80      	pop	{r7, pc}

0800d238 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 800d238:	b580      	push	{r7, lr}
 800d23a:	b084      	sub	sp, #16
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	60f8      	str	r0, [r7, #12]
 800d240:	60b9      	str	r1, [r7, #8]
 800d242:	607a      	str	r2, [r7, #4]
 800d244:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 800d246:	68f8      	ldr	r0, [r7, #12]
 800d248:	f7ff ffea 	bl	800d220 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1Ev>
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	68ba      	ldr	r2, [r7, #8]
 800d250:	601a      	str	r2, [r3, #0]
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	3304      	adds	r3, #4
 800d256:	6879      	ldr	r1, [r7, #4]
 800d258:	4618      	mov	r0, r3
 800d25a:	f7f8 fd9b 	bl	8005d94 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	3305      	adds	r3, #5
 800d262:	6839      	ldr	r1, [r7, #0]
 800d264:	4618      	mov	r0, r3
 800d266:	f7f8 fd95 	bl	8005d94 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 800d26a:	68bb      	ldr	r3, [r7, #8]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d011      	beq.n	800d294 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	2b00      	cmp	r3, #0
 800d274:	db08      	blt.n	800d288 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	2b01      	cmp	r3, #1
 800d27a:	d105      	bne.n	800d288 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 800d27c:	683b      	ldr	r3, [r7, #0]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	db02      	blt.n	800d288 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 800d282:	683b      	ldr	r3, [r7, #0]
 800d284:	2b01      	cmp	r3, #1
 800d286:	d005      	beq.n	800d294 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 800d288:	4b07      	ldr	r3, [pc, #28]	; (800d2a8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x70>)
 800d28a:	4a08      	ldr	r2, [pc, #32]	; (800d2ac <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x74>)
 800d28c:	21b0      	movs	r1, #176	; 0xb0
 800d28e:	4808      	ldr	r0, [pc, #32]	; (800d2b0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x78>)
 800d290:	f00f fed0 	bl	801d034 <__assert_func>
      checkSanity<Derived>();
 800d294:	2100      	movs	r1, #0
 800d296:	68f8      	ldr	r0, [r7, #12]
 800d298:	f000 fbfd 	bl	800da96 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	4618      	mov	r0, r3
 800d2a0:	3710      	adds	r7, #16
 800d2a2:	46bd      	mov	sp, r7
 800d2a4:	bd80      	pop	{r7, pc}
 800d2a6:	bf00      	nop
 800d2a8:	080255c0 	.word	0x080255c0
 800d2ac:	08025930 	.word	0x08025930
 800d2b0:	08025770 	.word	0x08025770

0800d2b4 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EE4initEv>:
    void init()
 800d2b4:	b580      	push	{r7, lr}
 800d2b6:	b082      	sub	sp, #8
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	689b      	ldr	r3, [r3, #8]
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	f7f9 f96b 	bl	800659c <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>
 800d2c6:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	615a      	str	r2, [r3, #20]
    }
 800d2cc:	bf00      	nop
 800d2ce:	3708      	adds	r7, #8
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	bd80      	pop	{r7, pc}

0800d2d4 <_ZNK5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EE11innerStrideEv>:
 800d2d4:	b480      	push	{r7}
 800d2d6:	b083      	sub	sp, #12
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
 800d2dc:	2301      	movs	r3, #1
 800d2de:	4618      	mov	r0, r3
 800d2e0:	370c      	adds	r7, #12
 800d2e2:	46bd      	mov	sp, r7
 800d2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e8:	4770      	bx	lr

0800d2ea <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1Ev>:
 800d2ea:	b580      	push	{r7, lr}
 800d2ec:	b082      	sub	sp, #8
 800d2ee:	af00      	add	r7, sp, #0
 800d2f0:	6078      	str	r0, [r7, #4]
 800d2f2:	6878      	ldr	r0, [r7, #4]
 800d2f4:	f000 fbda 	bl	800daac <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1Ev>
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	3708      	adds	r7, #8
 800d2fe:	46bd      	mov	sp, r7
 800d300:	bd80      	pop	{r7, pc}
	...

0800d304 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 800d304:	b580      	push	{r7, lr}
 800d306:	b084      	sub	sp, #16
 800d308:	af00      	add	r7, sp, #0
 800d30a:	60f8      	str	r0, [r7, #12]
 800d30c:	60b9      	str	r1, [r7, #8]
 800d30e:	607a      	str	r2, [r7, #4]
 800d310:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 800d312:	68f8      	ldr	r0, [r7, #12]
 800d314:	f7ff ffe9 	bl	800d2ea <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1Ev>
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	68ba      	ldr	r2, [r7, #8]
 800d31c:	601a      	str	r2, [r3, #0]
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	3304      	adds	r3, #4
 800d322:	6879      	ldr	r1, [r7, #4]
 800d324:	4618      	mov	r0, r3
 800d326:	f7f8 fd35 	bl	8005d94 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	3305      	adds	r3, #5
 800d32e:	6839      	ldr	r1, [r7, #0]
 800d330:	4618      	mov	r0, r3
 800d332:	f7f8 fd2f 	bl	8005d94 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 800d336:	68bb      	ldr	r3, [r7, #8]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d011      	beq.n	800d360 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	db08      	blt.n	800d354 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	2b01      	cmp	r3, #1
 800d346:	d105      	bne.n	800d354 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800d348:	683b      	ldr	r3, [r7, #0]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	db02      	blt.n	800d354 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800d34e:	683b      	ldr	r3, [r7, #0]
 800d350:	2b01      	cmp	r3, #1
 800d352:	d005      	beq.n	800d360 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 800d354:	4b07      	ldr	r3, [pc, #28]	; (800d374 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x70>)
 800d356:	4a08      	ldr	r2, [pc, #32]	; (800d378 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x74>)
 800d358:	21b0      	movs	r1, #176	; 0xb0
 800d35a:	4808      	ldr	r0, [pc, #32]	; (800d37c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x78>)
 800d35c:	f00f fe6a 	bl	801d034 <__assert_func>
      checkSanity<Derived>();
 800d360:	2100      	movs	r1, #0
 800d362:	68f8      	ldr	r0, [r7, #12]
 800d364:	f000 fbad 	bl	800dac2 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	4618      	mov	r0, r3
 800d36c:	3710      	adds	r7, #16
 800d36e:	46bd      	mov	sp, r7
 800d370:	bd80      	pop	{r7, pc}
 800d372:	bf00      	nop
 800d374:	080255c0 	.word	0x080255c0
 800d378:	08025a34 	.word	0x08025a34
 800d37c:	08025770 	.word	0x08025770

0800d380 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EE4initEv>:
    void init()
 800d380:	b580      	push	{r7, lr}
 800d382:	b082      	sub	sp, #8
 800d384:	af00      	add	r7, sp, #0
 800d386:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	689b      	ldr	r3, [r3, #8]
 800d38c:	4618      	mov	r0, r3
 800d38e:	f7fd fe3d 	bl	800b00c <_ZNK5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EE11outerStrideEv>
 800d392:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	611a      	str	r2, [r3, #16]
    }
 800d398:	bf00      	nop
 800d39a:	3708      	adds	r7, #8
 800d39c:	46bd      	mov	sp, r7
 800d39e:	bd80      	pop	{r7, pc}

0800d3a0 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 800d3a0:	b580      	push	{r7, lr}
 800d3a2:	b082      	sub	sp, #8
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	6078      	str	r0, [r7, #4]
 800d3a8:	6039      	str	r1, [r7, #0]
 800d3aa:	6878      	ldr	r0, [r7, #4]
 800d3ac:	f000 fb94 	bl	800dad8 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1Ev>
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	6839      	ldr	r1, [r7, #0]
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	f000 fb9a 	bl	800daee <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>
  }
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	4618      	mov	r0, r3
 800d3be:	3708      	adds	r7, #8
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	bd80      	pop	{r7, pc}

0800d3c4 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 800d3c4:	b580      	push	{r7, lr}
 800d3c6:	b084      	sub	sp, #16
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	60f8      	str	r0, [r7, #12]
 800d3cc:	60b9      	str	r1, [r7, #8]
 800d3ce:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	687a      	ldr	r2, [r7, #4]
 800d3d4:	68b9      	ldr	r1, [r7, #8]
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	f000 fbb1 	bl	800db3e <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE5coeffEii>
 800d3dc:	eef0 7a40 	vmov.f32	s15, s0
 800d3e0:	eeb0 0a67 	vmov.f32	s0, s15
 800d3e4:	3710      	adds	r7, #16
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	bd80      	pop	{r7, pc}

0800d3ea <_ZN5Eigen8internal30assignment_from_xpr_op_productINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_9assign_opIffEENS0_13sub_assign_opIffEEE3runINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KS7_EES9_EEvRS3_RKT_RKT0_>:
  void run(DstXprType &dst, const SrcXprType &src, const InitialFunc& /*func*/)
 800d3ea:	b590      	push	{r4, r7, lr}
 800d3ec:	b087      	sub	sp, #28
 800d3ee:	af00      	add	r7, sp, #0
 800d3f0:	60f8      	str	r0, [r7, #12]
 800d3f2:	60b9      	str	r1, [r7, #8]
 800d3f4:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, src.lhs(), Func1());
 800d3f6:	68b8      	ldr	r0, [r7, #8]
 800d3f8:	f000 fbd1 	bl	800db9e <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE3lhsEv>
 800d3fc:	4604      	mov	r4, r0
 800d3fe:	f107 0310 	add.w	r3, r7, #16
 800d402:	4618      	mov	r0, r3
 800d404:	f7f8 ff51 	bl	80062aa <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800d408:	f107 0310 	add.w	r3, r7, #16
 800d40c:	461a      	mov	r2, r3
 800d40e:	4621      	mov	r1, r4
 800d410:	68f8      	ldr	r0, [r7, #12]
 800d412:	f000 fbd0 	bl	800dbb6 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
    call_assignment_no_alias(dst, src.rhs(), Func2());
 800d416:	68b8      	ldr	r0, [r7, #8]
 800d418:	f000 fbde 	bl	800dbd8 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE3rhsEv>
 800d41c:	4604      	mov	r4, r0
 800d41e:	f107 0314 	add.w	r3, r7, #20
 800d422:	4618      	mov	r0, r3
 800d424:	f7ff fbb0 	bl	800cb88 <_ZN5Eigen8internal13sub_assign_opIffEC1Ev>
 800d428:	f107 0314 	add.w	r3, r7, #20
 800d42c:	461a      	mov	r2, r3
 800d42e:	4621      	mov	r1, r4
 800d430:	68f8      	ldr	r0, [r7, #12]
 800d432:	f000 fbdd 	bl	800dbf0 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800d436:	bf00      	nop
 800d438:	371c      	adds	r7, #28
 800d43a:	46bd      	mov	sp, r7
 800d43c:	bd90      	pop	{r4, r7, pc}
	...

0800d440 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::sub_assign_op<Scalar,Scalar> &)
 800d440:	b590      	push	{r4, r7, lr}
 800d442:	b085      	sub	sp, #20
 800d444:	af00      	add	r7, sp, #0
 800d446:	60f8      	str	r0, [r7, #12]
 800d448:	60b9      	str	r1, [r7, #8]
 800d44a:	607a      	str	r2, [r7, #4]
    eigen_assert(dst.rows() == src.rows() && dst.cols() == src.cols());
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	4618      	mov	r0, r3
 800d450:	f7f6 fefb 	bl	800424a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800d454:	4604      	mov	r4, r0
 800d456:	68b8      	ldr	r0, [r7, #8]
 800d458:	f7f8 fa95 	bl	8005986 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE4rowsEv>
 800d45c:	4603      	mov	r3, r0
 800d45e:	429c      	cmp	r4, r3
 800d460:	d10a      	bne.n	800d478 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x38>
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	4618      	mov	r0, r3
 800d466:	f7f6 fee5 	bl	8004234 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800d46a:	4604      	mov	r4, r0
 800d46c:	68b8      	ldr	r0, [r7, #8]
 800d46e:	f7f8 fa98 	bl	80059a2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE4colsEv>
 800d472:	4603      	mov	r3, r0
 800d474:	429c      	cmp	r4, r3
 800d476:	d005      	beq.n	800d484 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x44>
 800d478:	4b0b      	ldr	r3, [pc, #44]	; (800d4a8 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x68>)
 800d47a:	4a0c      	ldr	r2, [pc, #48]	; (800d4ac <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x6c>)
 800d47c:	21b0      	movs	r1, #176	; 0xb0
 800d47e:	480c      	ldr	r0, [pc, #48]	; (800d4b0 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x70>)
 800d480:	f00f fdd8 	bl	801d034 <__assert_func>
    generic_product_impl<Lhs, Rhs>::subTo(dst, src.lhs(), src.rhs());
 800d484:	68b8      	ldr	r0, [r7, #8]
 800d486:	f000 fbc4 	bl	800dc12 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE3lhsEv>
 800d48a:	4604      	mov	r4, r0
 800d48c:	68b8      	ldr	r0, [r7, #8]
 800d48e:	f000 fbcc 	bl	800dc2a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE3rhsEv>
 800d492:	4603      	mov	r3, r0
 800d494:	461a      	mov	r2, r3
 800d496:	4621      	mov	r1, r4
 800d498:	68f8      	ldr	r0, [r7, #12]
 800d49a:	f000 fbd2 	bl	800dc42 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEENS_10DenseShapeES5_Li3EE5subToINS2_IfLi3ELi3ELi0ELi3ELi3EEEEEvRT_RKS3_RKS4_>
  }
 800d49e:	bf00      	nop
 800d4a0:	3714      	adds	r7, #20
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	bd90      	pop	{r4, r7, pc}
 800d4a6:	bf00      	nop
 800d4a8:	08021c30 	.word	0x08021c30
 800d4ac:	08025b38 	.word	0x08025b38
 800d4b0:	08022128 	.word	0x08022128

0800d4b4 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EEC1ERS4_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 800d4b4:	b5b0      	push	{r4, r5, r7, lr}
 800d4b6:	b084      	sub	sp, #16
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	60f8      	str	r0, [r7, #12]
 800d4bc:	60b9      	str	r1, [r7, #8]
 800d4be:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800d4c0:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800d4c2:	68bb      	ldr	r3, [r7, #8]
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	f7f9 fff9 	bl	80074bc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4dataEv>
 800d4ca:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 800d4cc:	68b8      	ldr	r0, [r7, #8]
 800d4ce:	f7fa fa2f 	bl	8007930 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>
 800d4d2:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	fb02 f303 	mul.w	r3, r2, r3
 800d4da:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800d4dc:	441d      	add	r5, r3
 800d4de:	68bb      	ldr	r3, [r7, #8]
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	f7f6 feb2 	bl	800424a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800d4e6:	4602      	mov	r2, r0
 800d4e8:	2301      	movs	r3, #1
 800d4ea:	4629      	mov	r1, r5
 800d4ec:	4620      	mov	r0, r4
 800d4ee:	f000 fbd3 	bl	800dc98 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii>
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	68ba      	ldr	r2, [r7, #8]
 800d4f6:	609a      	str	r2, [r3, #8]
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	330c      	adds	r3, #12
 800d4fc:	2100      	movs	r1, #0
 800d4fe:	4618      	mov	r0, r3
 800d500:	f7ff fcbc 	bl	800ce7c <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	3310      	adds	r3, #16
 800d508:	6879      	ldr	r1, [r7, #4]
 800d50a:	4618      	mov	r0, r3
 800d50c:	f7ff fcb6 	bl	800ce7c <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
      init();
 800d510:	68f8      	ldr	r0, [r7, #12]
 800d512:	f000 fbff 	bl	800dd14 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EE4initEv>
    }
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	4618      	mov	r0, r3
 800d51a:	3710      	adds	r7, #16
 800d51c:	46bd      	mov	sp, r7
 800d51e:	bdb0      	pop	{r4, r5, r7, pc}

0800d520 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1ERKSG_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800d520:	b580      	push	{r7, lr}
 800d522:	b082      	sub	sp, #8
 800d524:	af00      	add	r7, sp, #0
 800d526:	6078      	str	r0, [r7, #4]
 800d528:	6039      	str	r1, [r7, #0]
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	6839      	ldr	r1, [r7, #0]
 800d52e:	4618      	mov	r0, r3
 800d530:	f000 fc00 	bl	800dd34 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffEC1ERKSG_>
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	4618      	mov	r0, r3
 800d538:	3708      	adds	r7, #8
 800d53a:	46bd      	mov	sp, r7
 800d53c:	bd80      	pop	{r7, pc}

0800d53e <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi0ELi3EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 800d53e:	b580      	push	{r7, lr}
 800d540:	b084      	sub	sp, #16
 800d542:	af00      	add	r7, sp, #0
 800d544:	6078      	str	r0, [r7, #4]
 800d546:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800d548:	6839      	ldr	r1, [r7, #0]
 800d54a:	6878      	ldr	r0, [r7, #4]
 800d54c:	f000 fc04 	bl	800dd58 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi0ELi1EE3runERKSK_RKS3_>
 800d550:	eef0 7a40 	vmov.f32	s15, s0
 800d554:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 800d558:	6839      	ldr	r1, [r7, #0]
 800d55a:	6878      	ldr	r0, [r7, #4]
 800d55c:	f000 fc0d 	bl	800dd7a <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi1ELi2EE3runERKSK_RKS3_>
 800d560:	eef0 7a40 	vmov.f32	s15, s0
 800d564:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800d568:	f107 020c 	add.w	r2, r7, #12
 800d56c:	f107 0308 	add.w	r3, r7, #8
 800d570:	4619      	mov	r1, r3
 800d572:	6838      	ldr	r0, [r7, #0]
 800d574:	f7fa fff9 	bl	800856a <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 800d578:	eef0 7a40 	vmov.f32	s15, s0
  }
 800d57c:	eeb0 0a67 	vmov.f32	s0, s15
 800d580:	3710      	adds	r7, #16
 800d582:	46bd      	mov	sp, r7
 800d584:	bd80      	pop	{r7, pc}

0800d586 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800d586:	b580      	push	{r7, lr}
 800d588:	b082      	sub	sp, #8
 800d58a:	af00      	add	r7, sp, #0
 800d58c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800d58e:	2201      	movs	r2, #1
 800d590:	2102      	movs	r1, #2
 800d592:	6878      	ldr	r0, [r7, #4]
 800d594:	f7fc fa4c 	bl	8009a30 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800d598:	6878      	ldr	r0, [r7, #4]
 800d59a:	f000 fc12 	bl	800ddc2 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSL_>
  }
 800d59e:	bf00      	nop
 800d5a0:	3708      	adds	r7, #8
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	bd80      	pop	{r7, pc}

0800d5a6 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800d5a6:	b480      	push	{r7}
 800d5a8:	b083      	sub	sp, #12
 800d5aa:	af00      	add	r7, sp, #0
 800d5ac:	6078      	str	r0, [r7, #4]
    }
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	370c      	adds	r7, #12
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ba:	4770      	bx	lr

0800d5bc <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE4dataEv>:
    const Scalar* data() const { return derived().nestedExpression().data(); }
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	b082      	sub	sp, #8
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	6078      	str	r0, [r7, #4]
 800d5c4:	6878      	ldr	r0, [r7, #4]
 800d5c6:	f7f7 f9b5 	bl	8004934 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 800d5ca:	4603      	mov	r3, r0
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	f7fc fd77 	bl	800a0c0 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE16nestedExpressionEv>
 800d5d2:	4603      	mov	r3, r0
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	f7f8 ff10 	bl	80063fa <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4dataEv>
 800d5da:	4603      	mov	r3, r0
 800d5dc:	4618      	mov	r0, r3
 800d5de:	3708      	adds	r7, #8
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	bd80      	pop	{r7, pc}

0800d5e4 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE11innerStrideEv>:
    Index innerStride() const { return derived().nestedExpression().innerStride(); }
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	b082      	sub	sp, #8
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	6078      	str	r0, [r7, #4]
 800d5ec:	6878      	ldr	r0, [r7, #4]
 800d5ee:	f7f7 f9a1 	bl	8004934 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 800d5f2:	4603      	mov	r3, r0
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	f7fc fd63 	bl	800a0c0 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE16nestedExpressionEv>
 800d5fa:	4603      	mov	r3, r0
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	f7ff fc5c 	bl	800ceba <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11innerStrideEv>
 800d602:	4603      	mov	r3, r0
 800d604:	4618      	mov	r0, r3
 800d606:	3708      	adds	r7, #8
 800d608:	46bd      	mov	sp, r7
 800d60a:	bd80      	pop	{r7, pc}

0800d60c <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE11outerStrideEv>:
    Index outerStride() const { return derived().nestedExpression().outerStride(); }
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b082      	sub	sp, #8
 800d610:	af00      	add	r7, sp, #0
 800d612:	6078      	str	r0, [r7, #4]
 800d614:	6878      	ldr	r0, [r7, #4]
 800d616:	f7f7 f98d 	bl	8004934 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 800d61a:	4603      	mov	r3, r0
 800d61c:	4618      	mov	r0, r3
 800d61e:	f7fc fd4f 	bl	800a0c0 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE16nestedExpressionEv>
 800d622:	4603      	mov	r3, r0
 800d624:	4618      	mov	r0, r3
 800d626:	f7f8 ffb9 	bl	800659c <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>
 800d62a:	4603      	mov	r3, r0
 800d62c:	4618      	mov	r0, r3
 800d62e:	3708      	adds	r7, #8
 800d630:	46bd      	mov	sp, r7
 800d632:	bd80      	pop	{r7, pc}

0800d634 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1Ev>:
 800d634:	b580      	push	{r7, lr}
 800d636:	b082      	sub	sp, #8
 800d638:	af00      	add	r7, sp, #0
 800d63a:	6078      	str	r0, [r7, #4]
 800d63c:	6878      	ldr	r0, [r7, #4]
 800d63e:	f000 fbd0 	bl	800dde2 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1Ev>
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	4618      	mov	r0, r3
 800d646:	3708      	adds	r7, #8
 800d648:	46bd      	mov	sp, r7
 800d64a:	bd80      	pop	{r7, pc}

0800d64c <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 800d64c:	b580      	push	{r7, lr}
 800d64e:	b084      	sub	sp, #16
 800d650:	af00      	add	r7, sp, #0
 800d652:	60f8      	str	r0, [r7, #12]
 800d654:	60b9      	str	r1, [r7, #8]
 800d656:	607a      	str	r2, [r7, #4]
 800d658:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 800d65a:	68f8      	ldr	r0, [r7, #12]
 800d65c:	f7ff ffea 	bl	800d634 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1Ev>
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	68ba      	ldr	r2, [r7, #8]
 800d664:	601a      	str	r2, [r3, #0]
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	3304      	adds	r3, #4
 800d66a:	6879      	ldr	r1, [r7, #4]
 800d66c:	4618      	mov	r0, r3
 800d66e:	f7f8 fb91 	bl	8005d94 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	3305      	adds	r3, #5
 800d676:	6839      	ldr	r1, [r7, #0]
 800d678:	4618      	mov	r0, r3
 800d67a:	f7f8 fb8b 	bl	8005d94 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 800d67e:	68bb      	ldr	r3, [r7, #8]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d011      	beq.n	800d6a8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	2b00      	cmp	r3, #0
 800d688:	db08      	blt.n	800d69c <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	2b01      	cmp	r3, #1
 800d68e:	d105      	bne.n	800d69c <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 800d690:	683b      	ldr	r3, [r7, #0]
 800d692:	2b00      	cmp	r3, #0
 800d694:	db02      	blt.n	800d69c <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 800d696:	683b      	ldr	r3, [r7, #0]
 800d698:	2b01      	cmp	r3, #1
 800d69a:	d005      	beq.n	800d6a8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 800d69c:	4b07      	ldr	r3, [pc, #28]	; (800d6bc <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x70>)
 800d69e:	4a08      	ldr	r2, [pc, #32]	; (800d6c0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x74>)
 800d6a0:	21b0      	movs	r1, #176	; 0xb0
 800d6a2:	4808      	ldr	r0, [pc, #32]	; (800d6c4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x78>)
 800d6a4:	f00f fcc6 	bl	801d034 <__assert_func>
      checkSanity<Derived>();
 800d6a8:	2100      	movs	r1, #0
 800d6aa:	68f8      	ldr	r0, [r7, #12]
 800d6ac:	f000 fba4 	bl	800ddf8 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE11checkSanityIS7_EEvNS_8internal9enable_ifIXeqsrNSA_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	3710      	adds	r7, #16
 800d6b6:	46bd      	mov	sp, r7
 800d6b8:	bd80      	pop	{r7, pc}
 800d6ba:	bf00      	nop
 800d6bc:	080255c0 	.word	0x080255c0
 800d6c0:	08025eb4 	.word	0x08025eb4
 800d6c4:	08025770 	.word	0x08025770

0800d6c8 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EE4initEv>:
    void init()
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	b082      	sub	sp, #8
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	3308      	adds	r3, #8
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	f7ff ff99 	bl	800d60c <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE11outerStrideEv>
 800d6da:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	615a      	str	r2, [r3, #20]
    }
 800d6e0:	bf00      	nop
 800d6e2:	3708      	adds	r7, #8
 800d6e4:	46bd      	mov	sp, r7
 800d6e6:	bd80      	pop	{r7, pc}

0800d6e8 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffEC1ERKSP_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b082      	sub	sp, #8
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	6078      	str	r0, [r7, #4]
 800d6f0:	6039      	str	r1, [r7, #0]
 800d6f2:	6878      	ldr	r0, [r7, #4]
 800d6f4:	f000 fb8b 	bl	800de0e <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1Ev>
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	6839      	ldr	r1, [r7, #0]
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	f000 fb91 	bl	800de24 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE4DataC1ERKSP_>
  }
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	4618      	mov	r0, r3
 800d706:	3708      	adds	r7, #8
 800d708:	46bd      	mov	sp, r7
 800d70a:	bd80      	pop	{r7, pc}

0800d70c <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b084      	sub	sp, #16
 800d710:	af00      	add	r7, sp, #0
 800d712:	60f8      	str	r0, [r7, #12]
 800d714:	60b9      	str	r1, [r7, #8]
 800d716:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	687a      	ldr	r2, [r7, #4]
 800d71c:	68b9      	ldr	r1, [r7, #8]
 800d71e:	4618      	mov	r0, r3
 800d720:	f000 fba8 	bl	800de74 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE5coeffEii>
 800d724:	eef0 7a40 	vmov.f32	s15, s0
 800d728:	eeb0 0a67 	vmov.f32	s0, s15
 800d72c:	3710      	adds	r7, #16
 800d72e:	46bd      	mov	sp, r7
 800d730:	bd80      	pop	{r7, pc}

0800d732 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800d732:	b580      	push	{r7, lr}
 800d734:	b082      	sub	sp, #8
 800d736:	af00      	add	r7, sp, #0
 800d738:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800d73a:	2202      	movs	r2, #2
 800d73c:	2102      	movs	r1, #2
 800d73e:	6878      	ldr	r0, [r7, #4]
 800d740:	f7fb feaf 	bl	80094a2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800d744:	6878      	ldr	r0, [r7, #4]
 800d746:	f000 fbc5 	bl	800ded4 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSP_>
  }
 800d74a:	bf00      	nop
 800d74c:	3708      	adds	r7, #8
 800d74e:	46bd      	mov	sp, r7
 800d750:	bd80      	pop	{r7, pc}

0800d752 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800d752:	b480      	push	{r7}
 800d754:	b083      	sub	sp, #12
 800d756:	af00      	add	r7, sp, #0
 800d758:	6078      	str	r0, [r7, #4]
    }
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	4618      	mov	r0, r3
 800d75e:	370c      	adds	r7, #12
 800d760:	46bd      	mov	sp, r7
 800d762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d766:	4770      	bx	lr

0800d768 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
#endif
    }

    template<typename T>
    EIGEN_DEVICE_FUNC
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 800d768:	b480      	push	{r7}
 800d76a:	b083      	sub	sp, #12
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]
 800d770:	6039      	str	r1, [r7, #0]
    {}
 800d772:	bf00      	nop
 800d774:	370c      	adds	r7, #12
 800d776:	46bd      	mov	sp, r7
 800d778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d77c:	4770      	bx	lr

0800d77e <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800d77e:	b480      	push	{r7}
 800d780:	b083      	sub	sp, #12
 800d782:	af00      	add	r7, sp, #0
 800d784:	6078      	str	r0, [r7, #4]
    }
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	4618      	mov	r0, r3
 800d78a:	370c      	adds	r7, #12
 800d78c:	46bd      	mov	sp, r7
 800d78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d792:	4770      	bx	lr

0800d794 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 800d794:	b480      	push	{r7}
 800d796:	b083      	sub	sp, #12
 800d798:	af00      	add	r7, sp, #0
 800d79a:	6078      	str	r0, [r7, #4]
 800d79c:	6039      	str	r1, [r7, #0]
    {}
 800d79e:	bf00      	nop
 800d7a0:	370c      	adds	r7, #12
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a8:	4770      	bx	lr

0800d7aa <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800d7aa:	b480      	push	{r7}
 800d7ac:	b083      	sub	sp, #12
 800d7ae:	af00      	add	r7, sp, #0
 800d7b0:	6078      	str	r0, [r7, #4]
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	370c      	adds	r7, #12
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7be:	4770      	bx	lr

0800d7c0 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 800d7c0:	b590      	push	{r4, r7, lr}
 800d7c2:	b083      	sub	sp, #12
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	6078      	str	r0, [r7, #4]
 800d7c8:	6039      	str	r1, [r7, #0]
 800d7ca:	687c      	ldr	r4, [r7, #4]
 800d7cc:	6838      	ldr	r0, [r7, #0]
 800d7ce:	f000 fb8b 	bl	800dee8 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE7functorEv>
 800d7d2:	4603      	mov	r3, r0
 800d7d4:	4619      	mov	r1, r3
 800d7d6:	4620      	mov	r0, r4
 800d7d8:	f7f7 f862 	bl	80048a0 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	1d1c      	adds	r4, r3, #4
 800d7e0:	6838      	ldr	r0, [r7, #0]
 800d7e2:	f000 fb8d 	bl	800df00 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE3lhsEv>
 800d7e6:	4603      	mov	r3, r0
 800d7e8:	4619      	mov	r1, r3
 800d7ea:	4620      	mov	r0, r4
 800d7ec:	f000 fb9f 	bl	800df2e <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERSA_>
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	f103 040c 	add.w	r4, r3, #12
 800d7f6:	6838      	ldr	r0, [r7, #0]
 800d7f8:	f000 fb8d 	bl	800df16 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE3rhsEv>
 800d7fc:	4603      	mov	r3, r0
 800d7fe:	4619      	mov	r1, r3
 800d800:	4620      	mov	r0, r4
 800d802:	f000 fba3 	bl	800df4c <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERS7_>
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	4618      	mov	r0, r3
 800d80a:	370c      	adds	r7, #12
 800d80c:	46bd      	mov	sp, r7
 800d80e:	bd90      	pop	{r4, r7, pc}

0800d810 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 800d810:	b580      	push	{r7, lr}
 800d812:	b084      	sub	sp, #16
 800d814:	af00      	add	r7, sp, #0
 800d816:	60f8      	str	r0, [r7, #12]
 800d818:	60b9      	str	r1, [r7, #8]
 800d81a:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	68ba      	ldr	r2, [r7, #8]
 800d820:	6879      	ldr	r1, [r7, #4]
 800d822:	4618      	mov	r0, r3
 800d824:	f000 fba1 	bl	800df6a <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE5coeffEii>
 800d828:	eef0 7a40 	vmov.f32	s15, s0
 800d82c:	eeb0 0a67 	vmov.f32	s0, s15
 800d830:	3710      	adds	r7, #16
 800d832:	46bd      	mov	sp, r7
 800d834:	bd80      	pop	{r7, pc}

0800d836 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi1ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800d836:	b580      	push	{r7, lr}
 800d838:	b082      	sub	sp, #8
 800d83a:	af00      	add	r7, sp, #0
 800d83c:	6078      	str	r0, [r7, #4]
 800d83e:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800d840:	2201      	movs	r2, #1
 800d842:	2100      	movs	r1, #0
 800d844:	6878      	ldr	r0, [r7, #4]
 800d846:	f7ff ffe3 	bl	800d810 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 800d84a:	eef0 7a40 	vmov.f32	s15, s0
  }
 800d84e:	eeb0 0a67 	vmov.f32	s0, s15
 800d852:	3708      	adds	r7, #8
 800d854:	46bd      	mov	sp, r7
 800d856:	bd80      	pop	{r7, pc}

0800d858 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi2ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800d858:	b580      	push	{r7, lr}
 800d85a:	b082      	sub	sp, #8
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
 800d860:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800d862:	2202      	movs	r2, #2
 800d864:	2100      	movs	r1, #0
 800d866:	6878      	ldr	r0, [r7, #4]
 800d868:	f7ff ffd2 	bl	800d810 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 800d86c:	eef0 7a40 	vmov.f32	s15, s0
  }
 800d870:	eeb0 0a67 	vmov.f32	s0, s15
 800d874:	3708      	adds	r7, #8
 800d876:	46bd      	mov	sp, r7
 800d878:	bd80      	pop	{r7, pc}

0800d87a <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800d87a:	b580      	push	{r7, lr}
 800d87c:	b086      	sub	sp, #24
 800d87e:	af00      	add	r7, sp, #0
 800d880:	60f8      	str	r0, [r7, #12]
 800d882:	60b9      	str	r1, [r7, #8]
 800d884:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800d88a:	687a      	ldr	r2, [r7, #4]
 800d88c:	68b9      	ldr	r1, [r7, #8]
 800d88e:	6978      	ldr	r0, [r7, #20]
 800d890:	f000 fb9b 	bl	800dfca <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_>
}
 800d894:	bf00      	nop
 800d896:	3718      	adds	r7, #24
 800d898:	46bd      	mov	sp, r7
 800d89a:	bd80      	pop	{r7, pc}

0800d89c <_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE3colEi>:
ConstColXpr col(Index i) const
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b084      	sub	sp, #16
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	60f8      	str	r0, [r7, #12]
 800d8a4:	60b9      	str	r1, [r7, #8]
 800d8a6:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 800d8a8:	68b8      	ldr	r0, [r7, #8]
 800d8aa:	f7f7 f9df 	bl	8004c6c <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>
 800d8ae:	4603      	mov	r3, r0
 800d8b0:	687a      	ldr	r2, [r7, #4]
 800d8b2:	4619      	mov	r1, r3
 800d8b4:	68f8      	ldr	r0, [r7, #12]
 800d8b6:	f000 fbc3 	bl	800e040 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEC1ERS5_i>
}
 800d8ba:	68f8      	ldr	r0, [r7, #12]
 800d8bc:	3710      	adds	r7, #16
 800d8be:	46bd      	mov	sp, r7
 800d8c0:	bd80      	pop	{r7, pc}

0800d8c2 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IKNS1_IS4_EELi3ELi1ELb0EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 800d8c2:	b5b0      	push	{r4, r5, r7, lr}
 800d8c4:	b086      	sub	sp, #24
 800d8c6:	af00      	add	r7, sp, #0
 800d8c8:	60f8      	str	r0, [r7, #12]
 800d8ca:	60b9      	str	r1, [r7, #8]
 800d8cc:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 800d8ce:	68b8      	ldr	r0, [r7, #8]
 800d8d0:	f7fd f924 	bl	800ab1c <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE7derivedEv>
 800d8d4:	4604      	mov	r4, r0
 800d8d6:	6878      	ldr	r0, [r7, #4]
 800d8d8:	f000 fbda 	bl	800e090 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEE7derivedEv>
 800d8dc:	4605      	mov	r5, r0
 800d8de:	f107 0314 	add.w	r3, r7, #20
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	f7f6 ff52 	bl	800478c <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 800d8e8:	f107 0314 	add.w	r3, r7, #20
 800d8ec:	462a      	mov	r2, r5
 800d8ee:	4621      	mov	r1, r4
 800d8f0:	68f8      	ldr	r0, [r7, #12]
 800d8f2:	f000 fc07 	bl	800e104 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEEC1ERSC_RSG_RKS3_>
}
 800d8f6:	68f8      	ldr	r0, [r7, #12]
 800d8f8:	3718      	adds	r7, #24
 800d8fa:	46bd      	mov	sp, r7
 800d8fc:	bdb0      	pop	{r4, r5, r7, pc}

0800d8fe <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 800d8fe:	b580      	push	{r7, lr}
 800d900:	b082      	sub	sp, #8
 800d902:	af00      	add	r7, sp, #0
 800d904:	6078      	str	r0, [r7, #4]
 800d906:	6878      	ldr	r0, [r7, #4]
 800d908:	f000 fc5a 	bl	800e1c0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE7derivedEv>
 800d90c:	4603      	mov	r3, r0
 800d90e:	4618      	mov	r0, r3
 800d910:	f000 fc61 	bl	800e1d6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE4rowsEv>
 800d914:	4603      	mov	r3, r0
 800d916:	4618      	mov	r0, r3
 800d918:	3708      	adds	r7, #8
 800d91a:	46bd      	mov	sp, r7
 800d91c:	bd80      	pop	{r7, pc}

0800d91e <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 800d91e:	b590      	push	{r4, r7, lr}
 800d920:	b085      	sub	sp, #20
 800d922:	af00      	add	r7, sp, #0
 800d924:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 800d926:	6878      	ldr	r0, [r7, #4]
 800d928:	f000 fc4a 	bl	800e1c0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE7derivedEv>
 800d92c:	4604      	mov	r4, r0
 800d92e:	f107 030c 	add.w	r3, r7, #12
 800d932:	4618      	mov	r0, r3
 800d934:	f7f7 fa21 	bl	8004d7a <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 800d938:	f107 030c 	add.w	r3, r7, #12
 800d93c:	4619      	mov	r1, r3
 800d93e:	4620      	mov	r0, r4
 800d940:	f000 fcc6 	bl	800e2d0 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 800d944:	eef0 7a40 	vmov.f32	s15, s0
 800d948:	bf00      	nop
}
 800d94a:	eeb0 0a67 	vmov.f32	s0, s15
 800d94e:	3714      	adds	r7, #20
 800d950:	46bd      	mov	sp, r7
 800d952:	bd90      	pop	{r4, r7, pc}

0800d954 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800d954:	b580      	push	{r7, lr}
 800d956:	b082      	sub	sp, #8
 800d958:	af00      	add	r7, sp, #0
 800d95a:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800d95c:	2201      	movs	r2, #1
 800d95e:	2101      	movs	r1, #1
 800d960:	6878      	ldr	r0, [r7, #4]
 800d962:	f7fe fa54 	bl	800be0e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800d966:	6878      	ldr	r0, [r7, #4]
 800d968:	f000 fcf8 	bl	800e35c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSG_>
  }
 800d96c:	bf00      	nop
 800d96e:	3708      	adds	r7, #8
 800d970:	46bd      	mov	sp, r7
 800d972:	bd80      	pop	{r7, pc}

0800d974 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1Ev>:
 800d974:	b580      	push	{r7, lr}
 800d976:	b082      	sub	sp, #8
 800d978:	af00      	add	r7, sp, #0
 800d97a:	6078      	str	r0, [r7, #4]
 800d97c:	6878      	ldr	r0, [r7, #4]
 800d97e:	f000 fcfd 	bl	800e37c <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1Ev>
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	4618      	mov	r0, r3
 800d986:	3708      	adds	r7, #8
 800d988:	46bd      	mov	sp, r7
 800d98a:	bd80      	pop	{r7, pc}

0800d98c <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1ELi3EEC1Ev>:
class dense_product_base
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b082      	sub	sp, #8
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
 800d994:	6878      	ldr	r0, [r7, #4]
 800d996:	f7ff ffed 	bl	800d974 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1Ev>
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	4618      	mov	r0, r3
 800d99e:	3708      	adds	r7, #8
 800d9a0:	46bd      	mov	sp, r7
 800d9a2:	bd80      	pop	{r7, pc}

0800d9a4 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 800d9a4:	b580      	push	{r7, lr}
 800d9a6:	b082      	sub	sp, #8
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	6078      	str	r0, [r7, #4]
 800d9ac:	6878      	ldr	r0, [r7, #4]
 800d9ae:	f7ff ffed 	bl	800d98c <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1ELi3EEC1Ev>
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	3708      	adds	r7, #8
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	bd80      	pop	{r7, pc}

0800d9bc <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEC1ERKS2_RKS5_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 800d9bc:	b590      	push	{r4, r7, lr}
 800d9be:	b085      	sub	sp, #20
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	60f8      	str	r0, [r7, #12]
 800d9c4:	60b9      	str	r1, [r7, #8]
 800d9c6:	607a      	str	r2, [r7, #4]
 800d9c8:	68f8      	ldr	r0, [r7, #12]
 800d9ca:	f7ff ffeb 	bl	800d9a4 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1ENS_5DenseEEC1Ev>
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	68ba      	ldr	r2, [r7, #8]
 800d9d2:	601a      	str	r2, [r3, #0]
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	3304      	adds	r3, #4
 800d9d8:	687a      	ldr	r2, [r7, #4]
 800d9da:	6812      	ldr	r2, [r2, #0]
 800d9dc:	601a      	str	r2, [r3, #0]
      eigen_assert(lhs.cols() == rhs.rows()
 800d9de:	68bb      	ldr	r3, [r7, #8]
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	f7f6 fc27 	bl	8004234 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800d9e6:	4604      	mov	r4, r0
 800d9e8:	6878      	ldr	r0, [r7, #4]
 800d9ea:	f7f7 facc 	bl	8004f86 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 800d9ee:	4603      	mov	r3, r0
 800d9f0:	429c      	cmp	r4, r3
 800d9f2:	d005      	beq.n	800da00 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEC1ERKS2_RKS5_+0x44>
 800d9f4:	4b05      	ldr	r3, [pc, #20]	; (800da0c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEC1ERKS2_RKS5_+0x50>)
 800d9f6:	4a06      	ldr	r2, [pc, #24]	; (800da10 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEC1ERKS2_RKS5_+0x54>)
 800d9f8:	2160      	movs	r1, #96	; 0x60
 800d9fa:	4806      	ldr	r0, [pc, #24]	; (800da14 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEC1ERKS2_RKS5_+0x58>)
 800d9fc:	f00f fb1a 	bl	801d034 <__assert_func>
 800da00:	bf00      	nop
    }
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	4618      	mov	r0, r3
 800da06:	3714      	adds	r7, #20
 800da08:	46bd      	mov	sp, r7
 800da0a:	bd90      	pop	{r4, r7, pc}
 800da0c:	0801f15c 	.word	0x0801f15c
 800da10:	08025fcc 	.word	0x08025fcc
 800da14:	0801f4ac 	.word	0x0801f4ac

0800da18 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 800da18:	b580      	push	{r7, lr}
 800da1a:	b084      	sub	sp, #16
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	60f8      	str	r0, [r7, #12]
 800da20:	60b9      	str	r1, [r7, #8]
 800da22:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 800da24:	68b9      	ldr	r1, [r7, #8]
 800da26:	68f8      	ldr	r0, [r7, #12]
 800da28:	f000 fcb3 	bl	800e392 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 800da2c:	687a      	ldr	r2, [r7, #4]
 800da2e:	68b9      	ldr	r1, [r7, #8]
 800da30:	68f8      	ldr	r0, [r7, #12]
 800da32:	f000 fd12 	bl	800e45a <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800da36:	bf00      	nop
 800da38:	3710      	adds	r7, #16
 800da3a:	46bd      	mov	sp, r7
 800da3c:	bd80      	pop	{r7, pc}

0800da3e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS9_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS2_EEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 800da3e:	b5b0      	push	{r4, r5, r7, lr}
 800da40:	b084      	sub	sp, #16
 800da42:	af00      	add	r7, sp, #0
 800da44:	6078      	str	r0, [r7, #4]
 800da46:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 800da48:	6878      	ldr	r0, [r7, #4]
 800da4a:	f7fd fab8 	bl	800afbe <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800da4e:	4604      	mov	r4, r0
 800da50:	6838      	ldr	r0, [r7, #0]
 800da52:	f7f7 fc41 	bl	80052d8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7derivedEv>
 800da56:	4605      	mov	r5, r0
 800da58:	f107 030c 	add.w	r3, r7, #12
 800da5c:	4618      	mov	r0, r3
 800da5e:	f7f8 fc24 	bl	80062aa <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800da62:	f107 030c 	add.w	r3, r7, #12
 800da66:	461a      	mov	r2, r3
 800da68:	4629      	mov	r1, r5
 800da6a:	4620      	mov	r0, r4
 800da6c:	f000 fd2d 	bl	800e4ca <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 800da70:	6878      	ldr	r0, [r7, #4]
 800da72:	f7fd faa4 	bl	800afbe <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800da76:	4603      	mov	r3, r0
    }
 800da78:	4618      	mov	r0, r3
 800da7a:	3710      	adds	r7, #16
 800da7c:	46bd      	mov	sp, r7
 800da7e:	bdb0      	pop	{r4, r5, r7, pc}

0800da80 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800da80:	b480      	push	{r7}
 800da82:	b083      	sub	sp, #12
 800da84:	af00      	add	r7, sp, #0
 800da86:	6078      	str	r0, [r7, #4]
    }
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	4618      	mov	r0, r3
 800da8c:	370c      	adds	r7, #12
 800da8e:	46bd      	mov	sp, r7
 800da90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da94:	4770      	bx	lr

0800da96 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 800da96:	b480      	push	{r7}
 800da98:	b083      	sub	sp, #12
 800da9a:	af00      	add	r7, sp, #0
 800da9c:	6078      	str	r0, [r7, #4]
 800da9e:	6039      	str	r1, [r7, #0]
    {}
 800daa0:	bf00      	nop
 800daa2:	370c      	adds	r7, #12
 800daa4:	46bd      	mov	sp, r7
 800daa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daaa:	4770      	bx	lr

0800daac <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800daac:	b480      	push	{r7}
 800daae:	b083      	sub	sp, #12
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	6078      	str	r0, [r7, #4]
    }
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	4618      	mov	r0, r3
 800dab8:	370c      	adds	r7, #12
 800daba:	46bd      	mov	sp, r7
 800dabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac0:	4770      	bx	lr

0800dac2 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 800dac2:	b480      	push	{r7}
 800dac4:	b083      	sub	sp, #12
 800dac6:	af00      	add	r7, sp, #0
 800dac8:	6078      	str	r0, [r7, #4]
 800daca:	6039      	str	r1, [r7, #0]
    {}
 800dacc:	bf00      	nop
 800dace:	370c      	adds	r7, #12
 800dad0:	46bd      	mov	sp, r7
 800dad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad6:	4770      	bx	lr

0800dad8 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800dad8:	b480      	push	{r7}
 800dada:	b083      	sub	sp, #12
 800dadc:	af00      	add	r7, sp, #0
 800dade:	6078      	str	r0, [r7, #4]
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	4618      	mov	r0, r3
 800dae4:	370c      	adds	r7, #12
 800dae6:	46bd      	mov	sp, r7
 800dae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daec:	4770      	bx	lr

0800daee <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 800daee:	b590      	push	{r4, r7, lr}
 800daf0:	b083      	sub	sp, #12
 800daf2:	af00      	add	r7, sp, #0
 800daf4:	6078      	str	r0, [r7, #4]
 800daf6:	6039      	str	r1, [r7, #0]
 800daf8:	687c      	ldr	r4, [r7, #4]
 800dafa:	6838      	ldr	r0, [r7, #0]
 800dafc:	f000 fcf6 	bl	800e4ec <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE7functorEv>
 800db00:	4603      	mov	r3, r0
 800db02:	4619      	mov	r1, r3
 800db04:	4620      	mov	r0, r4
 800db06:	f7f6 fecb 	bl	80048a0 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	1d1c      	adds	r4, r3, #4
 800db0e:	6838      	ldr	r0, [r7, #0]
 800db10:	f000 fcf8 	bl	800e504 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE3lhsEv>
 800db14:	4603      	mov	r3, r0
 800db16:	4619      	mov	r1, r3
 800db18:	4620      	mov	r0, r4
 800db1a:	f000 fd0a 	bl	800e532 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1ERSA_>
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	f103 040c 	add.w	r4, r3, #12
 800db24:	6838      	ldr	r0, [r7, #0]
 800db26:	f000 fcf8 	bl	800e51a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE3rhsEv>
 800db2a:	4603      	mov	r3, r0
 800db2c:	4619      	mov	r1, r3
 800db2e:	4620      	mov	r0, r4
 800db30:	f000 fd0e 	bl	800e550 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERS7_>
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	4618      	mov	r0, r3
 800db38:	370c      	adds	r7, #12
 800db3a:	46bd      	mov	sp, r7
 800db3c:	bd90      	pop	{r4, r7, pc}

0800db3e <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800db3e:	b590      	push	{r4, r7, lr}
 800db40:	b087      	sub	sp, #28
 800db42:	af00      	add	r7, sp, #0
 800db44:	60f8      	str	r0, [r7, #12]
 800db46:	60b9      	str	r1, [r7, #8]
 800db48:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	4618      	mov	r0, r3
 800db4e:	f000 fd0e 	bl	800e56e <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>
 800db52:	4604      	mov	r4, r0
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	3304      	adds	r3, #4
 800db58:	687a      	ldr	r2, [r7, #4]
 800db5a:	68b9      	ldr	r1, [r7, #8]
 800db5c:	4618      	mov	r0, r3
 800db5e:	f000 fd11 	bl	800e584 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEENS0_10IndexBasedEfE5coeffEii>
 800db62:	eef0 7a40 	vmov.f32	s15, s0
 800db66:	edc7 7a04 	vstr	s15, [r7, #16]
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	330c      	adds	r3, #12
 800db6e:	687a      	ldr	r2, [r7, #4]
 800db70:	68b9      	ldr	r1, [r7, #8]
 800db72:	4618      	mov	r0, r3
 800db74:	f000 fd19 	bl	800e5aa <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_E5coeffEii>
 800db78:	eef0 7a40 	vmov.f32	s15, s0
 800db7c:	edc7 7a05 	vstr	s15, [r7, #20]
 800db80:	f107 0214 	add.w	r2, r7, #20
 800db84:	f107 0310 	add.w	r3, r7, #16
 800db88:	4619      	mov	r1, r3
 800db8a:	4620      	mov	r0, r4
 800db8c:	f000 fd2e 	bl	800e5ec <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 800db90:	eef0 7a40 	vmov.f32	s15, s0
  }
 800db94:	eeb0 0a67 	vmov.f32	s0, s15
 800db98:	371c      	adds	r7, #28
 800db9a:	46bd      	mov	sp, r7
 800db9c:	bd90      	pop	{r4, r7, pc}

0800db9e <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800db9e:	b480      	push	{r7}
 800dba0:	b083      	sub	sp, #12
 800dba2:	af00      	add	r7, sp, #0
 800dba4:	6078      	str	r0, [r7, #4]
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	4618      	mov	r0, r3
 800dbac:	370c      	adds	r7, #12
 800dbae:	46bd      	mov	sp, r7
 800dbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb4:	4770      	bx	lr

0800dbb6 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800dbb6:	b580      	push	{r7, lr}
 800dbb8:	b086      	sub	sp, #24
 800dbba:	af00      	add	r7, sp, #0
 800dbbc:	60f8      	str	r0, [r7, #12]
 800dbbe:	60b9      	str	r1, [r7, #8]
 800dbc0:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800dbc6:	687a      	ldr	r2, [r7, #4]
 800dbc8:	68b9      	ldr	r1, [r7, #8]
 800dbca:	6978      	ldr	r0, [r7, #20]
 800dbcc:	f000 fd23 	bl	800e616 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS3_RKS5_>
}
 800dbd0:	bf00      	nop
 800dbd2:	3718      	adds	r7, #24
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	bd80      	pop	{r7, pc}

0800dbd8 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800dbd8:	b480      	push	{r7}
 800dbda:	b083      	sub	sp, #12
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	6078      	str	r0, [r7, #4]
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	3304      	adds	r3, #4
 800dbe4:	4618      	mov	r0, r3
 800dbe6:	370c      	adds	r7, #12
 800dbe8:	46bd      	mov	sp, r7
 800dbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbee:	4770      	bx	lr

0800dbf0 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800dbf0:	b580      	push	{r7, lr}
 800dbf2:	b086      	sub	sp, #24
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	60f8      	str	r0, [r7, #12]
 800dbf8:	60b9      	str	r1, [r7, #8]
 800dbfa:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800dc00:	687a      	ldr	r2, [r7, #4]
 800dc02:	68b9      	ldr	r1, [r7, #8]
 800dc04:	6978      	ldr	r0, [r7, #20]
 800dc06:	f000 fd19 	bl	800e63c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_>
}
 800dc0a:	bf00      	nop
 800dc0c:	3718      	adds	r7, #24
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	bd80      	pop	{r7, pc}

0800dc12 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800dc12:	b480      	push	{r7}
 800dc14:	b083      	sub	sp, #12
 800dc16:	af00      	add	r7, sp, #0
 800dc18:	6078      	str	r0, [r7, #4]
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	4618      	mov	r0, r3
 800dc20:	370c      	adds	r7, #12
 800dc22:	46bd      	mov	sp, r7
 800dc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc28:	4770      	bx	lr

0800dc2a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800dc2a:	b480      	push	{r7}
 800dc2c:	b083      	sub	sp, #12
 800dc2e:	af00      	add	r7, sp, #0
 800dc30:	6078      	str	r0, [r7, #4]
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	685b      	ldr	r3, [r3, #4]
 800dc36:	4618      	mov	r0, r3
 800dc38:	370c      	adds	r7, #12
 800dc3a:	46bd      	mov	sp, r7
 800dc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc40:	4770      	bx	lr

0800dc42 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEENS_10DenseShapeES5_Li3EE5subToINS2_IfLi3ELi3ELi0ELi3ELi3EEEEEvRT_RKS3_RKS4_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void subTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 800dc42:	b580      	push	{r7, lr}
 800dc44:	b088      	sub	sp, #32
 800dc46:	af00      	add	r7, sp, #0
 800dc48:	60f8      	str	r0, [r7, #12]
 800dc4a:	60b9      	str	r1, [r7, #8]
 800dc4c:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::sub_assign_op<typename Dst::Scalar,Scalar>());
 800dc4e:	f107 0314 	add.w	r3, r7, #20
 800dc52:	687a      	ldr	r2, [r7, #4]
 800dc54:	68b9      	ldr	r1, [r7, #8]
 800dc56:	4618      	mov	r0, r3
 800dc58:	f000 fd2a 	bl	800e6b0 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE11lazyProductINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS7_EE>
 800dc5c:	f107 031c 	add.w	r3, r7, #28
 800dc60:	4618      	mov	r0, r3
 800dc62:	f7fe ff91 	bl	800cb88 <_ZN5Eigen8internal13sub_assign_opIffEC1Ev>
 800dc66:	f107 021c 	add.w	r2, r7, #28
 800dc6a:	f107 0314 	add.w	r3, r7, #20
 800dc6e:	4619      	mov	r1, r3
 800dc70:	68f8      	ldr	r0, [r7, #12]
 800dc72:	f000 fd34 	bl	800e6de <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800dc76:	bf00      	nop
 800dc78:	3720      	adds	r7, #32
 800dc7a:	46bd      	mov	sp, r7
 800dc7c:	bd80      	pop	{r7, pc}

0800dc7e <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1Ev>:
 800dc7e:	b580      	push	{r7, lr}
 800dc80:	b082      	sub	sp, #8
 800dc82:	af00      	add	r7, sp, #0
 800dc84:	6078      	str	r0, [r7, #4]
 800dc86:	6878      	ldr	r0, [r7, #4]
 800dc88:	f000 fd3a 	bl	800e700 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1Ev>
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	4618      	mov	r0, r3
 800dc90:	3708      	adds	r7, #8
 800dc92:	46bd      	mov	sp, r7
 800dc94:	bd80      	pop	{r7, pc}
	...

0800dc98 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 800dc98:	b580      	push	{r7, lr}
 800dc9a:	b084      	sub	sp, #16
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	60f8      	str	r0, [r7, #12]
 800dca0:	60b9      	str	r1, [r7, #8]
 800dca2:	607a      	str	r2, [r7, #4]
 800dca4:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 800dca6:	68f8      	ldr	r0, [r7, #12]
 800dca8:	f7ff ffe9 	bl	800dc7e <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1Ev>
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	68ba      	ldr	r2, [r7, #8]
 800dcb0:	601a      	str	r2, [r3, #0]
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	3304      	adds	r3, #4
 800dcb6:	6879      	ldr	r1, [r7, #4]
 800dcb8:	4618      	mov	r0, r3
 800dcba:	f7f8 f851 	bl	8005d60 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	3305      	adds	r3, #5
 800dcc2:	6839      	ldr	r1, [r7, #0]
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	f7f8 f865 	bl	8005d94 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 800dcca:	68bb      	ldr	r3, [r7, #8]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d011      	beq.n	800dcf4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	db08      	blt.n	800dce8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	2b03      	cmp	r3, #3
 800dcda:	d105      	bne.n	800dce8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800dcdc:	683b      	ldr	r3, [r7, #0]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	db02      	blt.n	800dce8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800dce2:	683b      	ldr	r3, [r7, #0]
 800dce4:	2b01      	cmp	r3, #1
 800dce6:	d005      	beq.n	800dcf4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 800dce8:	4b07      	ldr	r3, [pc, #28]	; (800dd08 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x70>)
 800dcea:	4a08      	ldr	r2, [pc, #32]	; (800dd0c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x74>)
 800dcec:	21b0      	movs	r1, #176	; 0xb0
 800dcee:	4808      	ldr	r0, [pc, #32]	; (800dd10 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x78>)
 800dcf0:	f00f f9a0 	bl	801d034 <__assert_func>
      checkSanity<Derived>();
 800dcf4:	2100      	movs	r1, #0
 800dcf6:	68f8      	ldr	r0, [r7, #12]
 800dcf8:	f000 fd0d 	bl	800e716 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	4618      	mov	r0, r3
 800dd00:	3710      	adds	r7, #16
 800dd02:	46bd      	mov	sp, r7
 800dd04:	bd80      	pop	{r7, pc}
 800dd06:	bf00      	nop
 800dd08:	080255c0 	.word	0x080255c0
 800dd0c:	08026118 	.word	0x08026118
 800dd10:	08025770 	.word	0x08025770

0800dd14 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EE4initEv>:
    void init()
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b082      	sub	sp, #8
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	689b      	ldr	r3, [r3, #8]
 800dd20:	4618      	mov	r0, r3
 800dd22:	f7f9 fe05 	bl	8007930 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>
 800dd26:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	615a      	str	r2, [r3, #20]
    }
 800dd2c:	bf00      	nop
 800dd2e:	3708      	adds	r7, #8
 800dd30:	46bd      	mov	sp, r7
 800dd32:	bd80      	pop	{r7, pc}

0800dd34 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffEC1ERKSG_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 800dd34:	b580      	push	{r7, lr}
 800dd36:	b082      	sub	sp, #8
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	6078      	str	r0, [r7, #4]
 800dd3c:	6039      	str	r1, [r7, #0]
 800dd3e:	6878      	ldr	r0, [r7, #4]
 800dd40:	f000 fcf4 	bl	800e72c <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1Ev>
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	6839      	ldr	r1, [r7, #0]
 800dd48:	4618      	mov	r0, r3
 800dd4a:	f000 fcfa 	bl	800e742 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE4DataC1ERKSG_>
  }
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	4618      	mov	r0, r3
 800dd52:	3708      	adds	r7, #8
 800dd54:	46bd      	mov	sp, r7
 800dd56:	bd80      	pop	{r7, pc}

0800dd58 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi0ELi1EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800dd58:	b580      	push	{r7, lr}
 800dd5a:	b082      	sub	sp, #8
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	6078      	str	r0, [r7, #4]
 800dd60:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800dd62:	2200      	movs	r2, #0
 800dd64:	2100      	movs	r1, #0
 800dd66:	6878      	ldr	r0, [r7, #4]
 800dd68:	f000 fd13 	bl	800e792 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 800dd6c:	eef0 7a40 	vmov.f32	s15, s0
  }
 800dd70:	eeb0 0a67 	vmov.f32	s0, s15
 800dd74:	3708      	adds	r7, #8
 800dd76:	46bd      	mov	sp, r7
 800dd78:	bd80      	pop	{r7, pc}

0800dd7a <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi1ELi2EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 800dd7a:	b580      	push	{r7, lr}
 800dd7c:	b084      	sub	sp, #16
 800dd7e:	af00      	add	r7, sp, #0
 800dd80:	6078      	str	r0, [r7, #4]
 800dd82:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800dd84:	6839      	ldr	r1, [r7, #0]
 800dd86:	6878      	ldr	r0, [r7, #4]
 800dd88:	f000 fd16 	bl	800e7b8 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi1ELi1EE3runERKSK_RKS3_>
 800dd8c:	eef0 7a40 	vmov.f32	s15, s0
 800dd90:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 800dd94:	6839      	ldr	r1, [r7, #0]
 800dd96:	6878      	ldr	r0, [r7, #4]
 800dd98:	f000 fd1f 	bl	800e7da <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi2ELi1EE3runERKSK_RKS3_>
 800dd9c:	eef0 7a40 	vmov.f32	s15, s0
 800dda0:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800dda4:	f107 020c 	add.w	r2, r7, #12
 800dda8:	f107 0308 	add.w	r3, r7, #8
 800ddac:	4619      	mov	r1, r3
 800ddae:	6838      	ldr	r0, [r7, #0]
 800ddb0:	f7fa fbdb 	bl	800856a <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 800ddb4:	eef0 7a40 	vmov.f32	s15, s0
  }
 800ddb8:	eeb0 0a67 	vmov.f32	s0, s15
 800ddbc:	3710      	adds	r7, #16
 800ddbe:	46bd      	mov	sp, r7
 800ddc0:	bd80      	pop	{r7, pc}

0800ddc2 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800ddc2:	b580      	push	{r7, lr}
 800ddc4:	b082      	sub	sp, #8
 800ddc6:	af00      	add	r7, sp, #0
 800ddc8:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800ddca:	2202      	movs	r2, #2
 800ddcc:	2102      	movs	r1, #2
 800ddce:	6878      	ldr	r0, [r7, #4]
 800ddd0:	f7fb fe2e 	bl	8009a30 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800ddd4:	6878      	ldr	r0, [r7, #4]
 800ddd6:	f000 fd11 	bl	800e7fc <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSL_>
  }
 800ddda:	bf00      	nop
 800dddc:	3708      	adds	r7, #8
 800ddde:	46bd      	mov	sp, r7
 800dde0:	bd80      	pop	{r7, pc}

0800dde2 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800dde2:	b480      	push	{r7}
 800dde4:	b083      	sub	sp, #12
 800dde6:	af00      	add	r7, sp, #0
 800dde8:	6078      	str	r0, [r7, #4]
    }
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	4618      	mov	r0, r3
 800ddee:	370c      	adds	r7, #12
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf6:	4770      	bx	lr

0800ddf8 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE11checkSanityIS7_EEvNS_8internal9enable_ifIXeqsrNSA_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 800ddf8:	b480      	push	{r7}
 800ddfa:	b083      	sub	sp, #12
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	6078      	str	r0, [r7, #4]
 800de00:	6039      	str	r1, [r7, #0]
    {}
 800de02:	bf00      	nop
 800de04:	370c      	adds	r7, #12
 800de06:	46bd      	mov	sp, r7
 800de08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0c:	4770      	bx	lr

0800de0e <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800de0e:	b480      	push	{r7}
 800de10:	b083      	sub	sp, #12
 800de12:	af00      	add	r7, sp, #0
 800de14:	6078      	str	r0, [r7, #4]
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	4618      	mov	r0, r3
 800de1a:	370c      	adds	r7, #12
 800de1c:	46bd      	mov	sp, r7
 800de1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de22:	4770      	bx	lr

0800de24 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE4DataC1ERKSP_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 800de24:	b590      	push	{r4, r7, lr}
 800de26:	b083      	sub	sp, #12
 800de28:	af00      	add	r7, sp, #0
 800de2a:	6078      	str	r0, [r7, #4]
 800de2c:	6039      	str	r1, [r7, #0]
 800de2e:	687c      	ldr	r4, [r7, #4]
 800de30:	6838      	ldr	r0, [r7, #0]
 800de32:	f000 fced 	bl	800e810 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE7functorEv>
 800de36:	4603      	mov	r3, r0
 800de38:	4619      	mov	r1, r3
 800de3a:	4620      	mov	r0, r4
 800de3c:	f7f6 fd30 	bl	80048a0 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	1d1c      	adds	r4, r3, #4
 800de44:	6838      	ldr	r0, [r7, #0]
 800de46:	f000 fcef 	bl	800e828 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE3lhsEv>
 800de4a:	4603      	mov	r3, r0
 800de4c:	4619      	mov	r1, r3
 800de4e:	4620      	mov	r0, r4
 800de50:	f000 fd02 	bl	800e858 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1ERSK_>
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	f103 0420 	add.w	r4, r3, #32
 800de5a:	6838      	ldr	r0, [r7, #0]
 800de5c:	f000 fcf0 	bl	800e840 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE3rhsEv>
 800de60:	4603      	mov	r3, r0
 800de62:	4619      	mov	r1, r3
 800de64:	4620      	mov	r0, r4
 800de66:	f000 fd06 	bl	800e876 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1ERS9_>
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	4618      	mov	r0, r3
 800de6e:	370c      	adds	r7, #12
 800de70:	46bd      	mov	sp, r7
 800de72:	bd90      	pop	{r4, r7, pc}

0800de74 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800de74:	b590      	push	{r4, r7, lr}
 800de76:	b087      	sub	sp, #28
 800de78:	af00      	add	r7, sp, #0
 800de7a:	60f8      	str	r0, [r7, #12]
 800de7c:	60b9      	str	r1, [r7, #8]
 800de7e:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	4618      	mov	r0, r3
 800de84:	f000 fd06 	bl	800e894 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE4Data4funcEv>
 800de88:	4604      	mov	r4, r0
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	3304      	adds	r3, #4
 800de8e:	687a      	ldr	r2, [r7, #4]
 800de90:	68b9      	ldr	r1, [r7, #8]
 800de92:	4618      	mov	r0, r3
 800de94:	f000 fd09 	bl	800e8aa <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEENS0_10IndexBasedEfE5coeffEii>
 800de98:	eef0 7a40 	vmov.f32	s15, s0
 800de9c:	edc7 7a04 	vstr	s15, [r7, #16]
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	3320      	adds	r3, #32
 800dea4:	687a      	ldr	r2, [r7, #4]
 800dea6:	68b9      	ldr	r1, [r7, #8]
 800dea8:	4618      	mov	r0, r3
 800deaa:	f000 fd11 	bl	800e8d0 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEE5coeffEii>
 800deae:	eef0 7a40 	vmov.f32	s15, s0
 800deb2:	edc7 7a05 	vstr	s15, [r7, #20]
 800deb6:	f107 0214 	add.w	r2, r7, #20
 800deba:	f107 0310 	add.w	r3, r7, #16
 800debe:	4619      	mov	r1, r3
 800dec0:	4620      	mov	r0, r4
 800dec2:	f000 fb93 	bl	800e5ec <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 800dec6:	eef0 7a40 	vmov.f32	s15, s0
  }
 800deca:	eeb0 0a67 	vmov.f32	s0, s15
 800dece:	371c      	adds	r7, #28
 800ded0:	46bd      	mov	sp, r7
 800ded2:	bd90      	pop	{r4, r7, pc}

0800ded4 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 800ded4:	b480      	push	{r7}
 800ded6:	b083      	sub	sp, #12
 800ded8:	af00      	add	r7, sp, #0
 800deda:	6078      	str	r0, [r7, #4]
 800dedc:	bf00      	nop
 800dede:	370c      	adds	r7, #12
 800dee0:	46bd      	mov	sp, r7
 800dee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee6:	4770      	bx	lr

0800dee8 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 800dee8:	b480      	push	{r7}
 800deea:	b083      	sub	sp, #12
 800deec:	af00      	add	r7, sp, #0
 800deee:	6078      	str	r0, [r7, #4]
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	3330      	adds	r3, #48	; 0x30
 800def4:	4618      	mov	r0, r3
 800def6:	370c      	adds	r7, #12
 800def8:	46bd      	mov	sp, r7
 800defa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defe:	4770      	bx	lr

0800df00 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800df00:	b480      	push	{r7}
 800df02:	b083      	sub	sp, #12
 800df04:	af00      	add	r7, sp, #0
 800df06:	6078      	str	r0, [r7, #4]
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	4618      	mov	r0, r3
 800df0c:	370c      	adds	r7, #12
 800df0e:	46bd      	mov	sp, r7
 800df10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df14:	4770      	bx	lr

0800df16 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800df16:	b480      	push	{r7}
 800df18:	b083      	sub	sp, #12
 800df1a:	af00      	add	r7, sp, #0
 800df1c:	6078      	str	r0, [r7, #4]
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	3318      	adds	r3, #24
 800df22:	4618      	mov	r0, r3
 800df24:	370c      	adds	r7, #12
 800df26:	46bd      	mov	sp, r7
 800df28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df2c:	4770      	bx	lr

0800df2e <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERSA_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 800df2e:	b580      	push	{r7, lr}
 800df30:	b082      	sub	sp, #8
 800df32:	af00      	add	r7, sp, #0
 800df34:	6078      	str	r0, [r7, #4]
 800df36:	6039      	str	r1, [r7, #0]
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	6839      	ldr	r1, [r7, #0]
 800df3c:	4618      	mov	r0, r3
 800df3e:	f000 fce8 	bl	800e912 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERKS9_>
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	4618      	mov	r0, r3
 800df46:	3708      	adds	r7, #8
 800df48:	46bd      	mov	sp, r7
 800df4a:	bd80      	pop	{r7, pc}

0800df4c <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERS7_>:
 800df4c:	b580      	push	{r7, lr}
 800df4e:	b082      	sub	sp, #8
 800df50:	af00      	add	r7, sp, #0
 800df52:	6078      	str	r0, [r7, #4]
 800df54:	6039      	str	r1, [r7, #0]
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	6839      	ldr	r1, [r7, #0]
 800df5a:	4618      	mov	r0, r3
 800df5c:	f000 fce8 	bl	800e930 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERKS6_>
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	4618      	mov	r0, r3
 800df64:	3708      	adds	r7, #8
 800df66:	46bd      	mov	sp, r7
 800df68:	bd80      	pop	{r7, pc}

0800df6a <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800df6a:	b590      	push	{r4, r7, lr}
 800df6c:	b087      	sub	sp, #28
 800df6e:	af00      	add	r7, sp, #0
 800df70:	60f8      	str	r0, [r7, #12]
 800df72:	60b9      	str	r1, [r7, #8]
 800df74:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	4618      	mov	r0, r3
 800df7a:	f000 fce8 	bl	800e94e <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>
 800df7e:	4604      	mov	r4, r0
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	3304      	adds	r3, #4
 800df84:	687a      	ldr	r2, [r7, #4]
 800df86:	68b9      	ldr	r1, [r7, #8]
 800df88:	4618      	mov	r0, r3
 800df8a:	f000 fceb 	bl	800e964 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfE5coeffEii>
 800df8e:	eef0 7a40 	vmov.f32	s15, s0
 800df92:	edc7 7a04 	vstr	s15, [r7, #16]
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	330c      	adds	r3, #12
 800df9a:	687a      	ldr	r2, [r7, #4]
 800df9c:	68b9      	ldr	r1, [r7, #8]
 800df9e:	4618      	mov	r0, r3
 800dfa0:	f000 fcf3 	bl	800e98a <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_E5coeffEii>
 800dfa4:	eef0 7a40 	vmov.f32	s15, s0
 800dfa8:	edc7 7a05 	vstr	s15, [r7, #20]
 800dfac:	f107 0214 	add.w	r2, r7, #20
 800dfb0:	f107 0310 	add.w	r3, r7, #16
 800dfb4:	4619      	mov	r1, r3
 800dfb6:	4620      	mov	r0, r4
 800dfb8:	f000 fb18 	bl	800e5ec <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 800dfbc:	eef0 7a40 	vmov.f32	s15, s0
  }
 800dfc0:	eeb0 0a67 	vmov.f32	s0, s15
 800dfc4:	371c      	adds	r7, #28
 800dfc6:	46bd      	mov	sp, r7
 800dfc8:	bd90      	pop	{r4, r7, pc}

0800dfca <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<Scalar,Scalar> &)
 800dfca:	b590      	push	{r4, r7, lr}
 800dfcc:	b087      	sub	sp, #28
 800dfce:	af00      	add	r7, sp, #0
 800dfd0:	60f8      	str	r0, [r7, #12]
 800dfd2:	60b9      	str	r1, [r7, #8]
 800dfd4:	607a      	str	r2, [r7, #4]
    Index dstRows = src.rows();
 800dfd6:	68b8      	ldr	r0, [r7, #8]
 800dfd8:	f7f7 ff9e 	bl	8005f18 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4rowsEv>
 800dfdc:	6178      	str	r0, [r7, #20]
    Index dstCols = src.cols();
 800dfde:	68b8      	ldr	r0, [r7, #8]
 800dfe0:	f7f6 fe73 	bl	8004cca <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4colsEv>
 800dfe4:	6138      	str	r0, [r7, #16]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	4618      	mov	r0, r3
 800dfea:	f7f6 f92e 	bl	800424a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800dfee:	4602      	mov	r2, r0
 800dff0:	697b      	ldr	r3, [r7, #20]
 800dff2:	4293      	cmp	r3, r2
 800dff4:	d107      	bne.n	800e006 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_+0x3c>
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	4618      	mov	r0, r3
 800dffa:	f7f6 f91b 	bl	8004234 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800dffe:	4602      	mov	r2, r0
 800e000:	693b      	ldr	r3, [r7, #16]
 800e002:	4293      	cmp	r3, r2
 800e004:	d001      	beq.n	800e00a <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_+0x40>
 800e006:	2301      	movs	r3, #1
 800e008:	e000      	b.n	800e00c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_+0x42>
 800e00a:	2300      	movs	r3, #0
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d005      	beq.n	800e01c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_+0x52>
      dst.resize(dstRows, dstCols);
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	693a      	ldr	r2, [r7, #16]
 800e014:	6979      	ldr	r1, [r7, #20]
 800e016:	4618      	mov	r0, r3
 800e018:	f7f9 f830 	bl	800707c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
    generic_product_impl<Lhs, Rhs>::evalTo(dst, src.lhs(), src.rhs());
 800e01c:	68b8      	ldr	r0, [r7, #8]
 800e01e:	f000 fcd5 	bl	800e9cc <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE3lhsEv>
 800e022:	4604      	mov	r4, r0
 800e024:	68b8      	ldr	r0, [r7, #8]
 800e026:	f000 fcdd 	bl	800e9e4 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE3rhsEv>
 800e02a:	4603      	mov	r3, r0
 800e02c:	461a      	mov	r2, r3
 800e02e:	4621      	mov	r1, r4
 800e030:	68f8      	ldr	r0, [r7, #12]
 800e032:	f000 fce3 	bl	800e9fc <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS_10DenseShapeES4_Li3EE6evalToIS3_EEvRT_RKS3_SA_>
  }
 800e036:	bf00      	nop
 800e038:	371c      	adds	r7, #28
 800e03a:	46bd      	mov	sp, r7
 800e03c:	bd90      	pop	{r4, r7, pc}
	...

0800e040 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEC1ERS5_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800e040:	b580      	push	{r7, lr}
 800e042:	b084      	sub	sp, #16
 800e044:	af00      	add	r7, sp, #0
 800e046:	60f8      	str	r0, [r7, #12]
 800e048:	60b9      	str	r1, [r7, #8]
 800e04a:	607a      	str	r2, [r7, #4]
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	687a      	ldr	r2, [r7, #4]
 800e050:	68b9      	ldr	r1, [r7, #8]
 800e052:	4618      	mov	r0, r3
 800e054:	f000 fcf0 	bl	800ea38 <_ZN5Eigen9BlockImplIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ENS_5DenseEEC1ERS5_i>
      eigen_assert( (i>=0) && (
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	db06      	blt.n	800e06c <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEC1ERS5_i+0x2c>
 800e05e:	68b8      	ldr	r0, [r7, #8]
 800e060:	f7f7 ff68 	bl	8005f34 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800e064:	4602      	mov	r2, r0
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	4293      	cmp	r3, r2
 800e06a:	db05      	blt.n	800e078 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEC1ERS5_i+0x38>
 800e06c:	4b05      	ldr	r3, [pc, #20]	; (800e084 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEC1ERS5_i+0x44>)
 800e06e:	4a06      	ldr	r2, [pc, #24]	; (800e088 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEC1ERS5_i+0x48>)
 800e070:	2178      	movs	r1, #120	; 0x78
 800e072:	4806      	ldr	r0, [pc, #24]	; (800e08c <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEC1ERS5_i+0x4c>)
 800e074:	f00e ffde 	bl	801d034 <__assert_func>
    }
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	4618      	mov	r0, r3
 800e07c:	3710      	adds	r7, #16
 800e07e:	46bd      	mov	sp, r7
 800e080:	bd80      	pop	{r7, pc}
 800e082:	bf00      	nop
 800e084:	08023a20 	.word	0x08023a20
 800e088:	0802621c 	.word	0x0802621c
 800e08c:	08023ba4 	.word	0x08023ba4

0800e090 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800e090:	b480      	push	{r7}
 800e092:	b083      	sub	sp, #12
 800e094:	af00      	add	r7, sp, #0
 800e096:	6078      	str	r0, [r7, #4]
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	4618      	mov	r0, r3
 800e09c:	370c      	adds	r7, #12
 800e09e:	46bd      	mov	sp, r7
 800e0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a4:	4770      	bx	lr

0800e0a6 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1Ev>:
 800e0a6:	b580      	push	{r7, lr}
 800e0a8:	b082      	sub	sp, #8
 800e0aa:	af00      	add	r7, sp, #0
 800e0ac:	6078      	str	r0, [r7, #4]
 800e0ae:	6878      	ldr	r0, [r7, #4]
 800e0b0:	f000 fcd3 	bl	800ea5a <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1Ev>
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	3708      	adds	r7, #8
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	bd80      	pop	{r7, pc}

0800e0be <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 800e0be:	b580      	push	{r7, lr}
 800e0c0:	b082      	sub	sp, #8
 800e0c2:	af00      	add	r7, sp, #0
 800e0c4:	6078      	str	r0, [r7, #4]
 800e0c6:	6878      	ldr	r0, [r7, #4]
 800e0c8:	f7ff ffed 	bl	800e0a6 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1Ev>
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	3708      	adds	r7, #8
 800e0d2:	46bd      	mov	sp, r7
 800e0d4:	bd80      	pop	{r7, pc}

0800e0d6 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 800e0d6:	b580      	push	{r7, lr}
 800e0d8:	b082      	sub	sp, #8
 800e0da:	af00      	add	r7, sp, #0
 800e0dc:	6078      	str	r0, [r7, #4]
 800e0de:	f7f7 fe7e 	bl	8005dde <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 800e0e2:	4603      	mov	r3, r0
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	3708      	adds	r7, #8
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	bd80      	pop	{r7, pc}

0800e0ec <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b082      	sub	sp, #8
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	6078      	str	r0, [r7, #4]
 800e0f4:	f7f7 fe7b 	bl	8005dee <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800e0f8:	4603      	mov	r3, r0
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	3708      	adds	r7, #8
 800e0fe:	46bd      	mov	sp, r7
 800e100:	bd80      	pop	{r7, pc}
	...

0800e104 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEEC1ERSC_RSG_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 800e104:	b5b0      	push	{r4, r5, r7, lr}
 800e106:	b084      	sub	sp, #16
 800e108:	af00      	add	r7, sp, #0
 800e10a:	60f8      	str	r0, [r7, #12]
 800e10c:	60b9      	str	r1, [r7, #8]
 800e10e:	607a      	str	r2, [r7, #4]
 800e110:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 800e112:	68f8      	ldr	r0, [r7, #12]
 800e114:	f7ff ffd3 	bl	800e0be <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEENS_5DenseEEC1Ev>
 800e118:	68fa      	ldr	r2, [r7, #12]
 800e11a:	68bb      	ldr	r3, [r7, #8]
 800e11c:	4614      	mov	r4, r2
 800e11e:	461d      	mov	r5, r3
 800e120:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e122:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e124:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e128:	e884 0003 	stmia.w	r4, {r0, r1}
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	f103 0218 	add.w	r2, r3, #24
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	4614      	mov	r4, r2
 800e136:	461d      	mov	r5, r3
 800e138:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e13a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e13c:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e140:	e884 0003 	stmia.w	r4, {r0, r1}
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	3330      	adds	r3, #48	; 0x30
 800e148:	6839      	ldr	r1, [r7, #0]
 800e14a:	4618      	mov	r0, r3
 800e14c:	f7f6 fba8 	bl	80048a0 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 800e150:	68b8      	ldr	r0, [r7, #8]
 800e152:	f7fc fd11 	bl	800ab78 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 800e156:	4604      	mov	r4, r0
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	4618      	mov	r0, r3
 800e15c:	f7ff ffbb 	bl	800e0d6 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE4rowsEv>
 800e160:	4603      	mov	r3, r0
 800e162:	429c      	cmp	r4, r3
 800e164:	d10a      	bne.n	800e17c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x78>
 800e166:	68b8      	ldr	r0, [r7, #8]
 800e168:	f7fc fd13 	bl	800ab92 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 800e16c:	4604      	mov	r4, r0
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	4618      	mov	r0, r3
 800e172:	f7ff ffbb 	bl	800e0ec <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE4colsEv>
 800e176:	4603      	mov	r3, r0
 800e178:	429c      	cmp	r4, r3
 800e17a:	d005      	beq.n	800e188 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x84>
 800e17c:	4b05      	ldr	r3, [pc, #20]	; (800e194 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x90>)
 800e17e:	4a06      	ldr	r2, [pc, #24]	; (800e198 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x94>)
 800e180:	2174      	movs	r1, #116	; 0x74
 800e182:	4806      	ldr	r0, [pc, #24]	; (800e19c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x98>)
 800e184:	f00e ff56 	bl	801d034 <__assert_func>
    }
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	4618      	mov	r0, r3
 800e18c:	3710      	adds	r7, #16
 800e18e:	46bd      	mov	sp, r7
 800e190:	bdb0      	pop	{r4, r5, r7, pc}
 800e192:	bf00      	nop
 800e194:	0801ee9c 	.word	0x0801ee9c
 800e198:	0802630c 	.word	0x0802630c
 800e19c:	0801f100 	.word	0x0801f100

0800e1a0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800e1a0:	b580      	push	{r7, lr}
 800e1a2:	b082      	sub	sp, #8
 800e1a4:	af00      	add	r7, sp, #0
 800e1a6:	6078      	str	r0, [r7, #4]
 800e1a8:	6878      	ldr	r0, [r7, #4]
 800e1aa:	f000 f809 	bl	800e1c0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE7derivedEv>
 800e1ae:	4603      	mov	r3, r0
 800e1b0:	4618      	mov	r0, r3
 800e1b2:	f000 fc5d 	bl	800ea70 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE4colsEv>
 800e1b6:	4603      	mov	r3, r0
 800e1b8:	4618      	mov	r0, r3
 800e1ba:	3708      	adds	r7, #8
 800e1bc:	46bd      	mov	sp, r7
 800e1be:	bd80      	pop	{r7, pc}

0800e1c0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800e1c0:	b480      	push	{r7}
 800e1c2:	b083      	sub	sp, #12
 800e1c4:	af00      	add	r7, sp, #0
 800e1c6:	6078      	str	r0, [r7, #4]
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	370c      	adds	r7, #12
 800e1ce:	46bd      	mov	sp, r7
 800e1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d4:	4770      	bx	lr

0800e1d6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 800e1d6:	b580      	push	{r7, lr}
 800e1d8:	b082      	sub	sp, #8
 800e1da:	af00      	add	r7, sp, #0
 800e1dc:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	f7fc fcc9 	bl	800ab78 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 800e1e6:	4603      	mov	r3, r0
    }
 800e1e8:	4618      	mov	r0, r3
 800e1ea:	3708      	adds	r7, #8
 800e1ec:	46bd      	mov	sp, r7
 800e1ee:	bd80      	pop	{r7, pc}

0800e1f0 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 800e1f0:	b580      	push	{r7, lr}
 800e1f2:	b082      	sub	sp, #8
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	6078      	str	r0, [r7, #4]
 800e1f8:	6878      	ldr	r0, [r7, #4]
 800e1fa:	f000 fc60 	bl	800eabe <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEED1Ev>
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	4618      	mov	r0, r3
 800e202:	3708      	adds	r7, #8
 800e204:	46bd      	mov	sp, r7
 800e206:	bd80      	pop	{r7, pc}

0800e208 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800e208:	b580      	push	{r7, lr}
 800e20a:	b082      	sub	sp, #8
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	6078      	str	r0, [r7, #4]
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	4618      	mov	r0, r3
 800e214:	f7ff ffec 	bl	800e1f0 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	4618      	mov	r0, r3
 800e21c:	3708      	adds	r7, #8
 800e21e:	46bd      	mov	sp, r7
 800e220:	bd80      	pop	{r7, pc}

0800e222 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800e222:	b580      	push	{r7, lr}
 800e224:	b082      	sub	sp, #8
 800e226:	af00      	add	r7, sp, #0
 800e228:	6078      	str	r0, [r7, #4]
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	4618      	mov	r0, r3
 800e22e:	f7ff ffeb 	bl	800e208 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EED1Ev>
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	4618      	mov	r0, r3
 800e236:	3708      	adds	r7, #8
 800e238:	46bd      	mov	sp, r7
 800e23a:	bd80      	pop	{r7, pc}

0800e23c <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEED1Ev>:
struct evaluator<const T>
 800e23c:	b580      	push	{r7, lr}
 800e23e:	b082      	sub	sp, #8
 800e240:	af00      	add	r7, sp, #0
 800e242:	6078      	str	r0, [r7, #4]
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	4618      	mov	r0, r3
 800e248:	f7ff ffeb 	bl	800e222 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEED1Ev>
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	4618      	mov	r0, r3
 800e250:	3708      	adds	r7, #8
 800e252:	46bd      	mov	sp, r7
 800e254:	bd80      	pop	{r7, pc}

0800e256 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>:
  struct Data
 800e256:	b580      	push	{r7, lr}
 800e258:	b082      	sub	sp, #8
 800e25a:	af00      	add	r7, sp, #0
 800e25c:	6078      	str	r0, [r7, #4]
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	330c      	adds	r3, #12
 800e262:	4618      	mov	r0, r3
 800e264:	f7ff ffea 	bl	800e23c <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEED1Ev>
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	3304      	adds	r3, #4
 800e26c:	4618      	mov	r0, r3
 800e26e:	f7fc fd79 	bl	800ad64 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	4618      	mov	r0, r3
 800e276:	3708      	adds	r7, #8
 800e278:	46bd      	mov	sp, r7
 800e27a:	bd80      	pop	{r7, pc}

0800e27c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 800e27c:	b580      	push	{r7, lr}
 800e27e:	b082      	sub	sp, #8
 800e280:	af00      	add	r7, sp, #0
 800e282:	6078      	str	r0, [r7, #4]
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	4618      	mov	r0, r3
 800e288:	f7ff ffe5 	bl	800e256 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>
 800e28c:	6878      	ldr	r0, [r7, #4]
 800e28e:	f000 fc0b 	bl	800eaa8 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEED1Ev>
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	4618      	mov	r0, r3
 800e296:	3708      	adds	r7, #8
 800e298:	46bd      	mov	sp, r7
 800e29a:	bd80      	pop	{r7, pc}

0800e29c <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 800e29c:	b580      	push	{r7, lr}
 800e29e:	b082      	sub	sp, #8
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	6078      	str	r0, [r7, #4]
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	f7ff ffe8 	bl	800e27c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffED1Ev>
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	3708      	adds	r7, #8
 800e2b2:	46bd      	mov	sp, r7
 800e2b4:	bd80      	pop	{r7, pc}

0800e2b6 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 800e2b6:	b580      	push	{r7, lr}
 800e2b8:	b082      	sub	sp, #8
 800e2ba:	af00      	add	r7, sp, #0
 800e2bc:	6078      	str	r0, [r7, #4]
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	4618      	mov	r0, r3
 800e2c2:	f7ff ffeb 	bl	800e29c <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEED1Ev>
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	3708      	adds	r7, #8
 800e2cc:	46bd      	mov	sp, r7
 800e2ce:	bd80      	pop	{r7, pc}

0800e2d0 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 800e2d0:	b580      	push	{r7, lr}
 800e2d2:	ed2d 8b02 	vpush	{d8}
 800e2d6:	b088      	sub	sp, #32
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	6078      	str	r0, [r7, #4]
 800e2dc:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 800e2de:	6878      	ldr	r0, [r7, #4]
 800e2e0:	f7ff fb0d 	bl	800d8fe <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE4rowsEv>
 800e2e4:	4603      	mov	r3, r0
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	dd05      	ble.n	800e2f6 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 800e2ea:	6878      	ldr	r0, [r7, #4]
 800e2ec:	f7ff ff58 	bl	800e1a0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE4colsEv>
 800e2f0:	4603      	mov	r3, r0
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	dc06      	bgt.n	800e304 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 800e2f6:	4b16      	ldr	r3, [pc, #88]	; (800e350 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 800e2f8:	4a16      	ldr	r2, [pc, #88]	; (800e354 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 800e2fa:	f240 119b 	movw	r1, #411	; 0x19b
 800e2fe:	4816      	ldr	r0, [pc, #88]	; (800e358 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 800e300:	f00e fe98 	bl	801d034 <__assert_func>
 800e304:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800e306:	6878      	ldr	r0, [r7, #4]
 800e308:	f7ff ff5a 	bl	800e1c0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE7derivedEv>
 800e30c:	4602      	mov	r2, r0
 800e30e:	f107 030c 	add.w	r3, r7, #12
 800e312:	4611      	mov	r1, r2
 800e314:	4618      	mov	r0, r3
 800e316:	f000 fbb8 	bl	800ea8a <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1ERKSI_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800e31a:	6878      	ldr	r0, [r7, #4]
 800e31c:	f7ff ff50 	bl	800e1c0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE7derivedEv>
 800e320:	4602      	mov	r2, r0
 800e322:	f107 030c 	add.w	r3, r7, #12
 800e326:	6839      	ldr	r1, [r7, #0]
 800e328:	4618      	mov	r0, r3
 800e32a:	f000 fbd3 	bl	800ead4 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>
 800e32e:	eeb0 8a40 	vmov.f32	s16, s0
 800e332:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800e334:	f107 030c 	add.w	r3, r7, #12
 800e338:	4618      	mov	r0, r3
 800e33a:	f7ff ffbc 	bl	800e2b6 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800e33e:	eef0 7a48 	vmov.f32	s15, s16
}
 800e342:	eeb0 0a67 	vmov.f32	s0, s15
 800e346:	3720      	adds	r7, #32
 800e348:	46bd      	mov	sp, r7
 800e34a:	ecbd 8b02 	vpop	{d8}
 800e34e:	bd80      	pop	{r7, pc}
 800e350:	08023f1c 	.word	0x08023f1c
 800e354:	0802657c 	.word	0x0802657c
 800e358:	08024128 	.word	0x08024128

0800e35c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b082      	sub	sp, #8
 800e360:	af00      	add	r7, sp, #0
 800e362:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800e364:	2202      	movs	r2, #2
 800e366:	2101      	movs	r1, #1
 800e368:	6878      	ldr	r0, [r7, #4]
 800e36a:	f7fd fd50 	bl	800be0e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800e36e:	6878      	ldr	r0, [r7, #4]
 800e370:	f000 fbc1 	bl	800eaf6 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSG_>
  }
 800e374:	bf00      	nop
 800e376:	3708      	adds	r7, #8
 800e378:	46bd      	mov	sp, r7
 800e37a:	bd80      	pop	{r7, pc}

0800e37c <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800e37c:	b480      	push	{r7}
 800e37e:	b083      	sub	sp, #12
 800e380:	af00      	add	r7, sp, #0
 800e382:	6078      	str	r0, [r7, #4]
    }
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	4618      	mov	r0, r3
 800e388:	370c      	adds	r7, #12
 800e38a:	46bd      	mov	sp, r7
 800e38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e390:	4770      	bx	lr

0800e392 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 800e392:	b480      	push	{r7}
 800e394:	b083      	sub	sp, #12
 800e396:	af00      	add	r7, sp, #0
 800e398:	6078      	str	r0, [r7, #4]
 800e39a:	6039      	str	r1, [r7, #0]
}
 800e39c:	bf00      	nop
 800e39e:	370c      	adds	r7, #12
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a6:	4770      	bx	lr

0800e3a8 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>:
struct evaluator<PlainObjectBase<Derived> >
 800e3a8:	b580      	push	{r7, lr}
 800e3aa:	b082      	sub	sp, #8
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	6078      	str	r0, [r7, #4]
 800e3b0:	6878      	ldr	r0, [r7, #4]
 800e3b2:	f000 fbd5 	bl	800eb60 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	3708      	adds	r7, #8
 800e3bc:	46bd      	mov	sp, r7
 800e3be:	bd80      	pop	{r7, pc}

0800e3c0 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>:
struct evaluator<Matrix<Scalar, Rows, Cols, Options, MaxRows, MaxCols> >
 800e3c0:	b580      	push	{r7, lr}
 800e3c2:	b082      	sub	sp, #8
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	6078      	str	r0, [r7, #4]
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	f7ff ffec 	bl	800e3a8 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	3708      	adds	r7, #8
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	bd80      	pop	{r7, pc}

0800e3da <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 800e3da:	b580      	push	{r7, lr}
 800e3dc:	b082      	sub	sp, #8
 800e3de:	af00      	add	r7, sp, #0
 800e3e0:	6078      	str	r0, [r7, #4]
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	f7ff ffeb 	bl	800e3c0 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 800e3ea:	6878      	ldr	r0, [r7, #4]
 800e3ec:	f000 fbad 	bl	800eb4a <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	4618      	mov	r0, r3
 800e3f4:	3708      	adds	r7, #8
 800e3f6:	46bd      	mov	sp, r7
 800e3f8:	bd80      	pop	{r7, pc}

0800e3fa <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 800e3fa:	b580      	push	{r7, lr}
 800e3fc:	b082      	sub	sp, #8
 800e3fe:	af00      	add	r7, sp, #0
 800e400:	6078      	str	r0, [r7, #4]
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	4618      	mov	r0, r3
 800e406:	f7ff ffe8 	bl	800e3da <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfED1Ev>
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	4618      	mov	r0, r3
 800e40e:	3708      	adds	r7, #8
 800e410:	46bd      	mov	sp, r7
 800e412:	bd80      	pop	{r7, pc}

0800e414 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEELi3ENS_10DenseShapeES9_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 800e414:	b580      	push	{r7, lr}
 800e416:	b082      	sub	sp, #8
 800e418:	af00      	add	r7, sp, #0
 800e41a:	6078      	str	r0, [r7, #4]
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	330c      	adds	r3, #12
 800e420:	4618      	mov	r0, r3
 800e422:	f7ff ffea 	bl	800e3fa <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	3308      	adds	r3, #8
 800e42a:	4618      	mov	r0, r3
 800e42c:	f7f8 f995 	bl	800675a <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 800e430:	6878      	ldr	r0, [r7, #4]
 800e432:	f000 fb7f 	bl	800eb34 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEED1Ev>
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	4618      	mov	r0, r3
 800e43a:	3708      	adds	r7, #8
 800e43c:	46bd      	mov	sp, r7
 800e43e:	bd80      	pop	{r7, pc}

0800e440 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 800e440:	b580      	push	{r7, lr}
 800e442:	b082      	sub	sp, #8
 800e444:	af00      	add	r7, sp, #0
 800e446:	6078      	str	r0, [r7, #4]
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	4618      	mov	r0, r3
 800e44c:	f7ff ffe2 	bl	800e414 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEELi3ENS_10DenseShapeES9_ffED1Ev>
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	4618      	mov	r0, r3
 800e454:	3708      	adds	r7, #8
 800e456:	46bd      	mov	sp, r7
 800e458:	bd80      	pop	{r7, pc}

0800e45a <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 800e45a:	b580      	push	{r7, lr}
 800e45c:	b090      	sub	sp, #64	; 0x40
 800e45e:	af02      	add	r7, sp, #8
 800e460:	60f8      	str	r0, [r7, #12]
 800e462:	60b9      	str	r1, [r7, #8]
 800e464:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 800e466:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e46a:	68b9      	ldr	r1, [r7, #8]
 800e46c:	4618      	mov	r0, r3
 800e46e:	f000 fb52 	bl	800eb16 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1ERKS8_>
  resize_if_allowed(dst, src, func);
 800e472:	687a      	ldr	r2, [r7, #4]
 800e474:	68b9      	ldr	r1, [r7, #8]
 800e476:	68f8      	ldr	r0, [r7, #12]
 800e478:	f000 fb9a 	bl	800ebb0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 800e47c:	f107 0320 	add.w	r3, r7, #32
 800e480:	68f9      	ldr	r1, [r7, #12]
 800e482:	4618      	mov	r0, r3
 800e484:	f7f7 fc2d 	bl	8005ce2 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 800e488:	68f8      	ldr	r0, [r7, #12]
 800e48a:	f7f8 fc6b 	bl	8006d64 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv>
 800e48e:	4603      	mov	r3, r0
 800e490:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800e494:	f107 0120 	add.w	r1, r7, #32
 800e498:	f107 0010 	add.w	r0, r7, #16
 800e49c:	9300      	str	r3, [sp, #0]
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	f000 fbd0 	bl	800ec44 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSC_RKSE_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 800e4a4:	f107 0310 	add.w	r3, r7, #16
 800e4a8:	4618      	mov	r0, r3
 800e4aa:	f000 fbe5 	bl	800ec78 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSG_>
  DstEvaluatorType dstEvaluator(dst);
 800e4ae:	f107 0320 	add.w	r3, r7, #32
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	f7f6 f8db 	bl	800466e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 800e4b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e4bc:	4618      	mov	r0, r3
 800e4be:	f7ff ffbf 	bl	800e440 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEED1Ev>
}
 800e4c2:	bf00      	nop
 800e4c4:	3738      	adds	r7, #56	; 0x38
 800e4c6:	46bd      	mov	sp, r7
 800e4c8:	bd80      	pop	{r7, pc}

0800e4ca <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800e4ca:	b580      	push	{r7, lr}
 800e4cc:	b086      	sub	sp, #24
 800e4ce:	af00      	add	r7, sp, #0
 800e4d0:	60f8      	str	r0, [r7, #12]
 800e4d2:	60b9      	str	r1, [r7, #8]
 800e4d4:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800e4da:	687a      	ldr	r2, [r7, #4]
 800e4dc:	68b9      	ldr	r1, [r7, #8]
 800e4de:	6978      	ldr	r0, [r7, #20]
 800e4e0:	f000 fbd5 	bl	800ec8e <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSG_RKSI_>
}
 800e4e4:	bf00      	nop
 800e4e6:	3718      	adds	r7, #24
 800e4e8:	46bd      	mov	sp, r7
 800e4ea:	bd80      	pop	{r7, pc}

0800e4ec <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 800e4ec:	b480      	push	{r7}
 800e4ee:	b083      	sub	sp, #12
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	6078      	str	r0, [r7, #4]
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	332c      	adds	r3, #44	; 0x2c
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	370c      	adds	r7, #12
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e502:	4770      	bx	lr

0800e504 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800e504:	b480      	push	{r7}
 800e506:	b083      	sub	sp, #12
 800e508:	af00      	add	r7, sp, #0
 800e50a:	6078      	str	r0, [r7, #4]
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	4618      	mov	r0, r3
 800e510:	370c      	adds	r7, #12
 800e512:	46bd      	mov	sp, r7
 800e514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e518:	4770      	bx	lr

0800e51a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800e51a:	b480      	push	{r7}
 800e51c:	b083      	sub	sp, #12
 800e51e:	af00      	add	r7, sp, #0
 800e520:	6078      	str	r0, [r7, #4]
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	3318      	adds	r3, #24
 800e526:	4618      	mov	r0, r3
 800e528:	370c      	adds	r7, #12
 800e52a:	46bd      	mov	sp, r7
 800e52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e530:	4770      	bx	lr

0800e532 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1ERSA_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 800e532:	b580      	push	{r7, lr}
 800e534:	b082      	sub	sp, #8
 800e536:	af00      	add	r7, sp, #0
 800e538:	6078      	str	r0, [r7, #4]
 800e53a:	6039      	str	r1, [r7, #0]
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	6839      	ldr	r1, [r7, #0]
 800e540:	4618      	mov	r0, r3
 800e542:	f000 fbb7 	bl	800ecb4 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1ERKS9_>
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	4618      	mov	r0, r3
 800e54a:	3708      	adds	r7, #8
 800e54c:	46bd      	mov	sp, r7
 800e54e:	bd80      	pop	{r7, pc}

0800e550 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERS7_>:
 800e550:	b580      	push	{r7, lr}
 800e552:	b082      	sub	sp, #8
 800e554:	af00      	add	r7, sp, #0
 800e556:	6078      	str	r0, [r7, #4]
 800e558:	6039      	str	r1, [r7, #0]
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	6839      	ldr	r1, [r7, #0]
 800e55e:	4618      	mov	r0, r3
 800e560:	f000 fbb7 	bl	800ecd2 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERKS6_>
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	4618      	mov	r0, r3
 800e568:	3708      	adds	r7, #8
 800e56a:	46bd      	mov	sp, r7
 800e56c:	bd80      	pop	{r7, pc}

0800e56e <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 800e56e:	b480      	push	{r7}
 800e570:	b083      	sub	sp, #12
 800e572:	af00      	add	r7, sp, #0
 800e574:	6078      	str	r0, [r7, #4]
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	4618      	mov	r0, r3
 800e57a:	370c      	adds	r7, #12
 800e57c:	46bd      	mov	sp, r7
 800e57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e582:	4770      	bx	lr

0800e584 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800e584:	b580      	push	{r7, lr}
 800e586:	b084      	sub	sp, #16
 800e588:	af00      	add	r7, sp, #0
 800e58a:	60f8      	str	r0, [r7, #12]
 800e58c:	60b9      	str	r1, [r7, #8]
 800e58e:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	68ba      	ldr	r2, [r7, #8]
 800e594:	6879      	ldr	r1, [r7, #4]
 800e596:	4618      	mov	r0, r3
 800e598:	f000 fbaa 	bl	800ecf0 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEE5coeffEii>
 800e59c:	eef0 7a40 	vmov.f32	s15, s0
  }
 800e5a0:	eeb0 0a67 	vmov.f32	s0, s15
 800e5a4:	3710      	adds	r7, #16
 800e5a6:	46bd      	mov	sp, r7
 800e5a8:	bd80      	pop	{r7, pc}

0800e5aa <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_E5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800e5aa:	b5b0      	push	{r4, r5, r7, lr}
 800e5ac:	b084      	sub	sp, #16
 800e5ae:	af00      	add	r7, sp, #0
 800e5b0:	60f8      	str	r0, [r7, #12]
 800e5b2:	60b9      	str	r1, [r7, #8]
 800e5b4:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	681c      	ldr	r4, [r3, #0]
 800e5ba:	68f8      	ldr	r0, [r7, #12]
 800e5bc:	f000 fbb9 	bl	800ed32 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_E9colStrideEv>
 800e5c0:	4602      	mov	r2, r0
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	fb03 f502 	mul.w	r5, r3, r2
 800e5c8:	68f8      	ldr	r0, [r7, #12]
 800e5ca:	f000 fbbd 	bl	800ed48 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_E9rowStrideEv>
 800e5ce:	4602      	mov	r2, r0
 800e5d0:	68bb      	ldr	r3, [r7, #8]
 800e5d2:	fb02 f303 	mul.w	r3, r2, r3
 800e5d6:	442b      	add	r3, r5
 800e5d8:	009b      	lsls	r3, r3, #2
 800e5da:	4423      	add	r3, r4
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	ee07 3a90 	vmov	s15, r3
  }
 800e5e2:	eeb0 0a67 	vmov.f32	s0, s15
 800e5e6:	3710      	adds	r7, #16
 800e5e8:	46bd      	mov	sp, r7
 800e5ea:	bdb0      	pop	{r4, r5, r7, pc}

0800e5ec <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 800e5ec:	b480      	push	{r7}
 800e5ee:	b085      	sub	sp, #20
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	60f8      	str	r0, [r7, #12]
 800e5f4:	60b9      	str	r1, [r7, #8]
 800e5f6:	607a      	str	r2, [r7, #4]
 800e5f8:	68bb      	ldr	r3, [r7, #8]
 800e5fa:	ed93 7a00 	vldr	s14, [r3]
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	edd3 7a00 	vldr	s15, [r3]
 800e604:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e608:	eeb0 0a67 	vmov.f32	s0, s15
 800e60c:	3714      	adds	r7, #20
 800e60e:	46bd      	mov	sp, r7
 800e610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e614:	4770      	bx	lr

0800e616 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS3_RKS5_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 800e616:	b580      	push	{r7, lr}
 800e618:	b084      	sub	sp, #16
 800e61a:	af00      	add	r7, sp, #0
 800e61c:	60f8      	str	r0, [r7, #12]
 800e61e:	60b9      	str	r1, [r7, #8]
 800e620:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 800e622:	68b9      	ldr	r1, [r7, #8]
 800e624:	68f8      	ldr	r0, [r7, #12]
 800e626:	f000 fb9a 	bl	800ed5e <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_EEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 800e62a:	687a      	ldr	r2, [r7, #4]
 800e62c:	68b9      	ldr	r1, [r7, #8]
 800e62e:	68f8      	ldr	r0, [r7, #12]
 800e630:	f000 fba0 	bl	800ed74 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800e634:	bf00      	nop
 800e636:	3710      	adds	r7, #16
 800e638:	46bd      	mov	sp, r7
 800e63a:	bd80      	pop	{r7, pc}

0800e63c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::sub_assign_op<Scalar,Scalar> &)
 800e63c:	b590      	push	{r4, r7, lr}
 800e63e:	b085      	sub	sp, #20
 800e640:	af00      	add	r7, sp, #0
 800e642:	60f8      	str	r0, [r7, #12]
 800e644:	60b9      	str	r1, [r7, #8]
 800e646:	607a      	str	r2, [r7, #4]
    eigen_assert(dst.rows() == src.rows() && dst.cols() == src.cols());
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	4618      	mov	r0, r3
 800e64c:	f7f6 fded 	bl	800522a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800e650:	4604      	mov	r4, r0
 800e652:	68b8      	ldr	r0, [r7, #8]
 800e654:	f7f6 ffb0 	bl	80055b8 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4rowsEv>
 800e658:	4603      	mov	r3, r0
 800e65a:	429c      	cmp	r4, r3
 800e65c:	d10a      	bne.n	800e674 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x38>
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	4618      	mov	r0, r3
 800e662:	f7f6 fded 	bl	8005240 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800e666:	4604      	mov	r4, r0
 800e668:	68b8      	ldr	r0, [r7, #8]
 800e66a:	f7f6 ffb3 	bl	80055d4 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4colsEv>
 800e66e:	4603      	mov	r3, r0
 800e670:	429c      	cmp	r4, r3
 800e672:	d005      	beq.n	800e680 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x44>
 800e674:	4b0b      	ldr	r3, [pc, #44]	; (800e6a4 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x68>)
 800e676:	4a0c      	ldr	r2, [pc, #48]	; (800e6a8 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x6c>)
 800e678:	21b0      	movs	r1, #176	; 0xb0
 800e67a:	480c      	ldr	r0, [pc, #48]	; (800e6ac <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x70>)
 800e67c:	f00e fcda 	bl	801d034 <__assert_func>
    generic_product_impl<Lhs, Rhs>::subTo(dst, src.lhs(), src.rhs());
 800e680:	68b8      	ldr	r0, [r7, #8]
 800e682:	f000 fbaf 	bl	800ede4 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3lhsEv>
 800e686:	4604      	mov	r4, r0
 800e688:	68b8      	ldr	r0, [r7, #8]
 800e68a:	f000 fbb7 	bl	800edfc <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3rhsEv>
 800e68e:	4603      	mov	r3, r0
 800e690:	461a      	mov	r2, r3
 800e692:	4621      	mov	r1, r4
 800e694:	68f8      	ldr	r0, [r7, #12]
 800e696:	f000 fbbd 	bl	800ee14 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEENS_10DenseShapeES5_Li6EE5subToINS2_IfLi1ELi1ELi0ELi1ELi1EEEEEvRT_RKS3_RKS4_>
  }
 800e69a:	bf00      	nop
 800e69c:	3714      	adds	r7, #20
 800e69e:	46bd      	mov	sp, r7
 800e6a0:	bd90      	pop	{r4, r7, pc}
 800e6a2:	bf00      	nop
 800e6a4:	08021c30 	.word	0x08021c30
 800e6a8:	08026758 	.word	0x08026758
 800e6ac:	08022128 	.word	0x08022128

0800e6b0 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE11lazyProductINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS7_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 800e6b0:	b590      	push	{r4, r7, lr}
 800e6b2:	b085      	sub	sp, #20
 800e6b4:	af00      	add	r7, sp, #0
 800e6b6:	60f8      	str	r0, [r7, #12]
 800e6b8:	60b9      	str	r1, [r7, #8]
 800e6ba:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 800e6bc:	68b8      	ldr	r0, [r7, #8]
 800e6be:	f7f6 f806 	bl	80046ce <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800e6c2:	4604      	mov	r4, r0
 800e6c4:	6878      	ldr	r0, [r7, #4]
 800e6c6:	f7f6 fc9b 	bl	8005000 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 800e6ca:	4603      	mov	r3, r0
 800e6cc:	461a      	mov	r2, r3
 800e6ce:	4621      	mov	r1, r4
 800e6d0:	68f8      	ldr	r0, [r7, #12]
 800e6d2:	f000 fbf3 	bl	800eebc <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EEC1ERKS2_RKS3_>
}
 800e6d6:	68f8      	ldr	r0, [r7, #12]
 800e6d8:	3714      	adds	r7, #20
 800e6da:	46bd      	mov	sp, r7
 800e6dc:	bd90      	pop	{r4, r7, pc}

0800e6de <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800e6de:	b580      	push	{r7, lr}
 800e6e0:	b086      	sub	sp, #24
 800e6e2:	af00      	add	r7, sp, #0
 800e6e4:	60f8      	str	r0, [r7, #12]
 800e6e6:	60b9      	str	r1, [r7, #8]
 800e6e8:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800e6ee:	687a      	ldr	r2, [r7, #4]
 800e6f0:	68b9      	ldr	r1, [r7, #8]
 800e6f2:	6978      	ldr	r0, [r7, #20]
 800e6f4:	f000 fc10 	bl	800ef18 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_>
}
 800e6f8:	bf00      	nop
 800e6fa:	3718      	adds	r7, #24
 800e6fc:	46bd      	mov	sp, r7
 800e6fe:	bd80      	pop	{r7, pc}

0800e700 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800e700:	b480      	push	{r7}
 800e702:	b083      	sub	sp, #12
 800e704:	af00      	add	r7, sp, #0
 800e706:	6078      	str	r0, [r7, #4]
    }
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	4618      	mov	r0, r3
 800e70c:	370c      	adds	r7, #12
 800e70e:	46bd      	mov	sp, r7
 800e710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e714:	4770      	bx	lr

0800e716 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 800e716:	b480      	push	{r7}
 800e718:	b083      	sub	sp, #12
 800e71a:	af00      	add	r7, sp, #0
 800e71c:	6078      	str	r0, [r7, #4]
 800e71e:	6039      	str	r1, [r7, #0]
    {}
 800e720:	bf00      	nop
 800e722:	370c      	adds	r7, #12
 800e724:	46bd      	mov	sp, r7
 800e726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e72a:	4770      	bx	lr

0800e72c <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800e72c:	b480      	push	{r7}
 800e72e:	b083      	sub	sp, #12
 800e730:	af00      	add	r7, sp, #0
 800e732:	6078      	str	r0, [r7, #4]
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	4618      	mov	r0, r3
 800e738:	370c      	adds	r7, #12
 800e73a:	46bd      	mov	sp, r7
 800e73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e740:	4770      	bx	lr

0800e742 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE4DataC1ERKSG_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 800e742:	b590      	push	{r4, r7, lr}
 800e744:	b083      	sub	sp, #12
 800e746:	af00      	add	r7, sp, #0
 800e748:	6078      	str	r0, [r7, #4]
 800e74a:	6039      	str	r1, [r7, #0]
 800e74c:	687c      	ldr	r4, [r7, #4]
 800e74e:	6838      	ldr	r0, [r7, #0]
 800e750:	f000 fbf5 	bl	800ef3e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE7functorEv>
 800e754:	4603      	mov	r3, r0
 800e756:	4619      	mov	r1, r3
 800e758:	4620      	mov	r0, r4
 800e75a:	f7f6 f8a1 	bl	80048a0 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	1d1c      	adds	r4, r3, #4
 800e762:	6838      	ldr	r0, [r7, #0]
 800e764:	f000 fbf7 	bl	800ef56 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE3lhsEv>
 800e768:	4603      	mov	r3, r0
 800e76a:	4619      	mov	r1, r3
 800e76c:	4620      	mov	r0, r4
 800e76e:	f7ff fbde 	bl	800df2e <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERSA_>
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	f103 040c 	add.w	r4, r3, #12
 800e778:	6838      	ldr	r0, [r7, #0]
 800e77a:	f000 fbf7 	bl	800ef6c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE3rhsEv>
 800e77e:	4603      	mov	r3, r0
 800e780:	4619      	mov	r1, r3
 800e782:	4620      	mov	r0, r4
 800e784:	f000 fbfe 	bl	800ef84 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERS7_>
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	4618      	mov	r0, r3
 800e78c:	370c      	adds	r7, #12
 800e78e:	46bd      	mov	sp, r7
 800e790:	bd90      	pop	{r4, r7, pc}

0800e792 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 800e792:	b580      	push	{r7, lr}
 800e794:	b084      	sub	sp, #16
 800e796:	af00      	add	r7, sp, #0
 800e798:	60f8      	str	r0, [r7, #12]
 800e79a:	60b9      	str	r1, [r7, #8]
 800e79c:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	68ba      	ldr	r2, [r7, #8]
 800e7a2:	6879      	ldr	r1, [r7, #4]
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	f000 fbfc 	bl	800efa2 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE5coeffEii>
 800e7aa:	eef0 7a40 	vmov.f32	s15, s0
 800e7ae:	eeb0 0a67 	vmov.f32	s0, s15
 800e7b2:	3710      	adds	r7, #16
 800e7b4:	46bd      	mov	sp, r7
 800e7b6:	bd80      	pop	{r7, pc}

0800e7b8 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi1ELi1EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800e7b8:	b580      	push	{r7, lr}
 800e7ba:	b082      	sub	sp, #8
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	6078      	str	r0, [r7, #4]
 800e7c0:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800e7c2:	2201      	movs	r2, #1
 800e7c4:	2100      	movs	r1, #0
 800e7c6:	6878      	ldr	r0, [r7, #4]
 800e7c8:	f7ff ffe3 	bl	800e792 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 800e7cc:	eef0 7a40 	vmov.f32	s15, s0
  }
 800e7d0:	eeb0 0a67 	vmov.f32	s0, s15
 800e7d4:	3708      	adds	r7, #8
 800e7d6:	46bd      	mov	sp, r7
 800e7d8:	bd80      	pop	{r7, pc}

0800e7da <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi2ELi1EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800e7da:	b580      	push	{r7, lr}
 800e7dc:	b082      	sub	sp, #8
 800e7de:	af00      	add	r7, sp, #0
 800e7e0:	6078      	str	r0, [r7, #4]
 800e7e2:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800e7e4:	2202      	movs	r2, #2
 800e7e6:	2100      	movs	r1, #0
 800e7e8:	6878      	ldr	r0, [r7, #4]
 800e7ea:	f7ff ffd2 	bl	800e792 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 800e7ee:	eef0 7a40 	vmov.f32	s15, s0
  }
 800e7f2:	eeb0 0a67 	vmov.f32	s0, s15
 800e7f6:	3708      	adds	r7, #8
 800e7f8:	46bd      	mov	sp, r7
 800e7fa:	bd80      	pop	{r7, pc}

0800e7fc <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 800e7fc:	b480      	push	{r7}
 800e7fe:	b083      	sub	sp, #12
 800e800:	af00      	add	r7, sp, #0
 800e802:	6078      	str	r0, [r7, #4]
 800e804:	bf00      	nop
 800e806:	370c      	adds	r7, #12
 800e808:	46bd      	mov	sp, r7
 800e80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e80e:	4770      	bx	lr

0800e810 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 800e810:	b480      	push	{r7}
 800e812:	b083      	sub	sp, #12
 800e814:	af00      	add	r7, sp, #0
 800e816:	6078      	str	r0, [r7, #4]
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	3334      	adds	r3, #52	; 0x34
 800e81c:	4618      	mov	r0, r3
 800e81e:	370c      	adds	r7, #12
 800e820:	46bd      	mov	sp, r7
 800e822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e826:	4770      	bx	lr

0800e828 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800e828:	b480      	push	{r7}
 800e82a:	b083      	sub	sp, #12
 800e82c:	af00      	add	r7, sp, #0
 800e82e:	6078      	str	r0, [r7, #4]
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	3304      	adds	r3, #4
 800e834:	4618      	mov	r0, r3
 800e836:	370c      	adds	r7, #12
 800e838:	46bd      	mov	sp, r7
 800e83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e83e:	4770      	bx	lr

0800e840 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800e840:	b480      	push	{r7}
 800e842:	b083      	sub	sp, #12
 800e844:	af00      	add	r7, sp, #0
 800e846:	6078      	str	r0, [r7, #4]
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	331c      	adds	r3, #28
 800e84c:	4618      	mov	r0, r3
 800e84e:	370c      	adds	r7, #12
 800e850:	46bd      	mov	sp, r7
 800e852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e856:	4770      	bx	lr

0800e858 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1ERSK_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 800e858:	b580      	push	{r7, lr}
 800e85a:	b082      	sub	sp, #8
 800e85c:	af00      	add	r7, sp, #0
 800e85e:	6078      	str	r0, [r7, #4]
 800e860:	6039      	str	r1, [r7, #0]
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	6839      	ldr	r1, [r7, #0]
 800e866:	4618      	mov	r0, r3
 800e868:	f000 fbcb 	bl	800f002 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1ERKSJ_>
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	4618      	mov	r0, r3
 800e870:	3708      	adds	r7, #8
 800e872:	46bd      	mov	sp, r7
 800e874:	bd80      	pop	{r7, pc}

0800e876 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1ERS9_>:
 800e876:	b580      	push	{r7, lr}
 800e878:	b082      	sub	sp, #8
 800e87a:	af00      	add	r7, sp, #0
 800e87c:	6078      	str	r0, [r7, #4]
 800e87e:	6039      	str	r1, [r7, #0]
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	6839      	ldr	r1, [r7, #0]
 800e884:	4618      	mov	r0, r3
 800e886:	f000 fbcb 	bl	800f020 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1ERKS8_>
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	4618      	mov	r0, r3
 800e88e:	3708      	adds	r7, #8
 800e890:	46bd      	mov	sp, r7
 800e892:	bd80      	pop	{r7, pc}

0800e894 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 800e894:	b480      	push	{r7}
 800e896:	b083      	sub	sp, #12
 800e898:	af00      	add	r7, sp, #0
 800e89a:	6078      	str	r0, [r7, #4]
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	4618      	mov	r0, r3
 800e8a0:	370c      	adds	r7, #12
 800e8a2:	46bd      	mov	sp, r7
 800e8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a8:	4770      	bx	lr

0800e8aa <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800e8aa:	b580      	push	{r7, lr}
 800e8ac:	b084      	sub	sp, #16
 800e8ae:	af00      	add	r7, sp, #0
 800e8b0:	60f8      	str	r0, [r7, #12]
 800e8b2:	60b9      	str	r1, [r7, #8]
 800e8b4:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	68ba      	ldr	r2, [r7, #8]
 800e8ba:	6879      	ldr	r1, [r7, #4]
 800e8bc:	4618      	mov	r0, r3
 800e8be:	f000 fbc6 	bl	800f04e <_ZNK5Eigen8internal15unary_evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS0_10IndexBasedEfE5coeffEii>
 800e8c2:	eef0 7a40 	vmov.f32	s15, s0
  }
 800e8c6:	eeb0 0a67 	vmov.f32	s0, s15
 800e8ca:	3710      	adds	r7, #16
 800e8cc:	46bd      	mov	sp, r7
 800e8ce:	bd80      	pop	{r7, pc}

0800e8d0 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800e8d0:	b5b0      	push	{r4, r5, r7, lr}
 800e8d2:	b084      	sub	sp, #16
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	60f8      	str	r0, [r7, #12]
 800e8d8:	60b9      	str	r1, [r7, #8]
 800e8da:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	681c      	ldr	r4, [r3, #0]
 800e8e0:	68f8      	ldr	r0, [r7, #12]
 800e8e2:	f000 fbd4 	bl	800f08e <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEE9colStrideEv>
 800e8e6:	4602      	mov	r2, r0
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	fb03 f502 	mul.w	r5, r3, r2
 800e8ee:	68f8      	ldr	r0, [r7, #12]
 800e8f0:	f000 fbd8 	bl	800f0a4 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEE9rowStrideEv>
 800e8f4:	4602      	mov	r2, r0
 800e8f6:	68bb      	ldr	r3, [r7, #8]
 800e8f8:	fb02 f303 	mul.w	r3, r2, r3
 800e8fc:	442b      	add	r3, r5
 800e8fe:	009b      	lsls	r3, r3, #2
 800e900:	4423      	add	r3, r4
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	ee07 3a90 	vmov	s15, r3
  }
 800e908:	eeb0 0a67 	vmov.f32	s0, s15
 800e90c:	3710      	adds	r7, #16
 800e90e:	46bd      	mov	sp, r7
 800e910:	bdb0      	pop	{r4, r5, r7, pc}

0800e912 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERKS9_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 800e912:	b580      	push	{r7, lr}
 800e914:	b082      	sub	sp, #8
 800e916:	af00      	add	r7, sp, #0
 800e918:	6078      	str	r0, [r7, #4]
 800e91a:	6039      	str	r1, [r7, #0]
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	6839      	ldr	r1, [r7, #0]
 800e920:	4618      	mov	r0, r3
 800e922:	f000 fbca 	bl	800f0ba <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfEC1ERKS9_>
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	4618      	mov	r0, r3
 800e92a:	3708      	adds	r7, #8
 800e92c:	46bd      	mov	sp, r7
 800e92e:	bd80      	pop	{r7, pc}

0800e930 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 800e930:	b580      	push	{r7, lr}
 800e932:	b082      	sub	sp, #8
 800e934:	af00      	add	r7, sp, #0
 800e936:	6078      	str	r0, [r7, #4]
 800e938:	6039      	str	r1, [r7, #0]
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	6839      	ldr	r1, [r7, #0]
 800e93e:	4618      	mov	r0, r3
 800e940:	f000 fbd1 	bl	800f0e6 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EEC1ERKNS_5BlockIS4_Li3ELi1ELb1EEE>
  }
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	4618      	mov	r0, r3
 800e948:	3708      	adds	r7, #8
 800e94a:	46bd      	mov	sp, r7
 800e94c:	bd80      	pop	{r7, pc}

0800e94e <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 800e94e:	b480      	push	{r7}
 800e950:	b083      	sub	sp, #12
 800e952:	af00      	add	r7, sp, #0
 800e954:	6078      	str	r0, [r7, #4]
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	4618      	mov	r0, r3
 800e95a:	370c      	adds	r7, #12
 800e95c:	46bd      	mov	sp, r7
 800e95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e962:	4770      	bx	lr

0800e964 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800e964:	b580      	push	{r7, lr}
 800e966:	b084      	sub	sp, #16
 800e968:	af00      	add	r7, sp, #0
 800e96a:	60f8      	str	r0, [r7, #12]
 800e96c:	60b9      	str	r1, [r7, #8]
 800e96e:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	68ba      	ldr	r2, [r7, #8]
 800e974:	6879      	ldr	r1, [r7, #4]
 800e976:	4618      	mov	r0, r3
 800e978:	f000 fbc9 	bl	800f10e <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEE5coeffEii>
 800e97c:	eef0 7a40 	vmov.f32	s15, s0
  }
 800e980:	eeb0 0a67 	vmov.f32	s0, s15
 800e984:	3710      	adds	r7, #16
 800e986:	46bd      	mov	sp, r7
 800e988:	bd80      	pop	{r7, pc}

0800e98a <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_E5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800e98a:	b5b0      	push	{r4, r5, r7, lr}
 800e98c:	b084      	sub	sp, #16
 800e98e:	af00      	add	r7, sp, #0
 800e990:	60f8      	str	r0, [r7, #12]
 800e992:	60b9      	str	r1, [r7, #8]
 800e994:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	681c      	ldr	r4, [r3, #0]
 800e99a:	68f8      	ldr	r0, [r7, #12]
 800e99c:	f000 fbd8 	bl	800f150 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_E9colStrideEv>
 800e9a0:	4602      	mov	r2, r0
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	fb03 f502 	mul.w	r5, r3, r2
 800e9a8:	68f8      	ldr	r0, [r7, #12]
 800e9aa:	f000 fbdc 	bl	800f166 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_E9rowStrideEv>
 800e9ae:	4602      	mov	r2, r0
 800e9b0:	68bb      	ldr	r3, [r7, #8]
 800e9b2:	fb02 f303 	mul.w	r3, r2, r3
 800e9b6:	442b      	add	r3, r5
 800e9b8:	009b      	lsls	r3, r3, #2
 800e9ba:	4423      	add	r3, r4
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	ee07 3a90 	vmov	s15, r3
  }
 800e9c2:	eeb0 0a67 	vmov.f32	s0, s15
 800e9c6:	3710      	adds	r7, #16
 800e9c8:	46bd      	mov	sp, r7
 800e9ca:	bdb0      	pop	{r4, r5, r7, pc}

0800e9cc <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800e9cc:	b480      	push	{r7}
 800e9ce:	b083      	sub	sp, #12
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	6078      	str	r0, [r7, #4]
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	4618      	mov	r0, r3
 800e9da:	370c      	adds	r7, #12
 800e9dc:	46bd      	mov	sp, r7
 800e9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e2:	4770      	bx	lr

0800e9e4 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800e9e4:	b480      	push	{r7}
 800e9e6:	b083      	sub	sp, #12
 800e9e8:	af00      	add	r7, sp, #0
 800e9ea:	6078      	str	r0, [r7, #4]
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	685b      	ldr	r3, [r3, #4]
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	370c      	adds	r7, #12
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9fa:	4770      	bx	lr

0800e9fc <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS_10DenseShapeES4_Li3EE6evalToIS3_EEvRT_RKS3_SA_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 800e9fc:	b580      	push	{r7, lr}
 800e9fe:	b088      	sub	sp, #32
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	60f8      	str	r0, [r7, #12]
 800ea04:	60b9      	str	r1, [r7, #8]
 800ea06:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 800ea08:	f107 0314 	add.w	r3, r7, #20
 800ea0c:	687a      	ldr	r2, [r7, #4]
 800ea0e:	68b9      	ldr	r1, [r7, #8]
 800ea10:	4618      	mov	r0, r3
 800ea12:	f000 fbb3 	bl	800f17c <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE11lazyProductIS2_EEKNS_7ProductIS2_T_Li1EEERKNS0_IS6_EE>
 800ea16:	f107 031c 	add.w	r3, r7, #28
 800ea1a:	4618      	mov	r0, r3
 800ea1c:	f7f7 fc45 	bl	80062aa <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800ea20:	f107 021c 	add.w	r2, r7, #28
 800ea24:	f107 0314 	add.w	r3, r7, #20
 800ea28:	4619      	mov	r1, r3
 800ea2a:	68f8      	ldr	r0, [r7, #12]
 800ea2c:	f000 fbbd 	bl	800f1aa <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800ea30:	bf00      	nop
 800ea32:	3720      	adds	r7, #32
 800ea34:	46bd      	mov	sp, r7
 800ea36:	bd80      	pop	{r7, pc}

0800ea38 <_ZN5Eigen9BlockImplIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ENS_5DenseEEC1ERS5_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 800ea38:	b580      	push	{r7, lr}
 800ea3a:	b084      	sub	sp, #16
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	60f8      	str	r0, [r7, #12]
 800ea40:	60b9      	str	r1, [r7, #8]
 800ea42:	607a      	str	r2, [r7, #4]
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	687a      	ldr	r2, [r7, #4]
 800ea48:	68b9      	ldr	r1, [r7, #8]
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	f000 fbbe 	bl	800f1cc <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EEC1ERS6_i>
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	4618      	mov	r0, r3
 800ea54:	3710      	adds	r7, #16
 800ea56:	46bd      	mov	sp, r7
 800ea58:	bd80      	pop	{r7, pc}

0800ea5a <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800ea5a:	b480      	push	{r7}
 800ea5c:	b083      	sub	sp, #12
 800ea5e:	af00      	add	r7, sp, #0
 800ea60:	6078      	str	r0, [r7, #4]
    }
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	4618      	mov	r0, r3
 800ea66:	370c      	adds	r7, #12
 800ea68:	46bd      	mov	sp, r7
 800ea6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea6e:	4770      	bx	lr

0800ea70 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 800ea70:	b580      	push	{r7, lr}
 800ea72:	b082      	sub	sp, #8
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	4618      	mov	r0, r3
 800ea7c:	f7fc f889 	bl	800ab92 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 800ea80:	4603      	mov	r3, r0
    }
 800ea82:	4618      	mov	r0, r3
 800ea84:	3708      	adds	r7, #8
 800ea86:	46bd      	mov	sp, r7
 800ea88:	bd80      	pop	{r7, pc}

0800ea8a <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1ERKSI_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 800ea8a:	b580      	push	{r7, lr}
 800ea8c:	b082      	sub	sp, #8
 800ea8e:	af00      	add	r7, sp, #0
 800ea90:	6078      	str	r0, [r7, #4]
 800ea92:	6039      	str	r1, [r7, #0]
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	6839      	ldr	r1, [r7, #0]
 800ea98:	4618      	mov	r0, r3
 800ea9a:	f000 fbcd 	bl	800f238 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1ERKSI_>
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	4618      	mov	r0, r3
 800eaa2:	3708      	adds	r7, #8
 800eaa4:	46bd      	mov	sp, r7
 800eaa6:	bd80      	pop	{r7, pc}

0800eaa8 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800eaa8:	b480      	push	{r7}
 800eaaa:	b083      	sub	sp, #12
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	6078      	str	r0, [r7, #4]
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	4618      	mov	r0, r3
 800eab4:	370c      	adds	r7, #12
 800eab6:	46bd      	mov	sp, r7
 800eab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eabc:	4770      	bx	lr

0800eabe <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEED1Ev>:
 800eabe:	b480      	push	{r7}
 800eac0:	b083      	sub	sp, #12
 800eac2:	af00      	add	r7, sp, #0
 800eac4:	6078      	str	r0, [r7, #4]
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	4618      	mov	r0, r3
 800eaca:	370c      	adds	r7, #12
 800eacc:	46bd      	mov	sp, r7
 800eace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead2:	4770      	bx	lr

0800ead4 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b084      	sub	sp, #16
 800ead8:	af00      	add	r7, sp, #0
 800eada:	60f8      	str	r0, [r7, #12]
 800eadc:	60b9      	str	r1, [r7, #8]
 800eade:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 800eae0:	68b9      	ldr	r1, [r7, #8]
 800eae2:	68f8      	ldr	r0, [r7, #12]
 800eae4:	f000 fbb7 	bl	800f256 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi0ELi3EE3runERKSM_RKS3_>
 800eae8:	eef0 7a40 	vmov.f32	s15, s0
  }
 800eaec:	eeb0 0a67 	vmov.f32	s0, s15
 800eaf0:	3710      	adds	r7, #16
 800eaf2:	46bd      	mov	sp, r7
 800eaf4:	bd80      	pop	{r7, pc}

0800eaf6 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800eaf6:	b580      	push	{r7, lr}
 800eaf8:	b082      	sub	sp, #8
 800eafa:	af00      	add	r7, sp, #0
 800eafc:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800eafe:	2200      	movs	r2, #0
 800eb00:	2102      	movs	r1, #2
 800eb02:	6878      	ldr	r0, [r7, #4]
 800eb04:	f7fd f983 	bl	800be0e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800eb08:	6878      	ldr	r0, [r7, #4]
 800eb0a:	f000 fbc8 	bl	800f29e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSG_>
  }
 800eb0e:	bf00      	nop
 800eb10:	3708      	adds	r7, #8
 800eb12:	46bd      	mov	sp, r7
 800eb14:	bd80      	pop	{r7, pc}

0800eb16 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1ERKS8_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800eb16:	b580      	push	{r7, lr}
 800eb18:	b082      	sub	sp, #8
 800eb1a:	af00      	add	r7, sp, #0
 800eb1c:	6078      	str	r0, [r7, #4]
 800eb1e:	6039      	str	r1, [r7, #0]
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	6839      	ldr	r1, [r7, #0]
 800eb24:	4618      	mov	r0, r3
 800eb26:	f000 fbca 	bl	800f2be <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEELi3ENS_10DenseShapeES9_ffEC1ERKS8_>
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	3708      	adds	r7, #8
 800eb30:	46bd      	mov	sp, r7
 800eb32:	bd80      	pop	{r7, pc}

0800eb34 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEED1Ev>:
 800eb34:	b480      	push	{r7}
 800eb36:	b083      	sub	sp, #12
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	6078      	str	r0, [r7, #4]
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	4618      	mov	r0, r3
 800eb40:	370c      	adds	r7, #12
 800eb42:	46bd      	mov	sp, r7
 800eb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb48:	4770      	bx	lr

0800eb4a <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>:
 800eb4a:	b480      	push	{r7}
 800eb4c:	b083      	sub	sp, #12
 800eb4e:	af00      	add	r7, sp, #0
 800eb50:	6078      	str	r0, [r7, #4]
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	4618      	mov	r0, r3
 800eb56:	370c      	adds	r7, #12
 800eb58:	46bd      	mov	sp, r7
 800eb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb5e:	4770      	bx	lr

0800eb60 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>:
 800eb60:	b480      	push	{r7}
 800eb62:	b083      	sub	sp, #12
 800eb64:	af00      	add	r7, sp, #0
 800eb66:	6078      	str	r0, [r7, #4]
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	4618      	mov	r0, r3
 800eb6c:	370c      	adds	r7, #12
 800eb6e:	46bd      	mov	sp, r7
 800eb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb74:	4770      	bx	lr

0800eb76 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 800eb76:	b580      	push	{r7, lr}
 800eb78:	b082      	sub	sp, #8
 800eb7a:	af00      	add	r7, sp, #0
 800eb7c:	6078      	str	r0, [r7, #4]
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	4618      	mov	r0, r3
 800eb84:	f7f5 fb61 	bl	800424a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800eb88:	4603      	mov	r3, r0
 800eb8a:	4618      	mov	r0, r3
 800eb8c:	3708      	adds	r7, #8
 800eb8e:	46bd      	mov	sp, r7
 800eb90:	bd80      	pop	{r7, pc}

0800eb92 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 800eb92:	b580      	push	{r7, lr}
 800eb94:	b082      	sub	sp, #8
 800eb96:	af00      	add	r7, sp, #0
 800eb98:	6078      	str	r0, [r7, #4]
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	3304      	adds	r3, #4
 800eb9e:	4618      	mov	r0, r3
 800eba0:	f7f7 fa3b 	bl	800601a <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 800eba4:	4603      	mov	r3, r0
 800eba6:	4618      	mov	r0, r3
 800eba8:	3708      	adds	r7, #8
 800ebaa:	46bd      	mov	sp, r7
 800ebac:	bd80      	pop	{r7, pc}
	...

0800ebb0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 800ebb0:	b580      	push	{r7, lr}
 800ebb2:	b086      	sub	sp, #24
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	60f8      	str	r0, [r7, #12]
 800ebb8:	60b9      	str	r1, [r7, #8]
 800ebba:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 800ebbc:	68b8      	ldr	r0, [r7, #8]
 800ebbe:	f7ff ffda 	bl	800eb76 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE4rowsEv>
 800ebc2:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 800ebc4:	68b8      	ldr	r0, [r7, #8]
 800ebc6:	f7ff ffe4 	bl	800eb92 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE4colsEv>
 800ebca:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	4618      	mov	r0, r3
 800ebd0:	f7f5 fbe1 	bl	8004396 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800ebd4:	4602      	mov	r2, r0
 800ebd6:	697b      	ldr	r3, [r7, #20]
 800ebd8:	4293      	cmp	r3, r2
 800ebda:	d107      	bne.n	800ebec <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	4618      	mov	r0, r3
 800ebe0:	f7f5 fbce 	bl	8004380 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800ebe4:	4602      	mov	r2, r0
 800ebe6:	693b      	ldr	r3, [r7, #16]
 800ebe8:	4293      	cmp	r3, r2
 800ebea:	d001      	beq.n	800ebf0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 800ebec:	2301      	movs	r3, #1
 800ebee:	e000      	b.n	800ebf2 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 800ebf0:	2300      	movs	r3, #0
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d005      	beq.n	800ec02 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	693a      	ldr	r2, [r7, #16]
 800ebfa:	6979      	ldr	r1, [r7, #20]
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	f7f8 fad5 	bl	80071ac <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	4618      	mov	r0, r3
 800ec06:	f7f5 fbc6 	bl	8004396 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800ec0a:	4602      	mov	r2, r0
 800ec0c:	697b      	ldr	r3, [r7, #20]
 800ec0e:	4293      	cmp	r3, r2
 800ec10:	d107      	bne.n	800ec22 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	4618      	mov	r0, r3
 800ec16:	f7f5 fbb3 	bl	8004380 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800ec1a:	4602      	mov	r2, r0
 800ec1c:	693b      	ldr	r3, [r7, #16]
 800ec1e:	4293      	cmp	r3, r2
 800ec20:	d006      	beq.n	800ec30 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 800ec22:	4b05      	ldr	r3, [pc, #20]	; (800ec38 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 800ec24:	4a05      	ldr	r2, [pc, #20]	; (800ec3c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 800ec26:	f240 21fd 	movw	r1, #765	; 0x2fd
 800ec2a:	4805      	ldr	r0, [pc, #20]	; (800ec40 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 800ec2c:	f00e fa02 	bl	801d034 <__assert_func>
}
 800ec30:	bf00      	nop
 800ec32:	3718      	adds	r7, #24
 800ec34:	46bd      	mov	sp, r7
 800ec36:	bd80      	pop	{r7, pc}
 800ec38:	08021514 	.word	0x08021514
 800ec3c:	08026ad4 	.word	0x08026ad4
 800ec40:	08021628 	.word	0x08021628

0800ec44 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSC_RKSE_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 800ec44:	b480      	push	{r7}
 800ec46:	b085      	sub	sp, #20
 800ec48:	af00      	add	r7, sp, #0
 800ec4a:	60f8      	str	r0, [r7, #12]
 800ec4c:	60b9      	str	r1, [r7, #8]
 800ec4e:	607a      	str	r2, [r7, #4]
 800ec50:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	68ba      	ldr	r2, [r7, #8]
 800ec56:	601a      	str	r2, [r3, #0]
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	687a      	ldr	r2, [r7, #4]
 800ec5c:	605a      	str	r2, [r3, #4]
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	683a      	ldr	r2, [r7, #0]
 800ec62:	609a      	str	r2, [r3, #8]
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	69ba      	ldr	r2, [r7, #24]
 800ec68:	60da      	str	r2, [r3, #12]
  }
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	4618      	mov	r0, r3
 800ec6e:	3714      	adds	r7, #20
 800ec70:	46bd      	mov	sp, r7
 800ec72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec76:	4770      	bx	lr

0800ec78 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800ec78:	b580      	push	{r7, lr}
 800ec7a:	b082      	sub	sp, #8
 800ec7c:	af00      	add	r7, sp, #0
 800ec7e:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 800ec80:	6878      	ldr	r0, [r7, #4]
 800ec82:	f000 fb53 	bl	800f32c <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSG_>
  }
 800ec86:	bf00      	nop
 800ec88:	3708      	adds	r7, #8
 800ec8a:	46bd      	mov	sp, r7
 800ec8c:	bd80      	pop	{r7, pc}

0800ec8e <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSG_RKSI_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 800ec8e:	b580      	push	{r7, lr}
 800ec90:	b084      	sub	sp, #16
 800ec92:	af00      	add	r7, sp, #0
 800ec94:	60f8      	str	r0, [r7, #12]
 800ec96:	60b9      	str	r1, [r7, #8]
 800ec98:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 800ec9a:	68b9      	ldr	r1, [r7, #8]
 800ec9c:	68f8      	ldr	r0, [r7, #12]
 800ec9e:	f000 fb54 	bl	800f34a <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 800eca2:	687a      	ldr	r2, [r7, #4]
 800eca4:	68b9      	ldr	r1, [r7, #8]
 800eca6:	68f8      	ldr	r0, [r7, #12]
 800eca8:	f000 fbbe 	bl	800f428 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800ecac:	bf00      	nop
 800ecae:	3710      	adds	r7, #16
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	bd80      	pop	{r7, pc}

0800ecb4 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1ERKS9_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 800ecb4:	b580      	push	{r7, lr}
 800ecb6:	b082      	sub	sp, #8
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	6078      	str	r0, [r7, #4]
 800ecbc:	6039      	str	r1, [r7, #0]
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	6839      	ldr	r1, [r7, #0]
 800ecc2:	4618      	mov	r0, r3
 800ecc4:	f000 fbe8 	bl	800f498 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEENS0_10IndexBasedEfEC1ERKS9_>
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	4618      	mov	r0, r3
 800eccc:	3708      	adds	r7, #8
 800ecce:	46bd      	mov	sp, r7
 800ecd0:	bd80      	pop	{r7, pc}

0800ecd2 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 800ecd2:	b580      	push	{r7, lr}
 800ecd4:	b082      	sub	sp, #8
 800ecd6:	af00      	add	r7, sp, #0
 800ecd8:	6078      	str	r0, [r7, #4]
 800ecda:	6039      	str	r1, [r7, #0]
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	6839      	ldr	r1, [r7, #0]
 800ece0:	4618      	mov	r0, r3
 800ece2:	f000 fbef 	bl	800f4c4 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EEC1ERKNS_5BlockIS4_Li1ELi1ELb1EEE>
  }
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	4618      	mov	r0, r3
 800ecea:	3708      	adds	r7, #8
 800ecec:	46bd      	mov	sp, r7
 800ecee:	bd80      	pop	{r7, pc}

0800ecf0 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800ecf0:	b5b0      	push	{r4, r5, r7, lr}
 800ecf2:	b084      	sub	sp, #16
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	60f8      	str	r0, [r7, #12]
 800ecf8:	60b9      	str	r1, [r7, #8]
 800ecfa:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	681c      	ldr	r4, [r3, #0]
 800ed00:	68f8      	ldr	r0, [r7, #12]
 800ed02:	f000 fbf3 	bl	800f4ec <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEE9colStrideEv>
 800ed06:	4602      	mov	r2, r0
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	fb03 f502 	mul.w	r5, r3, r2
 800ed0e:	68f8      	ldr	r0, [r7, #12]
 800ed10:	f000 fbf7 	bl	800f502 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEE9rowStrideEv>
 800ed14:	4602      	mov	r2, r0
 800ed16:	68bb      	ldr	r3, [r7, #8]
 800ed18:	fb02 f303 	mul.w	r3, r2, r3
 800ed1c:	442b      	add	r3, r5
 800ed1e:	009b      	lsls	r3, r3, #2
 800ed20:	4423      	add	r3, r4
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	ee07 3a90 	vmov	s15, r3
  }
 800ed28:	eeb0 0a67 	vmov.f32	s0, s15
 800ed2c:	3710      	adds	r7, #16
 800ed2e:	46bd      	mov	sp, r7
 800ed30:	bdb0      	pop	{r4, r5, r7, pc}

0800ed32 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_E9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 800ed32:	b580      	push	{r7, lr}
 800ed34:	b082      	sub	sp, #8
 800ed36:	af00      	add	r7, sp, #0
 800ed38:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 800ed3a:	f7f7 f858 	bl	8005dee <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800ed3e:	4603      	mov	r3, r0
  }
 800ed40:	4618      	mov	r0, r3
 800ed42:	3708      	adds	r7, #8
 800ed44:	46bd      	mov	sp, r7
 800ed46:	bd80      	pop	{r7, pc}

0800ed48 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_E9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 800ed48:	b580      	push	{r7, lr}
 800ed4a:	b082      	sub	sp, #8
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 800ed50:	f7f7 f84d 	bl	8005dee <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800ed54:	4603      	mov	r3, r0
  }
 800ed56:	4618      	mov	r0, r3
 800ed58:	3708      	adds	r7, #8
 800ed5a:	46bd      	mov	sp, r7
 800ed5c:	bd80      	pop	{r7, pc}

0800ed5e <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_EEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 800ed5e:	b480      	push	{r7}
 800ed60:	b083      	sub	sp, #12
 800ed62:	af00      	add	r7, sp, #0
 800ed64:	6078      	str	r0, [r7, #4]
 800ed66:	6039      	str	r1, [r7, #0]
}
 800ed68:	bf00      	nop
 800ed6a:	370c      	adds	r7, #12
 800ed6c:	46bd      	mov	sp, r7
 800ed6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed72:	4770      	bx	lr

0800ed74 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 800ed74:	b580      	push	{r7, lr}
 800ed76:	b08c      	sub	sp, #48	; 0x30
 800ed78:	af02      	add	r7, sp, #8
 800ed7a:	60f8      	str	r0, [r7, #12]
 800ed7c:	60b9      	str	r1, [r7, #8]
 800ed7e:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 800ed80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ed84:	68b9      	ldr	r1, [r7, #8]
 800ed86:	4618      	mov	r0, r3
 800ed88:	f7fa fd4f 	bl	800982a <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
  resize_if_allowed(dst, src, func);
 800ed8c:	687a      	ldr	r2, [r7, #4]
 800ed8e:	68b9      	ldr	r1, [r7, #8]
 800ed90:	68f8      	ldr	r0, [r7, #12]
 800ed92:	f000 fbc1 	bl	800f518 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 800ed96:	f107 0320 	add.w	r3, r7, #32
 800ed9a:	68f9      	ldr	r1, [r7, #12]
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	f7fa fd44 	bl	800982a <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 800eda2:	68f8      	ldr	r0, [r7, #12]
 800eda4:	f000 fc04 	bl	800f5b0 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE18const_cast_derivedEv>
 800eda8:	4603      	mov	r3, r0
 800edaa:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800edae:	f107 0120 	add.w	r1, r7, #32
 800edb2:	f107 0010 	add.w	r0, r7, #16
 800edb6:	9300      	str	r3, [sp, #0]
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	f000 fc04 	bl	800f5c6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES5_NS0_9assign_opIffEELi0EEC1ERS5_RKS5_RKS7_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 800edbe:	f107 0310 	add.w	r3, r7, #16
 800edc2:	4618      	mov	r0, r3
 800edc4:	f000 fc19 	bl	800f5fa <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi2EE3runERS9_>
  DstEvaluatorType dstEvaluator(dst);
 800edc8:	f107 0320 	add.w	r3, r7, #32
 800edcc:	4618      	mov	r0, r3
 800edce:	f7f9 fc13 	bl	80085f8 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 800edd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800edd6:	4618      	mov	r0, r3
 800edd8:	f7f9 fc0e 	bl	80085f8 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
}
 800eddc:	bf00      	nop
 800edde:	3728      	adds	r7, #40	; 0x28
 800ede0:	46bd      	mov	sp, r7
 800ede2:	bd80      	pop	{r7, pc}

0800ede4 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800ede4:	b480      	push	{r7}
 800ede6:	b083      	sub	sp, #12
 800ede8:	af00      	add	r7, sp, #0
 800edea:	6078      	str	r0, [r7, #4]
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	4618      	mov	r0, r3
 800edf2:	370c      	adds	r7, #12
 800edf4:	46bd      	mov	sp, r7
 800edf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edfa:	4770      	bx	lr

0800edfc <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800edfc:	b480      	push	{r7}
 800edfe:	b083      	sub	sp, #12
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	6078      	str	r0, [r7, #4]
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	685b      	ldr	r3, [r3, #4]
 800ee08:	4618      	mov	r0, r3
 800ee0a:	370c      	adds	r7, #12
 800ee0c:	46bd      	mov	sp, r7
 800ee0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee12:	4770      	bx	lr

0800ee14 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEENS_10DenseShapeES5_Li6EE5subToINS2_IfLi1ELi1ELi0ELi1ELi1EEEEEvRT_RKS3_RKS4_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void subTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 800ee14:	b580      	push	{r7, lr}
 800ee16:	ed2d 8b02 	vpush	{d8}
 800ee1a:	b088      	sub	sp, #32
 800ee1c:	af00      	add	r7, sp, #0
 800ee1e:	60f8      	str	r0, [r7, #12]
 800ee20:	60b9      	str	r1, [r7, #8]
 800ee22:	607a      	str	r2, [r7, #4]
  { dst.coeffRef(0,0) -= (lhs.transpose().cwiseProduct(rhs)).sum(); }
 800ee24:	68b8      	ldr	r0, [r7, #8]
 800ee26:	f000 fbf3 	bl	800f610 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE9transposeEv>
 800ee2a:	4603      	mov	r3, r0
 800ee2c:	61fb      	str	r3, [r7, #28]
 800ee2e:	f107 0310 	add.w	r3, r7, #16
 800ee32:	f107 011c 	add.w	r1, r7, #28
 800ee36:	687a      	ldr	r2, [r7, #4]
 800ee38:	4618      	mov	r0, r3
 800ee3a:	f000 fbfc 	bl	800f636 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE12cwiseProductINS2_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSA_6traitsIT_E6ScalarEEEKS5_KSD_EERKNS0_ISD_EE>
 800ee3e:	f107 0310 	add.w	r3, r7, #16
 800ee42:	4618      	mov	r0, r3
 800ee44:	f000 fc25 	bl	800f692 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE3sumEv>
 800ee48:	eeb0 8a40 	vmov.f32	s16, s0
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	2200      	movs	r2, #0
 800ee50:	2100      	movs	r1, #0
 800ee52:	4618      	mov	r0, r3
 800ee54:	f7f6 ff11 	bl	8005c7a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8coeffRefEii>
 800ee58:	4603      	mov	r3, r0
 800ee5a:	edd3 7a00 	vldr	s15, [r3]
 800ee5e:	ee77 7ac8 	vsub.f32	s15, s15, s16
 800ee62:	edc3 7a00 	vstr	s15, [r3]
 800ee66:	bf00      	nop
 800ee68:	3720      	adds	r7, #32
 800ee6a:	46bd      	mov	sp, r7
 800ee6c:	ecbd 8b02 	vpop	{d8}
 800ee70:	bd80      	pop	{r7, pc}

0800ee72 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1Ev>:
 800ee72:	b580      	push	{r7, lr}
 800ee74:	b082      	sub	sp, #8
 800ee76:	af00      	add	r7, sp, #0
 800ee78:	6078      	str	r0, [r7, #4]
 800ee7a:	6878      	ldr	r0, [r7, #4]
 800ee7c:	f000 fc24 	bl	800f6c8 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1Ev>
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	4618      	mov	r0, r3
 800ee84:	3708      	adds	r7, #8
 800ee86:	46bd      	mov	sp, r7
 800ee88:	bd80      	pop	{r7, pc}

0800ee8a <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi4EEC1Ev>:
class dense_product_base
 800ee8a:	b580      	push	{r7, lr}
 800ee8c:	b082      	sub	sp, #8
 800ee8e:	af00      	add	r7, sp, #0
 800ee90:	6078      	str	r0, [r7, #4]
 800ee92:	6878      	ldr	r0, [r7, #4]
 800ee94:	f7ff ffed 	bl	800ee72 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1Ev>
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	4618      	mov	r0, r3
 800ee9c:	3708      	adds	r7, #8
 800ee9e:	46bd      	mov	sp, r7
 800eea0:	bd80      	pop	{r7, pc}

0800eea2 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 800eea2:	b580      	push	{r7, lr}
 800eea4:	b082      	sub	sp, #8
 800eea6:	af00      	add	r7, sp, #0
 800eea8:	6078      	str	r0, [r7, #4]
 800eeaa:	6878      	ldr	r0, [r7, #4]
 800eeac:	f7ff ffed 	bl	800ee8a <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi4EEC1Ev>
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	3708      	adds	r7, #8
 800eeb6:	46bd      	mov	sp, r7
 800eeb8:	bd80      	pop	{r7, pc}
	...

0800eebc <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 800eebc:	b590      	push	{r4, r7, lr}
 800eebe:	b085      	sub	sp, #20
 800eec0:	af00      	add	r7, sp, #0
 800eec2:	60f8      	str	r0, [r7, #12]
 800eec4:	60b9      	str	r1, [r7, #8]
 800eec6:	607a      	str	r2, [r7, #4]
 800eec8:	68f8      	ldr	r0, [r7, #12]
 800eeca:	f7ff ffea 	bl	800eea2 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1ENS_5DenseEEC1Ev>
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	68ba      	ldr	r2, [r7, #8]
 800eed2:	601a      	str	r2, [r3, #0]
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	687a      	ldr	r2, [r7, #4]
 800eed8:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 800eeda:	68bb      	ldr	r3, [r7, #8]
 800eedc:	4618      	mov	r0, r3
 800eede:	f7f5 fa4f 	bl	8004380 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800eee2:	4604      	mov	r4, r0
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	4618      	mov	r0, r3
 800eee8:	f7f5 fb71 	bl	80045ce <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 800eeec:	4603      	mov	r3, r0
 800eeee:	429c      	cmp	r4, r3
 800eef0:	d005      	beq.n	800eefe <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EEC1ERKS2_RKS3_+0x42>
 800eef2:	4b06      	ldr	r3, [pc, #24]	; (800ef0c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EEC1ERKS2_RKS3_+0x50>)
 800eef4:	4a06      	ldr	r2, [pc, #24]	; (800ef10 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EEC1ERKS2_RKS3_+0x54>)
 800eef6:	2160      	movs	r1, #96	; 0x60
 800eef8:	4806      	ldr	r0, [pc, #24]	; (800ef14 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EEC1ERKS2_RKS3_+0x58>)
 800eefa:	f00e f89b 	bl	801d034 <__assert_func>
 800eefe:	bf00      	nop
    }
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	4618      	mov	r0, r3
 800ef04:	3714      	adds	r7, #20
 800ef06:	46bd      	mov	sp, r7
 800ef08:	bd90      	pop	{r4, r7, pc}
 800ef0a:	bf00      	nop
 800ef0c:	0801f15c 	.word	0x0801f15c
 800ef10:	08026bfc 	.word	0x08026bfc
 800ef14:	0801f4ac 	.word	0x0801f4ac

0800ef18 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 800ef18:	b580      	push	{r7, lr}
 800ef1a:	b084      	sub	sp, #16
 800ef1c:	af00      	add	r7, sp, #0
 800ef1e:	60f8      	str	r0, [r7, #12]
 800ef20:	60b9      	str	r1, [r7, #8]
 800ef22:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 800ef24:	68b9      	ldr	r1, [r7, #8]
 800ef26:	68f8      	ldr	r0, [r7, #12]
 800ef28:	f000 fbd9 	bl	800f6de <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 800ef2c:	687a      	ldr	r2, [r7, #4]
 800ef2e:	68b9      	ldr	r1, [r7, #8]
 800ef30:	68f8      	ldr	r0, [r7, #12]
 800ef32:	f000 fc17 	bl	800f764 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800ef36:	bf00      	nop
 800ef38:	3710      	adds	r7, #16
 800ef3a:	46bd      	mov	sp, r7
 800ef3c:	bd80      	pop	{r7, pc}

0800ef3e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 800ef3e:	b480      	push	{r7}
 800ef40:	b083      	sub	sp, #12
 800ef42:	af00      	add	r7, sp, #0
 800ef44:	6078      	str	r0, [r7, #4]
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	3330      	adds	r3, #48	; 0x30
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	370c      	adds	r7, #12
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef54:	4770      	bx	lr

0800ef56 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800ef56:	b480      	push	{r7}
 800ef58:	b083      	sub	sp, #12
 800ef5a:	af00      	add	r7, sp, #0
 800ef5c:	6078      	str	r0, [r7, #4]
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	4618      	mov	r0, r3
 800ef62:	370c      	adds	r7, #12
 800ef64:	46bd      	mov	sp, r7
 800ef66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef6a:	4770      	bx	lr

0800ef6c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800ef6c:	b480      	push	{r7}
 800ef6e:	b083      	sub	sp, #12
 800ef70:	af00      	add	r7, sp, #0
 800ef72:	6078      	str	r0, [r7, #4]
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	3318      	adds	r3, #24
 800ef78:	4618      	mov	r0, r3
 800ef7a:	370c      	adds	r7, #12
 800ef7c:	46bd      	mov	sp, r7
 800ef7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef82:	4770      	bx	lr

0800ef84 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 800ef84:	b580      	push	{r7, lr}
 800ef86:	b082      	sub	sp, #8
 800ef88:	af00      	add	r7, sp, #0
 800ef8a:	6078      	str	r0, [r7, #4]
 800ef8c:	6039      	str	r1, [r7, #0]
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	6839      	ldr	r1, [r7, #0]
 800ef92:	4618      	mov	r0, r3
 800ef94:	f000 fc1e 	bl	800f7d4 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERKS6_>
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	4618      	mov	r0, r3
 800ef9c:	3708      	adds	r7, #8
 800ef9e:	46bd      	mov	sp, r7
 800efa0:	bd80      	pop	{r7, pc}

0800efa2 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800efa2:	b590      	push	{r4, r7, lr}
 800efa4:	b087      	sub	sp, #28
 800efa6:	af00      	add	r7, sp, #0
 800efa8:	60f8      	str	r0, [r7, #12]
 800efaa:	60b9      	str	r1, [r7, #8]
 800efac:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	4618      	mov	r0, r3
 800efb2:	f000 fc1e 	bl	800f7f2 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE4Data4funcEv>
 800efb6:	4604      	mov	r4, r0
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	3304      	adds	r3, #4
 800efbc:	687a      	ldr	r2, [r7, #4]
 800efbe:	68b9      	ldr	r1, [r7, #8]
 800efc0:	4618      	mov	r0, r3
 800efc2:	f7ff fccf 	bl	800e964 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfE5coeffEii>
 800efc6:	eef0 7a40 	vmov.f32	s15, s0
 800efca:	edc7 7a04 	vstr	s15, [r7, #16]
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	330c      	adds	r3, #12
 800efd2:	687a      	ldr	r2, [r7, #4]
 800efd4:	68b9      	ldr	r1, [r7, #8]
 800efd6:	4618      	mov	r0, r3
 800efd8:	f000 fc16 	bl	800f808 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>
 800efdc:	eef0 7a40 	vmov.f32	s15, s0
 800efe0:	edc7 7a05 	vstr	s15, [r7, #20]
 800efe4:	f107 0214 	add.w	r2, r7, #20
 800efe8:	f107 0310 	add.w	r3, r7, #16
 800efec:	4619      	mov	r1, r3
 800efee:	4620      	mov	r0, r4
 800eff0:	f7ff fafc 	bl	800e5ec <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 800eff4:	eef0 7a40 	vmov.f32	s15, s0
  }
 800eff8:	eeb0 0a67 	vmov.f32	s0, s15
 800effc:	371c      	adds	r7, #28
 800effe:	46bd      	mov	sp, r7
 800f000:	bd90      	pop	{r4, r7, pc}

0800f002 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1ERKSJ_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 800f002:	b580      	push	{r7, lr}
 800f004:	b082      	sub	sp, #8
 800f006:	af00      	add	r7, sp, #0
 800f008:	6078      	str	r0, [r7, #4]
 800f00a:	6039      	str	r1, [r7, #0]
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	6839      	ldr	r1, [r7, #0]
 800f010:	4618      	mov	r0, r3
 800f012:	f000 fc1a 	bl	800f84a <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEENS0_10IndexBasedEfEC1ERKSJ_>
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	4618      	mov	r0, r3
 800f01a:	3708      	adds	r7, #8
 800f01c:	46bd      	mov	sp, r7
 800f01e:	bd80      	pop	{r7, pc}

0800f020 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1ERKS8_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 800f020:	b580      	push	{r7, lr}
 800f022:	b082      	sub	sp, #8
 800f024:	af00      	add	r7, sp, #0
 800f026:	6078      	str	r0, [r7, #4]
 800f028:	6039      	str	r1, [r7, #0]
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	6839      	ldr	r1, [r7, #0]
 800f02e:	4618      	mov	r0, r3
 800f030:	f000 fc21 	bl	800f876 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EEC1ERKNS_5BlockIS6_Li1ELi1ELb0EEE>
  }
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	4618      	mov	r0, r3
 800f038:	3708      	adds	r7, #8
 800f03a:	46bd      	mov	sp, r7
 800f03c:	bd80      	pop	{r7, pc}

0800f03e <_ZN5Eigen8internal19variable_if_dynamicIiLi0EE5valueEv>:
    T value() { return T(Value); }
 800f03e:	b480      	push	{r7}
 800f040:	af00      	add	r7, sp, #0
 800f042:	2300      	movs	r3, #0
 800f044:	4618      	mov	r0, r3
 800f046:	46bd      	mov	sp, r7
 800f048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f04c:	4770      	bx	lr

0800f04e <_ZNK5Eigen8internal15unary_evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800f04e:	b5b0      	push	{r4, r5, r7, lr}
 800f050:	b084      	sub	sp, #16
 800f052:	af00      	add	r7, sp, #0
 800f054:	60f8      	str	r0, [r7, #12]
 800f056:	60b9      	str	r1, [r7, #8]
 800f058:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(m_startRow.value() + row, m_startCol.value() + col);
 800f05a:	68fc      	ldr	r4, [r7, #12]
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	3310      	adds	r3, #16
 800f060:	4618      	mov	r0, r3
 800f062:	f000 fc1c 	bl	800f89e <_ZNK5Eigen8internal19variable_if_dynamicIiLin1EE5valueEv>
 800f066:	4602      	mov	r2, r0
 800f068:	68bb      	ldr	r3, [r7, #8]
 800f06a:	18d5      	adds	r5, r2, r3
 800f06c:	f7ff ffe7 	bl	800f03e <_ZN5Eigen8internal19variable_if_dynamicIiLi0EE5valueEv>
 800f070:	4602      	mov	r2, r0
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	4413      	add	r3, r2
 800f076:	461a      	mov	r2, r3
 800f078:	4629      	mov	r1, r5
 800f07a:	4620      	mov	r0, r4
 800f07c:	f000 fc1b 	bl	800f8b6 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE5coeffEii>
 800f080:	eef0 7a40 	vmov.f32	s15, s0
  }
 800f084:	eeb0 0a67 	vmov.f32	s0, s15
 800f088:	3710      	adds	r7, #16
 800f08a:	46bd      	mov	sp, r7
 800f08c:	bdb0      	pop	{r4, r5, r7, pc}

0800f08e <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 800f08e:	b580      	push	{r7, lr}
 800f090:	b082      	sub	sp, #8
 800f092:	af00      	add	r7, sp, #0
 800f094:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 800f096:	f7f6 feaa 	bl	8005dee <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800f09a:	4603      	mov	r3, r0
  }
 800f09c:	4618      	mov	r0, r3
 800f09e:	3708      	adds	r7, #8
 800f0a0:	46bd      	mov	sp, r7
 800f0a2:	bd80      	pop	{r7, pc}

0800f0a4 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 800f0a4:	b580      	push	{r7, lr}
 800f0a6:	b082      	sub	sp, #8
 800f0a8:	af00      	add	r7, sp, #0
 800f0aa:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 800f0ac:	f7f6 fe97 	bl	8005dde <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 800f0b0:	4603      	mov	r3, r0
  }
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	3708      	adds	r7, #8
 800f0b6:	46bd      	mov	sp, r7
 800f0b8:	bd80      	pop	{r7, pc}

0800f0ba <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfEC1ERKS9_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 800f0ba:	b590      	push	{r4, r7, lr}
 800f0bc:	b083      	sub	sp, #12
 800f0be:	af00      	add	r7, sp, #0
 800f0c0:	6078      	str	r0, [r7, #4]
 800f0c2:	6039      	str	r1, [r7, #0]
 800f0c4:	6878      	ldr	r0, [r7, #4]
 800f0c6:	f000 fc2d 	bl	800f924 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>
 800f0ca:	687c      	ldr	r4, [r7, #4]
 800f0cc:	6838      	ldr	r0, [r7, #0]
 800f0ce:	f000 fc1e 	bl	800f90e <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE16nestedExpressionEv>
 800f0d2:	4603      	mov	r3, r0
 800f0d4:	4619      	mov	r1, r3
 800f0d6:	4620      	mov	r0, r4
 800f0d8:	f000 fc2f 	bl	800f93a <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1ERS7_>
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	4618      	mov	r0, r3
 800f0e0:	370c      	adds	r7, #12
 800f0e2:	46bd      	mov	sp, r7
 800f0e4:	bd90      	pop	{r4, r7, pc}

0800f0e6 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EEC1ERKNS_5BlockIS4_Li3ELi1ELb1EEE>:
{
  typedef Block<ArgType, BlockRows, BlockCols, InnerPanel> XprType;
  typedef typename XprType::Scalar Scalar;

  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  explicit block_evaluator(const XprType& block)
 800f0e6:	b580      	push	{r7, lr}
 800f0e8:	b082      	sub	sp, #8
 800f0ea:	af00      	add	r7, sp, #0
 800f0ec:	6078      	str	r0, [r7, #4]
 800f0ee:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	6839      	ldr	r1, [r7, #0]
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	f000 fc2f 	bl	800f958 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_EC1ERKS6_>
  {
    // TODO: for the 3.3 release, this should be turned to an internal assertion, but let's keep it as is for the beta lifetime
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 800f0fa:	683b      	ldr	r3, [r7, #0]
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	f000 fc55 	bl	800f9ac <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4dataEv>
 800f102:	bf00      	nop
  }
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	4618      	mov	r0, r3
 800f108:	3708      	adds	r7, #8
 800f10a:	46bd      	mov	sp, r7
 800f10c:	bd80      	pop	{r7, pc}

0800f10e <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800f10e:	b5b0      	push	{r4, r5, r7, lr}
 800f110:	b084      	sub	sp, #16
 800f112:	af00      	add	r7, sp, #0
 800f114:	60f8      	str	r0, [r7, #12]
 800f116:	60b9      	str	r1, [r7, #8]
 800f118:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	681c      	ldr	r4, [r3, #0]
 800f11e:	68f8      	ldr	r0, [r7, #12]
 800f120:	f000 fc50 	bl	800f9c4 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEE9colStrideEv>
 800f124:	4602      	mov	r2, r0
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	fb03 f502 	mul.w	r5, r3, r2
 800f12c:	68f8      	ldr	r0, [r7, #12]
 800f12e:	f000 fc54 	bl	800f9da <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEE9rowStrideEv>
 800f132:	4602      	mov	r2, r0
 800f134:	68bb      	ldr	r3, [r7, #8]
 800f136:	fb02 f303 	mul.w	r3, r2, r3
 800f13a:	442b      	add	r3, r5
 800f13c:	009b      	lsls	r3, r3, #2
 800f13e:	4423      	add	r3, r4
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	ee07 3a90 	vmov	s15, r3
  }
 800f146:	eeb0 0a67 	vmov.f32	s0, s15
 800f14a:	3710      	adds	r7, #16
 800f14c:	46bd      	mov	sp, r7
 800f14e:	bdb0      	pop	{r4, r5, r7, pc}

0800f150 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_E9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 800f150:	b580      	push	{r7, lr}
 800f152:	b082      	sub	sp, #8
 800f154:	af00      	add	r7, sp, #0
 800f156:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 800f158:	f7f6 fe41 	bl	8005dde <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 800f15c:	4603      	mov	r3, r0
  }
 800f15e:	4618      	mov	r0, r3
 800f160:	3708      	adds	r7, #8
 800f162:	46bd      	mov	sp, r7
 800f164:	bd80      	pop	{r7, pc}

0800f166 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_E9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 800f166:	b580      	push	{r7, lr}
 800f168:	b082      	sub	sp, #8
 800f16a:	af00      	add	r7, sp, #0
 800f16c:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 800f16e:	f7f6 fe3e 	bl	8005dee <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800f172:	4603      	mov	r3, r0
  }
 800f174:	4618      	mov	r0, r3
 800f176:	3708      	adds	r7, #8
 800f178:	46bd      	mov	sp, r7
 800f17a:	bd80      	pop	{r7, pc}

0800f17c <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE11lazyProductIS2_EEKNS_7ProductIS2_T_Li1EEERKNS0_IS6_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 800f17c:	b590      	push	{r4, r7, lr}
 800f17e:	b085      	sub	sp, #20
 800f180:	af00      	add	r7, sp, #0
 800f182:	60f8      	str	r0, [r7, #12]
 800f184:	60b9      	str	r1, [r7, #8]
 800f186:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 800f188:	68b8      	ldr	r0, [r7, #8]
 800f18a:	f7f5 fc68 	bl	8004a5e <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800f18e:	4604      	mov	r4, r0
 800f190:	6878      	ldr	r0, [r7, #4]
 800f192:	f7f5 fc64 	bl	8004a5e <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800f196:	4603      	mov	r3, r0
 800f198:	461a      	mov	r2, r3
 800f19a:	4621      	mov	r1, r4
 800f19c:	68f8      	ldr	r0, [r7, #12]
 800f19e:	f000 fc4b 	bl	800fa38 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EEC1ERKS2_S5_>
}
 800f1a2:	68f8      	ldr	r0, [r7, #12]
 800f1a4:	3714      	adds	r7, #20
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	bd90      	pop	{r4, r7, pc}

0800f1aa <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800f1aa:	b580      	push	{r7, lr}
 800f1ac:	b086      	sub	sp, #24
 800f1ae:	af00      	add	r7, sp, #0
 800f1b0:	60f8      	str	r0, [r7, #12]
 800f1b2:	60b9      	str	r1, [r7, #8]
 800f1b4:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800f1ba:	687a      	ldr	r2, [r7, #4]
 800f1bc:	68b9      	ldr	r1, [r7, #8]
 800f1be:	6978      	ldr	r0, [r7, #20]
 800f1c0:	f000 fc68 	bl	800fa94 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_>
}
 800f1c4:	bf00      	nop
 800f1c6:	3718      	adds	r7, #24
 800f1c8:	46bd      	mov	sp, r7
 800f1ca:	bd80      	pop	{r7, pc}

0800f1cc <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EEC1ERS6_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 800f1cc:	b5b0      	push	{r4, r5, r7, lr}
 800f1ce:	b084      	sub	sp, #16
 800f1d0:	af00      	add	r7, sp, #0
 800f1d2:	60f8      	str	r0, [r7, #12]
 800f1d4:	60b9      	str	r1, [r7, #8]
 800f1d6:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800f1d8:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800f1da:	68b8      	ldr	r0, [r7, #8]
 800f1dc:	f000 fc6d 	bl	800faba <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE4dataEv>
 800f1e0:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 800f1e2:	68b8      	ldr	r0, [r7, #8]
 800f1e4:	f000 fc7d 	bl	800fae2 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE11innerStrideEv>
 800f1e8:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	fb02 f303 	mul.w	r3, r2, r3
 800f1f0:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800f1f2:	441d      	add	r5, r3
 800f1f4:	68b8      	ldr	r0, [r7, #8]
 800f1f6:	f7f5 fd76 	bl	8004ce6 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800f1fa:	4602      	mov	r2, r0
 800f1fc:	2301      	movs	r3, #1
 800f1fe:	4629      	mov	r1, r5
 800f200:	4620      	mov	r0, r4
 800f202:	f000 fca3 	bl	800fb4c <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii>
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	3308      	adds	r3, #8
 800f20a:	68ba      	ldr	r2, [r7, #8]
 800f20c:	6812      	ldr	r2, [r2, #0]
 800f20e:	601a      	str	r2, [r3, #0]
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	330c      	adds	r3, #12
 800f214:	2100      	movs	r1, #0
 800f216:	4618      	mov	r0, r3
 800f218:	f7fd fe30 	bl	800ce7c <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	3310      	adds	r3, #16
 800f220:	6879      	ldr	r1, [r7, #4]
 800f222:	4618      	mov	r0, r3
 800f224:	f7fd fe2a 	bl	800ce7c <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
      init();
 800f228:	68f8      	ldr	r0, [r7, #12]
 800f22a:	f000 fccd 	bl	800fbc8 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EE4initEv>
    }
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	4618      	mov	r0, r3
 800f232:	3710      	adds	r7, #16
 800f234:	46bd      	mov	sp, r7
 800f236:	bdb0      	pop	{r4, r5, r7, pc}

0800f238 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1ERKSI_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800f238:	b580      	push	{r7, lr}
 800f23a:	b082      	sub	sp, #8
 800f23c:	af00      	add	r7, sp, #0
 800f23e:	6078      	str	r0, [r7, #4]
 800f240:	6039      	str	r1, [r7, #0]
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	6839      	ldr	r1, [r7, #0]
 800f246:	4618      	mov	r0, r3
 800f248:	f000 fcce 	bl	800fbe8 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	4618      	mov	r0, r3
 800f250:	3708      	adds	r7, #8
 800f252:	46bd      	mov	sp, r7
 800f254:	bd80      	pop	{r7, pc}

0800f256 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi0ELi3EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 800f256:	b580      	push	{r7, lr}
 800f258:	b084      	sub	sp, #16
 800f25a:	af00      	add	r7, sp, #0
 800f25c:	6078      	str	r0, [r7, #4]
 800f25e:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800f260:	6839      	ldr	r1, [r7, #0]
 800f262:	6878      	ldr	r0, [r7, #4]
 800f264:	f000 fcd2 	bl	800fc0c <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi0ELi1EE3runERKSM_RKS3_>
 800f268:	eef0 7a40 	vmov.f32	s15, s0
 800f26c:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 800f270:	6839      	ldr	r1, [r7, #0]
 800f272:	6878      	ldr	r0, [r7, #4]
 800f274:	f000 fcdb 	bl	800fc2e <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi1ELi2EE3runERKSM_RKS3_>
 800f278:	eef0 7a40 	vmov.f32	s15, s0
 800f27c:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800f280:	f107 020c 	add.w	r2, r7, #12
 800f284:	f107 0308 	add.w	r3, r7, #8
 800f288:	4619      	mov	r1, r3
 800f28a:	6838      	ldr	r0, [r7, #0]
 800f28c:	f7f9 f96d 	bl	800856a <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 800f290:	eef0 7a40 	vmov.f32	s15, s0
  }
 800f294:	eeb0 0a67 	vmov.f32	s0, s15
 800f298:	3710      	adds	r7, #16
 800f29a:	46bd      	mov	sp, r7
 800f29c:	bd80      	pop	{r7, pc}

0800f29e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800f29e:	b580      	push	{r7, lr}
 800f2a0:	b082      	sub	sp, #8
 800f2a2:	af00      	add	r7, sp, #0
 800f2a4:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800f2a6:	2201      	movs	r2, #1
 800f2a8:	2102      	movs	r1, #2
 800f2aa:	6878      	ldr	r0, [r7, #4]
 800f2ac:	f7fc fdaf 	bl	800be0e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800f2b0:	6878      	ldr	r0, [r7, #4]
 800f2b2:	f000 fce0 	bl	800fc76 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSG_>
  }
 800f2b6:	bf00      	nop
 800f2b8:	3708      	adds	r7, #8
 800f2ba:	46bd      	mov	sp, r7
 800f2bc:	bd80      	pop	{r7, pc}

0800f2be <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEELi3ENS_10DenseShapeES9_ffEC1ERKS8_>:
  explicit product_evaluator(const XprType& xpr)
 800f2be:	b580      	push	{r7, lr}
 800f2c0:	b082      	sub	sp, #8
 800f2c2:	af00      	add	r7, sp, #0
 800f2c4:	6078      	str	r0, [r7, #4]
 800f2c6:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 800f2c8:	6878      	ldr	r0, [r7, #4]
 800f2ca:	f000 fcfc 	bl	800fcc6 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1Ev>
    : m_lhs(xpr.lhs()),
 800f2ce:	6838      	ldr	r0, [r7, #0]
 800f2d0:	f000 fce1 	bl	800fc96 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE3lhsEv>
 800f2d4:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	601a      	str	r2, [r3, #0]
      m_rhs(xpr.rhs()),
 800f2da:	6838      	ldr	r0, [r7, #0]
 800f2dc:	f000 fce7 	bl	800fcae <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE3rhsEv>
 800f2e0:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	3304      	adds	r3, #4
 800f2e6:	6812      	ldr	r2, [r2, #0]
 800f2e8:	601a      	str	r2, [r3, #0]
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	f103 0208 	add.w	r2, r3, #8
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	681b      	ldr	r3, [r3, #0]
      m_innerDim(xpr.lhs().cols())
 800f2f4:	4619      	mov	r1, r3
 800f2f6:	4610      	mov	r0, r2
 800f2f8:	f7f7 fc3e 	bl	8006b78 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	f103 020c 	add.w	r2, r3, #12
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	3304      	adds	r3, #4
      m_innerDim(xpr.lhs().cols())
 800f306:	4619      	mov	r1, r3
 800f308:	4610      	mov	r0, r2
 800f30a:	f000 fce7 	bl	800fcdc <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERKS5_>
 800f30e:	6838      	ldr	r0, [r7, #0]
 800f310:	f000 fcc1 	bl	800fc96 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE3lhsEv>
 800f314:	4603      	mov	r3, r0
 800f316:	4618      	mov	r0, r3
 800f318:	f7f4 ff8c 	bl	8004234 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800f31c:	4602      	mov	r2, r0
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	611a      	str	r2, [r3, #16]
  }
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	4618      	mov	r0, r3
 800f326:	3708      	adds	r7, #8
 800f328:	46bd      	mov	sp, r7
 800f32a:	bd80      	pop	{r7, pc}

0800f32c <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800f32c:	b580      	push	{r7, lr}
 800f32e:	b082      	sub	sp, #8
 800f330:	af00      	add	r7, sp, #0
 800f332:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800f334:	2100      	movs	r1, #0
 800f336:	6878      	ldr	r0, [r7, #4]
 800f338:	f000 fcdf 	bl	800fcfa <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800f33c:	6878      	ldr	r0, [r7, #4]
 800f33e:	f000 fcff 	bl	800fd40 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSG_>
  }
 800f342:	bf00      	nop
 800f344:	3708      	adds	r7, #8
 800f346:	46bd      	mov	sp, r7
 800f348:	bd80      	pop	{r7, pc}

0800f34a <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 800f34a:	b480      	push	{r7}
 800f34c:	b083      	sub	sp, #12
 800f34e:	af00      	add	r7, sp, #0
 800f350:	6078      	str	r0, [r7, #4]
 800f352:	6039      	str	r1, [r7, #0]
}
 800f354:	bf00      	nop
 800f356:	370c      	adds	r7, #12
 800f358:	46bd      	mov	sp, r7
 800f35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f35e:	4770      	bx	lr

0800f360 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEELi6ENS_10DenseShapeESA_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, Options>, ProductTag, LhsShape, RhsShape>
 800f360:	b580      	push	{r7, lr}
 800f362:	b082      	sub	sp, #8
 800f364:	af00      	add	r7, sp, #0
 800f366:	6078      	str	r0, [r7, #4]
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	4618      	mov	r0, r3
 800f36c:	f7f9 f944 	bl	80085f8 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	4618      	mov	r0, r3
 800f374:	3708      	adds	r7, #8
 800f376:	46bd      	mov	sp, r7
 800f378:	bd80      	pop	{r7, pc}

0800f37a <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 800f37a:	b580      	push	{r7, lr}
 800f37c:	b082      	sub	sp, #8
 800f37e:	af00      	add	r7, sp, #0
 800f380:	6078      	str	r0, [r7, #4]
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	4618      	mov	r0, r3
 800f386:	f7ff ffeb 	bl	800f360 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEELi6ENS_10DenseShapeESA_ffED1Ev>
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	4618      	mov	r0, r3
 800f38e:	3708      	adds	r7, #8
 800f390:	46bd      	mov	sp, r7
 800f392:	bd80      	pop	{r7, pc}

0800f394 <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEED1Ev>:
struct evaluator<const T>
 800f394:	b580      	push	{r7, lr}
 800f396:	b082      	sub	sp, #8
 800f398:	af00      	add	r7, sp, #0
 800f39a:	6078      	str	r0, [r7, #4]
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	4618      	mov	r0, r3
 800f3a0:	f7ff ffeb 	bl	800f37a <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEED1Ev>
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	4618      	mov	r0, r3
 800f3a8:	3708      	adds	r7, #8
 800f3aa:	46bd      	mov	sp, r7
 800f3ac:	bd80      	pop	{r7, pc}

0800f3ae <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>:
 800f3ae:	b580      	push	{r7, lr}
 800f3b0:	b082      	sub	sp, #8
 800f3b2:	af00      	add	r7, sp, #0
 800f3b4:	6078      	str	r0, [r7, #4]
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	4618      	mov	r0, r3
 800f3ba:	f7f9 f91d 	bl	80085f8 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	4618      	mov	r0, r3
 800f3c2:	3708      	adds	r7, #8
 800f3c4:	46bd      	mov	sp, r7
 800f3c6:	bd80      	pop	{r7, pc}

0800f3c8 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE4DataD1Ev>:
  struct Data
 800f3c8:	b580      	push	{r7, lr}
 800f3ca:	b082      	sub	sp, #8
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	6078      	str	r0, [r7, #4]
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	330c      	adds	r3, #12
 800f3d4:	4618      	mov	r0, r3
 800f3d6:	f7ff ffea 	bl	800f3ae <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	3304      	adds	r3, #4
 800f3de:	4618      	mov	r0, r3
 800f3e0:	f7ff ffd8 	bl	800f394 <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEED1Ev>
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	4618      	mov	r0, r3
 800f3e8:	3708      	adds	r7, #8
 800f3ea:	46bd      	mov	sp, r7
 800f3ec:	bd80      	pop	{r7, pc}

0800f3ee <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 800f3ee:	b580      	push	{r7, lr}
 800f3f0:	b082      	sub	sp, #8
 800f3f2:	af00      	add	r7, sp, #0
 800f3f4:	6078      	str	r0, [r7, #4]
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	4618      	mov	r0, r3
 800f3fa:	f7ff ffe5 	bl	800f3c8 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE4DataD1Ev>
 800f3fe:	6878      	ldr	r0, [r7, #4]
 800f400:	f000 fcbc 	bl	800fd7c <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEED1Ev>
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	4618      	mov	r0, r3
 800f408:	3708      	adds	r7, #8
 800f40a:	46bd      	mov	sp, r7
 800f40c:	bd80      	pop	{r7, pc}

0800f40e <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 800f40e:	b580      	push	{r7, lr}
 800f410:	b082      	sub	sp, #8
 800f412:	af00      	add	r7, sp, #0
 800f414:	6078      	str	r0, [r7, #4]
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	4618      	mov	r0, r3
 800f41a:	f7ff ffe8 	bl	800f3ee <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffED1Ev>
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	4618      	mov	r0, r3
 800f422:	3708      	adds	r7, #8
 800f424:	46bd      	mov	sp, r7
 800f426:	bd80      	pop	{r7, pc}

0800f428 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 800f428:	b580      	push	{r7, lr}
 800f42a:	b090      	sub	sp, #64	; 0x40
 800f42c:	af02      	add	r7, sp, #8
 800f42e:	60f8      	str	r0, [r7, #12]
 800f430:	60b9      	str	r1, [r7, #8]
 800f432:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 800f434:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f438:	68b9      	ldr	r1, [r7, #8]
 800f43a:	4618      	mov	r0, r3
 800f43c:	f000 fc8f 	bl	800fd5e <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKSG_>
  resize_if_allowed(dst, src, func);
 800f440:	687a      	ldr	r2, [r7, #4]
 800f442:	68b9      	ldr	r1, [r7, #8]
 800f444:	68f8      	ldr	r0, [r7, #12]
 800f446:	f000 fca5 	bl	800fd94 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 800f44a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f44e:	68f9      	ldr	r1, [r7, #12]
 800f450:	4618      	mov	r0, r3
 800f452:	f7fa f9ea 	bl	800982a <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 800f456:	68f8      	ldr	r0, [r7, #12]
 800f458:	f000 f8aa 	bl	800f5b0 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE18const_cast_derivedEv>
 800f45c:	4603      	mov	r3, r0
 800f45e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800f462:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800f466:	f107 0014 	add.w	r0, r7, #20
 800f46a:	9300      	str	r3, [sp, #0]
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	f000 fcdb 	bl	800fe28 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_INS3_IfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EEC1ERS5_RKSJ_RKSL_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 800f472:	f107 0314 	add.w	r3, r7, #20
 800f476:	4618      	mov	r0, r3
 800f478:	f000 fcf0 	bl	800fe5c <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_INS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSN_>
  DstEvaluatorType dstEvaluator(dst);
 800f47c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f480:	4618      	mov	r0, r3
 800f482:	f7f9 f8b9 	bl	80085f8 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 800f486:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f48a:	4618      	mov	r0, r3
 800f48c:	f7ff ffbf 	bl	800f40e <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEED1Ev>
}
 800f490:	bf00      	nop
 800f492:	3738      	adds	r7, #56	; 0x38
 800f494:	46bd      	mov	sp, r7
 800f496:	bd80      	pop	{r7, pc}

0800f498 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEENS0_10IndexBasedEfEC1ERKS9_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 800f498:	b590      	push	{r4, r7, lr}
 800f49a:	b083      	sub	sp, #12
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	6078      	str	r0, [r7, #4]
 800f4a0:	6039      	str	r1, [r7, #0]
 800f4a2:	6878      	ldr	r0, [r7, #4]
 800f4a4:	f000 fcf0 	bl	800fe88 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1Ev>
 800f4a8:	687c      	ldr	r4, [r7, #4]
 800f4aa:	6838      	ldr	r0, [r7, #0]
 800f4ac:	f000 fce1 	bl	800fe72 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE16nestedExpressionEv>
 800f4b0:	4603      	mov	r3, r0
 800f4b2:	4619      	mov	r1, r3
 800f4b4:	4620      	mov	r0, r4
 800f4b6:	f000 fcf2 	bl	800fe9e <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1ERS7_>
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	4618      	mov	r0, r3
 800f4be:	370c      	adds	r7, #12
 800f4c0:	46bd      	mov	sp, r7
 800f4c2:	bd90      	pop	{r4, r7, pc}

0800f4c4 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EEC1ERKNS_5BlockIS4_Li1ELi1ELb1EEE>:
  explicit block_evaluator(const XprType& block)
 800f4c4:	b580      	push	{r7, lr}
 800f4c6:	b082      	sub	sp, #8
 800f4c8:	af00      	add	r7, sp, #0
 800f4ca:	6078      	str	r0, [r7, #4]
 800f4cc:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	6839      	ldr	r1, [r7, #0]
 800f4d2:	4618      	mov	r0, r3
 800f4d4:	f000 fcf2 	bl	800febc <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_EC1ERKS6_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 800f4d8:	683b      	ldr	r3, [r7, #0]
 800f4da:	4618      	mov	r0, r3
 800f4dc:	f000 fd18 	bl	800ff10 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE4dataEv>
 800f4e0:	bf00      	nop
  }
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	4618      	mov	r0, r3
 800f4e6:	3708      	adds	r7, #8
 800f4e8:	46bd      	mov	sp, r7
 800f4ea:	bd80      	pop	{r7, pc}

0800f4ec <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 800f4ec:	b580      	push	{r7, lr}
 800f4ee:	b082      	sub	sp, #8
 800f4f0:	af00      	add	r7, sp, #0
 800f4f2:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 800f4f4:	f7f6 fc73 	bl	8005dde <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 800f4f8:	4603      	mov	r3, r0
  }
 800f4fa:	4618      	mov	r0, r3
 800f4fc:	3708      	adds	r7, #8
 800f4fe:	46bd      	mov	sp, r7
 800f500:	bd80      	pop	{r7, pc}

0800f502 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 800f502:	b580      	push	{r7, lr}
 800f504:	b082      	sub	sp, #8
 800f506:	af00      	add	r7, sp, #0
 800f508:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 800f50a:	f7f6 fc70 	bl	8005dee <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800f50e:	4603      	mov	r3, r0
  }
 800f510:	4618      	mov	r0, r3
 800f512:	3708      	adds	r7, #8
 800f514:	46bd      	mov	sp, r7
 800f516:	bd80      	pop	{r7, pc}

0800f518 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 800f518:	b580      	push	{r7, lr}
 800f51a:	b086      	sub	sp, #24
 800f51c:	af00      	add	r7, sp, #0
 800f51e:	60f8      	str	r0, [r7, #12]
 800f520:	60b9      	str	r1, [r7, #8]
 800f522:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 800f524:	68bb      	ldr	r3, [r7, #8]
 800f526:	4618      	mov	r0, r3
 800f528:	f7f5 fe7f 	bl	800522a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800f52c:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 800f52e:	68bb      	ldr	r3, [r7, #8]
 800f530:	4618      	mov	r0, r3
 800f532:	f7f5 fe85 	bl	8005240 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800f536:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	4618      	mov	r0, r3
 800f53c:	f7f5 fe75 	bl	800522a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800f540:	4602      	mov	r2, r0
 800f542:	697b      	ldr	r3, [r7, #20]
 800f544:	4293      	cmp	r3, r2
 800f546:	d107      	bne.n	800f558 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	4618      	mov	r0, r3
 800f54c:	f7f5 fe78 	bl	8005240 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800f550:	4602      	mov	r2, r0
 800f552:	693b      	ldr	r3, [r7, #16]
 800f554:	4293      	cmp	r3, r2
 800f556:	d001      	beq.n	800f55c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x44>
 800f558:	2301      	movs	r3, #1
 800f55a:	e000      	b.n	800f55e <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x46>
 800f55c:	2300      	movs	r3, #0
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d005      	beq.n	800f56e <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x56>
    dst.resize(dstRows, dstCols);
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	693a      	ldr	r2, [r7, #16]
 800f566:	6979      	ldr	r1, [r7, #20]
 800f568:	4618      	mov	r0, r3
 800f56a:	f7fd f9af 	bl	800c8cc <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	4618      	mov	r0, r3
 800f572:	f7f5 fe5a 	bl	800522a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800f576:	4602      	mov	r2, r0
 800f578:	697b      	ldr	r3, [r7, #20]
 800f57a:	4293      	cmp	r3, r2
 800f57c:	d107      	bne.n	800f58e <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x76>
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	4618      	mov	r0, r3
 800f582:	f7f5 fe5d 	bl	8005240 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800f586:	4602      	mov	r2, r0
 800f588:	693b      	ldr	r3, [r7, #16]
 800f58a:	4293      	cmp	r3, r2
 800f58c:	d006      	beq.n	800f59c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x84>
 800f58e:	4b05      	ldr	r3, [pc, #20]	; (800f5a4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 800f590:	4a05      	ldr	r2, [pc, #20]	; (800f5a8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 800f592:	f240 21fd 	movw	r1, #765	; 0x2fd
 800f596:	4805      	ldr	r0, [pc, #20]	; (800f5ac <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x94>)
 800f598:	f00d fd4c 	bl	801d034 <__assert_func>
}
 800f59c:	bf00      	nop
 800f59e:	3718      	adds	r7, #24
 800f5a0:	46bd      	mov	sp, r7
 800f5a2:	bd80      	pop	{r7, pc}
 800f5a4:	08021514 	.word	0x08021514
 800f5a8:	08026d24 	.word	0x08026d24
 800f5ac:	08021628 	.word	0x08021628

0800f5b0 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE18const_cast_derivedEv>:
  inline Derived& const_cast_derived() const
 800f5b0:	b480      	push	{r7}
 800f5b2:	b083      	sub	sp, #12
 800f5b4:	af00      	add	r7, sp, #0
 800f5b6:	6078      	str	r0, [r7, #4]
  { return *static_cast<Derived*>(const_cast<EigenBase*>(this)); }
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	4618      	mov	r0, r3
 800f5bc:	370c      	adds	r7, #12
 800f5be:	46bd      	mov	sp, r7
 800f5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c4:	4770      	bx	lr

0800f5c6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES5_NS0_9assign_opIffEELi0EEC1ERS5_RKS5_RKS7_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 800f5c6:	b480      	push	{r7}
 800f5c8:	b085      	sub	sp, #20
 800f5ca:	af00      	add	r7, sp, #0
 800f5cc:	60f8      	str	r0, [r7, #12]
 800f5ce:	60b9      	str	r1, [r7, #8]
 800f5d0:	607a      	str	r2, [r7, #4]
 800f5d2:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	68ba      	ldr	r2, [r7, #8]
 800f5d8:	601a      	str	r2, [r3, #0]
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	687a      	ldr	r2, [r7, #4]
 800f5de:	605a      	str	r2, [r3, #4]
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	683a      	ldr	r2, [r7, #0]
 800f5e4:	609a      	str	r2, [r3, #8]
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	69ba      	ldr	r2, [r7, #24]
 800f5ea:	60da      	str	r2, [r3, #12]
  }
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	3714      	adds	r7, #20
 800f5f2:	46bd      	mov	sp, r7
 800f5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f8:	4770      	bx	lr

0800f5fa <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi2EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800f5fa:	b580      	push	{r7, lr}
 800f5fc:	b082      	sub	sp, #8
 800f5fe:	af00      	add	r7, sp, #0
 800f600:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 800f602:	6878      	ldr	r0, [r7, #4]
 800f604:	f000 fc90 	bl	800ff28 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi0ELi1EE3runERS9_>
  }
 800f608:	bf00      	nop
 800f60a:	3708      	adds	r7, #8
 800f60c:	46bd      	mov	sp, r7
 800f60e:	bd80      	pop	{r7, pc}

0800f610 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE9transposeEv>:
DenseBase<Derived>::transpose() const
 800f610:	b580      	push	{r7, lr}
 800f612:	b084      	sub	sp, #16
 800f614:	af00      	add	r7, sp, #0
 800f616:	6078      	str	r0, [r7, #4]
  return ConstTransposeReturnType(derived());
 800f618:	6878      	ldr	r0, [r7, #4]
 800f61a:	f7f5 fcf1 	bl	8005000 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 800f61e:	4602      	mov	r2, r0
 800f620:	f107 030c 	add.w	r3, r7, #12
 800f624:	4611      	mov	r1, r2
 800f626:	4618      	mov	r0, r3
 800f628:	f000 fca5 	bl	800ff76 <_ZN5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS3_>
 800f62c:	68fb      	ldr	r3, [r7, #12]
}
 800f62e:	4618      	mov	r0, r3
 800f630:	3710      	adds	r7, #16
 800f632:	46bd      	mov	sp, r7
 800f634:	bd80      	pop	{r7, pc}

0800f636 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE12cwiseProductINS2_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSA_6traitsIT_E6ScalarEEEKS5_KSD_EERKNS0_ISD_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 800f636:	b5b0      	push	{r4, r5, r7, lr}
 800f638:	b086      	sub	sp, #24
 800f63a:	af00      	add	r7, sp, #0
 800f63c:	60f8      	str	r0, [r7, #12]
 800f63e:	60b9      	str	r1, [r7, #8]
 800f640:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 800f642:	68b8      	ldr	r0, [r7, #8]
 800f644:	f000 fca7 	bl	800ff96 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 800f648:	4604      	mov	r4, r0
 800f64a:	6878      	ldr	r0, [r7, #4]
 800f64c:	f7f5 f83f 	bl	80046ce <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800f650:	4605      	mov	r5, r0
 800f652:	f107 0314 	add.w	r3, r7, #20
 800f656:	4618      	mov	r0, r3
 800f658:	f7f5 f898 	bl	800478c <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 800f65c:	f107 0314 	add.w	r3, r7, #20
 800f660:	462a      	mov	r2, r5
 800f662:	4621      	mov	r1, r4
 800f664:	68f8      	ldr	r0, [r7, #12]
 800f666:	f000 fcd5 	bl	8010014 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERS9_RSB_RKS3_>
}
 800f66a:	68f8      	ldr	r0, [r7, #12]
 800f66c:	3718      	adds	r7, #24
 800f66e:	46bd      	mov	sp, r7
 800f670:	bdb0      	pop	{r4, r5, r7, pc}

0800f672 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 800f672:	b580      	push	{r7, lr}
 800f674:	b082      	sub	sp, #8
 800f676:	af00      	add	r7, sp, #0
 800f678:	6078      	str	r0, [r7, #4]
 800f67a:	6878      	ldr	r0, [r7, #4]
 800f67c:	f000 fd18 	bl	80100b0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 800f680:	4603      	mov	r3, r0
 800f682:	4618      	mov	r0, r3
 800f684:	f000 fd1f 	bl	80100c6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800f688:	4603      	mov	r3, r0
 800f68a:	4618      	mov	r0, r3
 800f68c:	3708      	adds	r7, #8
 800f68e:	46bd      	mov	sp, r7
 800f690:	bd80      	pop	{r7, pc}

0800f692 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 800f692:	b590      	push	{r4, r7, lr}
 800f694:	b085      	sub	sp, #20
 800f696:	af00      	add	r7, sp, #0
 800f698:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 800f69a:	6878      	ldr	r0, [r7, #4]
 800f69c:	f000 fd08 	bl	80100b0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 800f6a0:	4604      	mov	r4, r0
 800f6a2:	f107 030c 	add.w	r3, r7, #12
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	f7f5 fb67 	bl	8004d7a <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 800f6ac:	f107 030c 	add.w	r3, r7, #12
 800f6b0:	4619      	mov	r1, r3
 800f6b2:	4620      	mov	r0, r4
 800f6b4:	f000 fd88 	bl	80101c8 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 800f6b8:	eef0 7a40 	vmov.f32	s15, s0
 800f6bc:	bf00      	nop
}
 800f6be:	eeb0 0a67 	vmov.f32	s0, s15
 800f6c2:	3714      	adds	r7, #20
 800f6c4:	46bd      	mov	sp, r7
 800f6c6:	bd90      	pop	{r4, r7, pc}

0800f6c8 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800f6c8:	b480      	push	{r7}
 800f6ca:	b083      	sub	sp, #12
 800f6cc:	af00      	add	r7, sp, #0
 800f6ce:	6078      	str	r0, [r7, #4]
    }
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	4618      	mov	r0, r3
 800f6d4:	370c      	adds	r7, #12
 800f6d6:	46bd      	mov	sp, r7
 800f6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6dc:	4770      	bx	lr

0800f6de <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 800f6de:	b580      	push	{r7, lr}
 800f6e0:	b082      	sub	sp, #8
 800f6e2:	af00      	add	r7, sp, #0
 800f6e4:	6078      	str	r0, [r7, #4]
 800f6e6:	6039      	str	r1, [r7, #0]
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	f7f4 fdad 	bl	800424a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800f6f0:	4603      	mov	r3, r0
 800f6f2:	2b01      	cmp	r3, #1
 800f6f4:	dd08      	ble.n	800f708 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEEvRKT_RKT0_+0x2a>
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	f7f4 fd9b 	bl	8004234 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800f6fe:	4603      	mov	r3, r0
 800f700:	2b01      	cmp	r3, #1
 800f702:	dd01      	ble.n	800f708 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEEvRKT_RKT0_+0x2a>
 800f704:	2301      	movs	r3, #1
 800f706:	e000      	b.n	800f70a <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEEvRKT_RKT0_+0x2c>
 800f708:	2300      	movs	r3, #0
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d003      	beq.n	800f716 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEEvRKT_RKT0_+0x38>
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
 800f70e:	6839      	ldr	r1, [r7, #0]
 800f710:	6878      	ldr	r0, [r7, #4]
 800f712:	f000 fd9f 	bl	8010254 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELb0EE3runERKS3_RKS7_>
}
 800f716:	bf00      	nop
 800f718:	3708      	adds	r7, #8
 800f71a:	46bd      	mov	sp, r7
 800f71c:	bd80      	pop	{r7, pc}

0800f71e <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELi4ENS_10DenseShapeES7_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 800f71e:	b580      	push	{r7, lr}
 800f720:	b082      	sub	sp, #8
 800f722:	af00      	add	r7, sp, #0
 800f724:	6078      	str	r0, [r7, #4]
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	330c      	adds	r3, #12
 800f72a:	4618      	mov	r0, r3
 800f72c:	f7fe fe48 	bl	800e3c0 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	3308      	adds	r3, #8
 800f734:	4618      	mov	r0, r3
 800f736:	f7f4 ff9a 	bl	800466e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 800f73a:	6878      	ldr	r0, [r7, #4]
 800f73c:	f000 fda4 	bl	8010288 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEED1Ev>
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	4618      	mov	r0, r3
 800f744:	3708      	adds	r7, #8
 800f746:	46bd      	mov	sp, r7
 800f748:	bd80      	pop	{r7, pc}

0800f74a <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 800f74a:	b580      	push	{r7, lr}
 800f74c:	b082      	sub	sp, #8
 800f74e:	af00      	add	r7, sp, #0
 800f750:	6078      	str	r0, [r7, #4]
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	4618      	mov	r0, r3
 800f756:	f7ff ffe2 	bl	800f71e <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELi4ENS_10DenseShapeES7_ffED1Ev>
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	4618      	mov	r0, r3
 800f75e:	3708      	adds	r7, #8
 800f760:	46bd      	mov	sp, r7
 800f762:	bd80      	pop	{r7, pc}

0800f764 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 800f764:	b580      	push	{r7, lr}
 800f766:	b090      	sub	sp, #64	; 0x40
 800f768:	af02      	add	r7, sp, #8
 800f76a:	60f8      	str	r0, [r7, #12]
 800f76c:	60b9      	str	r1, [r7, #8]
 800f76e:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 800f770:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f774:	68b9      	ldr	r1, [r7, #8]
 800f776:	4618      	mov	r0, r3
 800f778:	f000 fd77 	bl	801026a <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1ERKS6_>
  resize_if_allowed(dst, src, func);
 800f77c:	687a      	ldr	r2, [r7, #4]
 800f77e:	68b9      	ldr	r1, [r7, #8]
 800f780:	68f8      	ldr	r0, [r7, #12]
 800f782:	f000 fda9 	bl	80102d8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>
  DstEvaluatorType dstEvaluator(dst);
 800f786:	f107 0320 	add.w	r3, r7, #32
 800f78a:	68f9      	ldr	r1, [r7, #12]
 800f78c:	4618      	mov	r0, r3
 800f78e:	f7f7 f9f3 	bl	8006b78 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 800f792:	68f8      	ldr	r0, [r7, #12]
 800f794:	f7f7 fa58 	bl	8006c48 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE18const_cast_derivedEv>
 800f798:	4603      	mov	r3, r0
 800f79a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800f79e:	f107 0120 	add.w	r1, r7, #32
 800f7a2:	f107 0010 	add.w	r0, r7, #16
 800f7a6:	9300      	str	r3, [sp, #0]
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	f000 fdc3 	bl	8010334 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEC1ERS5_RKSA_RKSC_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 800f7ae:	f107 0310 	add.w	r3, r7, #16
 800f7b2:	4618      	mov	r0, r3
 800f7b4:	f000 fdd8 	bl	8010368 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi0ELi2EE3runERSE_>
  DstEvaluatorType dstEvaluator(dst);
 800f7b8:	f107 0320 	add.w	r3, r7, #32
 800f7bc:	4618      	mov	r0, r3
 800f7be:	f7f6 ffcc 	bl	800675a <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 800f7c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f7c6:	4618      	mov	r0, r3
 800f7c8:	f7ff ffbf 	bl	800f74a <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEED1Ev>
}
 800f7cc:	bf00      	nop
 800f7ce:	3738      	adds	r7, #56	; 0x38
 800f7d0:	46bd      	mov	sp, r7
 800f7d2:	bd80      	pop	{r7, pc}

0800f7d4 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 800f7d4:	b580      	push	{r7, lr}
 800f7d6:	b082      	sub	sp, #8
 800f7d8:	af00      	add	r7, sp, #0
 800f7da:	6078      	str	r0, [r7, #4]
 800f7dc:	6039      	str	r1, [r7, #0]
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	6839      	ldr	r1, [r7, #0]
 800f7e2:	4618      	mov	r0, r3
 800f7e4:	f000 fdcb 	bl	801037e <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EEC1ERKNS_5BlockIS4_Li3ELi1ELb1EEE>
  }
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	4618      	mov	r0, r3
 800f7ec:	3708      	adds	r7, #8
 800f7ee:	46bd      	mov	sp, r7
 800f7f0:	bd80      	pop	{r7, pc}

0800f7f2 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 800f7f2:	b480      	push	{r7}
 800f7f4:	b083      	sub	sp, #12
 800f7f6:	af00      	add	r7, sp, #0
 800f7f8:	6078      	str	r0, [r7, #4]
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	4618      	mov	r0, r3
 800f7fe:	370c      	adds	r7, #12
 800f800:	46bd      	mov	sp, r7
 800f802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f806:	4770      	bx	lr

0800f808 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800f808:	b5b0      	push	{r4, r5, r7, lr}
 800f80a:	b084      	sub	sp, #16
 800f80c:	af00      	add	r7, sp, #0
 800f80e:	60f8      	str	r0, [r7, #12]
 800f810:	60b9      	str	r1, [r7, #8]
 800f812:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	681c      	ldr	r4, [r3, #0]
 800f818:	68f8      	ldr	r0, [r7, #12]
 800f81a:	f000 fdc4 	bl	80103a6 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEE9colStrideEv>
 800f81e:	4602      	mov	r2, r0
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	fb03 f502 	mul.w	r5, r3, r2
 800f826:	68f8      	ldr	r0, [r7, #12]
 800f828:	f000 fdc8 	bl	80103bc <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEE9rowStrideEv>
 800f82c:	4602      	mov	r2, r0
 800f82e:	68bb      	ldr	r3, [r7, #8]
 800f830:	fb02 f303 	mul.w	r3, r2, r3
 800f834:	442b      	add	r3, r5
 800f836:	009b      	lsls	r3, r3, #2
 800f838:	4423      	add	r3, r4
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	ee07 3a90 	vmov	s15, r3
  }
 800f840:	eeb0 0a67 	vmov.f32	s0, s15
 800f844:	3710      	adds	r7, #16
 800f846:	46bd      	mov	sp, r7
 800f848:	bdb0      	pop	{r4, r5, r7, pc}

0800f84a <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEENS0_10IndexBasedEfEC1ERKSJ_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 800f84a:	b590      	push	{r4, r7, lr}
 800f84c:	b083      	sub	sp, #12
 800f84e:	af00      	add	r7, sp, #0
 800f850:	6078      	str	r0, [r7, #4]
 800f852:	6039      	str	r1, [r7, #0]
 800f854:	6878      	ldr	r0, [r7, #4]
 800f856:	f000 fdc7 	bl	80103e8 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1Ev>
 800f85a:	687c      	ldr	r4, [r7, #4]
 800f85c:	6838      	ldr	r0, [r7, #0]
 800f85e:	f000 fdb8 	bl	80103d2 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE16nestedExpressionEv>
 800f862:	4603      	mov	r3, r0
 800f864:	4619      	mov	r1, r3
 800f866:	4620      	mov	r0, r4
 800f868:	f000 fdc9 	bl	80103fe <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERSH_>
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	4618      	mov	r0, r3
 800f870:	370c      	adds	r7, #12
 800f872:	46bd      	mov	sp, r7
 800f874:	bd90      	pop	{r4, r7, pc}

0800f876 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EEC1ERKNS_5BlockIS6_Li1ELi1ELb0EEE>:
  explicit block_evaluator(const XprType& block)
 800f876:	b580      	push	{r7, lr}
 800f878:	b082      	sub	sp, #8
 800f87a:	af00      	add	r7, sp, #0
 800f87c:	6078      	str	r0, [r7, #4]
 800f87e:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	6839      	ldr	r1, [r7, #0]
 800f884:	4618      	mov	r0, r3
 800f886:	f000 fdc9 	bl	801041c <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEEC1ERKS8_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 800f88a:	683b      	ldr	r3, [r7, #0]
 800f88c:	4618      	mov	r0, r3
 800f88e:	f000 fdef 	bl	8010470 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE4dataEv>
 800f892:	bf00      	nop
  }
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	4618      	mov	r0, r3
 800f898:	3708      	adds	r7, #8
 800f89a:	46bd      	mov	sp, r7
 800f89c:	bd80      	pop	{r7, pc}

0800f89e <_ZNK5Eigen8internal19variable_if_dynamicIiLin1EE5valueEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE T value() const { return m_value; }
 800f89e:	b480      	push	{r7}
 800f8a0:	b083      	sub	sp, #12
 800f8a2:	af00      	add	r7, sp, #0
 800f8a4:	6078      	str	r0, [r7, #4]
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	4618      	mov	r0, r3
 800f8ac:	370c      	adds	r7, #12
 800f8ae:	46bd      	mov	sp, r7
 800f8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8b4:	4770      	bx	lr

0800f8b6 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800f8b6:	b5b0      	push	{r4, r5, r7, lr}
 800f8b8:	b086      	sub	sp, #24
 800f8ba:	af00      	add	r7, sp, #0
 800f8bc:	60f8      	str	r0, [r7, #12]
 800f8be:	60b9      	str	r1, [r7, #8]
 800f8c0:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	4618      	mov	r0, r3
 800f8c6:	f000 fddf 	bl	8010488 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE4Data4funcEv>
 800f8ca:	4604      	mov	r4, r0
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	3304      	adds	r3, #4
 800f8d0:	687a      	ldr	r2, [r7, #4]
 800f8d2:	68b9      	ldr	r1, [r7, #8]
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	f000 fde2 	bl	801049e <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffEii>
 800f8da:	4605      	mov	r5, r0
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	3308      	adds	r3, #8
 800f8e0:	687a      	ldr	r2, [r7, #4]
 800f8e2:	68b9      	ldr	r1, [r7, #8]
 800f8e4:	4618      	mov	r0, r3
 800f8e6:	f000 fdf2 	bl	80104ce <_ZNK5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffIiEEfT_SB_>
 800f8ea:	eef0 7a40 	vmov.f32	s15, s0
 800f8ee:	edc7 7a05 	vstr	s15, [r7, #20]
 800f8f2:	f107 0314 	add.w	r3, r7, #20
 800f8f6:	461a      	mov	r2, r3
 800f8f8:	4629      	mov	r1, r5
 800f8fa:	4620      	mov	r0, r4
 800f8fc:	f7fe fe76 	bl	800e5ec <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 800f900:	eef0 7a40 	vmov.f32	s15, s0
  }
 800f904:	eeb0 0a67 	vmov.f32	s0, s15
 800f908:	3718      	adds	r7, #24
 800f90a:	46bd      	mov	sp, r7
 800f90c:	bdb0      	pop	{r4, r5, r7, pc}

0800f90e <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 800f90e:	b480      	push	{r7}
 800f910:	b083      	sub	sp, #12
 800f912:	af00      	add	r7, sp, #0
 800f914:	6078      	str	r0, [r7, #4]
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	4618      	mov	r0, r3
 800f91a:	370c      	adds	r7, #12
 800f91c:	46bd      	mov	sp, r7
 800f91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f922:	4770      	bx	lr

0800f924 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800f924:	b480      	push	{r7}
 800f926:	b083      	sub	sp, #12
 800f928:	af00      	add	r7, sp, #0
 800f92a:	6078      	str	r0, [r7, #4]
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	4618      	mov	r0, r3
 800f930:	370c      	adds	r7, #12
 800f932:	46bd      	mov	sp, r7
 800f934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f938:	4770      	bx	lr

0800f93a <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 800f93a:	b580      	push	{r7, lr}
 800f93c:	b082      	sub	sp, #8
 800f93e:	af00      	add	r7, sp, #0
 800f940:	6078      	str	r0, [r7, #4]
 800f942:	6039      	str	r1, [r7, #0]
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	6839      	ldr	r1, [r7, #0]
 800f948:	4618      	mov	r0, r3
 800f94a:	f000 fdd4 	bl	80104f6 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1ERKS6_>
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	4618      	mov	r0, r3
 800f952:	3708      	adds	r7, #8
 800f954:	46bd      	mov	sp, r7
 800f956:	bd80      	pop	{r7, pc}

0800f958 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_EC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 800f958:	b590      	push	{r4, r7, lr}
 800f95a:	b083      	sub	sp, #12
 800f95c:	af00      	add	r7, sp, #0
 800f95e:	6078      	str	r0, [r7, #4]
 800f960:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 800f962:	6878      	ldr	r0, [r7, #4]
 800f964:	f000 fdf2 	bl	801054c <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 800f968:	683b      	ldr	r3, [r7, #0]
 800f96a:	4618      	mov	r0, r3
 800f96c:	f000 f81e 	bl	800f9ac <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4dataEv>
 800f970:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	601a      	str	r2, [r3, #0]
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	1d1c      	adds	r4, r3, #4
 800f97a:	683b      	ldr	r3, [r7, #0]
 800f97c:	4618      	mov	r0, r3
 800f97e:	f000 fdc9 	bl	8010514 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EE11innerStrideEv>
 800f982:	4603      	mov	r3, r0
 800f984:	4619      	mov	r1, r3
 800f986:	4620      	mov	r0, r4
 800f988:	f7f6 fa04 	bl	8005d94 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	1d5c      	adds	r4, r3, #5
 800f990:	683b      	ldr	r3, [r7, #0]
 800f992:	4618      	mov	r0, r3
 800f994:	f000 fdcc 	bl	8010530 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EE11outerStrideEv>
 800f998:	4603      	mov	r3, r0
 800f99a:	4619      	mov	r1, r3
 800f99c:	4620      	mov	r0, r4
 800f99e:	f7f6 f9df 	bl	8005d60 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	4618      	mov	r0, r3
 800f9a6:	370c      	adds	r7, #12
 800f9a8:	46bd      	mov	sp, r7
 800f9aa:	bd90      	pop	{r4, r7, pc}

0800f9ac <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC inline const Scalar* data() const { return m_data; }
 800f9ac:	b480      	push	{r7}
 800f9ae:	b083      	sub	sp, #12
 800f9b0:	af00      	add	r7, sp, #0
 800f9b2:	6078      	str	r0, [r7, #4]
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	4618      	mov	r0, r3
 800f9ba:	370c      	adds	r7, #12
 800f9bc:	46bd      	mov	sp, r7
 800f9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9c2:	4770      	bx	lr

0800f9c4 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 800f9c4:	b580      	push	{r7, lr}
 800f9c6:	b082      	sub	sp, #8
 800f9c8:	af00      	add	r7, sp, #0
 800f9ca:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 800f9cc:	f7f6 fa07 	bl	8005dde <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 800f9d0:	4603      	mov	r3, r0
  }
 800f9d2:	4618      	mov	r0, r3
 800f9d4:	3708      	adds	r7, #8
 800f9d6:	46bd      	mov	sp, r7
 800f9d8:	bd80      	pop	{r7, pc}

0800f9da <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 800f9da:	b580      	push	{r7, lr}
 800f9dc:	b082      	sub	sp, #8
 800f9de:	af00      	add	r7, sp, #0
 800f9e0:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 800f9e2:	f7f6 fa04 	bl	8005dee <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800f9e6:	4603      	mov	r3, r0
  }
 800f9e8:	4618      	mov	r0, r3
 800f9ea:	3708      	adds	r7, #8
 800f9ec:	46bd      	mov	sp, r7
 800f9ee:	bd80      	pop	{r7, pc}

0800f9f0 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEEC1Ev>:
 800f9f0:	b580      	push	{r7, lr}
 800f9f2:	b082      	sub	sp, #8
 800f9f4:	af00      	add	r7, sp, #0
 800f9f6:	6078      	str	r0, [r7, #4]
 800f9f8:	6878      	ldr	r0, [r7, #4]
 800f9fa:	f000 fdb2 	bl	8010562 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEEC1Ev>
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	4618      	mov	r0, r3
 800fa02:	3708      	adds	r7, #8
 800fa04:	46bd      	mov	sp, r7
 800fa06:	bd80      	pop	{r7, pc}

0800fa08 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li1ELi3EEC1Ev>:
class dense_product_base
 800fa08:	b580      	push	{r7, lr}
 800fa0a:	b082      	sub	sp, #8
 800fa0c:	af00      	add	r7, sp, #0
 800fa0e:	6078      	str	r0, [r7, #4]
 800fa10:	6878      	ldr	r0, [r7, #4]
 800fa12:	f7ff ffed 	bl	800f9f0 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEEC1Ev>
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	4618      	mov	r0, r3
 800fa1a:	3708      	adds	r7, #8
 800fa1c:	46bd      	mov	sp, r7
 800fa1e:	bd80      	pop	{r7, pc}

0800fa20 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 800fa20:	b580      	push	{r7, lr}
 800fa22:	b082      	sub	sp, #8
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	6078      	str	r0, [r7, #4]
 800fa28:	6878      	ldr	r0, [r7, #4]
 800fa2a:	f7ff ffed 	bl	800fa08 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li1ELi3EEC1Ev>
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	4618      	mov	r0, r3
 800fa32:	3708      	adds	r7, #8
 800fa34:	46bd      	mov	sp, r7
 800fa36:	bd80      	pop	{r7, pc}

0800fa38 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EEC1ERKS2_S5_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 800fa38:	b590      	push	{r4, r7, lr}
 800fa3a:	b085      	sub	sp, #20
 800fa3c:	af00      	add	r7, sp, #0
 800fa3e:	60f8      	str	r0, [r7, #12]
 800fa40:	60b9      	str	r1, [r7, #8]
 800fa42:	607a      	str	r2, [r7, #4]
 800fa44:	68f8      	ldr	r0, [r7, #12]
 800fa46:	f7ff ffeb 	bl	800fa20 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1ENS_5DenseEEC1Ev>
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	68ba      	ldr	r2, [r7, #8]
 800fa4e:	601a      	str	r2, [r3, #0]
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	687a      	ldr	r2, [r7, #4]
 800fa54:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 800fa56:	68bb      	ldr	r3, [r7, #8]
 800fa58:	4618      	mov	r0, r3
 800fa5a:	f7f4 fbeb 	bl	8004234 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800fa5e:	4604      	mov	r4, r0
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	4618      	mov	r0, r3
 800fa64:	f7f4 fbf1 	bl	800424a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800fa68:	4603      	mov	r3, r0
 800fa6a:	429c      	cmp	r4, r3
 800fa6c:	d005      	beq.n	800fa7a <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EEC1ERKS2_S5_+0x42>
 800fa6e:	4b06      	ldr	r3, [pc, #24]	; (800fa88 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EEC1ERKS2_S5_+0x50>)
 800fa70:	4a06      	ldr	r2, [pc, #24]	; (800fa8c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EEC1ERKS2_S5_+0x54>)
 800fa72:	2160      	movs	r1, #96	; 0x60
 800fa74:	4806      	ldr	r0, [pc, #24]	; (800fa90 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EEC1ERKS2_S5_+0x58>)
 800fa76:	f00d fadd 	bl	801d034 <__assert_func>
 800fa7a:	bf00      	nop
    }
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	4618      	mov	r0, r3
 800fa80:	3714      	adds	r7, #20
 800fa82:	46bd      	mov	sp, r7
 800fa84:	bd90      	pop	{r4, r7, pc}
 800fa86:	bf00      	nop
 800fa88:	0801f15c 	.word	0x0801f15c
 800fa8c:	08026e08 	.word	0x08026e08
 800fa90:	0801f4ac 	.word	0x0801f4ac

0800fa94 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 800fa94:	b580      	push	{r7, lr}
 800fa96:	b084      	sub	sp, #16
 800fa98:	af00      	add	r7, sp, #0
 800fa9a:	60f8      	str	r0, [r7, #12]
 800fa9c:	60b9      	str	r1, [r7, #8]
 800fa9e:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 800faa0:	68b9      	ldr	r1, [r7, #8]
 800faa2:	68f8      	ldr	r0, [r7, #12]
 800faa4:	f000 fd68 	bl	8010578 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 800faa8:	687a      	ldr	r2, [r7, #4]
 800faaa:	68b9      	ldr	r1, [r7, #8]
 800faac:	68f8      	ldr	r0, [r7, #12]
 800faae:	f000 fda6 	bl	80105fe <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800fab2:	bf00      	nop
 800fab4:	3710      	adds	r7, #16
 800fab6:	46bd      	mov	sp, r7
 800fab8:	bd80      	pop	{r7, pc}

0800faba <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE4dataEv>:
    const Scalar* data() const { return derived().nestedExpression().data(); }
 800faba:	b580      	push	{r7, lr}
 800fabc:	b082      	sub	sp, #8
 800fabe:	af00      	add	r7, sp, #0
 800fac0:	6078      	str	r0, [r7, #4]
 800fac2:	6878      	ldr	r0, [r7, #4]
 800fac4:	f7f5 f8d2 	bl	8004c6c <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>
 800fac8:	4603      	mov	r3, r0
 800faca:	4618      	mov	r0, r3
 800facc:	f7fd fadc 	bl	800d088 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE16nestedExpressionEv>
 800fad0:	4603      	mov	r3, r0
 800fad2:	4618      	mov	r0, r3
 800fad4:	f7f7 fcf2 	bl	80074bc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4dataEv>
 800fad8:	4603      	mov	r3, r0
 800fada:	4618      	mov	r0, r3
 800fadc:	3708      	adds	r7, #8
 800fade:	46bd      	mov	sp, r7
 800fae0:	bd80      	pop	{r7, pc}

0800fae2 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE11innerStrideEv>:
    Index innerStride() const { return derived().nestedExpression().innerStride(); }
 800fae2:	b580      	push	{r7, lr}
 800fae4:	b082      	sub	sp, #8
 800fae6:	af00      	add	r7, sp, #0
 800fae8:	6078      	str	r0, [r7, #4]
 800faea:	6878      	ldr	r0, [r7, #4]
 800faec:	f7f5 f8be 	bl	8004c6c <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>
 800faf0:	4603      	mov	r3, r0
 800faf2:	4618      	mov	r0, r3
 800faf4:	f7fd fac8 	bl	800d088 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE16nestedExpressionEv>
 800faf8:	4603      	mov	r3, r0
 800fafa:	4618      	mov	r0, r3
 800fafc:	f7fd f968 	bl	800cdd0 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11innerStrideEv>
 800fb00:	4603      	mov	r3, r0
 800fb02:	4618      	mov	r0, r3
 800fb04:	3708      	adds	r7, #8
 800fb06:	46bd      	mov	sp, r7
 800fb08:	bd80      	pop	{r7, pc}

0800fb0a <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE11outerStrideEv>:
    Index outerStride() const { return derived().nestedExpression().outerStride(); }
 800fb0a:	b580      	push	{r7, lr}
 800fb0c:	b082      	sub	sp, #8
 800fb0e:	af00      	add	r7, sp, #0
 800fb10:	6078      	str	r0, [r7, #4]
 800fb12:	6878      	ldr	r0, [r7, #4]
 800fb14:	f7f5 f8aa 	bl	8004c6c <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>
 800fb18:	4603      	mov	r3, r0
 800fb1a:	4618      	mov	r0, r3
 800fb1c:	f7fd fab4 	bl	800d088 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE16nestedExpressionEv>
 800fb20:	4603      	mov	r3, r0
 800fb22:	4618      	mov	r0, r3
 800fb24:	f7f7 ff04 	bl	8007930 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>
 800fb28:	4603      	mov	r3, r0
 800fb2a:	4618      	mov	r0, r3
 800fb2c:	3708      	adds	r7, #8
 800fb2e:	46bd      	mov	sp, r7
 800fb30:	bd80      	pop	{r7, pc}

0800fb32 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1Ev>:
 800fb32:	b580      	push	{r7, lr}
 800fb34:	b082      	sub	sp, #8
 800fb36:	af00      	add	r7, sp, #0
 800fb38:	6078      	str	r0, [r7, #4]
 800fb3a:	6878      	ldr	r0, [r7, #4]
 800fb3c:	f000 fd97 	bl	801066e <_ZN5Eigen9DenseBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1Ev>
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	4618      	mov	r0, r3
 800fb44:	3708      	adds	r7, #8
 800fb46:	46bd      	mov	sp, r7
 800fb48:	bd80      	pop	{r7, pc}
	...

0800fb4c <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 800fb4c:	b580      	push	{r7, lr}
 800fb4e:	b084      	sub	sp, #16
 800fb50:	af00      	add	r7, sp, #0
 800fb52:	60f8      	str	r0, [r7, #12]
 800fb54:	60b9      	str	r1, [r7, #8]
 800fb56:	607a      	str	r2, [r7, #4]
 800fb58:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 800fb5a:	68f8      	ldr	r0, [r7, #12]
 800fb5c:	f7ff ffe9 	bl	800fb32 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1Ev>
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	68ba      	ldr	r2, [r7, #8]
 800fb64:	601a      	str	r2, [r3, #0]
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	3304      	adds	r3, #4
 800fb6a:	6879      	ldr	r1, [r7, #4]
 800fb6c:	4618      	mov	r0, r3
 800fb6e:	f7f6 f8f7 	bl	8005d60 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	3305      	adds	r3, #5
 800fb76:	6839      	ldr	r1, [r7, #0]
 800fb78:	4618      	mov	r0, r3
 800fb7a:	f7f6 f90b 	bl	8005d94 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 800fb7e:	68bb      	ldr	r3, [r7, #8]
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d011      	beq.n	800fba8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	db08      	blt.n	800fb9c <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x50>
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	2b03      	cmp	r3, #3
 800fb8e:	d105      	bne.n	800fb9c <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x50>
 800fb90:	683b      	ldr	r3, [r7, #0]
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	db02      	blt.n	800fb9c <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x50>
 800fb96:	683b      	ldr	r3, [r7, #0]
 800fb98:	2b01      	cmp	r3, #1
 800fb9a:	d005      	beq.n	800fba8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 800fb9c:	4b07      	ldr	r3, [pc, #28]	; (800fbbc <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x70>)
 800fb9e:	4a08      	ldr	r2, [pc, #32]	; (800fbc0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x74>)
 800fba0:	21b0      	movs	r1, #176	; 0xb0
 800fba2:	4808      	ldr	r0, [pc, #32]	; (800fbc4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x78>)
 800fba4:	f00d fa46 	bl	801d034 <__assert_func>
      checkSanity<Derived>();
 800fba8:	2100      	movs	r1, #0
 800fbaa:	68f8      	ldr	r0, [r7, #12]
 800fbac:	f000 fd6a 	bl	8010684 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE11checkSanityIS7_EEvNS_8internal9enable_ifIXeqsrNSA_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	4618      	mov	r0, r3
 800fbb4:	3710      	adds	r7, #16
 800fbb6:	46bd      	mov	sp, r7
 800fbb8:	bd80      	pop	{r7, pc}
 800fbba:	bf00      	nop
 800fbbc:	080255c0 	.word	0x080255c0
 800fbc0:	08026f30 	.word	0x08026f30
 800fbc4:	08025770 	.word	0x08025770

0800fbc8 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EE4initEv>:
    void init()
 800fbc8:	b580      	push	{r7, lr}
 800fbca:	b082      	sub	sp, #8
 800fbcc:	af00      	add	r7, sp, #0
 800fbce:	6078      	str	r0, [r7, #4]
                    : m_xpr.innerStride();
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	3308      	adds	r3, #8
                    ? m_xpr.outerStride()
 800fbd4:	4618      	mov	r0, r3
 800fbd6:	f7ff ff84 	bl	800fae2 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE11innerStrideEv>
 800fbda:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	615a      	str	r2, [r3, #20]
    }
 800fbe0:	bf00      	nop
 800fbe2:	3708      	adds	r7, #8
 800fbe4:	46bd      	mov	sp, r7
 800fbe6:	bd80      	pop	{r7, pc}

0800fbe8 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 800fbe8:	b580      	push	{r7, lr}
 800fbea:	b082      	sub	sp, #8
 800fbec:	af00      	add	r7, sp, #0
 800fbee:	6078      	str	r0, [r7, #4]
 800fbf0:	6039      	str	r1, [r7, #0]
 800fbf2:	6878      	ldr	r0, [r7, #4]
 800fbf4:	f000 fd51 	bl	801069a <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1Ev>
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	6839      	ldr	r1, [r7, #0]
 800fbfc:	4618      	mov	r0, r3
 800fbfe:	f000 fd57 	bl	80106b0 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>
  }
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	4618      	mov	r0, r3
 800fc06:	3708      	adds	r7, #8
 800fc08:	46bd      	mov	sp, r7
 800fc0a:	bd80      	pop	{r7, pc}

0800fc0c <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi0ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800fc0c:	b580      	push	{r7, lr}
 800fc0e:	b082      	sub	sp, #8
 800fc10:	af00      	add	r7, sp, #0
 800fc12:	6078      	str	r0, [r7, #4]
 800fc14:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800fc16:	2200      	movs	r2, #0
 800fc18:	2100      	movs	r1, #0
 800fc1a:	6878      	ldr	r0, [r7, #4]
 800fc1c:	f000 fd70 	bl	8010700 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE17coeffByOuterInnerEii>
 800fc20:	eef0 7a40 	vmov.f32	s15, s0
  }
 800fc24:	eeb0 0a67 	vmov.f32	s0, s15
 800fc28:	3708      	adds	r7, #8
 800fc2a:	46bd      	mov	sp, r7
 800fc2c:	bd80      	pop	{r7, pc}

0800fc2e <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi1ELi2EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 800fc2e:	b580      	push	{r7, lr}
 800fc30:	b084      	sub	sp, #16
 800fc32:	af00      	add	r7, sp, #0
 800fc34:	6078      	str	r0, [r7, #4]
 800fc36:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800fc38:	6839      	ldr	r1, [r7, #0]
 800fc3a:	6878      	ldr	r0, [r7, #4]
 800fc3c:	f000 fd73 	bl	8010726 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi1ELi1EE3runERKSM_RKS3_>
 800fc40:	eef0 7a40 	vmov.f32	s15, s0
 800fc44:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 800fc48:	6839      	ldr	r1, [r7, #0]
 800fc4a:	6878      	ldr	r0, [r7, #4]
 800fc4c:	f000 fd7c 	bl	8010748 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi2ELi1EE3runERKSM_RKS3_>
 800fc50:	eef0 7a40 	vmov.f32	s15, s0
 800fc54:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800fc58:	f107 020c 	add.w	r2, r7, #12
 800fc5c:	f107 0308 	add.w	r3, r7, #8
 800fc60:	4619      	mov	r1, r3
 800fc62:	6838      	ldr	r0, [r7, #0]
 800fc64:	f7f8 fc81 	bl	800856a <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 800fc68:	eef0 7a40 	vmov.f32	s15, s0
  }
 800fc6c:	eeb0 0a67 	vmov.f32	s0, s15
 800fc70:	3710      	adds	r7, #16
 800fc72:	46bd      	mov	sp, r7
 800fc74:	bd80      	pop	{r7, pc}

0800fc76 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800fc76:	b580      	push	{r7, lr}
 800fc78:	b082      	sub	sp, #8
 800fc7a:	af00      	add	r7, sp, #0
 800fc7c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800fc7e:	2202      	movs	r2, #2
 800fc80:	2102      	movs	r1, #2
 800fc82:	6878      	ldr	r0, [r7, #4]
 800fc84:	f7fc f8c3 	bl	800be0e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800fc88:	6878      	ldr	r0, [r7, #4]
 800fc8a:	f000 fd6e 	bl	801076a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSG_>
  }
 800fc8e:	bf00      	nop
 800fc90:	3708      	adds	r7, #8
 800fc92:	46bd      	mov	sp, r7
 800fc94:	bd80      	pop	{r7, pc}

0800fc96 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800fc96:	b480      	push	{r7}
 800fc98:	b083      	sub	sp, #12
 800fc9a:	af00      	add	r7, sp, #0
 800fc9c:	6078      	str	r0, [r7, #4]
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	4618      	mov	r0, r3
 800fca4:	370c      	adds	r7, #12
 800fca6:	46bd      	mov	sp, r7
 800fca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcac:	4770      	bx	lr

0800fcae <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800fcae:	b480      	push	{r7}
 800fcb0:	b083      	sub	sp, #12
 800fcb2:	af00      	add	r7, sp, #0
 800fcb4:	6078      	str	r0, [r7, #4]
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	3304      	adds	r3, #4
 800fcba:	4618      	mov	r0, r3
 800fcbc:	370c      	adds	r7, #12
 800fcbe:	46bd      	mov	sp, r7
 800fcc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc4:	4770      	bx	lr

0800fcc6 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800fcc6:	b480      	push	{r7}
 800fcc8:	b083      	sub	sp, #12
 800fcca:	af00      	add	r7, sp, #0
 800fccc:	6078      	str	r0, [r7, #4]
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	4618      	mov	r0, r3
 800fcd2:	370c      	adds	r7, #12
 800fcd4:	46bd      	mov	sp, r7
 800fcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcda:	4770      	bx	lr

0800fcdc <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERKS5_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 800fcdc:	b580      	push	{r7, lr}
 800fcde:	b082      	sub	sp, #8
 800fce0:	af00      	add	r7, sp, #0
 800fce2:	6078      	str	r0, [r7, #4]
 800fce4:	6039      	str	r1, [r7, #0]
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	6839      	ldr	r1, [r7, #0]
 800fcea:	4618      	mov	r0, r3
 800fcec:	f000 fd47 	bl	801077e <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfEC1ERKS5_>
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	4618      	mov	r0, r3
 800fcf4:	3708      	adds	r7, #8
 800fcf6:	46bd      	mov	sp, r7
 800fcf8:	bd80      	pop	{r7, pc}

0800fcfa <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 800fcfa:	b5b0      	push	{r4, r5, r7, lr}
 800fcfc:	b084      	sub	sp, #16
 800fcfe:	af00      	add	r7, sp, #0
 800fd00:	6078      	str	r0, [r7, #4]
 800fd02:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	689c      	ldr	r4, [r3, #8]
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	6839      	ldr	r1, [r7, #0]
 800fd0e:	4618      	mov	r0, r3
 800fd10:	f7f7 fe81 	bl	8007a16 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi>
 800fd14:	4605      	mov	r5, r0
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	685b      	ldr	r3, [r3, #4]
 800fd1a:	6839      	ldr	r1, [r7, #0]
 800fd1c:	4618      	mov	r0, r3
 800fd1e:	f000 fd44 	bl	80107aa <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEELi3ENS_10DenseShapeES9_ffE5coeffEi>
 800fd22:	eef0 7a40 	vmov.f32	s15, s0
 800fd26:	edc7 7a03 	vstr	s15, [r7, #12]
 800fd2a:	f107 030c 	add.w	r3, r7, #12
 800fd2e:	461a      	mov	r2, r3
 800fd30:	4629      	mov	r1, r5
 800fd32:	4620      	mov	r0, r4
 800fd34:	f7f7 fe28 	bl	8007988 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 800fd38:	bf00      	nop
 800fd3a:	3710      	adds	r7, #16
 800fd3c:	46bd      	mov	sp, r7
 800fd3e:	bdb0      	pop	{r4, r5, r7, pc}

0800fd40 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800fd40:	b580      	push	{r7, lr}
 800fd42:	b082      	sub	sp, #8
 800fd44:	af00      	add	r7, sp, #0
 800fd46:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800fd48:	2101      	movs	r1, #1
 800fd4a:	6878      	ldr	r0, [r7, #4]
 800fd4c:	f7ff ffd5 	bl	800fcfa <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800fd50:	6878      	ldr	r0, [r7, #4]
 800fd52:	f000 fd63 	bl	801081c <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSG_>
  }
 800fd56:	bf00      	nop
 800fd58:	3708      	adds	r7, #8
 800fd5a:	46bd      	mov	sp, r7
 800fd5c:	bd80      	pop	{r7, pc}

0800fd5e <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKSG_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800fd5e:	b580      	push	{r7, lr}
 800fd60:	b082      	sub	sp, #8
 800fd62:	af00      	add	r7, sp, #0
 800fd64:	6078      	str	r0, [r7, #4]
 800fd66:	6039      	str	r1, [r7, #0]
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	6839      	ldr	r1, [r7, #0]
 800fd6c:	4618      	mov	r0, r3
 800fd6e:	f000 fd64 	bl	801083a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffEC1ERKSG_>
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	4618      	mov	r0, r3
 800fd76:	3708      	adds	r7, #8
 800fd78:	46bd      	mov	sp, r7
 800fd7a:	bd80      	pop	{r7, pc}

0800fd7c <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800fd7c:	b480      	push	{r7}
 800fd7e:	b083      	sub	sp, #12
 800fd80:	af00      	add	r7, sp, #0
 800fd82:	6078      	str	r0, [r7, #4]
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	4618      	mov	r0, r3
 800fd88:	370c      	adds	r7, #12
 800fd8a:	46bd      	mov	sp, r7
 800fd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd90:	4770      	bx	lr
	...

0800fd94 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 800fd94:	b580      	push	{r7, lr}
 800fd96:	b086      	sub	sp, #24
 800fd98:	af00      	add	r7, sp, #0
 800fd9a:	60f8      	str	r0, [r7, #12]
 800fd9c:	60b9      	str	r1, [r7, #8]
 800fd9e:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 800fda0:	68b8      	ldr	r0, [r7, #8]
 800fda2:	f7f5 faa4 	bl	80052ee <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800fda6:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 800fda8:	68b8      	ldr	r0, [r7, #8]
 800fdaa:	f7f5 faad 	bl	8005308 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800fdae:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	4618      	mov	r0, r3
 800fdb4:	f7f5 fa39 	bl	800522a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800fdb8:	4602      	mov	r2, r0
 800fdba:	697b      	ldr	r3, [r7, #20]
 800fdbc:	4293      	cmp	r3, r2
 800fdbe:	d107      	bne.n	800fdd0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	4618      	mov	r0, r3
 800fdc4:	f7f5 fa3c 	bl	8005240 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800fdc8:	4602      	mov	r2, r0
 800fdca:	693b      	ldr	r3, [r7, #16]
 800fdcc:	4293      	cmp	r3, r2
 800fdce:	d001      	beq.n	800fdd4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 800fdd0:	2301      	movs	r3, #1
 800fdd2:	e000      	b.n	800fdd6 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 800fdd4:	2300      	movs	r3, #0
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d005      	beq.n	800fde6 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	693a      	ldr	r2, [r7, #16]
 800fdde:	6979      	ldr	r1, [r7, #20]
 800fde0:	4618      	mov	r0, r3
 800fde2:	f7fc fd73 	bl	800c8cc <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	4618      	mov	r0, r3
 800fdea:	f7f5 fa1e 	bl	800522a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800fdee:	4602      	mov	r2, r0
 800fdf0:	697b      	ldr	r3, [r7, #20]
 800fdf2:	4293      	cmp	r3, r2
 800fdf4:	d107      	bne.n	800fe06 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	4618      	mov	r0, r3
 800fdfa:	f7f5 fa21 	bl	8005240 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800fdfe:	4602      	mov	r2, r0
 800fe00:	693b      	ldr	r3, [r7, #16]
 800fe02:	4293      	cmp	r3, r2
 800fe04:	d006      	beq.n	800fe14 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 800fe06:	4b05      	ldr	r3, [pc, #20]	; (800fe1c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 800fe08:	4a05      	ldr	r2, [pc, #20]	; (800fe20 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 800fe0a:	f240 21fd 	movw	r1, #765	; 0x2fd
 800fe0e:	4805      	ldr	r0, [pc, #20]	; (800fe24 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 800fe10:	f00d f910 	bl	801d034 <__assert_func>
}
 800fe14:	bf00      	nop
 800fe16:	3718      	adds	r7, #24
 800fe18:	46bd      	mov	sp, r7
 800fe1a:	bd80      	pop	{r7, pc}
 800fe1c:	08021514 	.word	0x08021514
 800fe20:	08027048 	.word	0x08027048
 800fe24:	08021628 	.word	0x08021628

0800fe28 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_INS3_IfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EEC1ERS5_RKSJ_RKSL_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 800fe28:	b480      	push	{r7}
 800fe2a:	b085      	sub	sp, #20
 800fe2c:	af00      	add	r7, sp, #0
 800fe2e:	60f8      	str	r0, [r7, #12]
 800fe30:	60b9      	str	r1, [r7, #8]
 800fe32:	607a      	str	r2, [r7, #4]
 800fe34:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	68ba      	ldr	r2, [r7, #8]
 800fe3a:	601a      	str	r2, [r3, #0]
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	687a      	ldr	r2, [r7, #4]
 800fe40:	605a      	str	r2, [r3, #4]
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	683a      	ldr	r2, [r7, #0]
 800fe46:	609a      	str	r2, [r3, #8]
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	69ba      	ldr	r2, [r7, #24]
 800fe4c:	60da      	str	r2, [r3, #12]
  }
 800fe4e:	68fb      	ldr	r3, [r7, #12]
 800fe50:	4618      	mov	r0, r3
 800fe52:	3714      	adds	r7, #20
 800fe54:	46bd      	mov	sp, r7
 800fe56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe5a:	4770      	bx	lr

0800fe5c <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_INS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSN_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800fe5c:	b580      	push	{r7, lr}
 800fe5e:	b082      	sub	sp, #8
 800fe60:	af00      	add	r7, sp, #0
 800fe62:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 800fe64:	6878      	ldr	r0, [r7, #4]
 800fe66:	f000 fcfa 	bl	801085e <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_INS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi0ELi1EE3runERSN_>
  }
 800fe6a:	bf00      	nop
 800fe6c:	3708      	adds	r7, #8
 800fe6e:	46bd      	mov	sp, r7
 800fe70:	bd80      	pop	{r7, pc}

0800fe72 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 800fe72:	b480      	push	{r7}
 800fe74:	b083      	sub	sp, #12
 800fe76:	af00      	add	r7, sp, #0
 800fe78:	6078      	str	r0, [r7, #4]
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	4618      	mov	r0, r3
 800fe7e:	370c      	adds	r7, #12
 800fe80:	46bd      	mov	sp, r7
 800fe82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe86:	4770      	bx	lr

0800fe88 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800fe88:	b480      	push	{r7}
 800fe8a:	b083      	sub	sp, #12
 800fe8c:	af00      	add	r7, sp, #0
 800fe8e:	6078      	str	r0, [r7, #4]
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	4618      	mov	r0, r3
 800fe94:	370c      	adds	r7, #12
 800fe96:	46bd      	mov	sp, r7
 800fe98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe9c:	4770      	bx	lr

0800fe9e <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 800fe9e:	b580      	push	{r7, lr}
 800fea0:	b082      	sub	sp, #8
 800fea2:	af00      	add	r7, sp, #0
 800fea4:	6078      	str	r0, [r7, #4]
 800fea6:	6039      	str	r1, [r7, #0]
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	6839      	ldr	r1, [r7, #0]
 800feac:	4618      	mov	r0, r3
 800feae:	f000 fce5 	bl	801087c <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1ERKS6_>
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	4618      	mov	r0, r3
 800feb6:	3708      	adds	r7, #8
 800feb8:	46bd      	mov	sp, r7
 800feba:	bd80      	pop	{r7, pc}

0800febc <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_EC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 800febc:	b590      	push	{r4, r7, lr}
 800febe:	b083      	sub	sp, #12
 800fec0:	af00      	add	r7, sp, #0
 800fec2:	6078      	str	r0, [r7, #4]
 800fec4:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 800fec6:	6878      	ldr	r0, [r7, #4]
 800fec8:	f000 fd03 	bl	80108d2 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 800fecc:	683b      	ldr	r3, [r7, #0]
 800fece:	4618      	mov	r0, r3
 800fed0:	f000 f81e 	bl	800ff10 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE4dataEv>
 800fed4:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	601a      	str	r2, [r3, #0]
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	1d1c      	adds	r4, r3, #4
 800fede:	683b      	ldr	r3, [r7, #0]
 800fee0:	4618      	mov	r0, r3
 800fee2:	f000 fcda 	bl	801089a <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EE11innerStrideEv>
 800fee6:	4603      	mov	r3, r0
 800fee8:	4619      	mov	r1, r3
 800feea:	4620      	mov	r0, r4
 800feec:	f7f5 ff52 	bl	8005d94 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	1d5c      	adds	r4, r3, #5
 800fef4:	683b      	ldr	r3, [r7, #0]
 800fef6:	4618      	mov	r0, r3
 800fef8:	f000 fcdd 	bl	80108b6 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EE11outerStrideEv>
 800fefc:	4603      	mov	r3, r0
 800fefe:	4619      	mov	r1, r3
 800ff00:	4620      	mov	r0, r4
 800ff02:	f7f5 ff47 	bl	8005d94 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
  }
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	4618      	mov	r0, r3
 800ff0a:	370c      	adds	r7, #12
 800ff0c:	46bd      	mov	sp, r7
 800ff0e:	bd90      	pop	{r4, r7, pc}

0800ff10 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC inline const Scalar* data() const { return m_data; }
 800ff10:	b480      	push	{r7}
 800ff12:	b083      	sub	sp, #12
 800ff14:	af00      	add	r7, sp, #0
 800ff16:	6078      	str	r0, [r7, #4]
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	4618      	mov	r0, r3
 800ff1e:	370c      	adds	r7, #12
 800ff20:	46bd      	mov	sp, r7
 800ff22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff26:	4770      	bx	lr

0800ff28 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi0ELi1EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800ff28:	b580      	push	{r7, lr}
 800ff2a:	b082      	sub	sp, #8
 800ff2c:	af00      	add	r7, sp, #0
 800ff2e:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800ff30:	2100      	movs	r1, #0
 800ff32:	6878      	ldr	r0, [r7, #4]
 800ff34:	f000 fcd8 	bl	80108e8 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800ff38:	6878      	ldr	r0, [r7, #4]
 800ff3a:	f000 fcf3 	bl	8010924 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi1EE3runERS9_>
  }
 800ff3e:	bf00      	nop
 800ff40:	3708      	adds	r7, #8
 800ff42:	46bd      	mov	sp, r7
 800ff44:	bd80      	pop	{r7, pc}

0800ff46 <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>:
 800ff46:	b580      	push	{r7, lr}
 800ff48:	b082      	sub	sp, #8
 800ff4a:	af00      	add	r7, sp, #0
 800ff4c:	6078      	str	r0, [r7, #4]
 800ff4e:	6878      	ldr	r0, [r7, #4]
 800ff50:	f000 fcf2 	bl	8010938 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	4618      	mov	r0, r3
 800ff58:	3708      	adds	r7, #8
 800ff5a:	46bd      	mov	sp, r7
 800ff5c:	bd80      	pop	{r7, pc}

0800ff5e <_ZN5Eigen13TransposeImplIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 800ff5e:	b580      	push	{r7, lr}
 800ff60:	b082      	sub	sp, #8
 800ff62:	af00      	add	r7, sp, #0
 800ff64:	6078      	str	r0, [r7, #4]
 800ff66:	6878      	ldr	r0, [r7, #4]
 800ff68:	f7ff ffed 	bl	800ff46 <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	4618      	mov	r0, r3
 800ff70:	3708      	adds	r7, #8
 800ff72:	46bd      	mov	sp, r7
 800ff74:	bd80      	pop	{r7, pc}

0800ff76 <_ZN5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS3_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 800ff76:	b580      	push	{r7, lr}
 800ff78:	b082      	sub	sp, #8
 800ff7a:	af00      	add	r7, sp, #0
 800ff7c:	6078      	str	r0, [r7, #4]
 800ff7e:	6039      	str	r1, [r7, #0]
 800ff80:	6878      	ldr	r0, [r7, #4]
 800ff82:	f7ff ffec 	bl	800ff5e <_ZN5Eigen13TransposeImplIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEEC1Ev>
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	683a      	ldr	r2, [r7, #0]
 800ff8a:	601a      	str	r2, [r3, #0]
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	4618      	mov	r0, r3
 800ff90:	3708      	adds	r7, #8
 800ff92:	46bd      	mov	sp, r7
 800ff94:	bd80      	pop	{r7, pc}

0800ff96 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800ff96:	b480      	push	{r7}
 800ff98:	b083      	sub	sp, #12
 800ff9a:	af00      	add	r7, sp, #0
 800ff9c:	6078      	str	r0, [r7, #4]
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	4618      	mov	r0, r3
 800ffa2:	370c      	adds	r7, #12
 800ffa4:	46bd      	mov	sp, r7
 800ffa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffaa:	4770      	bx	lr

0800ffac <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
 800ffac:	b580      	push	{r7, lr}
 800ffae:	b082      	sub	sp, #8
 800ffb0:	af00      	add	r7, sp, #0
 800ffb2:	6078      	str	r0, [r7, #4]
 800ffb4:	6878      	ldr	r0, [r7, #4]
 800ffb6:	f000 fcca 	bl	801094e <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	4618      	mov	r0, r3
 800ffbe:	3708      	adds	r7, #8
 800ffc0:	46bd      	mov	sp, r7
 800ffc2:	bd80      	pop	{r7, pc}

0800ffc4 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 800ffc4:	b580      	push	{r7, lr}
 800ffc6:	b082      	sub	sp, #8
 800ffc8:	af00      	add	r7, sp, #0
 800ffca:	6078      	str	r0, [r7, #4]
 800ffcc:	6878      	ldr	r0, [r7, #4]
 800ffce:	f7ff ffed 	bl	800ffac <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	4618      	mov	r0, r3
 800ffd6:	3708      	adds	r7, #8
 800ffd8:	46bd      	mov	sp, r7
 800ffda:	bd80      	pop	{r7, pc}

0800ffdc <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 800ffdc:	b580      	push	{r7, lr}
 800ffde:	b082      	sub	sp, #8
 800ffe0:	af00      	add	r7, sp, #0
 800ffe2:	6078      	str	r0, [r7, #4]
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	4618      	mov	r0, r3
 800ffea:	f7f4 fae5 	bl	80045b8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 800ffee:	4603      	mov	r3, r0
 800fff0:	4618      	mov	r0, r3
 800fff2:	3708      	adds	r7, #8
 800fff4:	46bd      	mov	sp, r7
 800fff6:	bd80      	pop	{r7, pc}

0800fff8 <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 800fff8:	b580      	push	{r7, lr}
 800fffa:	b082      	sub	sp, #8
 800fffc:	af00      	add	r7, sp, #0
 800fffe:	6078      	str	r0, [r7, #4]
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	4618      	mov	r0, r3
 8010006:	f7f4 fae2 	bl	80045ce <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 801000a:	4603      	mov	r3, r0
 801000c:	4618      	mov	r0, r3
 801000e:	3708      	adds	r7, #8
 8010010:	46bd      	mov	sp, r7
 8010012:	bd80      	pop	{r7, pc}

08010014 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERS9_RSB_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8010014:	b590      	push	{r4, r7, lr}
 8010016:	b085      	sub	sp, #20
 8010018:	af00      	add	r7, sp, #0
 801001a:	60f8      	str	r0, [r7, #12]
 801001c:	60b9      	str	r1, [r7, #8]
 801001e:	607a      	str	r2, [r7, #4]
 8010020:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 8010022:	68f8      	ldr	r0, [r7, #12]
 8010024:	f7ff ffce 	bl	800ffc4 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEEC1Ev>
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	68ba      	ldr	r2, [r7, #8]
 801002c:	6812      	ldr	r2, [r2, #0]
 801002e:	601a      	str	r2, [r3, #0]
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	687a      	ldr	r2, [r7, #4]
 8010034:	605a      	str	r2, [r3, #4]
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	3308      	adds	r3, #8
 801003a:	6839      	ldr	r1, [r7, #0]
 801003c:	4618      	mov	r0, r3
 801003e:	f7f4 fc2f 	bl	80048a0 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8010042:	68b8      	ldr	r0, [r7, #8]
 8010044:	f7ff ffca 	bl	800ffdc <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8010048:	4604      	mov	r4, r0
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	4618      	mov	r0, r3
 801004e:	f7f4 f9a2 	bl	8004396 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8010052:	4603      	mov	r3, r0
 8010054:	429c      	cmp	r4, r3
 8010056:	d10a      	bne.n	801006e <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERS9_RSB_RKS3_+0x5a>
 8010058:	68b8      	ldr	r0, [r7, #8]
 801005a:	f7ff ffcd 	bl	800fff8 <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 801005e:	4604      	mov	r4, r0
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	4618      	mov	r0, r3
 8010064:	f7f4 f98c 	bl	8004380 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8010068:	4603      	mov	r3, r0
 801006a:	429c      	cmp	r4, r3
 801006c:	d005      	beq.n	801007a <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERS9_RSB_RKS3_+0x66>
 801006e:	4b05      	ldr	r3, [pc, #20]	; (8010084 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERS9_RSB_RKS3_+0x70>)
 8010070:	4a05      	ldr	r2, [pc, #20]	; (8010088 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERS9_RSB_RKS3_+0x74>)
 8010072:	2174      	movs	r1, #116	; 0x74
 8010074:	4805      	ldr	r0, [pc, #20]	; (801008c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERS9_RSB_RKS3_+0x78>)
 8010076:	f00c ffdd 	bl	801d034 <__assert_func>
    }
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	4618      	mov	r0, r3
 801007e:	3714      	adds	r7, #20
 8010080:	46bd      	mov	sp, r7
 8010082:	bd90      	pop	{r4, r7, pc}
 8010084:	0801ee9c 	.word	0x0801ee9c
 8010088:	0802720c 	.word	0x0802720c
 801008c:	0801f100 	.word	0x0801f100

08010090 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 8010090:	b580      	push	{r7, lr}
 8010092:	b082      	sub	sp, #8
 8010094:	af00      	add	r7, sp, #0
 8010096:	6078      	str	r0, [r7, #4]
 8010098:	6878      	ldr	r0, [r7, #4]
 801009a:	f000 f809 	bl	80100b0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 801009e:	4603      	mov	r3, r0
 80100a0:	4618      	mov	r0, r3
 80100a2:	f000 fc5f 	bl	8010964 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80100a6:	4603      	mov	r3, r0
 80100a8:	4618      	mov	r0, r3
 80100aa:	3708      	adds	r7, #8
 80100ac:	46bd      	mov	sp, r7
 80100ae:	bd80      	pop	{r7, pc}

080100b0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 80100b0:	b480      	push	{r7}
 80100b2:	b083      	sub	sp, #12
 80100b4:	af00      	add	r7, sp, #0
 80100b6:	6078      	str	r0, [r7, #4]
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	4618      	mov	r0, r3
 80100bc:	370c      	adds	r7, #12
 80100be:	46bd      	mov	sp, r7
 80100c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100c4:	4770      	bx	lr

080100c6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 80100c6:	b580      	push	{r7, lr}
 80100c8:	b082      	sub	sp, #8
 80100ca:	af00      	add	r7, sp, #0
 80100cc:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	4618      	mov	r0, r3
 80100d2:	f7ff ff83 	bl	800ffdc <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 80100d6:	4603      	mov	r3, r0
    }
 80100d8:	4618      	mov	r0, r3
 80100da:	3708      	adds	r7, #8
 80100dc:	46bd      	mov	sp, r7
 80100de:	bd80      	pop	{r7, pc}

080100e0 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>:
struct evaluator<const T>
 80100e0:	b580      	push	{r7, lr}
 80100e2:	b082      	sub	sp, #8
 80100e4:	af00      	add	r7, sp, #0
 80100e6:	6078      	str	r0, [r7, #4]
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	4618      	mov	r0, r3
 80100ec:	f7fe f968 	bl	800e3c0 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	4618      	mov	r0, r3
 80100f4:	3708      	adds	r7, #8
 80100f6:	46bd      	mov	sp, r7
 80100f8:	bd80      	pop	{r7, pc}

080100fa <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 80100fa:	b580      	push	{r7, lr}
 80100fc:	b082      	sub	sp, #8
 80100fe:	af00      	add	r7, sp, #0
 8010100:	6078      	str	r0, [r7, #4]
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	4618      	mov	r0, r3
 8010106:	f7ff ffeb 	bl	80100e0 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 801010a:	6878      	ldr	r0, [r7, #4]
 801010c:	f000 fc51 	bl	80109b2 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	4618      	mov	r0, r3
 8010114:	3708      	adds	r7, #8
 8010116:	46bd      	mov	sp, r7
 8010118:	bd80      	pop	{r7, pc}

0801011a <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 801011a:	b580      	push	{r7, lr}
 801011c:	b082      	sub	sp, #8
 801011e:	af00      	add	r7, sp, #0
 8010120:	6078      	str	r0, [r7, #4]
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	4618      	mov	r0, r3
 8010126:	f7ff ffe8 	bl	80100fa <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfED1Ev>
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	4618      	mov	r0, r3
 801012e:	3708      	adds	r7, #8
 8010130:	46bd      	mov	sp, r7
 8010132:	bd80      	pop	{r7, pc}

08010134 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>:
struct evaluator<const T>
 8010134:	b580      	push	{r7, lr}
 8010136:	b082      	sub	sp, #8
 8010138:	af00      	add	r7, sp, #0
 801013a:	6078      	str	r0, [r7, #4]
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	4618      	mov	r0, r3
 8010140:	f7ff ffeb 	bl	801011a <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	4618      	mov	r0, r3
 8010148:	3708      	adds	r7, #8
 801014a:	46bd      	mov	sp, r7
 801014c:	bd80      	pop	{r7, pc}

0801014e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE4DataD1Ev>:
  struct Data
 801014e:	b580      	push	{r7, lr}
 8010150:	b082      	sub	sp, #8
 8010152:	af00      	add	r7, sp, #0
 8010154:	6078      	str	r0, [r7, #4]
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	3308      	adds	r3, #8
 801015a:	4618      	mov	r0, r3
 801015c:	f7f8 f824 	bl	80081a8 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	3304      	adds	r3, #4
 8010164:	4618      	mov	r0, r3
 8010166:	f7ff ffe5 	bl	8010134 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	4618      	mov	r0, r3
 801016e:	3708      	adds	r7, #8
 8010170:	46bd      	mov	sp, r7
 8010172:	bd80      	pop	{r7, pc}

08010174 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 8010174:	b580      	push	{r7, lr}
 8010176:	b082      	sub	sp, #8
 8010178:	af00      	add	r7, sp, #0
 801017a:	6078      	str	r0, [r7, #4]
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	4618      	mov	r0, r3
 8010180:	f7ff ffe5 	bl	801014e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE4DataD1Ev>
 8010184:	6878      	ldr	r0, [r7, #4]
 8010186:	f000 fc09 	bl	801099c <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	4618      	mov	r0, r3
 801018e:	3708      	adds	r7, #8
 8010190:	46bd      	mov	sp, r7
 8010192:	bd80      	pop	{r7, pc}

08010194 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 8010194:	b580      	push	{r7, lr}
 8010196:	b082      	sub	sp, #8
 8010198:	af00      	add	r7, sp, #0
 801019a:	6078      	str	r0, [r7, #4]
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	4618      	mov	r0, r3
 80101a0:	f7ff ffe8 	bl	8010174 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffED1Ev>
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	4618      	mov	r0, r3
 80101a8:	3708      	adds	r7, #8
 80101aa:	46bd      	mov	sp, r7
 80101ac:	bd80      	pop	{r7, pc}

080101ae <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 80101ae:	b580      	push	{r7, lr}
 80101b0:	b082      	sub	sp, #8
 80101b2:	af00      	add	r7, sp, #0
 80101b4:	6078      	str	r0, [r7, #4]
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	4618      	mov	r0, r3
 80101ba:	f7ff ffeb 	bl	8010194 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	4618      	mov	r0, r3
 80101c2:	3708      	adds	r7, #8
 80101c4:	46bd      	mov	sp, r7
 80101c6:	bd80      	pop	{r7, pc}

080101c8 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 80101c8:	b580      	push	{r7, lr}
 80101ca:	ed2d 8b02 	vpush	{d8}
 80101ce:	b086      	sub	sp, #24
 80101d0:	af00      	add	r7, sp, #0
 80101d2:	6078      	str	r0, [r7, #4]
 80101d4:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 80101d6:	6878      	ldr	r0, [r7, #4]
 80101d8:	f7ff fa4b 	bl	800f672 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE4rowsEv>
 80101dc:	4603      	mov	r3, r0
 80101de:	2b00      	cmp	r3, #0
 80101e0:	dd05      	ble.n	80101ee <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 80101e2:	6878      	ldr	r0, [r7, #4]
 80101e4:	f7ff ff54 	bl	8010090 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE4colsEv>
 80101e8:	4603      	mov	r3, r0
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	dc06      	bgt.n	80101fc <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 80101ee:	4b16      	ldr	r3, [pc, #88]	; (8010248 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 80101f0:	4a16      	ldr	r2, [pc, #88]	; (801024c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 80101f2:	f240 119b 	movw	r1, #411	; 0x19b
 80101f6:	4816      	ldr	r0, [pc, #88]	; (8010250 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 80101f8:	f00c ff1c 	bl	801d034 <__assert_func>
 80101fc:	bf00      	nop
  ThisEvaluator thisEval(derived());
 80101fe:	6878      	ldr	r0, [r7, #4]
 8010200:	f7ff ff56 	bl	80100b0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 8010204:	4602      	mov	r2, r0
 8010206:	f107 030c 	add.w	r3, r7, #12
 801020a:	4611      	mov	r1, r2
 801020c:	4618      	mov	r0, r3
 801020e:	f000 fbb6 	bl	801097e <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKSD_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 8010212:	6878      	ldr	r0, [r7, #4]
 8010214:	f7ff ff4c 	bl	80100b0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 8010218:	4602      	mov	r2, r0
 801021a:	f107 030c 	add.w	r3, r7, #12
 801021e:	6839      	ldr	r1, [r7, #0]
 8010220:	4618      	mov	r0, r3
 8010222:	f000 fbd1 	bl	80109c8 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi0ELi2EE3runISG_EEfRKSH_RKS3_RKT_>
 8010226:	eeb0 8a40 	vmov.f32	s16, s0
 801022a:	bf00      	nop
  ThisEvaluator thisEval(derived());
 801022c:	f107 030c 	add.w	r3, r7, #12
 8010230:	4618      	mov	r0, r3
 8010232:	f7ff ffbc 	bl	80101ae <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 8010236:	eef0 7a48 	vmov.f32	s15, s16
}
 801023a:	eeb0 0a67 	vmov.f32	s0, s15
 801023e:	3718      	adds	r7, #24
 8010240:	46bd      	mov	sp, r7
 8010242:	ecbd 8b02 	vpop	{d8}
 8010246:	bd80      	pop	{r7, pc}
 8010248:	08023f1c 	.word	0x08023f1c
 801024c:	080273d4 	.word	0x080273d4
 8010250:	08024128 	.word	0x08024128

08010254 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELb0EE3runERKS3_RKS7_>:
    static void run(const Derived&, const OtherDerived&)
 8010254:	b480      	push	{r7}
 8010256:	b083      	sub	sp, #12
 8010258:	af00      	add	r7, sp, #0
 801025a:	6078      	str	r0, [r7, #4]
 801025c:	6039      	str	r1, [r7, #0]
    }
 801025e:	bf00      	nop
 8010260:	370c      	adds	r7, #12
 8010262:	46bd      	mov	sp, r7
 8010264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010268:	4770      	bx	lr

0801026a <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1ERKS6_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 801026a:	b580      	push	{r7, lr}
 801026c:	b082      	sub	sp, #8
 801026e:	af00      	add	r7, sp, #0
 8010270:	6078      	str	r0, [r7, #4]
 8010272:	6039      	str	r1, [r7, #0]
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	6839      	ldr	r1, [r7, #0]
 8010278:	4618      	mov	r0, r3
 801027a:	f000 fbb6 	bl	80109ea <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELi4ENS_10DenseShapeES7_ffEC1ERKS6_>
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	4618      	mov	r0, r3
 8010282:	3708      	adds	r7, #8
 8010284:	46bd      	mov	sp, r7
 8010286:	bd80      	pop	{r7, pc}

08010288 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8010288:	b480      	push	{r7}
 801028a:	b083      	sub	sp, #12
 801028c:	af00      	add	r7, sp, #0
 801028e:	6078      	str	r0, [r7, #4]
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	4618      	mov	r0, r3
 8010294:	370c      	adds	r7, #12
 8010296:	46bd      	mov	sp, r7
 8010298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801029c:	4770      	bx	lr

0801029e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 801029e:	b580      	push	{r7, lr}
 80102a0:	b082      	sub	sp, #8
 80102a2:	af00      	add	r7, sp, #0
 80102a4:	6078      	str	r0, [r7, #4]
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	4618      	mov	r0, r3
 80102ac:	f7f4 f873 	bl	8004396 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80102b0:	4603      	mov	r3, r0
 80102b2:	4618      	mov	r0, r3
 80102b4:	3708      	adds	r7, #8
 80102b6:	46bd      	mov	sp, r7
 80102b8:	bd80      	pop	{r7, pc}

080102ba <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 80102ba:	b580      	push	{r7, lr}
 80102bc:	b082      	sub	sp, #8
 80102be:	af00      	add	r7, sp, #0
 80102c0:	6078      	str	r0, [r7, #4]
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	685b      	ldr	r3, [r3, #4]
 80102c6:	4618      	mov	r0, r3
 80102c8:	f7f4 f976 	bl	80045b8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 80102cc:	4603      	mov	r3, r0
 80102ce:	4618      	mov	r0, r3
 80102d0:	3708      	adds	r7, #8
 80102d2:	46bd      	mov	sp, r7
 80102d4:	bd80      	pop	{r7, pc}
	...

080102d8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const Functor &/*func*/)
 80102d8:	b590      	push	{r4, r7, lr}
 80102da:	b085      	sub	sp, #20
 80102dc:	af00      	add	r7, sp, #0
 80102de:	60f8      	str	r0, [r7, #12]
 80102e0:	60b9      	str	r1, [r7, #8]
 80102e2:	607a      	str	r2, [r7, #4]
  eigen_assert(dst.rows() == src.rows() && dst.cols() == src.cols());
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	4618      	mov	r0, r3
 80102e8:	f7f3 ffaf 	bl	800424a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80102ec:	4604      	mov	r4, r0
 80102ee:	68b8      	ldr	r0, [r7, #8]
 80102f0:	f7ff ffd5 	bl	801029e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE4rowsEv>
 80102f4:	4603      	mov	r3, r0
 80102f6:	429c      	cmp	r4, r3
 80102f8:	d10a      	bne.n	8010310 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_+0x38>
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	4618      	mov	r0, r3
 80102fe:	f7f3 ff99 	bl	8004234 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8010302:	4604      	mov	r4, r0
 8010304:	68b8      	ldr	r0, [r7, #8]
 8010306:	f7ff ffd8 	bl	80102ba <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE4colsEv>
 801030a:	4603      	mov	r3, r0
 801030c:	429c      	cmp	r4, r3
 801030e:	d006      	beq.n	801031e <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_+0x46>
 8010310:	4b05      	ldr	r3, [pc, #20]	; (8010328 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_+0x50>)
 8010312:	4a06      	ldr	r2, [pc, #24]	; (801032c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_+0x54>)
 8010314:	f240 21f2 	movw	r1, #754	; 0x2f2
 8010318:	4805      	ldr	r0, [pc, #20]	; (8010330 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_+0x58>)
 801031a:	f00c fe8b 	bl	801d034 <__assert_func>
}
 801031e:	bf00      	nop
 8010320:	3714      	adds	r7, #20
 8010322:	46bd      	mov	sp, r7
 8010324:	bd90      	pop	{r4, r7, pc}
 8010326:	bf00      	nop
 8010328:	08021c30 	.word	0x08021c30
 801032c:	08027558 	.word	0x08027558
 8010330:	08021628 	.word	0x08021628

08010334 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEC1ERS5_RKSA_RKSC_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8010334:	b480      	push	{r7}
 8010336:	b085      	sub	sp, #20
 8010338:	af00      	add	r7, sp, #0
 801033a:	60f8      	str	r0, [r7, #12]
 801033c:	60b9      	str	r1, [r7, #8]
 801033e:	607a      	str	r2, [r7, #4]
 8010340:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	68ba      	ldr	r2, [r7, #8]
 8010346:	601a      	str	r2, [r3, #0]
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	687a      	ldr	r2, [r7, #4]
 801034c:	605a      	str	r2, [r3, #4]
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	683a      	ldr	r2, [r7, #0]
 8010352:	609a      	str	r2, [r3, #8]
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	69ba      	ldr	r2, [r7, #24]
 8010358:	60da      	str	r2, [r3, #12]
  }
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	4618      	mov	r0, r3
 801035e:	3714      	adds	r7, #20
 8010360:	46bd      	mov	sp, r7
 8010362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010366:	4770      	bx	lr

08010368 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi0ELi2EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8010368:	b580      	push	{r7, lr}
 801036a:	b082      	sub	sp, #8
 801036c:	af00      	add	r7, sp, #0
 801036e:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8010370:	6878      	ldr	r0, [r7, #4]
 8010372:	f000 fb6f 	bl	8010a54 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi0ELi9EE3runERSE_>
  }
 8010376:	bf00      	nop
 8010378:	3708      	adds	r7, #8
 801037a:	46bd      	mov	sp, r7
 801037c:	bd80      	pop	{r7, pc}

0801037e <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EEC1ERKNS_5BlockIS4_Li3ELi1ELb1EEE>:
  explicit block_evaluator(const XprType& block)
 801037e:	b580      	push	{r7, lr}
 8010380:	b082      	sub	sp, #8
 8010382:	af00      	add	r7, sp, #0
 8010384:	6078      	str	r0, [r7, #4]
 8010386:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	6839      	ldr	r1, [r7, #0]
 801038c:	4618      	mov	r0, r3
 801038e:	f000 fb71 	bl	8010a74 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS6_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 8010392:	683b      	ldr	r3, [r7, #0]
 8010394:	4618      	mov	r0, r3
 8010396:	f000 fb97 	bl	8010ac8 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4dataEv>
 801039a:	bf00      	nop
  }
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	4618      	mov	r0, r3
 80103a0:	3708      	adds	r7, #8
 80103a2:	46bd      	mov	sp, r7
 80103a4:	bd80      	pop	{r7, pc}

080103a6 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 80103a6:	b580      	push	{r7, lr}
 80103a8:	b082      	sub	sp, #8
 80103aa:	af00      	add	r7, sp, #0
 80103ac:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 80103ae:	f7f5 fd16 	bl	8005dde <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 80103b2:	4603      	mov	r3, r0
  }
 80103b4:	4618      	mov	r0, r3
 80103b6:	3708      	adds	r7, #8
 80103b8:	46bd      	mov	sp, r7
 80103ba:	bd80      	pop	{r7, pc}

080103bc <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 80103bc:	b580      	push	{r7, lr}
 80103be:	b082      	sub	sp, #8
 80103c0:	af00      	add	r7, sp, #0
 80103c2:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 80103c4:	f7f5 fd13 	bl	8005dee <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 80103c8:	4603      	mov	r3, r0
  }
 80103ca:	4618      	mov	r0, r3
 80103cc:	3708      	adds	r7, #8
 80103ce:	46bd      	mov	sp, r7
 80103d0:	bd80      	pop	{r7, pc}

080103d2 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 80103d2:	b480      	push	{r7}
 80103d4:	b083      	sub	sp, #12
 80103d6:	af00      	add	r7, sp, #0
 80103d8:	6078      	str	r0, [r7, #4]
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	4618      	mov	r0, r3
 80103de:	370c      	adds	r7, #12
 80103e0:	46bd      	mov	sp, r7
 80103e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e6:	4770      	bx	lr

080103e8 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 80103e8:	b480      	push	{r7}
 80103ea:	b083      	sub	sp, #12
 80103ec:	af00      	add	r7, sp, #0
 80103ee:	6078      	str	r0, [r7, #4]
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	4618      	mov	r0, r3
 80103f4:	370c      	adds	r7, #12
 80103f6:	46bd      	mov	sp, r7
 80103f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103fc:	4770      	bx	lr

080103fe <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERSH_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 80103fe:	b580      	push	{r7, lr}
 8010400:	b082      	sub	sp, #8
 8010402:	af00      	add	r7, sp, #0
 8010404:	6078      	str	r0, [r7, #4]
 8010406:	6039      	str	r1, [r7, #0]
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	6839      	ldr	r1, [r7, #0]
 801040c:	4618      	mov	r0, r3
 801040e:	f000 fb67 	bl	8010ae0 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERKSG_>
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	4618      	mov	r0, r3
 8010416:	3708      	adds	r7, #8
 8010418:	46bd      	mov	sp, r7
 801041a:	bd80      	pop	{r7, pc}

0801041c <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEEC1ERKS8_>:
  explicit mapbase_evaluator(const XprType& map)
 801041c:	b590      	push	{r4, r7, lr}
 801041e:	b083      	sub	sp, #12
 8010420:	af00      	add	r7, sp, #0
 8010422:	6078      	str	r0, [r7, #4]
 8010424:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 8010426:	6878      	ldr	r0, [r7, #4]
 8010428:	f000 fb85 	bl	8010b36 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 801042c:	683b      	ldr	r3, [r7, #0]
 801042e:	4618      	mov	r0, r3
 8010430:	f000 f81e 	bl	8010470 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE4dataEv>
 8010434:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	601a      	str	r2, [r3, #0]
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	1d1c      	adds	r4, r3, #4
 801043e:	683b      	ldr	r3, [r7, #0]
 8010440:	4618      	mov	r0, r3
 8010442:	f000 fb5c 	bl	8010afe <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EE11innerStrideEv>
 8010446:	4603      	mov	r3, r0
 8010448:	4619      	mov	r1, r3
 801044a:	4620      	mov	r0, r4
 801044c:	f7f5 fca2 	bl	8005d94 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	1d5c      	adds	r4, r3, #5
 8010454:	683b      	ldr	r3, [r7, #0]
 8010456:	4618      	mov	r0, r3
 8010458:	f000 fb5f 	bl	8010b1a <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EE11outerStrideEv>
 801045c:	4603      	mov	r3, r0
 801045e:	4619      	mov	r1, r3
 8010460:	4620      	mov	r0, r4
 8010462:	f7f5 fc7d 	bl	8005d60 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	4618      	mov	r0, r3
 801046a:	370c      	adds	r7, #12
 801046c:	46bd      	mov	sp, r7
 801046e:	bd90      	pop	{r4, r7, pc}

08010470 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE4dataEv>:
 8010470:	b480      	push	{r7}
 8010472:	b083      	sub	sp, #12
 8010474:	af00      	add	r7, sp, #0
 8010476:	6078      	str	r0, [r7, #4]
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	4618      	mov	r0, r3
 801047e:	370c      	adds	r7, #12
 8010480:	46bd      	mov	sp, r7
 8010482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010486:	4770      	bx	lr

08010488 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 8010488:	b480      	push	{r7}
 801048a:	b083      	sub	sp, #12
 801048c:	af00      	add	r7, sp, #0
 801048e:	6078      	str	r0, [r7, #4]
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	4618      	mov	r0, r3
 8010494:	370c      	adds	r7, #12
 8010496:	46bd      	mov	sp, r7
 8010498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801049c:	4770      	bx	lr

0801049e <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 801049e:	b590      	push	{r4, r7, lr}
 80104a0:	b085      	sub	sp, #20
 80104a2:	af00      	add	r7, sp, #0
 80104a4:	60f8      	str	r0, [r7, #12]
 80104a6:	60b9      	str	r1, [r7, #8]
 80104a8:	607a      	str	r2, [r7, #4]
      return m_d.data[row + col * m_d.outerStride()];
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	681c      	ldr	r4, [r3, #0]
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	4618      	mov	r0, r3
 80104b2:	f7f5 feef 	bl	8006294 <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EE11outerStrideEv>
 80104b6:	4602      	mov	r2, r0
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	fb03 f202 	mul.w	r2, r3, r2
 80104be:	68bb      	ldr	r3, [r7, #8]
 80104c0:	4413      	add	r3, r2
 80104c2:	009b      	lsls	r3, r3, #2
 80104c4:	4423      	add	r3, r4
  }
 80104c6:	4618      	mov	r0, r3
 80104c8:	3714      	adds	r7, #20
 80104ca:	46bd      	mov	sp, r7
 80104cc:	bd90      	pop	{r4, r7, pc}

080104ce <_ZNK5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffIiEEfT_SB_>:
  CoeffReturnType coeff(IndexType row, IndexType col) const
 80104ce:	b580      	push	{r7, lr}
 80104d0:	b084      	sub	sp, #16
 80104d2:	af00      	add	r7, sp, #0
 80104d4:	60f8      	str	r0, [r7, #12]
 80104d6:	60b9      	str	r1, [r7, #8]
 80104d8:	607a      	str	r2, [r7, #4]
    return m_wrapper(m_functor, row, col);
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	1d18      	adds	r0, r3, #4
 80104de:	68f9      	ldr	r1, [r7, #12]
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	68ba      	ldr	r2, [r7, #8]
 80104e4:	f000 fb32 	bl	8010b4c <_ZNK5Eigen8internal15nullary_wrapperIfNS0_18scalar_constant_opIfEELb1ELb0ELb0EEclIiEEfRKS3_T_S8_>
 80104e8:	eef0 7a40 	vmov.f32	s15, s0
  }
 80104ec:	eeb0 0a67 	vmov.f32	s0, s15
 80104f0:	3710      	adds	r7, #16
 80104f2:	46bd      	mov	sp, r7
 80104f4:	bd80      	pop	{r7, pc}

080104f6 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 80104f6:	b580      	push	{r7, lr}
 80104f8:	b082      	sub	sp, #8
 80104fa:	af00      	add	r7, sp, #0
 80104fc:	6078      	str	r0, [r7, #4]
 80104fe:	6039      	str	r1, [r7, #0]
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	6839      	ldr	r1, [r7, #0]
 8010504:	4618      	mov	r0, r3
 8010506:	f000 fb32 	bl	8010b6e <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EEC1ERKNS_5BlockIS4_Li1ELi3ELb0EEE>
  }
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	4618      	mov	r0, r3
 801050e:	3708      	adds	r7, #8
 8010510:	46bd      	mov	sp, r7
 8010512:	bd80      	pop	{r7, pc}

08010514 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 8010514:	b580      	push	{r7, lr}
 8010516:	b082      	sub	sp, #8
 8010518:	af00      	add	r7, sp, #0
 801051a:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	689b      	ldr	r3, [r3, #8]
 8010520:	4618      	mov	r0, r3
 8010522:	f7fc fcca 	bl	800ceba <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11innerStrideEv>
 8010526:	4603      	mov	r3, r0
    }
 8010528:	4618      	mov	r0, r3
 801052a:	3708      	adds	r7, #8
 801052c:	46bd      	mov	sp, r7
 801052e:	bd80      	pop	{r7, pc}

08010530 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 8010530:	b580      	push	{r7, lr}
 8010532:	b082      	sub	sp, #8
 8010534:	af00      	add	r7, sp, #0
 8010536:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	689b      	ldr	r3, [r3, #8]
 801053c:	4618      	mov	r0, r3
 801053e:	f7f6 f82d 	bl	800659c <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>
 8010542:	4603      	mov	r3, r0
    }
 8010544:	4618      	mov	r0, r3
 8010546:	3708      	adds	r7, #8
 8010548:	46bd      	mov	sp, r7
 801054a:	bd80      	pop	{r7, pc}

0801054c <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 801054c:	b480      	push	{r7}
 801054e:	b083      	sub	sp, #12
 8010550:	af00      	add	r7, sp, #0
 8010552:	6078      	str	r0, [r7, #4]
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	4618      	mov	r0, r3
 8010558:	370c      	adds	r7, #12
 801055a:	46bd      	mov	sp, r7
 801055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010560:	4770      	bx	lr

08010562 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8010562:	b480      	push	{r7}
 8010564:	b083      	sub	sp, #12
 8010566:	af00      	add	r7, sp, #0
 8010568:	6078      	str	r0, [r7, #4]
    }
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	4618      	mov	r0, r3
 801056e:	370c      	adds	r7, #12
 8010570:	46bd      	mov	sp, r7
 8010572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010576:	4770      	bx	lr

08010578 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 8010578:	b580      	push	{r7, lr}
 801057a:	b082      	sub	sp, #8
 801057c:	af00      	add	r7, sp, #0
 801057e:	6078      	str	r0, [r7, #4]
 8010580:	6039      	str	r1, [r7, #0]
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	4618      	mov	r0, r3
 8010586:	f7f3 fe60 	bl	800424a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 801058a:	4603      	mov	r3, r0
 801058c:	2b01      	cmp	r3, #1
 801058e:	dd08      	ble.n	80105a2 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEEEvRKT_RKT0_+0x2a>
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	4618      	mov	r0, r3
 8010594:	f7f3 fe4e 	bl	8004234 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8010598:	4603      	mov	r3, r0
 801059a:	2b01      	cmp	r3, #1
 801059c:	dd01      	ble.n	80105a2 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEEEvRKT_RKT0_+0x2a>
 801059e:	2301      	movs	r3, #1
 80105a0:	e000      	b.n	80105a4 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEEEvRKT_RKT0_+0x2c>
 80105a2:	2300      	movs	r3, #0
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d003      	beq.n	80105b0 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEEEvRKT_RKT0_+0x38>
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
 80105a8:	6839      	ldr	r1, [r7, #0]
 80105aa:	6878      	ldr	r0, [r7, #4]
 80105ac:	f000 faf3 	bl	8010b96 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEELb0EE3runERKS3_RKS5_>
}
 80105b0:	bf00      	nop
 80105b2:	3708      	adds	r7, #8
 80105b4:	46bd      	mov	sp, r7
 80105b6:	bd80      	pop	{r7, pc}

080105b8 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEELi3ENS_10DenseShapeES6_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 80105b8:	b580      	push	{r7, lr}
 80105ba:	b082      	sub	sp, #8
 80105bc:	af00      	add	r7, sp, #0
 80105be:	6078      	str	r0, [r7, #4]
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	330c      	adds	r3, #12
 80105c4:	4618      	mov	r0, r3
 80105c6:	f7f6 f8c8 	bl	800675a <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	3308      	adds	r3, #8
 80105ce:	4618      	mov	r0, r3
 80105d0:	f7f6 f8c3 	bl	800675a <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 80105d4:	6878      	ldr	r0, [r7, #4]
 80105d6:	f000 faf8 	bl	8010bca <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEED1Ev>
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	4618      	mov	r0, r3
 80105de:	3708      	adds	r7, #8
 80105e0:	46bd      	mov	sp, r7
 80105e2:	bd80      	pop	{r7, pc}

080105e4 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 80105e4:	b580      	push	{r7, lr}
 80105e6:	b082      	sub	sp, #8
 80105e8:	af00      	add	r7, sp, #0
 80105ea:	6078      	str	r0, [r7, #4]
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	4618      	mov	r0, r3
 80105f0:	f7ff ffe2 	bl	80105b8 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEELi3ENS_10DenseShapeES6_ffED1Ev>
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	4618      	mov	r0, r3
 80105f8:	3708      	adds	r7, #8
 80105fa:	46bd      	mov	sp, r7
 80105fc:	bd80      	pop	{r7, pc}

080105fe <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 80105fe:	b580      	push	{r7, lr}
 8010600:	b090      	sub	sp, #64	; 0x40
 8010602:	af02      	add	r7, sp, #8
 8010604:	60f8      	str	r0, [r7, #12]
 8010606:	60b9      	str	r1, [r7, #8]
 8010608:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 801060a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801060e:	68b9      	ldr	r1, [r7, #8]
 8010610:	4618      	mov	r0, r3
 8010612:	f000 facb 	bl	8010bac <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEC1ERKS5_>
  resize_if_allowed(dst, src, func);
 8010616:	687a      	ldr	r2, [r7, #4]
 8010618:	68b9      	ldr	r1, [r7, #8]
 801061a:	68f8      	ldr	r0, [r7, #12]
 801061c:	f000 fafc 	bl	8010c18 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 8010620:	f107 0320 	add.w	r3, r7, #32
 8010624:	68f9      	ldr	r1, [r7, #12]
 8010626:	4618      	mov	r0, r3
 8010628:	f7f6 faa6 	bl	8006b78 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 801062c:	68f8      	ldr	r0, [r7, #12]
 801062e:	f7f6 fb0b 	bl	8006c48 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE18const_cast_derivedEv>
 8010632:	4603      	mov	r3, r0
 8010634:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8010638:	f107 0120 	add.w	r1, r7, #32
 801063c:	f107 0010 	add.w	r0, r7, #16
 8010640:	9300      	str	r3, [sp, #0]
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	f000 fb32 	bl	8010cac <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKS8_RKSA_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 8010648:	f107 0310 	add.w	r3, r7, #16
 801064c:	4618      	mov	r0, r3
 801064e:	f000 fb47 	bl	8010ce0 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSC_>
  DstEvaluatorType dstEvaluator(dst);
 8010652:	f107 0320 	add.w	r3, r7, #32
 8010656:	4618      	mov	r0, r3
 8010658:	f7f6 f87f 	bl	800675a <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 801065c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010660:	4618      	mov	r0, r3
 8010662:	f7ff ffbf 	bl	80105e4 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEED1Ev>
}
 8010666:	bf00      	nop
 8010668:	3738      	adds	r7, #56	; 0x38
 801066a:	46bd      	mov	sp, r7
 801066c:	bd80      	pop	{r7, pc}

0801066e <_ZN5Eigen9DenseBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 801066e:	b480      	push	{r7}
 8010670:	b083      	sub	sp, #12
 8010672:	af00      	add	r7, sp, #0
 8010674:	6078      	str	r0, [r7, #4]
    }
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	4618      	mov	r0, r3
 801067a:	370c      	adds	r7, #12
 801067c:	46bd      	mov	sp, r7
 801067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010682:	4770      	bx	lr

08010684 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE11checkSanityIS7_EEvNS_8internal9enable_ifIXeqsrNSA_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 8010684:	b480      	push	{r7}
 8010686:	b083      	sub	sp, #12
 8010688:	af00      	add	r7, sp, #0
 801068a:	6078      	str	r0, [r7, #4]
 801068c:	6039      	str	r1, [r7, #0]
    {}
 801068e:	bf00      	nop
 8010690:	370c      	adds	r7, #12
 8010692:	46bd      	mov	sp, r7
 8010694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010698:	4770      	bx	lr

0801069a <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1Ev>:
 801069a:	b480      	push	{r7}
 801069c:	b083      	sub	sp, #12
 801069e:	af00      	add	r7, sp, #0
 80106a0:	6078      	str	r0, [r7, #4]
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	4618      	mov	r0, r3
 80106a6:	370c      	adds	r7, #12
 80106a8:	46bd      	mov	sp, r7
 80106aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ae:	4770      	bx	lr

080106b0 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 80106b0:	b590      	push	{r4, r7, lr}
 80106b2:	b083      	sub	sp, #12
 80106b4:	af00      	add	r7, sp, #0
 80106b6:	6078      	str	r0, [r7, #4]
 80106b8:	6039      	str	r1, [r7, #0]
 80106ba:	687c      	ldr	r4, [r7, #4]
 80106bc:	6838      	ldr	r0, [r7, #0]
 80106be:	f000 fb1a 	bl	8010cf6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE7functorEv>
 80106c2:	4603      	mov	r3, r0
 80106c4:	4619      	mov	r1, r3
 80106c6:	4620      	mov	r0, r4
 80106c8:	f7f4 f8ea 	bl	80048a0 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	1d1c      	adds	r4, r3, #4
 80106d0:	6838      	ldr	r0, [r7, #0]
 80106d2:	f000 fb1c 	bl	8010d0e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE3lhsEv>
 80106d6:	4603      	mov	r3, r0
 80106d8:	4619      	mov	r1, r3
 80106da:	4620      	mov	r0, r4
 80106dc:	f7fd fc27 	bl	800df2e <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERSA_>
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	f103 040c 	add.w	r4, r3, #12
 80106e6:	6838      	ldr	r0, [r7, #0]
 80106e8:	f000 fb1c 	bl	8010d24 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE3rhsEv>
 80106ec:	4603      	mov	r3, r0
 80106ee:	4619      	mov	r1, r3
 80106f0:	4620      	mov	r0, r4
 80106f2:	f000 fb23 	bl	8010d3c <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1ERS9_>
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	4618      	mov	r0, r3
 80106fa:	370c      	adds	r7, #12
 80106fc:	46bd      	mov	sp, r7
 80106fe:	bd90      	pop	{r4, r7, pc}

08010700 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 8010700:	b580      	push	{r7, lr}
 8010702:	b084      	sub	sp, #16
 8010704:	af00      	add	r7, sp, #0
 8010706:	60f8      	str	r0, [r7, #12]
 8010708:	60b9      	str	r1, [r7, #8]
 801070a:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	68ba      	ldr	r2, [r7, #8]
 8010710:	6879      	ldr	r1, [r7, #4]
 8010712:	4618      	mov	r0, r3
 8010714:	f000 fb21 	bl	8010d5a <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE5coeffEii>
 8010718:	eef0 7a40 	vmov.f32	s15, s0
 801071c:	eeb0 0a67 	vmov.f32	s0, s15
 8010720:	3710      	adds	r7, #16
 8010722:	46bd      	mov	sp, r7
 8010724:	bd80      	pop	{r7, pc}

08010726 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi1ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8010726:	b580      	push	{r7, lr}
 8010728:	b082      	sub	sp, #8
 801072a:	af00      	add	r7, sp, #0
 801072c:	6078      	str	r0, [r7, #4]
 801072e:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8010730:	2201      	movs	r2, #1
 8010732:	2100      	movs	r1, #0
 8010734:	6878      	ldr	r0, [r7, #4]
 8010736:	f7ff ffe3 	bl	8010700 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE17coeffByOuterInnerEii>
 801073a:	eef0 7a40 	vmov.f32	s15, s0
  }
 801073e:	eeb0 0a67 	vmov.f32	s0, s15
 8010742:	3708      	adds	r7, #8
 8010744:	46bd      	mov	sp, r7
 8010746:	bd80      	pop	{r7, pc}

08010748 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi2ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8010748:	b580      	push	{r7, lr}
 801074a:	b082      	sub	sp, #8
 801074c:	af00      	add	r7, sp, #0
 801074e:	6078      	str	r0, [r7, #4]
 8010750:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8010752:	2202      	movs	r2, #2
 8010754:	2100      	movs	r1, #0
 8010756:	6878      	ldr	r0, [r7, #4]
 8010758:	f7ff ffd2 	bl	8010700 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE17coeffByOuterInnerEii>
 801075c:	eef0 7a40 	vmov.f32	s15, s0
  }
 8010760:	eeb0 0a67 	vmov.f32	s0, s15
 8010764:	3708      	adds	r7, #8
 8010766:	46bd      	mov	sp, r7
 8010768:	bd80      	pop	{r7, pc}

0801076a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 801076a:	b480      	push	{r7}
 801076c:	b083      	sub	sp, #12
 801076e:	af00      	add	r7, sp, #0
 8010770:	6078      	str	r0, [r7, #4]
 8010772:	bf00      	nop
 8010774:	370c      	adds	r7, #12
 8010776:	46bd      	mov	sp, r7
 8010778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801077c:	4770      	bx	lr

0801077e <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfEC1ERKS5_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 801077e:	b590      	push	{r4, r7, lr}
 8010780:	b083      	sub	sp, #12
 8010782:	af00      	add	r7, sp, #0
 8010784:	6078      	str	r0, [r7, #4]
 8010786:	6039      	str	r1, [r7, #0]
 8010788:	6878      	ldr	r0, [r7, #4]
 801078a:	f000 fb22 	bl	8010dd2 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>
 801078e:	687c      	ldr	r4, [r7, #4]
 8010790:	6838      	ldr	r0, [r7, #0]
 8010792:	f000 fb12 	bl	8010dba <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE16nestedExpressionEv>
 8010796:	4603      	mov	r3, r0
 8010798:	4619      	mov	r1, r3
 801079a:	4620      	mov	r0, r4
 801079c:	f000 fb24 	bl	8010de8 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS3_>
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	4618      	mov	r0, r3
 80107a4:	370c      	adds	r7, #12
 80107a6:	46bd      	mov	sp, r7
 80107a8:	bd90      	pop	{r4, r7, pc}

080107aa <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEELi3ENS_10DenseShapeES9_ffE5coeffEi>:
  const CoeffReturnType coeff(Index index) const
 80107aa:	b580      	push	{r7, lr}
 80107ac:	b0a4      	sub	sp, #144	; 0x90
 80107ae:	af00      	add	r7, sp, #0
 80107b0:	6078      	str	r0, [r7, #4]
 80107b2:	6039      	str	r1, [r7, #0]
    const Index row = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? 0 : index;
 80107b4:	683b      	ldr	r3, [r7, #0]
 80107b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    const Index col = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? index : 0;
 80107ba:	2300      	movs	r3, #0
 80107bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	6819      	ldr	r1, [r3, #0]
 80107c4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80107c8:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80107cc:	4618      	mov	r0, r3
 80107ce:	f7f9 fcdb 	bl	800a188 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3rowEi>
 80107d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80107d6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80107da:	4611      	mov	r1, r2
 80107dc:	4618      	mov	r0, r3
 80107de:	f7f9 fce6 	bl	800a1ae <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE9transposeEv>
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	1d19      	adds	r1, r3, #4
 80107e6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80107ea:	2200      	movs	r2, #0
 80107ec:	4618      	mov	r0, r3
 80107ee:	f000 fb0b 	bl	8010e08 <_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE3colEi>
 80107f2:	f107 030c 	add.w	r3, r7, #12
 80107f6:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80107fa:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80107fe:	4618      	mov	r0, r3
 8010800:	f000 fb15 	bl	8010e2e <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IKNS1_INS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSG_6traitsIT_E6ScalarEEEKS8_KSJ_EERKNS0_ISJ_EE>
 8010804:	f107 030c 	add.w	r3, r7, #12
 8010808:	4618      	mov	r0, r3
 801080a:	f000 fb3e 	bl	8010e8a <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE3sumEv>
 801080e:	eef0 7a40 	vmov.f32	s15, s0
  }
 8010812:	eeb0 0a67 	vmov.f32	s0, s15
 8010816:	3790      	adds	r7, #144	; 0x90
 8010818:	46bd      	mov	sp, r7
 801081a:	bd80      	pop	{r7, pc}

0801081c <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 801081c:	b580      	push	{r7, lr}
 801081e:	b082      	sub	sp, #8
 8010820:	af00      	add	r7, sp, #0
 8010822:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8010824:	2102      	movs	r1, #2
 8010826:	6878      	ldr	r0, [r7, #4]
 8010828:	f7ff fa67 	bl	800fcfa <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 801082c:	6878      	ldr	r0, [r7, #4]
 801082e:	f000 fb47 	bl	8010ec0 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSG_>
  }
 8010832:	bf00      	nop
 8010834:	3708      	adds	r7, #8
 8010836:	46bd      	mov	sp, r7
 8010838:	bd80      	pop	{r7, pc}

0801083a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffEC1ERKSG_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 801083a:	b580      	push	{r7, lr}
 801083c:	b082      	sub	sp, #8
 801083e:	af00      	add	r7, sp, #0
 8010840:	6078      	str	r0, [r7, #4]
 8010842:	6039      	str	r1, [r7, #0]
 8010844:	6878      	ldr	r0, [r7, #4]
 8010846:	f000 fb45 	bl	8010ed4 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	6839      	ldr	r1, [r7, #0]
 801084e:	4618      	mov	r0, r3
 8010850:	f000 fb4b 	bl	8010eea <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE4DataC1ERKSG_>
  }
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	4618      	mov	r0, r3
 8010858:	3708      	adds	r7, #8
 801085a:	46bd      	mov	sp, r7
 801085c:	bd80      	pop	{r7, pc}

0801085e <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_INS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi0ELi1EE3runERSN_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 801085e:	b580      	push	{r7, lr}
 8010860:	b082      	sub	sp, #8
 8010862:	af00      	add	r7, sp, #0
 8010864:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8010866:	2100      	movs	r1, #0
 8010868:	6878      	ldr	r0, [r7, #4]
 801086a:	f000 fb66 	bl	8010f3a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_INS3_IfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 801086e:	6878      	ldr	r0, [r7, #4]
 8010870:	f000 fb86 	bl	8010f80 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_INS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi1ELi1EE3runERSN_>
  }
 8010874:	bf00      	nop
 8010876:	3708      	adds	r7, #8
 8010878:	46bd      	mov	sp, r7
 801087a:	bd80      	pop	{r7, pc}

0801087c <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 801087c:	b580      	push	{r7, lr}
 801087e:	b082      	sub	sp, #8
 8010880:	af00      	add	r7, sp, #0
 8010882:	6078      	str	r0, [r7, #4]
 8010884:	6039      	str	r1, [r7, #0]
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	6839      	ldr	r1, [r7, #0]
 801088a:	4618      	mov	r0, r3
 801088c:	f000 fb82 	bl	8010f94 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EEC1ERKNS_5BlockIS4_Li1ELi1ELb0EEE>
  }
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	4618      	mov	r0, r3
 8010894:	3708      	adds	r7, #8
 8010896:	46bd      	mov	sp, r7
 8010898:	bd80      	pop	{r7, pc}

0801089a <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 801089a:	b580      	push	{r7, lr}
 801089c:	b082      	sub	sp, #8
 801089e:	af00      	add	r7, sp, #0
 80108a0:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	689b      	ldr	r3, [r3, #8]
 80108a6:	4618      	mov	r0, r3
 80108a8:	f7fc fd14 	bl	800d2d4 <_ZNK5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EE11innerStrideEv>
 80108ac:	4603      	mov	r3, r0
    }
 80108ae:	4618      	mov	r0, r3
 80108b0:	3708      	adds	r7, #8
 80108b2:	46bd      	mov	sp, r7
 80108b4:	bd80      	pop	{r7, pc}

080108b6 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 80108b6:	b580      	push	{r7, lr}
 80108b8:	b082      	sub	sp, #8
 80108ba:	af00      	add	r7, sp, #0
 80108bc:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	689b      	ldr	r3, [r3, #8]
 80108c2:	4618      	mov	r0, r3
 80108c4:	f7fa fba2 	bl	800b00c <_ZNK5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EE11outerStrideEv>
 80108c8:	4603      	mov	r3, r0
    }
 80108ca:	4618      	mov	r0, r3
 80108cc:	3708      	adds	r7, #8
 80108ce:	46bd      	mov	sp, r7
 80108d0:	bd80      	pop	{r7, pc}

080108d2 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 80108d2:	b480      	push	{r7}
 80108d4:	b083      	sub	sp, #12
 80108d6:	af00      	add	r7, sp, #0
 80108d8:	6078      	str	r0, [r7, #4]
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	4618      	mov	r0, r3
 80108de:	370c      	adds	r7, #12
 80108e0:	46bd      	mov	sp, r7
 80108e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108e6:	4770      	bx	lr

080108e8 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 80108e8:	b5b0      	push	{r4, r5, r7, lr}
 80108ea:	b082      	sub	sp, #8
 80108ec:	af00      	add	r7, sp, #0
 80108ee:	6078      	str	r0, [r7, #4]
 80108f0:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	689c      	ldr	r4, [r3, #8]
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	6839      	ldr	r1, [r7, #0]
 80108fc:	4618      	mov	r0, r3
 80108fe:	f000 fb5d 	bl	8010fbc <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE8coeffRefEi>
 8010902:	4605      	mov	r5, r0
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	685b      	ldr	r3, [r3, #4]
 8010908:	6839      	ldr	r1, [r7, #0]
 801090a:	4618      	mov	r0, r3
 801090c:	f000 fb66 	bl	8010fdc <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE5coeffEi>
 8010910:	4603      	mov	r3, r0
 8010912:	461a      	mov	r2, r3
 8010914:	4629      	mov	r1, r5
 8010916:	4620      	mov	r0, r4
 8010918:	f7f7 f836 	bl	8007988 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 801091c:	bf00      	nop
 801091e:	3708      	adds	r7, #8
 8010920:	46bd      	mov	sp, r7
 8010922:	bdb0      	pop	{r4, r5, r7, pc}

08010924 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi1EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 8010924:	b480      	push	{r7}
 8010926:	b083      	sub	sp, #12
 8010928:	af00      	add	r7, sp, #0
 801092a:	6078      	str	r0, [r7, #4]
 801092c:	bf00      	nop
 801092e:	370c      	adds	r7, #12
 8010930:	46bd      	mov	sp, r7
 8010932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010936:	4770      	bx	lr

08010938 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8010938:	b480      	push	{r7}
 801093a:	b083      	sub	sp, #12
 801093c:	af00      	add	r7, sp, #0
 801093e:	6078      	str	r0, [r7, #4]
    }
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	4618      	mov	r0, r3
 8010944:	370c      	adds	r7, #12
 8010946:	46bd      	mov	sp, r7
 8010948:	f85d 7b04 	ldr.w	r7, [sp], #4
 801094c:	4770      	bx	lr

0801094e <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 801094e:	b480      	push	{r7}
 8010950:	b083      	sub	sp, #12
 8010952:	af00      	add	r7, sp, #0
 8010954:	6078      	str	r0, [r7, #4]
    }
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	4618      	mov	r0, r3
 801095a:	370c      	adds	r7, #12
 801095c:	46bd      	mov	sp, r7
 801095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010962:	4770      	bx	lr

08010964 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 8010964:	b580      	push	{r7, lr}
 8010966:	b082      	sub	sp, #8
 8010968:	af00      	add	r7, sp, #0
 801096a:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	4618      	mov	r0, r3
 8010970:	f7ff fb42 	bl	800fff8 <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8010974:	4603      	mov	r3, r0
    }
 8010976:	4618      	mov	r0, r3
 8010978:	3708      	adds	r7, #8
 801097a:	46bd      	mov	sp, r7
 801097c:	bd80      	pop	{r7, pc}

0801097e <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKSD_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 801097e:	b580      	push	{r7, lr}
 8010980:	b082      	sub	sp, #8
 8010982:	af00      	add	r7, sp, #0
 8010984:	6078      	str	r0, [r7, #4]
 8010986:	6039      	str	r1, [r7, #0]
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	6839      	ldr	r1, [r7, #0]
 801098c:	4618      	mov	r0, r3
 801098e:	f000 fb35 	bl	8010ffc <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKSD_>
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	4618      	mov	r0, r3
 8010996:	3708      	adds	r7, #8
 8010998:	46bd      	mov	sp, r7
 801099a:	bd80      	pop	{r7, pc}

0801099c <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 801099c:	b480      	push	{r7}
 801099e:	b083      	sub	sp, #12
 80109a0:	af00      	add	r7, sp, #0
 80109a2:	6078      	str	r0, [r7, #4]
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	4618      	mov	r0, r3
 80109a8:	370c      	adds	r7, #12
 80109aa:	46bd      	mov	sp, r7
 80109ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109b0:	4770      	bx	lr

080109b2 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>:
 80109b2:	b480      	push	{r7}
 80109b4:	b083      	sub	sp, #12
 80109b6:	af00      	add	r7, sp, #0
 80109b8:	6078      	str	r0, [r7, #4]
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	4618      	mov	r0, r3
 80109be:	370c      	adds	r7, #12
 80109c0:	46bd      	mov	sp, r7
 80109c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109c6:	4770      	bx	lr

080109c8 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi0ELi2EE3runISG_EEfRKSH_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 80109c8:	b580      	push	{r7, lr}
 80109ca:	b084      	sub	sp, #16
 80109cc:	af00      	add	r7, sp, #0
 80109ce:	60f8      	str	r0, [r7, #12]
 80109d0:	60b9      	str	r1, [r7, #8]
 80109d2:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 80109d4:	68b9      	ldr	r1, [r7, #8]
 80109d6:	68f8      	ldr	r0, [r7, #12]
 80109d8:	f000 fb1f 	bl	801101a <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi0ELi3EE3runERKSH_RKS3_>
 80109dc:	eef0 7a40 	vmov.f32	s15, s0
  }
 80109e0:	eeb0 0a67 	vmov.f32	s0, s15
 80109e4:	3710      	adds	r7, #16
 80109e6:	46bd      	mov	sp, r7
 80109e8:	bd80      	pop	{r7, pc}

080109ea <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELi4ENS_10DenseShapeES7_ffEC1ERKS6_>:
  explicit product_evaluator(const XprType& xpr)
 80109ea:	b580      	push	{r7, lr}
 80109ec:	b082      	sub	sp, #8
 80109ee:	af00      	add	r7, sp, #0
 80109f0:	6078      	str	r0, [r7, #4]
 80109f2:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 80109f4:	6878      	ldr	r0, [r7, #4]
 80109f6:	f000 fb4c 	bl	8011092 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1Ev>
    : m_lhs(xpr.lhs()),
 80109fa:	6838      	ldr	r0, [r7, #0]
 80109fc:	f000 fb31 	bl	8011062 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE3lhsEv>
 8010a00:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	601a      	str	r2, [r3, #0]
      m_rhs(xpr.rhs()),
 8010a06:	6838      	ldr	r0, [r7, #0]
 8010a08:	f000 fb37 	bl	801107a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE3rhsEv>
 8010a0c:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	605a      	str	r2, [r3, #4]
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	f103 0208 	add.w	r2, r3, #8
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	681b      	ldr	r3, [r3, #0]
      m_innerDim(xpr.lhs().cols())
 8010a1c:	4619      	mov	r1, r3
 8010a1e:	4610      	mov	r0, r2
 8010a20:	f7f5 f95f 	bl	8005ce2 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	f103 020c 	add.w	r2, r3, #12
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	685b      	ldr	r3, [r3, #4]
      m_innerDim(xpr.lhs().cols())
 8010a2e:	4619      	mov	r1, r3
 8010a30:	4610      	mov	r0, r2
 8010a32:	f000 f9d9 	bl	8010de8 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS3_>
 8010a36:	6838      	ldr	r0, [r7, #0]
 8010a38:	f000 fb13 	bl	8011062 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE3lhsEv>
 8010a3c:	4603      	mov	r3, r0
 8010a3e:	4618      	mov	r0, r3
 8010a40:	f7f3 fc9e 	bl	8004380 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8010a44:	4602      	mov	r2, r0
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	611a      	str	r2, [r3, #16]
  }
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	4618      	mov	r0, r3
 8010a4e:	3708      	adds	r7, #8
 8010a50:	46bd      	mov	sp, r7
 8010a52:	bd80      	pop	{r7, pc}

08010a54 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi0ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8010a54:	b580      	push	{r7, lr}
 8010a56:	b082      	sub	sp, #8
 8010a58:	af00      	add	r7, sp, #0
 8010a5a:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8010a5c:	2200      	movs	r2, #0
 8010a5e:	2100      	movs	r1, #0
 8010a60:	6878      	ldr	r0, [r7, #4]
 8010a62:	f000 fb21 	bl	80110a8 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8010a66:	6878      	ldr	r0, [r7, #4]
 8010a68:	f000 fb37 	bl	80110da <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi1ELi9EE3runERSE_>
  }
 8010a6c:	bf00      	nop
 8010a6e:	3708      	adds	r7, #8
 8010a70:	46bd      	mov	sp, r7
 8010a72:	bd80      	pop	{r7, pc}

08010a74 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 8010a74:	b590      	push	{r4, r7, lr}
 8010a76:	b083      	sub	sp, #12
 8010a78:	af00      	add	r7, sp, #0
 8010a7a:	6078      	str	r0, [r7, #4]
 8010a7c:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 8010a7e:	6878      	ldr	r0, [r7, #4]
 8010a80:	f000 fb57 	bl	8011132 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 8010a84:	683b      	ldr	r3, [r7, #0]
 8010a86:	4618      	mov	r0, r3
 8010a88:	f000 f81e 	bl	8010ac8 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4dataEv>
 8010a8c:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	601a      	str	r2, [r3, #0]
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	1d1c      	adds	r4, r3, #4
 8010a96:	683b      	ldr	r3, [r7, #0]
 8010a98:	4618      	mov	r0, r3
 8010a9a:	f000 fb2e 	bl	80110fa <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EE11innerStrideEv>
 8010a9e:	4603      	mov	r3, r0
 8010aa0:	4619      	mov	r1, r3
 8010aa2:	4620      	mov	r0, r4
 8010aa4:	f7f5 f976 	bl	8005d94 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	1d5c      	adds	r4, r3, #5
 8010aac:	683b      	ldr	r3, [r7, #0]
 8010aae:	4618      	mov	r0, r3
 8010ab0:	f000 fb31 	bl	8011116 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EE11outerStrideEv>
 8010ab4:	4603      	mov	r3, r0
 8010ab6:	4619      	mov	r1, r3
 8010ab8:	4620      	mov	r0, r4
 8010aba:	f7f5 f951 	bl	8005d60 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	4618      	mov	r0, r3
 8010ac2:	370c      	adds	r7, #12
 8010ac4:	46bd      	mov	sp, r7
 8010ac6:	bd90      	pop	{r4, r7, pc}

08010ac8 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC inline const Scalar* data() const { return m_data; }
 8010ac8:	b480      	push	{r7}
 8010aca:	b083      	sub	sp, #12
 8010acc:	af00      	add	r7, sp, #0
 8010ace:	6078      	str	r0, [r7, #4]
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	4618      	mov	r0, r3
 8010ad6:	370c      	adds	r7, #12
 8010ad8:	46bd      	mov	sp, r7
 8010ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ade:	4770      	bx	lr

08010ae0 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERKSG_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 8010ae0:	b580      	push	{r7, lr}
 8010ae2:	b082      	sub	sp, #8
 8010ae4:	af00      	add	r7, sp, #0
 8010ae6:	6078      	str	r0, [r7, #4]
 8010ae8:	6039      	str	r1, [r7, #0]
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	6839      	ldr	r1, [r7, #0]
 8010aee:	4618      	mov	r0, r3
 8010af0:	f000 fb2a 	bl	8011148 <_ZN5Eigen8internal15block_evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EEC1ERKNS_5BlockISE_Li1ELi1ELb0EEE>
  }
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	4618      	mov	r0, r3
 8010af8:	3708      	adds	r7, #8
 8010afa:	46bd      	mov	sp, r7
 8010afc:	bd80      	pop	{r7, pc}

08010afe <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 8010afe:	b580      	push	{r7, lr}
 8010b00:	b082      	sub	sp, #8
 8010b02:	af00      	add	r7, sp, #0
 8010b04:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	3308      	adds	r3, #8
 8010b0a:	4618      	mov	r0, r3
 8010b0c:	f7fc fd6a 	bl	800d5e4 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE11innerStrideEv>
 8010b10:	4603      	mov	r3, r0
    }
 8010b12:	4618      	mov	r0, r3
 8010b14:	3708      	adds	r7, #8
 8010b16:	46bd      	mov	sp, r7
 8010b18:	bd80      	pop	{r7, pc}

08010b1a <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 8010b1a:	b580      	push	{r7, lr}
 8010b1c:	b082      	sub	sp, #8
 8010b1e:	af00      	add	r7, sp, #0
 8010b20:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	3308      	adds	r3, #8
 8010b26:	4618      	mov	r0, r3
 8010b28:	f7fc fd70 	bl	800d60c <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE11outerStrideEv>
 8010b2c:	4603      	mov	r3, r0
    }
 8010b2e:	4618      	mov	r0, r3
 8010b30:	3708      	adds	r7, #8
 8010b32:	46bd      	mov	sp, r7
 8010b34:	bd80      	pop	{r7, pc}

08010b36 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8010b36:	b480      	push	{r7}
 8010b38:	b083      	sub	sp, #12
 8010b3a:	af00      	add	r7, sp, #0
 8010b3c:	6078      	str	r0, [r7, #4]
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	4618      	mov	r0, r3
 8010b42:	370c      	adds	r7, #12
 8010b44:	46bd      	mov	sp, r7
 8010b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b4a:	4770      	bx	lr

08010b4c <_ZNK5Eigen8internal15nullary_wrapperIfNS0_18scalar_constant_opIfEELb1ELb0ELb0EEclIiEEfRKS3_T_S8_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Scalar operator()(const NullaryOp& op, IndexType=0, IndexType=0) const { return op(); }
 8010b4c:	b580      	push	{r7, lr}
 8010b4e:	b084      	sub	sp, #16
 8010b50:	af00      	add	r7, sp, #0
 8010b52:	60f8      	str	r0, [r7, #12]
 8010b54:	60b9      	str	r1, [r7, #8]
 8010b56:	607a      	str	r2, [r7, #4]
 8010b58:	603b      	str	r3, [r7, #0]
 8010b5a:	68b8      	ldr	r0, [r7, #8]
 8010b5c:	f000 fb03 	bl	8011166 <_ZNK5Eigen8internal18scalar_constant_opIfEclEv>
 8010b60:	eef0 7a40 	vmov.f32	s15, s0
 8010b64:	eeb0 0a67 	vmov.f32	s0, s15
 8010b68:	3710      	adds	r7, #16
 8010b6a:	46bd      	mov	sp, r7
 8010b6c:	bd80      	pop	{r7, pc}

08010b6e <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EEC1ERKNS_5BlockIS4_Li1ELi3ELb0EEE>:
  explicit block_evaluator(const XprType& block)
 8010b6e:	b580      	push	{r7, lr}
 8010b70:	b082      	sub	sp, #8
 8010b72:	af00      	add	r7, sp, #0
 8010b74:	6078      	str	r0, [r7, #4]
 8010b76:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	6839      	ldr	r1, [r7, #0]
 8010b7c:	4618      	mov	r0, r3
 8010b7e:	f000 fb01 	bl	8011184 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS6_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 8010b82:	683b      	ldr	r3, [r7, #0]
 8010b84:	4618      	mov	r0, r3
 8010b86:	f000 fb27 	bl	80111d8 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4dataEv>
 8010b8a:	bf00      	nop
  }
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	4618      	mov	r0, r3
 8010b90:	3708      	adds	r7, #8
 8010b92:	46bd      	mov	sp, r7
 8010b94:	bd80      	pop	{r7, pc}

08010b96 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEELb0EE3runERKS3_RKS5_>:
    static void run(const Derived&, const OtherDerived&)
 8010b96:	b480      	push	{r7}
 8010b98:	b083      	sub	sp, #12
 8010b9a:	af00      	add	r7, sp, #0
 8010b9c:	6078      	str	r0, [r7, #4]
 8010b9e:	6039      	str	r1, [r7, #0]
    }
 8010ba0:	bf00      	nop
 8010ba2:	370c      	adds	r7, #12
 8010ba4:	46bd      	mov	sp, r7
 8010ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010baa:	4770      	bx	lr

08010bac <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEC1ERKS5_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8010bac:	b580      	push	{r7, lr}
 8010bae:	b082      	sub	sp, #8
 8010bb0:	af00      	add	r7, sp, #0
 8010bb2:	6078      	str	r0, [r7, #4]
 8010bb4:	6039      	str	r1, [r7, #0]
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	6839      	ldr	r1, [r7, #0]
 8010bba:	4618      	mov	r0, r3
 8010bbc:	f000 fb18 	bl	80111f0 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEELi3ENS_10DenseShapeES6_ffEC1ERKS5_>
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	4618      	mov	r0, r3
 8010bc4:	3708      	adds	r7, #8
 8010bc6:	46bd      	mov	sp, r7
 8010bc8:	bd80      	pop	{r7, pc}

08010bca <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8010bca:	b480      	push	{r7}
 8010bcc:	b083      	sub	sp, #12
 8010bce:	af00      	add	r7, sp, #0
 8010bd0:	6078      	str	r0, [r7, #4]
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	4618      	mov	r0, r3
 8010bd6:	370c      	adds	r7, #12
 8010bd8:	46bd      	mov	sp, r7
 8010bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bde:	4770      	bx	lr

08010be0 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8010be0:	b580      	push	{r7, lr}
 8010be2:	b082      	sub	sp, #8
 8010be4:	af00      	add	r7, sp, #0
 8010be6:	6078      	str	r0, [r7, #4]
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	4618      	mov	r0, r3
 8010bee:	f7f3 fb2c 	bl	800424a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8010bf2:	4603      	mov	r3, r0
 8010bf4:	4618      	mov	r0, r3
 8010bf6:	3708      	adds	r7, #8
 8010bf8:	46bd      	mov	sp, r7
 8010bfa:	bd80      	pop	{r7, pc}

08010bfc <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8010bfc:	b580      	push	{r7, lr}
 8010bfe:	b082      	sub	sp, #8
 8010c00:	af00      	add	r7, sp, #0
 8010c02:	6078      	str	r0, [r7, #4]
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	685b      	ldr	r3, [r3, #4]
 8010c08:	4618      	mov	r0, r3
 8010c0a:	f7f3 fb13 	bl	8004234 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8010c0e:	4603      	mov	r3, r0
 8010c10:	4618      	mov	r0, r3
 8010c12:	3708      	adds	r7, #8
 8010c14:	46bd      	mov	sp, r7
 8010c16:	bd80      	pop	{r7, pc}

08010c18 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8010c18:	b580      	push	{r7, lr}
 8010c1a:	b086      	sub	sp, #24
 8010c1c:	af00      	add	r7, sp, #0
 8010c1e:	60f8      	str	r0, [r7, #12]
 8010c20:	60b9      	str	r1, [r7, #8]
 8010c22:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8010c24:	68b8      	ldr	r0, [r7, #8]
 8010c26:	f7ff ffdb 	bl	8010be0 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE4rowsEv>
 8010c2a:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8010c2c:	68b8      	ldr	r0, [r7, #8]
 8010c2e:	f7ff ffe5 	bl	8010bfc <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE4colsEv>
 8010c32:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8010c34:	68fb      	ldr	r3, [r7, #12]
 8010c36:	4618      	mov	r0, r3
 8010c38:	f7f3 fb07 	bl	800424a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8010c3c:	4602      	mov	r2, r0
 8010c3e:	697b      	ldr	r3, [r7, #20]
 8010c40:	4293      	cmp	r3, r2
 8010c42:	d107      	bne.n	8010c54 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 8010c44:	68fb      	ldr	r3, [r7, #12]
 8010c46:	4618      	mov	r0, r3
 8010c48:	f7f3 faf4 	bl	8004234 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8010c4c:	4602      	mov	r2, r0
 8010c4e:	693b      	ldr	r3, [r7, #16]
 8010c50:	4293      	cmp	r3, r2
 8010c52:	d001      	beq.n	8010c58 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 8010c54:	2301      	movs	r3, #1
 8010c56:	e000      	b.n	8010c5a <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 8010c58:	2300      	movs	r3, #0
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d005      	beq.n	8010c6a <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	693a      	ldr	r2, [r7, #16]
 8010c62:	6979      	ldr	r1, [r7, #20]
 8010c64:	4618      	mov	r0, r3
 8010c66:	f7f6 fa09 	bl	800707c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	f7f3 faec 	bl	800424a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8010c72:	4602      	mov	r2, r0
 8010c74:	697b      	ldr	r3, [r7, #20]
 8010c76:	4293      	cmp	r3, r2
 8010c78:	d107      	bne.n	8010c8a <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	4618      	mov	r0, r3
 8010c7e:	f7f3 fad9 	bl	8004234 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8010c82:	4602      	mov	r2, r0
 8010c84:	693b      	ldr	r3, [r7, #16]
 8010c86:	4293      	cmp	r3, r2
 8010c88:	d006      	beq.n	8010c98 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 8010c8a:	4b05      	ldr	r3, [pc, #20]	; (8010ca0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 8010c8c:	4a05      	ldr	r2, [pc, #20]	; (8010ca4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 8010c8e:	f240 21fd 	movw	r1, #765	; 0x2fd
 8010c92:	4805      	ldr	r0, [pc, #20]	; (8010ca8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8010c94:	f00c f9ce 	bl	801d034 <__assert_func>
}
 8010c98:	bf00      	nop
 8010c9a:	3718      	adds	r7, #24
 8010c9c:	46bd      	mov	sp, r7
 8010c9e:	bd80      	pop	{r7, pc}
 8010ca0:	08021514 	.word	0x08021514
 8010ca4:	08027670 	.word	0x08027670
 8010ca8:	08021628 	.word	0x08021628

08010cac <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKS8_RKSA_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8010cac:	b480      	push	{r7}
 8010cae:	b085      	sub	sp, #20
 8010cb0:	af00      	add	r7, sp, #0
 8010cb2:	60f8      	str	r0, [r7, #12]
 8010cb4:	60b9      	str	r1, [r7, #8]
 8010cb6:	607a      	str	r2, [r7, #4]
 8010cb8:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8010cba:	68fb      	ldr	r3, [r7, #12]
 8010cbc:	68ba      	ldr	r2, [r7, #8]
 8010cbe:	601a      	str	r2, [r3, #0]
 8010cc0:	68fb      	ldr	r3, [r7, #12]
 8010cc2:	687a      	ldr	r2, [r7, #4]
 8010cc4:	605a      	str	r2, [r3, #4]
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	683a      	ldr	r2, [r7, #0]
 8010cca:	609a      	str	r2, [r3, #8]
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	69ba      	ldr	r2, [r7, #24]
 8010cd0:	60da      	str	r2, [r3, #12]
  }
 8010cd2:	68fb      	ldr	r3, [r7, #12]
 8010cd4:	4618      	mov	r0, r3
 8010cd6:	3714      	adds	r7, #20
 8010cd8:	46bd      	mov	sp, r7
 8010cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cde:	4770      	bx	lr

08010ce0 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8010ce0:	b580      	push	{r7, lr}
 8010ce2:	b082      	sub	sp, #8
 8010ce4:	af00      	add	r7, sp, #0
 8010ce6:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8010ce8:	6878      	ldr	r0, [r7, #4]
 8010cea:	f000 fab6 	bl	801125a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSC_>
  }
 8010cee:	bf00      	nop
 8010cf0:	3708      	adds	r7, #8
 8010cf2:	46bd      	mov	sp, r7
 8010cf4:	bd80      	pop	{r7, pc}

08010cf6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 8010cf6:	b480      	push	{r7}
 8010cf8:	b083      	sub	sp, #12
 8010cfa:	af00      	add	r7, sp, #0
 8010cfc:	6078      	str	r0, [r7, #4]
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	3330      	adds	r3, #48	; 0x30
 8010d02:	4618      	mov	r0, r3
 8010d04:	370c      	adds	r7, #12
 8010d06:	46bd      	mov	sp, r7
 8010d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d0c:	4770      	bx	lr

08010d0e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 8010d0e:	b480      	push	{r7}
 8010d10:	b083      	sub	sp, #12
 8010d12:	af00      	add	r7, sp, #0
 8010d14:	6078      	str	r0, [r7, #4]
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	4618      	mov	r0, r3
 8010d1a:	370c      	adds	r7, #12
 8010d1c:	46bd      	mov	sp, r7
 8010d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d22:	4770      	bx	lr

08010d24 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 8010d24:	b480      	push	{r7}
 8010d26:	b083      	sub	sp, #12
 8010d28:	af00      	add	r7, sp, #0
 8010d2a:	6078      	str	r0, [r7, #4]
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	3318      	adds	r3, #24
 8010d30:	4618      	mov	r0, r3
 8010d32:	370c      	adds	r7, #12
 8010d34:	46bd      	mov	sp, r7
 8010d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d3a:	4770      	bx	lr

08010d3c <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1ERS9_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8010d3c:	b580      	push	{r7, lr}
 8010d3e:	b082      	sub	sp, #8
 8010d40:	af00      	add	r7, sp, #0
 8010d42:	6078      	str	r0, [r7, #4]
 8010d44:	6039      	str	r1, [r7, #0]
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	6839      	ldr	r1, [r7, #0]
 8010d4a:	4618      	mov	r0, r3
 8010d4c:	f000 fa95 	bl	801127a <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1ERKS8_>
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	4618      	mov	r0, r3
 8010d54:	3708      	adds	r7, #8
 8010d56:	46bd      	mov	sp, r7
 8010d58:	bd80      	pop	{r7, pc}

08010d5a <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8010d5a:	b590      	push	{r4, r7, lr}
 8010d5c:	b087      	sub	sp, #28
 8010d5e:	af00      	add	r7, sp, #0
 8010d60:	60f8      	str	r0, [r7, #12]
 8010d62:	60b9      	str	r1, [r7, #8]
 8010d64:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 8010d66:	68fb      	ldr	r3, [r7, #12]
 8010d68:	4618      	mov	r0, r3
 8010d6a:	f000 fa95 	bl	8011298 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>
 8010d6e:	4604      	mov	r4, r0
 8010d70:	68fb      	ldr	r3, [r7, #12]
 8010d72:	3304      	adds	r3, #4
 8010d74:	687a      	ldr	r2, [r7, #4]
 8010d76:	68b9      	ldr	r1, [r7, #8]
 8010d78:	4618      	mov	r0, r3
 8010d7a:	f7fd fdf3 	bl	800e964 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfE5coeffEii>
 8010d7e:	eef0 7a40 	vmov.f32	s15, s0
 8010d82:	edc7 7a04 	vstr	s15, [r7, #16]
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	330c      	adds	r3, #12
 8010d8a:	687a      	ldr	r2, [r7, #4]
 8010d8c:	68b9      	ldr	r1, [r7, #8]
 8010d8e:	4618      	mov	r0, r3
 8010d90:	f000 fa8d 	bl	80112ae <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>
 8010d94:	eef0 7a40 	vmov.f32	s15, s0
 8010d98:	edc7 7a05 	vstr	s15, [r7, #20]
 8010d9c:	f107 0214 	add.w	r2, r7, #20
 8010da0:	f107 0310 	add.w	r3, r7, #16
 8010da4:	4619      	mov	r1, r3
 8010da6:	4620      	mov	r0, r4
 8010da8:	f7fd fc20 	bl	800e5ec <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 8010dac:	eef0 7a40 	vmov.f32	s15, s0
  }
 8010db0:	eeb0 0a67 	vmov.f32	s0, s15
 8010db4:	371c      	adds	r7, #28
 8010db6:	46bd      	mov	sp, r7
 8010db8:	bd90      	pop	{r4, r7, pc}

08010dba <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 8010dba:	b480      	push	{r7}
 8010dbc:	b083      	sub	sp, #12
 8010dbe:	af00      	add	r7, sp, #0
 8010dc0:	6078      	str	r0, [r7, #4]
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	4618      	mov	r0, r3
 8010dc8:	370c      	adds	r7, #12
 8010dca:	46bd      	mov	sp, r7
 8010dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dd0:	4770      	bx	lr

08010dd2 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8010dd2:	b480      	push	{r7}
 8010dd4:	b083      	sub	sp, #12
 8010dd6:	af00      	add	r7, sp, #0
 8010dd8:	6078      	str	r0, [r7, #4]
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	4618      	mov	r0, r3
 8010dde:	370c      	adds	r7, #12
 8010de0:	46bd      	mov	sp, r7
 8010de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010de6:	4770      	bx	lr

08010de8 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS3_>:
  explicit evaluator(const XprType& m)
 8010de8:	b580      	push	{r7, lr}
 8010dea:	b082      	sub	sp, #8
 8010dec:	af00      	add	r7, sp, #0
 8010dee:	6078      	str	r0, [r7, #4]
 8010df0:	6039      	str	r1, [r7, #0]
    : evaluator<PlainObjectBase<XprType> >(m)
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	683a      	ldr	r2, [r7, #0]
 8010df6:	4611      	mov	r1, r2
 8010df8:	4618      	mov	r0, r3
 8010dfa:	f000 fa79 	bl	80112f0 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERKS5_>
  { }
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	4618      	mov	r0, r3
 8010e02:	3708      	adds	r7, #8
 8010e04:	46bd      	mov	sp, r7
 8010e06:	bd80      	pop	{r7, pc}

08010e08 <_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE3colEi>:
ConstColXpr col(Index i) const
 8010e08:	b580      	push	{r7, lr}
 8010e0a:	b084      	sub	sp, #16
 8010e0c:	af00      	add	r7, sp, #0
 8010e0e:	60f8      	str	r0, [r7, #12]
 8010e10:	60b9      	str	r1, [r7, #8]
 8010e12:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 8010e14:	68b8      	ldr	r0, [r7, #8]
 8010e16:	f7f4 f887 	bl	8004f28 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 8010e1a:	4603      	mov	r3, r0
 8010e1c:	687a      	ldr	r2, [r7, #4]
 8010e1e:	4619      	mov	r1, r3
 8010e20:	68f8      	ldr	r0, [r7, #12]
 8010e22:	f000 fa7d 	bl	8011320 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEC1ERS5_i>
}
 8010e26:	68f8      	ldr	r0, [r7, #12]
 8010e28:	3710      	adds	r7, #16
 8010e2a:	46bd      	mov	sp, r7
 8010e2c:	bd80      	pop	{r7, pc}

08010e2e <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IKNS1_INS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSG_6traitsIT_E6ScalarEEEKS8_KSJ_EERKNS0_ISJ_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 8010e2e:	b5b0      	push	{r4, r5, r7, lr}
 8010e30:	b086      	sub	sp, #24
 8010e32:	af00      	add	r7, sp, #0
 8010e34:	60f8      	str	r0, [r7, #12]
 8010e36:	60b9      	str	r1, [r7, #8]
 8010e38:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 8010e3a:	68b8      	ldr	r0, [r7, #8]
 8010e3c:	f7f9 fe6e 	bl	800ab1c <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE7derivedEv>
 8010e40:	4604      	mov	r4, r0
 8010e42:	6878      	ldr	r0, [r7, #4]
 8010e44:	f000 fa94 	bl	8011370 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE7derivedEv>
 8010e48:	4605      	mov	r5, r0
 8010e4a:	f107 0314 	add.w	r3, r7, #20
 8010e4e:	4618      	mov	r0, r3
 8010e50:	f7f3 fc9c 	bl	800478c <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 8010e54:	f107 0314 	add.w	r3, r7, #20
 8010e58:	462a      	mov	r2, r5
 8010e5a:	4621      	mov	r1, r4
 8010e5c:	68f8      	ldr	r0, [r7, #12]
 8010e5e:	f000 fac1 	bl	80113e4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERSC_RSH_RKS3_>
}
 8010e62:	68f8      	ldr	r0, [r7, #12]
 8010e64:	3718      	adds	r7, #24
 8010e66:	46bd      	mov	sp, r7
 8010e68:	bdb0      	pop	{r4, r5, r7, pc}

08010e6a <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 8010e6a:	b580      	push	{r7, lr}
 8010e6c:	b082      	sub	sp, #8
 8010e6e:	af00      	add	r7, sp, #0
 8010e70:	6078      	str	r0, [r7, #4]
 8010e72:	6878      	ldr	r0, [r7, #4]
 8010e74:	f000 fb14 	bl	80114a0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE7derivedEv>
 8010e78:	4603      	mov	r3, r0
 8010e7a:	4618      	mov	r0, r3
 8010e7c:	f000 fb1b 	bl	80114b6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE4rowsEv>
 8010e80:	4603      	mov	r3, r0
 8010e82:	4618      	mov	r0, r3
 8010e84:	3708      	adds	r7, #8
 8010e86:	46bd      	mov	sp, r7
 8010e88:	bd80      	pop	{r7, pc}

08010e8a <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 8010e8a:	b590      	push	{r4, r7, lr}
 8010e8c:	b085      	sub	sp, #20
 8010e8e:	af00      	add	r7, sp, #0
 8010e90:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 8010e92:	6878      	ldr	r0, [r7, #4]
 8010e94:	f000 fb04 	bl	80114a0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE7derivedEv>
 8010e98:	4604      	mov	r4, r0
 8010e9a:	f107 030c 	add.w	r3, r7, #12
 8010e9e:	4618      	mov	r0, r3
 8010ea0:	f7f3 ff6b 	bl	8004d7a <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 8010ea4:	f107 030c 	add.w	r3, r7, #12
 8010ea8:	4619      	mov	r1, r3
 8010eaa:	4620      	mov	r0, r4
 8010eac:	f000 fb80 	bl	80115b0 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 8010eb0:	eef0 7a40 	vmov.f32	s15, s0
 8010eb4:	bf00      	nop
}
 8010eb6:	eeb0 0a67 	vmov.f32	s0, s15
 8010eba:	3714      	adds	r7, #20
 8010ebc:	46bd      	mov	sp, r7
 8010ebe:	bd90      	pop	{r4, r7, pc}

08010ec0 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 8010ec0:	b480      	push	{r7}
 8010ec2:	b083      	sub	sp, #12
 8010ec4:	af00      	add	r7, sp, #0
 8010ec6:	6078      	str	r0, [r7, #4]
 8010ec8:	bf00      	nop
 8010eca:	370c      	adds	r7, #12
 8010ecc:	46bd      	mov	sp, r7
 8010ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ed2:	4770      	bx	lr

08010ed4 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8010ed4:	b480      	push	{r7}
 8010ed6:	b083      	sub	sp, #12
 8010ed8:	af00      	add	r7, sp, #0
 8010eda:	6078      	str	r0, [r7, #4]
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	4618      	mov	r0, r3
 8010ee0:	370c      	adds	r7, #12
 8010ee2:	46bd      	mov	sp, r7
 8010ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ee8:	4770      	bx	lr

08010eea <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE4DataC1ERKSG_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 8010eea:	b590      	push	{r4, r7, lr}
 8010eec:	b083      	sub	sp, #12
 8010eee:	af00      	add	r7, sp, #0
 8010ef0:	6078      	str	r0, [r7, #4]
 8010ef2:	6039      	str	r1, [r7, #0]
 8010ef4:	687c      	ldr	r4, [r7, #4]
 8010ef6:	6838      	ldr	r0, [r7, #0]
 8010ef8:	f000 fba0 	bl	801163c <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE7functorEv>
 8010efc:	4603      	mov	r3, r0
 8010efe:	4619      	mov	r1, r3
 8010f00:	4620      	mov	r0, r4
 8010f02:	f7f3 ffb9 	bl	8004e78 <_ZN5Eigen8internal13scalar_sum_opIffEC1ERKS2_>
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	1d1c      	adds	r4, r3, #4
 8010f0a:	6838      	ldr	r0, [r7, #0]
 8010f0c:	f000 fba2 	bl	8011654 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE3lhsEv>
 8010f10:	4603      	mov	r3, r0
 8010f12:	4619      	mov	r1, r3
 8010f14:	4620      	mov	r0, r4
 8010f16:	f000 fbb4 	bl	8011682 <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEEC1ERSA_>
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	f103 040c 	add.w	r4, r3, #12
 8010f20:	6838      	ldr	r0, [r7, #0]
 8010f22:	f000 fba2 	bl	801166a <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE3rhsEv>
 8010f26:	4603      	mov	r3, r0
 8010f28:	4619      	mov	r1, r3
 8010f2a:	4620      	mov	r0, r4
 8010f2c:	f000 fbb8 	bl	80116a0 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS4_>
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	4618      	mov	r0, r3
 8010f34:	370c      	adds	r7, #12
 8010f36:	46bd      	mov	sp, r7
 8010f38:	bd90      	pop	{r4, r7, pc}

08010f3a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_INS3_IfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 8010f3a:	b5b0      	push	{r4, r5, r7, lr}
 8010f3c:	b084      	sub	sp, #16
 8010f3e:	af00      	add	r7, sp, #0
 8010f40:	6078      	str	r0, [r7, #4]
 8010f42:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	689c      	ldr	r4, [r3, #8]
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	6839      	ldr	r1, [r7, #0]
 8010f4e:	4618      	mov	r0, r3
 8010f50:	f000 f834 	bl	8010fbc <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE8coeffRefEi>
 8010f54:	4605      	mov	r5, r0
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	685b      	ldr	r3, [r3, #4]
 8010f5a:	6839      	ldr	r1, [r7, #0]
 8010f5c:	4618      	mov	r0, r3
 8010f5e:	f000 fbae 	bl	80116be <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE5coeffEi>
 8010f62:	eef0 7a40 	vmov.f32	s15, s0
 8010f66:	edc7 7a03 	vstr	s15, [r7, #12]
 8010f6a:	f107 030c 	add.w	r3, r7, #12
 8010f6e:	461a      	mov	r2, r3
 8010f70:	4629      	mov	r1, r5
 8010f72:	4620      	mov	r0, r4
 8010f74:	f7f6 fd08 	bl	8007988 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 8010f78:	bf00      	nop
 8010f7a:	3710      	adds	r7, #16
 8010f7c:	46bd      	mov	sp, r7
 8010f7e:	bdb0      	pop	{r4, r5, r7, pc}

08010f80 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_INS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi1ELi1EE3runERSN_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 8010f80:	b480      	push	{r7}
 8010f82:	b083      	sub	sp, #12
 8010f84:	af00      	add	r7, sp, #0
 8010f86:	6078      	str	r0, [r7, #4]
 8010f88:	bf00      	nop
 8010f8a:	370c      	adds	r7, #12
 8010f8c:	46bd      	mov	sp, r7
 8010f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f92:	4770      	bx	lr

08010f94 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EEC1ERKNS_5BlockIS4_Li1ELi1ELb0EEE>:
  explicit block_evaluator(const XprType& block)
 8010f94:	b580      	push	{r7, lr}
 8010f96:	b082      	sub	sp, #8
 8010f98:	af00      	add	r7, sp, #0
 8010f9a:	6078      	str	r0, [r7, #4]
 8010f9c:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	6839      	ldr	r1, [r7, #0]
 8010fa2:	4618      	mov	r0, r3
 8010fa4:	f000 fbaf 	bl	8011706 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS6_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 8010fa8:	683b      	ldr	r3, [r7, #0]
 8010faa:	4618      	mov	r0, r3
 8010fac:	f000 fbd5 	bl	801175a <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE4dataEv>
 8010fb0:	bf00      	nop
  }
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	4618      	mov	r0, r3
 8010fb6:	3708      	adds	r7, #8
 8010fb8:	46bd      	mov	sp, r7
 8010fba:	bd80      	pop	{r7, pc}

08010fbc <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE8coeffRefEi>:
  Scalar& coeffRef(Index index)
 8010fbc:	b480      	push	{r7}
 8010fbe:	b083      	sub	sp, #12
 8010fc0:	af00      	add	r7, sp, #0
 8010fc2:	6078      	str	r0, [r7, #4]
 8010fc4:	6039      	str	r1, [r7, #0]
    return const_cast<Scalar*>(m_d.data)[index];
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	681a      	ldr	r2, [r3, #0]
 8010fca:	683b      	ldr	r3, [r7, #0]
 8010fcc:	009b      	lsls	r3, r3, #2
 8010fce:	4413      	add	r3, r2
  }
 8010fd0:	4618      	mov	r0, r3
 8010fd2:	370c      	adds	r7, #12
 8010fd4:	46bd      	mov	sp, r7
 8010fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fda:	4770      	bx	lr

08010fdc <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE5coeffEi>:
  CoeffReturnType coeff(Index index) const
 8010fdc:	b480      	push	{r7}
 8010fde:	b083      	sub	sp, #12
 8010fe0:	af00      	add	r7, sp, #0
 8010fe2:	6078      	str	r0, [r7, #4]
 8010fe4:	6039      	str	r1, [r7, #0]
    return m_d.data[index];
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	681a      	ldr	r2, [r3, #0]
 8010fea:	683b      	ldr	r3, [r7, #0]
 8010fec:	009b      	lsls	r3, r3, #2
 8010fee:	4413      	add	r3, r2
  }
 8010ff0:	4618      	mov	r0, r3
 8010ff2:	370c      	adds	r7, #12
 8010ff4:	46bd      	mov	sp, r7
 8010ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ffa:	4770      	bx	lr

08010ffc <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKSD_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8010ffc:	b580      	push	{r7, lr}
 8010ffe:	b082      	sub	sp, #8
 8011000:	af00      	add	r7, sp, #0
 8011002:	6078      	str	r0, [r7, #4]
 8011004:	6039      	str	r1, [r7, #0]
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	6839      	ldr	r1, [r7, #0]
 801100a:	4618      	mov	r0, r3
 801100c:	f000 fbb1 	bl	8011772 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffEC1ERKSD_>
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	4618      	mov	r0, r3
 8011014:	3708      	adds	r7, #8
 8011016:	46bd      	mov	sp, r7
 8011018:	bd80      	pop	{r7, pc}

0801101a <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi0ELi3EE3runERKSH_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 801101a:	b580      	push	{r7, lr}
 801101c:	b084      	sub	sp, #16
 801101e:	af00      	add	r7, sp, #0
 8011020:	6078      	str	r0, [r7, #4]
 8011022:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8011024:	6839      	ldr	r1, [r7, #0]
 8011026:	6878      	ldr	r0, [r7, #4]
 8011028:	f000 fbb5 	bl	8011796 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi0ELi1EE3runERKSH_RKS3_>
 801102c:	eef0 7a40 	vmov.f32	s15, s0
 8011030:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 8011034:	6839      	ldr	r1, [r7, #0]
 8011036:	6878      	ldr	r0, [r7, #4]
 8011038:	f000 fbbe 	bl	80117b8 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi1ELi2EE3runERKSH_RKS3_>
 801103c:	eef0 7a40 	vmov.f32	s15, s0
 8011040:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8011044:	f107 020c 	add.w	r2, r7, #12
 8011048:	f107 0308 	add.w	r3, r7, #8
 801104c:	4619      	mov	r1, r3
 801104e:	6838      	ldr	r0, [r7, #0]
 8011050:	f7f7 fa8b 	bl	800856a <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 8011054:	eef0 7a40 	vmov.f32	s15, s0
  }
 8011058:	eeb0 0a67 	vmov.f32	s0, s15
 801105c:	3710      	adds	r7, #16
 801105e:	46bd      	mov	sp, r7
 8011060:	bd80      	pop	{r7, pc}

08011062 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8011062:	b480      	push	{r7}
 8011064:	b083      	sub	sp, #12
 8011066:	af00      	add	r7, sp, #0
 8011068:	6078      	str	r0, [r7, #4]
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	681b      	ldr	r3, [r3, #0]
 801106e:	4618      	mov	r0, r3
 8011070:	370c      	adds	r7, #12
 8011072:	46bd      	mov	sp, r7
 8011074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011078:	4770      	bx	lr

0801107a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 801107a:	b480      	push	{r7}
 801107c:	b083      	sub	sp, #12
 801107e:	af00      	add	r7, sp, #0
 8011080:	6078      	str	r0, [r7, #4]
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	685b      	ldr	r3, [r3, #4]
 8011086:	4618      	mov	r0, r3
 8011088:	370c      	adds	r7, #12
 801108a:	46bd      	mov	sp, r7
 801108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011090:	4770      	bx	lr

08011092 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8011092:	b480      	push	{r7}
 8011094:	b083      	sub	sp, #12
 8011096:	af00      	add	r7, sp, #0
 8011098:	6078      	str	r0, [r7, #4]
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	4618      	mov	r0, r3
 801109e:	370c      	adds	r7, #12
 80110a0:	46bd      	mov	sp, r7
 80110a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110a6:	4770      	bx	lr

080110a8 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeffByOuterInner(Index outer, Index inner)
 80110a8:	b580      	push	{r7, lr}
 80110aa:	b086      	sub	sp, #24
 80110ac:	af00      	add	r7, sp, #0
 80110ae:	60f8      	str	r0, [r7, #12]
 80110b0:	60b9      	str	r1, [r7, #8]
 80110b2:	607a      	str	r2, [r7, #4]
    Index row = rowIndexByOuterInner(outer, inner);
 80110b4:	6879      	ldr	r1, [r7, #4]
 80110b6:	68b8      	ldr	r0, [r7, #8]
 80110b8:	f000 fba2 	bl	8011800 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE20rowIndexByOuterInnerEii>
 80110bc:	6178      	str	r0, [r7, #20]
    Index col = colIndexByOuterInner(outer, inner);
 80110be:	6879      	ldr	r1, [r7, #4]
 80110c0:	68b8      	ldr	r0, [r7, #8]
 80110c2:	f000 fba9 	bl	8011818 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE20colIndexByOuterInnerEii>
 80110c6:	6138      	str	r0, [r7, #16]
    assignCoeff(row, col);
 80110c8:	693a      	ldr	r2, [r7, #16]
 80110ca:	6979      	ldr	r1, [r7, #20]
 80110cc:	68f8      	ldr	r0, [r7, #12]
 80110ce:	f000 fbaf 	bl	8011830 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE11assignCoeffEii>
  }
 80110d2:	bf00      	nop
 80110d4:	3718      	adds	r7, #24
 80110d6:	46bd      	mov	sp, r7
 80110d8:	bd80      	pop	{r7, pc}

080110da <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi1ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80110da:	b580      	push	{r7, lr}
 80110dc:	b082      	sub	sp, #8
 80110de:	af00      	add	r7, sp, #0
 80110e0:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 80110e2:	2201      	movs	r2, #1
 80110e4:	2100      	movs	r1, #0
 80110e6:	6878      	ldr	r0, [r7, #4]
 80110e8:	f7ff ffde 	bl	80110a8 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80110ec:	6878      	ldr	r0, [r7, #4]
 80110ee:	f000 fbc5 	bl	801187c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi2ELi9EE3runERSE_>
  }
 80110f2:	bf00      	nop
 80110f4:	3708      	adds	r7, #8
 80110f6:	46bd      	mov	sp, r7
 80110f8:	bd80      	pop	{r7, pc}

080110fa <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 80110fa:	b580      	push	{r7, lr}
 80110fc:	b082      	sub	sp, #8
 80110fe:	af00      	add	r7, sp, #0
 8011100:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	689b      	ldr	r3, [r3, #8]
 8011106:	4618      	mov	r0, r3
 8011108:	f7fb fe62 	bl	800cdd0 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11innerStrideEv>
 801110c:	4603      	mov	r3, r0
    }
 801110e:	4618      	mov	r0, r3
 8011110:	3708      	adds	r7, #8
 8011112:	46bd      	mov	sp, r7
 8011114:	bd80      	pop	{r7, pc}

08011116 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 8011116:	b580      	push	{r7, lr}
 8011118:	b082      	sub	sp, #8
 801111a:	af00      	add	r7, sp, #0
 801111c:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	689b      	ldr	r3, [r3, #8]
 8011122:	4618      	mov	r0, r3
 8011124:	f7f6 fc04 	bl	8007930 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>
 8011128:	4603      	mov	r3, r0
    }
 801112a:	4618      	mov	r0, r3
 801112c:	3708      	adds	r7, #8
 801112e:	46bd      	mov	sp, r7
 8011130:	bd80      	pop	{r7, pc}

08011132 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1Ev>:
 8011132:	b480      	push	{r7}
 8011134:	b083      	sub	sp, #12
 8011136:	af00      	add	r7, sp, #0
 8011138:	6078      	str	r0, [r7, #4]
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	4618      	mov	r0, r3
 801113e:	370c      	adds	r7, #12
 8011140:	46bd      	mov	sp, r7
 8011142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011146:	4770      	bx	lr

08011148 <_ZN5Eigen8internal15block_evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EEC1ERKNS_5BlockISE_Li1ELi1ELb0EEE>:
  explicit block_evaluator(const XprType& block)
 8011148:	b580      	push	{r7, lr}
 801114a:	b082      	sub	sp, #8
 801114c:	af00      	add	r7, sp, #0
 801114e:	6078      	str	r0, [r7, #4]
 8011150:	6039      	str	r1, [r7, #0]
    : unary_evaluator<XprType>(block)
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	6839      	ldr	r1, [r7, #0]
 8011156:	4618      	mov	r0, r3
 8011158:	f000 fbb9 	bl	80118ce <_ZN5Eigen8internal15unary_evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS0_10IndexBasedEfEC1ERKSG_>
  {}
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	4618      	mov	r0, r3
 8011160:	3708      	adds	r7, #8
 8011162:	46bd      	mov	sp, r7
 8011164:	bd80      	pop	{r7, pc}

08011166 <_ZNK5Eigen8internal18scalar_constant_opIfEclEv>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar operator() () const { return m_other; }
 8011166:	b480      	push	{r7}
 8011168:	b083      	sub	sp, #12
 801116a:	af00      	add	r7, sp, #0
 801116c:	6078      	str	r0, [r7, #4]
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	ee07 3a90 	vmov	s15, r3
 8011176:	eeb0 0a67 	vmov.f32	s0, s15
 801117a:	370c      	adds	r7, #12
 801117c:	46bd      	mov	sp, r7
 801117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011182:	4770      	bx	lr

08011184 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 8011184:	b590      	push	{r4, r7, lr}
 8011186:	b083      	sub	sp, #12
 8011188:	af00      	add	r7, sp, #0
 801118a:	6078      	str	r0, [r7, #4]
 801118c:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 801118e:	6878      	ldr	r0, [r7, #4]
 8011190:	f000 fc05 	bl	801199e <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 8011194:	683b      	ldr	r3, [r7, #0]
 8011196:	4618      	mov	r0, r3
 8011198:	f000 f81e 	bl	80111d8 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4dataEv>
 801119c:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	601a      	str	r2, [r3, #0]
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	1d1c      	adds	r4, r3, #4
 80111a6:	683b      	ldr	r3, [r7, #0]
 80111a8:	4618      	mov	r0, r3
 80111aa:	f000 fbdc 	bl	8011966 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE11innerStrideEv>
 80111ae:	4603      	mov	r3, r0
 80111b0:	4619      	mov	r1, r3
 80111b2:	4620      	mov	r0, r4
 80111b4:	f7f4 fdd4 	bl	8005d60 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	1d5c      	adds	r4, r3, #5
 80111bc:	683b      	ldr	r3, [r7, #0]
 80111be:	4618      	mov	r0, r3
 80111c0:	f000 fbdf 	bl	8011982 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE11outerStrideEv>
 80111c4:	4603      	mov	r3, r0
 80111c6:	4619      	mov	r1, r3
 80111c8:	4620      	mov	r0, r4
 80111ca:	f7f4 fde3 	bl	8005d94 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
  }
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	4618      	mov	r0, r3
 80111d2:	370c      	adds	r7, #12
 80111d4:	46bd      	mov	sp, r7
 80111d6:	bd90      	pop	{r4, r7, pc}

080111d8 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4dataEv>:
 80111d8:	b480      	push	{r7}
 80111da:	b083      	sub	sp, #12
 80111dc:	af00      	add	r7, sp, #0
 80111de:	6078      	str	r0, [r7, #4]
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	681b      	ldr	r3, [r3, #0]
 80111e4:	4618      	mov	r0, r3
 80111e6:	370c      	adds	r7, #12
 80111e8:	46bd      	mov	sp, r7
 80111ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ee:	4770      	bx	lr

080111f0 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEELi3ENS_10DenseShapeES6_ffEC1ERKS5_>:
  explicit product_evaluator(const XprType& xpr)
 80111f0:	b580      	push	{r7, lr}
 80111f2:	b082      	sub	sp, #8
 80111f4:	af00      	add	r7, sp, #0
 80111f6:	6078      	str	r0, [r7, #4]
 80111f8:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 80111fa:	6878      	ldr	r0, [r7, #4]
 80111fc:	f000 fbf2 	bl	80119e4 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEC1Ev>
    : m_lhs(xpr.lhs()),
 8011200:	6838      	ldr	r0, [r7, #0]
 8011202:	f000 fbd7 	bl	80119b4 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE3lhsEv>
 8011206:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	601a      	str	r2, [r3, #0]
      m_rhs(xpr.rhs()),
 801120c:	6838      	ldr	r0, [r7, #0]
 801120e:	f000 fbdd 	bl	80119cc <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE3rhsEv>
 8011212:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	605a      	str	r2, [r3, #4]
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	f103 0208 	add.w	r2, r3, #8
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	681b      	ldr	r3, [r3, #0]
      m_innerDim(xpr.lhs().cols())
 8011222:	4619      	mov	r1, r3
 8011224:	4610      	mov	r0, r2
 8011226:	f7f5 fca7 	bl	8006b78 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	f103 020c 	add.w	r2, r3, #12
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	685b      	ldr	r3, [r3, #4]
      m_innerDim(xpr.lhs().cols())
 8011234:	4619      	mov	r1, r3
 8011236:	4610      	mov	r0, r2
 8011238:	f7f5 fc9e 	bl	8006b78 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 801123c:	6838      	ldr	r0, [r7, #0]
 801123e:	f000 fbb9 	bl	80119b4 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE3lhsEv>
 8011242:	4603      	mov	r3, r0
 8011244:	4618      	mov	r0, r3
 8011246:	f7f2 fff5 	bl	8004234 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 801124a:	4602      	mov	r2, r0
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	611a      	str	r2, [r3, #16]
  }
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	4618      	mov	r0, r3
 8011254:	3708      	adds	r7, #8
 8011256:	46bd      	mov	sp, r7
 8011258:	bd80      	pop	{r7, pc}

0801125a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 801125a:	b580      	push	{r7, lr}
 801125c:	b082      	sub	sp, #8
 801125e:	af00      	add	r7, sp, #0
 8011260:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8011262:	2200      	movs	r2, #0
 8011264:	2100      	movs	r1, #0
 8011266:	6878      	ldr	r0, [r7, #4]
 8011268:	f000 fbc7 	bl	80119fa <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 801126c:	6878      	ldr	r0, [r7, #4]
 801126e:	f000 fbdd 	bl	8011a2c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSC_>
  }
 8011272:	bf00      	nop
 8011274:	3708      	adds	r7, #8
 8011276:	46bd      	mov	sp, r7
 8011278:	bd80      	pop	{r7, pc}

0801127a <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1ERKS8_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 801127a:	b580      	push	{r7, lr}
 801127c:	b082      	sub	sp, #8
 801127e:	af00      	add	r7, sp, #0
 8011280:	6078      	str	r0, [r7, #4]
 8011282:	6039      	str	r1, [r7, #0]
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	6839      	ldr	r1, [r7, #0]
 8011288:	4618      	mov	r0, r3
 801128a:	f000 fbdf 	bl	8011a4c <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EEC1ERKNS_5BlockIS6_Li3ELi1ELb0EEE>
  }
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	4618      	mov	r0, r3
 8011292:	3708      	adds	r7, #8
 8011294:	46bd      	mov	sp, r7
 8011296:	bd80      	pop	{r7, pc}

08011298 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 8011298:	b480      	push	{r7}
 801129a:	b083      	sub	sp, #12
 801129c:	af00      	add	r7, sp, #0
 801129e:	6078      	str	r0, [r7, #4]
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	4618      	mov	r0, r3
 80112a4:	370c      	adds	r7, #12
 80112a6:	46bd      	mov	sp, r7
 80112a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ac:	4770      	bx	lr

080112ae <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 80112ae:	b5b0      	push	{r4, r5, r7, lr}
 80112b0:	b084      	sub	sp, #16
 80112b2:	af00      	add	r7, sp, #0
 80112b4:	60f8      	str	r0, [r7, #12]
 80112b6:	60b9      	str	r1, [r7, #8]
 80112b8:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 80112ba:	68fb      	ldr	r3, [r7, #12]
 80112bc:	681c      	ldr	r4, [r3, #0]
 80112be:	68f8      	ldr	r0, [r7, #12]
 80112c0:	f000 fbd8 	bl	8011a74 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9colStrideEv>
 80112c4:	4602      	mov	r2, r0
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	fb03 f502 	mul.w	r5, r3, r2
 80112cc:	68f8      	ldr	r0, [r7, #12]
 80112ce:	f000 fbdc 	bl	8011a8a <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9rowStrideEv>
 80112d2:	4602      	mov	r2, r0
 80112d4:	68bb      	ldr	r3, [r7, #8]
 80112d6:	fb02 f303 	mul.w	r3, r2, r3
 80112da:	442b      	add	r3, r5
 80112dc:	009b      	lsls	r3, r3, #2
 80112de:	4423      	add	r3, r4
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	ee07 3a90 	vmov	s15, r3
  }
 80112e6:	eeb0 0a67 	vmov.f32	s0, s15
 80112ea:	3710      	adds	r7, #16
 80112ec:	46bd      	mov	sp, r7
 80112ee:	bdb0      	pop	{r4, r5, r7, pc}

080112f0 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERKS5_>:
  explicit evaluator(const PlainObjectType& m)
 80112f0:	b590      	push	{r4, r7, lr}
 80112f2:	b083      	sub	sp, #12
 80112f4:	af00      	add	r7, sp, #0
 80112f6:	6078      	str	r0, [r7, #4]
 80112f8:	6039      	str	r1, [r7, #0]
    : m_d(m.data(),IsVectorAtCompileTime ? 0 : m.outerStride())
 80112fa:	6878      	ldr	r0, [r7, #4]
 80112fc:	f000 fbdd 	bl	8011aba <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>
 8011300:	687c      	ldr	r4, [r7, #4]
 8011302:	6838      	ldr	r0, [r7, #0]
 8011304:	f000 fbcc 	bl	8011aa0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4dataEv>
 8011308:	4603      	mov	r3, r0
 801130a:	2200      	movs	r2, #0
 801130c:	4619      	mov	r1, r3
 801130e:	4620      	mov	r0, r4
 8011310:	f7f5 f88b 	bl	800642a <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EEC1EPKfi>
  }
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	4618      	mov	r0, r3
 8011318:	370c      	adds	r7, #12
 801131a:	46bd      	mov	sp, r7
 801131c:	bd90      	pop	{r4, r7, pc}
	...

08011320 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEC1ERS5_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 8011320:	b580      	push	{r7, lr}
 8011322:	b084      	sub	sp, #16
 8011324:	af00      	add	r7, sp, #0
 8011326:	60f8      	str	r0, [r7, #12]
 8011328:	60b9      	str	r1, [r7, #8]
 801132a:	607a      	str	r2, [r7, #4]
 801132c:	68fb      	ldr	r3, [r7, #12]
 801132e:	687a      	ldr	r2, [r7, #4]
 8011330:	68b9      	ldr	r1, [r7, #8]
 8011332:	4618      	mov	r0, r3
 8011334:	f000 fbcc 	bl	8011ad0 <_ZN5Eigen9BlockImplIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ENS_5DenseEEC1ERS5_i>
      eigen_assert( (i>=0) && (
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	2b00      	cmp	r3, #0
 801133c:	db06      	blt.n	801134c <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEC1ERS5_i+0x2c>
 801133e:	68b8      	ldr	r0, [r7, #8]
 8011340:	f7f4 fe6b 	bl	800601a <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8011344:	4602      	mov	r2, r0
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	4293      	cmp	r3, r2
 801134a:	db05      	blt.n	8011358 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEC1ERS5_i+0x38>
 801134c:	4b05      	ldr	r3, [pc, #20]	; (8011364 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEC1ERS5_i+0x44>)
 801134e:	4a06      	ldr	r2, [pc, #24]	; (8011368 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEC1ERS5_i+0x48>)
 8011350:	2178      	movs	r1, #120	; 0x78
 8011352:	4806      	ldr	r0, [pc, #24]	; (801136c <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEC1ERS5_i+0x4c>)
 8011354:	f00b fe6e 	bl	801d034 <__assert_func>
    }
 8011358:	68fb      	ldr	r3, [r7, #12]
 801135a:	4618      	mov	r0, r3
 801135c:	3710      	adds	r7, #16
 801135e:	46bd      	mov	sp, r7
 8011360:	bd80      	pop	{r7, pc}
 8011362:	bf00      	nop
 8011364:	08023a20 	.word	0x08023a20
 8011368:	08027784 	.word	0x08027784
 801136c:	08023ba4 	.word	0x08023ba4

08011370 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8011370:	b480      	push	{r7}
 8011372:	b083      	sub	sp, #12
 8011374:	af00      	add	r7, sp, #0
 8011376:	6078      	str	r0, [r7, #4]
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	4618      	mov	r0, r3
 801137c:	370c      	adds	r7, #12
 801137e:	46bd      	mov	sp, r7
 8011380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011384:	4770      	bx	lr

08011386 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1Ev>:
 8011386:	b580      	push	{r7, lr}
 8011388:	b082      	sub	sp, #8
 801138a:	af00      	add	r7, sp, #0
 801138c:	6078      	str	r0, [r7, #4]
 801138e:	6878      	ldr	r0, [r7, #4]
 8011390:	f000 fbaf 	bl	8011af2 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1Ev>
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	4618      	mov	r0, r3
 8011398:	3708      	adds	r7, #8
 801139a:	46bd      	mov	sp, r7
 801139c:	bd80      	pop	{r7, pc}

0801139e <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 801139e:	b580      	push	{r7, lr}
 80113a0:	b082      	sub	sp, #8
 80113a2:	af00      	add	r7, sp, #0
 80113a4:	6078      	str	r0, [r7, #4]
 80113a6:	6878      	ldr	r0, [r7, #4]
 80113a8:	f7ff ffed 	bl	8011386 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1Ev>
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	4618      	mov	r0, r3
 80113b0:	3708      	adds	r7, #8
 80113b2:	46bd      	mov	sp, r7
 80113b4:	bd80      	pop	{r7, pc}

080113b6 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 80113b6:	b580      	push	{r7, lr}
 80113b8:	b082      	sub	sp, #8
 80113ba:	af00      	add	r7, sp, #0
 80113bc:	6078      	str	r0, [r7, #4]
 80113be:	f7f4 fd0e 	bl	8005dde <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 80113c2:	4603      	mov	r3, r0
 80113c4:	4618      	mov	r0, r3
 80113c6:	3708      	adds	r7, #8
 80113c8:	46bd      	mov	sp, r7
 80113ca:	bd80      	pop	{r7, pc}

080113cc <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 80113cc:	b580      	push	{r7, lr}
 80113ce:	b082      	sub	sp, #8
 80113d0:	af00      	add	r7, sp, #0
 80113d2:	6078      	str	r0, [r7, #4]
 80113d4:	f7f4 fd0b 	bl	8005dee <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 80113d8:	4603      	mov	r3, r0
 80113da:	4618      	mov	r0, r3
 80113dc:	3708      	adds	r7, #8
 80113de:	46bd      	mov	sp, r7
 80113e0:	bd80      	pop	{r7, pc}
	...

080113e4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERSC_RSH_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 80113e4:	b5b0      	push	{r4, r5, r7, lr}
 80113e6:	b084      	sub	sp, #16
 80113e8:	af00      	add	r7, sp, #0
 80113ea:	60f8      	str	r0, [r7, #12]
 80113ec:	60b9      	str	r1, [r7, #8]
 80113ee:	607a      	str	r2, [r7, #4]
 80113f0:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 80113f2:	68f8      	ldr	r0, [r7, #12]
 80113f4:	f7ff ffd3 	bl	801139e <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS_5DenseEEC1Ev>
 80113f8:	68fa      	ldr	r2, [r7, #12]
 80113fa:	68bb      	ldr	r3, [r7, #8]
 80113fc:	4614      	mov	r4, r2
 80113fe:	461d      	mov	r5, r3
 8011400:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011402:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011404:	e895 0003 	ldmia.w	r5, {r0, r1}
 8011408:	e884 0003 	stmia.w	r4, {r0, r1}
 801140c:	68fb      	ldr	r3, [r7, #12]
 801140e:	f103 0218 	add.w	r2, r3, #24
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	4614      	mov	r4, r2
 8011416:	461d      	mov	r5, r3
 8011418:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801141a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801141c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8011420:	e884 0003 	stmia.w	r4, {r0, r1}
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	3330      	adds	r3, #48	; 0x30
 8011428:	6839      	ldr	r1, [r7, #0]
 801142a:	4618      	mov	r0, r3
 801142c:	f7f3 fa38 	bl	80048a0 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8011430:	68b8      	ldr	r0, [r7, #8]
 8011432:	f7f9 fba1 	bl	800ab78 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 8011436:	4604      	mov	r4, r0
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	4618      	mov	r0, r3
 801143c:	f7ff ffbb 	bl	80113b6 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE4rowsEv>
 8011440:	4603      	mov	r3, r0
 8011442:	429c      	cmp	r4, r3
 8011444:	d10a      	bne.n	801145c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERSC_RSH_RKS3_+0x78>
 8011446:	68b8      	ldr	r0, [r7, #8]
 8011448:	f7f9 fba3 	bl	800ab92 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 801144c:	4604      	mov	r4, r0
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	4618      	mov	r0, r3
 8011452:	f7ff ffbb 	bl	80113cc <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE4colsEv>
 8011456:	4603      	mov	r3, r0
 8011458:	429c      	cmp	r4, r3
 801145a:	d005      	beq.n	8011468 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERSC_RSH_RKS3_+0x84>
 801145c:	4b05      	ldr	r3, [pc, #20]	; (8011474 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERSC_RSH_RKS3_+0x90>)
 801145e:	4a06      	ldr	r2, [pc, #24]	; (8011478 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERSC_RSH_RKS3_+0x94>)
 8011460:	2174      	movs	r1, #116	; 0x74
 8011462:	4806      	ldr	r0, [pc, #24]	; (801147c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERSC_RSH_RKS3_+0x98>)
 8011464:	f00b fde6 	bl	801d034 <__assert_func>
    }
 8011468:	68fb      	ldr	r3, [r7, #12]
 801146a:	4618      	mov	r0, r3
 801146c:	3710      	adds	r7, #16
 801146e:	46bd      	mov	sp, r7
 8011470:	bdb0      	pop	{r4, r5, r7, pc}
 8011472:	bf00      	nop
 8011474:	0801ee9c 	.word	0x0801ee9c
 8011478:	08027874 	.word	0x08027874
 801147c:	0801f100 	.word	0x0801f100

08011480 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 8011480:	b580      	push	{r7, lr}
 8011482:	b082      	sub	sp, #8
 8011484:	af00      	add	r7, sp, #0
 8011486:	6078      	str	r0, [r7, #4]
 8011488:	6878      	ldr	r0, [r7, #4]
 801148a:	f000 f809 	bl	80114a0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE7derivedEv>
 801148e:	4603      	mov	r3, r0
 8011490:	4618      	mov	r0, r3
 8011492:	f000 fb39 	bl	8011b08 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE4colsEv>
 8011496:	4603      	mov	r3, r0
 8011498:	4618      	mov	r0, r3
 801149a:	3708      	adds	r7, #8
 801149c:	46bd      	mov	sp, r7
 801149e:	bd80      	pop	{r7, pc}

080114a0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 80114a0:	b480      	push	{r7}
 80114a2:	b083      	sub	sp, #12
 80114a4:	af00      	add	r7, sp, #0
 80114a6:	6078      	str	r0, [r7, #4]
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	4618      	mov	r0, r3
 80114ac:	370c      	adds	r7, #12
 80114ae:	46bd      	mov	sp, r7
 80114b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114b4:	4770      	bx	lr

080114b6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 80114b6:	b580      	push	{r7, lr}
 80114b8:	b082      	sub	sp, #8
 80114ba:	af00      	add	r7, sp, #0
 80114bc:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	4618      	mov	r0, r3
 80114c2:	f7f9 fb59 	bl	800ab78 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 80114c6:	4603      	mov	r3, r0
    }
 80114c8:	4618      	mov	r0, r3
 80114ca:	3708      	adds	r7, #8
 80114cc:	46bd      	mov	sp, r7
 80114ce:	bd80      	pop	{r7, pc}

080114d0 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 80114d0:	b580      	push	{r7, lr}
 80114d2:	b082      	sub	sp, #8
 80114d4:	af00      	add	r7, sp, #0
 80114d6:	6078      	str	r0, [r7, #4]
 80114d8:	6878      	ldr	r0, [r7, #4]
 80114da:	f000 fb3c 	bl	8011b56 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEED1Ev>
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	4618      	mov	r0, r3
 80114e2:	3708      	adds	r7, #8
 80114e4:	46bd      	mov	sp, r7
 80114e6:	bd80      	pop	{r7, pc}

080114e8 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 80114e8:	b580      	push	{r7, lr}
 80114ea:	b082      	sub	sp, #8
 80114ec:	af00      	add	r7, sp, #0
 80114ee:	6078      	str	r0, [r7, #4]
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	4618      	mov	r0, r3
 80114f4:	f7ff ffec 	bl	80114d0 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	4618      	mov	r0, r3
 80114fc:	3708      	adds	r7, #8
 80114fe:	46bd      	mov	sp, r7
 8011500:	bd80      	pop	{r7, pc}

08011502 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 8011502:	b580      	push	{r7, lr}
 8011504:	b082      	sub	sp, #8
 8011506:	af00      	add	r7, sp, #0
 8011508:	6078      	str	r0, [r7, #4]
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	4618      	mov	r0, r3
 801150e:	f7ff ffeb 	bl	80114e8 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EED1Ev>
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	4618      	mov	r0, r3
 8011516:	3708      	adds	r7, #8
 8011518:	46bd      	mov	sp, r7
 801151a:	bd80      	pop	{r7, pc}

0801151c <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEED1Ev>:
struct evaluator<const T>
 801151c:	b580      	push	{r7, lr}
 801151e:	b082      	sub	sp, #8
 8011520:	af00      	add	r7, sp, #0
 8011522:	6078      	str	r0, [r7, #4]
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	4618      	mov	r0, r3
 8011528:	f7ff ffeb 	bl	8011502 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEED1Ev>
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	4618      	mov	r0, r3
 8011530:	3708      	adds	r7, #8
 8011532:	46bd      	mov	sp, r7
 8011534:	bd80      	pop	{r7, pc}

08011536 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE4DataD1Ev>:
  struct Data
 8011536:	b580      	push	{r7, lr}
 8011538:	b082      	sub	sp, #8
 801153a:	af00      	add	r7, sp, #0
 801153c:	6078      	str	r0, [r7, #4]
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	330c      	adds	r3, #12
 8011542:	4618      	mov	r0, r3
 8011544:	f7ff ffea 	bl	801151c <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEED1Ev>
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	3304      	adds	r3, #4
 801154c:	4618      	mov	r0, r3
 801154e:	f7f9 fc09 	bl	800ad64 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	4618      	mov	r0, r3
 8011556:	3708      	adds	r7, #8
 8011558:	46bd      	mov	sp, r7
 801155a:	bd80      	pop	{r7, pc}

0801155c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 801155c:	b580      	push	{r7, lr}
 801155e:	b082      	sub	sp, #8
 8011560:	af00      	add	r7, sp, #0
 8011562:	6078      	str	r0, [r7, #4]
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	4618      	mov	r0, r3
 8011568:	f7ff ffe5 	bl	8011536 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE4DataD1Ev>
 801156c:	6878      	ldr	r0, [r7, #4]
 801156e:	f000 fae7 	bl	8011b40 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEED1Ev>
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	4618      	mov	r0, r3
 8011576:	3708      	adds	r7, #8
 8011578:	46bd      	mov	sp, r7
 801157a:	bd80      	pop	{r7, pc}

0801157c <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 801157c:	b580      	push	{r7, lr}
 801157e:	b082      	sub	sp, #8
 8011580:	af00      	add	r7, sp, #0
 8011582:	6078      	str	r0, [r7, #4]
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	4618      	mov	r0, r3
 8011588:	f7ff ffe8 	bl	801155c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffED1Ev>
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	4618      	mov	r0, r3
 8011590:	3708      	adds	r7, #8
 8011592:	46bd      	mov	sp, r7
 8011594:	bd80      	pop	{r7, pc}

08011596 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 8011596:	b580      	push	{r7, lr}
 8011598:	b082      	sub	sp, #8
 801159a:	af00      	add	r7, sp, #0
 801159c:	6078      	str	r0, [r7, #4]
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	4618      	mov	r0, r3
 80115a2:	f7ff ffeb 	bl	801157c <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEED1Ev>
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	4618      	mov	r0, r3
 80115aa:	3708      	adds	r7, #8
 80115ac:	46bd      	mov	sp, r7
 80115ae:	bd80      	pop	{r7, pc}

080115b0 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 80115b0:	b580      	push	{r7, lr}
 80115b2:	ed2d 8b02 	vpush	{d8}
 80115b6:	b088      	sub	sp, #32
 80115b8:	af00      	add	r7, sp, #0
 80115ba:	6078      	str	r0, [r7, #4]
 80115bc:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 80115be:	6878      	ldr	r0, [r7, #4]
 80115c0:	f7ff fc53 	bl	8010e6a <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE4rowsEv>
 80115c4:	4603      	mov	r3, r0
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	dd05      	ble.n	80115d6 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 80115ca:	6878      	ldr	r0, [r7, #4]
 80115cc:	f7ff ff58 	bl	8011480 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE4colsEv>
 80115d0:	4603      	mov	r3, r0
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	dc06      	bgt.n	80115e4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 80115d6:	4b16      	ldr	r3, [pc, #88]	; (8011630 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 80115d8:	4a16      	ldr	r2, [pc, #88]	; (8011634 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 80115da:	f240 119b 	movw	r1, #411	; 0x19b
 80115de:	4816      	ldr	r0, [pc, #88]	; (8011638 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 80115e0:	f00b fd28 	bl	801d034 <__assert_func>
 80115e4:	bf00      	nop
  ThisEvaluator thisEval(derived());
 80115e6:	6878      	ldr	r0, [r7, #4]
 80115e8:	f7ff ff5a 	bl	80114a0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE7derivedEv>
 80115ec:	4602      	mov	r2, r0
 80115ee:	f107 030c 	add.w	r3, r7, #12
 80115f2:	4611      	mov	r1, r2
 80115f4:	4618      	mov	r0, r3
 80115f6:	f000 fa94 	bl	8011b22 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1ERKSJ_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 80115fa:	6878      	ldr	r0, [r7, #4]
 80115fc:	f7ff ff50 	bl	80114a0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE7derivedEv>
 8011600:	4602      	mov	r2, r0
 8011602:	f107 030c 	add.w	r3, r7, #12
 8011606:	6839      	ldr	r1, [r7, #0]
 8011608:	4618      	mov	r0, r3
 801160a:	f000 faaf 	bl	8011b6c <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi0ELi2EE3runISM_EEfRKSN_RKS3_RKT_>
 801160e:	eeb0 8a40 	vmov.f32	s16, s0
 8011612:	bf00      	nop
  ThisEvaluator thisEval(derived());
 8011614:	f107 030c 	add.w	r3, r7, #12
 8011618:	4618      	mov	r0, r3
 801161a:	f7ff ffbc 	bl	8011596 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 801161e:	eef0 7a48 	vmov.f32	s15, s16
}
 8011622:	eeb0 0a67 	vmov.f32	s0, s15
 8011626:	3720      	adds	r7, #32
 8011628:	46bd      	mov	sp, r7
 801162a:	ecbd 8b02 	vpop	{d8}
 801162e:	bd80      	pop	{r7, pc}
 8011630:	08023f1c 	.word	0x08023f1c
 8011634:	08027ae4 	.word	0x08027ae4
 8011638:	08024128 	.word	0x08024128

0801163c <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 801163c:	b480      	push	{r7}
 801163e:	b083      	sub	sp, #12
 8011640:	af00      	add	r7, sp, #0
 8011642:	6078      	str	r0, [r7, #4]
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	3310      	adds	r3, #16
 8011648:	4618      	mov	r0, r3
 801164a:	370c      	adds	r7, #12
 801164c:	46bd      	mov	sp, r7
 801164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011652:	4770      	bx	lr

08011654 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 8011654:	b480      	push	{r7}
 8011656:	b083      	sub	sp, #12
 8011658:	af00      	add	r7, sp, #0
 801165a:	6078      	str	r0, [r7, #4]
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	4618      	mov	r0, r3
 8011660:	370c      	adds	r7, #12
 8011662:	46bd      	mov	sp, r7
 8011664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011668:	4770      	bx	lr

0801166a <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 801166a:	b480      	push	{r7}
 801166c:	b083      	sub	sp, #12
 801166e:	af00      	add	r7, sp, #0
 8011670:	6078      	str	r0, [r7, #4]
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	68db      	ldr	r3, [r3, #12]
 8011676:	4618      	mov	r0, r3
 8011678:	370c      	adds	r7, #12
 801167a:	46bd      	mov	sp, r7
 801167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011680:	4770      	bx	lr

08011682 <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEEC1ERSA_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8011682:	b580      	push	{r7, lr}
 8011684:	b082      	sub	sp, #8
 8011686:	af00      	add	r7, sp, #0
 8011688:	6078      	str	r0, [r7, #4]
 801168a:	6039      	str	r1, [r7, #0]
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	6839      	ldr	r1, [r7, #0]
 8011690:	4618      	mov	r0, r3
 8011692:	f000 fa7c 	bl	8011b8e <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEEC1ERKS9_>
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	4618      	mov	r0, r3
 801169a:	3708      	adds	r7, #8
 801169c:	46bd      	mov	sp, r7
 801169e:	bd80      	pop	{r7, pc}

080116a0 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS4_>:
 80116a0:	b580      	push	{r7, lr}
 80116a2:	b082      	sub	sp, #8
 80116a4:	af00      	add	r7, sp, #0
 80116a6:	6078      	str	r0, [r7, #4]
 80116a8:	6039      	str	r1, [r7, #0]
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	6839      	ldr	r1, [r7, #0]
 80116ae:	4618      	mov	r0, r3
 80116b0:	f7f8 f8bb 	bl	800982a <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	4618      	mov	r0, r3
 80116b8:	3708      	adds	r7, #8
 80116ba:	46bd      	mov	sp, r7
 80116bc:	bd80      	pop	{r7, pc}

080116be <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE5coeffEi>:
  CoeffReturnType coeff(Index index) const
 80116be:	b5b0      	push	{r4, r5, r7, lr}
 80116c0:	b082      	sub	sp, #8
 80116c2:	af00      	add	r7, sp, #0
 80116c4:	6078      	str	r0, [r7, #4]
 80116c6:	6039      	str	r1, [r7, #0]
    return m_d.func()(m_d.lhsImpl.coeff(index), m_d.rhsImpl.coeff(index));
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	4618      	mov	r0, r3
 80116cc:	f000 fa6e 	bl	8011bac <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE4Data4funcEv>
 80116d0:	4604      	mov	r4, r0
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	3304      	adds	r3, #4
 80116d6:	6839      	ldr	r1, [r7, #0]
 80116d8:	4618      	mov	r0, r3
 80116da:	f7ff fc7f 	bl	8010fdc <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE5coeffEi>
 80116de:	4605      	mov	r5, r0
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	330c      	adds	r3, #12
 80116e4:	6839      	ldr	r1, [r7, #0]
 80116e6:	4618      	mov	r0, r3
 80116e8:	f7ff fc78 	bl	8010fdc <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE5coeffEi>
 80116ec:	4603      	mov	r3, r0
 80116ee:	461a      	mov	r2, r3
 80116f0:	4629      	mov	r1, r5
 80116f2:	4620      	mov	r0, r4
 80116f4:	f7f6 ff39 	bl	800856a <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 80116f8:	eef0 7a40 	vmov.f32	s15, s0
  }
 80116fc:	eeb0 0a67 	vmov.f32	s0, s15
 8011700:	3708      	adds	r7, #8
 8011702:	46bd      	mov	sp, r7
 8011704:	bdb0      	pop	{r4, r5, r7, pc}

08011706 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 8011706:	b590      	push	{r4, r7, lr}
 8011708:	b083      	sub	sp, #12
 801170a:	af00      	add	r7, sp, #0
 801170c:	6078      	str	r0, [r7, #4]
 801170e:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 8011710:	6878      	ldr	r0, [r7, #4]
 8011712:	f000 fa72 	bl	8011bfa <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 8011716:	683b      	ldr	r3, [r7, #0]
 8011718:	4618      	mov	r0, r3
 801171a:	f000 f81e 	bl	801175a <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE4dataEv>
 801171e:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	601a      	str	r2, [r3, #0]
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	1d1c      	adds	r4, r3, #4
 8011728:	683b      	ldr	r3, [r7, #0]
 801172a:	4618      	mov	r0, r3
 801172c:	f000 fa49 	bl	8011bc2 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EE11innerStrideEv>
 8011730:	4603      	mov	r3, r0
 8011732:	4619      	mov	r1, r3
 8011734:	4620      	mov	r0, r4
 8011736:	f7f4 fb2d 	bl	8005d94 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	1d5c      	adds	r4, r3, #5
 801173e:	683b      	ldr	r3, [r7, #0]
 8011740:	4618      	mov	r0, r3
 8011742:	f000 fa4c 	bl	8011bde <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EE11outerStrideEv>
 8011746:	4603      	mov	r3, r0
 8011748:	4619      	mov	r1, r3
 801174a:	4620      	mov	r0, r4
 801174c:	f7f4 fb08 	bl	8005d60 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	4618      	mov	r0, r3
 8011754:	370c      	adds	r7, #12
 8011756:	46bd      	mov	sp, r7
 8011758:	bd90      	pop	{r4, r7, pc}

0801175a <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC inline const Scalar* data() const { return m_data; }
 801175a:	b480      	push	{r7}
 801175c:	b083      	sub	sp, #12
 801175e:	af00      	add	r7, sp, #0
 8011760:	6078      	str	r0, [r7, #4]
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	681b      	ldr	r3, [r3, #0]
 8011766:	4618      	mov	r0, r3
 8011768:	370c      	adds	r7, #12
 801176a:	46bd      	mov	sp, r7
 801176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011770:	4770      	bx	lr

08011772 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffEC1ERKSD_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 8011772:	b580      	push	{r7, lr}
 8011774:	b082      	sub	sp, #8
 8011776:	af00      	add	r7, sp, #0
 8011778:	6078      	str	r0, [r7, #4]
 801177a:	6039      	str	r1, [r7, #0]
 801177c:	6878      	ldr	r0, [r7, #4]
 801177e:	f000 fa47 	bl	8011c10 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	6839      	ldr	r1, [r7, #0]
 8011786:	4618      	mov	r0, r3
 8011788:	f000 fa4d 	bl	8011c26 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE4DataC1ERKSD_>
  }
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	4618      	mov	r0, r3
 8011790:	3708      	adds	r7, #8
 8011792:	46bd      	mov	sp, r7
 8011794:	bd80      	pop	{r7, pc}

08011796 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi0ELi1EE3runERKSH_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8011796:	b580      	push	{r7, lr}
 8011798:	b082      	sub	sp, #8
 801179a:	af00      	add	r7, sp, #0
 801179c:	6078      	str	r0, [r7, #4]
 801179e:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 80117a0:	2200      	movs	r2, #0
 80117a2:	2100      	movs	r1, #0
 80117a4:	6878      	ldr	r0, [r7, #4]
 80117a6:	f000 fa66 	bl	8011c76 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE17coeffByOuterInnerEii>
 80117aa:	eef0 7a40 	vmov.f32	s15, s0
  }
 80117ae:	eeb0 0a67 	vmov.f32	s0, s15
 80117b2:	3708      	adds	r7, #8
 80117b4:	46bd      	mov	sp, r7
 80117b6:	bd80      	pop	{r7, pc}

080117b8 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi1ELi2EE3runERKSH_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 80117b8:	b580      	push	{r7, lr}
 80117ba:	b084      	sub	sp, #16
 80117bc:	af00      	add	r7, sp, #0
 80117be:	6078      	str	r0, [r7, #4]
 80117c0:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 80117c2:	6839      	ldr	r1, [r7, #0]
 80117c4:	6878      	ldr	r0, [r7, #4]
 80117c6:	f000 fa69 	bl	8011c9c <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi1ELi1EE3runERKSH_RKS3_>
 80117ca:	eef0 7a40 	vmov.f32	s15, s0
 80117ce:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 80117d2:	6839      	ldr	r1, [r7, #0]
 80117d4:	6878      	ldr	r0, [r7, #4]
 80117d6:	f000 fa72 	bl	8011cbe <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi2ELi1EE3runERKSH_RKS3_>
 80117da:	eef0 7a40 	vmov.f32	s15, s0
 80117de:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 80117e2:	f107 020c 	add.w	r2, r7, #12
 80117e6:	f107 0308 	add.w	r3, r7, #8
 80117ea:	4619      	mov	r1, r3
 80117ec:	6838      	ldr	r0, [r7, #0]
 80117ee:	f7f6 febc 	bl	800856a <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 80117f2:	eef0 7a40 	vmov.f32	s15, s0
  }
 80117f6:	eeb0 0a67 	vmov.f32	s0, s15
 80117fa:	3710      	adds	r7, #16
 80117fc:	46bd      	mov	sp, r7
 80117fe:	bd80      	pop	{r7, pc}

08011800 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE20rowIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index rowIndexByOuterInner(Index outer, Index inner)
 8011800:	b480      	push	{r7}
 8011802:	b083      	sub	sp, #12
 8011804:	af00      	add	r7, sp, #0
 8011806:	6078      	str	r0, [r7, #4]
 8011808:	6039      	str	r1, [r7, #0]
      : inner;
 801180a:	683b      	ldr	r3, [r7, #0]
  }
 801180c:	4618      	mov	r0, r3
 801180e:	370c      	adds	r7, #12
 8011810:	46bd      	mov	sp, r7
 8011812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011816:	4770      	bx	lr

08011818 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE20colIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index colIndexByOuterInner(Index outer, Index inner)
 8011818:	b480      	push	{r7}
 801181a:	b083      	sub	sp, #12
 801181c:	af00      	add	r7, sp, #0
 801181e:	6078      	str	r0, [r7, #4]
 8011820:	6039      	str	r1, [r7, #0]
      : outer;
 8011822:	687b      	ldr	r3, [r7, #4]
  }
 8011824:	4618      	mov	r0, r3
 8011826:	370c      	adds	r7, #12
 8011828:	46bd      	mov	sp, r7
 801182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801182e:	4770      	bx	lr

08011830 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE11assignCoeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index row, Index col)
 8011830:	b5b0      	push	{r4, r5, r7, lr}
 8011832:	b086      	sub	sp, #24
 8011834:	af00      	add	r7, sp, #0
 8011836:	60f8      	str	r0, [r7, #12]
 8011838:	60b9      	str	r1, [r7, #8]
 801183a:	607a      	str	r2, [r7, #4]
    m_functor.assignCoeff(m_dst.coeffRef(row,col), m_src.coeff(row,col));
 801183c:	68fb      	ldr	r3, [r7, #12]
 801183e:	689c      	ldr	r4, [r3, #8]
 8011840:	68fb      	ldr	r3, [r7, #12]
 8011842:	681b      	ldr	r3, [r3, #0]
 8011844:	687a      	ldr	r2, [r7, #4]
 8011846:	68b9      	ldr	r1, [r7, #8]
 8011848:	4618      	mov	r0, r3
 801184a:	f7f6 fb2d 	bl	8007ea8 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEii>
 801184e:	4605      	mov	r5, r0
 8011850:	68fb      	ldr	r3, [r7, #12]
 8011852:	685b      	ldr	r3, [r3, #4]
 8011854:	687a      	ldr	r2, [r7, #4]
 8011856:	68b9      	ldr	r1, [r7, #8]
 8011858:	4618      	mov	r0, r3
 801185a:	f000 fa41 	bl	8011ce0 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELi4ENS_10DenseShapeES7_ffE5coeffEii>
 801185e:	eef0 7a40 	vmov.f32	s15, s0
 8011862:	edc7 7a05 	vstr	s15, [r7, #20]
 8011866:	f107 0314 	add.w	r3, r7, #20
 801186a:	461a      	mov	r2, r3
 801186c:	4629      	mov	r1, r5
 801186e:	4620      	mov	r0, r4
 8011870:	f000 fa69 	bl	8011d46 <_ZNK5Eigen8internal13sub_assign_opIffE11assignCoeffERfRKf>
  }
 8011874:	bf00      	nop
 8011876:	3718      	adds	r7, #24
 8011878:	46bd      	mov	sp, r7
 801187a:	bdb0      	pop	{r4, r5, r7, pc}

0801187c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi2ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 801187c:	b580      	push	{r7, lr}
 801187e:	b082      	sub	sp, #8
 8011880:	af00      	add	r7, sp, #0
 8011882:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8011884:	2202      	movs	r2, #2
 8011886:	2100      	movs	r1, #0
 8011888:	6878      	ldr	r0, [r7, #4]
 801188a:	f7ff fc0d 	bl	80110a8 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 801188e:	6878      	ldr	r0, [r7, #4]
 8011890:	f000 fa70 	bl	8011d74 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi3ELi9EE3runERSE_>
  }
 8011894:	bf00      	nop
 8011896:	3708      	adds	r7, #8
 8011898:	46bd      	mov	sp, r7
 801189a:	bd80      	pop	{r7, pc}

0801189c <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE8startRowEv>:
    StorageIndex startRow() const EIGEN_NOEXCEPT
 801189c:	b580      	push	{r7, lr}
 801189e:	b082      	sub	sp, #8
 80118a0:	af00      	add	r7, sp, #0
 80118a2:	6078      	str	r0, [r7, #4]
      return m_startRow.value();
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	3310      	adds	r3, #16
 80118a8:	4618      	mov	r0, r3
 80118aa:	f7fd fff8 	bl	800f89e <_ZNK5Eigen8internal19variable_if_dynamicIiLin1EE5valueEv>
 80118ae:	4603      	mov	r3, r0
    }
 80118b0:	4618      	mov	r0, r3
 80118b2:	3708      	adds	r7, #8
 80118b4:	46bd      	mov	sp, r7
 80118b6:	bd80      	pop	{r7, pc}

080118b8 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE8startColEv>:
    StorageIndex startCol() const EIGEN_NOEXCEPT
 80118b8:	b580      	push	{r7, lr}
 80118ba:	b082      	sub	sp, #8
 80118bc:	af00      	add	r7, sp, #0
 80118be:	6078      	str	r0, [r7, #4]
      return m_startCol.value();
 80118c0:	f7fd fbbd 	bl	800f03e <_ZN5Eigen8internal19variable_if_dynamicIiLi0EE5valueEv>
 80118c4:	4603      	mov	r3, r0
    }
 80118c6:	4618      	mov	r0, r3
 80118c8:	3708      	adds	r7, #8
 80118ca:	46bd      	mov	sp, r7
 80118cc:	bd80      	pop	{r7, pc}

080118ce <_ZN5Eigen8internal15unary_evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS0_10IndexBasedEfEC1ERKSG_>:
  explicit unary_evaluator(const XprType& block)
 80118ce:	b5b0      	push	{r4, r5, r7, lr}
 80118d0:	b082      	sub	sp, #8
 80118d2:	af00      	add	r7, sp, #0
 80118d4:	6078      	str	r0, [r7, #4]
 80118d6:	6039      	str	r1, [r7, #0]
      m_linear_offset(ForwardLinearAccess?(ArgType::IsRowMajor ? block.startRow()*block.nestedExpression().cols() + block.startCol() : block.startCol()*block.nestedExpression().rows() + block.startRow()):0)
 80118d8:	6878      	ldr	r0, [r7, #4]
 80118da:	f000 fa66 	bl	8011daa <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1Ev>
 80118de:	687c      	ldr	r4, [r7, #4]
    : m_argImpl(block.nestedExpression()),
 80118e0:	683b      	ldr	r3, [r7, #0]
 80118e2:	4618      	mov	r0, r3
 80118e4:	f000 fa56 	bl	8011d94 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE16nestedExpressionEv>
 80118e8:	4603      	mov	r3, r0
      m_linear_offset(ForwardLinearAccess?(ArgType::IsRowMajor ? block.startRow()*block.nestedExpression().cols() + block.startCol() : block.startCol()*block.nestedExpression().rows() + block.startRow()):0)
 80118ea:	4619      	mov	r1, r3
 80118ec:	4620      	mov	r0, r4
 80118ee:	f000 fa67 	bl	8011dc0 <_ZN5Eigen8internal9evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC1ERSE_>
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	f103 0410 	add.w	r4, r3, #16
 80118f8:	683b      	ldr	r3, [r7, #0]
 80118fa:	4618      	mov	r0, r3
 80118fc:	f7ff ffce 	bl	801189c <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE8startRowEv>
 8011900:	4603      	mov	r3, r0
 8011902:	4619      	mov	r1, r3
 8011904:	4620      	mov	r0, r4
 8011906:	f7fb fab9 	bl	800ce7c <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	f103 0414 	add.w	r4, r3, #20
 8011910:	683b      	ldr	r3, [r7, #0]
 8011912:	4618      	mov	r0, r3
 8011914:	f7ff ffd0 	bl	80118b8 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE8startColEv>
 8011918:	4603      	mov	r3, r0
 801191a:	4619      	mov	r1, r3
 801191c:	4620      	mov	r0, r4
 801191e:	f7fb fb21 	bl	800cf64 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	f103 0518 	add.w	r5, r3, #24
 8011928:	683b      	ldr	r3, [r7, #0]
 801192a:	4618      	mov	r0, r3
 801192c:	f7ff ffc4 	bl	80118b8 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE8startColEv>
 8011930:	4604      	mov	r4, r0
 8011932:	683b      	ldr	r3, [r7, #0]
 8011934:	4618      	mov	r0, r3
 8011936:	f000 fa2d 	bl	8011d94 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE16nestedExpressionEv>
 801193a:	4603      	mov	r3, r0
 801193c:	4618      	mov	r0, r3
 801193e:	f7f5 fd6c 	bl	800741a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4rowsEv>
 8011942:	4603      	mov	r3, r0
 8011944:	fb03 f404 	mul.w	r4, r3, r4
 8011948:	683b      	ldr	r3, [r7, #0]
 801194a:	4618      	mov	r0, r3
 801194c:	f7ff ffa6 	bl	801189c <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE8startRowEv>
 8011950:	4603      	mov	r3, r0
 8011952:	4423      	add	r3, r4
 8011954:	4619      	mov	r1, r3
 8011956:	4628      	mov	r0, r5
 8011958:	f7fb fa90 	bl	800ce7c <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
  { }
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	4618      	mov	r0, r3
 8011960:	3708      	adds	r7, #8
 8011962:	46bd      	mov	sp, r7
 8011964:	bdb0      	pop	{r4, r5, r7, pc}

08011966 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 8011966:	b580      	push	{r7, lr}
 8011968:	b082      	sub	sp, #8
 801196a:	af00      	add	r7, sp, #0
 801196c:	6078      	str	r0, [r7, #4]
             : m_xpr.outerStride();
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	689b      	ldr	r3, [r3, #8]
             ? m_xpr.innerStride()
 8011972:	4618      	mov	r0, r3
 8011974:	f7f5 ffdc 	bl	8007930 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>
 8011978:	4603      	mov	r3, r0
    }
 801197a:	4618      	mov	r0, r3
 801197c:	3708      	adds	r7, #8
 801197e:	46bd      	mov	sp, r7
 8011980:	bd80      	pop	{r7, pc}

08011982 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 8011982:	b580      	push	{r7, lr}
 8011984:	b082      	sub	sp, #8
 8011986:	af00      	add	r7, sp, #0
 8011988:	6078      	str	r0, [r7, #4]
                    : m_xpr.innerStride();
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	689b      	ldr	r3, [r3, #8]
                    ? m_xpr.outerStride()
 801198e:	4618      	mov	r0, r3
 8011990:	f7fb fa1e 	bl	800cdd0 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11innerStrideEv>
 8011994:	4603      	mov	r3, r0
    }
 8011996:	4618      	mov	r0, r3
 8011998:	3708      	adds	r7, #8
 801199a:	46bd      	mov	sp, r7
 801199c:	bd80      	pop	{r7, pc}

0801199e <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 801199e:	b480      	push	{r7}
 80119a0:	b083      	sub	sp, #12
 80119a2:	af00      	add	r7, sp, #0
 80119a4:	6078      	str	r0, [r7, #4]
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	4618      	mov	r0, r3
 80119aa:	370c      	adds	r7, #12
 80119ac:	46bd      	mov	sp, r7
 80119ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119b2:	4770      	bx	lr

080119b4 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 80119b4:	b480      	push	{r7}
 80119b6:	b083      	sub	sp, #12
 80119b8:	af00      	add	r7, sp, #0
 80119ba:	6078      	str	r0, [r7, #4]
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	681b      	ldr	r3, [r3, #0]
 80119c0:	4618      	mov	r0, r3
 80119c2:	370c      	adds	r7, #12
 80119c4:	46bd      	mov	sp, r7
 80119c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ca:	4770      	bx	lr

080119cc <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 80119cc:	b480      	push	{r7}
 80119ce:	b083      	sub	sp, #12
 80119d0:	af00      	add	r7, sp, #0
 80119d2:	6078      	str	r0, [r7, #4]
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	685b      	ldr	r3, [r3, #4]
 80119d8:	4618      	mov	r0, r3
 80119da:	370c      	adds	r7, #12
 80119dc:	46bd      	mov	sp, r7
 80119de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119e2:	4770      	bx	lr

080119e4 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEC1Ev>:
 80119e4:	b480      	push	{r7}
 80119e6:	b083      	sub	sp, #12
 80119e8:	af00      	add	r7, sp, #0
 80119ea:	6078      	str	r0, [r7, #4]
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	4618      	mov	r0, r3
 80119f0:	370c      	adds	r7, #12
 80119f2:	46bd      	mov	sp, r7
 80119f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119f8:	4770      	bx	lr

080119fa <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeffByOuterInner(Index outer, Index inner)
 80119fa:	b580      	push	{r7, lr}
 80119fc:	b086      	sub	sp, #24
 80119fe:	af00      	add	r7, sp, #0
 8011a00:	60f8      	str	r0, [r7, #12]
 8011a02:	60b9      	str	r1, [r7, #8]
 8011a04:	607a      	str	r2, [r7, #4]
    Index row = rowIndexByOuterInner(outer, inner);
 8011a06:	6879      	ldr	r1, [r7, #4]
 8011a08:	68b8      	ldr	r0, [r7, #8]
 8011a0a:	f000 f9e8 	bl	8011dde <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>
 8011a0e:	6178      	str	r0, [r7, #20]
    Index col = colIndexByOuterInner(outer, inner);
 8011a10:	6879      	ldr	r1, [r7, #4]
 8011a12:	68b8      	ldr	r0, [r7, #8]
 8011a14:	f000 f9ef 	bl	8011df6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>
 8011a18:	6138      	str	r0, [r7, #16]
    assignCoeff(row, col);
 8011a1a:	693a      	ldr	r2, [r7, #16]
 8011a1c:	6979      	ldr	r1, [r7, #20]
 8011a1e:	68f8      	ldr	r0, [r7, #12]
 8011a20:	f000 f9f5 	bl	8011e0e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>
  }
 8011a24:	bf00      	nop
 8011a26:	3718      	adds	r7, #24
 8011a28:	46bd      	mov	sp, r7
 8011a2a:	bd80      	pop	{r7, pc}

08011a2c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8011a2c:	b580      	push	{r7, lr}
 8011a2e:	b082      	sub	sp, #8
 8011a30:	af00      	add	r7, sp, #0
 8011a32:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8011a34:	2201      	movs	r2, #1
 8011a36:	2100      	movs	r1, #0
 8011a38:	6878      	ldr	r0, [r7, #4]
 8011a3a:	f7ff ffde 	bl	80119fa <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8011a3e:	6878      	ldr	r0, [r7, #4]
 8011a40:	f000 fa0b 	bl	8011e5a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSC_>
  }
 8011a44:	bf00      	nop
 8011a46:	3708      	adds	r7, #8
 8011a48:	46bd      	mov	sp, r7
 8011a4a:	bd80      	pop	{r7, pc}

08011a4c <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EEC1ERKNS_5BlockIS6_Li3ELi1ELb0EEE>:
  explicit block_evaluator(const XprType& block)
 8011a4c:	b580      	push	{r7, lr}
 8011a4e:	b082      	sub	sp, #8
 8011a50:	af00      	add	r7, sp, #0
 8011a52:	6078      	str	r0, [r7, #4]
 8011a54:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	6839      	ldr	r1, [r7, #0]
 8011a5a:	4618      	mov	r0, r3
 8011a5c:	f000 fa0d 	bl	8011e7a <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS8_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 8011a60:	683b      	ldr	r3, [r7, #0]
 8011a62:	4618      	mov	r0, r3
 8011a64:	f000 fa33 	bl	8011ece <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE4dataEv>
 8011a68:	bf00      	nop
  }
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	4618      	mov	r0, r3
 8011a6e:	3708      	adds	r7, #8
 8011a70:	46bd      	mov	sp, r7
 8011a72:	bd80      	pop	{r7, pc}

08011a74 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 8011a74:	b580      	push	{r7, lr}
 8011a76:	b082      	sub	sp, #8
 8011a78:	af00      	add	r7, sp, #0
 8011a7a:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 8011a7c:	f7f4 f9b7 	bl	8005dee <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 8011a80:	4603      	mov	r3, r0
  }
 8011a82:	4618      	mov	r0, r3
 8011a84:	3708      	adds	r7, #8
 8011a86:	46bd      	mov	sp, r7
 8011a88:	bd80      	pop	{r7, pc}

08011a8a <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 8011a8a:	b580      	push	{r7, lr}
 8011a8c:	b082      	sub	sp, #8
 8011a8e:	af00      	add	r7, sp, #0
 8011a90:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 8011a92:	f7f4 f9a4 	bl	8005dde <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 8011a96:	4603      	mov	r3, r0
  }
 8011a98:	4618      	mov	r0, r3
 8011a9a:	3708      	adds	r7, #8
 8011a9c:	46bd      	mov	sp, r7
 8011a9e:	bd80      	pop	{r7, pc}

08011aa0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4dataEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar *data() const
 8011aa0:	b580      	push	{r7, lr}
 8011aa2:	b082      	sub	sp, #8
 8011aa4:	af00      	add	r7, sp, #0
 8011aa6:	6078      	str	r0, [r7, #4]
    { return m_storage.data(); }
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	4618      	mov	r0, r3
 8011aac:	f000 fa1b 	bl	8011ee6 <_ZNK5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4dataEv>
 8011ab0:	4603      	mov	r3, r0
 8011ab2:	4618      	mov	r0, r3
 8011ab4:	3708      	adds	r7, #8
 8011ab6:	46bd      	mov	sp, r7
 8011ab8:	bd80      	pop	{r7, pc}

08011aba <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8011aba:	b480      	push	{r7}
 8011abc:	b083      	sub	sp, #12
 8011abe:	af00      	add	r7, sp, #0
 8011ac0:	6078      	str	r0, [r7, #4]
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	4618      	mov	r0, r3
 8011ac6:	370c      	adds	r7, #12
 8011ac8:	46bd      	mov	sp, r7
 8011aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ace:	4770      	bx	lr

08011ad0 <_ZN5Eigen9BlockImplIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ENS_5DenseEEC1ERS5_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 8011ad0:	b580      	push	{r7, lr}
 8011ad2:	b084      	sub	sp, #16
 8011ad4:	af00      	add	r7, sp, #0
 8011ad6:	60f8      	str	r0, [r7, #12]
 8011ad8:	60b9      	str	r1, [r7, #8]
 8011ada:	607a      	str	r2, [r7, #4]
 8011adc:	68fb      	ldr	r3, [r7, #12]
 8011ade:	687a      	ldr	r2, [r7, #4]
 8011ae0:	68b9      	ldr	r1, [r7, #8]
 8011ae2:	4618      	mov	r0, r3
 8011ae4:	f000 fa16 	bl	8011f14 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EEC1ERS6_i>
 8011ae8:	68fb      	ldr	r3, [r7, #12]
 8011aea:	4618      	mov	r0, r3
 8011aec:	3710      	adds	r7, #16
 8011aee:	46bd      	mov	sp, r7
 8011af0:	bd80      	pop	{r7, pc}

08011af2 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8011af2:	b480      	push	{r7}
 8011af4:	b083      	sub	sp, #12
 8011af6:	af00      	add	r7, sp, #0
 8011af8:	6078      	str	r0, [r7, #4]
    }
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	4618      	mov	r0, r3
 8011afe:	370c      	adds	r7, #12
 8011b00:	46bd      	mov	sp, r7
 8011b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b06:	4770      	bx	lr

08011b08 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 8011b08:	b580      	push	{r7, lr}
 8011b0a:	b082      	sub	sp, #8
 8011b0c:	af00      	add	r7, sp, #0
 8011b0e:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	4618      	mov	r0, r3
 8011b14:	f7f9 f83d 	bl	800ab92 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 8011b18:	4603      	mov	r3, r0
    }
 8011b1a:	4618      	mov	r0, r3
 8011b1c:	3708      	adds	r7, #8
 8011b1e:	46bd      	mov	sp, r7
 8011b20:	bd80      	pop	{r7, pc}

08011b22 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1ERKSJ_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 8011b22:	b580      	push	{r7, lr}
 8011b24:	b082      	sub	sp, #8
 8011b26:	af00      	add	r7, sp, #0
 8011b28:	6078      	str	r0, [r7, #4]
 8011b2a:	6039      	str	r1, [r7, #0]
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	6839      	ldr	r1, [r7, #0]
 8011b30:	4618      	mov	r0, r3
 8011b32:	f000 fa25 	bl	8011f80 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1ERKSJ_>
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	4618      	mov	r0, r3
 8011b3a:	3708      	adds	r7, #8
 8011b3c:	46bd      	mov	sp, r7
 8011b3e:	bd80      	pop	{r7, pc}

08011b40 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8011b40:	b480      	push	{r7}
 8011b42:	b083      	sub	sp, #12
 8011b44:	af00      	add	r7, sp, #0
 8011b46:	6078      	str	r0, [r7, #4]
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	4618      	mov	r0, r3
 8011b4c:	370c      	adds	r7, #12
 8011b4e:	46bd      	mov	sp, r7
 8011b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b54:	4770      	bx	lr

08011b56 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEED1Ev>:
 8011b56:	b480      	push	{r7}
 8011b58:	b083      	sub	sp, #12
 8011b5a:	af00      	add	r7, sp, #0
 8011b5c:	6078      	str	r0, [r7, #4]
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	4618      	mov	r0, r3
 8011b62:	370c      	adds	r7, #12
 8011b64:	46bd      	mov	sp, r7
 8011b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b6a:	4770      	bx	lr

08011b6c <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi0ELi2EE3runISM_EEfRKSN_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 8011b6c:	b580      	push	{r7, lr}
 8011b6e:	b084      	sub	sp, #16
 8011b70:	af00      	add	r7, sp, #0
 8011b72:	60f8      	str	r0, [r7, #12]
 8011b74:	60b9      	str	r1, [r7, #8]
 8011b76:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 8011b78:	68b9      	ldr	r1, [r7, #8]
 8011b7a:	68f8      	ldr	r0, [r7, #12]
 8011b7c:	f000 fa0f 	bl	8011f9e <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi0ELi3EE3runERKSN_RKS3_>
 8011b80:	eef0 7a40 	vmov.f32	s15, s0
  }
 8011b84:	eeb0 0a67 	vmov.f32	s0, s15
 8011b88:	3710      	adds	r7, #16
 8011b8a:	46bd      	mov	sp, r7
 8011b8c:	bd80      	pop	{r7, pc}

08011b8e <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEEC1ERKS9_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8011b8e:	b580      	push	{r7, lr}
 8011b90:	b082      	sub	sp, #8
 8011b92:	af00      	add	r7, sp, #0
 8011b94:	6078      	str	r0, [r7, #4]
 8011b96:	6039      	str	r1, [r7, #0]
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	6839      	ldr	r1, [r7, #0]
 8011b9c:	4618      	mov	r0, r3
 8011b9e:	f000 fa22 	bl	8011fe6 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEELi6ENS_10DenseShapeESA_ffEC1ERKS9_>
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	4618      	mov	r0, r3
 8011ba6:	3708      	adds	r7, #8
 8011ba8:	46bd      	mov	sp, r7
 8011baa:	bd80      	pop	{r7, pc}

08011bac <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 8011bac:	b480      	push	{r7}
 8011bae:	b083      	sub	sp, #12
 8011bb0:	af00      	add	r7, sp, #0
 8011bb2:	6078      	str	r0, [r7, #4]
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	4618      	mov	r0, r3
 8011bb8:	370c      	adds	r7, #12
 8011bba:	46bd      	mov	sp, r7
 8011bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bc0:	4770      	bx	lr

08011bc2 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 8011bc2:	b580      	push	{r7, lr}
 8011bc4:	b082      	sub	sp, #8
 8011bc6:	af00      	add	r7, sp, #0
 8011bc8:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	689b      	ldr	r3, [r3, #8]
 8011bce:	4618      	mov	r0, r3
 8011bd0:	f7fb f973 	bl	800ceba <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11innerStrideEv>
 8011bd4:	4603      	mov	r3, r0
    }
 8011bd6:	4618      	mov	r0, r3
 8011bd8:	3708      	adds	r7, #8
 8011bda:	46bd      	mov	sp, r7
 8011bdc:	bd80      	pop	{r7, pc}

08011bde <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 8011bde:	b580      	push	{r7, lr}
 8011be0:	b082      	sub	sp, #8
 8011be2:	af00      	add	r7, sp, #0
 8011be4:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	689b      	ldr	r3, [r3, #8]
 8011bea:	4618      	mov	r0, r3
 8011bec:	f7f4 fcd6 	bl	800659c <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>
 8011bf0:	4603      	mov	r3, r0
    }
 8011bf2:	4618      	mov	r0, r3
 8011bf4:	3708      	adds	r7, #8
 8011bf6:	46bd      	mov	sp, r7
 8011bf8:	bd80      	pop	{r7, pc}

08011bfa <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8011bfa:	b480      	push	{r7}
 8011bfc:	b083      	sub	sp, #12
 8011bfe:	af00      	add	r7, sp, #0
 8011c00:	6078      	str	r0, [r7, #4]
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	4618      	mov	r0, r3
 8011c06:	370c      	adds	r7, #12
 8011c08:	46bd      	mov	sp, r7
 8011c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c0e:	4770      	bx	lr

08011c10 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
 8011c10:	b480      	push	{r7}
 8011c12:	b083      	sub	sp, #12
 8011c14:	af00      	add	r7, sp, #0
 8011c16:	6078      	str	r0, [r7, #4]
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	4618      	mov	r0, r3
 8011c1c:	370c      	adds	r7, #12
 8011c1e:	46bd      	mov	sp, r7
 8011c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c24:	4770      	bx	lr

08011c26 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE4DataC1ERKSD_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 8011c26:	b590      	push	{r4, r7, lr}
 8011c28:	b083      	sub	sp, #12
 8011c2a:	af00      	add	r7, sp, #0
 8011c2c:	6078      	str	r0, [r7, #4]
 8011c2e:	6039      	str	r1, [r7, #0]
 8011c30:	687c      	ldr	r4, [r7, #4]
 8011c32:	6838      	ldr	r0, [r7, #0]
 8011c34:	f000 fa14 	bl	8012060 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE7functorEv>
 8011c38:	4603      	mov	r3, r0
 8011c3a:	4619      	mov	r1, r3
 8011c3c:	4620      	mov	r0, r4
 8011c3e:	f7f2 fe2f 	bl	80048a0 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	1d1c      	adds	r4, r3, #4
 8011c46:	6838      	ldr	r0, [r7, #0]
 8011c48:	f000 fa16 	bl	8012078 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE3lhsEv>
 8011c4c:	4603      	mov	r3, r0
 8011c4e:	4619      	mov	r1, r3
 8011c50:	4620      	mov	r0, r4
 8011c52:	f000 fa28 	bl	80120a6 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERS7_>
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	f103 0408 	add.w	r4, r3, #8
 8011c5c:	6838      	ldr	r0, [r7, #0]
 8011c5e:	f000 fa16 	bl	801208e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE3rhsEv>
 8011c62:	4603      	mov	r3, r0
 8011c64:	4619      	mov	r1, r3
 8011c66:	4620      	mov	r0, r4
 8011c68:	f7f8 fdd9 	bl	800a81e <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS4_>
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	4618      	mov	r0, r3
 8011c70:	370c      	adds	r7, #12
 8011c72:	46bd      	mov	sp, r7
 8011c74:	bd90      	pop	{r4, r7, pc}

08011c76 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 8011c76:	b580      	push	{r7, lr}
 8011c78:	b084      	sub	sp, #16
 8011c7a:	af00      	add	r7, sp, #0
 8011c7c:	60f8      	str	r0, [r7, #12]
 8011c7e:	60b9      	str	r1, [r7, #8]
 8011c80:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 8011c82:	68fb      	ldr	r3, [r7, #12]
 8011c84:	68ba      	ldr	r2, [r7, #8]
 8011c86:	6879      	ldr	r1, [r7, #4]
 8011c88:	4618      	mov	r0, r3
 8011c8a:	f000 fa1b 	bl	80120c4 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE5coeffEii>
 8011c8e:	eef0 7a40 	vmov.f32	s15, s0
 8011c92:	eeb0 0a67 	vmov.f32	s0, s15
 8011c96:	3710      	adds	r7, #16
 8011c98:	46bd      	mov	sp, r7
 8011c9a:	bd80      	pop	{r7, pc}

08011c9c <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi1ELi1EE3runERKSH_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8011c9c:	b580      	push	{r7, lr}
 8011c9e:	b082      	sub	sp, #8
 8011ca0:	af00      	add	r7, sp, #0
 8011ca2:	6078      	str	r0, [r7, #4]
 8011ca4:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8011ca6:	2201      	movs	r2, #1
 8011ca8:	2100      	movs	r1, #0
 8011caa:	6878      	ldr	r0, [r7, #4]
 8011cac:	f7ff ffe3 	bl	8011c76 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE17coeffByOuterInnerEii>
 8011cb0:	eef0 7a40 	vmov.f32	s15, s0
  }
 8011cb4:	eeb0 0a67 	vmov.f32	s0, s15
 8011cb8:	3708      	adds	r7, #8
 8011cba:	46bd      	mov	sp, r7
 8011cbc:	bd80      	pop	{r7, pc}

08011cbe <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi2ELi1EE3runERKSH_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8011cbe:	b580      	push	{r7, lr}
 8011cc0:	b082      	sub	sp, #8
 8011cc2:	af00      	add	r7, sp, #0
 8011cc4:	6078      	str	r0, [r7, #4]
 8011cc6:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8011cc8:	2202      	movs	r2, #2
 8011cca:	2100      	movs	r1, #0
 8011ccc:	6878      	ldr	r0, [r7, #4]
 8011cce:	f7ff ffd2 	bl	8011c76 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE17coeffByOuterInnerEii>
 8011cd2:	eef0 7a40 	vmov.f32	s15, s0
  }
 8011cd6:	eeb0 0a67 	vmov.f32	s0, s15
 8011cda:	3708      	adds	r7, #8
 8011cdc:	46bd      	mov	sp, r7
 8011cde:	bd80      	pop	{r7, pc}

08011ce0 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELi4ENS_10DenseShapeES7_ffE5coeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const CoeffReturnType coeff(Index row, Index col) const
 8011ce0:	b580      	push	{r7, lr}
 8011ce2:	b0a4      	sub	sp, #144	; 0x90
 8011ce4:	af00      	add	r7, sp, #0
 8011ce6:	60f8      	str	r0, [r7, #12]
 8011ce8:	60b9      	str	r1, [r7, #8]
 8011cea:	607a      	str	r2, [r7, #4]
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 8011cec:	68fb      	ldr	r3, [r7, #12]
 8011cee:	6819      	ldr	r1, [r3, #0]
 8011cf0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8011cf4:	68ba      	ldr	r2, [r7, #8]
 8011cf6:	4618      	mov	r0, r3
 8011cf8:	f7f8 fc16 	bl	800a528 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE3rowEi>
 8011cfc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011d00:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8011d04:	4611      	mov	r1, r2
 8011d06:	4618      	mov	r0, r3
 8011d08:	f7f8 fc21 	bl	800a54e <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE9transposeEv>
 8011d0c:	68fb      	ldr	r3, [r7, #12]
 8011d0e:	6859      	ldr	r1, [r3, #4]
 8011d10:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8011d14:	687a      	ldr	r2, [r7, #4]
 8011d16:	4618      	mov	r0, r3
 8011d18:	f000 f9ff 	bl	801211a <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE3colEi>
 8011d1c:	f107 0314 	add.w	r3, r7, #20
 8011d20:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8011d24:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8011d28:	4618      	mov	r0, r3
 8011d2a:	f000 fa09 	bl	8012140 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE12cwiseProductINS2_IKNS3_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>
 8011d2e:	f107 0314 	add.w	r3, r7, #20
 8011d32:	4618      	mov	r0, r3
 8011d34:	f000 fa32 	bl	801219c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE3sumEv>
 8011d38:	eef0 7a40 	vmov.f32	s15, s0
  }
 8011d3c:	eeb0 0a67 	vmov.f32	s0, s15
 8011d40:	3790      	adds	r7, #144	; 0x90
 8011d42:	46bd      	mov	sp, r7
 8011d44:	bd80      	pop	{r7, pc}

08011d46 <_ZNK5Eigen8internal13sub_assign_opIffE11assignCoeffERfRKf>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a -= b; }
 8011d46:	b480      	push	{r7}
 8011d48:	b085      	sub	sp, #20
 8011d4a:	af00      	add	r7, sp, #0
 8011d4c:	60f8      	str	r0, [r7, #12]
 8011d4e:	60b9      	str	r1, [r7, #8]
 8011d50:	607a      	str	r2, [r7, #4]
 8011d52:	68bb      	ldr	r3, [r7, #8]
 8011d54:	ed93 7a00 	vldr	s14, [r3]
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	edd3 7a00 	vldr	s15, [r3]
 8011d5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011d62:	68bb      	ldr	r3, [r7, #8]
 8011d64:	edc3 7a00 	vstr	s15, [r3]
 8011d68:	bf00      	nop
 8011d6a:	3714      	adds	r7, #20
 8011d6c:	46bd      	mov	sp, r7
 8011d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d72:	4770      	bx	lr

08011d74 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi3ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8011d74:	b580      	push	{r7, lr}
 8011d76:	b082      	sub	sp, #8
 8011d78:	af00      	add	r7, sp, #0
 8011d7a:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8011d7c:	2200      	movs	r2, #0
 8011d7e:	2101      	movs	r1, #1
 8011d80:	6878      	ldr	r0, [r7, #4]
 8011d82:	f7ff f991 	bl	80110a8 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8011d86:	6878      	ldr	r0, [r7, #4]
 8011d88:	f000 fa23 	bl	80121d2 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi4ELi9EE3runERSE_>
  }
 8011d8c:	bf00      	nop
 8011d8e:	3708      	adds	r7, #8
 8011d90:	46bd      	mov	sp, r7
 8011d92:	bd80      	pop	{r7, pc}

08011d94 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE16nestedExpressionEv>:
    const typename internal::remove_all<XprTypeNested>::type& nestedExpression() const
 8011d94:	b480      	push	{r7}
 8011d96:	b083      	sub	sp, #12
 8011d98:	af00      	add	r7, sp, #0
 8011d9a:	6078      	str	r0, [r7, #4]
      return m_xpr;
 8011d9c:	687b      	ldr	r3, [r7, #4]
    }
 8011d9e:	4618      	mov	r0, r3
 8011da0:	370c      	adds	r7, #12
 8011da2:	46bd      	mov	sp, r7
 8011da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011da8:	4770      	bx	lr

08011daa <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8011daa:	b480      	push	{r7}
 8011dac:	b083      	sub	sp, #12
 8011dae:	af00      	add	r7, sp, #0
 8011db0:	6078      	str	r0, [r7, #4]
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	4618      	mov	r0, r3
 8011db6:	370c      	adds	r7, #12
 8011db8:	46bd      	mov	sp, r7
 8011dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dbe:	4770      	bx	lr

08011dc0 <_ZN5Eigen8internal9evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC1ERSE_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8011dc0:	b580      	push	{r7, lr}
 8011dc2:	b082      	sub	sp, #8
 8011dc4:	af00      	add	r7, sp, #0
 8011dc6:	6078      	str	r0, [r7, #4]
 8011dc8:	6039      	str	r1, [r7, #0]
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	6839      	ldr	r1, [r7, #0]
 8011dce:	4618      	mov	r0, r3
 8011dd0:	f7f7 fb49 	bl	8009466 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC1ERKSD_>
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	4618      	mov	r0, r3
 8011dd8:	3708      	adds	r7, #8
 8011dda:	46bd      	mov	sp, r7
 8011ddc:	bd80      	pop	{r7, pc}

08011dde <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index rowIndexByOuterInner(Index outer, Index inner)
 8011dde:	b480      	push	{r7}
 8011de0:	b083      	sub	sp, #12
 8011de2:	af00      	add	r7, sp, #0
 8011de4:	6078      	str	r0, [r7, #4]
 8011de6:	6039      	str	r1, [r7, #0]
      : inner;
 8011de8:	683b      	ldr	r3, [r7, #0]
  }
 8011dea:	4618      	mov	r0, r3
 8011dec:	370c      	adds	r7, #12
 8011dee:	46bd      	mov	sp, r7
 8011df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011df4:	4770      	bx	lr

08011df6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index colIndexByOuterInner(Index outer, Index inner)
 8011df6:	b480      	push	{r7}
 8011df8:	b083      	sub	sp, #12
 8011dfa:	af00      	add	r7, sp, #0
 8011dfc:	6078      	str	r0, [r7, #4]
 8011dfe:	6039      	str	r1, [r7, #0]
      : outer;
 8011e00:	687b      	ldr	r3, [r7, #4]
  }
 8011e02:	4618      	mov	r0, r3
 8011e04:	370c      	adds	r7, #12
 8011e06:	46bd      	mov	sp, r7
 8011e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e0c:	4770      	bx	lr

08011e0e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index row, Index col)
 8011e0e:	b5b0      	push	{r4, r5, r7, lr}
 8011e10:	b086      	sub	sp, #24
 8011e12:	af00      	add	r7, sp, #0
 8011e14:	60f8      	str	r0, [r7, #12]
 8011e16:	60b9      	str	r1, [r7, #8]
 8011e18:	607a      	str	r2, [r7, #4]
    m_functor.assignCoeff(m_dst.coeffRef(row,col), m_src.coeff(row,col));
 8011e1a:	68fb      	ldr	r3, [r7, #12]
 8011e1c:	689c      	ldr	r4, [r3, #8]
 8011e1e:	68fb      	ldr	r3, [r7, #12]
 8011e20:	681b      	ldr	r3, [r3, #0]
 8011e22:	687a      	ldr	r2, [r7, #4]
 8011e24:	68b9      	ldr	r1, [r7, #8]
 8011e26:	4618      	mov	r0, r3
 8011e28:	f7f6 f83e 	bl	8007ea8 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEii>
 8011e2c:	4605      	mov	r5, r0
 8011e2e:	68fb      	ldr	r3, [r7, #12]
 8011e30:	685b      	ldr	r3, [r3, #4]
 8011e32:	687a      	ldr	r2, [r7, #4]
 8011e34:	68b9      	ldr	r1, [r7, #8]
 8011e36:	4618      	mov	r0, r3
 8011e38:	f000 f9db 	bl	80121f2 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEELi3ENS_10DenseShapeES6_ffE5coeffEii>
 8011e3c:	eef0 7a40 	vmov.f32	s15, s0
 8011e40:	edc7 7a05 	vstr	s15, [r7, #20]
 8011e44:	f107 0314 	add.w	r3, r7, #20
 8011e48:	461a      	mov	r2, r3
 8011e4a:	4629      	mov	r1, r5
 8011e4c:	4620      	mov	r0, r4
 8011e4e:	f7f5 fd9b 	bl	8007988 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 8011e52:	bf00      	nop
 8011e54:	3718      	adds	r7, #24
 8011e56:	46bd      	mov	sp, r7
 8011e58:	bdb0      	pop	{r4, r5, r7, pc}

08011e5a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8011e5a:	b580      	push	{r7, lr}
 8011e5c:	b082      	sub	sp, #8
 8011e5e:	af00      	add	r7, sp, #0
 8011e60:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8011e62:	2202      	movs	r2, #2
 8011e64:	2100      	movs	r1, #0
 8011e66:	6878      	ldr	r0, [r7, #4]
 8011e68:	f7ff fdc7 	bl	80119fa <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8011e6c:	6878      	ldr	r0, [r7, #4]
 8011e6e:	f000 f9f3 	bl	8012258 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSC_>
  }
 8011e72:	bf00      	nop
 8011e74:	3708      	adds	r7, #8
 8011e76:	46bd      	mov	sp, r7
 8011e78:	bd80      	pop	{r7, pc}

08011e7a <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS8_>:
  explicit mapbase_evaluator(const XprType& map)
 8011e7a:	b590      	push	{r4, r7, lr}
 8011e7c:	b083      	sub	sp, #12
 8011e7e:	af00      	add	r7, sp, #0
 8011e80:	6078      	str	r0, [r7, #4]
 8011e82:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 8011e84:	6878      	ldr	r0, [r7, #4]
 8011e86:	f000 fa13 	bl	80122b0 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 8011e8a:	683b      	ldr	r3, [r7, #0]
 8011e8c:	4618      	mov	r0, r3
 8011e8e:	f000 f81e 	bl	8011ece <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE4dataEv>
 8011e92:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	601a      	str	r2, [r3, #0]
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	1d1c      	adds	r4, r3, #4
 8011e9c:	683b      	ldr	r3, [r7, #0]
 8011e9e:	4618      	mov	r0, r3
 8011ea0:	f000 f9ea 	bl	8012278 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EE11innerStrideEv>
 8011ea4:	4603      	mov	r3, r0
 8011ea6:	4619      	mov	r1, r3
 8011ea8:	4620      	mov	r0, r4
 8011eaa:	f7f3 ff59 	bl	8005d60 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	1d5c      	adds	r4, r3, #5
 8011eb2:	683b      	ldr	r3, [r7, #0]
 8011eb4:	4618      	mov	r0, r3
 8011eb6:	f000 f9ed 	bl	8012294 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EE11outerStrideEv>
 8011eba:	4603      	mov	r3, r0
 8011ebc:	4619      	mov	r1, r3
 8011ebe:	4620      	mov	r0, r4
 8011ec0:	f7f3 ff68 	bl	8005d94 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
  }
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	4618      	mov	r0, r3
 8011ec8:	370c      	adds	r7, #12
 8011eca:	46bd      	mov	sp, r7
 8011ecc:	bd90      	pop	{r4, r7, pc}

08011ece <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE4dataEv>:
 8011ece:	b480      	push	{r7}
 8011ed0:	b083      	sub	sp, #12
 8011ed2:	af00      	add	r7, sp, #0
 8011ed4:	6078      	str	r0, [r7, #4]
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	681b      	ldr	r3, [r3, #0]
 8011eda:	4618      	mov	r0, r3
 8011edc:	370c      	adds	r7, #12
 8011ede:	46bd      	mov	sp, r7
 8011ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ee4:	4770      	bx	lr

08011ee6 <_ZNK5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4dataEv>:
    EIGEN_DEVICE_FUNC const T *data() const { return m_data.array; }
 8011ee6:	b480      	push	{r7}
 8011ee8:	b083      	sub	sp, #12
 8011eea:	af00      	add	r7, sp, #0
 8011eec:	6078      	str	r0, [r7, #4]
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	4618      	mov	r0, r3
 8011ef2:	370c      	adds	r7, #12
 8011ef4:	46bd      	mov	sp, r7
 8011ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011efa:	4770      	bx	lr

08011efc <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11outerStrideEv>:
    inline Index outerStride() const EIGEN_NOEXCEPT { return this->innerSize(); }
 8011efc:	b580      	push	{r7, lr}
 8011efe:	b082      	sub	sp, #8
 8011f00:	af00      	add	r7, sp, #0
 8011f02:	6078      	str	r0, [r7, #4]
 8011f04:	6878      	ldr	r0, [r7, #4]
 8011f06:	f000 f9de 	bl	80122c6 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE9innerSizeEv>
 8011f0a:	4603      	mov	r3, r0
 8011f0c:	4618      	mov	r0, r3
 8011f0e:	3708      	adds	r7, #8
 8011f10:	46bd      	mov	sp, r7
 8011f12:	bd80      	pop	{r7, pc}

08011f14 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EEC1ERS6_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 8011f14:	b5b0      	push	{r4, r5, r7, lr}
 8011f16:	b084      	sub	sp, #16
 8011f18:	af00      	add	r7, sp, #0
 8011f1a:	60f8      	str	r0, [r7, #12]
 8011f1c:	60b9      	str	r1, [r7, #8]
 8011f1e:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 8011f20:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 8011f22:	68b8      	ldr	r0, [r7, #8]
 8011f24:	f000 f9db 	bl	80122de <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE4dataEv>
 8011f28:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 8011f2a:	68b8      	ldr	r0, [r7, #8]
 8011f2c:	f000 f9ff 	bl	801232e <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE11outerStrideEv>
 8011f30:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	fb02 f303 	mul.w	r3, r2, r3
 8011f38:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 8011f3a:	441d      	add	r5, r3
 8011f3c:	68b8      	ldr	r0, [r7, #8]
 8011f3e:	f7f3 f822 	bl	8004f86 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8011f42:	4602      	mov	r2, r0
 8011f44:	2301      	movs	r3, #1
 8011f46:	4629      	mov	r1, r5
 8011f48:	4620      	mov	r0, r4
 8011f4a:	f000 fa11 	bl	8012370 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii>
 8011f4e:	68fb      	ldr	r3, [r7, #12]
 8011f50:	3308      	adds	r3, #8
 8011f52:	68ba      	ldr	r2, [r7, #8]
 8011f54:	6812      	ldr	r2, [r2, #0]
 8011f56:	601a      	str	r2, [r3, #0]
 8011f58:	68fb      	ldr	r3, [r7, #12]
 8011f5a:	330c      	adds	r3, #12
 8011f5c:	2100      	movs	r1, #0
 8011f5e:	4618      	mov	r0, r3
 8011f60:	f7fa ff8c 	bl	800ce7c <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 8011f64:	68fb      	ldr	r3, [r7, #12]
 8011f66:	3310      	adds	r3, #16
 8011f68:	6879      	ldr	r1, [r7, #4]
 8011f6a:	4618      	mov	r0, r3
 8011f6c:	f7fa fffa 	bl	800cf64 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
      init();
 8011f70:	68f8      	ldr	r0, [r7, #12]
 8011f72:	f000 fa3b 	bl	80123ec <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EE4initEv>
    }
 8011f76:	68fb      	ldr	r3, [r7, #12]
 8011f78:	4618      	mov	r0, r3
 8011f7a:	3710      	adds	r7, #16
 8011f7c:	46bd      	mov	sp, r7
 8011f7e:	bdb0      	pop	{r4, r5, r7, pc}

08011f80 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1ERKSJ_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8011f80:	b580      	push	{r7, lr}
 8011f82:	b082      	sub	sp, #8
 8011f84:	af00      	add	r7, sp, #0
 8011f86:	6078      	str	r0, [r7, #4]
 8011f88:	6039      	str	r1, [r7, #0]
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	6839      	ldr	r1, [r7, #0]
 8011f8e:	4618      	mov	r0, r3
 8011f90:	f000 fa3c 	bl	801240c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffEC1ERKSJ_>
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	4618      	mov	r0, r3
 8011f98:	3708      	adds	r7, #8
 8011f9a:	46bd      	mov	sp, r7
 8011f9c:	bd80      	pop	{r7, pc}

08011f9e <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi0ELi3EE3runERKSN_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 8011f9e:	b580      	push	{r7, lr}
 8011fa0:	b084      	sub	sp, #16
 8011fa2:	af00      	add	r7, sp, #0
 8011fa4:	6078      	str	r0, [r7, #4]
 8011fa6:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8011fa8:	6839      	ldr	r1, [r7, #0]
 8011faa:	6878      	ldr	r0, [r7, #4]
 8011fac:	f000 fa40 	bl	8012430 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi0ELi1EE3runERKSN_RKS3_>
 8011fb0:	eef0 7a40 	vmov.f32	s15, s0
 8011fb4:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 8011fb8:	6839      	ldr	r1, [r7, #0]
 8011fba:	6878      	ldr	r0, [r7, #4]
 8011fbc:	f000 fa49 	bl	8012452 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi1ELi2EE3runERKSN_RKS3_>
 8011fc0:	eef0 7a40 	vmov.f32	s15, s0
 8011fc4:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8011fc8:	f107 020c 	add.w	r2, r7, #12
 8011fcc:	f107 0308 	add.w	r3, r7, #8
 8011fd0:	4619      	mov	r1, r3
 8011fd2:	6838      	ldr	r0, [r7, #0]
 8011fd4:	f7f6 fac9 	bl	800856a <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 8011fd8:	eef0 7a40 	vmov.f32	s15, s0
  }
 8011fdc:	eeb0 0a67 	vmov.f32	s0, s15
 8011fe0:	3710      	adds	r7, #16
 8011fe2:	46bd      	mov	sp, r7
 8011fe4:	bd80      	pop	{r7, pc}

08011fe6 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEELi6ENS_10DenseShapeESA_ffEC1ERKS9_>:
  explicit product_evaluator(const XprType& xpr)
 8011fe6:	b5b0      	push	{r4, r5, r7, lr}
 8011fe8:	b084      	sub	sp, #16
 8011fea:	af00      	add	r7, sp, #0
 8011fec:	6078      	str	r0, [r7, #4]
 8011fee:	6039      	str	r1, [r7, #0]
    : m_result(xpr.rows(), xpr.cols())
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	4618      	mov	r0, r3
 8011ff4:	f000 fa51 	bl	801249a <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	1d1c      	adds	r4, r3, #4
 8011ffc:	6838      	ldr	r0, [r7, #0]
 8011ffe:	f7f3 f8f9 	bl	80051f4 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4rowsEv>
 8012002:	4603      	mov	r3, r0
 8012004:	60bb      	str	r3, [r7, #8]
 8012006:	6838      	ldr	r0, [r7, #0]
 8012008:	f7f3 f901 	bl	800520e <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4colsEv>
 801200c:	4603      	mov	r3, r0
 801200e:	60fb      	str	r3, [r7, #12]
 8012010:	f107 020c 	add.w	r2, r7, #12
 8012014:	f107 0308 	add.w	r3, r7, #8
 8012018:	4619      	mov	r1, r3
 801201a:	4620      	mov	r0, r4
 801201c:	f000 fa4a 	bl	80124b4 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1IiiEERKT_RKT0_>
    ::new (static_cast<Base*>(this)) Base(m_result);
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	4619      	mov	r1, r3
 8012024:	2004      	movs	r0, #4
 8012026:	f7ee ff69 	bl	8000efc <_ZnwjPv>
 801202a:	4602      	mov	r2, r0
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	3304      	adds	r3, #4
 8012030:	4619      	mov	r1, r3
 8012032:	4610      	mov	r0, r2
 8012034:	f7f7 fbf9 	bl	800982a <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
    generic_product_impl<Lhs, Rhs, LhsShape, RhsShape, ProductTag>::evalTo(m_result, xpr.lhs(), xpr.rhs());
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	1d1c      	adds	r4, r3, #4
 801203c:	6838      	ldr	r0, [r7, #0]
 801203e:	f000 fa52 	bl	80124e6 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE3lhsEv>
 8012042:	4605      	mov	r5, r0
 8012044:	6838      	ldr	r0, [r7, #0]
 8012046:	f000 fa59 	bl	80124fc <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE3rhsEv>
 801204a:	4603      	mov	r3, r0
 801204c:	461a      	mov	r2, r3
 801204e:	4629      	mov	r1, r5
 8012050:	4620      	mov	r0, r4
 8012052:	f000 fa5f 	bl	8012514 <_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EENS_10DenseShapeES9_Li6EE6evalToINS3_IfLi1ELi1ELi0ELi1ELi1EEEEEvRT_RKS6_RKS8_>
  }
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	4618      	mov	r0, r3
 801205a:	3710      	adds	r7, #16
 801205c:	46bd      	mov	sp, r7
 801205e:	bdb0      	pop	{r4, r5, r7, pc}

08012060 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 8012060:	b480      	push	{r7}
 8012062:	b083      	sub	sp, #12
 8012064:	af00      	add	r7, sp, #0
 8012066:	6078      	str	r0, [r7, #4]
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	3308      	adds	r3, #8
 801206c:	4618      	mov	r0, r3
 801206e:	370c      	adds	r7, #12
 8012070:	46bd      	mov	sp, r7
 8012072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012076:	4770      	bx	lr

08012078 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 8012078:	b480      	push	{r7}
 801207a:	b083      	sub	sp, #12
 801207c:	af00      	add	r7, sp, #0
 801207e:	6078      	str	r0, [r7, #4]
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	4618      	mov	r0, r3
 8012084:	370c      	adds	r7, #12
 8012086:	46bd      	mov	sp, r7
 8012088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801208c:	4770      	bx	lr

0801208e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 801208e:	b480      	push	{r7}
 8012090:	b083      	sub	sp, #12
 8012092:	af00      	add	r7, sp, #0
 8012094:	6078      	str	r0, [r7, #4]
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	685b      	ldr	r3, [r3, #4]
 801209a:	4618      	mov	r0, r3
 801209c:	370c      	adds	r7, #12
 801209e:	46bd      	mov	sp, r7
 80120a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120a4:	4770      	bx	lr

080120a6 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 80120a6:	b580      	push	{r7, lr}
 80120a8:	b082      	sub	sp, #8
 80120aa:	af00      	add	r7, sp, #0
 80120ac:	6078      	str	r0, [r7, #4]
 80120ae:	6039      	str	r1, [r7, #0]
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	6839      	ldr	r1, [r7, #0]
 80120b4:	4618      	mov	r0, r3
 80120b6:	f000 fa55 	bl	8012564 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERKS6_>
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	4618      	mov	r0, r3
 80120be:	3708      	adds	r7, #8
 80120c0:	46bd      	mov	sp, r7
 80120c2:	bd80      	pop	{r7, pc}

080120c4 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 80120c4:	b590      	push	{r4, r7, lr}
 80120c6:	b087      	sub	sp, #28
 80120c8:	af00      	add	r7, sp, #0
 80120ca:	60f8      	str	r0, [r7, #12]
 80120cc:	60b9      	str	r1, [r7, #8]
 80120ce:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 80120d0:	68fb      	ldr	r3, [r7, #12]
 80120d2:	4618      	mov	r0, r3
 80120d4:	f000 fa55 	bl	8012582 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE4Data4funcEv>
 80120d8:	4604      	mov	r4, r0
 80120da:	68fb      	ldr	r3, [r7, #12]
 80120dc:	3304      	adds	r3, #4
 80120de:	687a      	ldr	r2, [r7, #4]
 80120e0:	68b9      	ldr	r1, [r7, #8]
 80120e2:	4618      	mov	r0, r3
 80120e4:	f000 fa58 	bl	8012598 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfE5coeffEii>
 80120e8:	eef0 7a40 	vmov.f32	s15, s0
 80120ec:	edc7 7a05 	vstr	s15, [r7, #20]
 80120f0:	68fb      	ldr	r3, [r7, #12]
 80120f2:	3308      	adds	r3, #8
 80120f4:	687a      	ldr	r2, [r7, #4]
 80120f6:	68b9      	ldr	r1, [r7, #8]
 80120f8:	4618      	mov	r0, r3
 80120fa:	f7fe f9d0 	bl	801049e <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffEii>
 80120fe:	4602      	mov	r2, r0
 8012100:	f107 0314 	add.w	r3, r7, #20
 8012104:	4619      	mov	r1, r3
 8012106:	4620      	mov	r0, r4
 8012108:	f7fc fa70 	bl	800e5ec <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 801210c:	eef0 7a40 	vmov.f32	s15, s0
  }
 8012110:	eeb0 0a67 	vmov.f32	s0, s15
 8012114:	371c      	adds	r7, #28
 8012116:	46bd      	mov	sp, r7
 8012118:	bd90      	pop	{r4, r7, pc}

0801211a <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE3colEi>:
ConstColXpr col(Index i) const
 801211a:	b580      	push	{r7, lr}
 801211c:	b084      	sub	sp, #16
 801211e:	af00      	add	r7, sp, #0
 8012120:	60f8      	str	r0, [r7, #12]
 8012122:	60b9      	str	r1, [r7, #8]
 8012124:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 8012126:	68b8      	ldr	r0, [r7, #8]
 8012128:	f7f2 ff6a 	bl	8005000 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 801212c:	4603      	mov	r3, r0
 801212e:	687a      	ldr	r2, [r7, #4]
 8012130:	4619      	mov	r1, r3
 8012132:	68f8      	ldr	r0, [r7, #12]
 8012134:	f000 fa46 	bl	80125c4 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEC1ERS3_i>
}
 8012138:	68f8      	ldr	r0, [r7, #12]
 801213a:	3710      	adds	r7, #16
 801213c:	46bd      	mov	sp, r7
 801213e:	bd80      	pop	{r7, pc}

08012140 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE12cwiseProductINS2_IKNS3_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 8012140:	b5b0      	push	{r4, r5, r7, lr}
 8012142:	b086      	sub	sp, #24
 8012144:	af00      	add	r7, sp, #0
 8012146:	60f8      	str	r0, [r7, #12]
 8012148:	60b9      	str	r1, [r7, #8]
 801214a:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 801214c:	68b8      	ldr	r0, [r7, #8]
 801214e:	f7f8 ffff 	bl	800b150 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE7derivedEv>
 8012152:	4604      	mov	r4, r0
 8012154:	6878      	ldr	r0, [r7, #4]
 8012156:	f000 fa5d 	bl	8012614 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE7derivedEv>
 801215a:	4605      	mov	r5, r0
 801215c:	f107 0314 	add.w	r3, r7, #20
 8012160:	4618      	mov	r0, r3
 8012162:	f7f2 fb13 	bl	800478c <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 8012166:	f107 0314 	add.w	r3, r7, #20
 801216a:	462a      	mov	r2, r5
 801216c:	4621      	mov	r1, r4
 801216e:	68f8      	ldr	r0, [r7, #12]
 8012170:	f000 fa8a 	bl	8012688 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERSC_RSG_RKS3_>
}
 8012174:	68f8      	ldr	r0, [r7, #12]
 8012176:	3718      	adds	r7, #24
 8012178:	46bd      	mov	sp, r7
 801217a:	bdb0      	pop	{r4, r5, r7, pc}

0801217c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 801217c:	b580      	push	{r7, lr}
 801217e:	b082      	sub	sp, #8
 8012180:	af00      	add	r7, sp, #0
 8012182:	6078      	str	r0, [r7, #4]
 8012184:	6878      	ldr	r0, [r7, #4]
 8012186:	f000 fadd 	bl	8012744 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE7derivedEv>
 801218a:	4603      	mov	r3, r0
 801218c:	4618      	mov	r0, r3
 801218e:	f000 fae4 	bl	801275a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE4rowsEv>
 8012192:	4603      	mov	r3, r0
 8012194:	4618      	mov	r0, r3
 8012196:	3708      	adds	r7, #8
 8012198:	46bd      	mov	sp, r7
 801219a:	bd80      	pop	{r7, pc}

0801219c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 801219c:	b590      	push	{r4, r7, lr}
 801219e:	b085      	sub	sp, #20
 80121a0:	af00      	add	r7, sp, #0
 80121a2:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 80121a4:	6878      	ldr	r0, [r7, #4]
 80121a6:	f000 facd 	bl	8012744 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE7derivedEv>
 80121aa:	4604      	mov	r4, r0
 80121ac:	f107 030c 	add.w	r3, r7, #12
 80121b0:	4618      	mov	r0, r3
 80121b2:	f7f2 fde2 	bl	8004d7a <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 80121b6:	f107 030c 	add.w	r3, r7, #12
 80121ba:	4619      	mov	r1, r3
 80121bc:	4620      	mov	r0, r4
 80121be:	f000 fb49 	bl	8012854 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 80121c2:	eef0 7a40 	vmov.f32	s15, s0
 80121c6:	bf00      	nop
}
 80121c8:	eeb0 0a67 	vmov.f32	s0, s15
 80121cc:	3714      	adds	r7, #20
 80121ce:	46bd      	mov	sp, r7
 80121d0:	bd90      	pop	{r4, r7, pc}

080121d2 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi4ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80121d2:	b580      	push	{r7, lr}
 80121d4:	b082      	sub	sp, #8
 80121d6:	af00      	add	r7, sp, #0
 80121d8:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 80121da:	2201      	movs	r2, #1
 80121dc:	2101      	movs	r1, #1
 80121de:	6878      	ldr	r0, [r7, #4]
 80121e0:	f7fe ff62 	bl	80110a8 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80121e4:	6878      	ldr	r0, [r7, #4]
 80121e6:	f000 fb7b 	bl	80128e0 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi5ELi9EE3runERSE_>
  }
 80121ea:	bf00      	nop
 80121ec:	3708      	adds	r7, #8
 80121ee:	46bd      	mov	sp, r7
 80121f0:	bd80      	pop	{r7, pc}

080121f2 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEELi3ENS_10DenseShapeES6_ffE5coeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const CoeffReturnType coeff(Index row, Index col) const
 80121f2:	b580      	push	{r7, lr}
 80121f4:	b0a4      	sub	sp, #144	; 0x90
 80121f6:	af00      	add	r7, sp, #0
 80121f8:	60f8      	str	r0, [r7, #12]
 80121fa:	60b9      	str	r1, [r7, #8]
 80121fc:	607a      	str	r2, [r7, #4]
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 80121fe:	68fb      	ldr	r3, [r7, #12]
 8012200:	6819      	ldr	r1, [r3, #0]
 8012202:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8012206:	68ba      	ldr	r2, [r7, #8]
 8012208:	4618      	mov	r0, r3
 801220a:	f7f7 ffbd 	bl	800a188 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3rowEi>
 801220e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012212:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8012216:	4611      	mov	r1, r2
 8012218:	4618      	mov	r0, r3
 801221a:	f7f7 ffc8 	bl	800a1ae <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE9transposeEv>
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	6859      	ldr	r1, [r3, #4]
 8012222:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8012226:	687a      	ldr	r2, [r7, #4]
 8012228:	4618      	mov	r0, r3
 801222a:	f7f9 f9f4 	bl	800b616 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3colEi>
 801222e:	f107 0314 	add.w	r3, r7, #20
 8012232:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8012236:	f107 0148 	add.w	r1, r7, #72	; 0x48
 801223a:	4618      	mov	r0, r3
 801223c:	f7f9 f9fe 	bl	800b63c <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IS5_Li3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSD_6traitsIT_E6ScalarEEEKS8_KSG_EERKNS0_ISG_EE>
 8012240:	f107 0314 	add.w	r3, r7, #20
 8012244:	4618      	mov	r0, r3
 8012246:	f7f9 fa27 	bl	800b698 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE3sumEv>
 801224a:	eef0 7a40 	vmov.f32	s15, s0
  }
 801224e:	eeb0 0a67 	vmov.f32	s0, s15
 8012252:	3790      	adds	r7, #144	; 0x90
 8012254:	46bd      	mov	sp, r7
 8012256:	bd80      	pop	{r7, pc}

08012258 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8012258:	b580      	push	{r7, lr}
 801225a:	b082      	sub	sp, #8
 801225c:	af00      	add	r7, sp, #0
 801225e:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8012260:	2200      	movs	r2, #0
 8012262:	2101      	movs	r1, #1
 8012264:	6878      	ldr	r0, [r7, #4]
 8012266:	f7ff fbc8 	bl	80119fa <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 801226a:	6878      	ldr	r0, [r7, #4]
 801226c:	f000 fb48 	bl	8012900 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSC_>
  }
 8012270:	bf00      	nop
 8012272:	3708      	adds	r7, #8
 8012274:	46bd      	mov	sp, r7
 8012276:	bd80      	pop	{r7, pc}

08012278 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 8012278:	b580      	push	{r7, lr}
 801227a:	b082      	sub	sp, #8
 801227c:	af00      	add	r7, sp, #0
 801227e:	6078      	str	r0, [r7, #4]
             : m_xpr.outerStride();
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	3308      	adds	r3, #8
             ? m_xpr.innerStride()
 8012284:	4618      	mov	r0, r3
 8012286:	f7fd fc40 	bl	800fb0a <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE11outerStrideEv>
 801228a:	4603      	mov	r3, r0
    }
 801228c:	4618      	mov	r0, r3
 801228e:	3708      	adds	r7, #8
 8012290:	46bd      	mov	sp, r7
 8012292:	bd80      	pop	{r7, pc}

08012294 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 8012294:	b580      	push	{r7, lr}
 8012296:	b082      	sub	sp, #8
 8012298:	af00      	add	r7, sp, #0
 801229a:	6078      	str	r0, [r7, #4]
                    : m_xpr.innerStride();
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	3308      	adds	r3, #8
                    ? m_xpr.outerStride()
 80122a0:	4618      	mov	r0, r3
 80122a2:	f7fd fc1e 	bl	800fae2 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE11innerStrideEv>
 80122a6:	4603      	mov	r3, r0
    }
 80122a8:	4618      	mov	r0, r3
 80122aa:	3708      	adds	r7, #8
 80122ac:	46bd      	mov	sp, r7
 80122ae:	bd80      	pop	{r7, pc}

080122b0 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 80122b0:	b480      	push	{r7}
 80122b2:	b083      	sub	sp, #12
 80122b4:	af00      	add	r7, sp, #0
 80122b6:	6078      	str	r0, [r7, #4]
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	4618      	mov	r0, r3
 80122bc:	370c      	adds	r7, #12
 80122be:	46bd      	mov	sp, r7
 80122c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122c4:	4770      	bx	lr

080122c6 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE9innerSizeEv>:
    Index innerSize() const
 80122c6:	b580      	push	{r7, lr}
 80122c8:	b082      	sub	sp, #8
 80122ca:	af00      	add	r7, sp, #0
 80122cc:	6078      	str	r0, [r7, #4]
      return IsVectorAtCompileTime ? this->size()
 80122ce:	6878      	ldr	r0, [r7, #4]
 80122d0:	f000 fb36 	bl	8012940 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4sizeEv>
 80122d4:	4603      	mov	r3, r0
    }
 80122d6:	4618      	mov	r0, r3
 80122d8:	3708      	adds	r7, #8
 80122da:	46bd      	mov	sp, r7
 80122dc:	bd80      	pop	{r7, pc}

080122de <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE4dataEv>:
    const Scalar* data() const { return derived().nestedExpression().data(); }
 80122de:	b580      	push	{r7, lr}
 80122e0:	b082      	sub	sp, #8
 80122e2:	af00      	add	r7, sp, #0
 80122e4:	6078      	str	r0, [r7, #4]
 80122e6:	6878      	ldr	r0, [r7, #4]
 80122e8:	f7f2 fe1e 	bl	8004f28 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 80122ec:	4603      	mov	r3, r0
 80122ee:	4618      	mov	r0, r3
 80122f0:	f7fe fd63 	bl	8010dba <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE16nestedExpressionEv>
 80122f4:	4603      	mov	r3, r0
 80122f6:	4618      	mov	r0, r3
 80122f8:	f7ff fbd2 	bl	8011aa0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4dataEv>
 80122fc:	4603      	mov	r3, r0
 80122fe:	4618      	mov	r0, r3
 8012300:	3708      	adds	r7, #8
 8012302:	46bd      	mov	sp, r7
 8012304:	bd80      	pop	{r7, pc}

08012306 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE11innerStrideEv>:
    Index innerStride() const { return derived().nestedExpression().innerStride(); }
 8012306:	b580      	push	{r7, lr}
 8012308:	b082      	sub	sp, #8
 801230a:	af00      	add	r7, sp, #0
 801230c:	6078      	str	r0, [r7, #4]
 801230e:	6878      	ldr	r0, [r7, #4]
 8012310:	f7f2 fe0a 	bl	8004f28 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 8012314:	4603      	mov	r3, r0
 8012316:	4618      	mov	r0, r3
 8012318:	f7fe fd4f 	bl	8010dba <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE16nestedExpressionEv>
 801231c:	4603      	mov	r3, r0
 801231e:	4618      	mov	r0, r3
 8012320:	f000 fb30 	bl	8012984 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11innerStrideEv>
 8012324:	4603      	mov	r3, r0
 8012326:	4618      	mov	r0, r3
 8012328:	3708      	adds	r7, #8
 801232a:	46bd      	mov	sp, r7
 801232c:	bd80      	pop	{r7, pc}

0801232e <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE11outerStrideEv>:
    Index outerStride() const { return derived().nestedExpression().outerStride(); }
 801232e:	b580      	push	{r7, lr}
 8012330:	b082      	sub	sp, #8
 8012332:	af00      	add	r7, sp, #0
 8012334:	6078      	str	r0, [r7, #4]
 8012336:	6878      	ldr	r0, [r7, #4]
 8012338:	f7f2 fdf6 	bl	8004f28 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 801233c:	4603      	mov	r3, r0
 801233e:	4618      	mov	r0, r3
 8012340:	f7fe fd3b 	bl	8010dba <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE16nestedExpressionEv>
 8012344:	4603      	mov	r3, r0
 8012346:	4618      	mov	r0, r3
 8012348:	f7ff fdd8 	bl	8011efc <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11outerStrideEv>
 801234c:	4603      	mov	r3, r0
 801234e:	4618      	mov	r0, r3
 8012350:	3708      	adds	r7, #8
 8012352:	46bd      	mov	sp, r7
 8012354:	bd80      	pop	{r7, pc}

08012356 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1Ev>:
 8012356:	b580      	push	{r7, lr}
 8012358:	b082      	sub	sp, #8
 801235a:	af00      	add	r7, sp, #0
 801235c:	6078      	str	r0, [r7, #4]
 801235e:	6878      	ldr	r0, [r7, #4]
 8012360:	f000 fb1b 	bl	801299a <_ZN5Eigen9DenseBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1Ev>
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	4618      	mov	r0, r3
 8012368:	3708      	adds	r7, #8
 801236a:	46bd      	mov	sp, r7
 801236c:	bd80      	pop	{r7, pc}
	...

08012370 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 8012370:	b580      	push	{r7, lr}
 8012372:	b084      	sub	sp, #16
 8012374:	af00      	add	r7, sp, #0
 8012376:	60f8      	str	r0, [r7, #12]
 8012378:	60b9      	str	r1, [r7, #8]
 801237a:	607a      	str	r2, [r7, #4]
 801237c:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 801237e:	68f8      	ldr	r0, [r7, #12]
 8012380:	f7ff ffe9 	bl	8012356 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1Ev>
 8012384:	68fb      	ldr	r3, [r7, #12]
 8012386:	68ba      	ldr	r2, [r7, #8]
 8012388:	601a      	str	r2, [r3, #0]
 801238a:	68fb      	ldr	r3, [r7, #12]
 801238c:	3304      	adds	r3, #4
 801238e:	6879      	ldr	r1, [r7, #4]
 8012390:	4618      	mov	r0, r3
 8012392:	f7f3 fce5 	bl	8005d60 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 8012396:	68fb      	ldr	r3, [r7, #12]
 8012398:	3305      	adds	r3, #5
 801239a:	6839      	ldr	r1, [r7, #0]
 801239c:	4618      	mov	r0, r3
 801239e:	f7f3 fcf9 	bl	8005d94 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 80123a2:	68bb      	ldr	r3, [r7, #8]
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d011      	beq.n	80123cc <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	db08      	blt.n	80123c0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	2b03      	cmp	r3, #3
 80123b2:	d105      	bne.n	80123c0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 80123b4:	683b      	ldr	r3, [r7, #0]
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	db02      	blt.n	80123c0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 80123ba:	683b      	ldr	r3, [r7, #0]
 80123bc:	2b01      	cmp	r3, #1
 80123be:	d005      	beq.n	80123cc <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 80123c0:	4b07      	ldr	r3, [pc, #28]	; (80123e0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x70>)
 80123c2:	4a08      	ldr	r2, [pc, #32]	; (80123e4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x74>)
 80123c4:	21b0      	movs	r1, #176	; 0xb0
 80123c6:	4808      	ldr	r0, [pc, #32]	; (80123e8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x78>)
 80123c8:	f00a fe34 	bl	801d034 <__assert_func>
      checkSanity<Derived>();
 80123cc:	2100      	movs	r1, #0
 80123ce:	68f8      	ldr	r0, [r7, #12]
 80123d0:	f000 faee 	bl	80129b0 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE11checkSanityIS7_EEvNS_8internal9enable_ifIXeqsrNSA_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 80123d4:	68fb      	ldr	r3, [r7, #12]
 80123d6:	4618      	mov	r0, r3
 80123d8:	3710      	adds	r7, #16
 80123da:	46bd      	mov	sp, r7
 80123dc:	bd80      	pop	{r7, pc}
 80123de:	bf00      	nop
 80123e0:	080255c0 	.word	0x080255c0
 80123e4:	08027cbc 	.word	0x08027cbc
 80123e8:	08025770 	.word	0x08025770

080123ec <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EE4initEv>:
    void init()
 80123ec:	b580      	push	{r7, lr}
 80123ee:	b082      	sub	sp, #8
 80123f0:	af00      	add	r7, sp, #0
 80123f2:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	3308      	adds	r3, #8
 80123f8:	4618      	mov	r0, r3
 80123fa:	f7ff ff98 	bl	801232e <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE11outerStrideEv>
 80123fe:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	615a      	str	r2, [r3, #20]
    }
 8012404:	bf00      	nop
 8012406:	3708      	adds	r7, #8
 8012408:	46bd      	mov	sp, r7
 801240a:	bd80      	pop	{r7, pc}

0801240c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffEC1ERKSJ_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 801240c:	b580      	push	{r7, lr}
 801240e:	b082      	sub	sp, #8
 8012410:	af00      	add	r7, sp, #0
 8012412:	6078      	str	r0, [r7, #4]
 8012414:	6039      	str	r1, [r7, #0]
 8012416:	6878      	ldr	r0, [r7, #4]
 8012418:	f000 fad5 	bl	80129c6 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1Ev>
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	6839      	ldr	r1, [r7, #0]
 8012420:	4618      	mov	r0, r3
 8012422:	f000 fadb 	bl	80129dc <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE4DataC1ERKSJ_>
  }
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	4618      	mov	r0, r3
 801242a:	3708      	adds	r7, #8
 801242c:	46bd      	mov	sp, r7
 801242e:	bd80      	pop	{r7, pc}

08012430 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi0ELi1EE3runERKSN_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8012430:	b580      	push	{r7, lr}
 8012432:	b082      	sub	sp, #8
 8012434:	af00      	add	r7, sp, #0
 8012436:	6078      	str	r0, [r7, #4]
 8012438:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 801243a:	2200      	movs	r2, #0
 801243c:	2100      	movs	r1, #0
 801243e:	6878      	ldr	r0, [r7, #4]
 8012440:	f000 faf4 	bl	8012a2c <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 8012444:	eef0 7a40 	vmov.f32	s15, s0
  }
 8012448:	eeb0 0a67 	vmov.f32	s0, s15
 801244c:	3708      	adds	r7, #8
 801244e:	46bd      	mov	sp, r7
 8012450:	bd80      	pop	{r7, pc}

08012452 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi1ELi2EE3runERKSN_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 8012452:	b580      	push	{r7, lr}
 8012454:	b084      	sub	sp, #16
 8012456:	af00      	add	r7, sp, #0
 8012458:	6078      	str	r0, [r7, #4]
 801245a:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 801245c:	6839      	ldr	r1, [r7, #0]
 801245e:	6878      	ldr	r0, [r7, #4]
 8012460:	f000 faf7 	bl	8012a52 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi1ELi1EE3runERKSN_RKS3_>
 8012464:	eef0 7a40 	vmov.f32	s15, s0
 8012468:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 801246c:	6839      	ldr	r1, [r7, #0]
 801246e:	6878      	ldr	r0, [r7, #4]
 8012470:	f000 fb00 	bl	8012a74 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi2ELi1EE3runERKSN_RKS3_>
 8012474:	eef0 7a40 	vmov.f32	s15, s0
 8012478:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 801247c:	f107 020c 	add.w	r2, r7, #12
 8012480:	f107 0308 	add.w	r3, r7, #8
 8012484:	4619      	mov	r1, r3
 8012486:	6838      	ldr	r0, [r7, #0]
 8012488:	f7f6 f86f 	bl	800856a <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 801248c:	eef0 7a40 	vmov.f32	s15, s0
  }
 8012490:	eeb0 0a67 	vmov.f32	s0, s15
 8012494:	3710      	adds	r7, #16
 8012496:	46bd      	mov	sp, r7
 8012498:	bd80      	pop	{r7, pc}

0801249a <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>:
  evaluator() {}
 801249a:	b580      	push	{r7, lr}
 801249c:	b082      	sub	sp, #8
 801249e:	af00      	add	r7, sp, #0
 80124a0:	6078      	str	r0, [r7, #4]
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	4618      	mov	r0, r3
 80124a6:	f000 faf6 	bl	8012a96 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	4618      	mov	r0, r3
 80124ae:	3708      	adds	r7, #8
 80124b0:	46bd      	mov	sp, r7
 80124b2:	bd80      	pop	{r7, pc}

080124b4 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1IiiEERKT_RKT0_>:
    Matrix(const T0& x, const T1& y)
 80124b4:	b580      	push	{r7, lr}
 80124b6:	b084      	sub	sp, #16
 80124b8:	af00      	add	r7, sp, #0
 80124ba:	60f8      	str	r0, [r7, #12]
 80124bc:	60b9      	str	r1, [r7, #8]
 80124be:	607a      	str	r2, [r7, #4]
    {
 80124c0:	68fb      	ldr	r3, [r7, #12]
 80124c2:	4618      	mov	r0, r3
 80124c4:	f7f1 fde2 	bl	800408c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
      Base::_check_template_params();
 80124c8:	f7f1 fdf0 	bl	80040ac <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE22_check_template_paramsEv>
      Base::template _init2<T0,T1>(x, y);
 80124cc:	68f8      	ldr	r0, [r7, #12]
 80124ce:	68bb      	ldr	r3, [r7, #8]
 80124d0:	6819      	ldr	r1, [r3, #0]
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	681a      	ldr	r2, [r3, #0]
 80124d6:	2300      	movs	r3, #0
 80124d8:	f000 faef 	bl	8012aba <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init2IiiEEviiPNS_8internal9enable_ifILb1ET_E4typeE>
    }
 80124dc:	68fb      	ldr	r3, [r7, #12]
 80124de:	4618      	mov	r0, r3
 80124e0:	3710      	adds	r7, #16
 80124e2:	46bd      	mov	sp, r7
 80124e4:	bd80      	pop	{r7, pc}

080124e6 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 80124e6:	b480      	push	{r7}
 80124e8:	b083      	sub	sp, #12
 80124ea:	af00      	add	r7, sp, #0
 80124ec:	6078      	str	r0, [r7, #4]
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	4618      	mov	r0, r3
 80124f2:	370c      	adds	r7, #12
 80124f4:	46bd      	mov	sp, r7
 80124f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124fa:	4770      	bx	lr

080124fc <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 80124fc:	b480      	push	{r7}
 80124fe:	b083      	sub	sp, #12
 8012500:	af00      	add	r7, sp, #0
 8012502:	6078      	str	r0, [r7, #4]
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	3308      	adds	r3, #8
 8012508:	4618      	mov	r0, r3
 801250a:	370c      	adds	r7, #12
 801250c:	46bd      	mov	sp, r7
 801250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012512:	4770      	bx	lr

08012514 <_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EENS_10DenseShapeES9_Li6EE6evalToINS3_IfLi1ELi1ELi0ELi1ELi1EEEEEvRT_RKS6_RKS8_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 8012514:	b590      	push	{r4, r7, lr}
 8012516:	b08b      	sub	sp, #44	; 0x2c
 8012518:	af00      	add	r7, sp, #0
 801251a:	60f8      	str	r0, [r7, #12]
 801251c:	60b9      	str	r1, [r7, #8]
 801251e:	607a      	str	r2, [r7, #4]
    dst.coeffRef(0,0) = (lhs.transpose().cwiseProduct(rhs)).sum();
 8012520:	f107 0320 	add.w	r3, r7, #32
 8012524:	68b9      	ldr	r1, [r7, #8]
 8012526:	4618      	mov	r0, r3
 8012528:	f000 fadb 	bl	8012ae2 <_ZNK5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE9transposeEv>
 801252c:	f107 0310 	add.w	r3, r7, #16
 8012530:	f107 0120 	add.w	r1, r7, #32
 8012534:	687a      	ldr	r2, [r7, #4]
 8012536:	4618      	mov	r0, r3
 8012538:	f000 fae4 	bl	8012b04 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEE12cwiseProductINS1_IS4_EEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSD_6traitsIT_E6ScalarEEEKS8_KSG_EERKNS0_ISG_EE>
 801253c:	68fb      	ldr	r3, [r7, #12]
 801253e:	2200      	movs	r2, #0
 8012540:	2100      	movs	r1, #0
 8012542:	4618      	mov	r0, r3
 8012544:	f7f3 fb99 	bl	8005c7a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8coeffRefEii>
 8012548:	4604      	mov	r4, r0
 801254a:	f107 0310 	add.w	r3, r7, #16
 801254e:	4618      	mov	r0, r3
 8012550:	f000 fb06 	bl	8012b60 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE3sumEv>
 8012554:	eef0 7a40 	vmov.f32	s15, s0
 8012558:	edc4 7a00 	vstr	s15, [r4]
  }
 801255c:	bf00      	nop
 801255e:	372c      	adds	r7, #44	; 0x2c
 8012560:	46bd      	mov	sp, r7
 8012562:	bd90      	pop	{r4, r7, pc}

08012564 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERKS6_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 8012564:	b580      	push	{r7, lr}
 8012566:	b082      	sub	sp, #8
 8012568:	af00      	add	r7, sp, #0
 801256a:	6078      	str	r0, [r7, #4]
 801256c:	6039      	str	r1, [r7, #0]
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	6839      	ldr	r1, [r7, #0]
 8012572:	4618      	mov	r0, r3
 8012574:	f000 fb0f 	bl	8012b96 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfEC1ERKS6_>
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	4618      	mov	r0, r3
 801257c:	3708      	adds	r7, #8
 801257e:	46bd      	mov	sp, r7
 8012580:	bd80      	pop	{r7, pc}

08012582 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 8012582:	b480      	push	{r7}
 8012584:	b083      	sub	sp, #12
 8012586:	af00      	add	r7, sp, #0
 8012588:	6078      	str	r0, [r7, #4]
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	4618      	mov	r0, r3
 801258e:	370c      	adds	r7, #12
 8012590:	46bd      	mov	sp, r7
 8012592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012596:	4770      	bx	lr

08012598 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8012598:	b580      	push	{r7, lr}
 801259a:	b084      	sub	sp, #16
 801259c:	af00      	add	r7, sp, #0
 801259e:	60f8      	str	r0, [r7, #12]
 80125a0:	60b9      	str	r1, [r7, #8]
 80125a2:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 80125a4:	68fb      	ldr	r3, [r7, #12]
 80125a6:	68ba      	ldr	r2, [r7, #8]
 80125a8:	6879      	ldr	r1, [r7, #4]
 80125aa:	4618      	mov	r0, r3
 80125ac:	f000 fb09 	bl	8012bc2 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE5coeffEii>
 80125b0:	4603      	mov	r3, r0
 80125b2:	681b      	ldr	r3, [r3, #0]
 80125b4:	ee07 3a90 	vmov	s15, r3
  }
 80125b8:	eeb0 0a67 	vmov.f32	s0, s15
 80125bc:	3710      	adds	r7, #16
 80125be:	46bd      	mov	sp, r7
 80125c0:	bd80      	pop	{r7, pc}
	...

080125c4 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 80125c4:	b580      	push	{r7, lr}
 80125c6:	b084      	sub	sp, #16
 80125c8:	af00      	add	r7, sp, #0
 80125ca:	60f8      	str	r0, [r7, #12]
 80125cc:	60b9      	str	r1, [r7, #8]
 80125ce:	607a      	str	r2, [r7, #4]
 80125d0:	68fb      	ldr	r3, [r7, #12]
 80125d2:	687a      	ldr	r2, [r7, #4]
 80125d4:	68b9      	ldr	r1, [r7, #8]
 80125d6:	4618      	mov	r0, r3
 80125d8:	f000 fb0b 	bl	8012bf2 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	2b00      	cmp	r3, #0
 80125e0:	db07      	blt.n	80125f2 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEC1ERS3_i+0x2e>
 80125e2:	68bb      	ldr	r3, [r7, #8]
 80125e4:	4618      	mov	r0, r3
 80125e6:	f7f1 ffe7 	bl	80045b8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 80125ea:	4602      	mov	r2, r0
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	4293      	cmp	r3, r2
 80125f0:	db05      	blt.n	80125fe <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEC1ERS3_i+0x3a>
 80125f2:	4b05      	ldr	r3, [pc, #20]	; (8012608 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEC1ERS3_i+0x44>)
 80125f4:	4a05      	ldr	r2, [pc, #20]	; (801260c <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEC1ERS3_i+0x48>)
 80125f6:	2178      	movs	r1, #120	; 0x78
 80125f8:	4805      	ldr	r0, [pc, #20]	; (8012610 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEC1ERS3_i+0x4c>)
 80125fa:	f00a fd1b 	bl	801d034 <__assert_func>
    }
 80125fe:	68fb      	ldr	r3, [r7, #12]
 8012600:	4618      	mov	r0, r3
 8012602:	3710      	adds	r7, #16
 8012604:	46bd      	mov	sp, r7
 8012606:	bd80      	pop	{r7, pc}
 8012608:	08023a20 	.word	0x08023a20
 801260c:	08027dd0 	.word	0x08027dd0
 8012610:	08023ba4 	.word	0x08023ba4

08012614 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8012614:	b480      	push	{r7}
 8012616:	b083      	sub	sp, #12
 8012618:	af00      	add	r7, sp, #0
 801261a:	6078      	str	r0, [r7, #4]
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	4618      	mov	r0, r3
 8012620:	370c      	adds	r7, #12
 8012622:	46bd      	mov	sp, r7
 8012624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012628:	4770      	bx	lr

0801262a <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1Ev>:
 801262a:	b580      	push	{r7, lr}
 801262c:	b082      	sub	sp, #8
 801262e:	af00      	add	r7, sp, #0
 8012630:	6078      	str	r0, [r7, #4]
 8012632:	6878      	ldr	r0, [r7, #4]
 8012634:	f000 faee 	bl	8012c14 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1Ev>
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	4618      	mov	r0, r3
 801263c:	3708      	adds	r7, #8
 801263e:	46bd      	mov	sp, r7
 8012640:	bd80      	pop	{r7, pc}

08012642 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 8012642:	b580      	push	{r7, lr}
 8012644:	b082      	sub	sp, #8
 8012646:	af00      	add	r7, sp, #0
 8012648:	6078      	str	r0, [r7, #4]
 801264a:	6878      	ldr	r0, [r7, #4]
 801264c:	f7ff ffed 	bl	801262a <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1Ev>
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	4618      	mov	r0, r3
 8012654:	3708      	adds	r7, #8
 8012656:	46bd      	mov	sp, r7
 8012658:	bd80      	pop	{r7, pc}

0801265a <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 801265a:	b580      	push	{r7, lr}
 801265c:	b082      	sub	sp, #8
 801265e:	af00      	add	r7, sp, #0
 8012660:	6078      	str	r0, [r7, #4]
 8012662:	f7f3 fbc4 	bl	8005dee <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 8012666:	4603      	mov	r3, r0
 8012668:	4618      	mov	r0, r3
 801266a:	3708      	adds	r7, #8
 801266c:	46bd      	mov	sp, r7
 801266e:	bd80      	pop	{r7, pc}

08012670 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 8012670:	b580      	push	{r7, lr}
 8012672:	b082      	sub	sp, #8
 8012674:	af00      	add	r7, sp, #0
 8012676:	6078      	str	r0, [r7, #4]
 8012678:	f7f3 fbb9 	bl	8005dee <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 801267c:	4603      	mov	r3, r0
 801267e:	4618      	mov	r0, r3
 8012680:	3708      	adds	r7, #8
 8012682:	46bd      	mov	sp, r7
 8012684:	bd80      	pop	{r7, pc}
	...

08012688 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERSC_RSG_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8012688:	b5b0      	push	{r4, r5, r7, lr}
 801268a:	b084      	sub	sp, #16
 801268c:	af00      	add	r7, sp, #0
 801268e:	60f8      	str	r0, [r7, #12]
 8012690:	60b9      	str	r1, [r7, #8]
 8012692:	607a      	str	r2, [r7, #4]
 8012694:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 8012696:	68f8      	ldr	r0, [r7, #12]
 8012698:	f7ff ffd3 	bl	8012642 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS_5DenseEEC1Ev>
 801269c:	68fa      	ldr	r2, [r7, #12]
 801269e:	68bb      	ldr	r3, [r7, #8]
 80126a0:	4614      	mov	r4, r2
 80126a2:	461d      	mov	r5, r3
 80126a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80126a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80126a8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80126ac:	e884 0003 	stmia.w	r4, {r0, r1}
 80126b0:	68fb      	ldr	r3, [r7, #12]
 80126b2:	f103 0218 	add.w	r2, r3, #24
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	4614      	mov	r4, r2
 80126ba:	461d      	mov	r5, r3
 80126bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80126be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80126c0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80126c4:	e884 0003 	stmia.w	r4, {r0, r1}
 80126c8:	68fb      	ldr	r3, [r7, #12]
 80126ca:	3330      	adds	r3, #48	; 0x30
 80126cc:	6839      	ldr	r1, [r7, #0]
 80126ce:	4618      	mov	r0, r3
 80126d0:	f7f2 f8e6 	bl	80048a0 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 80126d4:	68b8      	ldr	r0, [r7, #8]
 80126d6:	f7f8 fd69 	bl	800b1ac <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4rowsEv>
 80126da:	4604      	mov	r4, r0
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	4618      	mov	r0, r3
 80126e0:	f7ff ffbb 	bl	801265a <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE4rowsEv>
 80126e4:	4603      	mov	r3, r0
 80126e6:	429c      	cmp	r4, r3
 80126e8:	d10a      	bne.n	8012700 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x78>
 80126ea:	68b8      	ldr	r0, [r7, #8]
 80126ec:	f7f8 fd6b 	bl	800b1c6 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4colsEv>
 80126f0:	4604      	mov	r4, r0
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	4618      	mov	r0, r3
 80126f6:	f7ff ffbb 	bl	8012670 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE4colsEv>
 80126fa:	4603      	mov	r3, r0
 80126fc:	429c      	cmp	r4, r3
 80126fe:	d005      	beq.n	801270c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x84>
 8012700:	4b05      	ldr	r3, [pc, #20]	; (8012718 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x90>)
 8012702:	4a06      	ldr	r2, [pc, #24]	; (801271c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x94>)
 8012704:	2174      	movs	r1, #116	; 0x74
 8012706:	4806      	ldr	r0, [pc, #24]	; (8012720 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x98>)
 8012708:	f00a fc94 	bl	801d034 <__assert_func>
    }
 801270c:	68fb      	ldr	r3, [r7, #12]
 801270e:	4618      	mov	r0, r3
 8012710:	3710      	adds	r7, #16
 8012712:	46bd      	mov	sp, r7
 8012714:	bdb0      	pop	{r4, r5, r7, pc}
 8012716:	bf00      	nop
 8012718:	0801ee9c 	.word	0x0801ee9c
 801271c:	08027eac 	.word	0x08027eac
 8012720:	0801f100 	.word	0x0801f100

08012724 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 8012724:	b580      	push	{r7, lr}
 8012726:	b082      	sub	sp, #8
 8012728:	af00      	add	r7, sp, #0
 801272a:	6078      	str	r0, [r7, #4]
 801272c:	6878      	ldr	r0, [r7, #4]
 801272e:	f000 f809 	bl	8012744 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE7derivedEv>
 8012732:	4603      	mov	r3, r0
 8012734:	4618      	mov	r0, r3
 8012736:	f000 fa78 	bl	8012c2a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE4colsEv>
 801273a:	4603      	mov	r3, r0
 801273c:	4618      	mov	r0, r3
 801273e:	3708      	adds	r7, #8
 8012740:	46bd      	mov	sp, r7
 8012742:	bd80      	pop	{r7, pc}

08012744 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8012744:	b480      	push	{r7}
 8012746:	b083      	sub	sp, #12
 8012748:	af00      	add	r7, sp, #0
 801274a:	6078      	str	r0, [r7, #4]
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	4618      	mov	r0, r3
 8012750:	370c      	adds	r7, #12
 8012752:	46bd      	mov	sp, r7
 8012754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012758:	4770      	bx	lr

0801275a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 801275a:	b580      	push	{r7, lr}
 801275c:	b082      	sub	sp, #8
 801275e:	af00      	add	r7, sp, #0
 8012760:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	4618      	mov	r0, r3
 8012766:	f7f8 fd21 	bl	800b1ac <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4rowsEv>
 801276a:	4603      	mov	r3, r0
    }
 801276c:	4618      	mov	r0, r3
 801276e:	3708      	adds	r7, #8
 8012770:	46bd      	mov	sp, r7
 8012772:	bd80      	pop	{r7, pc}

08012774 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 8012774:	b580      	push	{r7, lr}
 8012776:	b082      	sub	sp, #8
 8012778:	af00      	add	r7, sp, #0
 801277a:	6078      	str	r0, [r7, #4]
 801277c:	6878      	ldr	r0, [r7, #4]
 801277e:	f000 fa7b 	bl	8012c78 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEED1Ev>
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	4618      	mov	r0, r3
 8012786:	3708      	adds	r7, #8
 8012788:	46bd      	mov	sp, r7
 801278a:	bd80      	pop	{r7, pc}

0801278c <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 801278c:	b580      	push	{r7, lr}
 801278e:	b082      	sub	sp, #8
 8012790:	af00      	add	r7, sp, #0
 8012792:	6078      	str	r0, [r7, #4]
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	4618      	mov	r0, r3
 8012798:	f7ff ffec 	bl	8012774 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEED1Ev>
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	4618      	mov	r0, r3
 80127a0:	3708      	adds	r7, #8
 80127a2:	46bd      	mov	sp, r7
 80127a4:	bd80      	pop	{r7, pc}

080127a6 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 80127a6:	b580      	push	{r7, lr}
 80127a8:	b082      	sub	sp, #8
 80127aa:	af00      	add	r7, sp, #0
 80127ac:	6078      	str	r0, [r7, #4]
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	4618      	mov	r0, r3
 80127b2:	f7ff ffeb 	bl	801278c <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EED1Ev>
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	4618      	mov	r0, r3
 80127ba:	3708      	adds	r7, #8
 80127bc:	46bd      	mov	sp, r7
 80127be:	bd80      	pop	{r7, pc}

080127c0 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<const T>
 80127c0:	b580      	push	{r7, lr}
 80127c2:	b082      	sub	sp, #8
 80127c4:	af00      	add	r7, sp, #0
 80127c6:	6078      	str	r0, [r7, #4]
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	4618      	mov	r0, r3
 80127cc:	f7ff ffeb 	bl	80127a6 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEED1Ev>
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	4618      	mov	r0, r3
 80127d4:	3708      	adds	r7, #8
 80127d6:	46bd      	mov	sp, r7
 80127d8:	bd80      	pop	{r7, pc}

080127da <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>:
  struct Data
 80127da:	b580      	push	{r7, lr}
 80127dc:	b082      	sub	sp, #8
 80127de:	af00      	add	r7, sp, #0
 80127e0:	6078      	str	r0, [r7, #4]
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	330c      	adds	r3, #12
 80127e6:	4618      	mov	r0, r3
 80127e8:	f7ff ffea 	bl	80127c0 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEED1Ev>
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	3304      	adds	r3, #4
 80127f0:	4618      	mov	r0, r3
 80127f2:	f7f8 fdcf 	bl	800b394 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEED1Ev>
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	4618      	mov	r0, r3
 80127fa:	3708      	adds	r7, #8
 80127fc:	46bd      	mov	sp, r7
 80127fe:	bd80      	pop	{r7, pc}

08012800 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 8012800:	b580      	push	{r7, lr}
 8012802:	b082      	sub	sp, #8
 8012804:	af00      	add	r7, sp, #0
 8012806:	6078      	str	r0, [r7, #4]
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	4618      	mov	r0, r3
 801280c:	f7ff ffe5 	bl	80127da <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>
 8012810:	6878      	ldr	r0, [r7, #4]
 8012812:	f000 fa26 	bl	8012c62 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEED1Ev>
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	4618      	mov	r0, r3
 801281a:	3708      	adds	r7, #8
 801281c:	46bd      	mov	sp, r7
 801281e:	bd80      	pop	{r7, pc}

08012820 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 8012820:	b580      	push	{r7, lr}
 8012822:	b082      	sub	sp, #8
 8012824:	af00      	add	r7, sp, #0
 8012826:	6078      	str	r0, [r7, #4]
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	4618      	mov	r0, r3
 801282c:	f7ff ffe8 	bl	8012800 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffED1Ev>
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	4618      	mov	r0, r3
 8012834:	3708      	adds	r7, #8
 8012836:	46bd      	mov	sp, r7
 8012838:	bd80      	pop	{r7, pc}

0801283a <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 801283a:	b580      	push	{r7, lr}
 801283c:	b082      	sub	sp, #8
 801283e:	af00      	add	r7, sp, #0
 8012840:	6078      	str	r0, [r7, #4]
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	4618      	mov	r0, r3
 8012846:	f7ff ffeb 	bl	8012820 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEED1Ev>
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	4618      	mov	r0, r3
 801284e:	3708      	adds	r7, #8
 8012850:	46bd      	mov	sp, r7
 8012852:	bd80      	pop	{r7, pc}

08012854 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 8012854:	b580      	push	{r7, lr}
 8012856:	ed2d 8b02 	vpush	{d8}
 801285a:	b088      	sub	sp, #32
 801285c:	af00      	add	r7, sp, #0
 801285e:	6078      	str	r0, [r7, #4]
 8012860:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 8012862:	6878      	ldr	r0, [r7, #4]
 8012864:	f7ff fc8a 	bl	801217c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE4rowsEv>
 8012868:	4603      	mov	r3, r0
 801286a:	2b00      	cmp	r3, #0
 801286c:	dd05      	ble.n	801287a <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 801286e:	6878      	ldr	r0, [r7, #4]
 8012870:	f7ff ff58 	bl	8012724 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE4colsEv>
 8012874:	4603      	mov	r3, r0
 8012876:	2b00      	cmp	r3, #0
 8012878:	dc06      	bgt.n	8012888 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 801287a:	4b16      	ldr	r3, [pc, #88]	; (80128d4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 801287c:	4a16      	ldr	r2, [pc, #88]	; (80128d8 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 801287e:	f240 119b 	movw	r1, #411	; 0x19b
 8012882:	4816      	ldr	r0, [pc, #88]	; (80128dc <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 8012884:	f00a fbd6 	bl	801d034 <__assert_func>
 8012888:	bf00      	nop
  ThisEvaluator thisEval(derived());
 801288a:	6878      	ldr	r0, [r7, #4]
 801288c:	f7ff ff5a 	bl	8012744 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE7derivedEv>
 8012890:	4602      	mov	r2, r0
 8012892:	f107 030c 	add.w	r3, r7, #12
 8012896:	4611      	mov	r1, r2
 8012898:	4618      	mov	r0, r3
 801289a:	f000 f9d3 	bl	8012c44 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1ERKSI_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 801289e:	6878      	ldr	r0, [r7, #4]
 80128a0:	f7ff ff50 	bl	8012744 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE7derivedEv>
 80128a4:	4602      	mov	r2, r0
 80128a6:	f107 030c 	add.w	r3, r7, #12
 80128aa:	6839      	ldr	r1, [r7, #0]
 80128ac:	4618      	mov	r0, r3
 80128ae:	f000 f9ee 	bl	8012c8e <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>
 80128b2:	eeb0 8a40 	vmov.f32	s16, s0
 80128b6:	bf00      	nop
  ThisEvaluator thisEval(derived());
 80128b8:	f107 030c 	add.w	r3, r7, #12
 80128bc:	4618      	mov	r0, r3
 80128be:	f7ff ffbc 	bl	801283a <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 80128c2:	eef0 7a48 	vmov.f32	s15, s16
}
 80128c6:	eeb0 0a67 	vmov.f32	s0, s15
 80128ca:	3720      	adds	r7, #32
 80128cc:	46bd      	mov	sp, r7
 80128ce:	ecbd 8b02 	vpop	{d8}
 80128d2:	bd80      	pop	{r7, pc}
 80128d4:	08023f1c 	.word	0x08023f1c
 80128d8:	080280f8 	.word	0x080280f8
 80128dc:	08024128 	.word	0x08024128

080128e0 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi5ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80128e0:	b580      	push	{r7, lr}
 80128e2:	b082      	sub	sp, #8
 80128e4:	af00      	add	r7, sp, #0
 80128e6:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 80128e8:	2202      	movs	r2, #2
 80128ea:	2101      	movs	r1, #1
 80128ec:	6878      	ldr	r0, [r7, #4]
 80128ee:	f7fe fbdb 	bl	80110a8 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80128f2:	6878      	ldr	r0, [r7, #4]
 80128f4:	f000 f9dc 	bl	8012cb0 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi6ELi9EE3runERSE_>
  }
 80128f8:	bf00      	nop
 80128fa:	3708      	adds	r7, #8
 80128fc:	46bd      	mov	sp, r7
 80128fe:	bd80      	pop	{r7, pc}

08012900 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8012900:	b580      	push	{r7, lr}
 8012902:	b082      	sub	sp, #8
 8012904:	af00      	add	r7, sp, #0
 8012906:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8012908:	2201      	movs	r2, #1
 801290a:	2101      	movs	r1, #1
 801290c:	6878      	ldr	r0, [r7, #4]
 801290e:	f7ff f874 	bl	80119fa <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8012912:	6878      	ldr	r0, [r7, #4]
 8012914:	f000 f9dc 	bl	8012cd0 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSC_>
  }
 8012918:	bf00      	nop
 801291a:	3708      	adds	r7, #8
 801291c:	46bd      	mov	sp, r7
 801291e:	bd80      	pop	{r7, pc}

08012920 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 8012920:	b580      	push	{r7, lr}
 8012922:	b082      	sub	sp, #8
 8012924:	af00      	add	r7, sp, #0
 8012926:	6078      	str	r0, [r7, #4]
 8012928:	6878      	ldr	r0, [r7, #4]
 801292a:	f7f2 fb69 	bl	8005000 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 801292e:	4603      	mov	r3, r0
 8012930:	4618      	mov	r0, r3
 8012932:	f7f1 fe4c 	bl	80045ce <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8012936:	4603      	mov	r3, r0
 8012938:	4618      	mov	r0, r3
 801293a:	3708      	adds	r7, #8
 801293c:	46bd      	mov	sp, r7
 801293e:	bd80      	pop	{r7, pc}

08012940 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4sizeEv>:
  inline Index size() const EIGEN_NOEXCEPT { return rows() * cols(); }
 8012940:	b590      	push	{r4, r7, lr}
 8012942:	b083      	sub	sp, #12
 8012944:	af00      	add	r7, sp, #0
 8012946:	6078      	str	r0, [r7, #4]
 8012948:	6878      	ldr	r0, [r7, #4]
 801294a:	f7ff ffe9 	bl	8012920 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 801294e:	4604      	mov	r4, r0
 8012950:	6878      	ldr	r0, [r7, #4]
 8012952:	f000 f807 	bl	8012964 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8012956:	4603      	mov	r3, r0
 8012958:	fb04 f303 	mul.w	r3, r4, r3
 801295c:	4618      	mov	r0, r3
 801295e:	370c      	adds	r7, #12
 8012960:	46bd      	mov	sp, r7
 8012962:	bd90      	pop	{r4, r7, pc}

08012964 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 8012964:	b580      	push	{r7, lr}
 8012966:	b082      	sub	sp, #8
 8012968:	af00      	add	r7, sp, #0
 801296a:	6078      	str	r0, [r7, #4]
 801296c:	6878      	ldr	r0, [r7, #4]
 801296e:	f7f2 fb47 	bl	8005000 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 8012972:	4603      	mov	r3, r0
 8012974:	4618      	mov	r0, r3
 8012976:	f7f1 fe1f 	bl	80045b8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 801297a:	4603      	mov	r3, r0
 801297c:	4618      	mov	r0, r3
 801297e:	3708      	adds	r7, #8
 8012980:	46bd      	mov	sp, r7
 8012982:	bd80      	pop	{r7, pc}

08012984 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11innerStrideEv>:
    inline Index innerStride() const EIGEN_NOEXCEPT { return 1; }
 8012984:	b480      	push	{r7}
 8012986:	b083      	sub	sp, #12
 8012988:	af00      	add	r7, sp, #0
 801298a:	6078      	str	r0, [r7, #4]
 801298c:	2301      	movs	r3, #1
 801298e:	4618      	mov	r0, r3
 8012990:	370c      	adds	r7, #12
 8012992:	46bd      	mov	sp, r7
 8012994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012998:	4770      	bx	lr

0801299a <_ZN5Eigen9DenseBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 801299a:	b480      	push	{r7}
 801299c:	b083      	sub	sp, #12
 801299e:	af00      	add	r7, sp, #0
 80129a0:	6078      	str	r0, [r7, #4]
    }
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	4618      	mov	r0, r3
 80129a6:	370c      	adds	r7, #12
 80129a8:	46bd      	mov	sp, r7
 80129aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129ae:	4770      	bx	lr

080129b0 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE11checkSanityIS7_EEvNS_8internal9enable_ifIXeqsrNSA_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 80129b0:	b480      	push	{r7}
 80129b2:	b083      	sub	sp, #12
 80129b4:	af00      	add	r7, sp, #0
 80129b6:	6078      	str	r0, [r7, #4]
 80129b8:	6039      	str	r1, [r7, #0]
    {}
 80129ba:	bf00      	nop
 80129bc:	370c      	adds	r7, #12
 80129be:	46bd      	mov	sp, r7
 80129c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129c4:	4770      	bx	lr

080129c6 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 80129c6:	b480      	push	{r7}
 80129c8:	b083      	sub	sp, #12
 80129ca:	af00      	add	r7, sp, #0
 80129cc:	6078      	str	r0, [r7, #4]
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	4618      	mov	r0, r3
 80129d2:	370c      	adds	r7, #12
 80129d4:	46bd      	mov	sp, r7
 80129d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129da:	4770      	bx	lr

080129dc <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE4DataC1ERKSJ_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 80129dc:	b590      	push	{r4, r7, lr}
 80129de:	b083      	sub	sp, #12
 80129e0:	af00      	add	r7, sp, #0
 80129e2:	6078      	str	r0, [r7, #4]
 80129e4:	6039      	str	r1, [r7, #0]
 80129e6:	687c      	ldr	r4, [r7, #4]
 80129e8:	6838      	ldr	r0, [r7, #0]
 80129ea:	f000 f981 	bl	8012cf0 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE7functorEv>
 80129ee:	4603      	mov	r3, r0
 80129f0:	4619      	mov	r1, r3
 80129f2:	4620      	mov	r0, r4
 80129f4:	f7f1 ff54 	bl	80048a0 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	1d1c      	adds	r4, r3, #4
 80129fc:	6838      	ldr	r0, [r7, #0]
 80129fe:	f000 f983 	bl	8012d08 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE3lhsEv>
 8012a02:	4603      	mov	r3, r0
 8012a04:	4619      	mov	r1, r3
 8012a06:	4620      	mov	r0, r4
 8012a08:	f7fb fa91 	bl	800df2e <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERSA_>
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	f103 040c 	add.w	r4, r3, #12
 8012a12:	6838      	ldr	r0, [r7, #0]
 8012a14:	f000 f983 	bl	8012d1e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE3rhsEv>
 8012a18:	4603      	mov	r3, r0
 8012a1a:	4619      	mov	r1, r3
 8012a1c:	4620      	mov	r0, r4
 8012a1e:	f000 f98a 	bl	8012d36 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERS9_>
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	4618      	mov	r0, r3
 8012a26:	370c      	adds	r7, #12
 8012a28:	46bd      	mov	sp, r7
 8012a2a:	bd90      	pop	{r4, r7, pc}

08012a2c <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 8012a2c:	b580      	push	{r7, lr}
 8012a2e:	b084      	sub	sp, #16
 8012a30:	af00      	add	r7, sp, #0
 8012a32:	60f8      	str	r0, [r7, #12]
 8012a34:	60b9      	str	r1, [r7, #8]
 8012a36:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 8012a38:	68fb      	ldr	r3, [r7, #12]
 8012a3a:	68ba      	ldr	r2, [r7, #8]
 8012a3c:	6879      	ldr	r1, [r7, #4]
 8012a3e:	4618      	mov	r0, r3
 8012a40:	f000 f988 	bl	8012d54 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE5coeffEii>
 8012a44:	eef0 7a40 	vmov.f32	s15, s0
 8012a48:	eeb0 0a67 	vmov.f32	s0, s15
 8012a4c:	3710      	adds	r7, #16
 8012a4e:	46bd      	mov	sp, r7
 8012a50:	bd80      	pop	{r7, pc}

08012a52 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi1ELi1EE3runERKSN_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8012a52:	b580      	push	{r7, lr}
 8012a54:	b082      	sub	sp, #8
 8012a56:	af00      	add	r7, sp, #0
 8012a58:	6078      	str	r0, [r7, #4]
 8012a5a:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8012a5c:	2201      	movs	r2, #1
 8012a5e:	2100      	movs	r1, #0
 8012a60:	6878      	ldr	r0, [r7, #4]
 8012a62:	f7ff ffe3 	bl	8012a2c <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 8012a66:	eef0 7a40 	vmov.f32	s15, s0
  }
 8012a6a:	eeb0 0a67 	vmov.f32	s0, s15
 8012a6e:	3708      	adds	r7, #8
 8012a70:	46bd      	mov	sp, r7
 8012a72:	bd80      	pop	{r7, pc}

08012a74 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi2ELi1EE3runERKSN_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8012a74:	b580      	push	{r7, lr}
 8012a76:	b082      	sub	sp, #8
 8012a78:	af00      	add	r7, sp, #0
 8012a7a:	6078      	str	r0, [r7, #4]
 8012a7c:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8012a7e:	2202      	movs	r2, #2
 8012a80:	2100      	movs	r1, #0
 8012a82:	6878      	ldr	r0, [r7, #4]
 8012a84:	f7ff ffd2 	bl	8012a2c <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 8012a88:	eef0 7a40 	vmov.f32	s15, s0
  }
 8012a8c:	eeb0 0a67 	vmov.f32	s0, s15
 8012a90:	3708      	adds	r7, #8
 8012a92:	46bd      	mov	sp, r7
 8012a94:	bd80      	pop	{r7, pc}

08012a96 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>:
  evaluator()
 8012a96:	b580      	push	{r7, lr}
 8012a98:	b082      	sub	sp, #8
 8012a9a:	af00      	add	r7, sp, #0
 8012a9c:	6078      	str	r0, [r7, #4]
    : m_d(0,OuterStrideAtCompileTime)
 8012a9e:	6878      	ldr	r0, [r7, #4]
 8012aa0:	f7f7 fd37 	bl	800a512 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	2200      	movs	r2, #0
 8012aa8:	2100      	movs	r1, #0
 8012aaa:	4618      	mov	r0, r3
 8012aac:	f7f3 fcbd 	bl	800642a <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EEC1EPKfi>
  }
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	4618      	mov	r0, r3
 8012ab4:	3708      	adds	r7, #8
 8012ab6:	46bd      	mov	sp, r7
 8012ab8:	bd80      	pop	{r7, pc}

08012aba <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init2IiiEEviiPNS_8internal9enable_ifILb1ET_E4typeE>:
    EIGEN_STRONG_INLINE void _init2(Index rows, Index cols, typename internal::enable_if<Base::SizeAtCompileTime!=2,T0>::type* = 0)
 8012aba:	b580      	push	{r7, lr}
 8012abc:	b086      	sub	sp, #24
 8012abe:	af00      	add	r7, sp, #0
 8012ac0:	60f8      	str	r0, [r7, #12]
 8012ac2:	60b9      	str	r1, [r7, #8]
 8012ac4:	607a      	str	r2, [r7, #4]
 8012ac6:	603b      	str	r3, [r7, #0]
      const bool t0_is_integer_alike = internal::is_valid_index_type<T0>::value;
 8012ac8:	2301      	movs	r3, #1
 8012aca:	75fb      	strb	r3, [r7, #23]
      const bool t1_is_integer_alike = internal::is_valid_index_type<T1>::value;
 8012acc:	2301      	movs	r3, #1
 8012ace:	75bb      	strb	r3, [r7, #22]
      resize(rows,cols);
 8012ad0:	687a      	ldr	r2, [r7, #4]
 8012ad2:	68b9      	ldr	r1, [r7, #8]
 8012ad4:	68f8      	ldr	r0, [r7, #12]
 8012ad6:	f7f9 fef9 	bl	800c8cc <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii>
    }
 8012ada:	bf00      	nop
 8012adc:	3718      	adds	r7, #24
 8012ade:	46bd      	mov	sp, r7
 8012ae0:	bd80      	pop	{r7, pc}

08012ae2 <_ZNK5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE9transposeEv>:
DenseBase<Derived>::transpose() const
 8012ae2:	b580      	push	{r7, lr}
 8012ae4:	b082      	sub	sp, #8
 8012ae6:	af00      	add	r7, sp, #0
 8012ae8:	6078      	str	r0, [r7, #4]
 8012aea:	6039      	str	r1, [r7, #0]
  return ConstTransposeReturnType(derived());
 8012aec:	6838      	ldr	r0, [r7, #0]
 8012aee:	f7f2 fae5 	bl	80050bc <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE7derivedEv>
 8012af2:	4603      	mov	r3, r0
 8012af4:	4619      	mov	r1, r3
 8012af6:	6878      	ldr	r0, [r7, #4]
 8012af8:	f000 f974 	bl	8012de4 <_ZN5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1ERS6_>
}
 8012afc:	6878      	ldr	r0, [r7, #4]
 8012afe:	3708      	adds	r7, #8
 8012b00:	46bd      	mov	sp, r7
 8012b02:	bd80      	pop	{r7, pc}

08012b04 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEE12cwiseProductINS1_IS4_EEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSD_6traitsIT_E6ScalarEEEKS8_KSG_EERKNS0_ISG_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 8012b04:	b5b0      	push	{r4, r5, r7, lr}
 8012b06:	b086      	sub	sp, #24
 8012b08:	af00      	add	r7, sp, #0
 8012b0a:	60f8      	str	r0, [r7, #12]
 8012b0c:	60b9      	str	r1, [r7, #8]
 8012b0e:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 8012b10:	68b8      	ldr	r0, [r7, #8]
 8012b12:	f000 f97a 	bl	8012e0a <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEE7derivedEv>
 8012b16:	4604      	mov	r4, r0
 8012b18:	6878      	ldr	r0, [r7, #4]
 8012b1a:	f7f2 fa05 	bl	8004f28 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 8012b1e:	4605      	mov	r5, r0
 8012b20:	f107 0314 	add.w	r3, r7, #20
 8012b24:	4618      	mov	r0, r3
 8012b26:	f7f1 fe31 	bl	800478c <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 8012b2a:	f107 0314 	add.w	r3, r7, #20
 8012b2e:	462a      	mov	r2, r5
 8012b30:	4621      	mov	r1, r4
 8012b32:	68f8      	ldr	r0, [r7, #12]
 8012b34:	f000 f9a6 	bl	8012e84 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEEC1ERSC_RSE_RKS3_>
}
 8012b38:	68f8      	ldr	r0, [r7, #12]
 8012b3a:	3718      	adds	r7, #24
 8012b3c:	46bd      	mov	sp, r7
 8012b3e:	bdb0      	pop	{r4, r5, r7, pc}

08012b40 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 8012b40:	b580      	push	{r7, lr}
 8012b42:	b082      	sub	sp, #8
 8012b44:	af00      	add	r7, sp, #0
 8012b46:	6078      	str	r0, [r7, #4]
 8012b48:	6878      	ldr	r0, [r7, #4]
 8012b4a:	f000 f9eb 	bl	8012f24 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE7derivedEv>
 8012b4e:	4603      	mov	r3, r0
 8012b50:	4618      	mov	r0, r3
 8012b52:	f000 f9f2 	bl	8012f3a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE4rowsEv>
 8012b56:	4603      	mov	r3, r0
 8012b58:	4618      	mov	r0, r3
 8012b5a:	3708      	adds	r7, #8
 8012b5c:	46bd      	mov	sp, r7
 8012b5e:	bd80      	pop	{r7, pc}

08012b60 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE3sumEv>:
DenseBase<Derived>::sum() const
 8012b60:	b590      	push	{r4, r7, lr}
 8012b62:	b085      	sub	sp, #20
 8012b64:	af00      	add	r7, sp, #0
 8012b66:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 8012b68:	6878      	ldr	r0, [r7, #4]
 8012b6a:	f000 f9db 	bl	8012f24 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE7derivedEv>
 8012b6e:	4604      	mov	r4, r0
 8012b70:	f107 030c 	add.w	r3, r7, #12
 8012b74:	4618      	mov	r0, r3
 8012b76:	f7f2 f900 	bl	8004d7a <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 8012b7a:	f107 030c 	add.w	r3, r7, #12
 8012b7e:	4619      	mov	r1, r3
 8012b80:	4620      	mov	r0, r4
 8012b82:	f000 fa83 	bl	801308c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 8012b86:	eef0 7a40 	vmov.f32	s15, s0
 8012b8a:	bf00      	nop
}
 8012b8c:	eeb0 0a67 	vmov.f32	s0, s15
 8012b90:	3714      	adds	r7, #20
 8012b92:	46bd      	mov	sp, r7
 8012b94:	bd90      	pop	{r4, r7, pc}

08012b96 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfEC1ERKS6_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 8012b96:	b590      	push	{r4, r7, lr}
 8012b98:	b083      	sub	sp, #12
 8012b9a:	af00      	add	r7, sp, #0
 8012b9c:	6078      	str	r0, [r7, #4]
 8012b9e:	6039      	str	r1, [r7, #0]
 8012ba0:	6878      	ldr	r0, [r7, #4]
 8012ba2:	f000 fac5 	bl	8013130 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>
 8012ba6:	687c      	ldr	r4, [r7, #4]
 8012ba8:	6838      	ldr	r0, [r7, #0]
 8012baa:	f000 fab5 	bl	8013118 <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE16nestedExpressionEv>
 8012bae:	4603      	mov	r3, r0
 8012bb0:	4619      	mov	r1, r3
 8012bb2:	4620      	mov	r0, r4
 8012bb4:	f000 fac7 	bl	8013146 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS4_>
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	4618      	mov	r0, r3
 8012bbc:	370c      	adds	r7, #12
 8012bbe:	46bd      	mov	sp, r7
 8012bc0:	bd90      	pop	{r4, r7, pc}

08012bc2 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8012bc2:	b590      	push	{r4, r7, lr}
 8012bc4:	b085      	sub	sp, #20
 8012bc6:	af00      	add	r7, sp, #0
 8012bc8:	60f8      	str	r0, [r7, #12]
 8012bca:	60b9      	str	r1, [r7, #8]
 8012bcc:	607a      	str	r2, [r7, #4]
      return m_d.data[row * m_d.outerStride() + col];
 8012bce:	68fb      	ldr	r3, [r7, #12]
 8012bd0:	681c      	ldr	r4, [r3, #0]
 8012bd2:	68fb      	ldr	r3, [r7, #12]
 8012bd4:	4618      	mov	r0, r3
 8012bd6:	f7f3 fb5d 	bl	8006294 <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EE11outerStrideEv>
 8012bda:	4602      	mov	r2, r0
 8012bdc:	68bb      	ldr	r3, [r7, #8]
 8012bde:	fb03 f202 	mul.w	r2, r3, r2
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	4413      	add	r3, r2
 8012be6:	009b      	lsls	r3, r3, #2
 8012be8:	4423      	add	r3, r4
  }
 8012bea:	4618      	mov	r0, r3
 8012bec:	3714      	adds	r7, #20
 8012bee:	46bd      	mov	sp, r7
 8012bf0:	bd90      	pop	{r4, r7, pc}

08012bf2 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ENS_5DenseEEC1ERS3_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 8012bf2:	b580      	push	{r7, lr}
 8012bf4:	b084      	sub	sp, #16
 8012bf6:	af00      	add	r7, sp, #0
 8012bf8:	60f8      	str	r0, [r7, #12]
 8012bfa:	60b9      	str	r1, [r7, #8]
 8012bfc:	607a      	str	r2, [r7, #4]
 8012bfe:	68fb      	ldr	r3, [r7, #12]
 8012c00:	687a      	ldr	r2, [r7, #4]
 8012c02:	68b9      	ldr	r1, [r7, #8]
 8012c04:	4618      	mov	r0, r3
 8012c06:	f000 faad 	bl	8013164 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EEC1ERS4_i>
 8012c0a:	68fb      	ldr	r3, [r7, #12]
 8012c0c:	4618      	mov	r0, r3
 8012c0e:	3710      	adds	r7, #16
 8012c10:	46bd      	mov	sp, r7
 8012c12:	bd80      	pop	{r7, pc}

08012c14 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8012c14:	b480      	push	{r7}
 8012c16:	b083      	sub	sp, #12
 8012c18:	af00      	add	r7, sp, #0
 8012c1a:	6078      	str	r0, [r7, #4]
    }
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	4618      	mov	r0, r3
 8012c20:	370c      	adds	r7, #12
 8012c22:	46bd      	mov	sp, r7
 8012c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c28:	4770      	bx	lr

08012c2a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 8012c2a:	b580      	push	{r7, lr}
 8012c2c:	b082      	sub	sp, #8
 8012c2e:	af00      	add	r7, sp, #0
 8012c30:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	4618      	mov	r0, r3
 8012c36:	f7f8 fac6 	bl	800b1c6 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4colsEv>
 8012c3a:	4603      	mov	r3, r0
    }
 8012c3c:	4618      	mov	r0, r3
 8012c3e:	3708      	adds	r7, #8
 8012c40:	46bd      	mov	sp, r7
 8012c42:	bd80      	pop	{r7, pc}

08012c44 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1ERKSI_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 8012c44:	b580      	push	{r7, lr}
 8012c46:	b082      	sub	sp, #8
 8012c48:	af00      	add	r7, sp, #0
 8012c4a:	6078      	str	r0, [r7, #4]
 8012c4c:	6039      	str	r1, [r7, #0]
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	6839      	ldr	r1, [r7, #0]
 8012c52:	4618      	mov	r0, r3
 8012c54:	f000 fab7 	bl	80131c6 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1ERKSI_>
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	4618      	mov	r0, r3
 8012c5c:	3708      	adds	r7, #8
 8012c5e:	46bd      	mov	sp, r7
 8012c60:	bd80      	pop	{r7, pc}

08012c62 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8012c62:	b480      	push	{r7}
 8012c64:	b083      	sub	sp, #12
 8012c66:	af00      	add	r7, sp, #0
 8012c68:	6078      	str	r0, [r7, #4]
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	4618      	mov	r0, r3
 8012c6e:	370c      	adds	r7, #12
 8012c70:	46bd      	mov	sp, r7
 8012c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c76:	4770      	bx	lr

08012c78 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEED1Ev>:
 8012c78:	b480      	push	{r7}
 8012c7a:	b083      	sub	sp, #12
 8012c7c:	af00      	add	r7, sp, #0
 8012c7e:	6078      	str	r0, [r7, #4]
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	4618      	mov	r0, r3
 8012c84:	370c      	adds	r7, #12
 8012c86:	46bd      	mov	sp, r7
 8012c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c8c:	4770      	bx	lr

08012c8e <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 8012c8e:	b580      	push	{r7, lr}
 8012c90:	b084      	sub	sp, #16
 8012c92:	af00      	add	r7, sp, #0
 8012c94:	60f8      	str	r0, [r7, #12]
 8012c96:	60b9      	str	r1, [r7, #8]
 8012c98:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 8012c9a:	68b9      	ldr	r1, [r7, #8]
 8012c9c:	68f8      	ldr	r0, [r7, #12]
 8012c9e:	f000 faa1 	bl	80131e4 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEELi0ELi1EE3runERKSM_RKS3_>
 8012ca2:	eef0 7a40 	vmov.f32	s15, s0
  }
 8012ca6:	eeb0 0a67 	vmov.f32	s0, s15
 8012caa:	3710      	adds	r7, #16
 8012cac:	46bd      	mov	sp, r7
 8012cae:	bd80      	pop	{r7, pc}

08012cb0 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi6ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8012cb0:	b580      	push	{r7, lr}
 8012cb2:	b082      	sub	sp, #8
 8012cb4:	af00      	add	r7, sp, #0
 8012cb6:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8012cb8:	2200      	movs	r2, #0
 8012cba:	2102      	movs	r1, #2
 8012cbc:	6878      	ldr	r0, [r7, #4]
 8012cbe:	f7fe f9f3 	bl	80110a8 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8012cc2:	6878      	ldr	r0, [r7, #4]
 8012cc4:	f000 fa9f 	bl	8013206 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi7ELi9EE3runERSE_>
  }
 8012cc8:	bf00      	nop
 8012cca:	3708      	adds	r7, #8
 8012ccc:	46bd      	mov	sp, r7
 8012cce:	bd80      	pop	{r7, pc}

08012cd0 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8012cd0:	b580      	push	{r7, lr}
 8012cd2:	b082      	sub	sp, #8
 8012cd4:	af00      	add	r7, sp, #0
 8012cd6:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8012cd8:	2202      	movs	r2, #2
 8012cda:	2101      	movs	r1, #1
 8012cdc:	6878      	ldr	r0, [r7, #4]
 8012cde:	f7fe fe8c 	bl	80119fa <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8012ce2:	6878      	ldr	r0, [r7, #4]
 8012ce4:	f000 fa9f 	bl	8013226 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSC_>
  }
 8012ce8:	bf00      	nop
 8012cea:	3708      	adds	r7, #8
 8012cec:	46bd      	mov	sp, r7
 8012cee:	bd80      	pop	{r7, pc}

08012cf0 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 8012cf0:	b480      	push	{r7}
 8012cf2:	b083      	sub	sp, #12
 8012cf4:	af00      	add	r7, sp, #0
 8012cf6:	6078      	str	r0, [r7, #4]
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	3330      	adds	r3, #48	; 0x30
 8012cfc:	4618      	mov	r0, r3
 8012cfe:	370c      	adds	r7, #12
 8012d00:	46bd      	mov	sp, r7
 8012d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d06:	4770      	bx	lr

08012d08 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 8012d08:	b480      	push	{r7}
 8012d0a:	b083      	sub	sp, #12
 8012d0c:	af00      	add	r7, sp, #0
 8012d0e:	6078      	str	r0, [r7, #4]
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	4618      	mov	r0, r3
 8012d14:	370c      	adds	r7, #12
 8012d16:	46bd      	mov	sp, r7
 8012d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d1c:	4770      	bx	lr

08012d1e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 8012d1e:	b480      	push	{r7}
 8012d20:	b083      	sub	sp, #12
 8012d22:	af00      	add	r7, sp, #0
 8012d24:	6078      	str	r0, [r7, #4]
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	3318      	adds	r3, #24
 8012d2a:	4618      	mov	r0, r3
 8012d2c:	370c      	adds	r7, #12
 8012d2e:	46bd      	mov	sp, r7
 8012d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d34:	4770      	bx	lr

08012d36 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERS9_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8012d36:	b580      	push	{r7, lr}
 8012d38:	b082      	sub	sp, #8
 8012d3a:	af00      	add	r7, sp, #0
 8012d3c:	6078      	str	r0, [r7, #4]
 8012d3e:	6039      	str	r1, [r7, #0]
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	6839      	ldr	r1, [r7, #0]
 8012d44:	4618      	mov	r0, r3
 8012d46:	f000 fa7e 	bl	8013246 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERKS8_>
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	4618      	mov	r0, r3
 8012d4e:	3708      	adds	r7, #8
 8012d50:	46bd      	mov	sp, r7
 8012d52:	bd80      	pop	{r7, pc}

08012d54 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8012d54:	b590      	push	{r4, r7, lr}
 8012d56:	b087      	sub	sp, #28
 8012d58:	af00      	add	r7, sp, #0
 8012d5a:	60f8      	str	r0, [r7, #12]
 8012d5c:	60b9      	str	r1, [r7, #8]
 8012d5e:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 8012d60:	68fb      	ldr	r3, [r7, #12]
 8012d62:	4618      	mov	r0, r3
 8012d64:	f000 fa7e 	bl	8013264 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE4Data4funcEv>
 8012d68:	4604      	mov	r4, r0
 8012d6a:	68fb      	ldr	r3, [r7, #12]
 8012d6c:	3304      	adds	r3, #4
 8012d6e:	687a      	ldr	r2, [r7, #4]
 8012d70:	68b9      	ldr	r1, [r7, #8]
 8012d72:	4618      	mov	r0, r3
 8012d74:	f7fb fdf6 	bl	800e964 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfE5coeffEii>
 8012d78:	eef0 7a40 	vmov.f32	s15, s0
 8012d7c:	edc7 7a04 	vstr	s15, [r7, #16]
 8012d80:	68fb      	ldr	r3, [r7, #12]
 8012d82:	330c      	adds	r3, #12
 8012d84:	687a      	ldr	r2, [r7, #4]
 8012d86:	68b9      	ldr	r1, [r7, #8]
 8012d88:	4618      	mov	r0, r3
 8012d8a:	f000 fa76 	bl	801327a <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>
 8012d8e:	eef0 7a40 	vmov.f32	s15, s0
 8012d92:	edc7 7a05 	vstr	s15, [r7, #20]
 8012d96:	f107 0214 	add.w	r2, r7, #20
 8012d9a:	f107 0310 	add.w	r3, r7, #16
 8012d9e:	4619      	mov	r1, r3
 8012da0:	4620      	mov	r0, r4
 8012da2:	f7fb fc23 	bl	800e5ec <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 8012da6:	eef0 7a40 	vmov.f32	s15, s0
  }
 8012daa:	eeb0 0a67 	vmov.f32	s0, s15
 8012dae:	371c      	adds	r7, #28
 8012db0:	46bd      	mov	sp, r7
 8012db2:	bd90      	pop	{r4, r7, pc}

08012db4 <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1Ev>:
 8012db4:	b580      	push	{r7, lr}
 8012db6:	b082      	sub	sp, #8
 8012db8:	af00      	add	r7, sp, #0
 8012dba:	6078      	str	r0, [r7, #4]
 8012dbc:	6878      	ldr	r0, [r7, #4]
 8012dbe:	f000 fa7d 	bl	80132bc <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1Ev>
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	4618      	mov	r0, r3
 8012dc6:	3708      	adds	r7, #8
 8012dc8:	46bd      	mov	sp, r7
 8012dca:	bd80      	pop	{r7, pc}

08012dcc <_ZN5Eigen13TransposeImplIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 8012dcc:	b580      	push	{r7, lr}
 8012dce:	b082      	sub	sp, #8
 8012dd0:	af00      	add	r7, sp, #0
 8012dd2:	6078      	str	r0, [r7, #4]
 8012dd4:	6878      	ldr	r0, [r7, #4]
 8012dd6:	f7ff ffed 	bl	8012db4 <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1Ev>
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	4618      	mov	r0, r3
 8012dde:	3708      	adds	r7, #8
 8012de0:	46bd      	mov	sp, r7
 8012de2:	bd80      	pop	{r7, pc}

08012de4 <_ZN5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1ERS6_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 8012de4:	b580      	push	{r7, lr}
 8012de6:	b082      	sub	sp, #8
 8012de8:	af00      	add	r7, sp, #0
 8012dea:	6078      	str	r0, [r7, #4]
 8012dec:	6039      	str	r1, [r7, #0]
 8012dee:	6878      	ldr	r0, [r7, #4]
 8012df0:	f7ff ffec 	bl	8012dcc <_ZN5Eigen13TransposeImplIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_5DenseEEC1Ev>
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	683a      	ldr	r2, [r7, #0]
 8012df8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012dfc:	e883 0003 	stmia.w	r3, {r0, r1}
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	4618      	mov	r0, r3
 8012e04:	3708      	adds	r7, #8
 8012e06:	46bd      	mov	sp, r7
 8012e08:	bd80      	pop	{r7, pc}

08012e0a <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8012e0a:	b480      	push	{r7}
 8012e0c:	b083      	sub	sp, #12
 8012e0e:	af00      	add	r7, sp, #0
 8012e10:	6078      	str	r0, [r7, #4]
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	4618      	mov	r0, r3
 8012e16:	370c      	adds	r7, #12
 8012e18:	46bd      	mov	sp, r7
 8012e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e1e:	4770      	bx	lr

08012e20 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1Ev>:
 8012e20:	b580      	push	{r7, lr}
 8012e22:	b082      	sub	sp, #8
 8012e24:	af00      	add	r7, sp, #0
 8012e26:	6078      	str	r0, [r7, #4]
 8012e28:	6878      	ldr	r0, [r7, #4]
 8012e2a:	f000 fa52 	bl	80132d2 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1Ev>
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	4618      	mov	r0, r3
 8012e32:	3708      	adds	r7, #8
 8012e34:	46bd      	mov	sp, r7
 8012e36:	bd80      	pop	{r7, pc}

08012e38 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 8012e38:	b580      	push	{r7, lr}
 8012e3a:	b082      	sub	sp, #8
 8012e3c:	af00      	add	r7, sp, #0
 8012e3e:	6078      	str	r0, [r7, #4]
 8012e40:	6878      	ldr	r0, [r7, #4]
 8012e42:	f7ff ffed 	bl	8012e20 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1Ev>
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	4618      	mov	r0, r3
 8012e4a:	3708      	adds	r7, #8
 8012e4c:	46bd      	mov	sp, r7
 8012e4e:	bd80      	pop	{r7, pc}

08012e50 <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 8012e50:	b580      	push	{r7, lr}
 8012e52:	b082      	sub	sp, #8
 8012e54:	af00      	add	r7, sp, #0
 8012e56:	6078      	str	r0, [r7, #4]
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	4618      	mov	r0, r3
 8012e5c:	f7f2 f95d 	bl	800511a <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4colsEv>
 8012e60:	4603      	mov	r3, r0
 8012e62:	4618      	mov	r0, r3
 8012e64:	3708      	adds	r7, #8
 8012e66:	46bd      	mov	sp, r7
 8012e68:	bd80      	pop	{r7, pc}

08012e6a <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 8012e6a:	b580      	push	{r7, lr}
 8012e6c:	b082      	sub	sp, #8
 8012e6e:	af00      	add	r7, sp, #0
 8012e70:	6078      	str	r0, [r7, #4]
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	4618      	mov	r0, r3
 8012e76:	f7f3 f8c2 	bl	8005ffe <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4rowsEv>
 8012e7a:	4603      	mov	r3, r0
 8012e7c:	4618      	mov	r0, r3
 8012e7e:	3708      	adds	r7, #8
 8012e80:	46bd      	mov	sp, r7
 8012e82:	bd80      	pop	{r7, pc}

08012e84 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEEC1ERSC_RSE_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8012e84:	b590      	push	{r4, r7, lr}
 8012e86:	b085      	sub	sp, #20
 8012e88:	af00      	add	r7, sp, #0
 8012e8a:	60f8      	str	r0, [r7, #12]
 8012e8c:	60b9      	str	r1, [r7, #8]
 8012e8e:	607a      	str	r2, [r7, #4]
 8012e90:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 8012e92:	68f8      	ldr	r0, [r7, #12]
 8012e94:	f7ff ffd0 	bl	8012e38 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EENS_5DenseEEC1Ev>
 8012e98:	68fb      	ldr	r3, [r7, #12]
 8012e9a:	68ba      	ldr	r2, [r7, #8]
 8012e9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012ea0:	e883 0003 	stmia.w	r3, {r0, r1}
 8012ea4:	68fb      	ldr	r3, [r7, #12]
 8012ea6:	3308      	adds	r3, #8
 8012ea8:	687a      	ldr	r2, [r7, #4]
 8012eaa:	6812      	ldr	r2, [r2, #0]
 8012eac:	601a      	str	r2, [r3, #0]
 8012eae:	68fb      	ldr	r3, [r7, #12]
 8012eb0:	330c      	adds	r3, #12
 8012eb2:	6839      	ldr	r1, [r7, #0]
 8012eb4:	4618      	mov	r0, r3
 8012eb6:	f7f1 fcf3 	bl	80048a0 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8012eba:	68b8      	ldr	r0, [r7, #8]
 8012ebc:	f7ff ffc8 	bl	8012e50 <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE4rowsEv>
 8012ec0:	4604      	mov	r4, r0
 8012ec2:	6878      	ldr	r0, [r7, #4]
 8012ec4:	f7f2 f85f 	bl	8004f86 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8012ec8:	4603      	mov	r3, r0
 8012eca:	429c      	cmp	r4, r3
 8012ecc:	d109      	bne.n	8012ee2 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEEC1ERSC_RSE_RKS3_+0x5e>
 8012ece:	68b8      	ldr	r0, [r7, #8]
 8012ed0:	f7ff ffcb 	bl	8012e6a <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE4colsEv>
 8012ed4:	4604      	mov	r4, r0
 8012ed6:	6878      	ldr	r0, [r7, #4]
 8012ed8:	f7f3 f89f 	bl	800601a <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8012edc:	4603      	mov	r3, r0
 8012ede:	429c      	cmp	r4, r3
 8012ee0:	d005      	beq.n	8012eee <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEEC1ERSC_RSE_RKS3_+0x6a>
 8012ee2:	4b05      	ldr	r3, [pc, #20]	; (8012ef8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEEC1ERSC_RSE_RKS3_+0x74>)
 8012ee4:	4a05      	ldr	r2, [pc, #20]	; (8012efc <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEEC1ERSC_RSE_RKS3_+0x78>)
 8012ee6:	2174      	movs	r1, #116	; 0x74
 8012ee8:	4805      	ldr	r0, [pc, #20]	; (8012f00 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEEC1ERSC_RSE_RKS3_+0x7c>)
 8012eea:	f00a f8a3 	bl	801d034 <__assert_func>
    }
 8012eee:	68fb      	ldr	r3, [r7, #12]
 8012ef0:	4618      	mov	r0, r3
 8012ef2:	3714      	adds	r7, #20
 8012ef4:	46bd      	mov	sp, r7
 8012ef6:	bd90      	pop	{r4, r7, pc}
 8012ef8:	0801ee9c 	.word	0x0801ee9c
 8012efc:	080282c0 	.word	0x080282c0
 8012f00:	0801f100 	.word	0x0801f100

08012f04 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 8012f04:	b580      	push	{r7, lr}
 8012f06:	b082      	sub	sp, #8
 8012f08:	af00      	add	r7, sp, #0
 8012f0a:	6078      	str	r0, [r7, #4]
 8012f0c:	6878      	ldr	r0, [r7, #4]
 8012f0e:	f000 f809 	bl	8012f24 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE7derivedEv>
 8012f12:	4603      	mov	r3, r0
 8012f14:	4618      	mov	r0, r3
 8012f16:	f000 f9e7 	bl	80132e8 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE4colsEv>
 8012f1a:	4603      	mov	r3, r0
 8012f1c:	4618      	mov	r0, r3
 8012f1e:	3708      	adds	r7, #8
 8012f20:	46bd      	mov	sp, r7
 8012f22:	bd80      	pop	{r7, pc}

08012f24 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8012f24:	b480      	push	{r7}
 8012f26:	b083      	sub	sp, #12
 8012f28:	af00      	add	r7, sp, #0
 8012f2a:	6078      	str	r0, [r7, #4]
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	4618      	mov	r0, r3
 8012f30:	370c      	adds	r7, #12
 8012f32:	46bd      	mov	sp, r7
 8012f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f38:	4770      	bx	lr

08012f3a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 8012f3a:	b580      	push	{r7, lr}
 8012f3c:	b082      	sub	sp, #8
 8012f3e:	af00      	add	r7, sp, #0
 8012f40:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	4618      	mov	r0, r3
 8012f46:	f7ff ff83 	bl	8012e50 <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE4rowsEv>
 8012f4a:	4603      	mov	r3, r0
    }
 8012f4c:	4618      	mov	r0, r3
 8012f4e:	3708      	adds	r7, #8
 8012f50:	46bd      	mov	sp, r7
 8012f52:	bd80      	pop	{r7, pc}

08012f54 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEELi3ENS_10DenseShapeES7_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, Options>, ProductTag, LhsShape, RhsShape>
 8012f54:	b580      	push	{r7, lr}
 8012f56:	b082      	sub	sp, #8
 8012f58:	af00      	add	r7, sp, #0
 8012f5a:	6078      	str	r0, [r7, #4]
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	4618      	mov	r0, r3
 8012f60:	f7fb fa2e 	bl	800e3c0 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	4618      	mov	r0, r3
 8012f68:	3708      	adds	r7, #8
 8012f6a:	46bd      	mov	sp, r7
 8012f6c:	bd80      	pop	{r7, pc}

08012f6e <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 8012f6e:	b580      	push	{r7, lr}
 8012f70:	b082      	sub	sp, #8
 8012f72:	af00      	add	r7, sp, #0
 8012f74:	6078      	str	r0, [r7, #4]
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	4618      	mov	r0, r3
 8012f7a:	f7ff ffeb 	bl	8012f54 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEELi3ENS_10DenseShapeES7_ffED1Ev>
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	4618      	mov	r0, r3
 8012f82:	3708      	adds	r7, #8
 8012f84:	46bd      	mov	sp, r7
 8012f86:	bd80      	pop	{r7, pc}

08012f88 <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEED1Ev>:
struct evaluator<const T>
 8012f88:	b580      	push	{r7, lr}
 8012f8a:	b082      	sub	sp, #8
 8012f8c:	af00      	add	r7, sp, #0
 8012f8e:	6078      	str	r0, [r7, #4]
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	4618      	mov	r0, r3
 8012f94:	f7ff ffeb 	bl	8012f6e <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEED1Ev>
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	4618      	mov	r0, r3
 8012f9c:	3708      	adds	r7, #8
 8012f9e:	46bd      	mov	sp, r7
 8012fa0:	bd80      	pop	{r7, pc}

08012fa2 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 8012fa2:	b580      	push	{r7, lr}
 8012fa4:	b082      	sub	sp, #8
 8012fa6:	af00      	add	r7, sp, #0
 8012fa8:	6078      	str	r0, [r7, #4]
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	4618      	mov	r0, r3
 8012fae:	f7ff ffeb 	bl	8012f88 <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEED1Ev>
 8012fb2:	6878      	ldr	r0, [r7, #4]
 8012fb4:	f000 f9bf 	bl	8013336 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEED1Ev>
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	4618      	mov	r0, r3
 8012fbc:	3708      	adds	r7, #8
 8012fbe:	46bd      	mov	sp, r7
 8012fc0:	bd80      	pop	{r7, pc}

08012fc2 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 8012fc2:	b580      	push	{r7, lr}
 8012fc4:	b082      	sub	sp, #8
 8012fc6:	af00      	add	r7, sp, #0
 8012fc8:	6078      	str	r0, [r7, #4]
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	4618      	mov	r0, r3
 8012fce:	f7ff ffe8 	bl	8012fa2 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEENS0_10IndexBasedEfED1Ev>
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	4618      	mov	r0, r3
 8012fd6:	3708      	adds	r7, #8
 8012fd8:	46bd      	mov	sp, r7
 8012fda:	bd80      	pop	{r7, pc}

08012fdc <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEED1Ev>:
struct evaluator<const T>
 8012fdc:	b580      	push	{r7, lr}
 8012fde:	b082      	sub	sp, #8
 8012fe0:	af00      	add	r7, sp, #0
 8012fe2:	6078      	str	r0, [r7, #4]
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	4618      	mov	r0, r3
 8012fe8:	f7ff ffeb 	bl	8012fc2 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEED1Ev>
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	4618      	mov	r0, r3
 8012ff0:	3708      	adds	r7, #8
 8012ff2:	46bd      	mov	sp, r7
 8012ff4:	bd80      	pop	{r7, pc}

08012ff6 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>:
 8012ff6:	b580      	push	{r7, lr}
 8012ff8:	b082      	sub	sp, #8
 8012ffa:	af00      	add	r7, sp, #0
 8012ffc:	6078      	str	r0, [r7, #4]
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	4618      	mov	r0, r3
 8013002:	f7fb f9fa 	bl	800e3fa <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	4618      	mov	r0, r3
 801300a:	3708      	adds	r7, #8
 801300c:	46bd      	mov	sp, r7
 801300e:	bd80      	pop	{r7, pc}

08013010 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE4DataD1Ev>:
  struct Data
 8013010:	b580      	push	{r7, lr}
 8013012:	b082      	sub	sp, #8
 8013014:	af00      	add	r7, sp, #0
 8013016:	6078      	str	r0, [r7, #4]
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	3314      	adds	r3, #20
 801301c:	4618      	mov	r0, r3
 801301e:	f7ff ffea 	bl	8012ff6 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	3304      	adds	r3, #4
 8013026:	4618      	mov	r0, r3
 8013028:	f7ff ffd8 	bl	8012fdc <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEED1Ev>
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	4618      	mov	r0, r3
 8013030:	3708      	adds	r7, #8
 8013032:	46bd      	mov	sp, r7
 8013034:	bd80      	pop	{r7, pc}

08013036 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 8013036:	b580      	push	{r7, lr}
 8013038:	b082      	sub	sp, #8
 801303a:	af00      	add	r7, sp, #0
 801303c:	6078      	str	r0, [r7, #4]
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	4618      	mov	r0, r3
 8013042:	f7ff ffe5 	bl	8013010 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE4DataD1Ev>
 8013046:	6878      	ldr	r0, [r7, #4]
 8013048:	f000 f96a 	bl	8013320 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEED1Ev>
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	4618      	mov	r0, r3
 8013050:	3708      	adds	r7, #8
 8013052:	46bd      	mov	sp, r7
 8013054:	bd80      	pop	{r7, pc}

08013056 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 8013056:	b580      	push	{r7, lr}
 8013058:	b082      	sub	sp, #8
 801305a:	af00      	add	r7, sp, #0
 801305c:	6078      	str	r0, [r7, #4]
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	4618      	mov	r0, r3
 8013062:	f7ff ffe8 	bl	8013036 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffED1Ev>
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	4618      	mov	r0, r3
 801306a:	3708      	adds	r7, #8
 801306c:	46bd      	mov	sp, r7
 801306e:	bd80      	pop	{r7, pc}

08013070 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 8013070:	b580      	push	{r7, lr}
 8013072:	b082      	sub	sp, #8
 8013074:	af00      	add	r7, sp, #0
 8013076:	6078      	str	r0, [r7, #4]
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	4618      	mov	r0, r3
 801307c:	f7ff ffeb 	bl	8013056 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEED1Ev>
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	4618      	mov	r0, r3
 8013084:	3708      	adds	r7, #8
 8013086:	46bd      	mov	sp, r7
 8013088:	bd80      	pop	{r7, pc}
	...

0801308c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 801308c:	b580      	push	{r7, lr}
 801308e:	ed2d 8b02 	vpush	{d8}
 8013092:	b088      	sub	sp, #32
 8013094:	af00      	add	r7, sp, #0
 8013096:	6078      	str	r0, [r7, #4]
 8013098:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 801309a:	6878      	ldr	r0, [r7, #4]
 801309c:	f7ff fd50 	bl	8012b40 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE4rowsEv>
 80130a0:	4603      	mov	r3, r0
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	dd05      	ble.n	80130b2 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 80130a6:	6878      	ldr	r0, [r7, #4]
 80130a8:	f7ff ff2c 	bl	8012f04 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE4colsEv>
 80130ac:	4603      	mov	r3, r0
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	dc06      	bgt.n	80130c0 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 80130b2:	4b16      	ldr	r3, [pc, #88]	; (801310c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 80130b4:	4a16      	ldr	r2, [pc, #88]	; (8013110 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 80130b6:	f240 119b 	movw	r1, #411	; 0x19b
 80130ba:	4816      	ldr	r0, [pc, #88]	; (8013114 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 80130bc:	f009 ffba 	bl	801d034 <__assert_func>
 80130c0:	bf00      	nop
  ThisEvaluator thisEval(derived());
 80130c2:	6878      	ldr	r0, [r7, #4]
 80130c4:	f7ff ff2e 	bl	8012f24 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE7derivedEv>
 80130c8:	4602      	mov	r2, r0
 80130ca:	f107 0308 	add.w	r3, r7, #8
 80130ce:	4611      	mov	r1, r2
 80130d0:	4618      	mov	r0, r3
 80130d2:	f000 f916 	bl	8013302 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1ERKSG_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 80130d6:	6878      	ldr	r0, [r7, #4]
 80130d8:	f7ff ff24 	bl	8012f24 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE7derivedEv>
 80130dc:	4602      	mov	r2, r0
 80130de:	f107 0308 	add.w	r3, r7, #8
 80130e2:	6839      	ldr	r1, [r7, #0]
 80130e4:	4618      	mov	r0, r3
 80130e6:	f000 f931 	bl	801334c <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi0ELi2EE3runISJ_EEfRKSK_RKS3_RKT_>
 80130ea:	eeb0 8a40 	vmov.f32	s16, s0
 80130ee:	bf00      	nop
  ThisEvaluator thisEval(derived());
 80130f0:	f107 0308 	add.w	r3, r7, #8
 80130f4:	4618      	mov	r0, r3
 80130f6:	f7ff ffbb 	bl	8013070 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 80130fa:	eef0 7a48 	vmov.f32	s15, s16
}
 80130fe:	eeb0 0a67 	vmov.f32	s0, s15
 8013102:	3720      	adds	r7, #32
 8013104:	46bd      	mov	sp, r7
 8013106:	ecbd 8b02 	vpop	{d8}
 801310a:	bd80      	pop	{r7, pc}
 801310c:	08023f1c 	.word	0x08023f1c
 8013110:	0802850c 	.word	0x0802850c
 8013114:	08024128 	.word	0x08024128

08013118 <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 8013118:	b480      	push	{r7}
 801311a:	b083      	sub	sp, #12
 801311c:	af00      	add	r7, sp, #0
 801311e:	6078      	str	r0, [r7, #4]
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	681b      	ldr	r3, [r3, #0]
 8013124:	4618      	mov	r0, r3
 8013126:	370c      	adds	r7, #12
 8013128:	46bd      	mov	sp, r7
 801312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801312e:	4770      	bx	lr

08013130 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8013130:	b480      	push	{r7}
 8013132:	b083      	sub	sp, #12
 8013134:	af00      	add	r7, sp, #0
 8013136:	6078      	str	r0, [r7, #4]
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	4618      	mov	r0, r3
 801313c:	370c      	adds	r7, #12
 801313e:	46bd      	mov	sp, r7
 8013140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013144:	4770      	bx	lr

08013146 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS4_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8013146:	b580      	push	{r7, lr}
 8013148:	b082      	sub	sp, #8
 801314a:	af00      	add	r7, sp, #0
 801314c:	6078      	str	r0, [r7, #4]
 801314e:	6039      	str	r1, [r7, #0]
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	6839      	ldr	r1, [r7, #0]
 8013154:	4618      	mov	r0, r3
 8013156:	f7fd fe47 	bl	8010de8 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS3_>
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	4618      	mov	r0, r3
 801315e:	3708      	adds	r7, #8
 8013160:	46bd      	mov	sp, r7
 8013162:	bd80      	pop	{r7, pc}

08013164 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EEC1ERS4_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 8013164:	b5b0      	push	{r4, r5, r7, lr}
 8013166:	b084      	sub	sp, #16
 8013168:	af00      	add	r7, sp, #0
 801316a:	60f8      	str	r0, [r7, #12]
 801316c:	60b9      	str	r1, [r7, #8]
 801316e:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 8013170:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 8013172:	68bb      	ldr	r3, [r7, #8]
 8013174:	4618      	mov	r0, r3
 8013176:	f7fe fc93 	bl	8011aa0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4dataEv>
 801317a:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 801317c:	68b8      	ldr	r0, [r7, #8]
 801317e:	f7ff fc01 	bl	8012984 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11innerStrideEv>
 8013182:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	fb02 f303 	mul.w	r3, r2, r3
 801318a:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 801318c:	18e9      	adds	r1, r5, r3
 801318e:	2301      	movs	r3, #1
 8013190:	2201      	movs	r2, #1
 8013192:	4620      	mov	r0, r4
 8013194:	f000 f8f8 	bl	8013388 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii>
 8013198:	68fb      	ldr	r3, [r7, #12]
 801319a:	68ba      	ldr	r2, [r7, #8]
 801319c:	609a      	str	r2, [r3, #8]
 801319e:	68fb      	ldr	r3, [r7, #12]
 80131a0:	330c      	adds	r3, #12
 80131a2:	2100      	movs	r1, #0
 80131a4:	4618      	mov	r0, r3
 80131a6:	f7f9 fedd 	bl	800cf64 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
 80131aa:	68fb      	ldr	r3, [r7, #12]
 80131ac:	3310      	adds	r3, #16
 80131ae:	6879      	ldr	r1, [r7, #4]
 80131b0:	4618      	mov	r0, r3
 80131b2:	f7f9 fe63 	bl	800ce7c <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
      init();
 80131b6:	68f8      	ldr	r0, [r7, #12]
 80131b8:	f000 f924 	bl	8013404 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EE4initEv>
    }
 80131bc:	68fb      	ldr	r3, [r7, #12]
 80131be:	4618      	mov	r0, r3
 80131c0:	3710      	adds	r7, #16
 80131c2:	46bd      	mov	sp, r7
 80131c4:	bdb0      	pop	{r4, r5, r7, pc}

080131c6 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1ERKSI_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 80131c6:	b580      	push	{r7, lr}
 80131c8:	b082      	sub	sp, #8
 80131ca:	af00      	add	r7, sp, #0
 80131cc:	6078      	str	r0, [r7, #4]
 80131ce:	6039      	str	r1, [r7, #0]
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	6839      	ldr	r1, [r7, #0]
 80131d4:	4618      	mov	r0, r3
 80131d6:	f000 f925 	bl	8013424 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	4618      	mov	r0, r3
 80131de:	3708      	adds	r7, #8
 80131e0:	46bd      	mov	sp, r7
 80131e2:	bd80      	pop	{r7, pc}

080131e4 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEELi0ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 80131e4:	b580      	push	{r7, lr}
 80131e6:	b082      	sub	sp, #8
 80131e8:	af00      	add	r7, sp, #0
 80131ea:	6078      	str	r0, [r7, #4]
 80131ec:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 80131ee:	2200      	movs	r2, #0
 80131f0:	2100      	movs	r1, #0
 80131f2:	6878      	ldr	r0, [r7, #4]
 80131f4:	f000 f928 	bl	8013448 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE17coeffByOuterInnerEii>
 80131f8:	eef0 7a40 	vmov.f32	s15, s0
  }
 80131fc:	eeb0 0a67 	vmov.f32	s0, s15
 8013200:	3708      	adds	r7, #8
 8013202:	46bd      	mov	sp, r7
 8013204:	bd80      	pop	{r7, pc}

08013206 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi7ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8013206:	b580      	push	{r7, lr}
 8013208:	b082      	sub	sp, #8
 801320a:	af00      	add	r7, sp, #0
 801320c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 801320e:	2201      	movs	r2, #1
 8013210:	2102      	movs	r1, #2
 8013212:	6878      	ldr	r0, [r7, #4]
 8013214:	f7fd ff48 	bl	80110a8 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8013218:	6878      	ldr	r0, [r7, #4]
 801321a:	f000 f928 	bl	801346e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi8ELi9EE3runERSE_>
  }
 801321e:	bf00      	nop
 8013220:	3708      	adds	r7, #8
 8013222:	46bd      	mov	sp, r7
 8013224:	bd80      	pop	{r7, pc}

08013226 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8013226:	b580      	push	{r7, lr}
 8013228:	b082      	sub	sp, #8
 801322a:	af00      	add	r7, sp, #0
 801322c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 801322e:	2200      	movs	r2, #0
 8013230:	2102      	movs	r1, #2
 8013232:	6878      	ldr	r0, [r7, #4]
 8013234:	f7fe fbe1 	bl	80119fa <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8013238:	6878      	ldr	r0, [r7, #4]
 801323a:	f000 f928 	bl	801348e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSC_>
  }
 801323e:	bf00      	nop
 8013240:	3708      	adds	r7, #8
 8013242:	46bd      	mov	sp, r7
 8013244:	bd80      	pop	{r7, pc}

08013246 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERKS8_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 8013246:	b580      	push	{r7, lr}
 8013248:	b082      	sub	sp, #8
 801324a:	af00      	add	r7, sp, #0
 801324c:	6078      	str	r0, [r7, #4]
 801324e:	6039      	str	r1, [r7, #0]
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	6839      	ldr	r1, [r7, #0]
 8013254:	4618      	mov	r0, r3
 8013256:	f000 f92a 	bl	80134ae <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EEC1ERKNS_5BlockIS6_Li3ELi1ELb1EEE>
  }
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	4618      	mov	r0, r3
 801325e:	3708      	adds	r7, #8
 8013260:	46bd      	mov	sp, r7
 8013262:	bd80      	pop	{r7, pc}

08013264 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 8013264:	b480      	push	{r7}
 8013266:	b083      	sub	sp, #12
 8013268:	af00      	add	r7, sp, #0
 801326a:	6078      	str	r0, [r7, #4]
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	4618      	mov	r0, r3
 8013270:	370c      	adds	r7, #12
 8013272:	46bd      	mov	sp, r7
 8013274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013278:	4770      	bx	lr

0801327a <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 801327a:	b5b0      	push	{r4, r5, r7, lr}
 801327c:	b084      	sub	sp, #16
 801327e:	af00      	add	r7, sp, #0
 8013280:	60f8      	str	r0, [r7, #12]
 8013282:	60b9      	str	r1, [r7, #8]
 8013284:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 8013286:	68fb      	ldr	r3, [r7, #12]
 8013288:	681c      	ldr	r4, [r3, #0]
 801328a:	68f8      	ldr	r0, [r7, #12]
 801328c:	f000 f923 	bl	80134d6 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9colStrideEv>
 8013290:	4602      	mov	r2, r0
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	fb03 f502 	mul.w	r5, r3, r2
 8013298:	68f8      	ldr	r0, [r7, #12]
 801329a:	f000 f927 	bl	80134ec <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9rowStrideEv>
 801329e:	4602      	mov	r2, r0
 80132a0:	68bb      	ldr	r3, [r7, #8]
 80132a2:	fb02 f303 	mul.w	r3, r2, r3
 80132a6:	442b      	add	r3, r5
 80132a8:	009b      	lsls	r3, r3, #2
 80132aa:	4423      	add	r3, r4
 80132ac:	681b      	ldr	r3, [r3, #0]
 80132ae:	ee07 3a90 	vmov	s15, r3
  }
 80132b2:	eeb0 0a67 	vmov.f32	s0, s15
 80132b6:	3710      	adds	r7, #16
 80132b8:	46bd      	mov	sp, r7
 80132ba:	bdb0      	pop	{r4, r5, r7, pc}

080132bc <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80132bc:	b480      	push	{r7}
 80132be:	b083      	sub	sp, #12
 80132c0:	af00      	add	r7, sp, #0
 80132c2:	6078      	str	r0, [r7, #4]
    }
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	4618      	mov	r0, r3
 80132c8:	370c      	adds	r7, #12
 80132ca:	46bd      	mov	sp, r7
 80132cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132d0:	4770      	bx	lr

080132d2 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80132d2:	b480      	push	{r7}
 80132d4:	b083      	sub	sp, #12
 80132d6:	af00      	add	r7, sp, #0
 80132d8:	6078      	str	r0, [r7, #4]
    }
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	4618      	mov	r0, r3
 80132de:	370c      	adds	r7, #12
 80132e0:	46bd      	mov	sp, r7
 80132e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132e6:	4770      	bx	lr

080132e8 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 80132e8:	b580      	push	{r7, lr}
 80132ea:	b082      	sub	sp, #8
 80132ec:	af00      	add	r7, sp, #0
 80132ee:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	4618      	mov	r0, r3
 80132f4:	f7ff fdb9 	bl	8012e6a <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE4colsEv>
 80132f8:	4603      	mov	r3, r0
    }
 80132fa:	4618      	mov	r0, r3
 80132fc:	3708      	adds	r7, #8
 80132fe:	46bd      	mov	sp, r7
 8013300:	bd80      	pop	{r7, pc}

08013302 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1ERKSG_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 8013302:	b580      	push	{r7, lr}
 8013304:	b082      	sub	sp, #8
 8013306:	af00      	add	r7, sp, #0
 8013308:	6078      	str	r0, [r7, #4]
 801330a:	6039      	str	r1, [r7, #0]
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	6839      	ldr	r1, [r7, #0]
 8013310:	4618      	mov	r0, r3
 8013312:	f000 f8f6 	bl	8013502 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1ERKSG_>
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	4618      	mov	r0, r3
 801331a:	3708      	adds	r7, #8
 801331c:	46bd      	mov	sp, r7
 801331e:	bd80      	pop	{r7, pc}

08013320 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8013320:	b480      	push	{r7}
 8013322:	b083      	sub	sp, #12
 8013324:	af00      	add	r7, sp, #0
 8013326:	6078      	str	r0, [r7, #4]
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	4618      	mov	r0, r3
 801332c:	370c      	adds	r7, #12
 801332e:	46bd      	mov	sp, r7
 8013330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013334:	4770      	bx	lr

08013336 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEED1Ev>:
 8013336:	b480      	push	{r7}
 8013338:	b083      	sub	sp, #12
 801333a:	af00      	add	r7, sp, #0
 801333c:	6078      	str	r0, [r7, #4]
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	4618      	mov	r0, r3
 8013342:	370c      	adds	r7, #12
 8013344:	46bd      	mov	sp, r7
 8013346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801334a:	4770      	bx	lr

0801334c <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi0ELi2EE3runISJ_EEfRKSK_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 801334c:	b580      	push	{r7, lr}
 801334e:	b084      	sub	sp, #16
 8013350:	af00      	add	r7, sp, #0
 8013352:	60f8      	str	r0, [r7, #12]
 8013354:	60b9      	str	r1, [r7, #8]
 8013356:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 8013358:	68b9      	ldr	r1, [r7, #8]
 801335a:	68f8      	ldr	r0, [r7, #12]
 801335c:	f000 f8e0 	bl	8013520 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi0ELi3EE3runERKSK_RKS3_>
 8013360:	eef0 7a40 	vmov.f32	s15, s0
  }
 8013364:	eeb0 0a67 	vmov.f32	s0, s15
 8013368:	3710      	adds	r7, #16
 801336a:	46bd      	mov	sp, r7
 801336c:	bd80      	pop	{r7, pc}

0801336e <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1Ev>:
 801336e:	b580      	push	{r7, lr}
 8013370:	b082      	sub	sp, #8
 8013372:	af00      	add	r7, sp, #0
 8013374:	6078      	str	r0, [r7, #4]
 8013376:	6878      	ldr	r0, [r7, #4]
 8013378:	f000 f8f6 	bl	8013568 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1Ev>
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	4618      	mov	r0, r3
 8013380:	3708      	adds	r7, #8
 8013382:	46bd      	mov	sp, r7
 8013384:	bd80      	pop	{r7, pc}
	...

08013388 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 8013388:	b580      	push	{r7, lr}
 801338a:	b084      	sub	sp, #16
 801338c:	af00      	add	r7, sp, #0
 801338e:	60f8      	str	r0, [r7, #12]
 8013390:	60b9      	str	r1, [r7, #8]
 8013392:	607a      	str	r2, [r7, #4]
 8013394:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 8013396:	68f8      	ldr	r0, [r7, #12]
 8013398:	f7ff ffe9 	bl	801336e <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1Ev>
 801339c:	68fb      	ldr	r3, [r7, #12]
 801339e:	68ba      	ldr	r2, [r7, #8]
 80133a0:	601a      	str	r2, [r3, #0]
 80133a2:	68fb      	ldr	r3, [r7, #12]
 80133a4:	3304      	adds	r3, #4
 80133a6:	6879      	ldr	r1, [r7, #4]
 80133a8:	4618      	mov	r0, r3
 80133aa:	f7f2 fcf3 	bl	8005d94 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 80133ae:	68fb      	ldr	r3, [r7, #12]
 80133b0:	3305      	adds	r3, #5
 80133b2:	6839      	ldr	r1, [r7, #0]
 80133b4:	4618      	mov	r0, r3
 80133b6:	f7f2 fced 	bl	8005d94 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 80133ba:	68bb      	ldr	r3, [r7, #8]
 80133bc:	2b00      	cmp	r3, #0
 80133be:	d011      	beq.n	80133e4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	2b00      	cmp	r3, #0
 80133c4:	db08      	blt.n	80133d8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	2b01      	cmp	r3, #1
 80133ca:	d105      	bne.n	80133d8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 80133cc:	683b      	ldr	r3, [r7, #0]
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	db02      	blt.n	80133d8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 80133d2:	683b      	ldr	r3, [r7, #0]
 80133d4:	2b01      	cmp	r3, #1
 80133d6:	d005      	beq.n	80133e4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 80133d8:	4b07      	ldr	r3, [pc, #28]	; (80133f8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x70>)
 80133da:	4a08      	ldr	r2, [pc, #32]	; (80133fc <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x74>)
 80133dc:	21b0      	movs	r1, #176	; 0xb0
 80133de:	4808      	ldr	r0, [pc, #32]	; (8013400 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x78>)
 80133e0:	f009 fe28 	bl	801d034 <__assert_func>
      checkSanity<Derived>();
 80133e4:	2100      	movs	r1, #0
 80133e6:	68f8      	ldr	r0, [r7, #12]
 80133e8:	f000 f8c9 	bl	801357e <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 80133ec:	68fb      	ldr	r3, [r7, #12]
 80133ee:	4618      	mov	r0, r3
 80133f0:	3710      	adds	r7, #16
 80133f2:	46bd      	mov	sp, r7
 80133f4:	bd80      	pop	{r7, pc}
 80133f6:	bf00      	nop
 80133f8:	080255c0 	.word	0x080255c0
 80133fc:	080286d4 	.word	0x080286d4
 8013400:	08025770 	.word	0x08025770

08013404 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EE4initEv>:
    void init()
 8013404:	b580      	push	{r7, lr}
 8013406:	b082      	sub	sp, #8
 8013408:	af00      	add	r7, sp, #0
 801340a:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	689b      	ldr	r3, [r3, #8]
 8013410:	4618      	mov	r0, r3
 8013412:	f7fe fd73 	bl	8011efc <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11outerStrideEv>
 8013416:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	615a      	str	r2, [r3, #20]
    }
 801341c:	bf00      	nop
 801341e:	3708      	adds	r7, #8
 8013420:	46bd      	mov	sp, r7
 8013422:	bd80      	pop	{r7, pc}

08013424 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 8013424:	b580      	push	{r7, lr}
 8013426:	b082      	sub	sp, #8
 8013428:	af00      	add	r7, sp, #0
 801342a:	6078      	str	r0, [r7, #4]
 801342c:	6039      	str	r1, [r7, #0]
 801342e:	6878      	ldr	r0, [r7, #4]
 8013430:	f000 f8b0 	bl	8013594 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1Ev>
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	6839      	ldr	r1, [r7, #0]
 8013438:	4618      	mov	r0, r3
 801343a:	f000 f8b6 	bl	80135aa <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>
  }
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	4618      	mov	r0, r3
 8013442:	3708      	adds	r7, #8
 8013444:	46bd      	mov	sp, r7
 8013446:	bd80      	pop	{r7, pc}

08013448 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 8013448:	b580      	push	{r7, lr}
 801344a:	b084      	sub	sp, #16
 801344c:	af00      	add	r7, sp, #0
 801344e:	60f8      	str	r0, [r7, #12]
 8013450:	60b9      	str	r1, [r7, #8]
 8013452:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 8013454:	68fb      	ldr	r3, [r7, #12]
 8013456:	687a      	ldr	r2, [r7, #4]
 8013458:	68b9      	ldr	r1, [r7, #8]
 801345a:	4618      	mov	r0, r3
 801345c:	f000 f8cd 	bl	80135fa <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE5coeffEii>
 8013460:	eef0 7a40 	vmov.f32	s15, s0
 8013464:	eeb0 0a67 	vmov.f32	s0, s15
 8013468:	3710      	adds	r7, #16
 801346a:	46bd      	mov	sp, r7
 801346c:	bd80      	pop	{r7, pc}

0801346e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi8ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 801346e:	b580      	push	{r7, lr}
 8013470:	b082      	sub	sp, #8
 8013472:	af00      	add	r7, sp, #0
 8013474:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8013476:	2202      	movs	r2, #2
 8013478:	2102      	movs	r1, #2
 801347a:	6878      	ldr	r0, [r7, #4]
 801347c:	f7fd fe14 	bl	80110a8 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8013480:	6878      	ldr	r0, [r7, #4]
 8013482:	f000 f8ea 	bl	801365a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi9ELi9EE3runERSE_>
  }
 8013486:	bf00      	nop
 8013488:	3708      	adds	r7, #8
 801348a:	46bd      	mov	sp, r7
 801348c:	bd80      	pop	{r7, pc}

0801348e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 801348e:	b580      	push	{r7, lr}
 8013490:	b082      	sub	sp, #8
 8013492:	af00      	add	r7, sp, #0
 8013494:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8013496:	2201      	movs	r2, #1
 8013498:	2102      	movs	r1, #2
 801349a:	6878      	ldr	r0, [r7, #4]
 801349c:	f7fe faad 	bl	80119fa <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80134a0:	6878      	ldr	r0, [r7, #4]
 80134a2:	f000 f8e4 	bl	801366e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSC_>
  }
 80134a6:	bf00      	nop
 80134a8:	3708      	adds	r7, #8
 80134aa:	46bd      	mov	sp, r7
 80134ac:	bd80      	pop	{r7, pc}

080134ae <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EEC1ERKNS_5BlockIS6_Li3ELi1ELb1EEE>:
  explicit block_evaluator(const XprType& block)
 80134ae:	b580      	push	{r7, lr}
 80134b0:	b082      	sub	sp, #8
 80134b2:	af00      	add	r7, sp, #0
 80134b4:	6078      	str	r0, [r7, #4]
 80134b6:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	6839      	ldr	r1, [r7, #0]
 80134bc:	4618      	mov	r0, r3
 80134be:	f000 f8e6 	bl	801368e <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS8_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 80134c2:	683b      	ldr	r3, [r7, #0]
 80134c4:	4618      	mov	r0, r3
 80134c6:	f000 f90c 	bl	80136e2 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE4dataEv>
 80134ca:	bf00      	nop
  }
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	4618      	mov	r0, r3
 80134d0:	3708      	adds	r7, #8
 80134d2:	46bd      	mov	sp, r7
 80134d4:	bd80      	pop	{r7, pc}

080134d6 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 80134d6:	b580      	push	{r7, lr}
 80134d8:	b082      	sub	sp, #8
 80134da:	af00      	add	r7, sp, #0
 80134dc:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 80134de:	f7f2 fc7e 	bl	8005dde <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 80134e2:	4603      	mov	r3, r0
  }
 80134e4:	4618      	mov	r0, r3
 80134e6:	3708      	adds	r7, #8
 80134e8:	46bd      	mov	sp, r7
 80134ea:	bd80      	pop	{r7, pc}

080134ec <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 80134ec:	b580      	push	{r7, lr}
 80134ee:	b082      	sub	sp, #8
 80134f0:	af00      	add	r7, sp, #0
 80134f2:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 80134f4:	f7f2 fc7b 	bl	8005dee <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 80134f8:	4603      	mov	r3, r0
  }
 80134fa:	4618      	mov	r0, r3
 80134fc:	3708      	adds	r7, #8
 80134fe:	46bd      	mov	sp, r7
 8013500:	bd80      	pop	{r7, pc}

08013502 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1ERKSG_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8013502:	b580      	push	{r7, lr}
 8013504:	b082      	sub	sp, #8
 8013506:	af00      	add	r7, sp, #0
 8013508:	6078      	str	r0, [r7, #4]
 801350a:	6039      	str	r1, [r7, #0]
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	6839      	ldr	r1, [r7, #0]
 8013510:	4618      	mov	r0, r3
 8013512:	f000 f8f2 	bl	80136fa <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffEC1ERKSG_>
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	4618      	mov	r0, r3
 801351a:	3708      	adds	r7, #8
 801351c:	46bd      	mov	sp, r7
 801351e:	bd80      	pop	{r7, pc}

08013520 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi0ELi3EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 8013520:	b580      	push	{r7, lr}
 8013522:	b084      	sub	sp, #16
 8013524:	af00      	add	r7, sp, #0
 8013526:	6078      	str	r0, [r7, #4]
 8013528:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 801352a:	6839      	ldr	r1, [r7, #0]
 801352c:	6878      	ldr	r0, [r7, #4]
 801352e:	f000 f8f6 	bl	801371e <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi0ELi1EE3runERKSK_RKS3_>
 8013532:	eef0 7a40 	vmov.f32	s15, s0
 8013536:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 801353a:	6839      	ldr	r1, [r7, #0]
 801353c:	6878      	ldr	r0, [r7, #4]
 801353e:	f000 f8ff 	bl	8013740 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi1ELi2EE3runERKSK_RKS3_>
 8013542:	eef0 7a40 	vmov.f32	s15, s0
 8013546:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 801354a:	f107 020c 	add.w	r2, r7, #12
 801354e:	f107 0308 	add.w	r3, r7, #8
 8013552:	4619      	mov	r1, r3
 8013554:	6838      	ldr	r0, [r7, #0]
 8013556:	f7f5 f808 	bl	800856a <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 801355a:	eef0 7a40 	vmov.f32	s15, s0
  }
 801355e:	eeb0 0a67 	vmov.f32	s0, s15
 8013562:	3710      	adds	r7, #16
 8013564:	46bd      	mov	sp, r7
 8013566:	bd80      	pop	{r7, pc}

08013568 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8013568:	b480      	push	{r7}
 801356a:	b083      	sub	sp, #12
 801356c:	af00      	add	r7, sp, #0
 801356e:	6078      	str	r0, [r7, #4]
    }
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	4618      	mov	r0, r3
 8013574:	370c      	adds	r7, #12
 8013576:	46bd      	mov	sp, r7
 8013578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801357c:	4770      	bx	lr

0801357e <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 801357e:	b480      	push	{r7}
 8013580:	b083      	sub	sp, #12
 8013582:	af00      	add	r7, sp, #0
 8013584:	6078      	str	r0, [r7, #4]
 8013586:	6039      	str	r1, [r7, #0]
    {}
 8013588:	bf00      	nop
 801358a:	370c      	adds	r7, #12
 801358c:	46bd      	mov	sp, r7
 801358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013592:	4770      	bx	lr

08013594 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8013594:	b480      	push	{r7}
 8013596:	b083      	sub	sp, #12
 8013598:	af00      	add	r7, sp, #0
 801359a:	6078      	str	r0, [r7, #4]
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	4618      	mov	r0, r3
 80135a0:	370c      	adds	r7, #12
 80135a2:	46bd      	mov	sp, r7
 80135a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135a8:	4770      	bx	lr

080135aa <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 80135aa:	b590      	push	{r4, r7, lr}
 80135ac:	b083      	sub	sp, #12
 80135ae:	af00      	add	r7, sp, #0
 80135b0:	6078      	str	r0, [r7, #4]
 80135b2:	6039      	str	r1, [r7, #0]
 80135b4:	687c      	ldr	r4, [r7, #4]
 80135b6:	6838      	ldr	r0, [r7, #0]
 80135b8:	f000 f8e6 	bl	8013788 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE7functorEv>
 80135bc:	4603      	mov	r3, r0
 80135be:	4619      	mov	r1, r3
 80135c0:	4620      	mov	r0, r4
 80135c2:	f7f1 f96d 	bl	80048a0 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	1d1c      	adds	r4, r3, #4
 80135ca:	6838      	ldr	r0, [r7, #0]
 80135cc:	f000 f8e8 	bl	80137a0 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE3lhsEv>
 80135d0:	4603      	mov	r3, r0
 80135d2:	4619      	mov	r1, r3
 80135d4:	4620      	mov	r0, r4
 80135d6:	f7fa ffac 	bl	800e532 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1ERSA_>
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	f103 040c 	add.w	r4, r3, #12
 80135e0:	6838      	ldr	r0, [r7, #0]
 80135e2:	f000 f8e8 	bl	80137b6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE3rhsEv>
 80135e6:	4603      	mov	r3, r0
 80135e8:	4619      	mov	r1, r3
 80135ea:	4620      	mov	r0, r4
 80135ec:	f000 f8ef 	bl	80137ce <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERS7_>
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	4618      	mov	r0, r3
 80135f4:	370c      	adds	r7, #12
 80135f6:	46bd      	mov	sp, r7
 80135f8:	bd90      	pop	{r4, r7, pc}

080135fa <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 80135fa:	b590      	push	{r4, r7, lr}
 80135fc:	b087      	sub	sp, #28
 80135fe:	af00      	add	r7, sp, #0
 8013600:	60f8      	str	r0, [r7, #12]
 8013602:	60b9      	str	r1, [r7, #8]
 8013604:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 8013606:	68fb      	ldr	r3, [r7, #12]
 8013608:	4618      	mov	r0, r3
 801360a:	f000 f8ef 	bl	80137ec <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>
 801360e:	4604      	mov	r4, r0
 8013610:	68fb      	ldr	r3, [r7, #12]
 8013612:	3304      	adds	r3, #4
 8013614:	687a      	ldr	r2, [r7, #4]
 8013616:	68b9      	ldr	r1, [r7, #8]
 8013618:	4618      	mov	r0, r3
 801361a:	f7fa ffb3 	bl	800e584 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEENS0_10IndexBasedEfE5coeffEii>
 801361e:	eef0 7a40 	vmov.f32	s15, s0
 8013622:	edc7 7a04 	vstr	s15, [r7, #16]
 8013626:	68fb      	ldr	r3, [r7, #12]
 8013628:	330c      	adds	r3, #12
 801362a:	687a      	ldr	r2, [r7, #4]
 801362c:	68b9      	ldr	r1, [r7, #8]
 801362e:	4618      	mov	r0, r3
 8013630:	f000 f8e7 	bl	8013802 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEE5coeffEii>
 8013634:	eef0 7a40 	vmov.f32	s15, s0
 8013638:	edc7 7a05 	vstr	s15, [r7, #20]
 801363c:	f107 0214 	add.w	r2, r7, #20
 8013640:	f107 0310 	add.w	r3, r7, #16
 8013644:	4619      	mov	r1, r3
 8013646:	4620      	mov	r0, r4
 8013648:	f7fa ffd0 	bl	800e5ec <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 801364c:	eef0 7a40 	vmov.f32	s15, s0
  }
 8013650:	eeb0 0a67 	vmov.f32	s0, s15
 8013654:	371c      	adds	r7, #28
 8013656:	46bd      	mov	sp, r7
 8013658:	bd90      	pop	{r4, r7, pc}

0801365a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi9ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 801365a:	b480      	push	{r7}
 801365c:	b083      	sub	sp, #12
 801365e:	af00      	add	r7, sp, #0
 8013660:	6078      	str	r0, [r7, #4]
 8013662:	bf00      	nop
 8013664:	370c      	adds	r7, #12
 8013666:	46bd      	mov	sp, r7
 8013668:	f85d 7b04 	ldr.w	r7, [sp], #4
 801366c:	4770      	bx	lr

0801366e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 801366e:	b580      	push	{r7, lr}
 8013670:	b082      	sub	sp, #8
 8013672:	af00      	add	r7, sp, #0
 8013674:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8013676:	2202      	movs	r2, #2
 8013678:	2102      	movs	r1, #2
 801367a:	6878      	ldr	r0, [r7, #4]
 801367c:	f7fe f9bd 	bl	80119fa <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8013680:	6878      	ldr	r0, [r7, #4]
 8013682:	f000 f8df 	bl	8013844 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSC_>
  }
 8013686:	bf00      	nop
 8013688:	3708      	adds	r7, #8
 801368a:	46bd      	mov	sp, r7
 801368c:	bd80      	pop	{r7, pc}

0801368e <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS8_>:
  explicit mapbase_evaluator(const XprType& map)
 801368e:	b590      	push	{r4, r7, lr}
 8013690:	b083      	sub	sp, #12
 8013692:	af00      	add	r7, sp, #0
 8013694:	6078      	str	r0, [r7, #4]
 8013696:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 8013698:	6878      	ldr	r0, [r7, #4]
 801369a:	f000 f8f9 	bl	8013890 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 801369e:	683b      	ldr	r3, [r7, #0]
 80136a0:	4618      	mov	r0, r3
 80136a2:	f000 f81e 	bl	80136e2 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE4dataEv>
 80136a6:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	601a      	str	r2, [r3, #0]
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	1d1c      	adds	r4, r3, #4
 80136b0:	683b      	ldr	r3, [r7, #0]
 80136b2:	4618      	mov	r0, r3
 80136b4:	f000 f8d0 	bl	8013858 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EE11innerStrideEv>
 80136b8:	4603      	mov	r3, r0
 80136ba:	4619      	mov	r1, r3
 80136bc:	4620      	mov	r0, r4
 80136be:	f7f2 fb69 	bl	8005d94 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	1d5c      	adds	r4, r3, #5
 80136c6:	683b      	ldr	r3, [r7, #0]
 80136c8:	4618      	mov	r0, r3
 80136ca:	f000 f8d3 	bl	8013874 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EE11outerStrideEv>
 80136ce:	4603      	mov	r3, r0
 80136d0:	4619      	mov	r1, r3
 80136d2:	4620      	mov	r0, r4
 80136d4:	f7f2 fb44 	bl	8005d60 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	4618      	mov	r0, r3
 80136dc:	370c      	adds	r7, #12
 80136de:	46bd      	mov	sp, r7
 80136e0:	bd90      	pop	{r4, r7, pc}

080136e2 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC inline const Scalar* data() const { return m_data; }
 80136e2:	b480      	push	{r7}
 80136e4:	b083      	sub	sp, #12
 80136e6:	af00      	add	r7, sp, #0
 80136e8:	6078      	str	r0, [r7, #4]
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	681b      	ldr	r3, [r3, #0]
 80136ee:	4618      	mov	r0, r3
 80136f0:	370c      	adds	r7, #12
 80136f2:	46bd      	mov	sp, r7
 80136f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136f8:	4770      	bx	lr

080136fa <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffEC1ERKSG_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 80136fa:	b580      	push	{r7, lr}
 80136fc:	b082      	sub	sp, #8
 80136fe:	af00      	add	r7, sp, #0
 8013700:	6078      	str	r0, [r7, #4]
 8013702:	6039      	str	r1, [r7, #0]
 8013704:	6878      	ldr	r0, [r7, #4]
 8013706:	f000 f8ce 	bl	80138a6 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1Ev>
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	6839      	ldr	r1, [r7, #0]
 801370e:	4618      	mov	r0, r3
 8013710:	f000 f8d4 	bl	80138bc <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE4DataC1ERKSG_>
  }
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	4618      	mov	r0, r3
 8013718:	3708      	adds	r7, #8
 801371a:	46bd      	mov	sp, r7
 801371c:	bd80      	pop	{r7, pc}

0801371e <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi0ELi1EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 801371e:	b580      	push	{r7, lr}
 8013720:	b082      	sub	sp, #8
 8013722:	af00      	add	r7, sp, #0
 8013724:	6078      	str	r0, [r7, #4]
 8013726:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8013728:	2200      	movs	r2, #0
 801372a:	2100      	movs	r1, #0
 801372c:	6878      	ldr	r0, [r7, #4]
 801372e:	f000 f8ed 	bl	801390c <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE17coeffByOuterInnerEii>
 8013732:	eef0 7a40 	vmov.f32	s15, s0
  }
 8013736:	eeb0 0a67 	vmov.f32	s0, s15
 801373a:	3708      	adds	r7, #8
 801373c:	46bd      	mov	sp, r7
 801373e:	bd80      	pop	{r7, pc}

08013740 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi1ELi2EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 8013740:	b580      	push	{r7, lr}
 8013742:	b084      	sub	sp, #16
 8013744:	af00      	add	r7, sp, #0
 8013746:	6078      	str	r0, [r7, #4]
 8013748:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 801374a:	6839      	ldr	r1, [r7, #0]
 801374c:	6878      	ldr	r0, [r7, #4]
 801374e:	f000 f8f0 	bl	8013932 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi1ELi1EE3runERKSK_RKS3_>
 8013752:	eef0 7a40 	vmov.f32	s15, s0
 8013756:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 801375a:	6839      	ldr	r1, [r7, #0]
 801375c:	6878      	ldr	r0, [r7, #4]
 801375e:	f000 f8f9 	bl	8013954 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi2ELi1EE3runERKSK_RKS3_>
 8013762:	eef0 7a40 	vmov.f32	s15, s0
 8013766:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 801376a:	f107 020c 	add.w	r2, r7, #12
 801376e:	f107 0308 	add.w	r3, r7, #8
 8013772:	4619      	mov	r1, r3
 8013774:	6838      	ldr	r0, [r7, #0]
 8013776:	f7f4 fef8 	bl	800856a <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 801377a:	eef0 7a40 	vmov.f32	s15, s0
  }
 801377e:	eeb0 0a67 	vmov.f32	s0, s15
 8013782:	3710      	adds	r7, #16
 8013784:	46bd      	mov	sp, r7
 8013786:	bd80      	pop	{r7, pc}

08013788 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 8013788:	b480      	push	{r7}
 801378a:	b083      	sub	sp, #12
 801378c:	af00      	add	r7, sp, #0
 801378e:	6078      	str	r0, [r7, #4]
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	3330      	adds	r3, #48	; 0x30
 8013794:	4618      	mov	r0, r3
 8013796:	370c      	adds	r7, #12
 8013798:	46bd      	mov	sp, r7
 801379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801379e:	4770      	bx	lr

080137a0 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 80137a0:	b480      	push	{r7}
 80137a2:	b083      	sub	sp, #12
 80137a4:	af00      	add	r7, sp, #0
 80137a6:	6078      	str	r0, [r7, #4]
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	4618      	mov	r0, r3
 80137ac:	370c      	adds	r7, #12
 80137ae:	46bd      	mov	sp, r7
 80137b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137b4:	4770      	bx	lr

080137b6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 80137b6:	b480      	push	{r7}
 80137b8:	b083      	sub	sp, #12
 80137ba:	af00      	add	r7, sp, #0
 80137bc:	6078      	str	r0, [r7, #4]
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	3318      	adds	r3, #24
 80137c2:	4618      	mov	r0, r3
 80137c4:	370c      	adds	r7, #12
 80137c6:	46bd      	mov	sp, r7
 80137c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137cc:	4770      	bx	lr

080137ce <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 80137ce:	b580      	push	{r7, lr}
 80137d0:	b082      	sub	sp, #8
 80137d2:	af00      	add	r7, sp, #0
 80137d4:	6078      	str	r0, [r7, #4]
 80137d6:	6039      	str	r1, [r7, #0]
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	6839      	ldr	r1, [r7, #0]
 80137dc:	4618      	mov	r0, r3
 80137de:	f000 f8ca 	bl	8013976 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERKS6_>
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	4618      	mov	r0, r3
 80137e6:	3708      	adds	r7, #8
 80137e8:	46bd      	mov	sp, r7
 80137ea:	bd80      	pop	{r7, pc}

080137ec <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 80137ec:	b480      	push	{r7}
 80137ee:	b083      	sub	sp, #12
 80137f0:	af00      	add	r7, sp, #0
 80137f2:	6078      	str	r0, [r7, #4]
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	4618      	mov	r0, r3
 80137f8:	370c      	adds	r7, #12
 80137fa:	46bd      	mov	sp, r7
 80137fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013800:	4770      	bx	lr

08013802 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8013802:	b5b0      	push	{r4, r5, r7, lr}
 8013804:	b084      	sub	sp, #16
 8013806:	af00      	add	r7, sp, #0
 8013808:	60f8      	str	r0, [r7, #12]
 801380a:	60b9      	str	r1, [r7, #8]
 801380c:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 801380e:	68fb      	ldr	r3, [r7, #12]
 8013810:	681c      	ldr	r4, [r3, #0]
 8013812:	68f8      	ldr	r0, [r7, #12]
 8013814:	f000 f8be 	bl	8013994 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEE9colStrideEv>
 8013818:	4602      	mov	r2, r0
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	fb03 f502 	mul.w	r5, r3, r2
 8013820:	68f8      	ldr	r0, [r7, #12]
 8013822:	f000 f8c2 	bl	80139aa <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEE9rowStrideEv>
 8013826:	4602      	mov	r2, r0
 8013828:	68bb      	ldr	r3, [r7, #8]
 801382a:	fb02 f303 	mul.w	r3, r2, r3
 801382e:	442b      	add	r3, r5
 8013830:	009b      	lsls	r3, r3, #2
 8013832:	4423      	add	r3, r4
 8013834:	681b      	ldr	r3, [r3, #0]
 8013836:	ee07 3a90 	vmov	s15, r3
  }
 801383a:	eeb0 0a67 	vmov.f32	s0, s15
 801383e:	3710      	adds	r7, #16
 8013840:	46bd      	mov	sp, r7
 8013842:	bdb0      	pop	{r4, r5, r7, pc}

08013844 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 8013844:	b480      	push	{r7}
 8013846:	b083      	sub	sp, #12
 8013848:	af00      	add	r7, sp, #0
 801384a:	6078      	str	r0, [r7, #4]
 801384c:	bf00      	nop
 801384e:	370c      	adds	r7, #12
 8013850:	46bd      	mov	sp, r7
 8013852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013856:	4770      	bx	lr

08013858 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 8013858:	b580      	push	{r7, lr}
 801385a:	b082      	sub	sp, #8
 801385c:	af00      	add	r7, sp, #0
 801385e:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	3308      	adds	r3, #8
 8013864:	4618      	mov	r0, r3
 8013866:	f7fe fd4e 	bl	8012306 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE11innerStrideEv>
 801386a:	4603      	mov	r3, r0
    }
 801386c:	4618      	mov	r0, r3
 801386e:	3708      	adds	r7, #8
 8013870:	46bd      	mov	sp, r7
 8013872:	bd80      	pop	{r7, pc}

08013874 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 8013874:	b580      	push	{r7, lr}
 8013876:	b082      	sub	sp, #8
 8013878:	af00      	add	r7, sp, #0
 801387a:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	3308      	adds	r3, #8
 8013880:	4618      	mov	r0, r3
 8013882:	f7fe fd54 	bl	801232e <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE11outerStrideEv>
 8013886:	4603      	mov	r3, r0
    }
 8013888:	4618      	mov	r0, r3
 801388a:	3708      	adds	r7, #8
 801388c:	46bd      	mov	sp, r7
 801388e:	bd80      	pop	{r7, pc}

08013890 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8013890:	b480      	push	{r7}
 8013892:	b083      	sub	sp, #12
 8013894:	af00      	add	r7, sp, #0
 8013896:	6078      	str	r0, [r7, #4]
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	4618      	mov	r0, r3
 801389c:	370c      	adds	r7, #12
 801389e:	46bd      	mov	sp, r7
 80138a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138a4:	4770      	bx	lr

080138a6 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1Ev>:
 80138a6:	b480      	push	{r7}
 80138a8:	b083      	sub	sp, #12
 80138aa:	af00      	add	r7, sp, #0
 80138ac:	6078      	str	r0, [r7, #4]
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	4618      	mov	r0, r3
 80138b2:	370c      	adds	r7, #12
 80138b4:	46bd      	mov	sp, r7
 80138b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138ba:	4770      	bx	lr

080138bc <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE4DataC1ERKSG_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 80138bc:	b590      	push	{r4, r7, lr}
 80138be:	b083      	sub	sp, #12
 80138c0:	af00      	add	r7, sp, #0
 80138c2:	6078      	str	r0, [r7, #4]
 80138c4:	6039      	str	r1, [r7, #0]
 80138c6:	687c      	ldr	r4, [r7, #4]
 80138c8:	6838      	ldr	r0, [r7, #0]
 80138ca:	f000 f879 	bl	80139c0 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE7functorEv>
 80138ce:	4603      	mov	r3, r0
 80138d0:	4619      	mov	r1, r3
 80138d2:	4620      	mov	r0, r4
 80138d4:	f7f0 ffe4 	bl	80048a0 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	1d1c      	adds	r4, r3, #4
 80138dc:	6838      	ldr	r0, [r7, #0]
 80138de:	f000 f87b 	bl	80139d8 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE3lhsEv>
 80138e2:	4603      	mov	r3, r0
 80138e4:	4619      	mov	r1, r3
 80138e6:	4620      	mov	r0, r4
 80138e8:	f000 f88d 	bl	8013a06 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1ERSA_>
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	f103 0414 	add.w	r4, r3, #20
 80138f2:	6838      	ldr	r0, [r7, #0]
 80138f4:	f000 f87b 	bl	80139ee <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE3rhsEv>
 80138f8:	4603      	mov	r3, r0
 80138fa:	4619      	mov	r1, r3
 80138fc:	4620      	mov	r0, r4
 80138fe:	f000 f891 	bl	8013a24 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERS6_>
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	4618      	mov	r0, r3
 8013906:	370c      	adds	r7, #12
 8013908:	46bd      	mov	sp, r7
 801390a:	bd90      	pop	{r4, r7, pc}

0801390c <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 801390c:	b580      	push	{r7, lr}
 801390e:	b084      	sub	sp, #16
 8013910:	af00      	add	r7, sp, #0
 8013912:	60f8      	str	r0, [r7, #12]
 8013914:	60b9      	str	r1, [r7, #8]
 8013916:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 8013918:	68fb      	ldr	r3, [r7, #12]
 801391a:	68ba      	ldr	r2, [r7, #8]
 801391c:	6879      	ldr	r1, [r7, #4]
 801391e:	4618      	mov	r0, r3
 8013920:	f000 f88f 	bl	8013a42 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE5coeffEii>
 8013924:	eef0 7a40 	vmov.f32	s15, s0
 8013928:	eeb0 0a67 	vmov.f32	s0, s15
 801392c:	3710      	adds	r7, #16
 801392e:	46bd      	mov	sp, r7
 8013930:	bd80      	pop	{r7, pc}

08013932 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi1ELi1EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8013932:	b580      	push	{r7, lr}
 8013934:	b082      	sub	sp, #8
 8013936:	af00      	add	r7, sp, #0
 8013938:	6078      	str	r0, [r7, #4]
 801393a:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 801393c:	2201      	movs	r2, #1
 801393e:	2100      	movs	r1, #0
 8013940:	6878      	ldr	r0, [r7, #4]
 8013942:	f7ff ffe3 	bl	801390c <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE17coeffByOuterInnerEii>
 8013946:	eef0 7a40 	vmov.f32	s15, s0
  }
 801394a:	eeb0 0a67 	vmov.f32	s0, s15
 801394e:	3708      	adds	r7, #8
 8013950:	46bd      	mov	sp, r7
 8013952:	bd80      	pop	{r7, pc}

08013954 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi2ELi1EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8013954:	b580      	push	{r7, lr}
 8013956:	b082      	sub	sp, #8
 8013958:	af00      	add	r7, sp, #0
 801395a:	6078      	str	r0, [r7, #4]
 801395c:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 801395e:	2202      	movs	r2, #2
 8013960:	2100      	movs	r1, #0
 8013962:	6878      	ldr	r0, [r7, #4]
 8013964:	f7ff ffd2 	bl	801390c <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE17coeffByOuterInnerEii>
 8013968:	eef0 7a40 	vmov.f32	s15, s0
  }
 801396c:	eeb0 0a67 	vmov.f32	s0, s15
 8013970:	3708      	adds	r7, #8
 8013972:	46bd      	mov	sp, r7
 8013974:	bd80      	pop	{r7, pc}

08013976 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 8013976:	b580      	push	{r7, lr}
 8013978:	b082      	sub	sp, #8
 801397a:	af00      	add	r7, sp, #0
 801397c:	6078      	str	r0, [r7, #4]
 801397e:	6039      	str	r1, [r7, #0]
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	6839      	ldr	r1, [r7, #0]
 8013984:	4618      	mov	r0, r3
 8013986:	f000 f887 	bl	8013a98 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EEC1ERKNS_5BlockIS4_Li1ELi1ELb0EEE>
  }
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	4618      	mov	r0, r3
 801398e:	3708      	adds	r7, #8
 8013990:	46bd      	mov	sp, r7
 8013992:	bd80      	pop	{r7, pc}

08013994 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 8013994:	b580      	push	{r7, lr}
 8013996:	b082      	sub	sp, #8
 8013998:	af00      	add	r7, sp, #0
 801399a:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 801399c:	f7f2 fa27 	bl	8005dee <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 80139a0:	4603      	mov	r3, r0
  }
 80139a2:	4618      	mov	r0, r3
 80139a4:	3708      	adds	r7, #8
 80139a6:	46bd      	mov	sp, r7
 80139a8:	bd80      	pop	{r7, pc}

080139aa <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 80139aa:	b580      	push	{r7, lr}
 80139ac:	b082      	sub	sp, #8
 80139ae:	af00      	add	r7, sp, #0
 80139b0:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 80139b2:	f7f2 fa14 	bl	8005dde <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 80139b6:	4603      	mov	r3, r0
  }
 80139b8:	4618      	mov	r0, r3
 80139ba:	3708      	adds	r7, #8
 80139bc:	46bd      	mov	sp, r7
 80139be:	bd80      	pop	{r7, pc}

080139c0 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 80139c0:	b480      	push	{r7}
 80139c2:	b083      	sub	sp, #12
 80139c4:	af00      	add	r7, sp, #0
 80139c6:	6078      	str	r0, [r7, #4]
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	330c      	adds	r3, #12
 80139cc:	4618      	mov	r0, r3
 80139ce:	370c      	adds	r7, #12
 80139d0:	46bd      	mov	sp, r7
 80139d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139d6:	4770      	bx	lr

080139d8 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 80139d8:	b480      	push	{r7}
 80139da:	b083      	sub	sp, #12
 80139dc:	af00      	add	r7, sp, #0
 80139de:	6078      	str	r0, [r7, #4]
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	4618      	mov	r0, r3
 80139e4:	370c      	adds	r7, #12
 80139e6:	46bd      	mov	sp, r7
 80139e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ec:	4770      	bx	lr

080139ee <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 80139ee:	b480      	push	{r7}
 80139f0:	b083      	sub	sp, #12
 80139f2:	af00      	add	r7, sp, #0
 80139f4:	6078      	str	r0, [r7, #4]
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	3308      	adds	r3, #8
 80139fa:	4618      	mov	r0, r3
 80139fc:	370c      	adds	r7, #12
 80139fe:	46bd      	mov	sp, r7
 8013a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a04:	4770      	bx	lr

08013a06 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1ERSA_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8013a06:	b580      	push	{r7, lr}
 8013a08:	b082      	sub	sp, #8
 8013a0a:	af00      	add	r7, sp, #0
 8013a0c:	6078      	str	r0, [r7, #4]
 8013a0e:	6039      	str	r1, [r7, #0]
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	6839      	ldr	r1, [r7, #0]
 8013a14:	4618      	mov	r0, r3
 8013a16:	f000 f853 	bl	8013ac0 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1ERKS9_>
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	4618      	mov	r0, r3
 8013a1e:	3708      	adds	r7, #8
 8013a20:	46bd      	mov	sp, r7
 8013a22:	bd80      	pop	{r7, pc}

08013a24 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERS6_>:
 8013a24:	b580      	push	{r7, lr}
 8013a26:	b082      	sub	sp, #8
 8013a28:	af00      	add	r7, sp, #0
 8013a2a:	6078      	str	r0, [r7, #4]
 8013a2c:	6039      	str	r1, [r7, #0]
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	6839      	ldr	r1, [r7, #0]
 8013a32:	4618      	mov	r0, r3
 8013a34:	f7fc f952 	bl	800fcdc <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERKS5_>
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	4618      	mov	r0, r3
 8013a3c:	3708      	adds	r7, #8
 8013a3e:	46bd      	mov	sp, r7
 8013a40:	bd80      	pop	{r7, pc}

08013a42 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8013a42:	b590      	push	{r4, r7, lr}
 8013a44:	b087      	sub	sp, #28
 8013a46:	af00      	add	r7, sp, #0
 8013a48:	60f8      	str	r0, [r7, #12]
 8013a4a:	60b9      	str	r1, [r7, #8]
 8013a4c:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 8013a4e:	68fb      	ldr	r3, [r7, #12]
 8013a50:	4618      	mov	r0, r3
 8013a52:	f000 f844 	bl	8013ade <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE4Data4funcEv>
 8013a56:	4604      	mov	r4, r0
 8013a58:	68fb      	ldr	r3, [r7, #12]
 8013a5a:	3304      	adds	r3, #4
 8013a5c:	687a      	ldr	r2, [r7, #4]
 8013a5e:	68b9      	ldr	r1, [r7, #8]
 8013a60:	4618      	mov	r0, r3
 8013a62:	f000 f847 	bl	8013af4 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEENS0_10IndexBasedEfE5coeffEii>
 8013a66:	eef0 7a40 	vmov.f32	s15, s0
 8013a6a:	edc7 7a05 	vstr	s15, [r7, #20]
 8013a6e:	68fb      	ldr	r3, [r7, #12]
 8013a70:	3314      	adds	r3, #20
 8013a72:	687a      	ldr	r2, [r7, #4]
 8013a74:	68b9      	ldr	r1, [r7, #8]
 8013a76:	4618      	mov	r0, r3
 8013a78:	f000 f851 	bl	8013b1e <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfE5coeffEii>
 8013a7c:	4602      	mov	r2, r0
 8013a7e:	f107 0314 	add.w	r3, r7, #20
 8013a82:	4619      	mov	r1, r3
 8013a84:	4620      	mov	r0, r4
 8013a86:	f7fa fdb1 	bl	800e5ec <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 8013a8a:	eef0 7a40 	vmov.f32	s15, s0
  }
 8013a8e:	eeb0 0a67 	vmov.f32	s0, s15
 8013a92:	371c      	adds	r7, #28
 8013a94:	46bd      	mov	sp, r7
 8013a96:	bd90      	pop	{r4, r7, pc}

08013a98 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EEC1ERKNS_5BlockIS4_Li1ELi1ELb0EEE>:
  explicit block_evaluator(const XprType& block)
 8013a98:	b580      	push	{r7, lr}
 8013a9a:	b082      	sub	sp, #8
 8013a9c:	af00      	add	r7, sp, #0
 8013a9e:	6078      	str	r0, [r7, #4]
 8013aa0:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	6839      	ldr	r1, [r7, #0]
 8013aa6:	4618      	mov	r0, r3
 8013aa8:	f000 f84a 	bl	8013b40 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEEC1ERKS6_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 8013aac:	683b      	ldr	r3, [r7, #0]
 8013aae:	4618      	mov	r0, r3
 8013ab0:	f000 f870 	bl	8013b94 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE4dataEv>
 8013ab4:	bf00      	nop
  }
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	4618      	mov	r0, r3
 8013aba:	3708      	adds	r7, #8
 8013abc:	46bd      	mov	sp, r7
 8013abe:	bd80      	pop	{r7, pc}

08013ac0 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1ERKS9_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 8013ac0:	b580      	push	{r7, lr}
 8013ac2:	b082      	sub	sp, #8
 8013ac4:	af00      	add	r7, sp, #0
 8013ac6:	6078      	str	r0, [r7, #4]
 8013ac8:	6039      	str	r1, [r7, #0]
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	6839      	ldr	r1, [r7, #0]
 8013ace:	4618      	mov	r0, r3
 8013ad0:	f000 f86c 	bl	8013bac <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEENS0_10IndexBasedEfEC1ERKS9_>
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	4618      	mov	r0, r3
 8013ad8:	3708      	adds	r7, #8
 8013ada:	46bd      	mov	sp, r7
 8013adc:	bd80      	pop	{r7, pc}

08013ade <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 8013ade:	b480      	push	{r7}
 8013ae0:	b083      	sub	sp, #12
 8013ae2:	af00      	add	r7, sp, #0
 8013ae4:	6078      	str	r0, [r7, #4]
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	4618      	mov	r0, r3
 8013aea:	370c      	adds	r7, #12
 8013aec:	46bd      	mov	sp, r7
 8013aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013af2:	4770      	bx	lr

08013af4 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8013af4:	b580      	push	{r7, lr}
 8013af6:	b084      	sub	sp, #16
 8013af8:	af00      	add	r7, sp, #0
 8013afa:	60f8      	str	r0, [r7, #12]
 8013afc:	60b9      	str	r1, [r7, #8]
 8013afe:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 8013b00:	68fb      	ldr	r3, [r7, #12]
 8013b02:	68ba      	ldr	r2, [r7, #8]
 8013b04:	6879      	ldr	r1, [r7, #4]
 8013b06:	4618      	mov	r0, r3
 8013b08:	f7ff f85b 	bl	8012bc2 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE5coeffEii>
 8013b0c:	4603      	mov	r3, r0
 8013b0e:	681b      	ldr	r3, [r3, #0]
 8013b10:	ee07 3a90 	vmov	s15, r3
  }
 8013b14:	eeb0 0a67 	vmov.f32	s0, s15
 8013b18:	3710      	adds	r7, #16
 8013b1a:	46bd      	mov	sp, r7
 8013b1c:	bd80      	pop	{r7, pc}

08013b1e <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8013b1e:	b580      	push	{r7, lr}
 8013b20:	b084      	sub	sp, #16
 8013b22:	af00      	add	r7, sp, #0
 8013b24:	60f8      	str	r0, [r7, #12]
 8013b26:	60b9      	str	r1, [r7, #8]
 8013b28:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 8013b2a:	68fb      	ldr	r3, [r7, #12]
 8013b2c:	68ba      	ldr	r2, [r7, #8]
 8013b2e:	6879      	ldr	r1, [r7, #4]
 8013b30:	4618      	mov	r0, r3
 8013b32:	f7ff f846 	bl	8012bc2 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE5coeffEii>
 8013b36:	4603      	mov	r3, r0
  }
 8013b38:	4618      	mov	r0, r3
 8013b3a:	3710      	adds	r7, #16
 8013b3c:	46bd      	mov	sp, r7
 8013b3e:	bd80      	pop	{r7, pc}

08013b40 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEEC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 8013b40:	b590      	push	{r4, r7, lr}
 8013b42:	b083      	sub	sp, #12
 8013b44:	af00      	add	r7, sp, #0
 8013b46:	6078      	str	r0, [r7, #4]
 8013b48:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 8013b4a:	6878      	ldr	r0, [r7, #4]
 8013b4c:	f000 f860 	bl	8013c10 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 8013b50:	683b      	ldr	r3, [r7, #0]
 8013b52:	4618      	mov	r0, r3
 8013b54:	f000 f81e 	bl	8013b94 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE4dataEv>
 8013b58:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	601a      	str	r2, [r3, #0]
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	1d1c      	adds	r4, r3, #4
 8013b62:	683b      	ldr	r3, [r7, #0]
 8013b64:	4618      	mov	r0, r3
 8013b66:	f000 f837 	bl	8013bd8 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EE11innerStrideEv>
 8013b6a:	4603      	mov	r3, r0
 8013b6c:	4619      	mov	r1, r3
 8013b6e:	4620      	mov	r0, r4
 8013b70:	f7f2 f910 	bl	8005d94 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	1d5c      	adds	r4, r3, #5
 8013b78:	683b      	ldr	r3, [r7, #0]
 8013b7a:	4618      	mov	r0, r3
 8013b7c:	f000 f83a 	bl	8013bf4 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EE11outerStrideEv>
 8013b80:	4603      	mov	r3, r0
 8013b82:	4619      	mov	r1, r3
 8013b84:	4620      	mov	r0, r4
 8013b86:	f7f2 f8eb 	bl	8005d60 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	4618      	mov	r0, r3
 8013b8e:	370c      	adds	r7, #12
 8013b90:	46bd      	mov	sp, r7
 8013b92:	bd90      	pop	{r4, r7, pc}

08013b94 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE4dataEv>:
 8013b94:	b480      	push	{r7}
 8013b96:	b083      	sub	sp, #12
 8013b98:	af00      	add	r7, sp, #0
 8013b9a:	6078      	str	r0, [r7, #4]
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	681b      	ldr	r3, [r3, #0]
 8013ba0:	4618      	mov	r0, r3
 8013ba2:	370c      	adds	r7, #12
 8013ba4:	46bd      	mov	sp, r7
 8013ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013baa:	4770      	bx	lr

08013bac <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEENS0_10IndexBasedEfEC1ERKS9_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 8013bac:	b590      	push	{r4, r7, lr}
 8013bae:	b083      	sub	sp, #12
 8013bb0:	af00      	add	r7, sp, #0
 8013bb2:	6078      	str	r0, [r7, #4]
 8013bb4:	6039      	str	r1, [r7, #0]
 8013bb6:	6878      	ldr	r0, [r7, #4]
 8013bb8:	f000 f840 	bl	8013c3c <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1Ev>
 8013bbc:	687c      	ldr	r4, [r7, #4]
 8013bbe:	6838      	ldr	r0, [r7, #0]
 8013bc0:	f000 f831 	bl	8013c26 <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE16nestedExpressionEv>
 8013bc4:	4603      	mov	r3, r0
 8013bc6:	4619      	mov	r1, r3
 8013bc8:	4620      	mov	r0, r4
 8013bca:	f000 f842 	bl	8013c52 <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1ERS7_>
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	4618      	mov	r0, r3
 8013bd2:	370c      	adds	r7, #12
 8013bd4:	46bd      	mov	sp, r7
 8013bd6:	bd90      	pop	{r4, r7, pc}

08013bd8 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 8013bd8:	b580      	push	{r7, lr}
 8013bda:	b082      	sub	sp, #8
 8013bdc:	af00      	add	r7, sp, #0
 8013bde:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	689b      	ldr	r3, [r3, #8]
 8013be4:	4618      	mov	r0, r3
 8013be6:	f7fe fecd 	bl	8012984 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11innerStrideEv>
 8013bea:	4603      	mov	r3, r0
    }
 8013bec:	4618      	mov	r0, r3
 8013bee:	3708      	adds	r7, #8
 8013bf0:	46bd      	mov	sp, r7
 8013bf2:	bd80      	pop	{r7, pc}

08013bf4 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 8013bf4:	b580      	push	{r7, lr}
 8013bf6:	b082      	sub	sp, #8
 8013bf8:	af00      	add	r7, sp, #0
 8013bfa:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	689b      	ldr	r3, [r3, #8]
 8013c00:	4618      	mov	r0, r3
 8013c02:	f7fe f97b 	bl	8011efc <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11outerStrideEv>
 8013c06:	4603      	mov	r3, r0
    }
 8013c08:	4618      	mov	r0, r3
 8013c0a:	3708      	adds	r7, #8
 8013c0c:	46bd      	mov	sp, r7
 8013c0e:	bd80      	pop	{r7, pc}

08013c10 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8013c10:	b480      	push	{r7}
 8013c12:	b083      	sub	sp, #12
 8013c14:	af00      	add	r7, sp, #0
 8013c16:	6078      	str	r0, [r7, #4]
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	4618      	mov	r0, r3
 8013c1c:	370c      	adds	r7, #12
 8013c1e:	46bd      	mov	sp, r7
 8013c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c24:	4770      	bx	lr

08013c26 <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE16nestedExpressionEv>:
 8013c26:	b480      	push	{r7}
 8013c28:	b083      	sub	sp, #12
 8013c2a:	af00      	add	r7, sp, #0
 8013c2c:	6078      	str	r0, [r7, #4]
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	4618      	mov	r0, r3
 8013c32:	370c      	adds	r7, #12
 8013c34:	46bd      	mov	sp, r7
 8013c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c3a:	4770      	bx	lr

08013c3c <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1Ev>:
 8013c3c:	b480      	push	{r7}
 8013c3e:	b083      	sub	sp, #12
 8013c40:	af00      	add	r7, sp, #0
 8013c42:	6078      	str	r0, [r7, #4]
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	4618      	mov	r0, r3
 8013c48:	370c      	adds	r7, #12
 8013c4a:	46bd      	mov	sp, r7
 8013c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c50:	4770      	bx	lr

08013c52 <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8013c52:	b580      	push	{r7, lr}
 8013c54:	b082      	sub	sp, #8
 8013c56:	af00      	add	r7, sp, #0
 8013c58:	6078      	str	r0, [r7, #4]
 8013c5a:	6039      	str	r1, [r7, #0]
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	6839      	ldr	r1, [r7, #0]
 8013c60:	4618      	mov	r0, r3
 8013c62:	f000 f805 	bl	8013c70 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1ERKS6_>
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	4618      	mov	r0, r3
 8013c6a:	3708      	adds	r7, #8
 8013c6c:	46bd      	mov	sp, r7
 8013c6e:	bd80      	pop	{r7, pc}

08013c70 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1ERKS6_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8013c70:	b580      	push	{r7, lr}
 8013c72:	b082      	sub	sp, #8
 8013c74:	af00      	add	r7, sp, #0
 8013c76:	6078      	str	r0, [r7, #4]
 8013c78:	6039      	str	r1, [r7, #0]
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	6839      	ldr	r1, [r7, #0]
 8013c7e:	4618      	mov	r0, r3
 8013c80:	f000 f805 	bl	8013c8e <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEELi3ENS_10DenseShapeES7_ffEC1ERKS6_>
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	4618      	mov	r0, r3
 8013c88:	3708      	adds	r7, #8
 8013c8a:	46bd      	mov	sp, r7
 8013c8c:	bd80      	pop	{r7, pc}

08013c8e <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEELi3ENS_10DenseShapeES7_ffEC1ERKS6_>:
  explicit product_evaluator(const XprType& xpr)
 8013c8e:	b5b0      	push	{r4, r5, r7, lr}
 8013c90:	b084      	sub	sp, #16
 8013c92:	af00      	add	r7, sp, #0
 8013c94:	6078      	str	r0, [r7, #4]
 8013c96:	6039      	str	r1, [r7, #0]
    : m_result(xpr.rows(), xpr.cols())
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	4618      	mov	r0, r3
 8013c9c:	f000 f834 	bl	8013d08 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	1d1c      	adds	r4, r3, #4
 8013ca4:	6838      	ldr	r0, [r7, #0]
 8013ca6:	f7f2 f9aa 	bl	8005ffe <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4rowsEv>
 8013caa:	4603      	mov	r3, r0
 8013cac:	60bb      	str	r3, [r7, #8]
 8013cae:	6838      	ldr	r0, [r7, #0]
 8013cb0:	f7f1 fa33 	bl	800511a <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4colsEv>
 8013cb4:	4603      	mov	r3, r0
 8013cb6:	60fb      	str	r3, [r7, #12]
 8013cb8:	f107 020c 	add.w	r2, r7, #12
 8013cbc:	f107 0308 	add.w	r3, r7, #8
 8013cc0:	4619      	mov	r1, r3
 8013cc2:	4620      	mov	r0, r4
 8013cc4:	f000 f82d 	bl	8013d22 <_ZN5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EEC1IiiEERKT_RKT0_>
    ::new (static_cast<Base*>(this)) Base(m_result);
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	4619      	mov	r1, r3
 8013ccc:	2004      	movs	r0, #4
 8013cce:	f7ed f915 	bl	8000efc <_ZnwjPv>
 8013cd2:	4602      	mov	r2, r0
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	3304      	adds	r3, #4
 8013cd8:	4619      	mov	r1, r3
 8013cda:	4610      	mov	r0, r2
 8013cdc:	f7fd f884 	bl	8010de8 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS3_>
    generic_product_impl<Lhs, Rhs, LhsShape, RhsShape, ProductTag>::evalTo(m_result, xpr.lhs(), xpr.rhs());
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	1d1c      	adds	r4, r3, #4
 8013ce4:	6838      	ldr	r0, [r7, #0]
 8013ce6:	f000 f835 	bl	8013d54 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE3lhsEv>
 8013cea:	4605      	mov	r5, r0
 8013cec:	6838      	ldr	r0, [r7, #0]
 8013cee:	f000 f83d 	bl	8013d6c <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE3rhsEv>
 8013cf2:	4603      	mov	r3, r0
 8013cf4:	461a      	mov	r2, r3
 8013cf6:	4629      	mov	r1, r5
 8013cf8:	4620      	mov	r0, r4
 8013cfa:	f000 f843 	bl	8013d84 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEENS_10DenseShapeES5_Li3EE6evalToIS3_EEvRT_RKS3_RKS4_>
  }
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	4618      	mov	r0, r3
 8013d02:	3710      	adds	r7, #16
 8013d04:	46bd      	mov	sp, r7
 8013d06:	bdb0      	pop	{r4, r5, r7, pc}

08013d08 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>:
  evaluator() {}
 8013d08:	b580      	push	{r7, lr}
 8013d0a:	b082      	sub	sp, #8
 8013d0c:	af00      	add	r7, sp, #0
 8013d0e:	6078      	str	r0, [r7, #4]
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	4618      	mov	r0, r3
 8013d14:	f000 f854 	bl	8013dc0 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	4618      	mov	r0, r3
 8013d1c:	3708      	adds	r7, #8
 8013d1e:	46bd      	mov	sp, r7
 8013d20:	bd80      	pop	{r7, pc}

08013d22 <_ZN5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EEC1IiiEERKT_RKT0_>:
    Matrix(const T0& x, const T1& y)
 8013d22:	b580      	push	{r7, lr}
 8013d24:	b084      	sub	sp, #16
 8013d26:	af00      	add	r7, sp, #0
 8013d28:	60f8      	str	r0, [r7, #12]
 8013d2a:	60b9      	str	r1, [r7, #8]
 8013d2c:	607a      	str	r2, [r7, #4]
    {
 8013d2e:	68fb      	ldr	r3, [r7, #12]
 8013d30:	4618      	mov	r0, r3
 8013d32:	f7f0 f9f1 	bl	8004118 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>
      Base::_check_template_params();
 8013d36:	f7f0 f9ff 	bl	8004138 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE22_check_template_paramsEv>
      Base::template _init2<T0,T1>(x, y);
 8013d3a:	68f8      	ldr	r0, [r7, #12]
 8013d3c:	68bb      	ldr	r3, [r7, #8]
 8013d3e:	6819      	ldr	r1, [r3, #0]
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	681a      	ldr	r2, [r3, #0]
 8013d44:	2300      	movs	r3, #0
 8013d46:	f000 f84d 	bl	8013de4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6_init2IiiEEviiPNS_8internal9enable_ifILb1ET_E4typeE>
    }
 8013d4a:	68fb      	ldr	r3, [r7, #12]
 8013d4c:	4618      	mov	r0, r3
 8013d4e:	3710      	adds	r7, #16
 8013d50:	46bd      	mov	sp, r7
 8013d52:	bd80      	pop	{r7, pc}

08013d54 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8013d54:	b480      	push	{r7}
 8013d56:	b083      	sub	sp, #12
 8013d58:	af00      	add	r7, sp, #0
 8013d5a:	6078      	str	r0, [r7, #4]
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	681b      	ldr	r3, [r3, #0]
 8013d60:	4618      	mov	r0, r3
 8013d62:	370c      	adds	r7, #12
 8013d64:	46bd      	mov	sp, r7
 8013d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d6a:	4770      	bx	lr

08013d6c <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8013d6c:	b480      	push	{r7}
 8013d6e:	b083      	sub	sp, #12
 8013d70:	af00      	add	r7, sp, #0
 8013d72:	6078      	str	r0, [r7, #4]
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	685b      	ldr	r3, [r3, #4]
 8013d78:	4618      	mov	r0, r3
 8013d7a:	370c      	adds	r7, #12
 8013d7c:	46bd      	mov	sp, r7
 8013d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d82:	4770      	bx	lr

08013d84 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEENS_10DenseShapeES5_Li3EE6evalToIS3_EEvRT_RKS3_RKS4_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 8013d84:	b580      	push	{r7, lr}
 8013d86:	b088      	sub	sp, #32
 8013d88:	af00      	add	r7, sp, #0
 8013d8a:	60f8      	str	r0, [r7, #12]
 8013d8c:	60b9      	str	r1, [r7, #8]
 8013d8e:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 8013d90:	f107 0314 	add.w	r3, r7, #20
 8013d94:	687a      	ldr	r2, [r7, #4]
 8013d96:	68b9      	ldr	r1, [r7, #8]
 8013d98:	4618      	mov	r0, r3
 8013d9a:	f000 f837 	bl	8013e0c <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE11lazyProductINS1_IfLi3ELi3ELi0ELi3ELi3EEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS7_EE>
 8013d9e:	f107 031c 	add.w	r3, r7, #28
 8013da2:	4618      	mov	r0, r3
 8013da4:	f7f2 fa81 	bl	80062aa <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8013da8:	f107 021c 	add.w	r2, r7, #28
 8013dac:	f107 0314 	add.w	r3, r7, #20
 8013db0:	4619      	mov	r1, r3
 8013db2:	68f8      	ldr	r0, [r7, #12]
 8013db4:	f000 f841 	bl	8013e3a <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8013db8:	bf00      	nop
 8013dba:	3720      	adds	r7, #32
 8013dbc:	46bd      	mov	sp, r7
 8013dbe:	bd80      	pop	{r7, pc}

08013dc0 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>:
  evaluator()
 8013dc0:	b580      	push	{r7, lr}
 8013dc2:	b082      	sub	sp, #8
 8013dc4:	af00      	add	r7, sp, #0
 8013dc6:	6078      	str	r0, [r7, #4]
    : m_d(0,OuterStrideAtCompileTime)
 8013dc8:	6878      	ldr	r0, [r7, #4]
 8013dca:	f7fd fe76 	bl	8011aba <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	2200      	movs	r2, #0
 8013dd2:	2100      	movs	r1, #0
 8013dd4:	4618      	mov	r0, r3
 8013dd6:	f7f2 fb28 	bl	800642a <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EEC1EPKfi>
  }
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	4618      	mov	r0, r3
 8013dde:	3708      	adds	r7, #8
 8013de0:	46bd      	mov	sp, r7
 8013de2:	bd80      	pop	{r7, pc}

08013de4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6_init2IiiEEviiPNS_8internal9enable_ifILb1ET_E4typeE>:
    EIGEN_STRONG_INLINE void _init2(Index rows, Index cols, typename internal::enable_if<Base::SizeAtCompileTime!=2,T0>::type* = 0)
 8013de4:	b580      	push	{r7, lr}
 8013de6:	b086      	sub	sp, #24
 8013de8:	af00      	add	r7, sp, #0
 8013dea:	60f8      	str	r0, [r7, #12]
 8013dec:	60b9      	str	r1, [r7, #8]
 8013dee:	607a      	str	r2, [r7, #4]
 8013df0:	603b      	str	r3, [r7, #0]
      const bool t0_is_integer_alike = internal::is_valid_index_type<T0>::value;
 8013df2:	2301      	movs	r3, #1
 8013df4:	75fb      	strb	r3, [r7, #23]
      const bool t1_is_integer_alike = internal::is_valid_index_type<T1>::value;
 8013df6:	2301      	movs	r3, #1
 8013df8:	75bb      	strb	r3, [r7, #22]
      resize(rows,cols);
 8013dfa:	687a      	ldr	r2, [r7, #4]
 8013dfc:	68b9      	ldr	r1, [r7, #8]
 8013dfe:	68f8      	ldr	r0, [r7, #12]
 8013e00:	f000 f82c 	bl	8013e5c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii>
    }
 8013e04:	bf00      	nop
 8013e06:	3718      	adds	r7, #24
 8013e08:	46bd      	mov	sp, r7
 8013e0a:	bd80      	pop	{r7, pc}

08013e0c <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE11lazyProductINS1_IfLi3ELi3ELi0ELi3ELi3EEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS7_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 8013e0c:	b590      	push	{r4, r7, lr}
 8013e0e:	b085      	sub	sp, #20
 8013e10:	af00      	add	r7, sp, #0
 8013e12:	60f8      	str	r0, [r7, #12]
 8013e14:	60b9      	str	r1, [r7, #8]
 8013e16:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 8013e18:	68b8      	ldr	r0, [r7, #8]
 8013e1a:	f7f1 f8f1 	bl	8005000 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 8013e1e:	4604      	mov	r4, r0
 8013e20:	6878      	ldr	r0, [r7, #4]
 8013e22:	f7f0 fe1c 	bl	8004a5e <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8013e26:	4603      	mov	r3, r0
 8013e28:	461a      	mov	r2, r3
 8013e2a:	4621      	mov	r1, r4
 8013e2c:	68f8      	ldr	r0, [r7, #12]
 8013e2e:	f000 f86b 	bl	8013f08 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EEC1ERKS2_RKS3_>
}
 8013e32:	68f8      	ldr	r0, [r7, #12]
 8013e34:	3714      	adds	r7, #20
 8013e36:	46bd      	mov	sp, r7
 8013e38:	bd90      	pop	{r4, r7, pc}

08013e3a <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8013e3a:	b580      	push	{r7, lr}
 8013e3c:	b086      	sub	sp, #24
 8013e3e:	af00      	add	r7, sp, #0
 8013e40:	60f8      	str	r0, [r7, #12]
 8013e42:	60b9      	str	r1, [r7, #8]
 8013e44:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8013e46:	68fb      	ldr	r3, [r7, #12]
 8013e48:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8013e4a:	687a      	ldr	r2, [r7, #4]
 8013e4c:	68b9      	ldr	r1, [r7, #8]
 8013e4e:	6978      	ldr	r0, [r7, #20]
 8013e50:	f000 f888 	bl	8013f64 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_>
}
 8013e54:	bf00      	nop
 8013e56:	3718      	adds	r7, #24
 8013e58:	46bd      	mov	sp, r7
 8013e5a:	bd80      	pop	{r7, pc}

08013e5c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii>:
    EIGEN_STRONG_INLINE void resize(Index rows, Index cols)
 8013e5c:	b580      	push	{r7, lr}
 8013e5e:	b086      	sub	sp, #24
 8013e60:	af00      	add	r7, sp, #0
 8013e62:	60f8      	str	r0, [r7, #12]
 8013e64:	60b9      	str	r1, [r7, #8]
 8013e66:	607a      	str	r2, [r7, #4]
      eigen_assert(   EIGEN_IMPLIES(RowsAtCompileTime!=Dynamic,rows==RowsAtCompileTime)
 8013e68:	68bb      	ldr	r3, [r7, #8]
 8013e6a:	2b01      	cmp	r3, #1
 8013e6c:	d108      	bne.n	8013e80 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii+0x24>
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	2b03      	cmp	r3, #3
 8013e72:	d105      	bne.n	8013e80 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii+0x24>
 8013e74:	68bb      	ldr	r3, [r7, #8]
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	db02      	blt.n	8013e80 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii+0x24>
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	2b00      	cmp	r3, #0
 8013e7e:	da06      	bge.n	8013e8e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii+0x32>
 8013e80:	4b0c      	ldr	r3, [pc, #48]	; (8013eb4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii+0x58>)
 8013e82:	4a0d      	ldr	r2, [pc, #52]	; (8013eb8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii+0x5c>)
 8013e84:	f240 1111 	movw	r1, #273	; 0x111
 8013e88:	480c      	ldr	r0, [pc, #48]	; (8013ebc <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii+0x60>)
 8013e8a:	f009 f8d3 	bl	801d034 <__assert_func>
 8013e8e:	68bb      	ldr	r3, [r7, #8]
 8013e90:	617b      	str	r3, [r7, #20]
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	613b      	str	r3, [r7, #16]
  }
 8013e96:	bf00      	nop
        m_storage.resize(rows*cols, rows, cols);
 8013e98:	68f8      	ldr	r0, [r7, #12]
 8013e9a:	68bb      	ldr	r3, [r7, #8]
 8013e9c:	687a      	ldr	r2, [r7, #4]
 8013e9e:	fb02 f103 	mul.w	r1, r2, r3
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	68ba      	ldr	r2, [r7, #8]
 8013ea6:	f000 f870 	bl	8013f8a <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE6resizeEiii>
    }
 8013eaa:	bf00      	nop
 8013eac:	3718      	adds	r7, #24
 8013eae:	46bd      	mov	sp, r7
 8013eb0:	bd80      	pop	{r7, pc}
 8013eb2:	bf00      	nop
 8013eb4:	0802192c 	.word	0x0802192c
 8013eb8:	080287d8 	.word	0x080287d8
 8013ebc:	08021b48 	.word	0x08021b48

08013ec0 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1Ev>:
 8013ec0:	b580      	push	{r7, lr}
 8013ec2:	b082      	sub	sp, #8
 8013ec4:	af00      	add	r7, sp, #0
 8013ec6:	6078      	str	r0, [r7, #4]
 8013ec8:	6878      	ldr	r0, [r7, #4]
 8013eca:	f000 f86b 	bl	8013fa4 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1Ev>
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	4618      	mov	r0, r3
 8013ed2:	3708      	adds	r7, #8
 8013ed4:	46bd      	mov	sp, r7
 8013ed6:	bd80      	pop	{r7, pc}

08013ed8 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1ELi3EEC1Ev>:
class dense_product_base
 8013ed8:	b580      	push	{r7, lr}
 8013eda:	b082      	sub	sp, #8
 8013edc:	af00      	add	r7, sp, #0
 8013ede:	6078      	str	r0, [r7, #4]
 8013ee0:	6878      	ldr	r0, [r7, #4]
 8013ee2:	f7ff ffed 	bl	8013ec0 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1Ev>
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	4618      	mov	r0, r3
 8013eea:	3708      	adds	r7, #8
 8013eec:	46bd      	mov	sp, r7
 8013eee:	bd80      	pop	{r7, pc}

08013ef0 <_ZN5Eigen11ProductImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8013ef0:	b580      	push	{r7, lr}
 8013ef2:	b082      	sub	sp, #8
 8013ef4:	af00      	add	r7, sp, #0
 8013ef6:	6078      	str	r0, [r7, #4]
 8013ef8:	6878      	ldr	r0, [r7, #4]
 8013efa:	f7ff ffed 	bl	8013ed8 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1ELi3EEC1Ev>
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	4618      	mov	r0, r3
 8013f02:	3708      	adds	r7, #8
 8013f04:	46bd      	mov	sp, r7
 8013f06:	bd80      	pop	{r7, pc}

08013f08 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8013f08:	b590      	push	{r4, r7, lr}
 8013f0a:	b085      	sub	sp, #20
 8013f0c:	af00      	add	r7, sp, #0
 8013f0e:	60f8      	str	r0, [r7, #12]
 8013f10:	60b9      	str	r1, [r7, #8]
 8013f12:	607a      	str	r2, [r7, #4]
 8013f14:	68f8      	ldr	r0, [r7, #12]
 8013f16:	f7ff ffeb 	bl	8013ef0 <_ZN5Eigen11ProductImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1ENS_5DenseEEC1Ev>
 8013f1a:	68fb      	ldr	r3, [r7, #12]
 8013f1c:	68ba      	ldr	r2, [r7, #8]
 8013f1e:	601a      	str	r2, [r3, #0]
 8013f20:	68fb      	ldr	r3, [r7, #12]
 8013f22:	687a      	ldr	r2, [r7, #4]
 8013f24:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 8013f26:	68bb      	ldr	r3, [r7, #8]
 8013f28:	4618      	mov	r0, r3
 8013f2a:	f7f0 fb45 	bl	80045b8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8013f2e:	4604      	mov	r4, r0
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	4618      	mov	r0, r3
 8013f34:	f7f0 f989 	bl	800424a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8013f38:	4603      	mov	r3, r0
 8013f3a:	429c      	cmp	r4, r3
 8013f3c:	d005      	beq.n	8013f4a <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EEC1ERKS2_RKS3_+0x42>
 8013f3e:	4b06      	ldr	r3, [pc, #24]	; (8013f58 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EEC1ERKS2_RKS3_+0x50>)
 8013f40:	4a06      	ldr	r2, [pc, #24]	; (8013f5c <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EEC1ERKS2_RKS3_+0x54>)
 8013f42:	2160      	movs	r1, #96	; 0x60
 8013f44:	4806      	ldr	r0, [pc, #24]	; (8013f60 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EEC1ERKS2_RKS3_+0x58>)
 8013f46:	f009 f875 	bl	801d034 <__assert_func>
 8013f4a:	bf00      	nop
    }
 8013f4c:	68fb      	ldr	r3, [r7, #12]
 8013f4e:	4618      	mov	r0, r3
 8013f50:	3714      	adds	r7, #20
 8013f52:	46bd      	mov	sp, r7
 8013f54:	bd90      	pop	{r4, r7, pc}
 8013f56:	bf00      	nop
 8013f58:	0801f15c 	.word	0x0801f15c
 8013f5c:	08028864 	.word	0x08028864
 8013f60:	0801f4ac 	.word	0x0801f4ac

08013f64 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 8013f64:	b580      	push	{r7, lr}
 8013f66:	b084      	sub	sp, #16
 8013f68:	af00      	add	r7, sp, #0
 8013f6a:	60f8      	str	r0, [r7, #12]
 8013f6c:	60b9      	str	r1, [r7, #8]
 8013f6e:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 8013f70:	68b9      	ldr	r1, [r7, #8]
 8013f72:	68f8      	ldr	r0, [r7, #12]
 8013f74:	f000 f821 	bl	8013fba <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 8013f78:	687a      	ldr	r2, [r7, #4]
 8013f7a:	68b9      	ldr	r1, [r7, #8]
 8013f7c:	68f8      	ldr	r0, [r7, #12]
 8013f7e:	f000 f84a 	bl	8014016 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8013f82:	bf00      	nop
 8013f84:	3710      	adds	r7, #16
 8013f86:	46bd      	mov	sp, r7
 8013f88:	bd80      	pop	{r7, pc}

08013f8a <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE6resizeEiii>:
    EIGEN_DEVICE_FUNC void resize(Index,Index,Index) {}
 8013f8a:	b480      	push	{r7}
 8013f8c:	b085      	sub	sp, #20
 8013f8e:	af00      	add	r7, sp, #0
 8013f90:	60f8      	str	r0, [r7, #12]
 8013f92:	60b9      	str	r1, [r7, #8]
 8013f94:	607a      	str	r2, [r7, #4]
 8013f96:	603b      	str	r3, [r7, #0]
 8013f98:	bf00      	nop
 8013f9a:	3714      	adds	r7, #20
 8013f9c:	46bd      	mov	sp, r7
 8013f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fa2:	4770      	bx	lr

08013fa4 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8013fa4:	b480      	push	{r7}
 8013fa6:	b083      	sub	sp, #12
 8013fa8:	af00      	add	r7, sp, #0
 8013faa:	6078      	str	r0, [r7, #4]
    }
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	4618      	mov	r0, r3
 8013fb0:	370c      	adds	r7, #12
 8013fb2:	46bd      	mov	sp, r7
 8013fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fb8:	4770      	bx	lr

08013fba <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 8013fba:	b480      	push	{r7}
 8013fbc:	b083      	sub	sp, #12
 8013fbe:	af00      	add	r7, sp, #0
 8013fc0:	6078      	str	r0, [r7, #4]
 8013fc2:	6039      	str	r1, [r7, #0]
}
 8013fc4:	bf00      	nop
 8013fc6:	370c      	adds	r7, #12
 8013fc8:	46bd      	mov	sp, r7
 8013fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fce:	4770      	bx	lr

08013fd0 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEELi3ENS_10DenseShapeES7_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 8013fd0:	b580      	push	{r7, lr}
 8013fd2:	b082      	sub	sp, #8
 8013fd4:	af00      	add	r7, sp, #0
 8013fd6:	6078      	str	r0, [r7, #4]
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	330c      	adds	r3, #12
 8013fdc:	4618      	mov	r0, r3
 8013fde:	f7f2 fbbc 	bl	800675a <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	3308      	adds	r3, #8
 8013fe6:	4618      	mov	r0, r3
 8013fe8:	f7fa f9ea 	bl	800e3c0 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 8013fec:	6878      	ldr	r0, [r7, #4]
 8013fee:	f000 f859 	bl	80140a4 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEED1Ev>
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	4618      	mov	r0, r3
 8013ff6:	3708      	adds	r7, #8
 8013ff8:	46bd      	mov	sp, r7
 8013ffa:	bd80      	pop	{r7, pc}

08013ffc <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 8013ffc:	b580      	push	{r7, lr}
 8013ffe:	b082      	sub	sp, #8
 8014000:	af00      	add	r7, sp, #0
 8014002:	6078      	str	r0, [r7, #4]
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	4618      	mov	r0, r3
 8014008:	f7ff ffe2 	bl	8013fd0 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEELi3ENS_10DenseShapeES7_ffED1Ev>
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	4618      	mov	r0, r3
 8014010:	3708      	adds	r7, #8
 8014012:	46bd      	mov	sp, r7
 8014014:	bd80      	pop	{r7, pc}

08014016 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 8014016:	b580      	push	{r7, lr}
 8014018:	b090      	sub	sp, #64	; 0x40
 801401a:	af02      	add	r7, sp, #8
 801401c:	60f8      	str	r0, [r7, #12]
 801401e:	60b9      	str	r1, [r7, #8]
 8014020:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 8014022:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014026:	68b9      	ldr	r1, [r7, #8]
 8014028:	4618      	mov	r0, r3
 801402a:	f000 f82c 	bl	8014086 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1ERKS6_>
  resize_if_allowed(dst, src, func);
 801402e:	687a      	ldr	r2, [r7, #4]
 8014030:	68b9      	ldr	r1, [r7, #8]
 8014032:	68f8      	ldr	r0, [r7, #12]
 8014034:	f000 f85e 	bl	80140f4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 8014038:	f107 0320 	add.w	r3, r7, #32
 801403c:	68f9      	ldr	r1, [r7, #12]
 801403e:	4618      	mov	r0, r3
 8014040:	f7fc fed2 	bl	8010de8 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 8014044:	68f8      	ldr	r0, [r7, #12]
 8014046:	f000 f89f 	bl	8014188 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE18const_cast_derivedEv>
 801404a:	4603      	mov	r3, r0
 801404c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8014050:	f107 0120 	add.w	r1, r7, #32
 8014054:	f107 0010 	add.w	r0, r7, #16
 8014058:	9300      	str	r3, [sp, #0]
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	f000 f89f 	bl	801419e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS2_INS_7ProductIS4_NS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKS9_RKSB_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 8014060:	f107 0310 	add.w	r3, r7, #16
 8014064:	4618      	mov	r0, r3
 8014066:	f000 f8b4 	bl	80141d2 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSD_>
  DstEvaluatorType dstEvaluator(dst);
 801406a:	f107 0320 	add.w	r3, r7, #32
 801406e:	4618      	mov	r0, r3
 8014070:	f7fa f9a6 	bl	800e3c0 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 8014074:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014078:	4618      	mov	r0, r3
 801407a:	f7ff ffbf 	bl	8013ffc <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEED1Ev>
}
 801407e:	bf00      	nop
 8014080:	3738      	adds	r7, #56	; 0x38
 8014082:	46bd      	mov	sp, r7
 8014084:	bd80      	pop	{r7, pc}

08014086 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1ERKS6_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8014086:	b580      	push	{r7, lr}
 8014088:	b082      	sub	sp, #8
 801408a:	af00      	add	r7, sp, #0
 801408c:	6078      	str	r0, [r7, #4]
 801408e:	6039      	str	r1, [r7, #0]
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	6839      	ldr	r1, [r7, #0]
 8014094:	4618      	mov	r0, r3
 8014096:	f000 f8a7 	bl	80141e8 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEELi3ENS_10DenseShapeES7_ffEC1ERKS6_>
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	4618      	mov	r0, r3
 801409e:	3708      	adds	r7, #8
 80140a0:	46bd      	mov	sp, r7
 80140a2:	bd80      	pop	{r7, pc}

080140a4 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 80140a4:	b480      	push	{r7}
 80140a6:	b083      	sub	sp, #12
 80140a8:	af00      	add	r7, sp, #0
 80140aa:	6078      	str	r0, [r7, #4]
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	4618      	mov	r0, r3
 80140b0:	370c      	adds	r7, #12
 80140b2:	46bd      	mov	sp, r7
 80140b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140b8:	4770      	bx	lr

080140ba <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 80140ba:	b580      	push	{r7, lr}
 80140bc:	b082      	sub	sp, #8
 80140be:	af00      	add	r7, sp, #0
 80140c0:	6078      	str	r0, [r7, #4]
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	681b      	ldr	r3, [r3, #0]
 80140c6:	4618      	mov	r0, r3
 80140c8:	f7f0 fa81 	bl	80045ce <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 80140cc:	4603      	mov	r3, r0
 80140ce:	4618      	mov	r0, r3
 80140d0:	3708      	adds	r7, #8
 80140d2:	46bd      	mov	sp, r7
 80140d4:	bd80      	pop	{r7, pc}

080140d6 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 80140d6:	b580      	push	{r7, lr}
 80140d8:	b082      	sub	sp, #8
 80140da:	af00      	add	r7, sp, #0
 80140dc:	6078      	str	r0, [r7, #4]
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	685b      	ldr	r3, [r3, #4]
 80140e2:	4618      	mov	r0, r3
 80140e4:	f7f0 f8a6 	bl	8004234 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80140e8:	4603      	mov	r3, r0
 80140ea:	4618      	mov	r0, r3
 80140ec:	3708      	adds	r7, #8
 80140ee:	46bd      	mov	sp, r7
 80140f0:	bd80      	pop	{r7, pc}
	...

080140f4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 80140f4:	b580      	push	{r7, lr}
 80140f6:	b086      	sub	sp, #24
 80140f8:	af00      	add	r7, sp, #0
 80140fa:	60f8      	str	r0, [r7, #12]
 80140fc:	60b9      	str	r1, [r7, #8]
 80140fe:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8014100:	68b8      	ldr	r0, [r7, #8]
 8014102:	f7ff ffda 	bl	80140ba <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE4rowsEv>
 8014106:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8014108:	68b8      	ldr	r0, [r7, #8]
 801410a:	f7ff ffe4 	bl	80140d6 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE4colsEv>
 801410e:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8014110:	68fb      	ldr	r3, [r7, #12]
 8014112:	4618      	mov	r0, r3
 8014114:	f7f0 fa5b 	bl	80045ce <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8014118:	4602      	mov	r2, r0
 801411a:	697b      	ldr	r3, [r7, #20]
 801411c:	4293      	cmp	r3, r2
 801411e:	d107      	bne.n	8014130 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 8014120:	68fb      	ldr	r3, [r7, #12]
 8014122:	4618      	mov	r0, r3
 8014124:	f7f0 fa48 	bl	80045b8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8014128:	4602      	mov	r2, r0
 801412a:	693b      	ldr	r3, [r7, #16]
 801412c:	4293      	cmp	r3, r2
 801412e:	d001      	beq.n	8014134 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 8014130:	2301      	movs	r3, #1
 8014132:	e000      	b.n	8014136 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 8014134:	2300      	movs	r3, #0
 8014136:	2b00      	cmp	r3, #0
 8014138:	d005      	beq.n	8014146 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 801413a:	68fb      	ldr	r3, [r7, #12]
 801413c:	693a      	ldr	r2, [r7, #16]
 801413e:	6979      	ldr	r1, [r7, #20]
 8014140:	4618      	mov	r0, r3
 8014142:	f7ff fe8b 	bl	8013e5c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 8014146:	68fb      	ldr	r3, [r7, #12]
 8014148:	4618      	mov	r0, r3
 801414a:	f7f0 fa40 	bl	80045ce <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 801414e:	4602      	mov	r2, r0
 8014150:	697b      	ldr	r3, [r7, #20]
 8014152:	4293      	cmp	r3, r2
 8014154:	d107      	bne.n	8014166 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 8014156:	68fb      	ldr	r3, [r7, #12]
 8014158:	4618      	mov	r0, r3
 801415a:	f7f0 fa2d 	bl	80045b8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 801415e:	4602      	mov	r2, r0
 8014160:	693b      	ldr	r3, [r7, #16]
 8014162:	4293      	cmp	r3, r2
 8014164:	d006      	beq.n	8014174 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 8014166:	4b05      	ldr	r3, [pc, #20]	; (801417c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 8014168:	4a05      	ldr	r2, [pc, #20]	; (8014180 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 801416a:	f240 21fd 	movw	r1, #765	; 0x2fd
 801416e:	4805      	ldr	r0, [pc, #20]	; (8014184 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8014170:	f008 ff60 	bl	801d034 <__assert_func>
}
 8014174:	bf00      	nop
 8014176:	3718      	adds	r7, #24
 8014178:	46bd      	mov	sp, r7
 801417a:	bd80      	pop	{r7, pc}
 801417c:	08021514 	.word	0x08021514
 8014180:	0802898c 	.word	0x0802898c
 8014184:	08021628 	.word	0x08021628

08014188 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE18const_cast_derivedEv>:
  inline Derived& const_cast_derived() const
 8014188:	b480      	push	{r7}
 801418a:	b083      	sub	sp, #12
 801418c:	af00      	add	r7, sp, #0
 801418e:	6078      	str	r0, [r7, #4]
  { return *static_cast<Derived*>(const_cast<EigenBase*>(this)); }
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	4618      	mov	r0, r3
 8014194:	370c      	adds	r7, #12
 8014196:	46bd      	mov	sp, r7
 8014198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801419c:	4770      	bx	lr

0801419e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS2_INS_7ProductIS4_NS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKS9_RKSB_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 801419e:	b480      	push	{r7}
 80141a0:	b085      	sub	sp, #20
 80141a2:	af00      	add	r7, sp, #0
 80141a4:	60f8      	str	r0, [r7, #12]
 80141a6:	60b9      	str	r1, [r7, #8]
 80141a8:	607a      	str	r2, [r7, #4]
 80141aa:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 80141ac:	68fb      	ldr	r3, [r7, #12]
 80141ae:	68ba      	ldr	r2, [r7, #8]
 80141b0:	601a      	str	r2, [r3, #0]
 80141b2:	68fb      	ldr	r3, [r7, #12]
 80141b4:	687a      	ldr	r2, [r7, #4]
 80141b6:	605a      	str	r2, [r3, #4]
 80141b8:	68fb      	ldr	r3, [r7, #12]
 80141ba:	683a      	ldr	r2, [r7, #0]
 80141bc:	609a      	str	r2, [r3, #8]
 80141be:	68fb      	ldr	r3, [r7, #12]
 80141c0:	69ba      	ldr	r2, [r7, #24]
 80141c2:	60da      	str	r2, [r3, #12]
  }
 80141c4:	68fb      	ldr	r3, [r7, #12]
 80141c6:	4618      	mov	r0, r3
 80141c8:	3714      	adds	r7, #20
 80141ca:	46bd      	mov	sp, r7
 80141cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141d0:	4770      	bx	lr

080141d2 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80141d2:	b580      	push	{r7, lr}
 80141d4:	b082      	sub	sp, #8
 80141d6:	af00      	add	r7, sp, #0
 80141d8:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 80141da:	6878      	ldr	r0, [r7, #4]
 80141dc:	f000 f839 	bl	8014252 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSD_>
  }
 80141e0:	bf00      	nop
 80141e2:	3708      	adds	r7, #8
 80141e4:	46bd      	mov	sp, r7
 80141e6:	bd80      	pop	{r7, pc}

080141e8 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEELi3ENS_10DenseShapeES7_ffEC1ERKS6_>:
  explicit product_evaluator(const XprType& xpr)
 80141e8:	b580      	push	{r7, lr}
 80141ea:	b082      	sub	sp, #8
 80141ec:	af00      	add	r7, sp, #0
 80141ee:	6078      	str	r0, [r7, #4]
 80141f0:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 80141f2:	6878      	ldr	r0, [r7, #4]
 80141f4:	f000 f854 	bl	80142a0 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1Ev>
    : m_lhs(xpr.lhs()),
 80141f8:	6838      	ldr	r0, [r7, #0]
 80141fa:	f000 f839 	bl	8014270 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE3lhsEv>
 80141fe:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	601a      	str	r2, [r3, #0]
      m_rhs(xpr.rhs()),
 8014204:	6838      	ldr	r0, [r7, #0]
 8014206:	f000 f83f 	bl	8014288 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE3rhsEv>
 801420a:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	605a      	str	r2, [r3, #4]
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	f103 0208 	add.w	r2, r3, #8
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	681b      	ldr	r3, [r3, #0]
      m_innerDim(xpr.lhs().cols())
 801421a:	4619      	mov	r1, r3
 801421c:	4610      	mov	r0, r2
 801421e:	f7fc fde3 	bl	8010de8 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS3_>
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	f103 020c 	add.w	r2, r3, #12
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	685b      	ldr	r3, [r3, #4]
      m_innerDim(xpr.lhs().cols())
 801422c:	4619      	mov	r1, r3
 801422e:	4610      	mov	r0, r2
 8014230:	f7f2 fca2 	bl	8006b78 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 8014234:	6838      	ldr	r0, [r7, #0]
 8014236:	f000 f81b 	bl	8014270 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE3lhsEv>
 801423a:	4603      	mov	r3, r0
 801423c:	4618      	mov	r0, r3
 801423e:	f7f0 f9bb 	bl	80045b8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8014242:	4602      	mov	r2, r0
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	611a      	str	r2, [r3, #16]
  }
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	4618      	mov	r0, r3
 801424c:	3708      	adds	r7, #8
 801424e:	46bd      	mov	sp, r7
 8014250:	bd80      	pop	{r7, pc}

08014252 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8014252:	b580      	push	{r7, lr}
 8014254:	b082      	sub	sp, #8
 8014256:	af00      	add	r7, sp, #0
 8014258:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 801425a:	2100      	movs	r1, #0
 801425c:	6878      	ldr	r0, [r7, #4]
 801425e:	f000 f82a 	bl	80142b6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS2_INS_7ProductIS4_NS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8014262:	6878      	ldr	r0, [r7, #4]
 8014264:	f000 f84a 	bl	80142fc <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSD_>
  }
 8014268:	bf00      	nop
 801426a:	3708      	adds	r7, #8
 801426c:	46bd      	mov	sp, r7
 801426e:	bd80      	pop	{r7, pc}

08014270 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8014270:	b480      	push	{r7}
 8014272:	b083      	sub	sp, #12
 8014274:	af00      	add	r7, sp, #0
 8014276:	6078      	str	r0, [r7, #4]
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	681b      	ldr	r3, [r3, #0]
 801427c:	4618      	mov	r0, r3
 801427e:	370c      	adds	r7, #12
 8014280:	46bd      	mov	sp, r7
 8014282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014286:	4770      	bx	lr

08014288 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8014288:	b480      	push	{r7}
 801428a:	b083      	sub	sp, #12
 801428c:	af00      	add	r7, sp, #0
 801428e:	6078      	str	r0, [r7, #4]
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	685b      	ldr	r3, [r3, #4]
 8014294:	4618      	mov	r0, r3
 8014296:	370c      	adds	r7, #12
 8014298:	46bd      	mov	sp, r7
 801429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801429e:	4770      	bx	lr

080142a0 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 80142a0:	b480      	push	{r7}
 80142a2:	b083      	sub	sp, #12
 80142a4:	af00      	add	r7, sp, #0
 80142a6:	6078      	str	r0, [r7, #4]
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	4618      	mov	r0, r3
 80142ac:	370c      	adds	r7, #12
 80142ae:	46bd      	mov	sp, r7
 80142b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142b4:	4770      	bx	lr

080142b6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS2_INS_7ProductIS4_NS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 80142b6:	b5b0      	push	{r4, r5, r7, lr}
 80142b8:	b084      	sub	sp, #16
 80142ba:	af00      	add	r7, sp, #0
 80142bc:	6078      	str	r0, [r7, #4]
 80142be:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	689c      	ldr	r4, [r3, #8]
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	681b      	ldr	r3, [r3, #0]
 80142c8:	6839      	ldr	r1, [r7, #0]
 80142ca:	4618      	mov	r0, r3
 80142cc:	f000 f825 	bl	801431a <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE8coeffRefEi>
 80142d0:	4605      	mov	r5, r0
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	685b      	ldr	r3, [r3, #4]
 80142d6:	6839      	ldr	r1, [r7, #0]
 80142d8:	4618      	mov	r0, r3
 80142da:	f000 f82e 	bl	801433a <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEELi3ENS_10DenseShapeES7_ffE5coeffEi>
 80142de:	eef0 7a40 	vmov.f32	s15, s0
 80142e2:	edc7 7a03 	vstr	s15, [r7, #12]
 80142e6:	f107 030c 	add.w	r3, r7, #12
 80142ea:	461a      	mov	r2, r3
 80142ec:	4629      	mov	r1, r5
 80142ee:	4620      	mov	r0, r4
 80142f0:	f7f3 fb4a 	bl	8007988 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 80142f4:	bf00      	nop
 80142f6:	3710      	adds	r7, #16
 80142f8:	46bd      	mov	sp, r7
 80142fa:	bdb0      	pop	{r4, r5, r7, pc}

080142fc <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 80142fc:	b580      	push	{r7, lr}
 80142fe:	b082      	sub	sp, #8
 8014300:	af00      	add	r7, sp, #0
 8014302:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8014304:	2101      	movs	r1, #1
 8014306:	6878      	ldr	r0, [r7, #4]
 8014308:	f7ff ffd5 	bl	80142b6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS2_INS_7ProductIS4_NS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 801430c:	6878      	ldr	r0, [r7, #4]
 801430e:	f000 f84d 	bl	80143ac <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSD_>
  }
 8014312:	bf00      	nop
 8014314:	3708      	adds	r7, #8
 8014316:	46bd      	mov	sp, r7
 8014318:	bd80      	pop	{r7, pc}

0801431a <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE8coeffRefEi>:
  Scalar& coeffRef(Index index)
 801431a:	b480      	push	{r7}
 801431c:	b083      	sub	sp, #12
 801431e:	af00      	add	r7, sp, #0
 8014320:	6078      	str	r0, [r7, #4]
 8014322:	6039      	str	r1, [r7, #0]
    return const_cast<Scalar*>(m_d.data)[index];
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	681a      	ldr	r2, [r3, #0]
 8014328:	683b      	ldr	r3, [r7, #0]
 801432a:	009b      	lsls	r3, r3, #2
 801432c:	4413      	add	r3, r2
  }
 801432e:	4618      	mov	r0, r3
 8014330:	370c      	adds	r7, #12
 8014332:	46bd      	mov	sp, r7
 8014334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014338:	4770      	bx	lr

0801433a <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEELi3ENS_10DenseShapeES7_ffE5coeffEi>:
  const CoeffReturnType coeff(Index index) const
 801433a:	b580      	push	{r7, lr}
 801433c:	b0a4      	sub	sp, #144	; 0x90
 801433e:	af00      	add	r7, sp, #0
 8014340:	6078      	str	r0, [r7, #4]
 8014342:	6039      	str	r1, [r7, #0]
    const Index row = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? 0 : index;
 8014344:	2300      	movs	r3, #0
 8014346:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    const Index col = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? index : 0;
 801434a:	683b      	ldr	r3, [r7, #0]
 801434c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	6819      	ldr	r1, [r3, #0]
 8014354:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014358:	2200      	movs	r2, #0
 801435a:	4618      	mov	r0, r3
 801435c:	f000 f835 	bl	80143ca <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE3rowEi>
 8014360:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014364:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8014368:	4611      	mov	r1, r2
 801436a:	4618      	mov	r0, r3
 801436c:	f000 f840 	bl	80143f0 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE9transposeEv>
 8014370:	687b      	ldr	r3, [r7, #4]
 8014372:	6859      	ldr	r1, [r3, #4]
 8014374:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8014378:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801437c:	4618      	mov	r0, r3
 801437e:	f7f7 f94a 	bl	800b616 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3colEi>
 8014382:	f107 030c 	add.w	r3, r7, #12
 8014386:	f107 0270 	add.w	r2, r7, #112	; 0x70
 801438a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 801438e:	4618      	mov	r0, r3
 8014390:	f000 f83f 	bl	8014412 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEE12cwiseProductINS2_IKNS3_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>
 8014394:	f107 030c 	add.w	r3, r7, #12
 8014398:	4618      	mov	r0, r3
 801439a:	f000 f868 	bl	801446e <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE3sumEv>
 801439e:	eef0 7a40 	vmov.f32	s15, s0
  }
 80143a2:	eeb0 0a67 	vmov.f32	s0, s15
 80143a6:	3790      	adds	r7, #144	; 0x90
 80143a8:	46bd      	mov	sp, r7
 80143aa:	bd80      	pop	{r7, pc}

080143ac <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 80143ac:	b580      	push	{r7, lr}
 80143ae:	b082      	sub	sp, #8
 80143b0:	af00      	add	r7, sp, #0
 80143b2:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 80143b4:	2102      	movs	r1, #2
 80143b6:	6878      	ldr	r0, [r7, #4]
 80143b8:	f7ff ff7d 	bl	80142b6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS2_INS_7ProductIS4_NS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80143bc:	6878      	ldr	r0, [r7, #4]
 80143be:	f000 f871 	bl	80144a4 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSD_>
  }
 80143c2:	bf00      	nop
 80143c4:	3708      	adds	r7, #8
 80143c6:	46bd      	mov	sp, r7
 80143c8:	bd80      	pop	{r7, pc}

080143ca <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE3rowEi>:
ConstRowXpr row(Index i) const
 80143ca:	b580      	push	{r7, lr}
 80143cc:	b084      	sub	sp, #16
 80143ce:	af00      	add	r7, sp, #0
 80143d0:	60f8      	str	r0, [r7, #12]
 80143d2:	60b9      	str	r1, [r7, #8]
 80143d4:	607a      	str	r2, [r7, #4]
  return ConstRowXpr(derived(), i);
 80143d6:	68b8      	ldr	r0, [r7, #8]
 80143d8:	f7f0 fe12 	bl	8005000 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 80143dc:	4603      	mov	r3, r0
 80143de:	687a      	ldr	r2, [r7, #4]
 80143e0:	4619      	mov	r1, r3
 80143e2:	68f8      	ldr	r0, [r7, #12]
 80143e4:	f000 f868 	bl	80144b8 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEC1ERS3_i>
}
 80143e8:	68f8      	ldr	r0, [r7, #12]
 80143ea:	3710      	adds	r7, #16
 80143ec:	46bd      	mov	sp, r7
 80143ee:	bd80      	pop	{r7, pc}

080143f0 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE9transposeEv>:
DenseBase<Derived>::transpose() const
 80143f0:	b580      	push	{r7, lr}
 80143f2:	b082      	sub	sp, #8
 80143f4:	af00      	add	r7, sp, #0
 80143f6:	6078      	str	r0, [r7, #4]
 80143f8:	6039      	str	r1, [r7, #0]
  return ConstTransposeReturnType(derived());
 80143fa:	6838      	ldr	r0, [r7, #0]
 80143fc:	f000 f886 	bl	801450c <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE7derivedEv>
 8014400:	4603      	mov	r3, r0
 8014402:	4619      	mov	r1, r3
 8014404:	6878      	ldr	r0, [r7, #4]
 8014406:	f000 f8a4 	bl	8014552 <_ZN5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1ERS6_>
}
 801440a:	6878      	ldr	r0, [r7, #4]
 801440c:	3708      	adds	r7, #8
 801440e:	46bd      	mov	sp, r7
 8014410:	bd80      	pop	{r7, pc}

08014412 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEE12cwiseProductINS2_IKNS3_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 8014412:	b5b0      	push	{r4, r5, r7, lr}
 8014414:	b086      	sub	sp, #24
 8014416:	af00      	add	r7, sp, #0
 8014418:	60f8      	str	r0, [r7, #12]
 801441a:	60b9      	str	r1, [r7, #8]
 801441c:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 801441e:	68b8      	ldr	r0, [r7, #8]
 8014420:	f000 f8ae 	bl	8014580 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEE7derivedEv>
 8014424:	4604      	mov	r4, r0
 8014426:	6878      	ldr	r0, [r7, #4]
 8014428:	f7f7 fec4 	bl	800c1b4 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE7derivedEv>
 801442c:	4605      	mov	r5, r0
 801442e:	f107 0314 	add.w	r3, r7, #20
 8014432:	4618      	mov	r0, r3
 8014434:	f7f0 f9aa 	bl	800478c <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 8014438:	f107 0314 	add.w	r3, r7, #20
 801443c:	462a      	mov	r2, r5
 801443e:	4621      	mov	r1, r4
 8014440:	68f8      	ldr	r0, [r7, #12]
 8014442:	f000 f8db 	bl	80145fc <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_>
}
 8014446:	68f8      	ldr	r0, [r7, #12]
 8014448:	3718      	adds	r7, #24
 801444a:	46bd      	mov	sp, r7
 801444c:	bdb0      	pop	{r4, r5, r7, pc}

0801444e <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 801444e:	b580      	push	{r7, lr}
 8014450:	b082      	sub	sp, #8
 8014452:	af00      	add	r7, sp, #0
 8014454:	6078      	str	r0, [r7, #4]
 8014456:	6878      	ldr	r0, [r7, #4]
 8014458:	f000 f92e 	bl	80146b8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE7derivedEv>
 801445c:	4603      	mov	r3, r0
 801445e:	4618      	mov	r0, r3
 8014460:	f000 f935 	bl	80146ce <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE4rowsEv>
 8014464:	4603      	mov	r3, r0
 8014466:	4618      	mov	r0, r3
 8014468:	3708      	adds	r7, #8
 801446a:	46bd      	mov	sp, r7
 801446c:	bd80      	pop	{r7, pc}

0801446e <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 801446e:	b590      	push	{r4, r7, lr}
 8014470:	b085      	sub	sp, #20
 8014472:	af00      	add	r7, sp, #0
 8014474:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 8014476:	6878      	ldr	r0, [r7, #4]
 8014478:	f000 f91e 	bl	80146b8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE7derivedEv>
 801447c:	4604      	mov	r4, r0
 801447e:	f107 030c 	add.w	r3, r7, #12
 8014482:	4618      	mov	r0, r3
 8014484:	f7f0 fc79 	bl	8004d7a <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 8014488:	f107 030c 	add.w	r3, r7, #12
 801448c:	4619      	mov	r1, r3
 801448e:	4620      	mov	r0, r4
 8014490:	f000 f9c4 	bl	801481c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 8014494:	eef0 7a40 	vmov.f32	s15, s0
 8014498:	bf00      	nop
}
 801449a:	eeb0 0a67 	vmov.f32	s0, s15
 801449e:	3714      	adds	r7, #20
 80144a0:	46bd      	mov	sp, r7
 80144a2:	bd90      	pop	{r4, r7, pc}

080144a4 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 80144a4:	b480      	push	{r7}
 80144a6:	b083      	sub	sp, #12
 80144a8:	af00      	add	r7, sp, #0
 80144aa:	6078      	str	r0, [r7, #4]
 80144ac:	bf00      	nop
 80144ae:	370c      	adds	r7, #12
 80144b0:	46bd      	mov	sp, r7
 80144b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144b6:	4770      	bx	lr

080144b8 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 80144b8:	b580      	push	{r7, lr}
 80144ba:	b084      	sub	sp, #16
 80144bc:	af00      	add	r7, sp, #0
 80144be:	60f8      	str	r0, [r7, #12]
 80144c0:	60b9      	str	r1, [r7, #8]
 80144c2:	607a      	str	r2, [r7, #4]
 80144c4:	68fb      	ldr	r3, [r7, #12]
 80144c6:	687a      	ldr	r2, [r7, #4]
 80144c8:	68b9      	ldr	r1, [r7, #8]
 80144ca:	4618      	mov	r0, r3
 80144cc:	f000 f9ec 	bl	80148a8 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	db07      	blt.n	80144e6 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEC1ERS3_i+0x2e>
 80144d6:	68bb      	ldr	r3, [r7, #8]
 80144d8:	4618      	mov	r0, r3
 80144da:	f7f0 f878 	bl	80045ce <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 80144de:	4602      	mov	r2, r0
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	4293      	cmp	r3, r2
 80144e4:	db05      	blt.n	80144f2 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEC1ERS3_i+0x3a>
 80144e6:	4b06      	ldr	r3, [pc, #24]	; (8014500 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEC1ERS3_i+0x48>)
 80144e8:	4a06      	ldr	r2, [pc, #24]	; (8014504 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEC1ERS3_i+0x4c>)
 80144ea:	2178      	movs	r1, #120	; 0x78
 80144ec:	4806      	ldr	r0, [pc, #24]	; (8014508 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEC1ERS3_i+0x50>)
 80144ee:	f008 fda1 	bl	801d034 <__assert_func>
 80144f2:	bf00      	nop
    }
 80144f4:	68fb      	ldr	r3, [r7, #12]
 80144f6:	4618      	mov	r0, r3
 80144f8:	3710      	adds	r7, #16
 80144fa:	46bd      	mov	sp, r7
 80144fc:	bd80      	pop	{r7, pc}
 80144fe:	bf00      	nop
 8014500:	08023a20 	.word	0x08023a20
 8014504:	08028aa0 	.word	0x08028aa0
 8014508:	08023ba4 	.word	0x08023ba4

0801450c <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 801450c:	b480      	push	{r7}
 801450e:	b083      	sub	sp, #12
 8014510:	af00      	add	r7, sp, #0
 8014512:	6078      	str	r0, [r7, #4]
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	4618      	mov	r0, r3
 8014518:	370c      	adds	r7, #12
 801451a:	46bd      	mov	sp, r7
 801451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014520:	4770      	bx	lr

08014522 <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1Ev>:
 8014522:	b580      	push	{r7, lr}
 8014524:	b082      	sub	sp, #8
 8014526:	af00      	add	r7, sp, #0
 8014528:	6078      	str	r0, [r7, #4]
 801452a:	6878      	ldr	r0, [r7, #4]
 801452c:	f000 f9cd 	bl	80148ca <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1Ev>
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	4618      	mov	r0, r3
 8014534:	3708      	adds	r7, #8
 8014536:	46bd      	mov	sp, r7
 8014538:	bd80      	pop	{r7, pc}

0801453a <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 801453a:	b580      	push	{r7, lr}
 801453c:	b082      	sub	sp, #8
 801453e:	af00      	add	r7, sp, #0
 8014540:	6078      	str	r0, [r7, #4]
 8014542:	6878      	ldr	r0, [r7, #4]
 8014544:	f7ff ffed 	bl	8014522 <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1Ev>
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	4618      	mov	r0, r3
 801454c:	3708      	adds	r7, #8
 801454e:	46bd      	mov	sp, r7
 8014550:	bd80      	pop	{r7, pc}

08014552 <_ZN5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1ERS6_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 8014552:	b5b0      	push	{r4, r5, r7, lr}
 8014554:	b082      	sub	sp, #8
 8014556:	af00      	add	r7, sp, #0
 8014558:	6078      	str	r0, [r7, #4]
 801455a:	6039      	str	r1, [r7, #0]
 801455c:	6878      	ldr	r0, [r7, #4]
 801455e:	f7ff ffec 	bl	801453a <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEENS_5DenseEEC1Ev>
 8014562:	687a      	ldr	r2, [r7, #4]
 8014564:	683b      	ldr	r3, [r7, #0]
 8014566:	4614      	mov	r4, r2
 8014568:	461d      	mov	r5, r3
 801456a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801456c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801456e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014572:	e884 0003 	stmia.w	r4, {r0, r1}
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	4618      	mov	r0, r3
 801457a:	3708      	adds	r7, #8
 801457c:	46bd      	mov	sp, r7
 801457e:	bdb0      	pop	{r4, r5, r7, pc}

08014580 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEE7derivedEv>:
 8014580:	b480      	push	{r7}
 8014582:	b083      	sub	sp, #12
 8014584:	af00      	add	r7, sp, #0
 8014586:	6078      	str	r0, [r7, #4]
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	4618      	mov	r0, r3
 801458c:	370c      	adds	r7, #12
 801458e:	46bd      	mov	sp, r7
 8014590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014594:	4770      	bx	lr

08014596 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1Ev>:
 8014596:	b580      	push	{r7, lr}
 8014598:	b082      	sub	sp, #8
 801459a:	af00      	add	r7, sp, #0
 801459c:	6078      	str	r0, [r7, #4]
 801459e:	6878      	ldr	r0, [r7, #4]
 80145a0:	f000 f99e 	bl	80148e0 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1Ev>
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	4618      	mov	r0, r3
 80145a8:	3708      	adds	r7, #8
 80145aa:	46bd      	mov	sp, r7
 80145ac:	bd80      	pop	{r7, pc}

080145ae <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 80145ae:	b580      	push	{r7, lr}
 80145b0:	b082      	sub	sp, #8
 80145b2:	af00      	add	r7, sp, #0
 80145b4:	6078      	str	r0, [r7, #4]
 80145b6:	6878      	ldr	r0, [r7, #4]
 80145b8:	f7ff ffed 	bl	8014596 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1Ev>
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	4618      	mov	r0, r3
 80145c0:	3708      	adds	r7, #8
 80145c2:	46bd      	mov	sp, r7
 80145c4:	bd80      	pop	{r7, pc}

080145c6 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 80145c6:	b580      	push	{r7, lr}
 80145c8:	b082      	sub	sp, #8
 80145ca:	af00      	add	r7, sp, #0
 80145cc:	6078      	str	r0, [r7, #4]
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	4618      	mov	r0, r3
 80145d2:	f000 f990 	bl	80148f6 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE4colsEv>
 80145d6:	4603      	mov	r3, r0
 80145d8:	4618      	mov	r0, r3
 80145da:	3708      	adds	r7, #8
 80145dc:	46bd      	mov	sp, r7
 80145de:	bd80      	pop	{r7, pc}

080145e0 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 80145e0:	b580      	push	{r7, lr}
 80145e2:	b082      	sub	sp, #8
 80145e4:	af00      	add	r7, sp, #0
 80145e6:	6078      	str	r0, [r7, #4]
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	4618      	mov	r0, r3
 80145ec:	f000 f98e 	bl	801490c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE4rowsEv>
 80145f0:	4603      	mov	r3, r0
 80145f2:	4618      	mov	r0, r3
 80145f4:	3708      	adds	r7, #8
 80145f6:	46bd      	mov	sp, r7
 80145f8:	bd80      	pop	{r7, pc}
	...

080145fc <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 80145fc:	b5b0      	push	{r4, r5, r7, lr}
 80145fe:	b084      	sub	sp, #16
 8014600:	af00      	add	r7, sp, #0
 8014602:	60f8      	str	r0, [r7, #12]
 8014604:	60b9      	str	r1, [r7, #8]
 8014606:	607a      	str	r2, [r7, #4]
 8014608:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 801460a:	68f8      	ldr	r0, [r7, #12]
 801460c:	f7ff ffcf 	bl	80145ae <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS_5DenseEEC1Ev>
 8014610:	68fa      	ldr	r2, [r7, #12]
 8014612:	68bb      	ldr	r3, [r7, #8]
 8014614:	4614      	mov	r4, r2
 8014616:	461d      	mov	r5, r3
 8014618:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801461a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801461c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014620:	e884 0003 	stmia.w	r4, {r0, r1}
 8014624:	68fb      	ldr	r3, [r7, #12]
 8014626:	f103 0218 	add.w	r2, r3, #24
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	4614      	mov	r4, r2
 801462e:	461d      	mov	r5, r3
 8014630:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014632:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014634:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014638:	e884 0003 	stmia.w	r4, {r0, r1}
 801463c:	68fb      	ldr	r3, [r7, #12]
 801463e:	3330      	adds	r3, #48	; 0x30
 8014640:	6839      	ldr	r1, [r7, #0]
 8014642:	4618      	mov	r0, r3
 8014644:	f7f0 f92c 	bl	80048a0 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8014648:	68b8      	ldr	r0, [r7, #8]
 801464a:	f7ff ffbc 	bl	80145c6 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE4rowsEv>
 801464e:	4604      	mov	r4, r0
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	4618      	mov	r0, r3
 8014654:	f7f7 fdd1 	bl	800c1fa <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4rowsEv>
 8014658:	4603      	mov	r3, r0
 801465a:	429c      	cmp	r4, r3
 801465c:	d10a      	bne.n	8014674 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x78>
 801465e:	68b8      	ldr	r0, [r7, #8]
 8014660:	f7ff ffbe 	bl	80145e0 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE4colsEv>
 8014664:	4604      	mov	r4, r0
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	4618      	mov	r0, r3
 801466a:	f7f7 fdd1 	bl	800c210 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4colsEv>
 801466e:	4603      	mov	r3, r0
 8014670:	429c      	cmp	r4, r3
 8014672:	d005      	beq.n	8014680 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x84>
 8014674:	4b05      	ldr	r3, [pc, #20]	; (801468c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x90>)
 8014676:	4a06      	ldr	r2, [pc, #24]	; (8014690 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x94>)
 8014678:	2174      	movs	r1, #116	; 0x74
 801467a:	4806      	ldr	r0, [pc, #24]	; (8014694 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x98>)
 801467c:	f008 fcda 	bl	801d034 <__assert_func>
    }
 8014680:	68fb      	ldr	r3, [r7, #12]
 8014682:	4618      	mov	r0, r3
 8014684:	3710      	adds	r7, #16
 8014686:	46bd      	mov	sp, r7
 8014688:	bdb0      	pop	{r4, r5, r7, pc}
 801468a:	bf00      	nop
 801468c:	0801ee9c 	.word	0x0801ee9c
 8014690:	08028b7c 	.word	0x08028b7c
 8014694:	0801f100 	.word	0x0801f100

08014698 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 8014698:	b580      	push	{r7, lr}
 801469a:	b082      	sub	sp, #8
 801469c:	af00      	add	r7, sp, #0
 801469e:	6078      	str	r0, [r7, #4]
 80146a0:	6878      	ldr	r0, [r7, #4]
 80146a2:	f000 f809 	bl	80146b8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE7derivedEv>
 80146a6:	4603      	mov	r3, r0
 80146a8:	4618      	mov	r0, r3
 80146aa:	f000 f93a 	bl	8014922 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE4colsEv>
 80146ae:	4603      	mov	r3, r0
 80146b0:	4618      	mov	r0, r3
 80146b2:	3708      	adds	r7, #8
 80146b4:	46bd      	mov	sp, r7
 80146b6:	bd80      	pop	{r7, pc}

080146b8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 80146b8:	b480      	push	{r7}
 80146ba:	b083      	sub	sp, #12
 80146bc:	af00      	add	r7, sp, #0
 80146be:	6078      	str	r0, [r7, #4]
 80146c0:	687b      	ldr	r3, [r7, #4]
 80146c2:	4618      	mov	r0, r3
 80146c4:	370c      	adds	r7, #12
 80146c6:	46bd      	mov	sp, r7
 80146c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146cc:	4770      	bx	lr

080146ce <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 80146ce:	b580      	push	{r7, lr}
 80146d0:	b082      	sub	sp, #8
 80146d2:	af00      	add	r7, sp, #0
 80146d4:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	4618      	mov	r0, r3
 80146da:	f7ff ff74 	bl	80145c6 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE4rowsEv>
 80146de:	4603      	mov	r3, r0
    }
 80146e0:	4618      	mov	r0, r3
 80146e2:	3708      	adds	r7, #8
 80146e4:	46bd      	mov	sp, r7
 80146e6:	bd80      	pop	{r7, pc}

080146e8 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_ED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 80146e8:	b580      	push	{r7, lr}
 80146ea:	b082      	sub	sp, #8
 80146ec:	af00      	add	r7, sp, #0
 80146ee:	6078      	str	r0, [r7, #4]
 80146f0:	6878      	ldr	r0, [r7, #4]
 80146f2:	f000 f948 	bl	8014986 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEED1Ev>
 80146f6:	687b      	ldr	r3, [r7, #4]
 80146f8:	4618      	mov	r0, r3
 80146fa:	3708      	adds	r7, #8
 80146fc:	46bd      	mov	sp, r7
 80146fe:	bd80      	pop	{r7, pc}

08014700 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 8014700:	b580      	push	{r7, lr}
 8014702:	b082      	sub	sp, #8
 8014704:	af00      	add	r7, sp, #0
 8014706:	6078      	str	r0, [r7, #4]
 8014708:	687b      	ldr	r3, [r7, #4]
 801470a:	4618      	mov	r0, r3
 801470c:	f7ff ffec 	bl	80146e8 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_ED1Ev>
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	4618      	mov	r0, r3
 8014714:	3708      	adds	r7, #8
 8014716:	46bd      	mov	sp, r7
 8014718:	bd80      	pop	{r7, pc}

0801471a <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 801471a:	b580      	push	{r7, lr}
 801471c:	b082      	sub	sp, #8
 801471e:	af00      	add	r7, sp, #0
 8014720:	6078      	str	r0, [r7, #4]
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	4618      	mov	r0, r3
 8014726:	f7ff ffeb 	bl	8014700 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EED1Ev>
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	4618      	mov	r0, r3
 801472e:	3708      	adds	r7, #8
 8014730:	46bd      	mov	sp, r7
 8014732:	bd80      	pop	{r7, pc}

08014734 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEED1Ev>:
struct evaluator<const T>
 8014734:	b580      	push	{r7, lr}
 8014736:	b082      	sub	sp, #8
 8014738:	af00      	add	r7, sp, #0
 801473a:	6078      	str	r0, [r7, #4]
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	4618      	mov	r0, r3
 8014740:	f7ff ffeb 	bl	801471a <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEED1Ev>
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	4618      	mov	r0, r3
 8014748:	3708      	adds	r7, #8
 801474a:	46bd      	mov	sp, r7
 801474c:	bd80      	pop	{r7, pc}

0801474e <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 801474e:	b580      	push	{r7, lr}
 8014750:	b082      	sub	sp, #8
 8014752:	af00      	add	r7, sp, #0
 8014754:	6078      	str	r0, [r7, #4]
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	4618      	mov	r0, r3
 801475a:	f7ff ffeb 	bl	8014734 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEED1Ev>
 801475e:	6878      	ldr	r0, [r7, #4]
 8014760:	f000 f906 	bl	8014970 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEED1Ev>
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	4618      	mov	r0, r3
 8014768:	3708      	adds	r7, #8
 801476a:	46bd      	mov	sp, r7
 801476c:	bd80      	pop	{r7, pc}

0801476e <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 801476e:	b580      	push	{r7, lr}
 8014770:	b082      	sub	sp, #8
 8014772:	af00      	add	r7, sp, #0
 8014774:	6078      	str	r0, [r7, #4]
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	4618      	mov	r0, r3
 801477a:	f7ff ffe8 	bl	801474e <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEENS0_10IndexBasedEfED1Ev>
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	4618      	mov	r0, r3
 8014782:	3708      	adds	r7, #8
 8014784:	46bd      	mov	sp, r7
 8014786:	bd80      	pop	{r7, pc}

08014788 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEED1Ev>:
struct evaluator<const T>
 8014788:	b580      	push	{r7, lr}
 801478a:	b082      	sub	sp, #8
 801478c:	af00      	add	r7, sp, #0
 801478e:	6078      	str	r0, [r7, #4]
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	4618      	mov	r0, r3
 8014794:	f7ff ffeb 	bl	801476e <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEED1Ev>
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	4618      	mov	r0, r3
 801479c:	3708      	adds	r7, #8
 801479e:	46bd      	mov	sp, r7
 80147a0:	bd80      	pop	{r7, pc}

080147a2 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>:
  struct Data
 80147a2:	b580      	push	{r7, lr}
 80147a4:	b082      	sub	sp, #8
 80147a6:	af00      	add	r7, sp, #0
 80147a8:	6078      	str	r0, [r7, #4]
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	330c      	adds	r3, #12
 80147ae:	4618      	mov	r0, r3
 80147b0:	f7f7 fdd6 	bl	800c360 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	3304      	adds	r3, #4
 80147b8:	4618      	mov	r0, r3
 80147ba:	f7ff ffe5 	bl	8014788 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEED1Ev>
 80147be:	687b      	ldr	r3, [r7, #4]
 80147c0:	4618      	mov	r0, r3
 80147c2:	3708      	adds	r7, #8
 80147c4:	46bd      	mov	sp, r7
 80147c6:	bd80      	pop	{r7, pc}

080147c8 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 80147c8:	b580      	push	{r7, lr}
 80147ca:	b082      	sub	sp, #8
 80147cc:	af00      	add	r7, sp, #0
 80147ce:	6078      	str	r0, [r7, #4]
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	4618      	mov	r0, r3
 80147d4:	f7ff ffe5 	bl	80147a2 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>
 80147d8:	6878      	ldr	r0, [r7, #4]
 80147da:	f000 f8be 	bl	801495a <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEED1Ev>
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	4618      	mov	r0, r3
 80147e2:	3708      	adds	r7, #8
 80147e4:	46bd      	mov	sp, r7
 80147e6:	bd80      	pop	{r7, pc}

080147e8 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 80147e8:	b580      	push	{r7, lr}
 80147ea:	b082      	sub	sp, #8
 80147ec:	af00      	add	r7, sp, #0
 80147ee:	6078      	str	r0, [r7, #4]
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	4618      	mov	r0, r3
 80147f4:	f7ff ffe8 	bl	80147c8 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffED1Ev>
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	4618      	mov	r0, r3
 80147fc:	3708      	adds	r7, #8
 80147fe:	46bd      	mov	sp, r7
 8014800:	bd80      	pop	{r7, pc}

08014802 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 8014802:	b580      	push	{r7, lr}
 8014804:	b082      	sub	sp, #8
 8014806:	af00      	add	r7, sp, #0
 8014808:	6078      	str	r0, [r7, #4]
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	4618      	mov	r0, r3
 801480e:	f7ff ffeb 	bl	80147e8 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEED1Ev>
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	4618      	mov	r0, r3
 8014816:	3708      	adds	r7, #8
 8014818:	46bd      	mov	sp, r7
 801481a:	bd80      	pop	{r7, pc}

0801481c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 801481c:	b580      	push	{r7, lr}
 801481e:	ed2d 8b02 	vpush	{d8}
 8014822:	b088      	sub	sp, #32
 8014824:	af00      	add	r7, sp, #0
 8014826:	6078      	str	r0, [r7, #4]
 8014828:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 801482a:	6878      	ldr	r0, [r7, #4]
 801482c:	f7ff fe0f 	bl	801444e <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE4rowsEv>
 8014830:	4603      	mov	r3, r0
 8014832:	2b00      	cmp	r3, #0
 8014834:	dd05      	ble.n	8014842 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 8014836:	6878      	ldr	r0, [r7, #4]
 8014838:	f7ff ff2e 	bl	8014698 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE4colsEv>
 801483c:	4603      	mov	r3, r0
 801483e:	2b00      	cmp	r3, #0
 8014840:	dc06      	bgt.n	8014850 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 8014842:	4b16      	ldr	r3, [pc, #88]	; (801489c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 8014844:	4a16      	ldr	r2, [pc, #88]	; (80148a0 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 8014846:	f240 119b 	movw	r1, #411	; 0x19b
 801484a:	4816      	ldr	r0, [pc, #88]	; (80148a4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 801484c:	f008 fbf2 	bl	801d034 <__assert_func>
 8014850:	bf00      	nop
  ThisEvaluator thisEval(derived());
 8014852:	6878      	ldr	r0, [r7, #4]
 8014854:	f7ff ff30 	bl	80146b8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE7derivedEv>
 8014858:	4602      	mov	r2, r0
 801485a:	f107 030c 	add.w	r3, r7, #12
 801485e:	4611      	mov	r1, r2
 8014860:	4618      	mov	r0, r3
 8014862:	f000 f86b 	bl	801493c <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1ERKSI_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 8014866:	6878      	ldr	r0, [r7, #4]
 8014868:	f7ff ff26 	bl	80146b8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE7derivedEv>
 801486c:	4602      	mov	r2, r0
 801486e:	f107 030c 	add.w	r3, r7, #12
 8014872:	6839      	ldr	r1, [r7, #0]
 8014874:	4618      	mov	r0, r3
 8014876:	f000 f891 	bl	801499c <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>
 801487a:	eeb0 8a40 	vmov.f32	s16, s0
 801487e:	bf00      	nop
  ThisEvaluator thisEval(derived());
 8014880:	f107 030c 	add.w	r3, r7, #12
 8014884:	4618      	mov	r0, r3
 8014886:	f7ff ffbc 	bl	8014802 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 801488a:	eef0 7a48 	vmov.f32	s15, s16
}
 801488e:	eeb0 0a67 	vmov.f32	s0, s15
 8014892:	3720      	adds	r7, #32
 8014894:	46bd      	mov	sp, r7
 8014896:	ecbd 8b02 	vpop	{d8}
 801489a:	bd80      	pop	{r7, pc}
 801489c:	08023f1c 	.word	0x08023f1c
 80148a0:	08028dc4 	.word	0x08028dc4
 80148a4:	08024128 	.word	0x08024128

080148a8 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ENS_5DenseEEC1ERS3_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 80148a8:	b580      	push	{r7, lr}
 80148aa:	b084      	sub	sp, #16
 80148ac:	af00      	add	r7, sp, #0
 80148ae:	60f8      	str	r0, [r7, #12]
 80148b0:	60b9      	str	r1, [r7, #8]
 80148b2:	607a      	str	r2, [r7, #4]
 80148b4:	68fb      	ldr	r3, [r7, #12]
 80148b6:	687a      	ldr	r2, [r7, #4]
 80148b8:	68b9      	ldr	r1, [r7, #8]
 80148ba:	4618      	mov	r0, r3
 80148bc:	f000 f87f 	bl	80149be <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EEC1ERS4_i>
 80148c0:	68fb      	ldr	r3, [r7, #12]
 80148c2:	4618      	mov	r0, r3
 80148c4:	3710      	adds	r7, #16
 80148c6:	46bd      	mov	sp, r7
 80148c8:	bd80      	pop	{r7, pc}

080148ca <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80148ca:	b480      	push	{r7}
 80148cc:	b083      	sub	sp, #12
 80148ce:	af00      	add	r7, sp, #0
 80148d0:	6078      	str	r0, [r7, #4]
    }
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	4618      	mov	r0, r3
 80148d6:	370c      	adds	r7, #12
 80148d8:	46bd      	mov	sp, r7
 80148da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148de:	4770      	bx	lr

080148e0 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80148e0:	b480      	push	{r7}
 80148e2:	b083      	sub	sp, #12
 80148e4:	af00      	add	r7, sp, #0
 80148e6:	6078      	str	r0, [r7, #4]
    }
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	4618      	mov	r0, r3
 80148ec:	370c      	adds	r7, #12
 80148ee:	46bd      	mov	sp, r7
 80148f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148f4:	4770      	bx	lr

080148f6 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 80148f6:	b580      	push	{r7, lr}
 80148f8:	b082      	sub	sp, #8
 80148fa:	af00      	add	r7, sp, #0
 80148fc:	6078      	str	r0, [r7, #4]
 80148fe:	f7f1 fa6e 	bl	8005dde <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 8014902:	4603      	mov	r3, r0
 8014904:	4618      	mov	r0, r3
 8014906:	3708      	adds	r7, #8
 8014908:	46bd      	mov	sp, r7
 801490a:	bd80      	pop	{r7, pc}

0801490c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 801490c:	b580      	push	{r7, lr}
 801490e:	b082      	sub	sp, #8
 8014910:	af00      	add	r7, sp, #0
 8014912:	6078      	str	r0, [r7, #4]
 8014914:	f7f1 fa6b 	bl	8005dee <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 8014918:	4603      	mov	r3, r0
 801491a:	4618      	mov	r0, r3
 801491c:	3708      	adds	r7, #8
 801491e:	46bd      	mov	sp, r7
 8014920:	bd80      	pop	{r7, pc}

08014922 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 8014922:	b580      	push	{r7, lr}
 8014924:	b082      	sub	sp, #8
 8014926:	af00      	add	r7, sp, #0
 8014928:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	4618      	mov	r0, r3
 801492e:	f7ff fe57 	bl	80145e0 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE4colsEv>
 8014932:	4603      	mov	r3, r0
    }
 8014934:	4618      	mov	r0, r3
 8014936:	3708      	adds	r7, #8
 8014938:	46bd      	mov	sp, r7
 801493a:	bd80      	pop	{r7, pc}

0801493c <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1ERKSI_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 801493c:	b580      	push	{r7, lr}
 801493e:	b082      	sub	sp, #8
 8014940:	af00      	add	r7, sp, #0
 8014942:	6078      	str	r0, [r7, #4]
 8014944:	6039      	str	r1, [r7, #0]
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	6839      	ldr	r1, [r7, #0]
 801494a:	4618      	mov	r0, r3
 801494c:	f000 f86d 	bl	8014a2a <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1ERKSI_>
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	4618      	mov	r0, r3
 8014954:	3708      	adds	r7, #8
 8014956:	46bd      	mov	sp, r7
 8014958:	bd80      	pop	{r7, pc}

0801495a <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 801495a:	b480      	push	{r7}
 801495c:	b083      	sub	sp, #12
 801495e:	af00      	add	r7, sp, #0
 8014960:	6078      	str	r0, [r7, #4]
 8014962:	687b      	ldr	r3, [r7, #4]
 8014964:	4618      	mov	r0, r3
 8014966:	370c      	adds	r7, #12
 8014968:	46bd      	mov	sp, r7
 801496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801496e:	4770      	bx	lr

08014970 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEED1Ev>:
 8014970:	b480      	push	{r7}
 8014972:	b083      	sub	sp, #12
 8014974:	af00      	add	r7, sp, #0
 8014976:	6078      	str	r0, [r7, #4]
 8014978:	687b      	ldr	r3, [r7, #4]
 801497a:	4618      	mov	r0, r3
 801497c:	370c      	adds	r7, #12
 801497e:	46bd      	mov	sp, r7
 8014980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014984:	4770      	bx	lr

08014986 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEED1Ev>:
 8014986:	b480      	push	{r7}
 8014988:	b083      	sub	sp, #12
 801498a:	af00      	add	r7, sp, #0
 801498c:	6078      	str	r0, [r7, #4]
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	4618      	mov	r0, r3
 8014992:	370c      	adds	r7, #12
 8014994:	46bd      	mov	sp, r7
 8014996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801499a:	4770      	bx	lr

0801499c <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 801499c:	b580      	push	{r7, lr}
 801499e:	b084      	sub	sp, #16
 80149a0:	af00      	add	r7, sp, #0
 80149a2:	60f8      	str	r0, [r7, #12]
 80149a4:	60b9      	str	r1, [r7, #8]
 80149a6:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 80149a8:	68b9      	ldr	r1, [r7, #8]
 80149aa:	68f8      	ldr	r0, [r7, #12]
 80149ac:	f000 f84c 	bl	8014a48 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi0ELi3EE3runERKSM_RKS3_>
 80149b0:	eef0 7a40 	vmov.f32	s15, s0
  }
 80149b4:	eeb0 0a67 	vmov.f32	s0, s15
 80149b8:	3710      	adds	r7, #16
 80149ba:	46bd      	mov	sp, r7
 80149bc:	bd80      	pop	{r7, pc}

080149be <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EEC1ERS4_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 80149be:	b5b0      	push	{r4, r5, r7, lr}
 80149c0:	b084      	sub	sp, #16
 80149c2:	af00      	add	r7, sp, #0
 80149c4:	60f8      	str	r0, [r7, #12]
 80149c6:	60b9      	str	r1, [r7, #8]
 80149c8:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 80149ca:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 80149cc:	68bb      	ldr	r3, [r7, #8]
 80149ce:	4618      	mov	r0, r3
 80149d0:	f7fd f866 	bl	8011aa0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4dataEv>
 80149d4:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 80149d6:	68b8      	ldr	r0, [r7, #8]
 80149d8:	f7fd fa90 	bl	8011efc <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11outerStrideEv>
 80149dc:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	fb02 f303 	mul.w	r3, r2, r3
 80149e4:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 80149e6:	441d      	add	r5, r3
 80149e8:	68bb      	ldr	r3, [r7, #8]
 80149ea:	4618      	mov	r0, r3
 80149ec:	f7ef fde4 	bl	80045b8 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 80149f0:	4603      	mov	r3, r0
 80149f2:	2201      	movs	r2, #1
 80149f4:	4629      	mov	r1, r5
 80149f6:	4620      	mov	r0, r4
 80149f8:	f000 f856 	bl	8014aa8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii>
 80149fc:	68fb      	ldr	r3, [r7, #12]
 80149fe:	68ba      	ldr	r2, [r7, #8]
 8014a00:	609a      	str	r2, [r3, #8]
 8014a02:	68fb      	ldr	r3, [r7, #12]
 8014a04:	330c      	adds	r3, #12
 8014a06:	6879      	ldr	r1, [r7, #4]
 8014a08:	4618      	mov	r0, r3
 8014a0a:	f7f8 faab 	bl	800cf64 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
 8014a0e:	68fb      	ldr	r3, [r7, #12]
 8014a10:	3310      	adds	r3, #16
 8014a12:	2100      	movs	r1, #0
 8014a14:	4618      	mov	r0, r3
 8014a16:	f7f8 fa31 	bl	800ce7c <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
      init();
 8014a1a:	68f8      	ldr	r0, [r7, #12]
 8014a1c:	f000 f882 	bl	8014b24 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EE4initEv>
    }
 8014a20:	68fb      	ldr	r3, [r7, #12]
 8014a22:	4618      	mov	r0, r3
 8014a24:	3710      	adds	r7, #16
 8014a26:	46bd      	mov	sp, r7
 8014a28:	bdb0      	pop	{r4, r5, r7, pc}

08014a2a <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1ERKSI_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8014a2a:	b580      	push	{r7, lr}
 8014a2c:	b082      	sub	sp, #8
 8014a2e:	af00      	add	r7, sp, #0
 8014a30:	6078      	str	r0, [r7, #4]
 8014a32:	6039      	str	r1, [r7, #0]
 8014a34:	687b      	ldr	r3, [r7, #4]
 8014a36:	6839      	ldr	r1, [r7, #0]
 8014a38:	4618      	mov	r0, r3
 8014a3a:	f000 f883 	bl	8014b44 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	4618      	mov	r0, r3
 8014a42:	3708      	adds	r7, #8
 8014a44:	46bd      	mov	sp, r7
 8014a46:	bd80      	pop	{r7, pc}

08014a48 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi0ELi3EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 8014a48:	b580      	push	{r7, lr}
 8014a4a:	b084      	sub	sp, #16
 8014a4c:	af00      	add	r7, sp, #0
 8014a4e:	6078      	str	r0, [r7, #4]
 8014a50:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8014a52:	6839      	ldr	r1, [r7, #0]
 8014a54:	6878      	ldr	r0, [r7, #4]
 8014a56:	f000 f887 	bl	8014b68 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi0ELi1EE3runERKSM_RKS3_>
 8014a5a:	eef0 7a40 	vmov.f32	s15, s0
 8014a5e:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 8014a62:	6839      	ldr	r1, [r7, #0]
 8014a64:	6878      	ldr	r0, [r7, #4]
 8014a66:	f000 f890 	bl	8014b8a <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi1ELi2EE3runERKSM_RKS3_>
 8014a6a:	eef0 7a40 	vmov.f32	s15, s0
 8014a6e:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8014a72:	f107 020c 	add.w	r2, r7, #12
 8014a76:	f107 0308 	add.w	r3, r7, #8
 8014a7a:	4619      	mov	r1, r3
 8014a7c:	6838      	ldr	r0, [r7, #0]
 8014a7e:	f7f3 fd74 	bl	800856a <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 8014a82:	eef0 7a40 	vmov.f32	s15, s0
  }
 8014a86:	eeb0 0a67 	vmov.f32	s0, s15
 8014a8a:	3710      	adds	r7, #16
 8014a8c:	46bd      	mov	sp, r7
 8014a8e:	bd80      	pop	{r7, pc}

08014a90 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1Ev>:
 8014a90:	b580      	push	{r7, lr}
 8014a92:	b082      	sub	sp, #8
 8014a94:	af00      	add	r7, sp, #0
 8014a96:	6078      	str	r0, [r7, #4]
 8014a98:	6878      	ldr	r0, [r7, #4]
 8014a9a:	f000 f89a 	bl	8014bd2 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1Ev>
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	4618      	mov	r0, r3
 8014aa2:	3708      	adds	r7, #8
 8014aa4:	46bd      	mov	sp, r7
 8014aa6:	bd80      	pop	{r7, pc}

08014aa8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 8014aa8:	b580      	push	{r7, lr}
 8014aaa:	b084      	sub	sp, #16
 8014aac:	af00      	add	r7, sp, #0
 8014aae:	60f8      	str	r0, [r7, #12]
 8014ab0:	60b9      	str	r1, [r7, #8]
 8014ab2:	607a      	str	r2, [r7, #4]
 8014ab4:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 8014ab6:	68f8      	ldr	r0, [r7, #12]
 8014ab8:	f7ff ffea 	bl	8014a90 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1Ev>
 8014abc:	68fb      	ldr	r3, [r7, #12]
 8014abe:	68ba      	ldr	r2, [r7, #8]
 8014ac0:	601a      	str	r2, [r3, #0]
 8014ac2:	68fb      	ldr	r3, [r7, #12]
 8014ac4:	3304      	adds	r3, #4
 8014ac6:	6879      	ldr	r1, [r7, #4]
 8014ac8:	4618      	mov	r0, r3
 8014aca:	f7f1 f963 	bl	8005d94 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 8014ace:	68fb      	ldr	r3, [r7, #12]
 8014ad0:	3305      	adds	r3, #5
 8014ad2:	6839      	ldr	r1, [r7, #0]
 8014ad4:	4618      	mov	r0, r3
 8014ad6:	f7f1 f943 	bl	8005d60 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
      eigen_assert( (dataPtr == 0)
 8014ada:	68bb      	ldr	r3, [r7, #8]
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	d011      	beq.n	8014b04 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x5c>
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	2b00      	cmp	r3, #0
 8014ae4:	db08      	blt.n	8014af8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x50>
 8014ae6:	687b      	ldr	r3, [r7, #4]
 8014ae8:	2b01      	cmp	r3, #1
 8014aea:	d105      	bne.n	8014af8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x50>
 8014aec:	683b      	ldr	r3, [r7, #0]
 8014aee:	2b00      	cmp	r3, #0
 8014af0:	db02      	blt.n	8014af8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x50>
 8014af2:	683b      	ldr	r3, [r7, #0]
 8014af4:	2b03      	cmp	r3, #3
 8014af6:	d005      	beq.n	8014b04 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x5c>
 8014af8:	4b07      	ldr	r3, [pc, #28]	; (8014b18 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x70>)
 8014afa:	4a08      	ldr	r2, [pc, #32]	; (8014b1c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x74>)
 8014afc:	21b0      	movs	r1, #176	; 0xb0
 8014afe:	4808      	ldr	r0, [pc, #32]	; (8014b20 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x78>)
 8014b00:	f008 fa98 	bl	801d034 <__assert_func>
      checkSanity<Derived>();
 8014b04:	2100      	movs	r1, #0
 8014b06:	68f8      	ldr	r0, [r7, #12]
 8014b08:	f000 f86e 	bl	8014be8 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 8014b0c:	68fb      	ldr	r3, [r7, #12]
 8014b0e:	4618      	mov	r0, r3
 8014b10:	3710      	adds	r7, #16
 8014b12:	46bd      	mov	sp, r7
 8014b14:	bd80      	pop	{r7, pc}
 8014b16:	bf00      	nop
 8014b18:	080255c0 	.word	0x080255c0
 8014b1c:	08028f88 	.word	0x08028f88
 8014b20:	08025770 	.word	0x08025770

08014b24 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EE4initEv>:
    void init()
 8014b24:	b580      	push	{r7, lr}
 8014b26:	b082      	sub	sp, #8
 8014b28:	af00      	add	r7, sp, #0
 8014b2a:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	689b      	ldr	r3, [r3, #8]
 8014b30:	4618      	mov	r0, r3
 8014b32:	f7fd f9e3 	bl	8011efc <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11outerStrideEv>
 8014b36:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	615a      	str	r2, [r3, #20]
    }
 8014b3c:	bf00      	nop
 8014b3e:	3708      	adds	r7, #8
 8014b40:	46bd      	mov	sp, r7
 8014b42:	bd80      	pop	{r7, pc}

08014b44 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 8014b44:	b580      	push	{r7, lr}
 8014b46:	b082      	sub	sp, #8
 8014b48:	af00      	add	r7, sp, #0
 8014b4a:	6078      	str	r0, [r7, #4]
 8014b4c:	6039      	str	r1, [r7, #0]
 8014b4e:	6878      	ldr	r0, [r7, #4]
 8014b50:	f000 f855 	bl	8014bfe <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1Ev>
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	6839      	ldr	r1, [r7, #0]
 8014b58:	4618      	mov	r0, r3
 8014b5a:	f000 f85b 	bl	8014c14 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>
  }
 8014b5e:	687b      	ldr	r3, [r7, #4]
 8014b60:	4618      	mov	r0, r3
 8014b62:	3708      	adds	r7, #8
 8014b64:	46bd      	mov	sp, r7
 8014b66:	bd80      	pop	{r7, pc}

08014b68 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi0ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8014b68:	b580      	push	{r7, lr}
 8014b6a:	b082      	sub	sp, #8
 8014b6c:	af00      	add	r7, sp, #0
 8014b6e:	6078      	str	r0, [r7, #4]
 8014b70:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8014b72:	2200      	movs	r2, #0
 8014b74:	2100      	movs	r1, #0
 8014b76:	6878      	ldr	r0, [r7, #4]
 8014b78:	f000 f874 	bl	8014c64 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 8014b7c:	eef0 7a40 	vmov.f32	s15, s0
  }
 8014b80:	eeb0 0a67 	vmov.f32	s0, s15
 8014b84:	3708      	adds	r7, #8
 8014b86:	46bd      	mov	sp, r7
 8014b88:	bd80      	pop	{r7, pc}

08014b8a <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi1ELi2EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 8014b8a:	b580      	push	{r7, lr}
 8014b8c:	b084      	sub	sp, #16
 8014b8e:	af00      	add	r7, sp, #0
 8014b90:	6078      	str	r0, [r7, #4]
 8014b92:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8014b94:	6839      	ldr	r1, [r7, #0]
 8014b96:	6878      	ldr	r0, [r7, #4]
 8014b98:	f000 f877 	bl	8014c8a <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi1ELi1EE3runERKSM_RKS3_>
 8014b9c:	eef0 7a40 	vmov.f32	s15, s0
 8014ba0:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 8014ba4:	6839      	ldr	r1, [r7, #0]
 8014ba6:	6878      	ldr	r0, [r7, #4]
 8014ba8:	f000 f880 	bl	8014cac <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi2ELi1EE3runERKSM_RKS3_>
 8014bac:	eef0 7a40 	vmov.f32	s15, s0
 8014bb0:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8014bb4:	f107 020c 	add.w	r2, r7, #12
 8014bb8:	f107 0308 	add.w	r3, r7, #8
 8014bbc:	4619      	mov	r1, r3
 8014bbe:	6838      	ldr	r0, [r7, #0]
 8014bc0:	f7f3 fcd3 	bl	800856a <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 8014bc4:	eef0 7a40 	vmov.f32	s15, s0
  }
 8014bc8:	eeb0 0a67 	vmov.f32	s0, s15
 8014bcc:	3710      	adds	r7, #16
 8014bce:	46bd      	mov	sp, r7
 8014bd0:	bd80      	pop	{r7, pc}

08014bd2 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8014bd2:	b480      	push	{r7}
 8014bd4:	b083      	sub	sp, #12
 8014bd6:	af00      	add	r7, sp, #0
 8014bd8:	6078      	str	r0, [r7, #4]
    }
 8014bda:	687b      	ldr	r3, [r7, #4]
 8014bdc:	4618      	mov	r0, r3
 8014bde:	370c      	adds	r7, #12
 8014be0:	46bd      	mov	sp, r7
 8014be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014be6:	4770      	bx	lr

08014be8 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 8014be8:	b480      	push	{r7}
 8014bea:	b083      	sub	sp, #12
 8014bec:	af00      	add	r7, sp, #0
 8014bee:	6078      	str	r0, [r7, #4]
 8014bf0:	6039      	str	r1, [r7, #0]
    {}
 8014bf2:	bf00      	nop
 8014bf4:	370c      	adds	r7, #12
 8014bf6:	46bd      	mov	sp, r7
 8014bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bfc:	4770      	bx	lr

08014bfe <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8014bfe:	b480      	push	{r7}
 8014c00:	b083      	sub	sp, #12
 8014c02:	af00      	add	r7, sp, #0
 8014c04:	6078      	str	r0, [r7, #4]
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	4618      	mov	r0, r3
 8014c0a:	370c      	adds	r7, #12
 8014c0c:	46bd      	mov	sp, r7
 8014c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c12:	4770      	bx	lr

08014c14 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 8014c14:	b590      	push	{r4, r7, lr}
 8014c16:	b083      	sub	sp, #12
 8014c18:	af00      	add	r7, sp, #0
 8014c1a:	6078      	str	r0, [r7, #4]
 8014c1c:	6039      	str	r1, [r7, #0]
 8014c1e:	687c      	ldr	r4, [r7, #4]
 8014c20:	6838      	ldr	r0, [r7, #0]
 8014c22:	f000 f854 	bl	8014cce <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE7functorEv>
 8014c26:	4603      	mov	r3, r0
 8014c28:	4619      	mov	r1, r3
 8014c2a:	4620      	mov	r0, r4
 8014c2c:	f7ef fe38 	bl	80048a0 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	1d1c      	adds	r4, r3, #4
 8014c34:	6838      	ldr	r0, [r7, #0]
 8014c36:	f000 f856 	bl	8014ce6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE3lhsEv>
 8014c3a:	4603      	mov	r3, r0
 8014c3c:	4619      	mov	r1, r3
 8014c3e:	4620      	mov	r0, r4
 8014c40:	f000 f868 	bl	8014d14 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1ERSA_>
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	f103 040c 	add.w	r4, r3, #12
 8014c4a:	6838      	ldr	r0, [r7, #0]
 8014c4c:	f000 f856 	bl	8014cfc <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE3rhsEv>
 8014c50:	4603      	mov	r3, r0
 8014c52:	4619      	mov	r1, r3
 8014c54:	4620      	mov	r0, r4
 8014c56:	f7fa f995 	bl	800ef84 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERS7_>
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	4618      	mov	r0, r3
 8014c5e:	370c      	adds	r7, #12
 8014c60:	46bd      	mov	sp, r7
 8014c62:	bd90      	pop	{r4, r7, pc}

08014c64 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 8014c64:	b580      	push	{r7, lr}
 8014c66:	b084      	sub	sp, #16
 8014c68:	af00      	add	r7, sp, #0
 8014c6a:	60f8      	str	r0, [r7, #12]
 8014c6c:	60b9      	str	r1, [r7, #8]
 8014c6e:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 8014c70:	68fb      	ldr	r3, [r7, #12]
 8014c72:	68ba      	ldr	r2, [r7, #8]
 8014c74:	6879      	ldr	r1, [r7, #4]
 8014c76:	4618      	mov	r0, r3
 8014c78:	f000 f85b 	bl	8014d32 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE5coeffEii>
 8014c7c:	eef0 7a40 	vmov.f32	s15, s0
 8014c80:	eeb0 0a67 	vmov.f32	s0, s15
 8014c84:	3710      	adds	r7, #16
 8014c86:	46bd      	mov	sp, r7
 8014c88:	bd80      	pop	{r7, pc}

08014c8a <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi1ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8014c8a:	b580      	push	{r7, lr}
 8014c8c:	b082      	sub	sp, #8
 8014c8e:	af00      	add	r7, sp, #0
 8014c90:	6078      	str	r0, [r7, #4]
 8014c92:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8014c94:	2201      	movs	r2, #1
 8014c96:	2100      	movs	r1, #0
 8014c98:	6878      	ldr	r0, [r7, #4]
 8014c9a:	f7ff ffe3 	bl	8014c64 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 8014c9e:	eef0 7a40 	vmov.f32	s15, s0
  }
 8014ca2:	eeb0 0a67 	vmov.f32	s0, s15
 8014ca6:	3708      	adds	r7, #8
 8014ca8:	46bd      	mov	sp, r7
 8014caa:	bd80      	pop	{r7, pc}

08014cac <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi2ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8014cac:	b580      	push	{r7, lr}
 8014cae:	b082      	sub	sp, #8
 8014cb0:	af00      	add	r7, sp, #0
 8014cb2:	6078      	str	r0, [r7, #4]
 8014cb4:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8014cb6:	2202      	movs	r2, #2
 8014cb8:	2100      	movs	r1, #0
 8014cba:	6878      	ldr	r0, [r7, #4]
 8014cbc:	f7ff ffd2 	bl	8014c64 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 8014cc0:	eef0 7a40 	vmov.f32	s15, s0
  }
 8014cc4:	eeb0 0a67 	vmov.f32	s0, s15
 8014cc8:	3708      	adds	r7, #8
 8014cca:	46bd      	mov	sp, r7
 8014ccc:	bd80      	pop	{r7, pc}

08014cce <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 8014cce:	b480      	push	{r7}
 8014cd0:	b083      	sub	sp, #12
 8014cd2:	af00      	add	r7, sp, #0
 8014cd4:	6078      	str	r0, [r7, #4]
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	3330      	adds	r3, #48	; 0x30
 8014cda:	4618      	mov	r0, r3
 8014cdc:	370c      	adds	r7, #12
 8014cde:	46bd      	mov	sp, r7
 8014ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ce4:	4770      	bx	lr

08014ce6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 8014ce6:	b480      	push	{r7}
 8014ce8:	b083      	sub	sp, #12
 8014cea:	af00      	add	r7, sp, #0
 8014cec:	6078      	str	r0, [r7, #4]
 8014cee:	687b      	ldr	r3, [r7, #4]
 8014cf0:	4618      	mov	r0, r3
 8014cf2:	370c      	adds	r7, #12
 8014cf4:	46bd      	mov	sp, r7
 8014cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cfa:	4770      	bx	lr

08014cfc <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 8014cfc:	b480      	push	{r7}
 8014cfe:	b083      	sub	sp, #12
 8014d00:	af00      	add	r7, sp, #0
 8014d02:	6078      	str	r0, [r7, #4]
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	3318      	adds	r3, #24
 8014d08:	4618      	mov	r0, r3
 8014d0a:	370c      	adds	r7, #12
 8014d0c:	46bd      	mov	sp, r7
 8014d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d12:	4770      	bx	lr

08014d14 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1ERSA_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8014d14:	b580      	push	{r7, lr}
 8014d16:	b082      	sub	sp, #8
 8014d18:	af00      	add	r7, sp, #0
 8014d1a:	6078      	str	r0, [r7, #4]
 8014d1c:	6039      	str	r1, [r7, #0]
 8014d1e:	687b      	ldr	r3, [r7, #4]
 8014d20:	6839      	ldr	r1, [r7, #0]
 8014d22:	4618      	mov	r0, r3
 8014d24:	f000 f835 	bl	8014d92 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1ERKS9_>
 8014d28:	687b      	ldr	r3, [r7, #4]
 8014d2a:	4618      	mov	r0, r3
 8014d2c:	3708      	adds	r7, #8
 8014d2e:	46bd      	mov	sp, r7
 8014d30:	bd80      	pop	{r7, pc}

08014d32 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8014d32:	b590      	push	{r4, r7, lr}
 8014d34:	b087      	sub	sp, #28
 8014d36:	af00      	add	r7, sp, #0
 8014d38:	60f8      	str	r0, [r7, #12]
 8014d3a:	60b9      	str	r1, [r7, #8]
 8014d3c:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 8014d3e:	68fb      	ldr	r3, [r7, #12]
 8014d40:	4618      	mov	r0, r3
 8014d42:	f000 f835 	bl	8014db0 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>
 8014d46:	4604      	mov	r4, r0
 8014d48:	68fb      	ldr	r3, [r7, #12]
 8014d4a:	3304      	adds	r3, #4
 8014d4c:	687a      	ldr	r2, [r7, #4]
 8014d4e:	68b9      	ldr	r1, [r7, #8]
 8014d50:	4618      	mov	r0, r3
 8014d52:	f000 f838 	bl	8014dc6 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEENS0_10IndexBasedEfE5coeffEii>
 8014d56:	eef0 7a40 	vmov.f32	s15, s0
 8014d5a:	edc7 7a04 	vstr	s15, [r7, #16]
 8014d5e:	68fb      	ldr	r3, [r7, #12]
 8014d60:	330c      	adds	r3, #12
 8014d62:	687a      	ldr	r2, [r7, #4]
 8014d64:	68b9      	ldr	r1, [r7, #8]
 8014d66:	4618      	mov	r0, r3
 8014d68:	f7fa fd4e 	bl	800f808 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>
 8014d6c:	eef0 7a40 	vmov.f32	s15, s0
 8014d70:	edc7 7a05 	vstr	s15, [r7, #20]
 8014d74:	f107 0214 	add.w	r2, r7, #20
 8014d78:	f107 0310 	add.w	r3, r7, #16
 8014d7c:	4619      	mov	r1, r3
 8014d7e:	4620      	mov	r0, r4
 8014d80:	f7f9 fc34 	bl	800e5ec <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 8014d84:	eef0 7a40 	vmov.f32	s15, s0
  }
 8014d88:	eeb0 0a67 	vmov.f32	s0, s15
 8014d8c:	371c      	adds	r7, #28
 8014d8e:	46bd      	mov	sp, r7
 8014d90:	bd90      	pop	{r4, r7, pc}

08014d92 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1ERKS9_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 8014d92:	b580      	push	{r7, lr}
 8014d94:	b082      	sub	sp, #8
 8014d96:	af00      	add	r7, sp, #0
 8014d98:	6078      	str	r0, [r7, #4]
 8014d9a:	6039      	str	r1, [r7, #0]
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	6839      	ldr	r1, [r7, #0]
 8014da0:	4618      	mov	r0, r3
 8014da2:	f000 f823 	bl	8014dec <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEENS0_10IndexBasedEfEC1ERKS9_>
 8014da6:	687b      	ldr	r3, [r7, #4]
 8014da8:	4618      	mov	r0, r3
 8014daa:	3708      	adds	r7, #8
 8014dac:	46bd      	mov	sp, r7
 8014dae:	bd80      	pop	{r7, pc}

08014db0 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 8014db0:	b480      	push	{r7}
 8014db2:	b083      	sub	sp, #12
 8014db4:	af00      	add	r7, sp, #0
 8014db6:	6078      	str	r0, [r7, #4]
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	4618      	mov	r0, r3
 8014dbc:	370c      	adds	r7, #12
 8014dbe:	46bd      	mov	sp, r7
 8014dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dc4:	4770      	bx	lr

08014dc6 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8014dc6:	b580      	push	{r7, lr}
 8014dc8:	b084      	sub	sp, #16
 8014dca:	af00      	add	r7, sp, #0
 8014dcc:	60f8      	str	r0, [r7, #12]
 8014dce:	60b9      	str	r1, [r7, #8]
 8014dd0:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 8014dd2:	68fb      	ldr	r3, [r7, #12]
 8014dd4:	68ba      	ldr	r2, [r7, #8]
 8014dd6:	6879      	ldr	r1, [r7, #4]
 8014dd8:	4618      	mov	r0, r3
 8014dda:	f000 f81d 	bl	8014e18 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_E5coeffEii>
 8014dde:	eef0 7a40 	vmov.f32	s15, s0
  }
 8014de2:	eeb0 0a67 	vmov.f32	s0, s15
 8014de6:	3710      	adds	r7, #16
 8014de8:	46bd      	mov	sp, r7
 8014dea:	bd80      	pop	{r7, pc}

08014dec <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEENS0_10IndexBasedEfEC1ERKS9_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 8014dec:	b590      	push	{r4, r7, lr}
 8014dee:	b083      	sub	sp, #12
 8014df0:	af00      	add	r7, sp, #0
 8014df2:	6078      	str	r0, [r7, #4]
 8014df4:	6039      	str	r1, [r7, #0]
 8014df6:	6878      	ldr	r0, [r7, #4]
 8014df8:	f000 f83a 	bl	8014e70 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1Ev>
 8014dfc:	687c      	ldr	r4, [r7, #4]
 8014dfe:	6838      	ldr	r0, [r7, #0]
 8014e00:	f000 f82b 	bl	8014e5a <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE16nestedExpressionEv>
 8014e04:	4603      	mov	r3, r0
 8014e06:	4619      	mov	r1, r3
 8014e08:	4620      	mov	r0, r4
 8014e0a:	f000 f83c 	bl	8014e86 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1ERS7_>
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	4618      	mov	r0, r3
 8014e12:	370c      	adds	r7, #12
 8014e14:	46bd      	mov	sp, r7
 8014e16:	bd90      	pop	{r4, r7, pc}

08014e18 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_E5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8014e18:	b5b0      	push	{r4, r5, r7, lr}
 8014e1a:	b084      	sub	sp, #16
 8014e1c:	af00      	add	r7, sp, #0
 8014e1e:	60f8      	str	r0, [r7, #12]
 8014e20:	60b9      	str	r1, [r7, #8]
 8014e22:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 8014e24:	68fb      	ldr	r3, [r7, #12]
 8014e26:	681c      	ldr	r4, [r3, #0]
 8014e28:	68f8      	ldr	r0, [r7, #12]
 8014e2a:	f000 f83b 	bl	8014ea4 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_E9colStrideEv>
 8014e2e:	4602      	mov	r2, r0
 8014e30:	687b      	ldr	r3, [r7, #4]
 8014e32:	fb03 f502 	mul.w	r5, r3, r2
 8014e36:	68f8      	ldr	r0, [r7, #12]
 8014e38:	f000 f83f 	bl	8014eba <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_E9rowStrideEv>
 8014e3c:	4602      	mov	r2, r0
 8014e3e:	68bb      	ldr	r3, [r7, #8]
 8014e40:	fb02 f303 	mul.w	r3, r2, r3
 8014e44:	442b      	add	r3, r5
 8014e46:	009b      	lsls	r3, r3, #2
 8014e48:	4423      	add	r3, r4
 8014e4a:	681b      	ldr	r3, [r3, #0]
 8014e4c:	ee07 3a90 	vmov	s15, r3
  }
 8014e50:	eeb0 0a67 	vmov.f32	s0, s15
 8014e54:	3710      	adds	r7, #16
 8014e56:	46bd      	mov	sp, r7
 8014e58:	bdb0      	pop	{r4, r5, r7, pc}

08014e5a <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 8014e5a:	b480      	push	{r7}
 8014e5c:	b083      	sub	sp, #12
 8014e5e:	af00      	add	r7, sp, #0
 8014e60:	6078      	str	r0, [r7, #4]
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	4618      	mov	r0, r3
 8014e66:	370c      	adds	r7, #12
 8014e68:	46bd      	mov	sp, r7
 8014e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e6e:	4770      	bx	lr

08014e70 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8014e70:	b480      	push	{r7}
 8014e72:	b083      	sub	sp, #12
 8014e74:	af00      	add	r7, sp, #0
 8014e76:	6078      	str	r0, [r7, #4]
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	4618      	mov	r0, r3
 8014e7c:	370c      	adds	r7, #12
 8014e7e:	46bd      	mov	sp, r7
 8014e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e84:	4770      	bx	lr

08014e86 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8014e86:	b580      	push	{r7, lr}
 8014e88:	b082      	sub	sp, #8
 8014e8a:	af00      	add	r7, sp, #0
 8014e8c:	6078      	str	r0, [r7, #4]
 8014e8e:	6039      	str	r1, [r7, #0]
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	6839      	ldr	r1, [r7, #0]
 8014e94:	4618      	mov	r0, r3
 8014e96:	f000 f81b 	bl	8014ed0 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1ERKS6_>
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	4618      	mov	r0, r3
 8014e9e:	3708      	adds	r7, #8
 8014ea0:	46bd      	mov	sp, r7
 8014ea2:	bd80      	pop	{r7, pc}

08014ea4 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_E9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 8014ea4:	b580      	push	{r7, lr}
 8014ea6:	b082      	sub	sp, #8
 8014ea8:	af00      	add	r7, sp, #0
 8014eaa:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 8014eac:	f7f0 ff9f 	bl	8005dee <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 8014eb0:	4603      	mov	r3, r0
  }
 8014eb2:	4618      	mov	r0, r3
 8014eb4:	3708      	adds	r7, #8
 8014eb6:	46bd      	mov	sp, r7
 8014eb8:	bd80      	pop	{r7, pc}

08014eba <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_E9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 8014eba:	b580      	push	{r7, lr}
 8014ebc:	b082      	sub	sp, #8
 8014ebe:	af00      	add	r7, sp, #0
 8014ec0:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 8014ec2:	f7f0 ff8c 	bl	8005dde <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 8014ec6:	4603      	mov	r3, r0
  }
 8014ec8:	4618      	mov	r0, r3
 8014eca:	3708      	adds	r7, #8
 8014ecc:	46bd      	mov	sp, r7
 8014ece:	bd80      	pop	{r7, pc}

08014ed0 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 8014ed0:	b580      	push	{r7, lr}
 8014ed2:	b082      	sub	sp, #8
 8014ed4:	af00      	add	r7, sp, #0
 8014ed6:	6078      	str	r0, [r7, #4]
 8014ed8:	6039      	str	r1, [r7, #0]
 8014eda:	687b      	ldr	r3, [r7, #4]
 8014edc:	6839      	ldr	r1, [r7, #0]
 8014ede:	4618      	mov	r0, r3
 8014ee0:	f000 f805 	bl	8014eee <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EEC1ERKNS_5BlockIS4_Li1ELi3ELb1EEE>
  }
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	4618      	mov	r0, r3
 8014ee8:	3708      	adds	r7, #8
 8014eea:	46bd      	mov	sp, r7
 8014eec:	bd80      	pop	{r7, pc}

08014eee <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EEC1ERKNS_5BlockIS4_Li1ELi3ELb1EEE>:
  explicit block_evaluator(const XprType& block)
 8014eee:	b580      	push	{r7, lr}
 8014ef0:	b082      	sub	sp, #8
 8014ef2:	af00      	add	r7, sp, #0
 8014ef4:	6078      	str	r0, [r7, #4]
 8014ef6:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	6839      	ldr	r1, [r7, #0]
 8014efc:	4618      	mov	r0, r3
 8014efe:	f000 f80a 	bl	8014f16 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_EC1ERKS6_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 8014f02:	683b      	ldr	r3, [r7, #0]
 8014f04:	4618      	mov	r0, r3
 8014f06:	f000 f830 	bl	8014f6a <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE4dataEv>
 8014f0a:	bf00      	nop
  }
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	4618      	mov	r0, r3
 8014f10:	3708      	adds	r7, #8
 8014f12:	46bd      	mov	sp, r7
 8014f14:	bd80      	pop	{r7, pc}

08014f16 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_EC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 8014f16:	b590      	push	{r4, r7, lr}
 8014f18:	b083      	sub	sp, #12
 8014f1a:	af00      	add	r7, sp, #0
 8014f1c:	6078      	str	r0, [r7, #4]
 8014f1e:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 8014f20:	6878      	ldr	r0, [r7, #4]
 8014f22:	f000 f84a 	bl	8014fba <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 8014f26:	683b      	ldr	r3, [r7, #0]
 8014f28:	4618      	mov	r0, r3
 8014f2a:	f000 f81e 	bl	8014f6a <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE4dataEv>
 8014f2e:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 8014f30:	687b      	ldr	r3, [r7, #4]
 8014f32:	601a      	str	r2, [r3, #0]
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	1d1c      	adds	r4, r3, #4
 8014f38:	683b      	ldr	r3, [r7, #0]
 8014f3a:	4618      	mov	r0, r3
 8014f3c:	f000 f821 	bl	8014f82 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EE11innerStrideEv>
 8014f40:	4603      	mov	r3, r0
 8014f42:	4619      	mov	r1, r3
 8014f44:	4620      	mov	r0, r4
 8014f46:	f7f0 ff25 	bl	8005d94 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	1d5c      	adds	r4, r3, #5
 8014f4e:	683b      	ldr	r3, [r7, #0]
 8014f50:	4618      	mov	r0, r3
 8014f52:	f000 f824 	bl	8014f9e <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EE11outerStrideEv>
 8014f56:	4603      	mov	r3, r0
 8014f58:	4619      	mov	r1, r3
 8014f5a:	4620      	mov	r0, r4
 8014f5c:	f7f0 ff00 	bl	8005d60 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	4618      	mov	r0, r3
 8014f64:	370c      	adds	r7, #12
 8014f66:	46bd      	mov	sp, r7
 8014f68:	bd90      	pop	{r4, r7, pc}

08014f6a <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC inline const Scalar* data() const { return m_data; }
 8014f6a:	b480      	push	{r7}
 8014f6c:	b083      	sub	sp, #12
 8014f6e:	af00      	add	r7, sp, #0
 8014f70:	6078      	str	r0, [r7, #4]
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	681b      	ldr	r3, [r3, #0]
 8014f76:	4618      	mov	r0, r3
 8014f78:	370c      	adds	r7, #12
 8014f7a:	46bd      	mov	sp, r7
 8014f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f80:	4770      	bx	lr

08014f82 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 8014f82:	b580      	push	{r7, lr}
 8014f84:	b082      	sub	sp, #8
 8014f86:	af00      	add	r7, sp, #0
 8014f88:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	689b      	ldr	r3, [r3, #8]
 8014f8e:	4618      	mov	r0, r3
 8014f90:	f7fd fcf8 	bl	8012984 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11innerStrideEv>
 8014f94:	4603      	mov	r3, r0
    }
 8014f96:	4618      	mov	r0, r3
 8014f98:	3708      	adds	r7, #8
 8014f9a:	46bd      	mov	sp, r7
 8014f9c:	bd80      	pop	{r7, pc}

08014f9e <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 8014f9e:	b580      	push	{r7, lr}
 8014fa0:	b082      	sub	sp, #8
 8014fa2:	af00      	add	r7, sp, #0
 8014fa4:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	689b      	ldr	r3, [r3, #8]
 8014faa:	4618      	mov	r0, r3
 8014fac:	f7fc ffa6 	bl	8011efc <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11outerStrideEv>
 8014fb0:	4603      	mov	r3, r0
    }
 8014fb2:	4618      	mov	r0, r3
 8014fb4:	3708      	adds	r7, #8
 8014fb6:	46bd      	mov	sp, r7
 8014fb8:	bd80      	pop	{r7, pc}

08014fba <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8014fba:	b480      	push	{r7}
 8014fbc:	b083      	sub	sp, #12
 8014fbe:	af00      	add	r7, sp, #0
 8014fc0:	6078      	str	r0, [r7, #4]
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	4618      	mov	r0, r3
 8014fc6:	370c      	adds	r7, #12
 8014fc8:	46bd      	mov	sp, r7
 8014fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fce:	4770      	bx	lr

08014fd0 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8014fd0:	b590      	push	{r4, r7, lr}
 8014fd2:	b083      	sub	sp, #12
 8014fd4:	af00      	add	r7, sp, #0
 8014fd6:	6078      	str	r0, [r7, #4]
 8014fd8:	6039      	str	r1, [r7, #0]
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	2b01      	cmp	r3, #1
 8014fde:	d141      	bne.n	8015064 <_Z41__static_initialization_and_destruction_0ii+0x94>
 8014fe0:	683b      	ldr	r3, [r7, #0]
 8014fe2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014fe6:	4293      	cmp	r3, r2
 8014fe8:	d13c      	bne.n	8015064 <_Z41__static_initialization_and_destruction_0ii+0x94>
static const symbolic::SymbolExpr<internal::symbolic_last_tag> last; // PLEASE use Eigen::last   instead of Eigen::placeholders::last
 8014fea:	4820      	ldr	r0, [pc, #128]	; (801506c <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8014fec:	f7ee fa1b 	bl	8003426 <_ZN5Eigen8symbolic10SymbolExprINS_8internal17symbolic_last_tagEEC1Ev>

#ifndef EIGEN_PARSED_BY_DOXYGEN

#if EIGEN_HAS_CXX14_VARIABLE_TEMPLATES
template<int N>
static const internal::FixedInt<N> fix{};
 8014ff0:	481f      	ldr	r0, [pc, #124]	; (8015070 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8014ff2:	f7ee fa23 	bl	800343c <_ZN5Eigen8internal8FixedIntILi1EEC1Ev>
static const symbolic::AddExpr<symbolic::SymbolExpr<internal::symbolic_last_tag>,symbolic::ValueExpr<Eigen::internal::FixedInt<1> > > lastp1(last+fix<1>());
 8014ff6:	481e      	ldr	r0, [pc, #120]	; (8015070 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8014ff8:	f7ee fa2b 	bl	8003452 <_ZNK5Eigen8internal8FixedIntILi1EEclEv>
 8014ffc:	4621      	mov	r1, r4
 8014ffe:	481b      	ldr	r0, [pc, #108]	; (801506c <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8015000:	f7ee fa32 	bl	8003468 <_ZNK5Eigen8symbolic8BaseExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEEEplILi1EEENS0_7AddExprIS5_NS0_9ValueExprINS3_8FixedIntIXT_EEEEEEESB_>

/** \var all
  * \ingroup Core_Module
  * Can be used as a parameter to DenseBase::operator()(const RowIndices&, const ColIndices&) to index all rows or columns
  */
static const Eigen::internal::all_t all; // PLEASE use Eigen::all instead of Eigen::placeholders::all
 8015004:	481b      	ldr	r0, [pc, #108]	; (8015074 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8015006:	f7eb ff85 	bl	8000f14 <_ZN5Eigen8internal5all_tC1Ev>
Matrix <float,3,3> A ;
 801500a:	481b      	ldr	r0, [pc, #108]	; (8015078 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 801500c:	f7ee fa51 	bl	80034b2 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1Ev>
Matrix <float,3,3> P ;
 8015010:	481a      	ldr	r0, [pc, #104]	; (801507c <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8015012:	f7ee fa4e 	bl	80034b2 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1Ev>
Matrix <float,3,3> O ;
 8015016:	481a      	ldr	r0, [pc, #104]	; (8015080 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8015018:	f7ee fa4b 	bl	80034b2 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1Ev>
Matrix <float,3,3> I ;
 801501c:	4819      	ldr	r0, [pc, #100]	; (8015084 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 801501e:	f7ee fa48 	bl	80034b2 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1Ev>
Matrix <float,1,1> S ;
 8015022:	4819      	ldr	r0, [pc, #100]	; (8015088 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8015024:	f7ee fa54 	bl	80034d0 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1Ev>
Matrix <float,1,1> R ;
 8015028:	4818      	ldr	r0, [pc, #96]	; (801508c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 801502a:	f7ee fa51 	bl	80034d0 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1Ev>
Matrix <float,1,1> D ;
 801502e:	4818      	ldr	r0, [pc, #96]	; (8015090 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8015030:	f7ee fa4e 	bl	80034d0 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1Ev>
Matrix <float,1,1> Z ;
 8015034:	4817      	ldr	r0, [pc, #92]	; (8015094 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8015036:	f7ee fa4b 	bl	80034d0 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1Ev>
Matrix <float,3,1> K ;
 801503a:	4817      	ldr	r0, [pc, #92]	; (8015098 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 801503c:	f7ee fa57 	bl	80034ee <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1Ev>
Matrix <float,1,3> C ;
 8015040:	4816      	ldr	r0, [pc, #88]	; (801509c <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8015042:	f7ee fa63 	bl	800350c <_ZN5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EEC1Ev>
Matrix <float,3,1> G ;
 8015046:	4816      	ldr	r0, [pc, #88]	; (80150a0 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8015048:	f7ee fa51 	bl	80034ee <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1Ev>
Matrix <float,3,3> Q ;
 801504c:	4815      	ldr	r0, [pc, #84]	; (80150a4 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 801504e:	f7ee fa30 	bl	80034b2 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1Ev>
Vector3f X;
 8015052:	4815      	ldr	r0, [pc, #84]	; (80150a8 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8015054:	f7ee fa4b 	bl	80034ee <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1Ev>
Vector3f X1;
 8015058:	4814      	ldr	r0, [pc, #80]	; (80150ac <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 801505a:	f7ee fa48 	bl	80034ee <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1Ev>
Vector3f B;
 801505e:	4814      	ldr	r0, [pc, #80]	; (80150b0 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8015060:	f7ee fa45 	bl	80034ee <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1Ev>
}
 8015064:	bf00      	nop
 8015066:	370c      	adds	r7, #12
 8015068:	46bd      	mov	sp, r7
 801506a:	bd90      	pop	{r4, r7, pc}
 801506c:	2000020c 	.word	0x2000020c
 8015070:	20000718 	.word	0x20000718
 8015074:	20000210 	.word	0x20000210
 8015078:	20000538 	.word	0x20000538
 801507c:	2000055c 	.word	0x2000055c
 8015080:	20000580 	.word	0x20000580
 8015084:	200005a4 	.word	0x200005a4
 8015088:	200005c8 	.word	0x200005c8
 801508c:	200005cc 	.word	0x200005cc
 8015090:	200005d0 	.word	0x200005d0
 8015094:	200005d4 	.word	0x200005d4
 8015098:	200005d8 	.word	0x200005d8
 801509c:	200005e4 	.word	0x200005e4
 80150a0:	200005f0 	.word	0x200005f0
 80150a4:	200005fc 	.word	0x200005fc
 80150a8:	20000620 	.word	0x20000620
 80150ac:	2000062c 	.word	0x2000062c
 80150b0:	20000638 	.word	0x20000638

080150b4 <_GLOBAL__sub_I_hi2c1>:
 80150b4:	b580      	push	{r7, lr}
 80150b6:	af00      	add	r7, sp, #0
 80150b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80150bc:	2001      	movs	r0, #1
 80150be:	f7ff ff87 	bl	8014fd0 <_Z41__static_initialization_and_destruction_0ii>
 80150c2:	bd80      	pop	{r7, pc}

080150c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80150c4:	b580      	push	{r7, lr}
 80150c6:	b082      	sub	sp, #8
 80150c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80150ca:	2300      	movs	r3, #0
 80150cc:	607b      	str	r3, [r7, #4]
 80150ce:	4b10      	ldr	r3, [pc, #64]	; (8015110 <HAL_MspInit+0x4c>)
 80150d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80150d2:	4a0f      	ldr	r2, [pc, #60]	; (8015110 <HAL_MspInit+0x4c>)
 80150d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80150d8:	6453      	str	r3, [r2, #68]	; 0x44
 80150da:	4b0d      	ldr	r3, [pc, #52]	; (8015110 <HAL_MspInit+0x4c>)
 80150dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80150de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80150e2:	607b      	str	r3, [r7, #4]
 80150e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80150e6:	2300      	movs	r3, #0
 80150e8:	603b      	str	r3, [r7, #0]
 80150ea:	4b09      	ldr	r3, [pc, #36]	; (8015110 <HAL_MspInit+0x4c>)
 80150ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80150ee:	4a08      	ldr	r2, [pc, #32]	; (8015110 <HAL_MspInit+0x4c>)
 80150f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80150f4:	6413      	str	r3, [r2, #64]	; 0x40
 80150f6:	4b06      	ldr	r3, [pc, #24]	; (8015110 <HAL_MspInit+0x4c>)
 80150f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80150fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80150fe:	603b      	str	r3, [r7, #0]
 8015100:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8015102:	2007      	movs	r0, #7
 8015104:	f000 fd14 	bl	8015b30 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8015108:	bf00      	nop
 801510a:	3708      	adds	r7, #8
 801510c:	46bd      	mov	sp, r7
 801510e:	bd80      	pop	{r7, pc}
 8015110:	40023800 	.word	0x40023800

08015114 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8015114:	b580      	push	{r7, lr}
 8015116:	b08c      	sub	sp, #48	; 0x30
 8015118:	af00      	add	r7, sp, #0
 801511a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801511c:	f107 031c 	add.w	r3, r7, #28
 8015120:	2200      	movs	r2, #0
 8015122:	601a      	str	r2, [r3, #0]
 8015124:	605a      	str	r2, [r3, #4]
 8015126:	609a      	str	r2, [r3, #8]
 8015128:	60da      	str	r2, [r3, #12]
 801512a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	681b      	ldr	r3, [r3, #0]
 8015130:	4a52      	ldr	r2, [pc, #328]	; (801527c <HAL_I2C_MspInit+0x168>)
 8015132:	4293      	cmp	r3, r2
 8015134:	d13d      	bne.n	80151b2 <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8015136:	2300      	movs	r3, #0
 8015138:	61bb      	str	r3, [r7, #24]
 801513a:	4b51      	ldr	r3, [pc, #324]	; (8015280 <HAL_I2C_MspInit+0x16c>)
 801513c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801513e:	4a50      	ldr	r2, [pc, #320]	; (8015280 <HAL_I2C_MspInit+0x16c>)
 8015140:	f043 0302 	orr.w	r3, r3, #2
 8015144:	6313      	str	r3, [r2, #48]	; 0x30
 8015146:	4b4e      	ldr	r3, [pc, #312]	; (8015280 <HAL_I2C_MspInit+0x16c>)
 8015148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801514a:	f003 0302 	and.w	r3, r3, #2
 801514e:	61bb      	str	r3, [r7, #24]
 8015150:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8015152:	f44f 7340 	mov.w	r3, #768	; 0x300
 8015156:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8015158:	2312      	movs	r3, #18
 801515a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801515c:	2300      	movs	r3, #0
 801515e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015160:	2303      	movs	r3, #3
 8015162:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8015164:	2304      	movs	r3, #4
 8015166:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8015168:	f107 031c 	add.w	r3, r7, #28
 801516c:	4619      	mov	r1, r3
 801516e:	4845      	ldr	r0, [pc, #276]	; (8015284 <HAL_I2C_MspInit+0x170>)
 8015170:	f001 f930 	bl	80163d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8015174:	2300      	movs	r3, #0
 8015176:	617b      	str	r3, [r7, #20]
 8015178:	4b41      	ldr	r3, [pc, #260]	; (8015280 <HAL_I2C_MspInit+0x16c>)
 801517a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801517c:	4a40      	ldr	r2, [pc, #256]	; (8015280 <HAL_I2C_MspInit+0x16c>)
 801517e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8015182:	6413      	str	r3, [r2, #64]	; 0x40
 8015184:	4b3e      	ldr	r3, [pc, #248]	; (8015280 <HAL_I2C_MspInit+0x16c>)
 8015186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015188:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801518c:	617b      	str	r3, [r7, #20]
 801518e:	697b      	ldr	r3, [r7, #20]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8015190:	2200      	movs	r2, #0
 8015192:	2100      	movs	r1, #0
 8015194:	201f      	movs	r0, #31
 8015196:	f000 fcd6 	bl	8015b46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 801519a:	201f      	movs	r0, #31
 801519c:	f000 fcef 	bl	8015b7e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80151a0:	2200      	movs	r2, #0
 80151a2:	2100      	movs	r1, #0
 80151a4:	2020      	movs	r0, #32
 80151a6:	f000 fcce 	bl	8015b46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80151aa:	2020      	movs	r0, #32
 80151ac:	f000 fce7 	bl	8015b7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80151b0:	e060      	b.n	8015274 <HAL_I2C_MspInit+0x160>
  else if(hi2c->Instance==I2C3)
 80151b2:	687b      	ldr	r3, [r7, #4]
 80151b4:	681b      	ldr	r3, [r3, #0]
 80151b6:	4a34      	ldr	r2, [pc, #208]	; (8015288 <HAL_I2C_MspInit+0x174>)
 80151b8:	4293      	cmp	r3, r2
 80151ba:	d15b      	bne.n	8015274 <HAL_I2C_MspInit+0x160>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80151bc:	2300      	movs	r3, #0
 80151be:	613b      	str	r3, [r7, #16]
 80151c0:	4b2f      	ldr	r3, [pc, #188]	; (8015280 <HAL_I2C_MspInit+0x16c>)
 80151c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80151c4:	4a2e      	ldr	r2, [pc, #184]	; (8015280 <HAL_I2C_MspInit+0x16c>)
 80151c6:	f043 0304 	orr.w	r3, r3, #4
 80151ca:	6313      	str	r3, [r2, #48]	; 0x30
 80151cc:	4b2c      	ldr	r3, [pc, #176]	; (8015280 <HAL_I2C_MspInit+0x16c>)
 80151ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80151d0:	f003 0304 	and.w	r3, r3, #4
 80151d4:	613b      	str	r3, [r7, #16]
 80151d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80151d8:	2300      	movs	r3, #0
 80151da:	60fb      	str	r3, [r7, #12]
 80151dc:	4b28      	ldr	r3, [pc, #160]	; (8015280 <HAL_I2C_MspInit+0x16c>)
 80151de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80151e0:	4a27      	ldr	r2, [pc, #156]	; (8015280 <HAL_I2C_MspInit+0x16c>)
 80151e2:	f043 0301 	orr.w	r3, r3, #1
 80151e6:	6313      	str	r3, [r2, #48]	; 0x30
 80151e8:	4b25      	ldr	r3, [pc, #148]	; (8015280 <HAL_I2C_MspInit+0x16c>)
 80151ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80151ec:	f003 0301 	and.w	r3, r3, #1
 80151f0:	60fb      	str	r3, [r7, #12]
 80151f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80151f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80151f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80151fa:	2312      	movs	r3, #18
 80151fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80151fe:	2300      	movs	r3, #0
 8015200:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015202:	2303      	movs	r3, #3
 8015204:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8015206:	2304      	movs	r3, #4
 8015208:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801520a:	f107 031c 	add.w	r3, r7, #28
 801520e:	4619      	mov	r1, r3
 8015210:	481e      	ldr	r0, [pc, #120]	; (801528c <HAL_I2C_MspInit+0x178>)
 8015212:	f001 f8df 	bl	80163d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8015216:	f44f 7380 	mov.w	r3, #256	; 0x100
 801521a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 801521c:	2312      	movs	r3, #18
 801521e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015220:	2300      	movs	r3, #0
 8015222:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015224:	2303      	movs	r3, #3
 8015226:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8015228:	2304      	movs	r3, #4
 801522a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801522c:	f107 031c 	add.w	r3, r7, #28
 8015230:	4619      	mov	r1, r3
 8015232:	4817      	ldr	r0, [pc, #92]	; (8015290 <HAL_I2C_MspInit+0x17c>)
 8015234:	f001 f8ce 	bl	80163d4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8015238:	2300      	movs	r3, #0
 801523a:	60bb      	str	r3, [r7, #8]
 801523c:	4b10      	ldr	r3, [pc, #64]	; (8015280 <HAL_I2C_MspInit+0x16c>)
 801523e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015240:	4a0f      	ldr	r2, [pc, #60]	; (8015280 <HAL_I2C_MspInit+0x16c>)
 8015242:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8015246:	6413      	str	r3, [r2, #64]	; 0x40
 8015248:	4b0d      	ldr	r3, [pc, #52]	; (8015280 <HAL_I2C_MspInit+0x16c>)
 801524a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801524c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8015250:	60bb      	str	r3, [r7, #8]
 8015252:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8015254:	2200      	movs	r2, #0
 8015256:	2100      	movs	r1, #0
 8015258:	2048      	movs	r0, #72	; 0x48
 801525a:	f000 fc74 	bl	8015b46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 801525e:	2048      	movs	r0, #72	; 0x48
 8015260:	f000 fc8d 	bl	8015b7e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 8015264:	2200      	movs	r2, #0
 8015266:	2100      	movs	r1, #0
 8015268:	2049      	movs	r0, #73	; 0x49
 801526a:	f000 fc6c 	bl	8015b46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 801526e:	2049      	movs	r0, #73	; 0x49
 8015270:	f000 fc85 	bl	8015b7e <HAL_NVIC_EnableIRQ>
}
 8015274:	bf00      	nop
 8015276:	3730      	adds	r7, #48	; 0x30
 8015278:	46bd      	mov	sp, r7
 801527a:	bd80      	pop	{r7, pc}
 801527c:	40005400 	.word	0x40005400
 8015280:	40023800 	.word	0x40023800
 8015284:	40020400 	.word	0x40020400
 8015288:	40005c00 	.word	0x40005c00
 801528c:	40020800 	.word	0x40020800
 8015290:	40020000 	.word	0x40020000

08015294 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8015294:	b580      	push	{r7, lr}
 8015296:	b086      	sub	sp, #24
 8015298:	af00      	add	r7, sp, #0
 801529a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	681b      	ldr	r3, [r3, #0]
 80152a0:	4a26      	ldr	r2, [pc, #152]	; (801533c <HAL_TIM_Base_MspInit+0xa8>)
 80152a2:	4293      	cmp	r3, r2
 80152a4:	d10e      	bne.n	80152c4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80152a6:	2300      	movs	r3, #0
 80152a8:	617b      	str	r3, [r7, #20]
 80152aa:	4b25      	ldr	r3, [pc, #148]	; (8015340 <HAL_TIM_Base_MspInit+0xac>)
 80152ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80152ae:	4a24      	ldr	r2, [pc, #144]	; (8015340 <HAL_TIM_Base_MspInit+0xac>)
 80152b0:	f043 0304 	orr.w	r3, r3, #4
 80152b4:	6413      	str	r3, [r2, #64]	; 0x40
 80152b6:	4b22      	ldr	r3, [pc, #136]	; (8015340 <HAL_TIM_Base_MspInit+0xac>)
 80152b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80152ba:	f003 0304 	and.w	r3, r3, #4
 80152be:	617b      	str	r3, [r7, #20]
 80152c0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80152c2:	e036      	b.n	8015332 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM10)
 80152c4:	687b      	ldr	r3, [r7, #4]
 80152c6:	681b      	ldr	r3, [r3, #0]
 80152c8:	4a1e      	ldr	r2, [pc, #120]	; (8015344 <HAL_TIM_Base_MspInit+0xb0>)
 80152ca:	4293      	cmp	r3, r2
 80152cc:	d116      	bne.n	80152fc <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80152ce:	2300      	movs	r3, #0
 80152d0:	613b      	str	r3, [r7, #16]
 80152d2:	4b1b      	ldr	r3, [pc, #108]	; (8015340 <HAL_TIM_Base_MspInit+0xac>)
 80152d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80152d6:	4a1a      	ldr	r2, [pc, #104]	; (8015340 <HAL_TIM_Base_MspInit+0xac>)
 80152d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80152dc:	6453      	str	r3, [r2, #68]	; 0x44
 80152de:	4b18      	ldr	r3, [pc, #96]	; (8015340 <HAL_TIM_Base_MspInit+0xac>)
 80152e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80152e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80152e6:	613b      	str	r3, [r7, #16]
 80152e8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80152ea:	2200      	movs	r2, #0
 80152ec:	2100      	movs	r1, #0
 80152ee:	2019      	movs	r0, #25
 80152f0:	f000 fc29 	bl	8015b46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80152f4:	2019      	movs	r0, #25
 80152f6:	f000 fc42 	bl	8015b7e <HAL_NVIC_EnableIRQ>
}
 80152fa:	e01a      	b.n	8015332 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM11)
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	681b      	ldr	r3, [r3, #0]
 8015300:	4a11      	ldr	r2, [pc, #68]	; (8015348 <HAL_TIM_Base_MspInit+0xb4>)
 8015302:	4293      	cmp	r3, r2
 8015304:	d115      	bne.n	8015332 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8015306:	2300      	movs	r3, #0
 8015308:	60fb      	str	r3, [r7, #12]
 801530a:	4b0d      	ldr	r3, [pc, #52]	; (8015340 <HAL_TIM_Base_MspInit+0xac>)
 801530c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801530e:	4a0c      	ldr	r2, [pc, #48]	; (8015340 <HAL_TIM_Base_MspInit+0xac>)
 8015310:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8015314:	6453      	str	r3, [r2, #68]	; 0x44
 8015316:	4b0a      	ldr	r3, [pc, #40]	; (8015340 <HAL_TIM_Base_MspInit+0xac>)
 8015318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801531a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801531e:	60fb      	str	r3, [r7, #12]
 8015320:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8015322:	2200      	movs	r2, #0
 8015324:	2100      	movs	r1, #0
 8015326:	201a      	movs	r0, #26
 8015328:	f000 fc0d 	bl	8015b46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 801532c:	201a      	movs	r0, #26
 801532e:	f000 fc26 	bl	8015b7e <HAL_NVIC_EnableIRQ>
}
 8015332:	bf00      	nop
 8015334:	3718      	adds	r7, #24
 8015336:	46bd      	mov	sp, r7
 8015338:	bd80      	pop	{r7, pc}
 801533a:	bf00      	nop
 801533c:	40000800 	.word	0x40000800
 8015340:	40023800 	.word	0x40023800
 8015344:	40014400 	.word	0x40014400
 8015348:	40014800 	.word	0x40014800

0801534c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 801534c:	b580      	push	{r7, lr}
 801534e:	b088      	sub	sp, #32
 8015350:	af00      	add	r7, sp, #0
 8015352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015354:	f107 030c 	add.w	r3, r7, #12
 8015358:	2200      	movs	r2, #0
 801535a:	601a      	str	r2, [r3, #0]
 801535c:	605a      	str	r2, [r3, #4]
 801535e:	609a      	str	r2, [r3, #8]
 8015360:	60da      	str	r2, [r3, #12]
 8015362:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8015364:	687b      	ldr	r3, [r7, #4]
 8015366:	681b      	ldr	r3, [r3, #0]
 8015368:	4a12      	ldr	r2, [pc, #72]	; (80153b4 <HAL_TIM_MspPostInit+0x68>)
 801536a:	4293      	cmp	r3, r2
 801536c:	d11d      	bne.n	80153aa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 801536e:	2300      	movs	r3, #0
 8015370:	60bb      	str	r3, [r7, #8]
 8015372:	4b11      	ldr	r3, [pc, #68]	; (80153b8 <HAL_TIM_MspPostInit+0x6c>)
 8015374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015376:	4a10      	ldr	r2, [pc, #64]	; (80153b8 <HAL_TIM_MspPostInit+0x6c>)
 8015378:	f043 0302 	orr.w	r3, r3, #2
 801537c:	6313      	str	r3, [r2, #48]	; 0x30
 801537e:	4b0e      	ldr	r3, [pc, #56]	; (80153b8 <HAL_TIM_MspPostInit+0x6c>)
 8015380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015382:	f003 0302 	and.w	r3, r3, #2
 8015386:	60bb      	str	r3, [r7, #8]
 8015388:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = TIM4_CH1_PWMMOT_Pin;
 801538a:	2340      	movs	r3, #64	; 0x40
 801538c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801538e:	2302      	movs	r3, #2
 8015390:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015392:	2300      	movs	r3, #0
 8015394:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015396:	2300      	movs	r3, #0
 8015398:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 801539a:	2302      	movs	r3, #2
 801539c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIM4_CH1_PWMMOT_GPIO_Port, &GPIO_InitStruct);
 801539e:	f107 030c 	add.w	r3, r7, #12
 80153a2:	4619      	mov	r1, r3
 80153a4:	4805      	ldr	r0, [pc, #20]	; (80153bc <HAL_TIM_MspPostInit+0x70>)
 80153a6:	f001 f815 	bl	80163d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80153aa:	bf00      	nop
 80153ac:	3720      	adds	r7, #32
 80153ae:	46bd      	mov	sp, r7
 80153b0:	bd80      	pop	{r7, pc}
 80153b2:	bf00      	nop
 80153b4:	40000800 	.word	0x40000800
 80153b8:	40023800 	.word	0x40023800
 80153bc:	40020400 	.word	0x40020400

080153c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80153c0:	b580      	push	{r7, lr}
 80153c2:	b08a      	sub	sp, #40	; 0x28
 80153c4:	af00      	add	r7, sp, #0
 80153c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80153c8:	f107 0314 	add.w	r3, r7, #20
 80153cc:	2200      	movs	r2, #0
 80153ce:	601a      	str	r2, [r3, #0]
 80153d0:	605a      	str	r2, [r3, #4]
 80153d2:	609a      	str	r2, [r3, #8]
 80153d4:	60da      	str	r2, [r3, #12]
 80153d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	681b      	ldr	r3, [r3, #0]
 80153dc:	4a4b      	ldr	r2, [pc, #300]	; (801550c <HAL_UART_MspInit+0x14c>)
 80153de:	4293      	cmp	r3, r2
 80153e0:	f040 8090 	bne.w	8015504 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80153e4:	2300      	movs	r3, #0
 80153e6:	613b      	str	r3, [r7, #16]
 80153e8:	4b49      	ldr	r3, [pc, #292]	; (8015510 <HAL_UART_MspInit+0x150>)
 80153ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80153ec:	4a48      	ldr	r2, [pc, #288]	; (8015510 <HAL_UART_MspInit+0x150>)
 80153ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80153f2:	6413      	str	r3, [r2, #64]	; 0x40
 80153f4:	4b46      	ldr	r3, [pc, #280]	; (8015510 <HAL_UART_MspInit+0x150>)
 80153f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80153f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80153fc:	613b      	str	r3, [r7, #16]
 80153fe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015400:	2300      	movs	r3, #0
 8015402:	60fb      	str	r3, [r7, #12]
 8015404:	4b42      	ldr	r3, [pc, #264]	; (8015510 <HAL_UART_MspInit+0x150>)
 8015406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015408:	4a41      	ldr	r2, [pc, #260]	; (8015510 <HAL_UART_MspInit+0x150>)
 801540a:	f043 0301 	orr.w	r3, r3, #1
 801540e:	6313      	str	r3, [r2, #48]	; 0x30
 8015410:	4b3f      	ldr	r3, [pc, #252]	; (8015510 <HAL_UART_MspInit+0x150>)
 8015412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015414:	f003 0301 	and.w	r3, r3, #1
 8015418:	60fb      	str	r3, [r7, #12]
 801541a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 801541c:	230c      	movs	r3, #12
 801541e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015420:	2302      	movs	r3, #2
 8015422:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015424:	2300      	movs	r3, #0
 8015426:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015428:	2303      	movs	r3, #3
 801542a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 801542c:	2307      	movs	r3, #7
 801542e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015430:	f107 0314 	add.w	r3, r7, #20
 8015434:	4619      	mov	r1, r3
 8015436:	4837      	ldr	r0, [pc, #220]	; (8015514 <HAL_UART_MspInit+0x154>)
 8015438:	f000 ffcc 	bl	80163d4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream7;
 801543c:	4b36      	ldr	r3, [pc, #216]	; (8015518 <HAL_UART_MspInit+0x158>)
 801543e:	4a37      	ldr	r2, [pc, #220]	; (801551c <HAL_UART_MspInit+0x15c>)
 8015440:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_6;
 8015442:	4b35      	ldr	r3, [pc, #212]	; (8015518 <HAL_UART_MspInit+0x158>)
 8015444:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8015448:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 801544a:	4b33      	ldr	r3, [pc, #204]	; (8015518 <HAL_UART_MspInit+0x158>)
 801544c:	2200      	movs	r2, #0
 801544e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8015450:	4b31      	ldr	r3, [pc, #196]	; (8015518 <HAL_UART_MspInit+0x158>)
 8015452:	2200      	movs	r2, #0
 8015454:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8015456:	4b30      	ldr	r3, [pc, #192]	; (8015518 <HAL_UART_MspInit+0x158>)
 8015458:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801545c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 801545e:	4b2e      	ldr	r3, [pc, #184]	; (8015518 <HAL_UART_MspInit+0x158>)
 8015460:	2200      	movs	r2, #0
 8015462:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8015464:	4b2c      	ldr	r3, [pc, #176]	; (8015518 <HAL_UART_MspInit+0x158>)
 8015466:	2200      	movs	r2, #0
 8015468:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 801546a:	4b2b      	ldr	r3, [pc, #172]	; (8015518 <HAL_UART_MspInit+0x158>)
 801546c:	2200      	movs	r2, #0
 801546e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8015470:	4b29      	ldr	r3, [pc, #164]	; (8015518 <HAL_UART_MspInit+0x158>)
 8015472:	2200      	movs	r2, #0
 8015474:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8015476:	4b28      	ldr	r3, [pc, #160]	; (8015518 <HAL_UART_MspInit+0x158>)
 8015478:	2200      	movs	r2, #0
 801547a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 801547c:	4826      	ldr	r0, [pc, #152]	; (8015518 <HAL_UART_MspInit+0x158>)
 801547e:	f000 fb99 	bl	8015bb4 <HAL_DMA_Init>
 8015482:	4603      	mov	r3, r0
 8015484:	2b00      	cmp	r3, #0
 8015486:	d001      	beq.n	801548c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8015488:	f7ed ffc8 	bl	800341c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 801548c:	687b      	ldr	r3, [r7, #4]
 801548e:	4a22      	ldr	r2, [pc, #136]	; (8015518 <HAL_UART_MspInit+0x158>)
 8015490:	639a      	str	r2, [r3, #56]	; 0x38
 8015492:	4a21      	ldr	r2, [pc, #132]	; (8015518 <HAL_UART_MspInit+0x158>)
 8015494:	687b      	ldr	r3, [r7, #4]
 8015496:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8015498:	4b21      	ldr	r3, [pc, #132]	; (8015520 <HAL_UART_MspInit+0x160>)
 801549a:	4a22      	ldr	r2, [pc, #136]	; (8015524 <HAL_UART_MspInit+0x164>)
 801549c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 801549e:	4b20      	ldr	r3, [pc, #128]	; (8015520 <HAL_UART_MspInit+0x160>)
 80154a0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80154a4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80154a6:	4b1e      	ldr	r3, [pc, #120]	; (8015520 <HAL_UART_MspInit+0x160>)
 80154a8:	2240      	movs	r2, #64	; 0x40
 80154aa:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80154ac:	4b1c      	ldr	r3, [pc, #112]	; (8015520 <HAL_UART_MspInit+0x160>)
 80154ae:	2200      	movs	r2, #0
 80154b0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80154b2:	4b1b      	ldr	r3, [pc, #108]	; (8015520 <HAL_UART_MspInit+0x160>)
 80154b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80154b8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80154ba:	4b19      	ldr	r3, [pc, #100]	; (8015520 <HAL_UART_MspInit+0x160>)
 80154bc:	2200      	movs	r2, #0
 80154be:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80154c0:	4b17      	ldr	r3, [pc, #92]	; (8015520 <HAL_UART_MspInit+0x160>)
 80154c2:	2200      	movs	r2, #0
 80154c4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80154c6:	4b16      	ldr	r3, [pc, #88]	; (8015520 <HAL_UART_MspInit+0x160>)
 80154c8:	2200      	movs	r2, #0
 80154ca:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80154cc:	4b14      	ldr	r3, [pc, #80]	; (8015520 <HAL_UART_MspInit+0x160>)
 80154ce:	2200      	movs	r2, #0
 80154d0:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80154d2:	4b13      	ldr	r3, [pc, #76]	; (8015520 <HAL_UART_MspInit+0x160>)
 80154d4:	2200      	movs	r2, #0
 80154d6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80154d8:	4811      	ldr	r0, [pc, #68]	; (8015520 <HAL_UART_MspInit+0x160>)
 80154da:	f000 fb6b 	bl	8015bb4 <HAL_DMA_Init>
 80154de:	4603      	mov	r3, r0
 80154e0:	2b00      	cmp	r3, #0
 80154e2:	d001      	beq.n	80154e8 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 80154e4:	f7ed ff9a 	bl	800341c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	4a0d      	ldr	r2, [pc, #52]	; (8015520 <HAL_UART_MspInit+0x160>)
 80154ec:	635a      	str	r2, [r3, #52]	; 0x34
 80154ee:	4a0c      	ldr	r2, [pc, #48]	; (8015520 <HAL_UART_MspInit+0x160>)
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80154f4:	2200      	movs	r2, #0
 80154f6:	2100      	movs	r1, #0
 80154f8:	2026      	movs	r0, #38	; 0x26
 80154fa:	f000 fb24 	bl	8015b46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80154fe:	2026      	movs	r0, #38	; 0x26
 8015500:	f000 fb3d 	bl	8015b7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8015504:	bf00      	nop
 8015506:	3728      	adds	r7, #40	; 0x28
 8015508:	46bd      	mov	sp, r7
 801550a:	bd80      	pop	{r7, pc}
 801550c:	40004400 	.word	0x40004400
 8015510:	40023800 	.word	0x40023800
 8015514:	40020000 	.word	0x40020000
 8015518:	200003d8 	.word	0x200003d8
 801551c:	400260b8 	.word	0x400260b8
 8015520:	20000438 	.word	0x20000438
 8015524:	400260a0 	.word	0x400260a0

08015528 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8015528:	b480      	push	{r7}
 801552a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 801552c:	e7fe      	b.n	801552c <NMI_Handler+0x4>

0801552e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801552e:	b480      	push	{r7}
 8015530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8015532:	e7fe      	b.n	8015532 <HardFault_Handler+0x4>

08015534 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8015534:	b480      	push	{r7}
 8015536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8015538:	e7fe      	b.n	8015538 <MemManage_Handler+0x4>

0801553a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 801553a:	b480      	push	{r7}
 801553c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801553e:	e7fe      	b.n	801553e <BusFault_Handler+0x4>

08015540 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8015540:	b480      	push	{r7}
 8015542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8015544:	e7fe      	b.n	8015544 <UsageFault_Handler+0x4>

08015546 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8015546:	b480      	push	{r7}
 8015548:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 801554a:	bf00      	nop
 801554c:	46bd      	mov	sp, r7
 801554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015552:	4770      	bx	lr

08015554 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8015554:	b480      	push	{r7}
 8015556:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8015558:	bf00      	nop
 801555a:	46bd      	mov	sp, r7
 801555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015560:	4770      	bx	lr

08015562 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8015562:	b480      	push	{r7}
 8015564:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8015566:	bf00      	nop
 8015568:	46bd      	mov	sp, r7
 801556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801556e:	4770      	bx	lr

08015570 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8015570:	b580      	push	{r7, lr}
 8015572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8015574:	f000 f9c8 	bl	8015908 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8015578:	bf00      	nop
 801557a:	bd80      	pop	{r7, pc}

0801557c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 801557c:	b580      	push	{r7, lr}
 801557e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI2_SetZero_Pin);
 8015580:	2004      	movs	r0, #4
 8015582:	f001 f8dd 	bl	8016740 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8015586:	bf00      	nop
 8015588:	bd80      	pop	{r7, pc}
	...

0801558c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 801558c:	b580      	push	{r7, lr}
 801558e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8015590:	4802      	ldr	r0, [pc, #8]	; (801559c <DMA1_Stream6_IRQHandler+0x10>)
 8015592:	f000 fca7 	bl	8015ee4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8015596:	bf00      	nop
 8015598:	bd80      	pop	{r7, pc}
 801559a:	bf00      	nop
 801559c:	20000438 	.word	0x20000438

080155a0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80155a0:	b580      	push	{r7, lr}
 80155a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80155a4:	4802      	ldr	r0, [pc, #8]	; (80155b0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80155a6:	f004 fdef 	bl	801a188 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80155aa:	bf00      	nop
 80155ac:	bd80      	pop	{r7, pc}
 80155ae:	bf00      	nop
 80155b0:	20000304 	.word	0x20000304

080155b4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80155b4:	b580      	push	{r7, lr}
 80155b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80155b8:	4802      	ldr	r0, [pc, #8]	; (80155c4 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80155ba:	f004 fde5 	bl	801a188 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80155be:	bf00      	nop
 80155c0:	bd80      	pop	{r7, pc}
 80155c2:	bf00      	nop
 80155c4:	2000034c 	.word	0x2000034c

080155c8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80155c8:	b580      	push	{r7, lr}
 80155ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80155cc:	4802      	ldr	r0, [pc, #8]	; (80155d8 <I2C1_EV_IRQHandler+0x10>)
 80155ce:	f001 fef7 	bl	80173c0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80155d2:	bf00      	nop
 80155d4:	bd80      	pop	{r7, pc}
 80155d6:	bf00      	nop
 80155d8:	20000214 	.word	0x20000214

080155dc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80155dc:	b580      	push	{r7, lr}
 80155de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80155e0:	4802      	ldr	r0, [pc, #8]	; (80155ec <I2C1_ER_IRQHandler+0x10>)
 80155e2:	f002 f85e 	bl	80176a2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80155e6:	bf00      	nop
 80155e8:	bd80      	pop	{r7, pc}
 80155ea:	bf00      	nop
 80155ec:	20000214 	.word	0x20000214

080155f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80155f0:	b580      	push	{r7, lr}
 80155f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80155f4:	4802      	ldr	r0, [pc, #8]	; (8015600 <USART2_IRQHandler+0x10>)
 80155f6:	f005 fd13 	bl	801b020 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80155fa:	bf00      	nop
 80155fc:	bd80      	pop	{r7, pc}
 80155fe:	bf00      	nop
 8015600:	20000394 	.word	0x20000394

08015604 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8015604:	b580      	push	{r7, lr}
 8015606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI10_Stop_Pin);
 8015608:	f44f 6080 	mov.w	r0, #1024	; 0x400
 801560c:	f001 f898 	bl	8016740 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EXTI11_EMER_Pin);
 8015610:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8015614:	f001 f894 	bl	8016740 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8015618:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 801561c:	f001 f890 	bl	8016740 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8015620:	bf00      	nop
 8015622:	bd80      	pop	{r7, pc}

08015624 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8015624:	b580      	push	{r7, lr}
 8015626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8015628:	4802      	ldr	r0, [pc, #8]	; (8015634 <DMA1_Stream7_IRQHandler+0x10>)
 801562a:	f000 fc5b 	bl	8015ee4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 801562e:	bf00      	nop
 8015630:	bd80      	pop	{r7, pc}
 8015632:	bf00      	nop
 8015634:	200003d8 	.word	0x200003d8

08015638 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8015638:	b580      	push	{r7, lr}
 801563a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 801563c:	4802      	ldr	r0, [pc, #8]	; (8015648 <I2C3_EV_IRQHandler+0x10>)
 801563e:	f001 febf 	bl	80173c0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8015642:	bf00      	nop
 8015644:	bd80      	pop	{r7, pc}
 8015646:	bf00      	nop
 8015648:	20000268 	.word	0x20000268

0801564c <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 801564c:	b580      	push	{r7, lr}
 801564e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8015650:	4802      	ldr	r0, [pc, #8]	; (801565c <I2C3_ER_IRQHandler+0x10>)
 8015652:	f002 f826 	bl	80176a2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8015656:	bf00      	nop
 8015658:	bd80      	pop	{r7, pc}
 801565a:	bf00      	nop
 801565c:	20000268 	.word	0x20000268

08015660 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8015660:	b480      	push	{r7}
 8015662:	af00      	add	r7, sp, #0
	return 1;
 8015664:	2301      	movs	r3, #1
}
 8015666:	4618      	mov	r0, r3
 8015668:	46bd      	mov	sp, r7
 801566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801566e:	4770      	bx	lr

08015670 <_kill>:

int _kill(int pid, int sig)
{
 8015670:	b580      	push	{r7, lr}
 8015672:	b082      	sub	sp, #8
 8015674:	af00      	add	r7, sp, #0
 8015676:	6078      	str	r0, [r7, #4]
 8015678:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 801567a:	f007 fcf9 	bl	801d070 <__errno>
 801567e:	4603      	mov	r3, r0
 8015680:	2216      	movs	r2, #22
 8015682:	601a      	str	r2, [r3, #0]
	return -1;
 8015684:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015688:	4618      	mov	r0, r3
 801568a:	3708      	adds	r7, #8
 801568c:	46bd      	mov	sp, r7
 801568e:	bd80      	pop	{r7, pc}

08015690 <_exit>:

void _exit (int status)
{
 8015690:	b580      	push	{r7, lr}
 8015692:	b082      	sub	sp, #8
 8015694:	af00      	add	r7, sp, #0
 8015696:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8015698:	f04f 31ff 	mov.w	r1, #4294967295
 801569c:	6878      	ldr	r0, [r7, #4]
 801569e:	f7ff ffe7 	bl	8015670 <_kill>
	while (1) {}		/* Make sure we hang here */
 80156a2:	e7fe      	b.n	80156a2 <_exit+0x12>

080156a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80156a4:	b580      	push	{r7, lr}
 80156a6:	b086      	sub	sp, #24
 80156a8:	af00      	add	r7, sp, #0
 80156aa:	60f8      	str	r0, [r7, #12]
 80156ac:	60b9      	str	r1, [r7, #8]
 80156ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80156b0:	2300      	movs	r3, #0
 80156b2:	617b      	str	r3, [r7, #20]
 80156b4:	e00a      	b.n	80156cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80156b6:	f3af 8000 	nop.w
 80156ba:	4601      	mov	r1, r0
 80156bc:	68bb      	ldr	r3, [r7, #8]
 80156be:	1c5a      	adds	r2, r3, #1
 80156c0:	60ba      	str	r2, [r7, #8]
 80156c2:	b2ca      	uxtb	r2, r1
 80156c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80156c6:	697b      	ldr	r3, [r7, #20]
 80156c8:	3301      	adds	r3, #1
 80156ca:	617b      	str	r3, [r7, #20]
 80156cc:	697a      	ldr	r2, [r7, #20]
 80156ce:	687b      	ldr	r3, [r7, #4]
 80156d0:	429a      	cmp	r2, r3
 80156d2:	dbf0      	blt.n	80156b6 <_read+0x12>
	}

return len;
 80156d4:	687b      	ldr	r3, [r7, #4]
}
 80156d6:	4618      	mov	r0, r3
 80156d8:	3718      	adds	r7, #24
 80156da:	46bd      	mov	sp, r7
 80156dc:	bd80      	pop	{r7, pc}

080156de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80156de:	b580      	push	{r7, lr}
 80156e0:	b086      	sub	sp, #24
 80156e2:	af00      	add	r7, sp, #0
 80156e4:	60f8      	str	r0, [r7, #12]
 80156e6:	60b9      	str	r1, [r7, #8]
 80156e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80156ea:	2300      	movs	r3, #0
 80156ec:	617b      	str	r3, [r7, #20]
 80156ee:	e009      	b.n	8015704 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80156f0:	68bb      	ldr	r3, [r7, #8]
 80156f2:	1c5a      	adds	r2, r3, #1
 80156f4:	60ba      	str	r2, [r7, #8]
 80156f6:	781b      	ldrb	r3, [r3, #0]
 80156f8:	4618      	mov	r0, r3
 80156fa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80156fe:	697b      	ldr	r3, [r7, #20]
 8015700:	3301      	adds	r3, #1
 8015702:	617b      	str	r3, [r7, #20]
 8015704:	697a      	ldr	r2, [r7, #20]
 8015706:	687b      	ldr	r3, [r7, #4]
 8015708:	429a      	cmp	r2, r3
 801570a:	dbf1      	blt.n	80156f0 <_write+0x12>
	}
	return len;
 801570c:	687b      	ldr	r3, [r7, #4]
}
 801570e:	4618      	mov	r0, r3
 8015710:	3718      	adds	r7, #24
 8015712:	46bd      	mov	sp, r7
 8015714:	bd80      	pop	{r7, pc}

08015716 <_close>:

int _close(int file)
{
 8015716:	b480      	push	{r7}
 8015718:	b083      	sub	sp, #12
 801571a:	af00      	add	r7, sp, #0
 801571c:	6078      	str	r0, [r7, #4]
	return -1;
 801571e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015722:	4618      	mov	r0, r3
 8015724:	370c      	adds	r7, #12
 8015726:	46bd      	mov	sp, r7
 8015728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801572c:	4770      	bx	lr

0801572e <_fstat>:


int _fstat(int file, struct stat *st)
{
 801572e:	b480      	push	{r7}
 8015730:	b083      	sub	sp, #12
 8015732:	af00      	add	r7, sp, #0
 8015734:	6078      	str	r0, [r7, #4]
 8015736:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8015738:	683b      	ldr	r3, [r7, #0]
 801573a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801573e:	605a      	str	r2, [r3, #4]
	return 0;
 8015740:	2300      	movs	r3, #0
}
 8015742:	4618      	mov	r0, r3
 8015744:	370c      	adds	r7, #12
 8015746:	46bd      	mov	sp, r7
 8015748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801574c:	4770      	bx	lr

0801574e <_isatty>:

int _isatty(int file)
{
 801574e:	b480      	push	{r7}
 8015750:	b083      	sub	sp, #12
 8015752:	af00      	add	r7, sp, #0
 8015754:	6078      	str	r0, [r7, #4]
	return 1;
 8015756:	2301      	movs	r3, #1
}
 8015758:	4618      	mov	r0, r3
 801575a:	370c      	adds	r7, #12
 801575c:	46bd      	mov	sp, r7
 801575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015762:	4770      	bx	lr

08015764 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8015764:	b480      	push	{r7}
 8015766:	b085      	sub	sp, #20
 8015768:	af00      	add	r7, sp, #0
 801576a:	60f8      	str	r0, [r7, #12]
 801576c:	60b9      	str	r1, [r7, #8]
 801576e:	607a      	str	r2, [r7, #4]
	return 0;
 8015770:	2300      	movs	r3, #0
}
 8015772:	4618      	mov	r0, r3
 8015774:	3714      	adds	r7, #20
 8015776:	46bd      	mov	sp, r7
 8015778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801577c:	4770      	bx	lr
	...

08015780 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8015780:	b580      	push	{r7, lr}
 8015782:	b086      	sub	sp, #24
 8015784:	af00      	add	r7, sp, #0
 8015786:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8015788:	4a14      	ldr	r2, [pc, #80]	; (80157dc <_sbrk+0x5c>)
 801578a:	4b15      	ldr	r3, [pc, #84]	; (80157e0 <_sbrk+0x60>)
 801578c:	1ad3      	subs	r3, r2, r3
 801578e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8015790:	697b      	ldr	r3, [r7, #20]
 8015792:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8015794:	4b13      	ldr	r3, [pc, #76]	; (80157e4 <_sbrk+0x64>)
 8015796:	681b      	ldr	r3, [r3, #0]
 8015798:	2b00      	cmp	r3, #0
 801579a:	d102      	bne.n	80157a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 801579c:	4b11      	ldr	r3, [pc, #68]	; (80157e4 <_sbrk+0x64>)
 801579e:	4a12      	ldr	r2, [pc, #72]	; (80157e8 <_sbrk+0x68>)
 80157a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80157a2:	4b10      	ldr	r3, [pc, #64]	; (80157e4 <_sbrk+0x64>)
 80157a4:	681a      	ldr	r2, [r3, #0]
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	4413      	add	r3, r2
 80157aa:	693a      	ldr	r2, [r7, #16]
 80157ac:	429a      	cmp	r2, r3
 80157ae:	d207      	bcs.n	80157c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80157b0:	f007 fc5e 	bl	801d070 <__errno>
 80157b4:	4603      	mov	r3, r0
 80157b6:	220c      	movs	r2, #12
 80157b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80157ba:	f04f 33ff 	mov.w	r3, #4294967295
 80157be:	e009      	b.n	80157d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80157c0:	4b08      	ldr	r3, [pc, #32]	; (80157e4 <_sbrk+0x64>)
 80157c2:	681b      	ldr	r3, [r3, #0]
 80157c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80157c6:	4b07      	ldr	r3, [pc, #28]	; (80157e4 <_sbrk+0x64>)
 80157c8:	681a      	ldr	r2, [r3, #0]
 80157ca:	687b      	ldr	r3, [r7, #4]
 80157cc:	4413      	add	r3, r2
 80157ce:	4a05      	ldr	r2, [pc, #20]	; (80157e4 <_sbrk+0x64>)
 80157d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80157d2:	68fb      	ldr	r3, [r7, #12]
}
 80157d4:	4618      	mov	r0, r3
 80157d6:	3718      	adds	r7, #24
 80157d8:	46bd      	mov	sp, r7
 80157da:	bd80      	pop	{r7, pc}
 80157dc:	20020000 	.word	0x20020000
 80157e0:	00000400 	.word	0x00000400
 80157e4:	2000071c 	.word	0x2000071c
 80157e8:	20000738 	.word	0x20000738

080157ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80157ec:	b480      	push	{r7}
 80157ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80157f0:	4b06      	ldr	r3, [pc, #24]	; (801580c <SystemInit+0x20>)
 80157f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80157f6:	4a05      	ldr	r2, [pc, #20]	; (801580c <SystemInit+0x20>)
 80157f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80157fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8015800:	bf00      	nop
 8015802:	46bd      	mov	sp, r7
 8015804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015808:	4770      	bx	lr
 801580a:	bf00      	nop
 801580c:	e000ed00 	.word	0xe000ed00

08015810 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8015810:	f8df d034 	ldr.w	sp, [pc, #52]	; 8015848 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8015814:	480d      	ldr	r0, [pc, #52]	; (801584c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8015816:	490e      	ldr	r1, [pc, #56]	; (8015850 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8015818:	4a0e      	ldr	r2, [pc, #56]	; (8015854 <LoopFillZerobss+0x1e>)
  movs r3, #0
 801581a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 801581c:	e002      	b.n	8015824 <LoopCopyDataInit>

0801581e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 801581e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8015820:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8015822:	3304      	adds	r3, #4

08015824 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8015824:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8015826:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8015828:	d3f9      	bcc.n	801581e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801582a:	4a0b      	ldr	r2, [pc, #44]	; (8015858 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 801582c:	4c0b      	ldr	r4, [pc, #44]	; (801585c <LoopFillZerobss+0x26>)
  movs r3, #0
 801582e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8015830:	e001      	b.n	8015836 <LoopFillZerobss>

08015832 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8015832:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8015834:	3204      	adds	r2, #4

08015836 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8015836:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8015838:	d3fb      	bcc.n	8015832 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 801583a:	f7ff ffd7 	bl	80157ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801583e:	f007 fc2f 	bl	801d0a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8015842:	f7ec f84f 	bl	80018e4 <main>
  bx  lr    
 8015846:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8015848:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 801584c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8015850:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8015854:	080291c8 	.word	0x080291c8
  ldr r2, =_sbss
 8015858:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 801585c:	20000734 	.word	0x20000734

08015860 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8015860:	e7fe      	b.n	8015860 <ADC_IRQHandler>
	...

08015864 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8015864:	b580      	push	{r7, lr}
 8015866:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8015868:	4b0e      	ldr	r3, [pc, #56]	; (80158a4 <HAL_Init+0x40>)
 801586a:	681b      	ldr	r3, [r3, #0]
 801586c:	4a0d      	ldr	r2, [pc, #52]	; (80158a4 <HAL_Init+0x40>)
 801586e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8015872:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8015874:	4b0b      	ldr	r3, [pc, #44]	; (80158a4 <HAL_Init+0x40>)
 8015876:	681b      	ldr	r3, [r3, #0]
 8015878:	4a0a      	ldr	r2, [pc, #40]	; (80158a4 <HAL_Init+0x40>)
 801587a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801587e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8015880:	4b08      	ldr	r3, [pc, #32]	; (80158a4 <HAL_Init+0x40>)
 8015882:	681b      	ldr	r3, [r3, #0]
 8015884:	4a07      	ldr	r2, [pc, #28]	; (80158a4 <HAL_Init+0x40>)
 8015886:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801588a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801588c:	2003      	movs	r0, #3
 801588e:	f000 f94f 	bl	8015b30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8015892:	2000      	movs	r0, #0
 8015894:	f000 f808 	bl	80158a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8015898:	f7ff fc14 	bl	80150c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 801589c:	2300      	movs	r3, #0
}
 801589e:	4618      	mov	r0, r3
 80158a0:	bd80      	pop	{r7, pc}
 80158a2:	bf00      	nop
 80158a4:	40023c00 	.word	0x40023c00

080158a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80158a8:	b580      	push	{r7, lr}
 80158aa:	b082      	sub	sp, #8
 80158ac:	af00      	add	r7, sp, #0
 80158ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80158b0:	4b12      	ldr	r3, [pc, #72]	; (80158fc <HAL_InitTick+0x54>)
 80158b2:	681a      	ldr	r2, [r3, #0]
 80158b4:	4b12      	ldr	r3, [pc, #72]	; (8015900 <HAL_InitTick+0x58>)
 80158b6:	781b      	ldrb	r3, [r3, #0]
 80158b8:	4619      	mov	r1, r3
 80158ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80158be:	fbb3 f3f1 	udiv	r3, r3, r1
 80158c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80158c6:	4618      	mov	r0, r3
 80158c8:	f000 f967 	bl	8015b9a <HAL_SYSTICK_Config>
 80158cc:	4603      	mov	r3, r0
 80158ce:	2b00      	cmp	r3, #0
 80158d0:	d001      	beq.n	80158d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80158d2:	2301      	movs	r3, #1
 80158d4:	e00e      	b.n	80158f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80158d6:	687b      	ldr	r3, [r7, #4]
 80158d8:	2b0f      	cmp	r3, #15
 80158da:	d80a      	bhi.n	80158f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80158dc:	2200      	movs	r2, #0
 80158de:	6879      	ldr	r1, [r7, #4]
 80158e0:	f04f 30ff 	mov.w	r0, #4294967295
 80158e4:	f000 f92f 	bl	8015b46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80158e8:	4a06      	ldr	r2, [pc, #24]	; (8015904 <HAL_InitTick+0x5c>)
 80158ea:	687b      	ldr	r3, [r7, #4]
 80158ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80158ee:	2300      	movs	r3, #0
 80158f0:	e000      	b.n	80158f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80158f2:	2301      	movs	r3, #1
}
 80158f4:	4618      	mov	r0, r3
 80158f6:	3708      	adds	r7, #8
 80158f8:	46bd      	mov	sp, r7
 80158fa:	bd80      	pop	{r7, pc}
 80158fc:	2000017c 	.word	0x2000017c
 8015900:	20000184 	.word	0x20000184
 8015904:	20000180 	.word	0x20000180

08015908 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8015908:	b480      	push	{r7}
 801590a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 801590c:	4b06      	ldr	r3, [pc, #24]	; (8015928 <HAL_IncTick+0x20>)
 801590e:	781b      	ldrb	r3, [r3, #0]
 8015910:	461a      	mov	r2, r3
 8015912:	4b06      	ldr	r3, [pc, #24]	; (801592c <HAL_IncTick+0x24>)
 8015914:	681b      	ldr	r3, [r3, #0]
 8015916:	4413      	add	r3, r2
 8015918:	4a04      	ldr	r2, [pc, #16]	; (801592c <HAL_IncTick+0x24>)
 801591a:	6013      	str	r3, [r2, #0]
}
 801591c:	bf00      	nop
 801591e:	46bd      	mov	sp, r7
 8015920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015924:	4770      	bx	lr
 8015926:	bf00      	nop
 8015928:	20000184 	.word	0x20000184
 801592c:	20000720 	.word	0x20000720

08015930 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8015930:	b480      	push	{r7}
 8015932:	af00      	add	r7, sp, #0
  return uwTick;
 8015934:	4b03      	ldr	r3, [pc, #12]	; (8015944 <HAL_GetTick+0x14>)
 8015936:	681b      	ldr	r3, [r3, #0]
}
 8015938:	4618      	mov	r0, r3
 801593a:	46bd      	mov	sp, r7
 801593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015940:	4770      	bx	lr
 8015942:	bf00      	nop
 8015944:	20000720 	.word	0x20000720

08015948 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8015948:	b580      	push	{r7, lr}
 801594a:	b084      	sub	sp, #16
 801594c:	af00      	add	r7, sp, #0
 801594e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8015950:	f7ff ffee 	bl	8015930 <HAL_GetTick>
 8015954:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801595a:	68fb      	ldr	r3, [r7, #12]
 801595c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015960:	d005      	beq.n	801596e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8015962:	4b0a      	ldr	r3, [pc, #40]	; (801598c <HAL_Delay+0x44>)
 8015964:	781b      	ldrb	r3, [r3, #0]
 8015966:	461a      	mov	r2, r3
 8015968:	68fb      	ldr	r3, [r7, #12]
 801596a:	4413      	add	r3, r2
 801596c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 801596e:	bf00      	nop
 8015970:	f7ff ffde 	bl	8015930 <HAL_GetTick>
 8015974:	4602      	mov	r2, r0
 8015976:	68bb      	ldr	r3, [r7, #8]
 8015978:	1ad3      	subs	r3, r2, r3
 801597a:	68fa      	ldr	r2, [r7, #12]
 801597c:	429a      	cmp	r2, r3
 801597e:	d8f7      	bhi.n	8015970 <HAL_Delay+0x28>
  {
  }
}
 8015980:	bf00      	nop
 8015982:	bf00      	nop
 8015984:	3710      	adds	r7, #16
 8015986:	46bd      	mov	sp, r7
 8015988:	bd80      	pop	{r7, pc}
 801598a:	bf00      	nop
 801598c:	20000184 	.word	0x20000184

08015990 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8015990:	b480      	push	{r7}
 8015992:	b085      	sub	sp, #20
 8015994:	af00      	add	r7, sp, #0
 8015996:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8015998:	687b      	ldr	r3, [r7, #4]
 801599a:	f003 0307 	and.w	r3, r3, #7
 801599e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80159a0:	4b0c      	ldr	r3, [pc, #48]	; (80159d4 <__NVIC_SetPriorityGrouping+0x44>)
 80159a2:	68db      	ldr	r3, [r3, #12]
 80159a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80159a6:	68ba      	ldr	r2, [r7, #8]
 80159a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80159ac:	4013      	ands	r3, r2
 80159ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80159b0:	68fb      	ldr	r3, [r7, #12]
 80159b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80159b4:	68bb      	ldr	r3, [r7, #8]
 80159b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80159b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80159bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80159c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80159c2:	4a04      	ldr	r2, [pc, #16]	; (80159d4 <__NVIC_SetPriorityGrouping+0x44>)
 80159c4:	68bb      	ldr	r3, [r7, #8]
 80159c6:	60d3      	str	r3, [r2, #12]
}
 80159c8:	bf00      	nop
 80159ca:	3714      	adds	r7, #20
 80159cc:	46bd      	mov	sp, r7
 80159ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159d2:	4770      	bx	lr
 80159d4:	e000ed00 	.word	0xe000ed00

080159d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80159d8:	b480      	push	{r7}
 80159da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80159dc:	4b04      	ldr	r3, [pc, #16]	; (80159f0 <__NVIC_GetPriorityGrouping+0x18>)
 80159de:	68db      	ldr	r3, [r3, #12]
 80159e0:	0a1b      	lsrs	r3, r3, #8
 80159e2:	f003 0307 	and.w	r3, r3, #7
}
 80159e6:	4618      	mov	r0, r3
 80159e8:	46bd      	mov	sp, r7
 80159ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159ee:	4770      	bx	lr
 80159f0:	e000ed00 	.word	0xe000ed00

080159f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80159f4:	b480      	push	{r7}
 80159f6:	b083      	sub	sp, #12
 80159f8:	af00      	add	r7, sp, #0
 80159fa:	4603      	mov	r3, r0
 80159fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80159fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015a02:	2b00      	cmp	r3, #0
 8015a04:	db0b      	blt.n	8015a1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8015a06:	79fb      	ldrb	r3, [r7, #7]
 8015a08:	f003 021f 	and.w	r2, r3, #31
 8015a0c:	4907      	ldr	r1, [pc, #28]	; (8015a2c <__NVIC_EnableIRQ+0x38>)
 8015a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015a12:	095b      	lsrs	r3, r3, #5
 8015a14:	2001      	movs	r0, #1
 8015a16:	fa00 f202 	lsl.w	r2, r0, r2
 8015a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8015a1e:	bf00      	nop
 8015a20:	370c      	adds	r7, #12
 8015a22:	46bd      	mov	sp, r7
 8015a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a28:	4770      	bx	lr
 8015a2a:	bf00      	nop
 8015a2c:	e000e100 	.word	0xe000e100

08015a30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8015a30:	b480      	push	{r7}
 8015a32:	b083      	sub	sp, #12
 8015a34:	af00      	add	r7, sp, #0
 8015a36:	4603      	mov	r3, r0
 8015a38:	6039      	str	r1, [r7, #0]
 8015a3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015a40:	2b00      	cmp	r3, #0
 8015a42:	db0a      	blt.n	8015a5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015a44:	683b      	ldr	r3, [r7, #0]
 8015a46:	b2da      	uxtb	r2, r3
 8015a48:	490c      	ldr	r1, [pc, #48]	; (8015a7c <__NVIC_SetPriority+0x4c>)
 8015a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015a4e:	0112      	lsls	r2, r2, #4
 8015a50:	b2d2      	uxtb	r2, r2
 8015a52:	440b      	add	r3, r1
 8015a54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8015a58:	e00a      	b.n	8015a70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015a5a:	683b      	ldr	r3, [r7, #0]
 8015a5c:	b2da      	uxtb	r2, r3
 8015a5e:	4908      	ldr	r1, [pc, #32]	; (8015a80 <__NVIC_SetPriority+0x50>)
 8015a60:	79fb      	ldrb	r3, [r7, #7]
 8015a62:	f003 030f 	and.w	r3, r3, #15
 8015a66:	3b04      	subs	r3, #4
 8015a68:	0112      	lsls	r2, r2, #4
 8015a6a:	b2d2      	uxtb	r2, r2
 8015a6c:	440b      	add	r3, r1
 8015a6e:	761a      	strb	r2, [r3, #24]
}
 8015a70:	bf00      	nop
 8015a72:	370c      	adds	r7, #12
 8015a74:	46bd      	mov	sp, r7
 8015a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a7a:	4770      	bx	lr
 8015a7c:	e000e100 	.word	0xe000e100
 8015a80:	e000ed00 	.word	0xe000ed00

08015a84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8015a84:	b480      	push	{r7}
 8015a86:	b089      	sub	sp, #36	; 0x24
 8015a88:	af00      	add	r7, sp, #0
 8015a8a:	60f8      	str	r0, [r7, #12]
 8015a8c:	60b9      	str	r1, [r7, #8]
 8015a8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8015a90:	68fb      	ldr	r3, [r7, #12]
 8015a92:	f003 0307 	and.w	r3, r3, #7
 8015a96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8015a98:	69fb      	ldr	r3, [r7, #28]
 8015a9a:	f1c3 0307 	rsb	r3, r3, #7
 8015a9e:	2b04      	cmp	r3, #4
 8015aa0:	bf28      	it	cs
 8015aa2:	2304      	movcs	r3, #4
 8015aa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8015aa6:	69fb      	ldr	r3, [r7, #28]
 8015aa8:	3304      	adds	r3, #4
 8015aaa:	2b06      	cmp	r3, #6
 8015aac:	d902      	bls.n	8015ab4 <NVIC_EncodePriority+0x30>
 8015aae:	69fb      	ldr	r3, [r7, #28]
 8015ab0:	3b03      	subs	r3, #3
 8015ab2:	e000      	b.n	8015ab6 <NVIC_EncodePriority+0x32>
 8015ab4:	2300      	movs	r3, #0
 8015ab6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8015ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8015abc:	69bb      	ldr	r3, [r7, #24]
 8015abe:	fa02 f303 	lsl.w	r3, r2, r3
 8015ac2:	43da      	mvns	r2, r3
 8015ac4:	68bb      	ldr	r3, [r7, #8]
 8015ac6:	401a      	ands	r2, r3
 8015ac8:	697b      	ldr	r3, [r7, #20]
 8015aca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8015acc:	f04f 31ff 	mov.w	r1, #4294967295
 8015ad0:	697b      	ldr	r3, [r7, #20]
 8015ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8015ad6:	43d9      	mvns	r1, r3
 8015ad8:	687b      	ldr	r3, [r7, #4]
 8015ada:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8015adc:	4313      	orrs	r3, r2
         );
}
 8015ade:	4618      	mov	r0, r3
 8015ae0:	3724      	adds	r7, #36	; 0x24
 8015ae2:	46bd      	mov	sp, r7
 8015ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ae8:	4770      	bx	lr
	...

08015aec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8015aec:	b580      	push	{r7, lr}
 8015aee:	b082      	sub	sp, #8
 8015af0:	af00      	add	r7, sp, #0
 8015af2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	3b01      	subs	r3, #1
 8015af8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8015afc:	d301      	bcc.n	8015b02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8015afe:	2301      	movs	r3, #1
 8015b00:	e00f      	b.n	8015b22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8015b02:	4a0a      	ldr	r2, [pc, #40]	; (8015b2c <SysTick_Config+0x40>)
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	3b01      	subs	r3, #1
 8015b08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8015b0a:	210f      	movs	r1, #15
 8015b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8015b10:	f7ff ff8e 	bl	8015a30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8015b14:	4b05      	ldr	r3, [pc, #20]	; (8015b2c <SysTick_Config+0x40>)
 8015b16:	2200      	movs	r2, #0
 8015b18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8015b1a:	4b04      	ldr	r3, [pc, #16]	; (8015b2c <SysTick_Config+0x40>)
 8015b1c:	2207      	movs	r2, #7
 8015b1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8015b20:	2300      	movs	r3, #0
}
 8015b22:	4618      	mov	r0, r3
 8015b24:	3708      	adds	r7, #8
 8015b26:	46bd      	mov	sp, r7
 8015b28:	bd80      	pop	{r7, pc}
 8015b2a:	bf00      	nop
 8015b2c:	e000e010 	.word	0xe000e010

08015b30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8015b30:	b580      	push	{r7, lr}
 8015b32:	b082      	sub	sp, #8
 8015b34:	af00      	add	r7, sp, #0
 8015b36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8015b38:	6878      	ldr	r0, [r7, #4]
 8015b3a:	f7ff ff29 	bl	8015990 <__NVIC_SetPriorityGrouping>
}
 8015b3e:	bf00      	nop
 8015b40:	3708      	adds	r7, #8
 8015b42:	46bd      	mov	sp, r7
 8015b44:	bd80      	pop	{r7, pc}

08015b46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8015b46:	b580      	push	{r7, lr}
 8015b48:	b086      	sub	sp, #24
 8015b4a:	af00      	add	r7, sp, #0
 8015b4c:	4603      	mov	r3, r0
 8015b4e:	60b9      	str	r1, [r7, #8]
 8015b50:	607a      	str	r2, [r7, #4]
 8015b52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8015b54:	2300      	movs	r3, #0
 8015b56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8015b58:	f7ff ff3e 	bl	80159d8 <__NVIC_GetPriorityGrouping>
 8015b5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8015b5e:	687a      	ldr	r2, [r7, #4]
 8015b60:	68b9      	ldr	r1, [r7, #8]
 8015b62:	6978      	ldr	r0, [r7, #20]
 8015b64:	f7ff ff8e 	bl	8015a84 <NVIC_EncodePriority>
 8015b68:	4602      	mov	r2, r0
 8015b6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015b6e:	4611      	mov	r1, r2
 8015b70:	4618      	mov	r0, r3
 8015b72:	f7ff ff5d 	bl	8015a30 <__NVIC_SetPriority>
}
 8015b76:	bf00      	nop
 8015b78:	3718      	adds	r7, #24
 8015b7a:	46bd      	mov	sp, r7
 8015b7c:	bd80      	pop	{r7, pc}

08015b7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8015b7e:	b580      	push	{r7, lr}
 8015b80:	b082      	sub	sp, #8
 8015b82:	af00      	add	r7, sp, #0
 8015b84:	4603      	mov	r3, r0
 8015b86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8015b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015b8c:	4618      	mov	r0, r3
 8015b8e:	f7ff ff31 	bl	80159f4 <__NVIC_EnableIRQ>
}
 8015b92:	bf00      	nop
 8015b94:	3708      	adds	r7, #8
 8015b96:	46bd      	mov	sp, r7
 8015b98:	bd80      	pop	{r7, pc}

08015b9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8015b9a:	b580      	push	{r7, lr}
 8015b9c:	b082      	sub	sp, #8
 8015b9e:	af00      	add	r7, sp, #0
 8015ba0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8015ba2:	6878      	ldr	r0, [r7, #4]
 8015ba4:	f7ff ffa2 	bl	8015aec <SysTick_Config>
 8015ba8:	4603      	mov	r3, r0
}
 8015baa:	4618      	mov	r0, r3
 8015bac:	3708      	adds	r7, #8
 8015bae:	46bd      	mov	sp, r7
 8015bb0:	bd80      	pop	{r7, pc}
	...

08015bb4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8015bb4:	b580      	push	{r7, lr}
 8015bb6:	b086      	sub	sp, #24
 8015bb8:	af00      	add	r7, sp, #0
 8015bba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8015bbc:	2300      	movs	r3, #0
 8015bbe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8015bc0:	f7ff feb6 	bl	8015930 <HAL_GetTick>
 8015bc4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8015bc6:	687b      	ldr	r3, [r7, #4]
 8015bc8:	2b00      	cmp	r3, #0
 8015bca:	d101      	bne.n	8015bd0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8015bcc:	2301      	movs	r3, #1
 8015bce:	e099      	b.n	8015d04 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	2202      	movs	r2, #2
 8015bd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8015bd8:	687b      	ldr	r3, [r7, #4]
 8015bda:	2200      	movs	r2, #0
 8015bdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	681b      	ldr	r3, [r3, #0]
 8015be4:	681a      	ldr	r2, [r3, #0]
 8015be6:	687b      	ldr	r3, [r7, #4]
 8015be8:	681b      	ldr	r3, [r3, #0]
 8015bea:	f022 0201 	bic.w	r2, r2, #1
 8015bee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8015bf0:	e00f      	b.n	8015c12 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8015bf2:	f7ff fe9d 	bl	8015930 <HAL_GetTick>
 8015bf6:	4602      	mov	r2, r0
 8015bf8:	693b      	ldr	r3, [r7, #16]
 8015bfa:	1ad3      	subs	r3, r2, r3
 8015bfc:	2b05      	cmp	r3, #5
 8015bfe:	d908      	bls.n	8015c12 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8015c00:	687b      	ldr	r3, [r7, #4]
 8015c02:	2220      	movs	r2, #32
 8015c04:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8015c06:	687b      	ldr	r3, [r7, #4]
 8015c08:	2203      	movs	r2, #3
 8015c0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8015c0e:	2303      	movs	r3, #3
 8015c10:	e078      	b.n	8015d04 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8015c12:	687b      	ldr	r3, [r7, #4]
 8015c14:	681b      	ldr	r3, [r3, #0]
 8015c16:	681b      	ldr	r3, [r3, #0]
 8015c18:	f003 0301 	and.w	r3, r3, #1
 8015c1c:	2b00      	cmp	r3, #0
 8015c1e:	d1e8      	bne.n	8015bf2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8015c20:	687b      	ldr	r3, [r7, #4]
 8015c22:	681b      	ldr	r3, [r3, #0]
 8015c24:	681b      	ldr	r3, [r3, #0]
 8015c26:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8015c28:	697a      	ldr	r2, [r7, #20]
 8015c2a:	4b38      	ldr	r3, [pc, #224]	; (8015d0c <HAL_DMA_Init+0x158>)
 8015c2c:	4013      	ands	r3, r2
 8015c2e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8015c30:	687b      	ldr	r3, [r7, #4]
 8015c32:	685a      	ldr	r2, [r3, #4]
 8015c34:	687b      	ldr	r3, [r7, #4]
 8015c36:	689b      	ldr	r3, [r3, #8]
 8015c38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8015c3a:	687b      	ldr	r3, [r7, #4]
 8015c3c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8015c3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8015c40:	687b      	ldr	r3, [r7, #4]
 8015c42:	691b      	ldr	r3, [r3, #16]
 8015c44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8015c46:	687b      	ldr	r3, [r7, #4]
 8015c48:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8015c4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	699b      	ldr	r3, [r3, #24]
 8015c50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8015c52:	687b      	ldr	r3, [r7, #4]
 8015c54:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8015c56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8015c58:	687b      	ldr	r3, [r7, #4]
 8015c5a:	6a1b      	ldr	r3, [r3, #32]
 8015c5c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8015c5e:	697a      	ldr	r2, [r7, #20]
 8015c60:	4313      	orrs	r3, r2
 8015c62:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8015c64:	687b      	ldr	r3, [r7, #4]
 8015c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c68:	2b04      	cmp	r3, #4
 8015c6a:	d107      	bne.n	8015c7c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8015c6c:	687b      	ldr	r3, [r7, #4]
 8015c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015c70:	687b      	ldr	r3, [r7, #4]
 8015c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015c74:	4313      	orrs	r3, r2
 8015c76:	697a      	ldr	r2, [r7, #20]
 8015c78:	4313      	orrs	r3, r2
 8015c7a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8015c7c:	687b      	ldr	r3, [r7, #4]
 8015c7e:	681b      	ldr	r3, [r3, #0]
 8015c80:	697a      	ldr	r2, [r7, #20]
 8015c82:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8015c84:	687b      	ldr	r3, [r7, #4]
 8015c86:	681b      	ldr	r3, [r3, #0]
 8015c88:	695b      	ldr	r3, [r3, #20]
 8015c8a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8015c8c:	697b      	ldr	r3, [r7, #20]
 8015c8e:	f023 0307 	bic.w	r3, r3, #7
 8015c92:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8015c94:	687b      	ldr	r3, [r7, #4]
 8015c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c98:	697a      	ldr	r2, [r7, #20]
 8015c9a:	4313      	orrs	r3, r2
 8015c9c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8015c9e:	687b      	ldr	r3, [r7, #4]
 8015ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ca2:	2b04      	cmp	r3, #4
 8015ca4:	d117      	bne.n	8015cd6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8015ca6:	687b      	ldr	r3, [r7, #4]
 8015ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015caa:	697a      	ldr	r2, [r7, #20]
 8015cac:	4313      	orrs	r3, r2
 8015cae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8015cb0:	687b      	ldr	r3, [r7, #4]
 8015cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015cb4:	2b00      	cmp	r3, #0
 8015cb6:	d00e      	beq.n	8015cd6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8015cb8:	6878      	ldr	r0, [r7, #4]
 8015cba:	f000 fb0f 	bl	80162dc <DMA_CheckFifoParam>
 8015cbe:	4603      	mov	r3, r0
 8015cc0:	2b00      	cmp	r3, #0
 8015cc2:	d008      	beq.n	8015cd6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8015cc4:	687b      	ldr	r3, [r7, #4]
 8015cc6:	2240      	movs	r2, #64	; 0x40
 8015cc8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	2201      	movs	r2, #1
 8015cce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8015cd2:	2301      	movs	r3, #1
 8015cd4:	e016      	b.n	8015d04 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8015cd6:	687b      	ldr	r3, [r7, #4]
 8015cd8:	681b      	ldr	r3, [r3, #0]
 8015cda:	697a      	ldr	r2, [r7, #20]
 8015cdc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8015cde:	6878      	ldr	r0, [r7, #4]
 8015ce0:	f000 fac6 	bl	8016270 <DMA_CalcBaseAndBitshift>
 8015ce4:	4603      	mov	r3, r0
 8015ce6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015cec:	223f      	movs	r2, #63	; 0x3f
 8015cee:	409a      	lsls	r2, r3
 8015cf0:	68fb      	ldr	r3, [r7, #12]
 8015cf2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8015cf4:	687b      	ldr	r3, [r7, #4]
 8015cf6:	2200      	movs	r2, #0
 8015cf8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8015cfa:	687b      	ldr	r3, [r7, #4]
 8015cfc:	2201      	movs	r2, #1
 8015cfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8015d02:	2300      	movs	r3, #0
}
 8015d04:	4618      	mov	r0, r3
 8015d06:	3718      	adds	r7, #24
 8015d08:	46bd      	mov	sp, r7
 8015d0a:	bd80      	pop	{r7, pc}
 8015d0c:	f010803f 	.word	0xf010803f

08015d10 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8015d10:	b580      	push	{r7, lr}
 8015d12:	b086      	sub	sp, #24
 8015d14:	af00      	add	r7, sp, #0
 8015d16:	60f8      	str	r0, [r7, #12]
 8015d18:	60b9      	str	r1, [r7, #8]
 8015d1a:	607a      	str	r2, [r7, #4]
 8015d1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8015d1e:	2300      	movs	r3, #0
 8015d20:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8015d22:	68fb      	ldr	r3, [r7, #12]
 8015d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015d26:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8015d28:	68fb      	ldr	r3, [r7, #12]
 8015d2a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015d2e:	2b01      	cmp	r3, #1
 8015d30:	d101      	bne.n	8015d36 <HAL_DMA_Start_IT+0x26>
 8015d32:	2302      	movs	r3, #2
 8015d34:	e040      	b.n	8015db8 <HAL_DMA_Start_IT+0xa8>
 8015d36:	68fb      	ldr	r3, [r7, #12]
 8015d38:	2201      	movs	r2, #1
 8015d3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8015d3e:	68fb      	ldr	r3, [r7, #12]
 8015d40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8015d44:	b2db      	uxtb	r3, r3
 8015d46:	2b01      	cmp	r3, #1
 8015d48:	d12f      	bne.n	8015daa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8015d4a:	68fb      	ldr	r3, [r7, #12]
 8015d4c:	2202      	movs	r2, #2
 8015d4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8015d52:	68fb      	ldr	r3, [r7, #12]
 8015d54:	2200      	movs	r2, #0
 8015d56:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8015d58:	683b      	ldr	r3, [r7, #0]
 8015d5a:	687a      	ldr	r2, [r7, #4]
 8015d5c:	68b9      	ldr	r1, [r7, #8]
 8015d5e:	68f8      	ldr	r0, [r7, #12]
 8015d60:	f000 fa58 	bl	8016214 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8015d64:	68fb      	ldr	r3, [r7, #12]
 8015d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015d68:	223f      	movs	r2, #63	; 0x3f
 8015d6a:	409a      	lsls	r2, r3
 8015d6c:	693b      	ldr	r3, [r7, #16]
 8015d6e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8015d70:	68fb      	ldr	r3, [r7, #12]
 8015d72:	681b      	ldr	r3, [r3, #0]
 8015d74:	681a      	ldr	r2, [r3, #0]
 8015d76:	68fb      	ldr	r3, [r7, #12]
 8015d78:	681b      	ldr	r3, [r3, #0]
 8015d7a:	f042 0216 	orr.w	r2, r2, #22
 8015d7e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8015d80:	68fb      	ldr	r3, [r7, #12]
 8015d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015d84:	2b00      	cmp	r3, #0
 8015d86:	d007      	beq.n	8015d98 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8015d88:	68fb      	ldr	r3, [r7, #12]
 8015d8a:	681b      	ldr	r3, [r3, #0]
 8015d8c:	681a      	ldr	r2, [r3, #0]
 8015d8e:	68fb      	ldr	r3, [r7, #12]
 8015d90:	681b      	ldr	r3, [r3, #0]
 8015d92:	f042 0208 	orr.w	r2, r2, #8
 8015d96:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8015d98:	68fb      	ldr	r3, [r7, #12]
 8015d9a:	681b      	ldr	r3, [r3, #0]
 8015d9c:	681a      	ldr	r2, [r3, #0]
 8015d9e:	68fb      	ldr	r3, [r7, #12]
 8015da0:	681b      	ldr	r3, [r3, #0]
 8015da2:	f042 0201 	orr.w	r2, r2, #1
 8015da6:	601a      	str	r2, [r3, #0]
 8015da8:	e005      	b.n	8015db6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8015daa:	68fb      	ldr	r3, [r7, #12]
 8015dac:	2200      	movs	r2, #0
 8015dae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8015db2:	2302      	movs	r3, #2
 8015db4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8015db6:	7dfb      	ldrb	r3, [r7, #23]
}
 8015db8:	4618      	mov	r0, r3
 8015dba:	3718      	adds	r7, #24
 8015dbc:	46bd      	mov	sp, r7
 8015dbe:	bd80      	pop	{r7, pc}

08015dc0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8015dc0:	b580      	push	{r7, lr}
 8015dc2:	b084      	sub	sp, #16
 8015dc4:	af00      	add	r7, sp, #0
 8015dc6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8015dc8:	687b      	ldr	r3, [r7, #4]
 8015dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015dcc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8015dce:	f7ff fdaf 	bl	8015930 <HAL_GetTick>
 8015dd2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8015dda:	b2db      	uxtb	r3, r3
 8015ddc:	2b02      	cmp	r3, #2
 8015dde:	d008      	beq.n	8015df2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	2280      	movs	r2, #128	; 0x80
 8015de4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8015de6:	687b      	ldr	r3, [r7, #4]
 8015de8:	2200      	movs	r2, #0
 8015dea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8015dee:	2301      	movs	r3, #1
 8015df0:	e052      	b.n	8015e98 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8015df2:	687b      	ldr	r3, [r7, #4]
 8015df4:	681b      	ldr	r3, [r3, #0]
 8015df6:	681a      	ldr	r2, [r3, #0]
 8015df8:	687b      	ldr	r3, [r7, #4]
 8015dfa:	681b      	ldr	r3, [r3, #0]
 8015dfc:	f022 0216 	bic.w	r2, r2, #22
 8015e00:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	681b      	ldr	r3, [r3, #0]
 8015e06:	695a      	ldr	r2, [r3, #20]
 8015e08:	687b      	ldr	r3, [r7, #4]
 8015e0a:	681b      	ldr	r3, [r3, #0]
 8015e0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8015e10:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8015e12:	687b      	ldr	r3, [r7, #4]
 8015e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015e16:	2b00      	cmp	r3, #0
 8015e18:	d103      	bne.n	8015e22 <HAL_DMA_Abort+0x62>
 8015e1a:	687b      	ldr	r3, [r7, #4]
 8015e1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015e1e:	2b00      	cmp	r3, #0
 8015e20:	d007      	beq.n	8015e32 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8015e22:	687b      	ldr	r3, [r7, #4]
 8015e24:	681b      	ldr	r3, [r3, #0]
 8015e26:	681a      	ldr	r2, [r3, #0]
 8015e28:	687b      	ldr	r3, [r7, #4]
 8015e2a:	681b      	ldr	r3, [r3, #0]
 8015e2c:	f022 0208 	bic.w	r2, r2, #8
 8015e30:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8015e32:	687b      	ldr	r3, [r7, #4]
 8015e34:	681b      	ldr	r3, [r3, #0]
 8015e36:	681a      	ldr	r2, [r3, #0]
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	681b      	ldr	r3, [r3, #0]
 8015e3c:	f022 0201 	bic.w	r2, r2, #1
 8015e40:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8015e42:	e013      	b.n	8015e6c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8015e44:	f7ff fd74 	bl	8015930 <HAL_GetTick>
 8015e48:	4602      	mov	r2, r0
 8015e4a:	68bb      	ldr	r3, [r7, #8]
 8015e4c:	1ad3      	subs	r3, r2, r3
 8015e4e:	2b05      	cmp	r3, #5
 8015e50:	d90c      	bls.n	8015e6c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8015e52:	687b      	ldr	r3, [r7, #4]
 8015e54:	2220      	movs	r2, #32
 8015e56:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8015e58:	687b      	ldr	r3, [r7, #4]
 8015e5a:	2203      	movs	r2, #3
 8015e5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	2200      	movs	r2, #0
 8015e64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8015e68:	2303      	movs	r3, #3
 8015e6a:	e015      	b.n	8015e98 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	681b      	ldr	r3, [r3, #0]
 8015e70:	681b      	ldr	r3, [r3, #0]
 8015e72:	f003 0301 	and.w	r3, r3, #1
 8015e76:	2b00      	cmp	r3, #0
 8015e78:	d1e4      	bne.n	8015e44 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8015e7a:	687b      	ldr	r3, [r7, #4]
 8015e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015e7e:	223f      	movs	r2, #63	; 0x3f
 8015e80:	409a      	lsls	r2, r3
 8015e82:	68fb      	ldr	r3, [r7, #12]
 8015e84:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8015e86:	687b      	ldr	r3, [r7, #4]
 8015e88:	2201      	movs	r2, #1
 8015e8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8015e8e:	687b      	ldr	r3, [r7, #4]
 8015e90:	2200      	movs	r2, #0
 8015e92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8015e96:	2300      	movs	r3, #0
}
 8015e98:	4618      	mov	r0, r3
 8015e9a:	3710      	adds	r7, #16
 8015e9c:	46bd      	mov	sp, r7
 8015e9e:	bd80      	pop	{r7, pc}

08015ea0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8015ea0:	b480      	push	{r7}
 8015ea2:	b083      	sub	sp, #12
 8015ea4:	af00      	add	r7, sp, #0
 8015ea6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8015ea8:	687b      	ldr	r3, [r7, #4]
 8015eaa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8015eae:	b2db      	uxtb	r3, r3
 8015eb0:	2b02      	cmp	r3, #2
 8015eb2:	d004      	beq.n	8015ebe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8015eb4:	687b      	ldr	r3, [r7, #4]
 8015eb6:	2280      	movs	r2, #128	; 0x80
 8015eb8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8015eba:	2301      	movs	r3, #1
 8015ebc:	e00c      	b.n	8015ed8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	2205      	movs	r2, #5
 8015ec2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8015ec6:	687b      	ldr	r3, [r7, #4]
 8015ec8:	681b      	ldr	r3, [r3, #0]
 8015eca:	681a      	ldr	r2, [r3, #0]
 8015ecc:	687b      	ldr	r3, [r7, #4]
 8015ece:	681b      	ldr	r3, [r3, #0]
 8015ed0:	f022 0201 	bic.w	r2, r2, #1
 8015ed4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8015ed6:	2300      	movs	r3, #0
}
 8015ed8:	4618      	mov	r0, r3
 8015eda:	370c      	adds	r7, #12
 8015edc:	46bd      	mov	sp, r7
 8015ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ee2:	4770      	bx	lr

08015ee4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8015ee4:	b580      	push	{r7, lr}
 8015ee6:	b086      	sub	sp, #24
 8015ee8:	af00      	add	r7, sp, #0
 8015eea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8015eec:	2300      	movs	r3, #0
 8015eee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8015ef0:	4b8e      	ldr	r3, [pc, #568]	; (801612c <HAL_DMA_IRQHandler+0x248>)
 8015ef2:	681b      	ldr	r3, [r3, #0]
 8015ef4:	4a8e      	ldr	r2, [pc, #568]	; (8016130 <HAL_DMA_IRQHandler+0x24c>)
 8015ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8015efa:	0a9b      	lsrs	r3, r3, #10
 8015efc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8015efe:	687b      	ldr	r3, [r7, #4]
 8015f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015f02:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8015f04:	693b      	ldr	r3, [r7, #16]
 8015f06:	681b      	ldr	r3, [r3, #0]
 8015f08:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8015f0a:	687b      	ldr	r3, [r7, #4]
 8015f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015f0e:	2208      	movs	r2, #8
 8015f10:	409a      	lsls	r2, r3
 8015f12:	68fb      	ldr	r3, [r7, #12]
 8015f14:	4013      	ands	r3, r2
 8015f16:	2b00      	cmp	r3, #0
 8015f18:	d01a      	beq.n	8015f50 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8015f1a:	687b      	ldr	r3, [r7, #4]
 8015f1c:	681b      	ldr	r3, [r3, #0]
 8015f1e:	681b      	ldr	r3, [r3, #0]
 8015f20:	f003 0304 	and.w	r3, r3, #4
 8015f24:	2b00      	cmp	r3, #0
 8015f26:	d013      	beq.n	8015f50 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8015f28:	687b      	ldr	r3, [r7, #4]
 8015f2a:	681b      	ldr	r3, [r3, #0]
 8015f2c:	681a      	ldr	r2, [r3, #0]
 8015f2e:	687b      	ldr	r3, [r7, #4]
 8015f30:	681b      	ldr	r3, [r3, #0]
 8015f32:	f022 0204 	bic.w	r2, r2, #4
 8015f36:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015f3c:	2208      	movs	r2, #8
 8015f3e:	409a      	lsls	r2, r3
 8015f40:	693b      	ldr	r3, [r7, #16]
 8015f42:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8015f44:	687b      	ldr	r3, [r7, #4]
 8015f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015f48:	f043 0201 	orr.w	r2, r3, #1
 8015f4c:	687b      	ldr	r3, [r7, #4]
 8015f4e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015f54:	2201      	movs	r2, #1
 8015f56:	409a      	lsls	r2, r3
 8015f58:	68fb      	ldr	r3, [r7, #12]
 8015f5a:	4013      	ands	r3, r2
 8015f5c:	2b00      	cmp	r3, #0
 8015f5e:	d012      	beq.n	8015f86 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	681b      	ldr	r3, [r3, #0]
 8015f64:	695b      	ldr	r3, [r3, #20]
 8015f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015f6a:	2b00      	cmp	r3, #0
 8015f6c:	d00b      	beq.n	8015f86 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8015f6e:	687b      	ldr	r3, [r7, #4]
 8015f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015f72:	2201      	movs	r2, #1
 8015f74:	409a      	lsls	r2, r3
 8015f76:	693b      	ldr	r3, [r7, #16]
 8015f78:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015f7e:	f043 0202 	orr.w	r2, r3, #2
 8015f82:	687b      	ldr	r3, [r7, #4]
 8015f84:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8015f86:	687b      	ldr	r3, [r7, #4]
 8015f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015f8a:	2204      	movs	r2, #4
 8015f8c:	409a      	lsls	r2, r3
 8015f8e:	68fb      	ldr	r3, [r7, #12]
 8015f90:	4013      	ands	r3, r2
 8015f92:	2b00      	cmp	r3, #0
 8015f94:	d012      	beq.n	8015fbc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	681b      	ldr	r3, [r3, #0]
 8015f9a:	681b      	ldr	r3, [r3, #0]
 8015f9c:	f003 0302 	and.w	r3, r3, #2
 8015fa0:	2b00      	cmp	r3, #0
 8015fa2:	d00b      	beq.n	8015fbc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8015fa4:	687b      	ldr	r3, [r7, #4]
 8015fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015fa8:	2204      	movs	r2, #4
 8015faa:	409a      	lsls	r2, r3
 8015fac:	693b      	ldr	r3, [r7, #16]
 8015fae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8015fb0:	687b      	ldr	r3, [r7, #4]
 8015fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015fb4:	f043 0204 	orr.w	r2, r3, #4
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015fc0:	2210      	movs	r2, #16
 8015fc2:	409a      	lsls	r2, r3
 8015fc4:	68fb      	ldr	r3, [r7, #12]
 8015fc6:	4013      	ands	r3, r2
 8015fc8:	2b00      	cmp	r3, #0
 8015fca:	d043      	beq.n	8016054 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8015fcc:	687b      	ldr	r3, [r7, #4]
 8015fce:	681b      	ldr	r3, [r3, #0]
 8015fd0:	681b      	ldr	r3, [r3, #0]
 8015fd2:	f003 0308 	and.w	r3, r3, #8
 8015fd6:	2b00      	cmp	r3, #0
 8015fd8:	d03c      	beq.n	8016054 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8015fda:	687b      	ldr	r3, [r7, #4]
 8015fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015fde:	2210      	movs	r2, #16
 8015fe0:	409a      	lsls	r2, r3
 8015fe2:	693b      	ldr	r3, [r7, #16]
 8015fe4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8015fe6:	687b      	ldr	r3, [r7, #4]
 8015fe8:	681b      	ldr	r3, [r3, #0]
 8015fea:	681b      	ldr	r3, [r3, #0]
 8015fec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8015ff0:	2b00      	cmp	r3, #0
 8015ff2:	d018      	beq.n	8016026 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8015ff4:	687b      	ldr	r3, [r7, #4]
 8015ff6:	681b      	ldr	r3, [r3, #0]
 8015ff8:	681b      	ldr	r3, [r3, #0]
 8015ffa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8015ffe:	2b00      	cmp	r3, #0
 8016000:	d108      	bne.n	8016014 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8016002:	687b      	ldr	r3, [r7, #4]
 8016004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016006:	2b00      	cmp	r3, #0
 8016008:	d024      	beq.n	8016054 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801600e:	6878      	ldr	r0, [r7, #4]
 8016010:	4798      	blx	r3
 8016012:	e01f      	b.n	8016054 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8016014:	687b      	ldr	r3, [r7, #4]
 8016016:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016018:	2b00      	cmp	r3, #0
 801601a:	d01b      	beq.n	8016054 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016020:	6878      	ldr	r0, [r7, #4]
 8016022:	4798      	blx	r3
 8016024:	e016      	b.n	8016054 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	681b      	ldr	r3, [r3, #0]
 801602a:	681b      	ldr	r3, [r3, #0]
 801602c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016030:	2b00      	cmp	r3, #0
 8016032:	d107      	bne.n	8016044 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	681b      	ldr	r3, [r3, #0]
 8016038:	681a      	ldr	r2, [r3, #0]
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	681b      	ldr	r3, [r3, #0]
 801603e:	f022 0208 	bic.w	r2, r2, #8
 8016042:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016048:	2b00      	cmp	r3, #0
 801604a:	d003      	beq.n	8016054 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016050:	6878      	ldr	r0, [r7, #4]
 8016052:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8016054:	687b      	ldr	r3, [r7, #4]
 8016056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016058:	2220      	movs	r2, #32
 801605a:	409a      	lsls	r2, r3
 801605c:	68fb      	ldr	r3, [r7, #12]
 801605e:	4013      	ands	r3, r2
 8016060:	2b00      	cmp	r3, #0
 8016062:	f000 808f 	beq.w	8016184 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8016066:	687b      	ldr	r3, [r7, #4]
 8016068:	681b      	ldr	r3, [r3, #0]
 801606a:	681b      	ldr	r3, [r3, #0]
 801606c:	f003 0310 	and.w	r3, r3, #16
 8016070:	2b00      	cmp	r3, #0
 8016072:	f000 8087 	beq.w	8016184 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8016076:	687b      	ldr	r3, [r7, #4]
 8016078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801607a:	2220      	movs	r2, #32
 801607c:	409a      	lsls	r2, r3
 801607e:	693b      	ldr	r3, [r7, #16]
 8016080:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8016082:	687b      	ldr	r3, [r7, #4]
 8016084:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016088:	b2db      	uxtb	r3, r3
 801608a:	2b05      	cmp	r3, #5
 801608c:	d136      	bne.n	80160fc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801608e:	687b      	ldr	r3, [r7, #4]
 8016090:	681b      	ldr	r3, [r3, #0]
 8016092:	681a      	ldr	r2, [r3, #0]
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	681b      	ldr	r3, [r3, #0]
 8016098:	f022 0216 	bic.w	r2, r2, #22
 801609c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 801609e:	687b      	ldr	r3, [r7, #4]
 80160a0:	681b      	ldr	r3, [r3, #0]
 80160a2:	695a      	ldr	r2, [r3, #20]
 80160a4:	687b      	ldr	r3, [r7, #4]
 80160a6:	681b      	ldr	r3, [r3, #0]
 80160a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80160ac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80160ae:	687b      	ldr	r3, [r7, #4]
 80160b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80160b2:	2b00      	cmp	r3, #0
 80160b4:	d103      	bne.n	80160be <HAL_DMA_IRQHandler+0x1da>
 80160b6:	687b      	ldr	r3, [r7, #4]
 80160b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80160ba:	2b00      	cmp	r3, #0
 80160bc:	d007      	beq.n	80160ce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80160be:	687b      	ldr	r3, [r7, #4]
 80160c0:	681b      	ldr	r3, [r3, #0]
 80160c2:	681a      	ldr	r2, [r3, #0]
 80160c4:	687b      	ldr	r3, [r7, #4]
 80160c6:	681b      	ldr	r3, [r3, #0]
 80160c8:	f022 0208 	bic.w	r2, r2, #8
 80160cc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80160ce:	687b      	ldr	r3, [r7, #4]
 80160d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80160d2:	223f      	movs	r2, #63	; 0x3f
 80160d4:	409a      	lsls	r2, r3
 80160d6:	693b      	ldr	r3, [r7, #16]
 80160d8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80160da:	687b      	ldr	r3, [r7, #4]
 80160dc:	2201      	movs	r2, #1
 80160de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80160e2:	687b      	ldr	r3, [r7, #4]
 80160e4:	2200      	movs	r2, #0
 80160e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80160ea:	687b      	ldr	r3, [r7, #4]
 80160ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80160ee:	2b00      	cmp	r3, #0
 80160f0:	d07e      	beq.n	80161f0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80160f2:	687b      	ldr	r3, [r7, #4]
 80160f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80160f6:	6878      	ldr	r0, [r7, #4]
 80160f8:	4798      	blx	r3
        }
        return;
 80160fa:	e079      	b.n	80161f0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	681b      	ldr	r3, [r3, #0]
 8016100:	681b      	ldr	r3, [r3, #0]
 8016102:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8016106:	2b00      	cmp	r3, #0
 8016108:	d01d      	beq.n	8016146 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	681b      	ldr	r3, [r3, #0]
 801610e:	681b      	ldr	r3, [r3, #0]
 8016110:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8016114:	2b00      	cmp	r3, #0
 8016116:	d10d      	bne.n	8016134 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8016118:	687b      	ldr	r3, [r7, #4]
 801611a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801611c:	2b00      	cmp	r3, #0
 801611e:	d031      	beq.n	8016184 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8016120:	687b      	ldr	r3, [r7, #4]
 8016122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016124:	6878      	ldr	r0, [r7, #4]
 8016126:	4798      	blx	r3
 8016128:	e02c      	b.n	8016184 <HAL_DMA_IRQHandler+0x2a0>
 801612a:	bf00      	nop
 801612c:	2000017c 	.word	0x2000017c
 8016130:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8016134:	687b      	ldr	r3, [r7, #4]
 8016136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016138:	2b00      	cmp	r3, #0
 801613a:	d023      	beq.n	8016184 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 801613c:	687b      	ldr	r3, [r7, #4]
 801613e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016140:	6878      	ldr	r0, [r7, #4]
 8016142:	4798      	blx	r3
 8016144:	e01e      	b.n	8016184 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8016146:	687b      	ldr	r3, [r7, #4]
 8016148:	681b      	ldr	r3, [r3, #0]
 801614a:	681b      	ldr	r3, [r3, #0]
 801614c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016150:	2b00      	cmp	r3, #0
 8016152:	d10f      	bne.n	8016174 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8016154:	687b      	ldr	r3, [r7, #4]
 8016156:	681b      	ldr	r3, [r3, #0]
 8016158:	681a      	ldr	r2, [r3, #0]
 801615a:	687b      	ldr	r3, [r7, #4]
 801615c:	681b      	ldr	r3, [r3, #0]
 801615e:	f022 0210 	bic.w	r2, r2, #16
 8016162:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8016164:	687b      	ldr	r3, [r7, #4]
 8016166:	2201      	movs	r2, #1
 8016168:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 801616c:	687b      	ldr	r3, [r7, #4]
 801616e:	2200      	movs	r2, #0
 8016170:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8016174:	687b      	ldr	r3, [r7, #4]
 8016176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016178:	2b00      	cmp	r3, #0
 801617a:	d003      	beq.n	8016184 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 801617c:	687b      	ldr	r3, [r7, #4]
 801617e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016180:	6878      	ldr	r0, [r7, #4]
 8016182:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8016184:	687b      	ldr	r3, [r7, #4]
 8016186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016188:	2b00      	cmp	r3, #0
 801618a:	d032      	beq.n	80161f2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 801618c:	687b      	ldr	r3, [r7, #4]
 801618e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016190:	f003 0301 	and.w	r3, r3, #1
 8016194:	2b00      	cmp	r3, #0
 8016196:	d022      	beq.n	80161de <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8016198:	687b      	ldr	r3, [r7, #4]
 801619a:	2205      	movs	r2, #5
 801619c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80161a0:	687b      	ldr	r3, [r7, #4]
 80161a2:	681b      	ldr	r3, [r3, #0]
 80161a4:	681a      	ldr	r2, [r3, #0]
 80161a6:	687b      	ldr	r3, [r7, #4]
 80161a8:	681b      	ldr	r3, [r3, #0]
 80161aa:	f022 0201 	bic.w	r2, r2, #1
 80161ae:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80161b0:	68bb      	ldr	r3, [r7, #8]
 80161b2:	3301      	adds	r3, #1
 80161b4:	60bb      	str	r3, [r7, #8]
 80161b6:	697a      	ldr	r2, [r7, #20]
 80161b8:	429a      	cmp	r2, r3
 80161ba:	d307      	bcc.n	80161cc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	681b      	ldr	r3, [r3, #0]
 80161c0:	681b      	ldr	r3, [r3, #0]
 80161c2:	f003 0301 	and.w	r3, r3, #1
 80161c6:	2b00      	cmp	r3, #0
 80161c8:	d1f2      	bne.n	80161b0 <HAL_DMA_IRQHandler+0x2cc>
 80161ca:	e000      	b.n	80161ce <HAL_DMA_IRQHandler+0x2ea>
          break;
 80161cc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80161ce:	687b      	ldr	r3, [r7, #4]
 80161d0:	2201      	movs	r2, #1
 80161d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80161d6:	687b      	ldr	r3, [r7, #4]
 80161d8:	2200      	movs	r2, #0
 80161da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80161de:	687b      	ldr	r3, [r7, #4]
 80161e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80161e2:	2b00      	cmp	r3, #0
 80161e4:	d005      	beq.n	80161f2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80161e6:	687b      	ldr	r3, [r7, #4]
 80161e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80161ea:	6878      	ldr	r0, [r7, #4]
 80161ec:	4798      	blx	r3
 80161ee:	e000      	b.n	80161f2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80161f0:	bf00      	nop
    }
  }
}
 80161f2:	3718      	adds	r7, #24
 80161f4:	46bd      	mov	sp, r7
 80161f6:	bd80      	pop	{r7, pc}

080161f8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80161f8:	b480      	push	{r7}
 80161fa:	b083      	sub	sp, #12
 80161fc:	af00      	add	r7, sp, #0
 80161fe:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8016200:	687b      	ldr	r3, [r7, #4]
 8016202:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016206:	b2db      	uxtb	r3, r3
}
 8016208:	4618      	mov	r0, r3
 801620a:	370c      	adds	r7, #12
 801620c:	46bd      	mov	sp, r7
 801620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016212:	4770      	bx	lr

08016214 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8016214:	b480      	push	{r7}
 8016216:	b085      	sub	sp, #20
 8016218:	af00      	add	r7, sp, #0
 801621a:	60f8      	str	r0, [r7, #12]
 801621c:	60b9      	str	r1, [r7, #8]
 801621e:	607a      	str	r2, [r7, #4]
 8016220:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8016222:	68fb      	ldr	r3, [r7, #12]
 8016224:	681b      	ldr	r3, [r3, #0]
 8016226:	681a      	ldr	r2, [r3, #0]
 8016228:	68fb      	ldr	r3, [r7, #12]
 801622a:	681b      	ldr	r3, [r3, #0]
 801622c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8016230:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8016232:	68fb      	ldr	r3, [r7, #12]
 8016234:	681b      	ldr	r3, [r3, #0]
 8016236:	683a      	ldr	r2, [r7, #0]
 8016238:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801623a:	68fb      	ldr	r3, [r7, #12]
 801623c:	689b      	ldr	r3, [r3, #8]
 801623e:	2b40      	cmp	r3, #64	; 0x40
 8016240:	d108      	bne.n	8016254 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8016242:	68fb      	ldr	r3, [r7, #12]
 8016244:	681b      	ldr	r3, [r3, #0]
 8016246:	687a      	ldr	r2, [r7, #4]
 8016248:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 801624a:	68fb      	ldr	r3, [r7, #12]
 801624c:	681b      	ldr	r3, [r3, #0]
 801624e:	68ba      	ldr	r2, [r7, #8]
 8016250:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8016252:	e007      	b.n	8016264 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8016254:	68fb      	ldr	r3, [r7, #12]
 8016256:	681b      	ldr	r3, [r3, #0]
 8016258:	68ba      	ldr	r2, [r7, #8]
 801625a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 801625c:	68fb      	ldr	r3, [r7, #12]
 801625e:	681b      	ldr	r3, [r3, #0]
 8016260:	687a      	ldr	r2, [r7, #4]
 8016262:	60da      	str	r2, [r3, #12]
}
 8016264:	bf00      	nop
 8016266:	3714      	adds	r7, #20
 8016268:	46bd      	mov	sp, r7
 801626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801626e:	4770      	bx	lr

08016270 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8016270:	b480      	push	{r7}
 8016272:	b085      	sub	sp, #20
 8016274:	af00      	add	r7, sp, #0
 8016276:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8016278:	687b      	ldr	r3, [r7, #4]
 801627a:	681b      	ldr	r3, [r3, #0]
 801627c:	b2db      	uxtb	r3, r3
 801627e:	3b10      	subs	r3, #16
 8016280:	4a14      	ldr	r2, [pc, #80]	; (80162d4 <DMA_CalcBaseAndBitshift+0x64>)
 8016282:	fba2 2303 	umull	r2, r3, r2, r3
 8016286:	091b      	lsrs	r3, r3, #4
 8016288:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 801628a:	4a13      	ldr	r2, [pc, #76]	; (80162d8 <DMA_CalcBaseAndBitshift+0x68>)
 801628c:	68fb      	ldr	r3, [r7, #12]
 801628e:	4413      	add	r3, r2
 8016290:	781b      	ldrb	r3, [r3, #0]
 8016292:	461a      	mov	r2, r3
 8016294:	687b      	ldr	r3, [r7, #4]
 8016296:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8016298:	68fb      	ldr	r3, [r7, #12]
 801629a:	2b03      	cmp	r3, #3
 801629c:	d909      	bls.n	80162b2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 801629e:	687b      	ldr	r3, [r7, #4]
 80162a0:	681b      	ldr	r3, [r3, #0]
 80162a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80162a6:	f023 0303 	bic.w	r3, r3, #3
 80162aa:	1d1a      	adds	r2, r3, #4
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	659a      	str	r2, [r3, #88]	; 0x58
 80162b0:	e007      	b.n	80162c2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80162b2:	687b      	ldr	r3, [r7, #4]
 80162b4:	681b      	ldr	r3, [r3, #0]
 80162b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80162ba:	f023 0303 	bic.w	r3, r3, #3
 80162be:	687a      	ldr	r2, [r7, #4]
 80162c0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80162c2:	687b      	ldr	r3, [r7, #4]
 80162c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80162c6:	4618      	mov	r0, r3
 80162c8:	3714      	adds	r7, #20
 80162ca:	46bd      	mov	sp, r7
 80162cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162d0:	4770      	bx	lr
 80162d2:	bf00      	nop
 80162d4:	aaaaaaab 	.word	0xaaaaaaab
 80162d8:	080290a4 	.word	0x080290a4

080162dc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80162dc:	b480      	push	{r7}
 80162de:	b085      	sub	sp, #20
 80162e0:	af00      	add	r7, sp, #0
 80162e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80162e4:	2300      	movs	r3, #0
 80162e6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80162e8:	687b      	ldr	r3, [r7, #4]
 80162ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80162ec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80162ee:	687b      	ldr	r3, [r7, #4]
 80162f0:	699b      	ldr	r3, [r3, #24]
 80162f2:	2b00      	cmp	r3, #0
 80162f4:	d11f      	bne.n	8016336 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80162f6:	68bb      	ldr	r3, [r7, #8]
 80162f8:	2b03      	cmp	r3, #3
 80162fa:	d856      	bhi.n	80163aa <DMA_CheckFifoParam+0xce>
 80162fc:	a201      	add	r2, pc, #4	; (adr r2, 8016304 <DMA_CheckFifoParam+0x28>)
 80162fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016302:	bf00      	nop
 8016304:	08016315 	.word	0x08016315
 8016308:	08016327 	.word	0x08016327
 801630c:	08016315 	.word	0x08016315
 8016310:	080163ab 	.word	0x080163ab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8016314:	687b      	ldr	r3, [r7, #4]
 8016316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016318:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801631c:	2b00      	cmp	r3, #0
 801631e:	d046      	beq.n	80163ae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8016320:	2301      	movs	r3, #1
 8016322:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8016324:	e043      	b.n	80163ae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8016326:	687b      	ldr	r3, [r7, #4]
 8016328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801632a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801632e:	d140      	bne.n	80163b2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8016330:	2301      	movs	r3, #1
 8016332:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8016334:	e03d      	b.n	80163b2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8016336:	687b      	ldr	r3, [r7, #4]
 8016338:	699b      	ldr	r3, [r3, #24]
 801633a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801633e:	d121      	bne.n	8016384 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8016340:	68bb      	ldr	r3, [r7, #8]
 8016342:	2b03      	cmp	r3, #3
 8016344:	d837      	bhi.n	80163b6 <DMA_CheckFifoParam+0xda>
 8016346:	a201      	add	r2, pc, #4	; (adr r2, 801634c <DMA_CheckFifoParam+0x70>)
 8016348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801634c:	0801635d 	.word	0x0801635d
 8016350:	08016363 	.word	0x08016363
 8016354:	0801635d 	.word	0x0801635d
 8016358:	08016375 	.word	0x08016375
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 801635c:	2301      	movs	r3, #1
 801635e:	73fb      	strb	r3, [r7, #15]
      break;
 8016360:	e030      	b.n	80163c4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8016362:	687b      	ldr	r3, [r7, #4]
 8016364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016366:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801636a:	2b00      	cmp	r3, #0
 801636c:	d025      	beq.n	80163ba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 801636e:	2301      	movs	r3, #1
 8016370:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8016372:	e022      	b.n	80163ba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8016374:	687b      	ldr	r3, [r7, #4]
 8016376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016378:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801637c:	d11f      	bne.n	80163be <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 801637e:	2301      	movs	r3, #1
 8016380:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8016382:	e01c      	b.n	80163be <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8016384:	68bb      	ldr	r3, [r7, #8]
 8016386:	2b02      	cmp	r3, #2
 8016388:	d903      	bls.n	8016392 <DMA_CheckFifoParam+0xb6>
 801638a:	68bb      	ldr	r3, [r7, #8]
 801638c:	2b03      	cmp	r3, #3
 801638e:	d003      	beq.n	8016398 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8016390:	e018      	b.n	80163c4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8016392:	2301      	movs	r3, #1
 8016394:	73fb      	strb	r3, [r7, #15]
      break;
 8016396:	e015      	b.n	80163c4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8016398:	687b      	ldr	r3, [r7, #4]
 801639a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801639c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80163a0:	2b00      	cmp	r3, #0
 80163a2:	d00e      	beq.n	80163c2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80163a4:	2301      	movs	r3, #1
 80163a6:	73fb      	strb	r3, [r7, #15]
      break;
 80163a8:	e00b      	b.n	80163c2 <DMA_CheckFifoParam+0xe6>
      break;
 80163aa:	bf00      	nop
 80163ac:	e00a      	b.n	80163c4 <DMA_CheckFifoParam+0xe8>
      break;
 80163ae:	bf00      	nop
 80163b0:	e008      	b.n	80163c4 <DMA_CheckFifoParam+0xe8>
      break;
 80163b2:	bf00      	nop
 80163b4:	e006      	b.n	80163c4 <DMA_CheckFifoParam+0xe8>
      break;
 80163b6:	bf00      	nop
 80163b8:	e004      	b.n	80163c4 <DMA_CheckFifoParam+0xe8>
      break;
 80163ba:	bf00      	nop
 80163bc:	e002      	b.n	80163c4 <DMA_CheckFifoParam+0xe8>
      break;   
 80163be:	bf00      	nop
 80163c0:	e000      	b.n	80163c4 <DMA_CheckFifoParam+0xe8>
      break;
 80163c2:	bf00      	nop
    }
  } 
  
  return status; 
 80163c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80163c6:	4618      	mov	r0, r3
 80163c8:	3714      	adds	r7, #20
 80163ca:	46bd      	mov	sp, r7
 80163cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163d0:	4770      	bx	lr
 80163d2:	bf00      	nop

080163d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80163d4:	b480      	push	{r7}
 80163d6:	b089      	sub	sp, #36	; 0x24
 80163d8:	af00      	add	r7, sp, #0
 80163da:	6078      	str	r0, [r7, #4]
 80163dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80163de:	2300      	movs	r3, #0
 80163e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80163e2:	2300      	movs	r3, #0
 80163e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80163e6:	2300      	movs	r3, #0
 80163e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80163ea:	2300      	movs	r3, #0
 80163ec:	61fb      	str	r3, [r7, #28]
 80163ee:	e159      	b.n	80166a4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80163f0:	2201      	movs	r2, #1
 80163f2:	69fb      	ldr	r3, [r7, #28]
 80163f4:	fa02 f303 	lsl.w	r3, r2, r3
 80163f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80163fa:	683b      	ldr	r3, [r7, #0]
 80163fc:	681b      	ldr	r3, [r3, #0]
 80163fe:	697a      	ldr	r2, [r7, #20]
 8016400:	4013      	ands	r3, r2
 8016402:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8016404:	693a      	ldr	r2, [r7, #16]
 8016406:	697b      	ldr	r3, [r7, #20]
 8016408:	429a      	cmp	r2, r3
 801640a:	f040 8148 	bne.w	801669e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801640e:	683b      	ldr	r3, [r7, #0]
 8016410:	685b      	ldr	r3, [r3, #4]
 8016412:	f003 0303 	and.w	r3, r3, #3
 8016416:	2b01      	cmp	r3, #1
 8016418:	d005      	beq.n	8016426 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801641a:	683b      	ldr	r3, [r7, #0]
 801641c:	685b      	ldr	r3, [r3, #4]
 801641e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8016422:	2b02      	cmp	r3, #2
 8016424:	d130      	bne.n	8016488 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8016426:	687b      	ldr	r3, [r7, #4]
 8016428:	689b      	ldr	r3, [r3, #8]
 801642a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 801642c:	69fb      	ldr	r3, [r7, #28]
 801642e:	005b      	lsls	r3, r3, #1
 8016430:	2203      	movs	r2, #3
 8016432:	fa02 f303 	lsl.w	r3, r2, r3
 8016436:	43db      	mvns	r3, r3
 8016438:	69ba      	ldr	r2, [r7, #24]
 801643a:	4013      	ands	r3, r2
 801643c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801643e:	683b      	ldr	r3, [r7, #0]
 8016440:	68da      	ldr	r2, [r3, #12]
 8016442:	69fb      	ldr	r3, [r7, #28]
 8016444:	005b      	lsls	r3, r3, #1
 8016446:	fa02 f303 	lsl.w	r3, r2, r3
 801644a:	69ba      	ldr	r2, [r7, #24]
 801644c:	4313      	orrs	r3, r2
 801644e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8016450:	687b      	ldr	r3, [r7, #4]
 8016452:	69ba      	ldr	r2, [r7, #24]
 8016454:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8016456:	687b      	ldr	r3, [r7, #4]
 8016458:	685b      	ldr	r3, [r3, #4]
 801645a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 801645c:	2201      	movs	r2, #1
 801645e:	69fb      	ldr	r3, [r7, #28]
 8016460:	fa02 f303 	lsl.w	r3, r2, r3
 8016464:	43db      	mvns	r3, r3
 8016466:	69ba      	ldr	r2, [r7, #24]
 8016468:	4013      	ands	r3, r2
 801646a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801646c:	683b      	ldr	r3, [r7, #0]
 801646e:	685b      	ldr	r3, [r3, #4]
 8016470:	091b      	lsrs	r3, r3, #4
 8016472:	f003 0201 	and.w	r2, r3, #1
 8016476:	69fb      	ldr	r3, [r7, #28]
 8016478:	fa02 f303 	lsl.w	r3, r2, r3
 801647c:	69ba      	ldr	r2, [r7, #24]
 801647e:	4313      	orrs	r3, r2
 8016480:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8016482:	687b      	ldr	r3, [r7, #4]
 8016484:	69ba      	ldr	r2, [r7, #24]
 8016486:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8016488:	683b      	ldr	r3, [r7, #0]
 801648a:	685b      	ldr	r3, [r3, #4]
 801648c:	f003 0303 	and.w	r3, r3, #3
 8016490:	2b03      	cmp	r3, #3
 8016492:	d017      	beq.n	80164c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8016494:	687b      	ldr	r3, [r7, #4]
 8016496:	68db      	ldr	r3, [r3, #12]
 8016498:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 801649a:	69fb      	ldr	r3, [r7, #28]
 801649c:	005b      	lsls	r3, r3, #1
 801649e:	2203      	movs	r2, #3
 80164a0:	fa02 f303 	lsl.w	r3, r2, r3
 80164a4:	43db      	mvns	r3, r3
 80164a6:	69ba      	ldr	r2, [r7, #24]
 80164a8:	4013      	ands	r3, r2
 80164aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80164ac:	683b      	ldr	r3, [r7, #0]
 80164ae:	689a      	ldr	r2, [r3, #8]
 80164b0:	69fb      	ldr	r3, [r7, #28]
 80164b2:	005b      	lsls	r3, r3, #1
 80164b4:	fa02 f303 	lsl.w	r3, r2, r3
 80164b8:	69ba      	ldr	r2, [r7, #24]
 80164ba:	4313      	orrs	r3, r2
 80164bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80164be:	687b      	ldr	r3, [r7, #4]
 80164c0:	69ba      	ldr	r2, [r7, #24]
 80164c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80164c4:	683b      	ldr	r3, [r7, #0]
 80164c6:	685b      	ldr	r3, [r3, #4]
 80164c8:	f003 0303 	and.w	r3, r3, #3
 80164cc:	2b02      	cmp	r3, #2
 80164ce:	d123      	bne.n	8016518 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80164d0:	69fb      	ldr	r3, [r7, #28]
 80164d2:	08da      	lsrs	r2, r3, #3
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	3208      	adds	r2, #8
 80164d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80164dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80164de:	69fb      	ldr	r3, [r7, #28]
 80164e0:	f003 0307 	and.w	r3, r3, #7
 80164e4:	009b      	lsls	r3, r3, #2
 80164e6:	220f      	movs	r2, #15
 80164e8:	fa02 f303 	lsl.w	r3, r2, r3
 80164ec:	43db      	mvns	r3, r3
 80164ee:	69ba      	ldr	r2, [r7, #24]
 80164f0:	4013      	ands	r3, r2
 80164f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80164f4:	683b      	ldr	r3, [r7, #0]
 80164f6:	691a      	ldr	r2, [r3, #16]
 80164f8:	69fb      	ldr	r3, [r7, #28]
 80164fa:	f003 0307 	and.w	r3, r3, #7
 80164fe:	009b      	lsls	r3, r3, #2
 8016500:	fa02 f303 	lsl.w	r3, r2, r3
 8016504:	69ba      	ldr	r2, [r7, #24]
 8016506:	4313      	orrs	r3, r2
 8016508:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801650a:	69fb      	ldr	r3, [r7, #28]
 801650c:	08da      	lsrs	r2, r3, #3
 801650e:	687b      	ldr	r3, [r7, #4]
 8016510:	3208      	adds	r2, #8
 8016512:	69b9      	ldr	r1, [r7, #24]
 8016514:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8016518:	687b      	ldr	r3, [r7, #4]
 801651a:	681b      	ldr	r3, [r3, #0]
 801651c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801651e:	69fb      	ldr	r3, [r7, #28]
 8016520:	005b      	lsls	r3, r3, #1
 8016522:	2203      	movs	r2, #3
 8016524:	fa02 f303 	lsl.w	r3, r2, r3
 8016528:	43db      	mvns	r3, r3
 801652a:	69ba      	ldr	r2, [r7, #24]
 801652c:	4013      	ands	r3, r2
 801652e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8016530:	683b      	ldr	r3, [r7, #0]
 8016532:	685b      	ldr	r3, [r3, #4]
 8016534:	f003 0203 	and.w	r2, r3, #3
 8016538:	69fb      	ldr	r3, [r7, #28]
 801653a:	005b      	lsls	r3, r3, #1
 801653c:	fa02 f303 	lsl.w	r3, r2, r3
 8016540:	69ba      	ldr	r2, [r7, #24]
 8016542:	4313      	orrs	r3, r2
 8016544:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8016546:	687b      	ldr	r3, [r7, #4]
 8016548:	69ba      	ldr	r2, [r7, #24]
 801654a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 801654c:	683b      	ldr	r3, [r7, #0]
 801654e:	685b      	ldr	r3, [r3, #4]
 8016550:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8016554:	2b00      	cmp	r3, #0
 8016556:	f000 80a2 	beq.w	801669e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801655a:	2300      	movs	r3, #0
 801655c:	60fb      	str	r3, [r7, #12]
 801655e:	4b57      	ldr	r3, [pc, #348]	; (80166bc <HAL_GPIO_Init+0x2e8>)
 8016560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016562:	4a56      	ldr	r2, [pc, #344]	; (80166bc <HAL_GPIO_Init+0x2e8>)
 8016564:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8016568:	6453      	str	r3, [r2, #68]	; 0x44
 801656a:	4b54      	ldr	r3, [pc, #336]	; (80166bc <HAL_GPIO_Init+0x2e8>)
 801656c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801656e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8016572:	60fb      	str	r3, [r7, #12]
 8016574:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8016576:	4a52      	ldr	r2, [pc, #328]	; (80166c0 <HAL_GPIO_Init+0x2ec>)
 8016578:	69fb      	ldr	r3, [r7, #28]
 801657a:	089b      	lsrs	r3, r3, #2
 801657c:	3302      	adds	r3, #2
 801657e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016582:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8016584:	69fb      	ldr	r3, [r7, #28]
 8016586:	f003 0303 	and.w	r3, r3, #3
 801658a:	009b      	lsls	r3, r3, #2
 801658c:	220f      	movs	r2, #15
 801658e:	fa02 f303 	lsl.w	r3, r2, r3
 8016592:	43db      	mvns	r3, r3
 8016594:	69ba      	ldr	r2, [r7, #24]
 8016596:	4013      	ands	r3, r2
 8016598:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 801659a:	687b      	ldr	r3, [r7, #4]
 801659c:	4a49      	ldr	r2, [pc, #292]	; (80166c4 <HAL_GPIO_Init+0x2f0>)
 801659e:	4293      	cmp	r3, r2
 80165a0:	d019      	beq.n	80165d6 <HAL_GPIO_Init+0x202>
 80165a2:	687b      	ldr	r3, [r7, #4]
 80165a4:	4a48      	ldr	r2, [pc, #288]	; (80166c8 <HAL_GPIO_Init+0x2f4>)
 80165a6:	4293      	cmp	r3, r2
 80165a8:	d013      	beq.n	80165d2 <HAL_GPIO_Init+0x1fe>
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	4a47      	ldr	r2, [pc, #284]	; (80166cc <HAL_GPIO_Init+0x2f8>)
 80165ae:	4293      	cmp	r3, r2
 80165b0:	d00d      	beq.n	80165ce <HAL_GPIO_Init+0x1fa>
 80165b2:	687b      	ldr	r3, [r7, #4]
 80165b4:	4a46      	ldr	r2, [pc, #280]	; (80166d0 <HAL_GPIO_Init+0x2fc>)
 80165b6:	4293      	cmp	r3, r2
 80165b8:	d007      	beq.n	80165ca <HAL_GPIO_Init+0x1f6>
 80165ba:	687b      	ldr	r3, [r7, #4]
 80165bc:	4a45      	ldr	r2, [pc, #276]	; (80166d4 <HAL_GPIO_Init+0x300>)
 80165be:	4293      	cmp	r3, r2
 80165c0:	d101      	bne.n	80165c6 <HAL_GPIO_Init+0x1f2>
 80165c2:	2304      	movs	r3, #4
 80165c4:	e008      	b.n	80165d8 <HAL_GPIO_Init+0x204>
 80165c6:	2307      	movs	r3, #7
 80165c8:	e006      	b.n	80165d8 <HAL_GPIO_Init+0x204>
 80165ca:	2303      	movs	r3, #3
 80165cc:	e004      	b.n	80165d8 <HAL_GPIO_Init+0x204>
 80165ce:	2302      	movs	r3, #2
 80165d0:	e002      	b.n	80165d8 <HAL_GPIO_Init+0x204>
 80165d2:	2301      	movs	r3, #1
 80165d4:	e000      	b.n	80165d8 <HAL_GPIO_Init+0x204>
 80165d6:	2300      	movs	r3, #0
 80165d8:	69fa      	ldr	r2, [r7, #28]
 80165da:	f002 0203 	and.w	r2, r2, #3
 80165de:	0092      	lsls	r2, r2, #2
 80165e0:	4093      	lsls	r3, r2
 80165e2:	69ba      	ldr	r2, [r7, #24]
 80165e4:	4313      	orrs	r3, r2
 80165e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80165e8:	4935      	ldr	r1, [pc, #212]	; (80166c0 <HAL_GPIO_Init+0x2ec>)
 80165ea:	69fb      	ldr	r3, [r7, #28]
 80165ec:	089b      	lsrs	r3, r3, #2
 80165ee:	3302      	adds	r3, #2
 80165f0:	69ba      	ldr	r2, [r7, #24]
 80165f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80165f6:	4b38      	ldr	r3, [pc, #224]	; (80166d8 <HAL_GPIO_Init+0x304>)
 80165f8:	689b      	ldr	r3, [r3, #8]
 80165fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80165fc:	693b      	ldr	r3, [r7, #16]
 80165fe:	43db      	mvns	r3, r3
 8016600:	69ba      	ldr	r2, [r7, #24]
 8016602:	4013      	ands	r3, r2
 8016604:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8016606:	683b      	ldr	r3, [r7, #0]
 8016608:	685b      	ldr	r3, [r3, #4]
 801660a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801660e:	2b00      	cmp	r3, #0
 8016610:	d003      	beq.n	801661a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8016612:	69ba      	ldr	r2, [r7, #24]
 8016614:	693b      	ldr	r3, [r7, #16]
 8016616:	4313      	orrs	r3, r2
 8016618:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 801661a:	4a2f      	ldr	r2, [pc, #188]	; (80166d8 <HAL_GPIO_Init+0x304>)
 801661c:	69bb      	ldr	r3, [r7, #24]
 801661e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8016620:	4b2d      	ldr	r3, [pc, #180]	; (80166d8 <HAL_GPIO_Init+0x304>)
 8016622:	68db      	ldr	r3, [r3, #12]
 8016624:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8016626:	693b      	ldr	r3, [r7, #16]
 8016628:	43db      	mvns	r3, r3
 801662a:	69ba      	ldr	r2, [r7, #24]
 801662c:	4013      	ands	r3, r2
 801662e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8016630:	683b      	ldr	r3, [r7, #0]
 8016632:	685b      	ldr	r3, [r3, #4]
 8016634:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8016638:	2b00      	cmp	r3, #0
 801663a:	d003      	beq.n	8016644 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 801663c:	69ba      	ldr	r2, [r7, #24]
 801663e:	693b      	ldr	r3, [r7, #16]
 8016640:	4313      	orrs	r3, r2
 8016642:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8016644:	4a24      	ldr	r2, [pc, #144]	; (80166d8 <HAL_GPIO_Init+0x304>)
 8016646:	69bb      	ldr	r3, [r7, #24]
 8016648:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 801664a:	4b23      	ldr	r3, [pc, #140]	; (80166d8 <HAL_GPIO_Init+0x304>)
 801664c:	685b      	ldr	r3, [r3, #4]
 801664e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8016650:	693b      	ldr	r3, [r7, #16]
 8016652:	43db      	mvns	r3, r3
 8016654:	69ba      	ldr	r2, [r7, #24]
 8016656:	4013      	ands	r3, r2
 8016658:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801665a:	683b      	ldr	r3, [r7, #0]
 801665c:	685b      	ldr	r3, [r3, #4]
 801665e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8016662:	2b00      	cmp	r3, #0
 8016664:	d003      	beq.n	801666e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8016666:	69ba      	ldr	r2, [r7, #24]
 8016668:	693b      	ldr	r3, [r7, #16]
 801666a:	4313      	orrs	r3, r2
 801666c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 801666e:	4a1a      	ldr	r2, [pc, #104]	; (80166d8 <HAL_GPIO_Init+0x304>)
 8016670:	69bb      	ldr	r3, [r7, #24]
 8016672:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8016674:	4b18      	ldr	r3, [pc, #96]	; (80166d8 <HAL_GPIO_Init+0x304>)
 8016676:	681b      	ldr	r3, [r3, #0]
 8016678:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801667a:	693b      	ldr	r3, [r7, #16]
 801667c:	43db      	mvns	r3, r3
 801667e:	69ba      	ldr	r2, [r7, #24]
 8016680:	4013      	ands	r3, r2
 8016682:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8016684:	683b      	ldr	r3, [r7, #0]
 8016686:	685b      	ldr	r3, [r3, #4]
 8016688:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801668c:	2b00      	cmp	r3, #0
 801668e:	d003      	beq.n	8016698 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8016690:	69ba      	ldr	r2, [r7, #24]
 8016692:	693b      	ldr	r3, [r7, #16]
 8016694:	4313      	orrs	r3, r2
 8016696:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8016698:	4a0f      	ldr	r2, [pc, #60]	; (80166d8 <HAL_GPIO_Init+0x304>)
 801669a:	69bb      	ldr	r3, [r7, #24]
 801669c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 801669e:	69fb      	ldr	r3, [r7, #28]
 80166a0:	3301      	adds	r3, #1
 80166a2:	61fb      	str	r3, [r7, #28]
 80166a4:	69fb      	ldr	r3, [r7, #28]
 80166a6:	2b0f      	cmp	r3, #15
 80166a8:	f67f aea2 	bls.w	80163f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80166ac:	bf00      	nop
 80166ae:	bf00      	nop
 80166b0:	3724      	adds	r7, #36	; 0x24
 80166b2:	46bd      	mov	sp, r7
 80166b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166b8:	4770      	bx	lr
 80166ba:	bf00      	nop
 80166bc:	40023800 	.word	0x40023800
 80166c0:	40013800 	.word	0x40013800
 80166c4:	40020000 	.word	0x40020000
 80166c8:	40020400 	.word	0x40020400
 80166cc:	40020800 	.word	0x40020800
 80166d0:	40020c00 	.word	0x40020c00
 80166d4:	40021000 	.word	0x40021000
 80166d8:	40013c00 	.word	0x40013c00

080166dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80166dc:	b480      	push	{r7}
 80166de:	b085      	sub	sp, #20
 80166e0:	af00      	add	r7, sp, #0
 80166e2:	6078      	str	r0, [r7, #4]
 80166e4:	460b      	mov	r3, r1
 80166e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	691a      	ldr	r2, [r3, #16]
 80166ec:	887b      	ldrh	r3, [r7, #2]
 80166ee:	4013      	ands	r3, r2
 80166f0:	2b00      	cmp	r3, #0
 80166f2:	d002      	beq.n	80166fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80166f4:	2301      	movs	r3, #1
 80166f6:	73fb      	strb	r3, [r7, #15]
 80166f8:	e001      	b.n	80166fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80166fa:	2300      	movs	r3, #0
 80166fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80166fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8016700:	4618      	mov	r0, r3
 8016702:	3714      	adds	r7, #20
 8016704:	46bd      	mov	sp, r7
 8016706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801670a:	4770      	bx	lr

0801670c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801670c:	b480      	push	{r7}
 801670e:	b083      	sub	sp, #12
 8016710:	af00      	add	r7, sp, #0
 8016712:	6078      	str	r0, [r7, #4]
 8016714:	460b      	mov	r3, r1
 8016716:	807b      	strh	r3, [r7, #2]
 8016718:	4613      	mov	r3, r2
 801671a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 801671c:	787b      	ldrb	r3, [r7, #1]
 801671e:	2b00      	cmp	r3, #0
 8016720:	d003      	beq.n	801672a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8016722:	887a      	ldrh	r2, [r7, #2]
 8016724:	687b      	ldr	r3, [r7, #4]
 8016726:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8016728:	e003      	b.n	8016732 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 801672a:	887b      	ldrh	r3, [r7, #2]
 801672c:	041a      	lsls	r2, r3, #16
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	619a      	str	r2, [r3, #24]
}
 8016732:	bf00      	nop
 8016734:	370c      	adds	r7, #12
 8016736:	46bd      	mov	sp, r7
 8016738:	f85d 7b04 	ldr.w	r7, [sp], #4
 801673c:	4770      	bx	lr
	...

08016740 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8016740:	b580      	push	{r7, lr}
 8016742:	b082      	sub	sp, #8
 8016744:	af00      	add	r7, sp, #0
 8016746:	4603      	mov	r3, r0
 8016748:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 801674a:	4b08      	ldr	r3, [pc, #32]	; (801676c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 801674c:	695a      	ldr	r2, [r3, #20]
 801674e:	88fb      	ldrh	r3, [r7, #6]
 8016750:	4013      	ands	r3, r2
 8016752:	2b00      	cmp	r3, #0
 8016754:	d006      	beq.n	8016764 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8016756:	4a05      	ldr	r2, [pc, #20]	; (801676c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8016758:	88fb      	ldrh	r3, [r7, #6]
 801675a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 801675c:	88fb      	ldrh	r3, [r7, #6]
 801675e:	4618      	mov	r0, r3
 8016760:	f7ec fda4 	bl	80032ac <HAL_GPIO_EXTI_Callback>
  }
}
 8016764:	bf00      	nop
 8016766:	3708      	adds	r7, #8
 8016768:	46bd      	mov	sp, r7
 801676a:	bd80      	pop	{r7, pc}
 801676c:	40013c00 	.word	0x40013c00

08016770 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8016770:	b580      	push	{r7, lr}
 8016772:	b084      	sub	sp, #16
 8016774:	af00      	add	r7, sp, #0
 8016776:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8016778:	687b      	ldr	r3, [r7, #4]
 801677a:	2b00      	cmp	r3, #0
 801677c:	d101      	bne.n	8016782 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 801677e:	2301      	movs	r3, #1
 8016780:	e12b      	b.n	80169da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8016782:	687b      	ldr	r3, [r7, #4]
 8016784:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8016788:	b2db      	uxtb	r3, r3
 801678a:	2b00      	cmp	r3, #0
 801678c:	d106      	bne.n	801679c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 801678e:	687b      	ldr	r3, [r7, #4]
 8016790:	2200      	movs	r2, #0
 8016792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8016796:	6878      	ldr	r0, [r7, #4]
 8016798:	f7fe fcbc 	bl	8015114 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 801679c:	687b      	ldr	r3, [r7, #4]
 801679e:	2224      	movs	r2, #36	; 0x24
 80167a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	681b      	ldr	r3, [r3, #0]
 80167a8:	681a      	ldr	r2, [r3, #0]
 80167aa:	687b      	ldr	r3, [r7, #4]
 80167ac:	681b      	ldr	r3, [r3, #0]
 80167ae:	f022 0201 	bic.w	r2, r2, #1
 80167b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80167b4:	687b      	ldr	r3, [r7, #4]
 80167b6:	681b      	ldr	r3, [r3, #0]
 80167b8:	681a      	ldr	r2, [r3, #0]
 80167ba:	687b      	ldr	r3, [r7, #4]
 80167bc:	681b      	ldr	r3, [r3, #0]
 80167be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80167c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80167c4:	687b      	ldr	r3, [r7, #4]
 80167c6:	681b      	ldr	r3, [r3, #0]
 80167c8:	681a      	ldr	r2, [r3, #0]
 80167ca:	687b      	ldr	r3, [r7, #4]
 80167cc:	681b      	ldr	r3, [r3, #0]
 80167ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80167d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80167d4:	f003 fa9a 	bl	8019d0c <HAL_RCC_GetPCLK1Freq>
 80167d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80167da:	687b      	ldr	r3, [r7, #4]
 80167dc:	685b      	ldr	r3, [r3, #4]
 80167de:	4a81      	ldr	r2, [pc, #516]	; (80169e4 <HAL_I2C_Init+0x274>)
 80167e0:	4293      	cmp	r3, r2
 80167e2:	d807      	bhi.n	80167f4 <HAL_I2C_Init+0x84>
 80167e4:	68fb      	ldr	r3, [r7, #12]
 80167e6:	4a80      	ldr	r2, [pc, #512]	; (80169e8 <HAL_I2C_Init+0x278>)
 80167e8:	4293      	cmp	r3, r2
 80167ea:	bf94      	ite	ls
 80167ec:	2301      	movls	r3, #1
 80167ee:	2300      	movhi	r3, #0
 80167f0:	b2db      	uxtb	r3, r3
 80167f2:	e006      	b.n	8016802 <HAL_I2C_Init+0x92>
 80167f4:	68fb      	ldr	r3, [r7, #12]
 80167f6:	4a7d      	ldr	r2, [pc, #500]	; (80169ec <HAL_I2C_Init+0x27c>)
 80167f8:	4293      	cmp	r3, r2
 80167fa:	bf94      	ite	ls
 80167fc:	2301      	movls	r3, #1
 80167fe:	2300      	movhi	r3, #0
 8016800:	b2db      	uxtb	r3, r3
 8016802:	2b00      	cmp	r3, #0
 8016804:	d001      	beq.n	801680a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8016806:	2301      	movs	r3, #1
 8016808:	e0e7      	b.n	80169da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 801680a:	68fb      	ldr	r3, [r7, #12]
 801680c:	4a78      	ldr	r2, [pc, #480]	; (80169f0 <HAL_I2C_Init+0x280>)
 801680e:	fba2 2303 	umull	r2, r3, r2, r3
 8016812:	0c9b      	lsrs	r3, r3, #18
 8016814:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8016816:	687b      	ldr	r3, [r7, #4]
 8016818:	681b      	ldr	r3, [r3, #0]
 801681a:	685b      	ldr	r3, [r3, #4]
 801681c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8016820:	687b      	ldr	r3, [r7, #4]
 8016822:	681b      	ldr	r3, [r3, #0]
 8016824:	68ba      	ldr	r2, [r7, #8]
 8016826:	430a      	orrs	r2, r1
 8016828:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 801682a:	687b      	ldr	r3, [r7, #4]
 801682c:	681b      	ldr	r3, [r3, #0]
 801682e:	6a1b      	ldr	r3, [r3, #32]
 8016830:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8016834:	687b      	ldr	r3, [r7, #4]
 8016836:	685b      	ldr	r3, [r3, #4]
 8016838:	4a6a      	ldr	r2, [pc, #424]	; (80169e4 <HAL_I2C_Init+0x274>)
 801683a:	4293      	cmp	r3, r2
 801683c:	d802      	bhi.n	8016844 <HAL_I2C_Init+0xd4>
 801683e:	68bb      	ldr	r3, [r7, #8]
 8016840:	3301      	adds	r3, #1
 8016842:	e009      	b.n	8016858 <HAL_I2C_Init+0xe8>
 8016844:	68bb      	ldr	r3, [r7, #8]
 8016846:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801684a:	fb02 f303 	mul.w	r3, r2, r3
 801684e:	4a69      	ldr	r2, [pc, #420]	; (80169f4 <HAL_I2C_Init+0x284>)
 8016850:	fba2 2303 	umull	r2, r3, r2, r3
 8016854:	099b      	lsrs	r3, r3, #6
 8016856:	3301      	adds	r3, #1
 8016858:	687a      	ldr	r2, [r7, #4]
 801685a:	6812      	ldr	r2, [r2, #0]
 801685c:	430b      	orrs	r3, r1
 801685e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8016860:	687b      	ldr	r3, [r7, #4]
 8016862:	681b      	ldr	r3, [r3, #0]
 8016864:	69db      	ldr	r3, [r3, #28]
 8016866:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 801686a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 801686e:	687b      	ldr	r3, [r7, #4]
 8016870:	685b      	ldr	r3, [r3, #4]
 8016872:	495c      	ldr	r1, [pc, #368]	; (80169e4 <HAL_I2C_Init+0x274>)
 8016874:	428b      	cmp	r3, r1
 8016876:	d819      	bhi.n	80168ac <HAL_I2C_Init+0x13c>
 8016878:	68fb      	ldr	r3, [r7, #12]
 801687a:	1e59      	subs	r1, r3, #1
 801687c:	687b      	ldr	r3, [r7, #4]
 801687e:	685b      	ldr	r3, [r3, #4]
 8016880:	005b      	lsls	r3, r3, #1
 8016882:	fbb1 f3f3 	udiv	r3, r1, r3
 8016886:	1c59      	adds	r1, r3, #1
 8016888:	f640 73fc 	movw	r3, #4092	; 0xffc
 801688c:	400b      	ands	r3, r1
 801688e:	2b00      	cmp	r3, #0
 8016890:	d00a      	beq.n	80168a8 <HAL_I2C_Init+0x138>
 8016892:	68fb      	ldr	r3, [r7, #12]
 8016894:	1e59      	subs	r1, r3, #1
 8016896:	687b      	ldr	r3, [r7, #4]
 8016898:	685b      	ldr	r3, [r3, #4]
 801689a:	005b      	lsls	r3, r3, #1
 801689c:	fbb1 f3f3 	udiv	r3, r1, r3
 80168a0:	3301      	adds	r3, #1
 80168a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80168a6:	e051      	b.n	801694c <HAL_I2C_Init+0x1dc>
 80168a8:	2304      	movs	r3, #4
 80168aa:	e04f      	b.n	801694c <HAL_I2C_Init+0x1dc>
 80168ac:	687b      	ldr	r3, [r7, #4]
 80168ae:	689b      	ldr	r3, [r3, #8]
 80168b0:	2b00      	cmp	r3, #0
 80168b2:	d111      	bne.n	80168d8 <HAL_I2C_Init+0x168>
 80168b4:	68fb      	ldr	r3, [r7, #12]
 80168b6:	1e58      	subs	r0, r3, #1
 80168b8:	687b      	ldr	r3, [r7, #4]
 80168ba:	6859      	ldr	r1, [r3, #4]
 80168bc:	460b      	mov	r3, r1
 80168be:	005b      	lsls	r3, r3, #1
 80168c0:	440b      	add	r3, r1
 80168c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80168c6:	3301      	adds	r3, #1
 80168c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80168cc:	2b00      	cmp	r3, #0
 80168ce:	bf0c      	ite	eq
 80168d0:	2301      	moveq	r3, #1
 80168d2:	2300      	movne	r3, #0
 80168d4:	b2db      	uxtb	r3, r3
 80168d6:	e012      	b.n	80168fe <HAL_I2C_Init+0x18e>
 80168d8:	68fb      	ldr	r3, [r7, #12]
 80168da:	1e58      	subs	r0, r3, #1
 80168dc:	687b      	ldr	r3, [r7, #4]
 80168de:	6859      	ldr	r1, [r3, #4]
 80168e0:	460b      	mov	r3, r1
 80168e2:	009b      	lsls	r3, r3, #2
 80168e4:	440b      	add	r3, r1
 80168e6:	0099      	lsls	r1, r3, #2
 80168e8:	440b      	add	r3, r1
 80168ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80168ee:	3301      	adds	r3, #1
 80168f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80168f4:	2b00      	cmp	r3, #0
 80168f6:	bf0c      	ite	eq
 80168f8:	2301      	moveq	r3, #1
 80168fa:	2300      	movne	r3, #0
 80168fc:	b2db      	uxtb	r3, r3
 80168fe:	2b00      	cmp	r3, #0
 8016900:	d001      	beq.n	8016906 <HAL_I2C_Init+0x196>
 8016902:	2301      	movs	r3, #1
 8016904:	e022      	b.n	801694c <HAL_I2C_Init+0x1dc>
 8016906:	687b      	ldr	r3, [r7, #4]
 8016908:	689b      	ldr	r3, [r3, #8]
 801690a:	2b00      	cmp	r3, #0
 801690c:	d10e      	bne.n	801692c <HAL_I2C_Init+0x1bc>
 801690e:	68fb      	ldr	r3, [r7, #12]
 8016910:	1e58      	subs	r0, r3, #1
 8016912:	687b      	ldr	r3, [r7, #4]
 8016914:	6859      	ldr	r1, [r3, #4]
 8016916:	460b      	mov	r3, r1
 8016918:	005b      	lsls	r3, r3, #1
 801691a:	440b      	add	r3, r1
 801691c:	fbb0 f3f3 	udiv	r3, r0, r3
 8016920:	3301      	adds	r3, #1
 8016922:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016926:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801692a:	e00f      	b.n	801694c <HAL_I2C_Init+0x1dc>
 801692c:	68fb      	ldr	r3, [r7, #12]
 801692e:	1e58      	subs	r0, r3, #1
 8016930:	687b      	ldr	r3, [r7, #4]
 8016932:	6859      	ldr	r1, [r3, #4]
 8016934:	460b      	mov	r3, r1
 8016936:	009b      	lsls	r3, r3, #2
 8016938:	440b      	add	r3, r1
 801693a:	0099      	lsls	r1, r3, #2
 801693c:	440b      	add	r3, r1
 801693e:	fbb0 f3f3 	udiv	r3, r0, r3
 8016942:	3301      	adds	r3, #1
 8016944:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016948:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801694c:	6879      	ldr	r1, [r7, #4]
 801694e:	6809      	ldr	r1, [r1, #0]
 8016950:	4313      	orrs	r3, r2
 8016952:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	681b      	ldr	r3, [r3, #0]
 8016958:	681b      	ldr	r3, [r3, #0]
 801695a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 801695e:	687b      	ldr	r3, [r7, #4]
 8016960:	69da      	ldr	r2, [r3, #28]
 8016962:	687b      	ldr	r3, [r7, #4]
 8016964:	6a1b      	ldr	r3, [r3, #32]
 8016966:	431a      	orrs	r2, r3
 8016968:	687b      	ldr	r3, [r7, #4]
 801696a:	681b      	ldr	r3, [r3, #0]
 801696c:	430a      	orrs	r2, r1
 801696e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	681b      	ldr	r3, [r3, #0]
 8016974:	689b      	ldr	r3, [r3, #8]
 8016976:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 801697a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 801697e:	687a      	ldr	r2, [r7, #4]
 8016980:	6911      	ldr	r1, [r2, #16]
 8016982:	687a      	ldr	r2, [r7, #4]
 8016984:	68d2      	ldr	r2, [r2, #12]
 8016986:	4311      	orrs	r1, r2
 8016988:	687a      	ldr	r2, [r7, #4]
 801698a:	6812      	ldr	r2, [r2, #0]
 801698c:	430b      	orrs	r3, r1
 801698e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8016990:	687b      	ldr	r3, [r7, #4]
 8016992:	681b      	ldr	r3, [r3, #0]
 8016994:	68db      	ldr	r3, [r3, #12]
 8016996:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 801699a:	687b      	ldr	r3, [r7, #4]
 801699c:	695a      	ldr	r2, [r3, #20]
 801699e:	687b      	ldr	r3, [r7, #4]
 80169a0:	699b      	ldr	r3, [r3, #24]
 80169a2:	431a      	orrs	r2, r3
 80169a4:	687b      	ldr	r3, [r7, #4]
 80169a6:	681b      	ldr	r3, [r3, #0]
 80169a8:	430a      	orrs	r2, r1
 80169aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80169ac:	687b      	ldr	r3, [r7, #4]
 80169ae:	681b      	ldr	r3, [r3, #0]
 80169b0:	681a      	ldr	r2, [r3, #0]
 80169b2:	687b      	ldr	r3, [r7, #4]
 80169b4:	681b      	ldr	r3, [r3, #0]
 80169b6:	f042 0201 	orr.w	r2, r2, #1
 80169ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80169bc:	687b      	ldr	r3, [r7, #4]
 80169be:	2200      	movs	r2, #0
 80169c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80169c2:	687b      	ldr	r3, [r7, #4]
 80169c4:	2220      	movs	r2, #32
 80169c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80169ca:	687b      	ldr	r3, [r7, #4]
 80169cc:	2200      	movs	r2, #0
 80169ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80169d0:	687b      	ldr	r3, [r7, #4]
 80169d2:	2200      	movs	r2, #0
 80169d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80169d8:	2300      	movs	r3, #0
}
 80169da:	4618      	mov	r0, r3
 80169dc:	3710      	adds	r7, #16
 80169de:	46bd      	mov	sp, r7
 80169e0:	bd80      	pop	{r7, pc}
 80169e2:	bf00      	nop
 80169e4:	000186a0 	.word	0x000186a0
 80169e8:	001e847f 	.word	0x001e847f
 80169ec:	003d08ff 	.word	0x003d08ff
 80169f0:	431bde83 	.word	0x431bde83
 80169f4:	10624dd3 	.word	0x10624dd3

080169f8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80169f8:	b580      	push	{r7, lr}
 80169fa:	b088      	sub	sp, #32
 80169fc:	af02      	add	r7, sp, #8
 80169fe:	60f8      	str	r0, [r7, #12]
 8016a00:	4608      	mov	r0, r1
 8016a02:	4611      	mov	r1, r2
 8016a04:	461a      	mov	r2, r3
 8016a06:	4603      	mov	r3, r0
 8016a08:	817b      	strh	r3, [r7, #10]
 8016a0a:	460b      	mov	r3, r1
 8016a0c:	813b      	strh	r3, [r7, #8]
 8016a0e:	4613      	mov	r3, r2
 8016a10:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8016a12:	f7fe ff8d 	bl	8015930 <HAL_GetTick>
 8016a16:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8016a18:	68fb      	ldr	r3, [r7, #12]
 8016a1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8016a1e:	b2db      	uxtb	r3, r3
 8016a20:	2b20      	cmp	r3, #32
 8016a22:	f040 80d9 	bne.w	8016bd8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8016a26:	697b      	ldr	r3, [r7, #20]
 8016a28:	9300      	str	r3, [sp, #0]
 8016a2a:	2319      	movs	r3, #25
 8016a2c:	2201      	movs	r2, #1
 8016a2e:	496d      	ldr	r1, [pc, #436]	; (8016be4 <HAL_I2C_Mem_Write+0x1ec>)
 8016a30:	68f8      	ldr	r0, [r7, #12]
 8016a32:	f002 fad1 	bl	8018fd8 <I2C_WaitOnFlagUntilTimeout>
 8016a36:	4603      	mov	r3, r0
 8016a38:	2b00      	cmp	r3, #0
 8016a3a:	d001      	beq.n	8016a40 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8016a3c:	2302      	movs	r3, #2
 8016a3e:	e0cc      	b.n	8016bda <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8016a40:	68fb      	ldr	r3, [r7, #12]
 8016a42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8016a46:	2b01      	cmp	r3, #1
 8016a48:	d101      	bne.n	8016a4e <HAL_I2C_Mem_Write+0x56>
 8016a4a:	2302      	movs	r3, #2
 8016a4c:	e0c5      	b.n	8016bda <HAL_I2C_Mem_Write+0x1e2>
 8016a4e:	68fb      	ldr	r3, [r7, #12]
 8016a50:	2201      	movs	r2, #1
 8016a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8016a56:	68fb      	ldr	r3, [r7, #12]
 8016a58:	681b      	ldr	r3, [r3, #0]
 8016a5a:	681b      	ldr	r3, [r3, #0]
 8016a5c:	f003 0301 	and.w	r3, r3, #1
 8016a60:	2b01      	cmp	r3, #1
 8016a62:	d007      	beq.n	8016a74 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8016a64:	68fb      	ldr	r3, [r7, #12]
 8016a66:	681b      	ldr	r3, [r3, #0]
 8016a68:	681a      	ldr	r2, [r3, #0]
 8016a6a:	68fb      	ldr	r3, [r7, #12]
 8016a6c:	681b      	ldr	r3, [r3, #0]
 8016a6e:	f042 0201 	orr.w	r2, r2, #1
 8016a72:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8016a74:	68fb      	ldr	r3, [r7, #12]
 8016a76:	681b      	ldr	r3, [r3, #0]
 8016a78:	681a      	ldr	r2, [r3, #0]
 8016a7a:	68fb      	ldr	r3, [r7, #12]
 8016a7c:	681b      	ldr	r3, [r3, #0]
 8016a7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8016a82:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8016a84:	68fb      	ldr	r3, [r7, #12]
 8016a86:	2221      	movs	r2, #33	; 0x21
 8016a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8016a8c:	68fb      	ldr	r3, [r7, #12]
 8016a8e:	2240      	movs	r2, #64	; 0x40
 8016a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016a94:	68fb      	ldr	r3, [r7, #12]
 8016a96:	2200      	movs	r2, #0
 8016a98:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8016a9a:	68fb      	ldr	r3, [r7, #12]
 8016a9c:	6a3a      	ldr	r2, [r7, #32]
 8016a9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8016aa0:	68fb      	ldr	r3, [r7, #12]
 8016aa2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016aa4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8016aa6:	68fb      	ldr	r3, [r7, #12]
 8016aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016aaa:	b29a      	uxth	r2, r3
 8016aac:	68fb      	ldr	r3, [r7, #12]
 8016aae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8016ab0:	68fb      	ldr	r3, [r7, #12]
 8016ab2:	4a4d      	ldr	r2, [pc, #308]	; (8016be8 <HAL_I2C_Mem_Write+0x1f0>)
 8016ab4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8016ab6:	88f8      	ldrh	r0, [r7, #6]
 8016ab8:	893a      	ldrh	r2, [r7, #8]
 8016aba:	8979      	ldrh	r1, [r7, #10]
 8016abc:	697b      	ldr	r3, [r7, #20]
 8016abe:	9301      	str	r3, [sp, #4]
 8016ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ac2:	9300      	str	r3, [sp, #0]
 8016ac4:	4603      	mov	r3, r0
 8016ac6:	68f8      	ldr	r0, [r7, #12]
 8016ac8:	f002 f860 	bl	8018b8c <I2C_RequestMemoryWrite>
 8016acc:	4603      	mov	r3, r0
 8016ace:	2b00      	cmp	r3, #0
 8016ad0:	d052      	beq.n	8016b78 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8016ad2:	2301      	movs	r3, #1
 8016ad4:	e081      	b.n	8016bda <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8016ad6:	697a      	ldr	r2, [r7, #20]
 8016ad8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016ada:	68f8      	ldr	r0, [r7, #12]
 8016adc:	f002 fb52 	bl	8019184 <I2C_WaitOnTXEFlagUntilTimeout>
 8016ae0:	4603      	mov	r3, r0
 8016ae2:	2b00      	cmp	r3, #0
 8016ae4:	d00d      	beq.n	8016b02 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8016ae6:	68fb      	ldr	r3, [r7, #12]
 8016ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016aea:	2b04      	cmp	r3, #4
 8016aec:	d107      	bne.n	8016afe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8016aee:	68fb      	ldr	r3, [r7, #12]
 8016af0:	681b      	ldr	r3, [r3, #0]
 8016af2:	681a      	ldr	r2, [r3, #0]
 8016af4:	68fb      	ldr	r3, [r7, #12]
 8016af6:	681b      	ldr	r3, [r3, #0]
 8016af8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016afc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8016afe:	2301      	movs	r3, #1
 8016b00:	e06b      	b.n	8016bda <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8016b02:	68fb      	ldr	r3, [r7, #12]
 8016b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b06:	781a      	ldrb	r2, [r3, #0]
 8016b08:	68fb      	ldr	r3, [r7, #12]
 8016b0a:	681b      	ldr	r3, [r3, #0]
 8016b0c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8016b0e:	68fb      	ldr	r3, [r7, #12]
 8016b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b12:	1c5a      	adds	r2, r3, #1
 8016b14:	68fb      	ldr	r3, [r7, #12]
 8016b16:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8016b18:	68fb      	ldr	r3, [r7, #12]
 8016b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016b1c:	3b01      	subs	r3, #1
 8016b1e:	b29a      	uxth	r2, r3
 8016b20:	68fb      	ldr	r3, [r7, #12]
 8016b22:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8016b24:	68fb      	ldr	r3, [r7, #12]
 8016b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016b28:	b29b      	uxth	r3, r3
 8016b2a:	3b01      	subs	r3, #1
 8016b2c:	b29a      	uxth	r2, r3
 8016b2e:	68fb      	ldr	r3, [r7, #12]
 8016b30:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8016b32:	68fb      	ldr	r3, [r7, #12]
 8016b34:	681b      	ldr	r3, [r3, #0]
 8016b36:	695b      	ldr	r3, [r3, #20]
 8016b38:	f003 0304 	and.w	r3, r3, #4
 8016b3c:	2b04      	cmp	r3, #4
 8016b3e:	d11b      	bne.n	8016b78 <HAL_I2C_Mem_Write+0x180>
 8016b40:	68fb      	ldr	r3, [r7, #12]
 8016b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016b44:	2b00      	cmp	r3, #0
 8016b46:	d017      	beq.n	8016b78 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8016b48:	68fb      	ldr	r3, [r7, #12]
 8016b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b4c:	781a      	ldrb	r2, [r3, #0]
 8016b4e:	68fb      	ldr	r3, [r7, #12]
 8016b50:	681b      	ldr	r3, [r3, #0]
 8016b52:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8016b54:	68fb      	ldr	r3, [r7, #12]
 8016b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b58:	1c5a      	adds	r2, r3, #1
 8016b5a:	68fb      	ldr	r3, [r7, #12]
 8016b5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8016b5e:	68fb      	ldr	r3, [r7, #12]
 8016b60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016b62:	3b01      	subs	r3, #1
 8016b64:	b29a      	uxth	r2, r3
 8016b66:	68fb      	ldr	r3, [r7, #12]
 8016b68:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8016b6a:	68fb      	ldr	r3, [r7, #12]
 8016b6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016b6e:	b29b      	uxth	r3, r3
 8016b70:	3b01      	subs	r3, #1
 8016b72:	b29a      	uxth	r2, r3
 8016b74:	68fb      	ldr	r3, [r7, #12]
 8016b76:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8016b78:	68fb      	ldr	r3, [r7, #12]
 8016b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016b7c:	2b00      	cmp	r3, #0
 8016b7e:	d1aa      	bne.n	8016ad6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8016b80:	697a      	ldr	r2, [r7, #20]
 8016b82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016b84:	68f8      	ldr	r0, [r7, #12]
 8016b86:	f002 fb3e 	bl	8019206 <I2C_WaitOnBTFFlagUntilTimeout>
 8016b8a:	4603      	mov	r3, r0
 8016b8c:	2b00      	cmp	r3, #0
 8016b8e:	d00d      	beq.n	8016bac <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8016b90:	68fb      	ldr	r3, [r7, #12]
 8016b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016b94:	2b04      	cmp	r3, #4
 8016b96:	d107      	bne.n	8016ba8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8016b98:	68fb      	ldr	r3, [r7, #12]
 8016b9a:	681b      	ldr	r3, [r3, #0]
 8016b9c:	681a      	ldr	r2, [r3, #0]
 8016b9e:	68fb      	ldr	r3, [r7, #12]
 8016ba0:	681b      	ldr	r3, [r3, #0]
 8016ba2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016ba6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8016ba8:	2301      	movs	r3, #1
 8016baa:	e016      	b.n	8016bda <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8016bac:	68fb      	ldr	r3, [r7, #12]
 8016bae:	681b      	ldr	r3, [r3, #0]
 8016bb0:	681a      	ldr	r2, [r3, #0]
 8016bb2:	68fb      	ldr	r3, [r7, #12]
 8016bb4:	681b      	ldr	r3, [r3, #0]
 8016bb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016bba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8016bbc:	68fb      	ldr	r3, [r7, #12]
 8016bbe:	2220      	movs	r2, #32
 8016bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8016bc4:	68fb      	ldr	r3, [r7, #12]
 8016bc6:	2200      	movs	r2, #0
 8016bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016bcc:	68fb      	ldr	r3, [r7, #12]
 8016bce:	2200      	movs	r2, #0
 8016bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8016bd4:	2300      	movs	r3, #0
 8016bd6:	e000      	b.n	8016bda <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8016bd8:	2302      	movs	r3, #2
  }
}
 8016bda:	4618      	mov	r0, r3
 8016bdc:	3718      	adds	r7, #24
 8016bde:	46bd      	mov	sp, r7
 8016be0:	bd80      	pop	{r7, pc}
 8016be2:	bf00      	nop
 8016be4:	00100002 	.word	0x00100002
 8016be8:	ffff0000 	.word	0xffff0000

08016bec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8016bec:	b580      	push	{r7, lr}
 8016bee:	b08c      	sub	sp, #48	; 0x30
 8016bf0:	af02      	add	r7, sp, #8
 8016bf2:	60f8      	str	r0, [r7, #12]
 8016bf4:	4608      	mov	r0, r1
 8016bf6:	4611      	mov	r1, r2
 8016bf8:	461a      	mov	r2, r3
 8016bfa:	4603      	mov	r3, r0
 8016bfc:	817b      	strh	r3, [r7, #10]
 8016bfe:	460b      	mov	r3, r1
 8016c00:	813b      	strh	r3, [r7, #8]
 8016c02:	4613      	mov	r3, r2
 8016c04:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8016c06:	f7fe fe93 	bl	8015930 <HAL_GetTick>
 8016c0a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8016c0c:	68fb      	ldr	r3, [r7, #12]
 8016c0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8016c12:	b2db      	uxtb	r3, r3
 8016c14:	2b20      	cmp	r3, #32
 8016c16:	f040 8208 	bne.w	801702a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8016c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c1c:	9300      	str	r3, [sp, #0]
 8016c1e:	2319      	movs	r3, #25
 8016c20:	2201      	movs	r2, #1
 8016c22:	497b      	ldr	r1, [pc, #492]	; (8016e10 <HAL_I2C_Mem_Read+0x224>)
 8016c24:	68f8      	ldr	r0, [r7, #12]
 8016c26:	f002 f9d7 	bl	8018fd8 <I2C_WaitOnFlagUntilTimeout>
 8016c2a:	4603      	mov	r3, r0
 8016c2c:	2b00      	cmp	r3, #0
 8016c2e:	d001      	beq.n	8016c34 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8016c30:	2302      	movs	r3, #2
 8016c32:	e1fb      	b.n	801702c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8016c34:	68fb      	ldr	r3, [r7, #12]
 8016c36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8016c3a:	2b01      	cmp	r3, #1
 8016c3c:	d101      	bne.n	8016c42 <HAL_I2C_Mem_Read+0x56>
 8016c3e:	2302      	movs	r3, #2
 8016c40:	e1f4      	b.n	801702c <HAL_I2C_Mem_Read+0x440>
 8016c42:	68fb      	ldr	r3, [r7, #12]
 8016c44:	2201      	movs	r2, #1
 8016c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8016c4a:	68fb      	ldr	r3, [r7, #12]
 8016c4c:	681b      	ldr	r3, [r3, #0]
 8016c4e:	681b      	ldr	r3, [r3, #0]
 8016c50:	f003 0301 	and.w	r3, r3, #1
 8016c54:	2b01      	cmp	r3, #1
 8016c56:	d007      	beq.n	8016c68 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8016c58:	68fb      	ldr	r3, [r7, #12]
 8016c5a:	681b      	ldr	r3, [r3, #0]
 8016c5c:	681a      	ldr	r2, [r3, #0]
 8016c5e:	68fb      	ldr	r3, [r7, #12]
 8016c60:	681b      	ldr	r3, [r3, #0]
 8016c62:	f042 0201 	orr.w	r2, r2, #1
 8016c66:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8016c68:	68fb      	ldr	r3, [r7, #12]
 8016c6a:	681b      	ldr	r3, [r3, #0]
 8016c6c:	681a      	ldr	r2, [r3, #0]
 8016c6e:	68fb      	ldr	r3, [r7, #12]
 8016c70:	681b      	ldr	r3, [r3, #0]
 8016c72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8016c76:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8016c78:	68fb      	ldr	r3, [r7, #12]
 8016c7a:	2222      	movs	r2, #34	; 0x22
 8016c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8016c80:	68fb      	ldr	r3, [r7, #12]
 8016c82:	2240      	movs	r2, #64	; 0x40
 8016c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016c88:	68fb      	ldr	r3, [r7, #12]
 8016c8a:	2200      	movs	r2, #0
 8016c8c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8016c8e:	68fb      	ldr	r3, [r7, #12]
 8016c90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016c92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8016c94:	68fb      	ldr	r3, [r7, #12]
 8016c96:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8016c98:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8016c9a:	68fb      	ldr	r3, [r7, #12]
 8016c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016c9e:	b29a      	uxth	r2, r3
 8016ca0:	68fb      	ldr	r3, [r7, #12]
 8016ca2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8016ca4:	68fb      	ldr	r3, [r7, #12]
 8016ca6:	4a5b      	ldr	r2, [pc, #364]	; (8016e14 <HAL_I2C_Mem_Read+0x228>)
 8016ca8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8016caa:	88f8      	ldrh	r0, [r7, #6]
 8016cac:	893a      	ldrh	r2, [r7, #8]
 8016cae:	8979      	ldrh	r1, [r7, #10]
 8016cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cb2:	9301      	str	r3, [sp, #4]
 8016cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016cb6:	9300      	str	r3, [sp, #0]
 8016cb8:	4603      	mov	r3, r0
 8016cba:	68f8      	ldr	r0, [r7, #12]
 8016cbc:	f001 fffc 	bl	8018cb8 <I2C_RequestMemoryRead>
 8016cc0:	4603      	mov	r3, r0
 8016cc2:	2b00      	cmp	r3, #0
 8016cc4:	d001      	beq.n	8016cca <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8016cc6:	2301      	movs	r3, #1
 8016cc8:	e1b0      	b.n	801702c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8016cca:	68fb      	ldr	r3, [r7, #12]
 8016ccc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016cce:	2b00      	cmp	r3, #0
 8016cd0:	d113      	bne.n	8016cfa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8016cd2:	2300      	movs	r3, #0
 8016cd4:	623b      	str	r3, [r7, #32]
 8016cd6:	68fb      	ldr	r3, [r7, #12]
 8016cd8:	681b      	ldr	r3, [r3, #0]
 8016cda:	695b      	ldr	r3, [r3, #20]
 8016cdc:	623b      	str	r3, [r7, #32]
 8016cde:	68fb      	ldr	r3, [r7, #12]
 8016ce0:	681b      	ldr	r3, [r3, #0]
 8016ce2:	699b      	ldr	r3, [r3, #24]
 8016ce4:	623b      	str	r3, [r7, #32]
 8016ce6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8016ce8:	68fb      	ldr	r3, [r7, #12]
 8016cea:	681b      	ldr	r3, [r3, #0]
 8016cec:	681a      	ldr	r2, [r3, #0]
 8016cee:	68fb      	ldr	r3, [r7, #12]
 8016cf0:	681b      	ldr	r3, [r3, #0]
 8016cf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016cf6:	601a      	str	r2, [r3, #0]
 8016cf8:	e184      	b.n	8017004 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8016cfa:	68fb      	ldr	r3, [r7, #12]
 8016cfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016cfe:	2b01      	cmp	r3, #1
 8016d00:	d11b      	bne.n	8016d3a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8016d02:	68fb      	ldr	r3, [r7, #12]
 8016d04:	681b      	ldr	r3, [r3, #0]
 8016d06:	681a      	ldr	r2, [r3, #0]
 8016d08:	68fb      	ldr	r3, [r7, #12]
 8016d0a:	681b      	ldr	r3, [r3, #0]
 8016d0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8016d10:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8016d12:	2300      	movs	r3, #0
 8016d14:	61fb      	str	r3, [r7, #28]
 8016d16:	68fb      	ldr	r3, [r7, #12]
 8016d18:	681b      	ldr	r3, [r3, #0]
 8016d1a:	695b      	ldr	r3, [r3, #20]
 8016d1c:	61fb      	str	r3, [r7, #28]
 8016d1e:	68fb      	ldr	r3, [r7, #12]
 8016d20:	681b      	ldr	r3, [r3, #0]
 8016d22:	699b      	ldr	r3, [r3, #24]
 8016d24:	61fb      	str	r3, [r7, #28]
 8016d26:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8016d28:	68fb      	ldr	r3, [r7, #12]
 8016d2a:	681b      	ldr	r3, [r3, #0]
 8016d2c:	681a      	ldr	r2, [r3, #0]
 8016d2e:	68fb      	ldr	r3, [r7, #12]
 8016d30:	681b      	ldr	r3, [r3, #0]
 8016d32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016d36:	601a      	str	r2, [r3, #0]
 8016d38:	e164      	b.n	8017004 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8016d3a:	68fb      	ldr	r3, [r7, #12]
 8016d3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016d3e:	2b02      	cmp	r3, #2
 8016d40:	d11b      	bne.n	8016d7a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8016d42:	68fb      	ldr	r3, [r7, #12]
 8016d44:	681b      	ldr	r3, [r3, #0]
 8016d46:	681a      	ldr	r2, [r3, #0]
 8016d48:	68fb      	ldr	r3, [r7, #12]
 8016d4a:	681b      	ldr	r3, [r3, #0]
 8016d4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8016d50:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8016d52:	68fb      	ldr	r3, [r7, #12]
 8016d54:	681b      	ldr	r3, [r3, #0]
 8016d56:	681a      	ldr	r2, [r3, #0]
 8016d58:	68fb      	ldr	r3, [r7, #12]
 8016d5a:	681b      	ldr	r3, [r3, #0]
 8016d5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8016d60:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8016d62:	2300      	movs	r3, #0
 8016d64:	61bb      	str	r3, [r7, #24]
 8016d66:	68fb      	ldr	r3, [r7, #12]
 8016d68:	681b      	ldr	r3, [r3, #0]
 8016d6a:	695b      	ldr	r3, [r3, #20]
 8016d6c:	61bb      	str	r3, [r7, #24]
 8016d6e:	68fb      	ldr	r3, [r7, #12]
 8016d70:	681b      	ldr	r3, [r3, #0]
 8016d72:	699b      	ldr	r3, [r3, #24]
 8016d74:	61bb      	str	r3, [r7, #24]
 8016d76:	69bb      	ldr	r3, [r7, #24]
 8016d78:	e144      	b.n	8017004 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8016d7a:	2300      	movs	r3, #0
 8016d7c:	617b      	str	r3, [r7, #20]
 8016d7e:	68fb      	ldr	r3, [r7, #12]
 8016d80:	681b      	ldr	r3, [r3, #0]
 8016d82:	695b      	ldr	r3, [r3, #20]
 8016d84:	617b      	str	r3, [r7, #20]
 8016d86:	68fb      	ldr	r3, [r7, #12]
 8016d88:	681b      	ldr	r3, [r3, #0]
 8016d8a:	699b      	ldr	r3, [r3, #24]
 8016d8c:	617b      	str	r3, [r7, #20]
 8016d8e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8016d90:	e138      	b.n	8017004 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8016d92:	68fb      	ldr	r3, [r7, #12]
 8016d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016d96:	2b03      	cmp	r3, #3
 8016d98:	f200 80f1 	bhi.w	8016f7e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8016d9c:	68fb      	ldr	r3, [r7, #12]
 8016d9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016da0:	2b01      	cmp	r3, #1
 8016da2:	d123      	bne.n	8016dec <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8016da4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016da6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8016da8:	68f8      	ldr	r0, [r7, #12]
 8016daa:	f002 fa9f 	bl	80192ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8016dae:	4603      	mov	r3, r0
 8016db0:	2b00      	cmp	r3, #0
 8016db2:	d001      	beq.n	8016db8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8016db4:	2301      	movs	r3, #1
 8016db6:	e139      	b.n	801702c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8016db8:	68fb      	ldr	r3, [r7, #12]
 8016dba:	681b      	ldr	r3, [r3, #0]
 8016dbc:	691a      	ldr	r2, [r3, #16]
 8016dbe:	68fb      	ldr	r3, [r7, #12]
 8016dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016dc2:	b2d2      	uxtb	r2, r2
 8016dc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8016dc6:	68fb      	ldr	r3, [r7, #12]
 8016dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016dca:	1c5a      	adds	r2, r3, #1
 8016dcc:	68fb      	ldr	r3, [r7, #12]
 8016dce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8016dd0:	68fb      	ldr	r3, [r7, #12]
 8016dd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016dd4:	3b01      	subs	r3, #1
 8016dd6:	b29a      	uxth	r2, r3
 8016dd8:	68fb      	ldr	r3, [r7, #12]
 8016dda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8016ddc:	68fb      	ldr	r3, [r7, #12]
 8016dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016de0:	b29b      	uxth	r3, r3
 8016de2:	3b01      	subs	r3, #1
 8016de4:	b29a      	uxth	r2, r3
 8016de6:	68fb      	ldr	r3, [r7, #12]
 8016de8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8016dea:	e10b      	b.n	8017004 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8016dec:	68fb      	ldr	r3, [r7, #12]
 8016dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016df0:	2b02      	cmp	r3, #2
 8016df2:	d14e      	bne.n	8016e92 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8016df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016df6:	9300      	str	r3, [sp, #0]
 8016df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016dfa:	2200      	movs	r2, #0
 8016dfc:	4906      	ldr	r1, [pc, #24]	; (8016e18 <HAL_I2C_Mem_Read+0x22c>)
 8016dfe:	68f8      	ldr	r0, [r7, #12]
 8016e00:	f002 f8ea 	bl	8018fd8 <I2C_WaitOnFlagUntilTimeout>
 8016e04:	4603      	mov	r3, r0
 8016e06:	2b00      	cmp	r3, #0
 8016e08:	d008      	beq.n	8016e1c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8016e0a:	2301      	movs	r3, #1
 8016e0c:	e10e      	b.n	801702c <HAL_I2C_Mem_Read+0x440>
 8016e0e:	bf00      	nop
 8016e10:	00100002 	.word	0x00100002
 8016e14:	ffff0000 	.word	0xffff0000
 8016e18:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8016e1c:	68fb      	ldr	r3, [r7, #12]
 8016e1e:	681b      	ldr	r3, [r3, #0]
 8016e20:	681a      	ldr	r2, [r3, #0]
 8016e22:	68fb      	ldr	r3, [r7, #12]
 8016e24:	681b      	ldr	r3, [r3, #0]
 8016e26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016e2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8016e2c:	68fb      	ldr	r3, [r7, #12]
 8016e2e:	681b      	ldr	r3, [r3, #0]
 8016e30:	691a      	ldr	r2, [r3, #16]
 8016e32:	68fb      	ldr	r3, [r7, #12]
 8016e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016e36:	b2d2      	uxtb	r2, r2
 8016e38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8016e3a:	68fb      	ldr	r3, [r7, #12]
 8016e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016e3e:	1c5a      	adds	r2, r3, #1
 8016e40:	68fb      	ldr	r3, [r7, #12]
 8016e42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8016e44:	68fb      	ldr	r3, [r7, #12]
 8016e46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016e48:	3b01      	subs	r3, #1
 8016e4a:	b29a      	uxth	r2, r3
 8016e4c:	68fb      	ldr	r3, [r7, #12]
 8016e4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8016e50:	68fb      	ldr	r3, [r7, #12]
 8016e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016e54:	b29b      	uxth	r3, r3
 8016e56:	3b01      	subs	r3, #1
 8016e58:	b29a      	uxth	r2, r3
 8016e5a:	68fb      	ldr	r3, [r7, #12]
 8016e5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8016e5e:	68fb      	ldr	r3, [r7, #12]
 8016e60:	681b      	ldr	r3, [r3, #0]
 8016e62:	691a      	ldr	r2, [r3, #16]
 8016e64:	68fb      	ldr	r3, [r7, #12]
 8016e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016e68:	b2d2      	uxtb	r2, r2
 8016e6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8016e6c:	68fb      	ldr	r3, [r7, #12]
 8016e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016e70:	1c5a      	adds	r2, r3, #1
 8016e72:	68fb      	ldr	r3, [r7, #12]
 8016e74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8016e76:	68fb      	ldr	r3, [r7, #12]
 8016e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016e7a:	3b01      	subs	r3, #1
 8016e7c:	b29a      	uxth	r2, r3
 8016e7e:	68fb      	ldr	r3, [r7, #12]
 8016e80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8016e82:	68fb      	ldr	r3, [r7, #12]
 8016e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016e86:	b29b      	uxth	r3, r3
 8016e88:	3b01      	subs	r3, #1
 8016e8a:	b29a      	uxth	r2, r3
 8016e8c:	68fb      	ldr	r3, [r7, #12]
 8016e8e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8016e90:	e0b8      	b.n	8017004 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8016e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e94:	9300      	str	r3, [sp, #0]
 8016e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e98:	2200      	movs	r2, #0
 8016e9a:	4966      	ldr	r1, [pc, #408]	; (8017034 <HAL_I2C_Mem_Read+0x448>)
 8016e9c:	68f8      	ldr	r0, [r7, #12]
 8016e9e:	f002 f89b 	bl	8018fd8 <I2C_WaitOnFlagUntilTimeout>
 8016ea2:	4603      	mov	r3, r0
 8016ea4:	2b00      	cmp	r3, #0
 8016ea6:	d001      	beq.n	8016eac <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8016ea8:	2301      	movs	r3, #1
 8016eaa:	e0bf      	b.n	801702c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8016eac:	68fb      	ldr	r3, [r7, #12]
 8016eae:	681b      	ldr	r3, [r3, #0]
 8016eb0:	681a      	ldr	r2, [r3, #0]
 8016eb2:	68fb      	ldr	r3, [r7, #12]
 8016eb4:	681b      	ldr	r3, [r3, #0]
 8016eb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8016eba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8016ebc:	68fb      	ldr	r3, [r7, #12]
 8016ebe:	681b      	ldr	r3, [r3, #0]
 8016ec0:	691a      	ldr	r2, [r3, #16]
 8016ec2:	68fb      	ldr	r3, [r7, #12]
 8016ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016ec6:	b2d2      	uxtb	r2, r2
 8016ec8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8016eca:	68fb      	ldr	r3, [r7, #12]
 8016ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016ece:	1c5a      	adds	r2, r3, #1
 8016ed0:	68fb      	ldr	r3, [r7, #12]
 8016ed2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8016ed4:	68fb      	ldr	r3, [r7, #12]
 8016ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016ed8:	3b01      	subs	r3, #1
 8016eda:	b29a      	uxth	r2, r3
 8016edc:	68fb      	ldr	r3, [r7, #12]
 8016ede:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8016ee0:	68fb      	ldr	r3, [r7, #12]
 8016ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016ee4:	b29b      	uxth	r3, r3
 8016ee6:	3b01      	subs	r3, #1
 8016ee8:	b29a      	uxth	r2, r3
 8016eea:	68fb      	ldr	r3, [r7, #12]
 8016eec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8016eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ef0:	9300      	str	r3, [sp, #0]
 8016ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ef4:	2200      	movs	r2, #0
 8016ef6:	494f      	ldr	r1, [pc, #316]	; (8017034 <HAL_I2C_Mem_Read+0x448>)
 8016ef8:	68f8      	ldr	r0, [r7, #12]
 8016efa:	f002 f86d 	bl	8018fd8 <I2C_WaitOnFlagUntilTimeout>
 8016efe:	4603      	mov	r3, r0
 8016f00:	2b00      	cmp	r3, #0
 8016f02:	d001      	beq.n	8016f08 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8016f04:	2301      	movs	r3, #1
 8016f06:	e091      	b.n	801702c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8016f08:	68fb      	ldr	r3, [r7, #12]
 8016f0a:	681b      	ldr	r3, [r3, #0]
 8016f0c:	681a      	ldr	r2, [r3, #0]
 8016f0e:	68fb      	ldr	r3, [r7, #12]
 8016f10:	681b      	ldr	r3, [r3, #0]
 8016f12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016f16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8016f18:	68fb      	ldr	r3, [r7, #12]
 8016f1a:	681b      	ldr	r3, [r3, #0]
 8016f1c:	691a      	ldr	r2, [r3, #16]
 8016f1e:	68fb      	ldr	r3, [r7, #12]
 8016f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f22:	b2d2      	uxtb	r2, r2
 8016f24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8016f26:	68fb      	ldr	r3, [r7, #12]
 8016f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f2a:	1c5a      	adds	r2, r3, #1
 8016f2c:	68fb      	ldr	r3, [r7, #12]
 8016f2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8016f30:	68fb      	ldr	r3, [r7, #12]
 8016f32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016f34:	3b01      	subs	r3, #1
 8016f36:	b29a      	uxth	r2, r3
 8016f38:	68fb      	ldr	r3, [r7, #12]
 8016f3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8016f3c:	68fb      	ldr	r3, [r7, #12]
 8016f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016f40:	b29b      	uxth	r3, r3
 8016f42:	3b01      	subs	r3, #1
 8016f44:	b29a      	uxth	r2, r3
 8016f46:	68fb      	ldr	r3, [r7, #12]
 8016f48:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8016f4a:	68fb      	ldr	r3, [r7, #12]
 8016f4c:	681b      	ldr	r3, [r3, #0]
 8016f4e:	691a      	ldr	r2, [r3, #16]
 8016f50:	68fb      	ldr	r3, [r7, #12]
 8016f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f54:	b2d2      	uxtb	r2, r2
 8016f56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8016f58:	68fb      	ldr	r3, [r7, #12]
 8016f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f5c:	1c5a      	adds	r2, r3, #1
 8016f5e:	68fb      	ldr	r3, [r7, #12]
 8016f60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8016f62:	68fb      	ldr	r3, [r7, #12]
 8016f64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016f66:	3b01      	subs	r3, #1
 8016f68:	b29a      	uxth	r2, r3
 8016f6a:	68fb      	ldr	r3, [r7, #12]
 8016f6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8016f6e:	68fb      	ldr	r3, [r7, #12]
 8016f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016f72:	b29b      	uxth	r3, r3
 8016f74:	3b01      	subs	r3, #1
 8016f76:	b29a      	uxth	r2, r3
 8016f78:	68fb      	ldr	r3, [r7, #12]
 8016f7a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8016f7c:	e042      	b.n	8017004 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8016f7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016f80:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8016f82:	68f8      	ldr	r0, [r7, #12]
 8016f84:	f002 f9b2 	bl	80192ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8016f88:	4603      	mov	r3, r0
 8016f8a:	2b00      	cmp	r3, #0
 8016f8c:	d001      	beq.n	8016f92 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8016f8e:	2301      	movs	r3, #1
 8016f90:	e04c      	b.n	801702c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8016f92:	68fb      	ldr	r3, [r7, #12]
 8016f94:	681b      	ldr	r3, [r3, #0]
 8016f96:	691a      	ldr	r2, [r3, #16]
 8016f98:	68fb      	ldr	r3, [r7, #12]
 8016f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f9c:	b2d2      	uxtb	r2, r2
 8016f9e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8016fa0:	68fb      	ldr	r3, [r7, #12]
 8016fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016fa4:	1c5a      	adds	r2, r3, #1
 8016fa6:	68fb      	ldr	r3, [r7, #12]
 8016fa8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8016faa:	68fb      	ldr	r3, [r7, #12]
 8016fac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016fae:	3b01      	subs	r3, #1
 8016fb0:	b29a      	uxth	r2, r3
 8016fb2:	68fb      	ldr	r3, [r7, #12]
 8016fb4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8016fb6:	68fb      	ldr	r3, [r7, #12]
 8016fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016fba:	b29b      	uxth	r3, r3
 8016fbc:	3b01      	subs	r3, #1
 8016fbe:	b29a      	uxth	r2, r3
 8016fc0:	68fb      	ldr	r3, [r7, #12]
 8016fc2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8016fc4:	68fb      	ldr	r3, [r7, #12]
 8016fc6:	681b      	ldr	r3, [r3, #0]
 8016fc8:	695b      	ldr	r3, [r3, #20]
 8016fca:	f003 0304 	and.w	r3, r3, #4
 8016fce:	2b04      	cmp	r3, #4
 8016fd0:	d118      	bne.n	8017004 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8016fd2:	68fb      	ldr	r3, [r7, #12]
 8016fd4:	681b      	ldr	r3, [r3, #0]
 8016fd6:	691a      	ldr	r2, [r3, #16]
 8016fd8:	68fb      	ldr	r3, [r7, #12]
 8016fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016fdc:	b2d2      	uxtb	r2, r2
 8016fde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8016fe0:	68fb      	ldr	r3, [r7, #12]
 8016fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016fe4:	1c5a      	adds	r2, r3, #1
 8016fe6:	68fb      	ldr	r3, [r7, #12]
 8016fe8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8016fea:	68fb      	ldr	r3, [r7, #12]
 8016fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016fee:	3b01      	subs	r3, #1
 8016ff0:	b29a      	uxth	r2, r3
 8016ff2:	68fb      	ldr	r3, [r7, #12]
 8016ff4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8016ff6:	68fb      	ldr	r3, [r7, #12]
 8016ff8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016ffa:	b29b      	uxth	r3, r3
 8016ffc:	3b01      	subs	r3, #1
 8016ffe:	b29a      	uxth	r2, r3
 8017000:	68fb      	ldr	r3, [r7, #12]
 8017002:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8017004:	68fb      	ldr	r3, [r7, #12]
 8017006:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017008:	2b00      	cmp	r3, #0
 801700a:	f47f aec2 	bne.w	8016d92 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 801700e:	68fb      	ldr	r3, [r7, #12]
 8017010:	2220      	movs	r2, #32
 8017012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8017016:	68fb      	ldr	r3, [r7, #12]
 8017018:	2200      	movs	r2, #0
 801701a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801701e:	68fb      	ldr	r3, [r7, #12]
 8017020:	2200      	movs	r2, #0
 8017022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8017026:	2300      	movs	r3, #0
 8017028:	e000      	b.n	801702c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 801702a:	2302      	movs	r3, #2
  }
}
 801702c:	4618      	mov	r0, r3
 801702e:	3728      	adds	r7, #40	; 0x28
 8017030:	46bd      	mov	sp, r7
 8017032:	bd80      	pop	{r7, pc}
 8017034:	00010004 	.word	0x00010004

08017038 <HAL_I2C_Master_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8017038:	b480      	push	{r7}
 801703a:	b087      	sub	sp, #28
 801703c:	af00      	add	r7, sp, #0
 801703e:	60f8      	str	r0, [r7, #12]
 8017040:	607a      	str	r2, [r7, #4]
 8017042:	461a      	mov	r2, r3
 8017044:	460b      	mov	r3, r1
 8017046:	817b      	strh	r3, [r7, #10]
 8017048:	4613      	mov	r3, r2
 801704a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 801704c:	2300      	movs	r3, #0
 801704e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count      = 0x00U;
 8017050:	2300      	movs	r3, #0
 8017052:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8017054:	68fb      	ldr	r3, [r7, #12]
 8017056:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801705a:	b2db      	uxtb	r3, r3
 801705c:	2b20      	cmp	r3, #32
 801705e:	f040 80a6 	bne.w	80171ae <HAL_I2C_Master_Seq_Transmit_IT+0x176>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 8017062:	68fb      	ldr	r3, [r7, #12]
 8017064:	681b      	ldr	r3, [r3, #0]
 8017066:	681b      	ldr	r3, [r3, #0]
 8017068:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801706c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017070:	d005      	beq.n	801707e <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 8017072:	6a3b      	ldr	r3, [r7, #32]
 8017074:	2b08      	cmp	r3, #8
 8017076:	d002      	beq.n	801707e <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 8017078:	6a3b      	ldr	r3, [r7, #32]
 801707a:	2b01      	cmp	r3, #1
 801707c:	d130      	bne.n	80170e0 <HAL_I2C_Master_Seq_Transmit_IT+0xa8>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 801707e:	4b4f      	ldr	r3, [pc, #316]	; (80171bc <HAL_I2C_Master_Seq_Transmit_IT+0x184>)
 8017080:	681b      	ldr	r3, [r3, #0]
 8017082:	08db      	lsrs	r3, r3, #3
 8017084:	4a4e      	ldr	r2, [pc, #312]	; (80171c0 <HAL_I2C_Master_Seq_Transmit_IT+0x188>)
 8017086:	fba2 2303 	umull	r2, r3, r2, r3
 801708a:	0a1a      	lsrs	r2, r3, #8
 801708c:	4613      	mov	r3, r2
 801708e:	009b      	lsls	r3, r3, #2
 8017090:	4413      	add	r3, r2
 8017092:	009a      	lsls	r2, r3, #2
 8017094:	4413      	add	r3, r2
 8017096:	613b      	str	r3, [r7, #16]
      do
      {
        count--;
 8017098:	693b      	ldr	r3, [r7, #16]
 801709a:	3b01      	subs	r3, #1
 801709c:	613b      	str	r3, [r7, #16]
        if (count == 0U)
 801709e:	693b      	ldr	r3, [r7, #16]
 80170a0:	2b00      	cmp	r3, #0
 80170a2:	d116      	bne.n	80170d2 <HAL_I2C_Master_Seq_Transmit_IT+0x9a>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80170a4:	68fb      	ldr	r3, [r7, #12]
 80170a6:	2200      	movs	r2, #0
 80170a8:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80170aa:	68fb      	ldr	r3, [r7, #12]
 80170ac:	2220      	movs	r2, #32
 80170ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80170b2:	68fb      	ldr	r3, [r7, #12]
 80170b4:	2200      	movs	r2, #0
 80170b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80170ba:	68fb      	ldr	r3, [r7, #12]
 80170bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80170be:	f043 0220 	orr.w	r2, r3, #32
 80170c2:	68fb      	ldr	r3, [r7, #12]
 80170c4:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80170c6:	68fb      	ldr	r3, [r7, #12]
 80170c8:	2200      	movs	r2, #0
 80170ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80170ce:	2301      	movs	r3, #1
 80170d0:	e06e      	b.n	80171b0 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80170d2:	68fb      	ldr	r3, [r7, #12]
 80170d4:	681b      	ldr	r3, [r3, #0]
 80170d6:	699b      	ldr	r3, [r3, #24]
 80170d8:	f003 0302 	and.w	r3, r3, #2
 80170dc:	2b02      	cmp	r3, #2
 80170de:	d0db      	beq.n	8017098 <HAL_I2C_Master_Seq_Transmit_IT+0x60>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80170e0:	68fb      	ldr	r3, [r7, #12]
 80170e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80170e6:	2b01      	cmp	r3, #1
 80170e8:	d101      	bne.n	80170ee <HAL_I2C_Master_Seq_Transmit_IT+0xb6>
 80170ea:	2302      	movs	r3, #2
 80170ec:	e060      	b.n	80171b0 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
 80170ee:	68fb      	ldr	r3, [r7, #12]
 80170f0:	2201      	movs	r2, #1
 80170f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80170f6:	68fb      	ldr	r3, [r7, #12]
 80170f8:	681b      	ldr	r3, [r3, #0]
 80170fa:	681b      	ldr	r3, [r3, #0]
 80170fc:	f003 0301 	and.w	r3, r3, #1
 8017100:	2b01      	cmp	r3, #1
 8017102:	d007      	beq.n	8017114 <HAL_I2C_Master_Seq_Transmit_IT+0xdc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8017104:	68fb      	ldr	r3, [r7, #12]
 8017106:	681b      	ldr	r3, [r3, #0]
 8017108:	681a      	ldr	r2, [r3, #0]
 801710a:	68fb      	ldr	r3, [r7, #12]
 801710c:	681b      	ldr	r3, [r3, #0]
 801710e:	f042 0201 	orr.w	r2, r2, #1
 8017112:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8017114:	68fb      	ldr	r3, [r7, #12]
 8017116:	681b      	ldr	r3, [r3, #0]
 8017118:	681a      	ldr	r2, [r3, #0]
 801711a:	68fb      	ldr	r3, [r7, #12]
 801711c:	681b      	ldr	r3, [r3, #0]
 801711e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8017122:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8017124:	68fb      	ldr	r3, [r7, #12]
 8017126:	2221      	movs	r2, #33	; 0x21
 8017128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 801712c:	68fb      	ldr	r3, [r7, #12]
 801712e:	2210      	movs	r2, #16
 8017130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8017134:	68fb      	ldr	r3, [r7, #12]
 8017136:	2200      	movs	r2, #0
 8017138:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801713a:	68fb      	ldr	r3, [r7, #12]
 801713c:	687a      	ldr	r2, [r7, #4]
 801713e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8017140:	68fb      	ldr	r3, [r7, #12]
 8017142:	893a      	ldrh	r2, [r7, #8]
 8017144:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8017146:	68fb      	ldr	r3, [r7, #12]
 8017148:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801714a:	b29a      	uxth	r2, r3
 801714c:	68fb      	ldr	r3, [r7, #12]
 801714e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8017150:	68fb      	ldr	r3, [r7, #12]
 8017152:	6a3a      	ldr	r2, [r7, #32]
 8017154:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8017156:	897a      	ldrh	r2, [r7, #10]
 8017158:	68fb      	ldr	r3, [r7, #12]
 801715a:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 801715c:	68fb      	ldr	r3, [r7, #12]
 801715e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017160:	617b      	str	r3, [r7, #20]

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 8017162:	697b      	ldr	r3, [r7, #20]
 8017164:	2b11      	cmp	r3, #17
 8017166:	d10c      	bne.n	8017182 <HAL_I2C_Master_Seq_Transmit_IT+0x14a>
 8017168:	6a3b      	ldr	r3, [r7, #32]
 801716a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 801716e:	d003      	beq.n	8017178 <HAL_I2C_Master_Seq_Transmit_IT+0x140>
 8017170:	6a3b      	ldr	r3, [r7, #32]
 8017172:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8017176:	d101      	bne.n	801717c <HAL_I2C_Master_Seq_Transmit_IT+0x144>
 8017178:	2301      	movs	r3, #1
 801717a:	e000      	b.n	801717e <HAL_I2C_Master_Seq_Transmit_IT+0x146>
 801717c:	2300      	movs	r3, #0
 801717e:	2b01      	cmp	r3, #1
 8017180:	d107      	bne.n	8017192 <HAL_I2C_Master_Seq_Transmit_IT+0x15a>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8017182:	68fb      	ldr	r3, [r7, #12]
 8017184:	681b      	ldr	r3, [r3, #0]
 8017186:	681a      	ldr	r2, [r3, #0]
 8017188:	68fb      	ldr	r3, [r7, #12]
 801718a:	681b      	ldr	r3, [r3, #0]
 801718c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017190:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017192:	68fb      	ldr	r3, [r7, #12]
 8017194:	2200      	movs	r2, #0
 8017196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801719a:	68fb      	ldr	r3, [r7, #12]
 801719c:	681b      	ldr	r3, [r3, #0]
 801719e:	685a      	ldr	r2, [r3, #4]
 80171a0:	68fb      	ldr	r3, [r7, #12]
 80171a2:	681b      	ldr	r3, [r3, #0]
 80171a4:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80171a8:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80171aa:	2300      	movs	r3, #0
 80171ac:	e000      	b.n	80171b0 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
  }
  else
  {
    return HAL_BUSY;
 80171ae:	2302      	movs	r3, #2
  }
}
 80171b0:	4618      	mov	r0, r3
 80171b2:	371c      	adds	r7, #28
 80171b4:	46bd      	mov	sp, r7
 80171b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171ba:	4770      	bx	lr
 80171bc:	2000017c 	.word	0x2000017c
 80171c0:	14f8b589 	.word	0x14f8b589

080171c4 <HAL_I2C_Master_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 80171c4:	b480      	push	{r7}
 80171c6:	b089      	sub	sp, #36	; 0x24
 80171c8:	af00      	add	r7, sp, #0
 80171ca:	60f8      	str	r0, [r7, #12]
 80171cc:	607a      	str	r2, [r7, #4]
 80171ce:	461a      	mov	r2, r3
 80171d0:	460b      	mov	r3, r1
 80171d2:	817b      	strh	r3, [r7, #10]
 80171d4:	4613      	mov	r3, r2
 80171d6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 80171d8:	2300      	movs	r3, #0
 80171da:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80171dc:	2300      	movs	r3, #0
 80171de:	617b      	str	r3, [r7, #20]
  uint32_t enableIT = (I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80171e0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80171e4:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80171e6:	68fb      	ldr	r3, [r7, #12]
 80171e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80171ec:	b2db      	uxtb	r3, r3
 80171ee:	2b20      	cmp	r3, #32
 80171f0:	f040 80da 	bne.w	80173a8 <HAL_I2C_Master_Seq_Receive_IT+0x1e4>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 80171f4:	68fb      	ldr	r3, [r7, #12]
 80171f6:	681b      	ldr	r3, [r3, #0]
 80171f8:	681b      	ldr	r3, [r3, #0]
 80171fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80171fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017202:	d005      	beq.n	8017210 <HAL_I2C_Master_Seq_Receive_IT+0x4c>
 8017204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017206:	2b08      	cmp	r3, #8
 8017208:	d002      	beq.n	8017210 <HAL_I2C_Master_Seq_Receive_IT+0x4c>
 801720a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801720c:	2b01      	cmp	r3, #1
 801720e:	d130      	bne.n	8017272 <HAL_I2C_Master_Seq_Receive_IT+0xae>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8017210:	4b69      	ldr	r3, [pc, #420]	; (80173b8 <HAL_I2C_Master_Seq_Receive_IT+0x1f4>)
 8017212:	681b      	ldr	r3, [r3, #0]
 8017214:	08db      	lsrs	r3, r3, #3
 8017216:	4a69      	ldr	r2, [pc, #420]	; (80173bc <HAL_I2C_Master_Seq_Receive_IT+0x1f8>)
 8017218:	fba2 2303 	umull	r2, r3, r2, r3
 801721c:	0a1a      	lsrs	r2, r3, #8
 801721e:	4613      	mov	r3, r2
 8017220:	009b      	lsls	r3, r3, #2
 8017222:	4413      	add	r3, r2
 8017224:	009a      	lsls	r2, r3, #2
 8017226:	4413      	add	r3, r2
 8017228:	617b      	str	r3, [r7, #20]
      do
      {
        count--;
 801722a:	697b      	ldr	r3, [r7, #20]
 801722c:	3b01      	subs	r3, #1
 801722e:	617b      	str	r3, [r7, #20]
        if (count == 0U)
 8017230:	697b      	ldr	r3, [r7, #20]
 8017232:	2b00      	cmp	r3, #0
 8017234:	d116      	bne.n	8017264 <HAL_I2C_Master_Seq_Receive_IT+0xa0>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8017236:	68fb      	ldr	r3, [r7, #12]
 8017238:	2200      	movs	r2, #0
 801723a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 801723c:	68fb      	ldr	r3, [r7, #12]
 801723e:	2220      	movs	r2, #32
 8017240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8017244:	68fb      	ldr	r3, [r7, #12]
 8017246:	2200      	movs	r2, #0
 8017248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801724c:	68fb      	ldr	r3, [r7, #12]
 801724e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017250:	f043 0220 	orr.w	r2, r3, #32
 8017254:	68fb      	ldr	r3, [r7, #12]
 8017256:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8017258:	68fb      	ldr	r3, [r7, #12]
 801725a:	2200      	movs	r2, #0
 801725c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8017260:	2301      	movs	r3, #1
 8017262:	e0a2      	b.n	80173aa <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8017264:	68fb      	ldr	r3, [r7, #12]
 8017266:	681b      	ldr	r3, [r3, #0]
 8017268:	699b      	ldr	r3, [r3, #24]
 801726a:	f003 0302 	and.w	r3, r3, #2
 801726e:	2b02      	cmp	r3, #2
 8017270:	d0db      	beq.n	801722a <HAL_I2C_Master_Seq_Receive_IT+0x66>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8017272:	68fb      	ldr	r3, [r7, #12]
 8017274:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017278:	2b01      	cmp	r3, #1
 801727a:	d101      	bne.n	8017280 <HAL_I2C_Master_Seq_Receive_IT+0xbc>
 801727c:	2302      	movs	r3, #2
 801727e:	e094      	b.n	80173aa <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
 8017280:	68fb      	ldr	r3, [r7, #12]
 8017282:	2201      	movs	r2, #1
 8017284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8017288:	68fb      	ldr	r3, [r7, #12]
 801728a:	681b      	ldr	r3, [r3, #0]
 801728c:	681b      	ldr	r3, [r3, #0]
 801728e:	f003 0301 	and.w	r3, r3, #1
 8017292:	2b01      	cmp	r3, #1
 8017294:	d007      	beq.n	80172a6 <HAL_I2C_Master_Seq_Receive_IT+0xe2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8017296:	68fb      	ldr	r3, [r7, #12]
 8017298:	681b      	ldr	r3, [r3, #0]
 801729a:	681a      	ldr	r2, [r3, #0]
 801729c:	68fb      	ldr	r3, [r7, #12]
 801729e:	681b      	ldr	r3, [r3, #0]
 80172a0:	f042 0201 	orr.w	r2, r2, #1
 80172a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80172a6:	68fb      	ldr	r3, [r7, #12]
 80172a8:	681b      	ldr	r3, [r3, #0]
 80172aa:	681a      	ldr	r2, [r3, #0]
 80172ac:	68fb      	ldr	r3, [r7, #12]
 80172ae:	681b      	ldr	r3, [r3, #0]
 80172b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80172b4:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80172b6:	68fb      	ldr	r3, [r7, #12]
 80172b8:	2222      	movs	r2, #34	; 0x22
 80172ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80172be:	68fb      	ldr	r3, [r7, #12]
 80172c0:	2210      	movs	r2, #16
 80172c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80172c6:	68fb      	ldr	r3, [r7, #12]
 80172c8:	2200      	movs	r2, #0
 80172ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80172cc:	68fb      	ldr	r3, [r7, #12]
 80172ce:	687a      	ldr	r2, [r7, #4]
 80172d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80172d2:	68fb      	ldr	r3, [r7, #12]
 80172d4:	893a      	ldrh	r2, [r7, #8]
 80172d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80172d8:	68fb      	ldr	r3, [r7, #12]
 80172da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80172dc:	b29a      	uxth	r2, r3
 80172de:	68fb      	ldr	r3, [r7, #12]
 80172e0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 80172e2:	68fb      	ldr	r3, [r7, #12]
 80172e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80172e6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80172e8:	897a      	ldrh	r2, [r7, #10]
 80172ea:	68fb      	ldr	r3, [r7, #12]
 80172ec:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 80172ee:	68fb      	ldr	r3, [r7, #12]
 80172f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80172f2:	61bb      	str	r3, [r7, #24]

    if ((hi2c->XferCount == 2U) && ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP)))
 80172f4:	68fb      	ldr	r3, [r7, #12]
 80172f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80172f8:	b29b      	uxth	r3, r3
 80172fa:	2b02      	cmp	r3, #2
 80172fc:	d126      	bne.n	801734c <HAL_I2C_Master_Seq_Receive_IT+0x188>
 80172fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017300:	2b20      	cmp	r3, #32
 8017302:	d002      	beq.n	801730a <HAL_I2C_Master_Seq_Receive_IT+0x146>
 8017304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017306:	2b10      	cmp	r3, #16
 8017308:	d120      	bne.n	801734c <HAL_I2C_Master_Seq_Receive_IT+0x188>
    {
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 801730a:	69bb      	ldr	r3, [r7, #24]
 801730c:	2b12      	cmp	r3, #18
 801730e:	d114      	bne.n	801733a <HAL_I2C_Master_Seq_Receive_IT+0x176>
      {
        /* Disable Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017310:	68fb      	ldr	r3, [r7, #12]
 8017312:	681b      	ldr	r3, [r3, #0]
 8017314:	681a      	ldr	r2, [r3, #0]
 8017316:	68fb      	ldr	r3, [r7, #12]
 8017318:	681b      	ldr	r3, [r3, #0]
 801731a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801731e:	601a      	str	r2, [r3, #0]

        /* Enable Pos */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8017320:	68fb      	ldr	r3, [r7, #12]
 8017322:	681b      	ldr	r3, [r3, #0]
 8017324:	681a      	ldr	r2, [r3, #0]
 8017326:	68fb      	ldr	r3, [r7, #12]
 8017328:	681b      	ldr	r3, [r3, #0]
 801732a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801732e:	601a      	str	r2, [r3, #0]

        /* Remove Enabling of IT_BUF, mean RXNE treatment, treat the 2 bytes through BTF */
        enableIT &= ~I2C_IT_BUF;
 8017330:	69fb      	ldr	r3, [r7, #28]
 8017332:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8017336:	61fb      	str	r3, [r7, #28]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8017338:	e010      	b.n	801735c <HAL_I2C_Master_Seq_Receive_IT+0x198>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801733a:	68fb      	ldr	r3, [r7, #12]
 801733c:	681b      	ldr	r3, [r3, #0]
 801733e:	681a      	ldr	r2, [r3, #0]
 8017340:	68fb      	ldr	r3, [r7, #12]
 8017342:	681b      	ldr	r3, [r3, #0]
 8017344:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8017348:	601a      	str	r2, [r3, #0]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 801734a:	e007      	b.n	801735c <HAL_I2C_Master_Seq_Receive_IT+0x198>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801734c:	68fb      	ldr	r3, [r7, #12]
 801734e:	681b      	ldr	r3, [r3, #0]
 8017350:	681a      	ldr	r2, [r3, #0]
 8017352:	68fb      	ldr	r3, [r7, #12]
 8017354:	681b      	ldr	r3, [r3, #0]
 8017356:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801735a:	601a      	str	r2, [r3, #0]
    }

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 801735c:	69bb      	ldr	r3, [r7, #24]
 801735e:	2b12      	cmp	r3, #18
 8017360:	d10c      	bne.n	801737c <HAL_I2C_Master_Seq_Receive_IT+0x1b8>
 8017362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017364:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8017368:	d003      	beq.n	8017372 <HAL_I2C_Master_Seq_Receive_IT+0x1ae>
 801736a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801736c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8017370:	d101      	bne.n	8017376 <HAL_I2C_Master_Seq_Receive_IT+0x1b2>
 8017372:	2301      	movs	r3, #1
 8017374:	e000      	b.n	8017378 <HAL_I2C_Master_Seq_Receive_IT+0x1b4>
 8017376:	2300      	movs	r3, #0
 8017378:	2b01      	cmp	r3, #1
 801737a:	d107      	bne.n	801738c <HAL_I2C_Master_Seq_Receive_IT+0x1c8>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801737c:	68fb      	ldr	r3, [r7, #12]
 801737e:	681b      	ldr	r3, [r3, #0]
 8017380:	681a      	ldr	r2, [r3, #0]
 8017382:	68fb      	ldr	r3, [r7, #12]
 8017384:	681b      	ldr	r3, [r3, #0]
 8017386:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801738a:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801738c:	68fb      	ldr	r3, [r7, #12]
 801738e:	2200      	movs	r2, #0
 8017390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable interrupts */
    __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 8017394:	68fb      	ldr	r3, [r7, #12]
 8017396:	681b      	ldr	r3, [r3, #0]
 8017398:	6859      	ldr	r1, [r3, #4]
 801739a:	68fb      	ldr	r3, [r7, #12]
 801739c:	681b      	ldr	r3, [r3, #0]
 801739e:	69fa      	ldr	r2, [r7, #28]
 80173a0:	430a      	orrs	r2, r1
 80173a2:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80173a4:	2300      	movs	r3, #0
 80173a6:	e000      	b.n	80173aa <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
  }
  else
  {
    return HAL_BUSY;
 80173a8:	2302      	movs	r3, #2
  }
}
 80173aa:	4618      	mov	r0, r3
 80173ac:	3724      	adds	r7, #36	; 0x24
 80173ae:	46bd      	mov	sp, r7
 80173b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173b4:	4770      	bx	lr
 80173b6:	bf00      	nop
 80173b8:	2000017c 	.word	0x2000017c
 80173bc:	14f8b589 	.word	0x14f8b589

080173c0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80173c0:	b580      	push	{r7, lr}
 80173c2:	b088      	sub	sp, #32
 80173c4:	af00      	add	r7, sp, #0
 80173c6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80173c8:	2300      	movs	r3, #0
 80173ca:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80173cc:	687b      	ldr	r3, [r7, #4]
 80173ce:	681b      	ldr	r3, [r3, #0]
 80173d0:	685b      	ldr	r3, [r3, #4]
 80173d2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80173d4:	687b      	ldr	r3, [r7, #4]
 80173d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80173d8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80173da:	687b      	ldr	r3, [r7, #4]
 80173dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80173e0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80173e2:	687b      	ldr	r3, [r7, #4]
 80173e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80173e8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80173ea:	7bfb      	ldrb	r3, [r7, #15]
 80173ec:	2b10      	cmp	r3, #16
 80173ee:	d003      	beq.n	80173f8 <HAL_I2C_EV_IRQHandler+0x38>
 80173f0:	7bfb      	ldrb	r3, [r7, #15]
 80173f2:	2b40      	cmp	r3, #64	; 0x40
 80173f4:	f040 80c1 	bne.w	801757a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80173f8:	687b      	ldr	r3, [r7, #4]
 80173fa:	681b      	ldr	r3, [r3, #0]
 80173fc:	699b      	ldr	r3, [r3, #24]
 80173fe:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8017400:	687b      	ldr	r3, [r7, #4]
 8017402:	681b      	ldr	r3, [r3, #0]
 8017404:	695b      	ldr	r3, [r3, #20]
 8017406:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8017408:	69fb      	ldr	r3, [r7, #28]
 801740a:	f003 0301 	and.w	r3, r3, #1
 801740e:	2b00      	cmp	r3, #0
 8017410:	d10d      	bne.n	801742e <HAL_I2C_EV_IRQHandler+0x6e>
 8017412:	693b      	ldr	r3, [r7, #16]
 8017414:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8017418:	d003      	beq.n	8017422 <HAL_I2C_EV_IRQHandler+0x62>
 801741a:	693b      	ldr	r3, [r7, #16]
 801741c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8017420:	d101      	bne.n	8017426 <HAL_I2C_EV_IRQHandler+0x66>
 8017422:	2301      	movs	r3, #1
 8017424:	e000      	b.n	8017428 <HAL_I2C_EV_IRQHandler+0x68>
 8017426:	2300      	movs	r3, #0
 8017428:	2b01      	cmp	r3, #1
 801742a:	f000 8132 	beq.w	8017692 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801742e:	69fb      	ldr	r3, [r7, #28]
 8017430:	f003 0301 	and.w	r3, r3, #1
 8017434:	2b00      	cmp	r3, #0
 8017436:	d00c      	beq.n	8017452 <HAL_I2C_EV_IRQHandler+0x92>
 8017438:	697b      	ldr	r3, [r7, #20]
 801743a:	0a5b      	lsrs	r3, r3, #9
 801743c:	f003 0301 	and.w	r3, r3, #1
 8017440:	2b00      	cmp	r3, #0
 8017442:	d006      	beq.n	8017452 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8017444:	6878      	ldr	r0, [r7, #4]
 8017446:	f001 ffd6 	bl	80193f6 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 801744a:	6878      	ldr	r0, [r7, #4]
 801744c:	f000 fd83 	bl	8017f56 <I2C_Master_SB>
 8017450:	e092      	b.n	8017578 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8017452:	69fb      	ldr	r3, [r7, #28]
 8017454:	08db      	lsrs	r3, r3, #3
 8017456:	f003 0301 	and.w	r3, r3, #1
 801745a:	2b00      	cmp	r3, #0
 801745c:	d009      	beq.n	8017472 <HAL_I2C_EV_IRQHandler+0xb2>
 801745e:	697b      	ldr	r3, [r7, #20]
 8017460:	0a5b      	lsrs	r3, r3, #9
 8017462:	f003 0301 	and.w	r3, r3, #1
 8017466:	2b00      	cmp	r3, #0
 8017468:	d003      	beq.n	8017472 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 801746a:	6878      	ldr	r0, [r7, #4]
 801746c:	f000 fdf9 	bl	8018062 <I2C_Master_ADD10>
 8017470:	e082      	b.n	8017578 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8017472:	69fb      	ldr	r3, [r7, #28]
 8017474:	085b      	lsrs	r3, r3, #1
 8017476:	f003 0301 	and.w	r3, r3, #1
 801747a:	2b00      	cmp	r3, #0
 801747c:	d009      	beq.n	8017492 <HAL_I2C_EV_IRQHandler+0xd2>
 801747e:	697b      	ldr	r3, [r7, #20]
 8017480:	0a5b      	lsrs	r3, r3, #9
 8017482:	f003 0301 	and.w	r3, r3, #1
 8017486:	2b00      	cmp	r3, #0
 8017488:	d003      	beq.n	8017492 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 801748a:	6878      	ldr	r0, [r7, #4]
 801748c:	f000 fe13 	bl	80180b6 <I2C_Master_ADDR>
 8017490:	e072      	b.n	8017578 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8017492:	69bb      	ldr	r3, [r7, #24]
 8017494:	089b      	lsrs	r3, r3, #2
 8017496:	f003 0301 	and.w	r3, r3, #1
 801749a:	2b00      	cmp	r3, #0
 801749c:	d03b      	beq.n	8017516 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 801749e:	687b      	ldr	r3, [r7, #4]
 80174a0:	681b      	ldr	r3, [r3, #0]
 80174a2:	685b      	ldr	r3, [r3, #4]
 80174a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80174a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80174ac:	f000 80f3 	beq.w	8017696 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80174b0:	69fb      	ldr	r3, [r7, #28]
 80174b2:	09db      	lsrs	r3, r3, #7
 80174b4:	f003 0301 	and.w	r3, r3, #1
 80174b8:	2b00      	cmp	r3, #0
 80174ba:	d00f      	beq.n	80174dc <HAL_I2C_EV_IRQHandler+0x11c>
 80174bc:	697b      	ldr	r3, [r7, #20]
 80174be:	0a9b      	lsrs	r3, r3, #10
 80174c0:	f003 0301 	and.w	r3, r3, #1
 80174c4:	2b00      	cmp	r3, #0
 80174c6:	d009      	beq.n	80174dc <HAL_I2C_EV_IRQHandler+0x11c>
 80174c8:	69fb      	ldr	r3, [r7, #28]
 80174ca:	089b      	lsrs	r3, r3, #2
 80174cc:	f003 0301 	and.w	r3, r3, #1
 80174d0:	2b00      	cmp	r3, #0
 80174d2:	d103      	bne.n	80174dc <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80174d4:	6878      	ldr	r0, [r7, #4]
 80174d6:	f000 f9f3 	bl	80178c0 <I2C_MasterTransmit_TXE>
 80174da:	e04d      	b.n	8017578 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80174dc:	69fb      	ldr	r3, [r7, #28]
 80174de:	089b      	lsrs	r3, r3, #2
 80174e0:	f003 0301 	and.w	r3, r3, #1
 80174e4:	2b00      	cmp	r3, #0
 80174e6:	f000 80d6 	beq.w	8017696 <HAL_I2C_EV_IRQHandler+0x2d6>
 80174ea:	697b      	ldr	r3, [r7, #20]
 80174ec:	0a5b      	lsrs	r3, r3, #9
 80174ee:	f003 0301 	and.w	r3, r3, #1
 80174f2:	2b00      	cmp	r3, #0
 80174f4:	f000 80cf 	beq.w	8017696 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80174f8:	7bbb      	ldrb	r3, [r7, #14]
 80174fa:	2b21      	cmp	r3, #33	; 0x21
 80174fc:	d103      	bne.n	8017506 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80174fe:	6878      	ldr	r0, [r7, #4]
 8017500:	f000 fa7a 	bl	80179f8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8017504:	e0c7      	b.n	8017696 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8017506:	7bfb      	ldrb	r3, [r7, #15]
 8017508:	2b40      	cmp	r3, #64	; 0x40
 801750a:	f040 80c4 	bne.w	8017696 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 801750e:	6878      	ldr	r0, [r7, #4]
 8017510:	f000 fae8 	bl	8017ae4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8017514:	e0bf      	b.n	8017696 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8017516:	687b      	ldr	r3, [r7, #4]
 8017518:	681b      	ldr	r3, [r3, #0]
 801751a:	685b      	ldr	r3, [r3, #4]
 801751c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8017520:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8017524:	f000 80b7 	beq.w	8017696 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8017528:	69fb      	ldr	r3, [r7, #28]
 801752a:	099b      	lsrs	r3, r3, #6
 801752c:	f003 0301 	and.w	r3, r3, #1
 8017530:	2b00      	cmp	r3, #0
 8017532:	d00f      	beq.n	8017554 <HAL_I2C_EV_IRQHandler+0x194>
 8017534:	697b      	ldr	r3, [r7, #20]
 8017536:	0a9b      	lsrs	r3, r3, #10
 8017538:	f003 0301 	and.w	r3, r3, #1
 801753c:	2b00      	cmp	r3, #0
 801753e:	d009      	beq.n	8017554 <HAL_I2C_EV_IRQHandler+0x194>
 8017540:	69fb      	ldr	r3, [r7, #28]
 8017542:	089b      	lsrs	r3, r3, #2
 8017544:	f003 0301 	and.w	r3, r3, #1
 8017548:	2b00      	cmp	r3, #0
 801754a:	d103      	bne.n	8017554 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 801754c:	6878      	ldr	r0, [r7, #4]
 801754e:	f000 fb5d 	bl	8017c0c <I2C_MasterReceive_RXNE>
 8017552:	e011      	b.n	8017578 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8017554:	69fb      	ldr	r3, [r7, #28]
 8017556:	089b      	lsrs	r3, r3, #2
 8017558:	f003 0301 	and.w	r3, r3, #1
 801755c:	2b00      	cmp	r3, #0
 801755e:	f000 809a 	beq.w	8017696 <HAL_I2C_EV_IRQHandler+0x2d6>
 8017562:	697b      	ldr	r3, [r7, #20]
 8017564:	0a5b      	lsrs	r3, r3, #9
 8017566:	f003 0301 	and.w	r3, r3, #1
 801756a:	2b00      	cmp	r3, #0
 801756c:	f000 8093 	beq.w	8017696 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8017570:	6878      	ldr	r0, [r7, #4]
 8017572:	f000 fc06 	bl	8017d82 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8017576:	e08e      	b.n	8017696 <HAL_I2C_EV_IRQHandler+0x2d6>
 8017578:	e08d      	b.n	8017696 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 801757a:	687b      	ldr	r3, [r7, #4]
 801757c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801757e:	2b00      	cmp	r3, #0
 8017580:	d004      	beq.n	801758c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8017582:	687b      	ldr	r3, [r7, #4]
 8017584:	681b      	ldr	r3, [r3, #0]
 8017586:	695b      	ldr	r3, [r3, #20]
 8017588:	61fb      	str	r3, [r7, #28]
 801758a:	e007      	b.n	801759c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 801758c:	687b      	ldr	r3, [r7, #4]
 801758e:	681b      	ldr	r3, [r3, #0]
 8017590:	699b      	ldr	r3, [r3, #24]
 8017592:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8017594:	687b      	ldr	r3, [r7, #4]
 8017596:	681b      	ldr	r3, [r3, #0]
 8017598:	695b      	ldr	r3, [r3, #20]
 801759a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801759c:	69fb      	ldr	r3, [r7, #28]
 801759e:	085b      	lsrs	r3, r3, #1
 80175a0:	f003 0301 	and.w	r3, r3, #1
 80175a4:	2b00      	cmp	r3, #0
 80175a6:	d012      	beq.n	80175ce <HAL_I2C_EV_IRQHandler+0x20e>
 80175a8:	697b      	ldr	r3, [r7, #20]
 80175aa:	0a5b      	lsrs	r3, r3, #9
 80175ac:	f003 0301 	and.w	r3, r3, #1
 80175b0:	2b00      	cmp	r3, #0
 80175b2:	d00c      	beq.n	80175ce <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80175b4:	687b      	ldr	r3, [r7, #4]
 80175b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80175b8:	2b00      	cmp	r3, #0
 80175ba:	d003      	beq.n	80175c4 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80175bc:	687b      	ldr	r3, [r7, #4]
 80175be:	681b      	ldr	r3, [r3, #0]
 80175c0:	699b      	ldr	r3, [r3, #24]
 80175c2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80175c4:	69b9      	ldr	r1, [r7, #24]
 80175c6:	6878      	ldr	r0, [r7, #4]
 80175c8:	f000 ffc4 	bl	8018554 <I2C_Slave_ADDR>
 80175cc:	e066      	b.n	801769c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80175ce:	69fb      	ldr	r3, [r7, #28]
 80175d0:	091b      	lsrs	r3, r3, #4
 80175d2:	f003 0301 	and.w	r3, r3, #1
 80175d6:	2b00      	cmp	r3, #0
 80175d8:	d009      	beq.n	80175ee <HAL_I2C_EV_IRQHandler+0x22e>
 80175da:	697b      	ldr	r3, [r7, #20]
 80175dc:	0a5b      	lsrs	r3, r3, #9
 80175de:	f003 0301 	and.w	r3, r3, #1
 80175e2:	2b00      	cmp	r3, #0
 80175e4:	d003      	beq.n	80175ee <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80175e6:	6878      	ldr	r0, [r7, #4]
 80175e8:	f000 fffe 	bl	80185e8 <I2C_Slave_STOPF>
 80175ec:	e056      	b.n	801769c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80175ee:	7bbb      	ldrb	r3, [r7, #14]
 80175f0:	2b21      	cmp	r3, #33	; 0x21
 80175f2:	d002      	beq.n	80175fa <HAL_I2C_EV_IRQHandler+0x23a>
 80175f4:	7bbb      	ldrb	r3, [r7, #14]
 80175f6:	2b29      	cmp	r3, #41	; 0x29
 80175f8:	d125      	bne.n	8017646 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80175fa:	69fb      	ldr	r3, [r7, #28]
 80175fc:	09db      	lsrs	r3, r3, #7
 80175fe:	f003 0301 	and.w	r3, r3, #1
 8017602:	2b00      	cmp	r3, #0
 8017604:	d00f      	beq.n	8017626 <HAL_I2C_EV_IRQHandler+0x266>
 8017606:	697b      	ldr	r3, [r7, #20]
 8017608:	0a9b      	lsrs	r3, r3, #10
 801760a:	f003 0301 	and.w	r3, r3, #1
 801760e:	2b00      	cmp	r3, #0
 8017610:	d009      	beq.n	8017626 <HAL_I2C_EV_IRQHandler+0x266>
 8017612:	69fb      	ldr	r3, [r7, #28]
 8017614:	089b      	lsrs	r3, r3, #2
 8017616:	f003 0301 	and.w	r3, r3, #1
 801761a:	2b00      	cmp	r3, #0
 801761c:	d103      	bne.n	8017626 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 801761e:	6878      	ldr	r0, [r7, #4]
 8017620:	f000 feda 	bl	80183d8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8017624:	e039      	b.n	801769a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8017626:	69fb      	ldr	r3, [r7, #28]
 8017628:	089b      	lsrs	r3, r3, #2
 801762a:	f003 0301 	and.w	r3, r3, #1
 801762e:	2b00      	cmp	r3, #0
 8017630:	d033      	beq.n	801769a <HAL_I2C_EV_IRQHandler+0x2da>
 8017632:	697b      	ldr	r3, [r7, #20]
 8017634:	0a5b      	lsrs	r3, r3, #9
 8017636:	f003 0301 	and.w	r3, r3, #1
 801763a:	2b00      	cmp	r3, #0
 801763c:	d02d      	beq.n	801769a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 801763e:	6878      	ldr	r0, [r7, #4]
 8017640:	f000 ff07 	bl	8018452 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8017644:	e029      	b.n	801769a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8017646:	69fb      	ldr	r3, [r7, #28]
 8017648:	099b      	lsrs	r3, r3, #6
 801764a:	f003 0301 	and.w	r3, r3, #1
 801764e:	2b00      	cmp	r3, #0
 8017650:	d00f      	beq.n	8017672 <HAL_I2C_EV_IRQHandler+0x2b2>
 8017652:	697b      	ldr	r3, [r7, #20]
 8017654:	0a9b      	lsrs	r3, r3, #10
 8017656:	f003 0301 	and.w	r3, r3, #1
 801765a:	2b00      	cmp	r3, #0
 801765c:	d009      	beq.n	8017672 <HAL_I2C_EV_IRQHandler+0x2b2>
 801765e:	69fb      	ldr	r3, [r7, #28]
 8017660:	089b      	lsrs	r3, r3, #2
 8017662:	f003 0301 	and.w	r3, r3, #1
 8017666:	2b00      	cmp	r3, #0
 8017668:	d103      	bne.n	8017672 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 801766a:	6878      	ldr	r0, [r7, #4]
 801766c:	f000 ff12 	bl	8018494 <I2C_SlaveReceive_RXNE>
 8017670:	e014      	b.n	801769c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8017672:	69fb      	ldr	r3, [r7, #28]
 8017674:	089b      	lsrs	r3, r3, #2
 8017676:	f003 0301 	and.w	r3, r3, #1
 801767a:	2b00      	cmp	r3, #0
 801767c:	d00e      	beq.n	801769c <HAL_I2C_EV_IRQHandler+0x2dc>
 801767e:	697b      	ldr	r3, [r7, #20]
 8017680:	0a5b      	lsrs	r3, r3, #9
 8017682:	f003 0301 	and.w	r3, r3, #1
 8017686:	2b00      	cmp	r3, #0
 8017688:	d008      	beq.n	801769c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 801768a:	6878      	ldr	r0, [r7, #4]
 801768c:	f000 ff40 	bl	8018510 <I2C_SlaveReceive_BTF>
 8017690:	e004      	b.n	801769c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8017692:	bf00      	nop
 8017694:	e002      	b.n	801769c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8017696:	bf00      	nop
 8017698:	e000      	b.n	801769c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801769a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 801769c:	3720      	adds	r7, #32
 801769e:	46bd      	mov	sp, r7
 80176a0:	bd80      	pop	{r7, pc}

080176a2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80176a2:	b580      	push	{r7, lr}
 80176a4:	b08a      	sub	sp, #40	; 0x28
 80176a6:	af00      	add	r7, sp, #0
 80176a8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80176aa:	687b      	ldr	r3, [r7, #4]
 80176ac:	681b      	ldr	r3, [r3, #0]
 80176ae:	695b      	ldr	r3, [r3, #20]
 80176b0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80176b2:	687b      	ldr	r3, [r7, #4]
 80176b4:	681b      	ldr	r3, [r3, #0]
 80176b6:	685b      	ldr	r3, [r3, #4]
 80176b8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80176ba:	2300      	movs	r3, #0
 80176bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80176be:	687b      	ldr	r3, [r7, #4]
 80176c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80176c4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80176c6:	6a3b      	ldr	r3, [r7, #32]
 80176c8:	0a1b      	lsrs	r3, r3, #8
 80176ca:	f003 0301 	and.w	r3, r3, #1
 80176ce:	2b00      	cmp	r3, #0
 80176d0:	d00e      	beq.n	80176f0 <HAL_I2C_ER_IRQHandler+0x4e>
 80176d2:	69fb      	ldr	r3, [r7, #28]
 80176d4:	0a1b      	lsrs	r3, r3, #8
 80176d6:	f003 0301 	and.w	r3, r3, #1
 80176da:	2b00      	cmp	r3, #0
 80176dc:	d008      	beq.n	80176f0 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80176de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80176e0:	f043 0301 	orr.w	r3, r3, #1
 80176e4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80176e6:	687b      	ldr	r3, [r7, #4]
 80176e8:	681b      	ldr	r3, [r3, #0]
 80176ea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80176ee:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80176f0:	6a3b      	ldr	r3, [r7, #32]
 80176f2:	0a5b      	lsrs	r3, r3, #9
 80176f4:	f003 0301 	and.w	r3, r3, #1
 80176f8:	2b00      	cmp	r3, #0
 80176fa:	d00e      	beq.n	801771a <HAL_I2C_ER_IRQHandler+0x78>
 80176fc:	69fb      	ldr	r3, [r7, #28]
 80176fe:	0a1b      	lsrs	r3, r3, #8
 8017700:	f003 0301 	and.w	r3, r3, #1
 8017704:	2b00      	cmp	r3, #0
 8017706:	d008      	beq.n	801771a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8017708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801770a:	f043 0302 	orr.w	r3, r3, #2
 801770e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8017710:	687b      	ldr	r3, [r7, #4]
 8017712:	681b      	ldr	r3, [r3, #0]
 8017714:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8017718:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 801771a:	6a3b      	ldr	r3, [r7, #32]
 801771c:	0a9b      	lsrs	r3, r3, #10
 801771e:	f003 0301 	and.w	r3, r3, #1
 8017722:	2b00      	cmp	r3, #0
 8017724:	d03f      	beq.n	80177a6 <HAL_I2C_ER_IRQHandler+0x104>
 8017726:	69fb      	ldr	r3, [r7, #28]
 8017728:	0a1b      	lsrs	r3, r3, #8
 801772a:	f003 0301 	and.w	r3, r3, #1
 801772e:	2b00      	cmp	r3, #0
 8017730:	d039      	beq.n	80177a6 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8017732:	7efb      	ldrb	r3, [r7, #27]
 8017734:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8017736:	687b      	ldr	r3, [r7, #4]
 8017738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801773a:	b29b      	uxth	r3, r3
 801773c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 801773e:	687b      	ldr	r3, [r7, #4]
 8017740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017744:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8017746:	687b      	ldr	r3, [r7, #4]
 8017748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801774a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 801774c:	7ebb      	ldrb	r3, [r7, #26]
 801774e:	2b20      	cmp	r3, #32
 8017750:	d112      	bne.n	8017778 <HAL_I2C_ER_IRQHandler+0xd6>
 8017752:	697b      	ldr	r3, [r7, #20]
 8017754:	2b00      	cmp	r3, #0
 8017756:	d10f      	bne.n	8017778 <HAL_I2C_ER_IRQHandler+0xd6>
 8017758:	7cfb      	ldrb	r3, [r7, #19]
 801775a:	2b21      	cmp	r3, #33	; 0x21
 801775c:	d008      	beq.n	8017770 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 801775e:	7cfb      	ldrb	r3, [r7, #19]
 8017760:	2b29      	cmp	r3, #41	; 0x29
 8017762:	d005      	beq.n	8017770 <HAL_I2C_ER_IRQHandler+0xce>
 8017764:	7cfb      	ldrb	r3, [r7, #19]
 8017766:	2b28      	cmp	r3, #40	; 0x28
 8017768:	d106      	bne.n	8017778 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 801776a:	68fb      	ldr	r3, [r7, #12]
 801776c:	2b21      	cmp	r3, #33	; 0x21
 801776e:	d103      	bne.n	8017778 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8017770:	6878      	ldr	r0, [r7, #4]
 8017772:	f001 f869 	bl	8018848 <I2C_Slave_AF>
 8017776:	e016      	b.n	80177a6 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017778:	687b      	ldr	r3, [r7, #4]
 801777a:	681b      	ldr	r3, [r3, #0]
 801777c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8017780:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8017782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017784:	f043 0304 	orr.w	r3, r3, #4
 8017788:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 801778a:	7efb      	ldrb	r3, [r7, #27]
 801778c:	2b10      	cmp	r3, #16
 801778e:	d002      	beq.n	8017796 <HAL_I2C_ER_IRQHandler+0xf4>
 8017790:	7efb      	ldrb	r3, [r7, #27]
 8017792:	2b40      	cmp	r3, #64	; 0x40
 8017794:	d107      	bne.n	80177a6 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017796:	687b      	ldr	r3, [r7, #4]
 8017798:	681b      	ldr	r3, [r3, #0]
 801779a:	681a      	ldr	r2, [r3, #0]
 801779c:	687b      	ldr	r3, [r7, #4]
 801779e:	681b      	ldr	r3, [r3, #0]
 80177a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80177a4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80177a6:	6a3b      	ldr	r3, [r7, #32]
 80177a8:	0adb      	lsrs	r3, r3, #11
 80177aa:	f003 0301 	and.w	r3, r3, #1
 80177ae:	2b00      	cmp	r3, #0
 80177b0:	d00e      	beq.n	80177d0 <HAL_I2C_ER_IRQHandler+0x12e>
 80177b2:	69fb      	ldr	r3, [r7, #28]
 80177b4:	0a1b      	lsrs	r3, r3, #8
 80177b6:	f003 0301 	and.w	r3, r3, #1
 80177ba:	2b00      	cmp	r3, #0
 80177bc:	d008      	beq.n	80177d0 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80177be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177c0:	f043 0308 	orr.w	r3, r3, #8
 80177c4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80177c6:	687b      	ldr	r3, [r7, #4]
 80177c8:	681b      	ldr	r3, [r3, #0]
 80177ca:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80177ce:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80177d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177d2:	2b00      	cmp	r3, #0
 80177d4:	d008      	beq.n	80177e8 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80177d6:	687b      	ldr	r3, [r7, #4]
 80177d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80177da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177dc:	431a      	orrs	r2, r3
 80177de:	687b      	ldr	r3, [r7, #4]
 80177e0:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80177e2:	6878      	ldr	r0, [r7, #4]
 80177e4:	f001 f8a0 	bl	8018928 <I2C_ITError>
  }
}
 80177e8:	bf00      	nop
 80177ea:	3728      	adds	r7, #40	; 0x28
 80177ec:	46bd      	mov	sp, r7
 80177ee:	bd80      	pop	{r7, pc}

080177f0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80177f0:	b480      	push	{r7}
 80177f2:	b083      	sub	sp, #12
 80177f4:	af00      	add	r7, sp, #0
 80177f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80177f8:	bf00      	nop
 80177fa:	370c      	adds	r7, #12
 80177fc:	46bd      	mov	sp, r7
 80177fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017802:	4770      	bx	lr

08017804 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8017804:	b480      	push	{r7}
 8017806:	b083      	sub	sp, #12
 8017808:	af00      	add	r7, sp, #0
 801780a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 801780c:	bf00      	nop
 801780e:	370c      	adds	r7, #12
 8017810:	46bd      	mov	sp, r7
 8017812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017816:	4770      	bx	lr

08017818 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8017818:	b480      	push	{r7}
 801781a:	b083      	sub	sp, #12
 801781c:	af00      	add	r7, sp, #0
 801781e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8017820:	bf00      	nop
 8017822:	370c      	adds	r7, #12
 8017824:	46bd      	mov	sp, r7
 8017826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801782a:	4770      	bx	lr

0801782c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801782c:	b480      	push	{r7}
 801782e:	b083      	sub	sp, #12
 8017830:	af00      	add	r7, sp, #0
 8017832:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8017834:	bf00      	nop
 8017836:	370c      	adds	r7, #12
 8017838:	46bd      	mov	sp, r7
 801783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801783e:	4770      	bx	lr

08017840 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8017840:	b480      	push	{r7}
 8017842:	b083      	sub	sp, #12
 8017844:	af00      	add	r7, sp, #0
 8017846:	6078      	str	r0, [r7, #4]
 8017848:	460b      	mov	r3, r1
 801784a:	70fb      	strb	r3, [r7, #3]
 801784c:	4613      	mov	r3, r2
 801784e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8017850:	bf00      	nop
 8017852:	370c      	adds	r7, #12
 8017854:	46bd      	mov	sp, r7
 8017856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801785a:	4770      	bx	lr

0801785c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801785c:	b480      	push	{r7}
 801785e:	b083      	sub	sp, #12
 8017860:	af00      	add	r7, sp, #0
 8017862:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8017864:	bf00      	nop
 8017866:	370c      	adds	r7, #12
 8017868:	46bd      	mov	sp, r7
 801786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801786e:	4770      	bx	lr

08017870 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8017870:	b480      	push	{r7}
 8017872:	b083      	sub	sp, #12
 8017874:	af00      	add	r7, sp, #0
 8017876:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8017878:	bf00      	nop
 801787a:	370c      	adds	r7, #12
 801787c:	46bd      	mov	sp, r7
 801787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017882:	4770      	bx	lr

08017884 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8017884:	b480      	push	{r7}
 8017886:	b083      	sub	sp, #12
 8017888:	af00      	add	r7, sp, #0
 801788a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 801788c:	bf00      	nop
 801788e:	370c      	adds	r7, #12
 8017890:	46bd      	mov	sp, r7
 8017892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017896:	4770      	bx	lr

08017898 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8017898:	b480      	push	{r7}
 801789a:	b083      	sub	sp, #12
 801789c:	af00      	add	r7, sp, #0
 801789e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80178a0:	bf00      	nop
 80178a2:	370c      	adds	r7, #12
 80178a4:	46bd      	mov	sp, r7
 80178a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178aa:	4770      	bx	lr

080178ac <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80178ac:	b480      	push	{r7}
 80178ae:	b083      	sub	sp, #12
 80178b0:	af00      	add	r7, sp, #0
 80178b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80178b4:	bf00      	nop
 80178b6:	370c      	adds	r7, #12
 80178b8:	46bd      	mov	sp, r7
 80178ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178be:	4770      	bx	lr

080178c0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80178c0:	b580      	push	{r7, lr}
 80178c2:	b084      	sub	sp, #16
 80178c4:	af00      	add	r7, sp, #0
 80178c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80178c8:	687b      	ldr	r3, [r7, #4]
 80178ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80178ce:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80178d0:	687b      	ldr	r3, [r7, #4]
 80178d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80178d6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80178d8:	687b      	ldr	r3, [r7, #4]
 80178da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80178dc:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80178de:	687b      	ldr	r3, [r7, #4]
 80178e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80178e2:	2b00      	cmp	r3, #0
 80178e4:	d150      	bne.n	8017988 <I2C_MasterTransmit_TXE+0xc8>
 80178e6:	7bfb      	ldrb	r3, [r7, #15]
 80178e8:	2b21      	cmp	r3, #33	; 0x21
 80178ea:	d14d      	bne.n	8017988 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80178ec:	68bb      	ldr	r3, [r7, #8]
 80178ee:	2b08      	cmp	r3, #8
 80178f0:	d01d      	beq.n	801792e <I2C_MasterTransmit_TXE+0x6e>
 80178f2:	68bb      	ldr	r3, [r7, #8]
 80178f4:	2b20      	cmp	r3, #32
 80178f6:	d01a      	beq.n	801792e <I2C_MasterTransmit_TXE+0x6e>
 80178f8:	68bb      	ldr	r3, [r7, #8]
 80178fa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80178fe:	d016      	beq.n	801792e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8017900:	687b      	ldr	r3, [r7, #4]
 8017902:	681b      	ldr	r3, [r3, #0]
 8017904:	685a      	ldr	r2, [r3, #4]
 8017906:	687b      	ldr	r3, [r7, #4]
 8017908:	681b      	ldr	r3, [r3, #0]
 801790a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801790e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8017910:	687b      	ldr	r3, [r7, #4]
 8017912:	2211      	movs	r2, #17
 8017914:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8017916:	687b      	ldr	r3, [r7, #4]
 8017918:	2200      	movs	r2, #0
 801791a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 801791e:	687b      	ldr	r3, [r7, #4]
 8017920:	2220      	movs	r2, #32
 8017922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8017926:	6878      	ldr	r0, [r7, #4]
 8017928:	f7ff ff62 	bl	80177f0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801792c:	e060      	b.n	80179f0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801792e:	687b      	ldr	r3, [r7, #4]
 8017930:	681b      	ldr	r3, [r3, #0]
 8017932:	685a      	ldr	r2, [r3, #4]
 8017934:	687b      	ldr	r3, [r7, #4]
 8017936:	681b      	ldr	r3, [r3, #0]
 8017938:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801793c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801793e:	687b      	ldr	r3, [r7, #4]
 8017940:	681b      	ldr	r3, [r3, #0]
 8017942:	681a      	ldr	r2, [r3, #0]
 8017944:	687b      	ldr	r3, [r7, #4]
 8017946:	681b      	ldr	r3, [r3, #0]
 8017948:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801794c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 801794e:	687b      	ldr	r3, [r7, #4]
 8017950:	2200      	movs	r2, #0
 8017952:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8017954:	687b      	ldr	r3, [r7, #4]
 8017956:	2220      	movs	r2, #32
 8017958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801795c:	687b      	ldr	r3, [r7, #4]
 801795e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8017962:	b2db      	uxtb	r3, r3
 8017964:	2b40      	cmp	r3, #64	; 0x40
 8017966:	d107      	bne.n	8017978 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8017968:	687b      	ldr	r3, [r7, #4]
 801796a:	2200      	movs	r2, #0
 801796c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8017970:	6878      	ldr	r0, [r7, #4]
 8017972:	f7ff ff7d 	bl	8017870 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8017976:	e03b      	b.n	80179f0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8017978:	687b      	ldr	r3, [r7, #4]
 801797a:	2200      	movs	r2, #0
 801797c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8017980:	6878      	ldr	r0, [r7, #4]
 8017982:	f7ff ff35 	bl	80177f0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8017986:	e033      	b.n	80179f0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8017988:	7bfb      	ldrb	r3, [r7, #15]
 801798a:	2b21      	cmp	r3, #33	; 0x21
 801798c:	d005      	beq.n	801799a <I2C_MasterTransmit_TXE+0xda>
 801798e:	7bbb      	ldrb	r3, [r7, #14]
 8017990:	2b40      	cmp	r3, #64	; 0x40
 8017992:	d12d      	bne.n	80179f0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8017994:	7bfb      	ldrb	r3, [r7, #15]
 8017996:	2b22      	cmp	r3, #34	; 0x22
 8017998:	d12a      	bne.n	80179f0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 801799a:	687b      	ldr	r3, [r7, #4]
 801799c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801799e:	b29b      	uxth	r3, r3
 80179a0:	2b00      	cmp	r3, #0
 80179a2:	d108      	bne.n	80179b6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80179a4:	687b      	ldr	r3, [r7, #4]
 80179a6:	681b      	ldr	r3, [r3, #0]
 80179a8:	685a      	ldr	r2, [r3, #4]
 80179aa:	687b      	ldr	r3, [r7, #4]
 80179ac:	681b      	ldr	r3, [r3, #0]
 80179ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80179b2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80179b4:	e01c      	b.n	80179f0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80179b6:	687b      	ldr	r3, [r7, #4]
 80179b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80179bc:	b2db      	uxtb	r3, r3
 80179be:	2b40      	cmp	r3, #64	; 0x40
 80179c0:	d103      	bne.n	80179ca <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80179c2:	6878      	ldr	r0, [r7, #4]
 80179c4:	f000 f88e 	bl	8017ae4 <I2C_MemoryTransmit_TXE_BTF>
}
 80179c8:	e012      	b.n	80179f0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80179ca:	687b      	ldr	r3, [r7, #4]
 80179cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80179ce:	781a      	ldrb	r2, [r3, #0]
 80179d0:	687b      	ldr	r3, [r7, #4]
 80179d2:	681b      	ldr	r3, [r3, #0]
 80179d4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80179d6:	687b      	ldr	r3, [r7, #4]
 80179d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80179da:	1c5a      	adds	r2, r3, #1
 80179dc:	687b      	ldr	r3, [r7, #4]
 80179de:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80179e0:	687b      	ldr	r3, [r7, #4]
 80179e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80179e4:	b29b      	uxth	r3, r3
 80179e6:	3b01      	subs	r3, #1
 80179e8:	b29a      	uxth	r2, r3
 80179ea:	687b      	ldr	r3, [r7, #4]
 80179ec:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80179ee:	e7ff      	b.n	80179f0 <I2C_MasterTransmit_TXE+0x130>
 80179f0:	bf00      	nop
 80179f2:	3710      	adds	r7, #16
 80179f4:	46bd      	mov	sp, r7
 80179f6:	bd80      	pop	{r7, pc}

080179f8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80179f8:	b580      	push	{r7, lr}
 80179fa:	b084      	sub	sp, #16
 80179fc:	af00      	add	r7, sp, #0
 80179fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8017a00:	687b      	ldr	r3, [r7, #4]
 8017a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017a04:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8017a06:	687b      	ldr	r3, [r7, #4]
 8017a08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017a0c:	b2db      	uxtb	r3, r3
 8017a0e:	2b21      	cmp	r3, #33	; 0x21
 8017a10:	d164      	bne.n	8017adc <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8017a12:	687b      	ldr	r3, [r7, #4]
 8017a14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017a16:	b29b      	uxth	r3, r3
 8017a18:	2b00      	cmp	r3, #0
 8017a1a:	d012      	beq.n	8017a42 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8017a1c:	687b      	ldr	r3, [r7, #4]
 8017a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017a20:	781a      	ldrb	r2, [r3, #0]
 8017a22:	687b      	ldr	r3, [r7, #4]
 8017a24:	681b      	ldr	r3, [r3, #0]
 8017a26:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8017a28:	687b      	ldr	r3, [r7, #4]
 8017a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017a2c:	1c5a      	adds	r2, r3, #1
 8017a2e:	687b      	ldr	r3, [r7, #4]
 8017a30:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8017a32:	687b      	ldr	r3, [r7, #4]
 8017a34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017a36:	b29b      	uxth	r3, r3
 8017a38:	3b01      	subs	r3, #1
 8017a3a:	b29a      	uxth	r2, r3
 8017a3c:	687b      	ldr	r3, [r7, #4]
 8017a3e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8017a40:	e04c      	b.n	8017adc <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8017a42:	68fb      	ldr	r3, [r7, #12]
 8017a44:	2b08      	cmp	r3, #8
 8017a46:	d01d      	beq.n	8017a84 <I2C_MasterTransmit_BTF+0x8c>
 8017a48:	68fb      	ldr	r3, [r7, #12]
 8017a4a:	2b20      	cmp	r3, #32
 8017a4c:	d01a      	beq.n	8017a84 <I2C_MasterTransmit_BTF+0x8c>
 8017a4e:	68fb      	ldr	r3, [r7, #12]
 8017a50:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8017a54:	d016      	beq.n	8017a84 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8017a56:	687b      	ldr	r3, [r7, #4]
 8017a58:	681b      	ldr	r3, [r3, #0]
 8017a5a:	685a      	ldr	r2, [r3, #4]
 8017a5c:	687b      	ldr	r3, [r7, #4]
 8017a5e:	681b      	ldr	r3, [r3, #0]
 8017a60:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8017a64:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8017a66:	687b      	ldr	r3, [r7, #4]
 8017a68:	2211      	movs	r2, #17
 8017a6a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8017a6c:	687b      	ldr	r3, [r7, #4]
 8017a6e:	2200      	movs	r2, #0
 8017a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8017a74:	687b      	ldr	r3, [r7, #4]
 8017a76:	2220      	movs	r2, #32
 8017a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8017a7c:	6878      	ldr	r0, [r7, #4]
 8017a7e:	f7ff feb7 	bl	80177f0 <HAL_I2C_MasterTxCpltCallback>
}
 8017a82:	e02b      	b.n	8017adc <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8017a84:	687b      	ldr	r3, [r7, #4]
 8017a86:	681b      	ldr	r3, [r3, #0]
 8017a88:	685a      	ldr	r2, [r3, #4]
 8017a8a:	687b      	ldr	r3, [r7, #4]
 8017a8c:	681b      	ldr	r3, [r3, #0]
 8017a8e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8017a92:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017a94:	687b      	ldr	r3, [r7, #4]
 8017a96:	681b      	ldr	r3, [r3, #0]
 8017a98:	681a      	ldr	r2, [r3, #0]
 8017a9a:	687b      	ldr	r3, [r7, #4]
 8017a9c:	681b      	ldr	r3, [r3, #0]
 8017a9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017aa2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8017aa4:	687b      	ldr	r3, [r7, #4]
 8017aa6:	2200      	movs	r2, #0
 8017aa8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8017aaa:	687b      	ldr	r3, [r7, #4]
 8017aac:	2220      	movs	r2, #32
 8017aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8017ab2:	687b      	ldr	r3, [r7, #4]
 8017ab4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8017ab8:	b2db      	uxtb	r3, r3
 8017aba:	2b40      	cmp	r3, #64	; 0x40
 8017abc:	d107      	bne.n	8017ace <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8017abe:	687b      	ldr	r3, [r7, #4]
 8017ac0:	2200      	movs	r2, #0
 8017ac2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8017ac6:	6878      	ldr	r0, [r7, #4]
 8017ac8:	f7ff fed2 	bl	8017870 <HAL_I2C_MemTxCpltCallback>
}
 8017acc:	e006      	b.n	8017adc <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8017ace:	687b      	ldr	r3, [r7, #4]
 8017ad0:	2200      	movs	r2, #0
 8017ad2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8017ad6:	6878      	ldr	r0, [r7, #4]
 8017ad8:	f7ff fe8a 	bl	80177f0 <HAL_I2C_MasterTxCpltCallback>
}
 8017adc:	bf00      	nop
 8017ade:	3710      	adds	r7, #16
 8017ae0:	46bd      	mov	sp, r7
 8017ae2:	bd80      	pop	{r7, pc}

08017ae4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8017ae4:	b580      	push	{r7, lr}
 8017ae6:	b084      	sub	sp, #16
 8017ae8:	af00      	add	r7, sp, #0
 8017aea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8017aec:	687b      	ldr	r3, [r7, #4]
 8017aee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017af2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8017af4:	687b      	ldr	r3, [r7, #4]
 8017af6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017af8:	2b00      	cmp	r3, #0
 8017afa:	d11d      	bne.n	8017b38 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8017afc:	687b      	ldr	r3, [r7, #4]
 8017afe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017b00:	2b01      	cmp	r3, #1
 8017b02:	d10b      	bne.n	8017b1c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8017b04:	687b      	ldr	r3, [r7, #4]
 8017b06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017b08:	b2da      	uxtb	r2, r3
 8017b0a:	687b      	ldr	r3, [r7, #4]
 8017b0c:	681b      	ldr	r3, [r3, #0]
 8017b0e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8017b10:	687b      	ldr	r3, [r7, #4]
 8017b12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017b14:	1c9a      	adds	r2, r3, #2
 8017b16:	687b      	ldr	r3, [r7, #4]
 8017b18:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8017b1a:	e073      	b.n	8017c04 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8017b1c:	687b      	ldr	r3, [r7, #4]
 8017b1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017b20:	b29b      	uxth	r3, r3
 8017b22:	121b      	asrs	r3, r3, #8
 8017b24:	b2da      	uxtb	r2, r3
 8017b26:	687b      	ldr	r3, [r7, #4]
 8017b28:	681b      	ldr	r3, [r3, #0]
 8017b2a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8017b2c:	687b      	ldr	r3, [r7, #4]
 8017b2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017b30:	1c5a      	adds	r2, r3, #1
 8017b32:	687b      	ldr	r3, [r7, #4]
 8017b34:	651a      	str	r2, [r3, #80]	; 0x50
}
 8017b36:	e065      	b.n	8017c04 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8017b38:	687b      	ldr	r3, [r7, #4]
 8017b3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017b3c:	2b01      	cmp	r3, #1
 8017b3e:	d10b      	bne.n	8017b58 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8017b40:	687b      	ldr	r3, [r7, #4]
 8017b42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017b44:	b2da      	uxtb	r2, r3
 8017b46:	687b      	ldr	r3, [r7, #4]
 8017b48:	681b      	ldr	r3, [r3, #0]
 8017b4a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8017b4c:	687b      	ldr	r3, [r7, #4]
 8017b4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017b50:	1c5a      	adds	r2, r3, #1
 8017b52:	687b      	ldr	r3, [r7, #4]
 8017b54:	651a      	str	r2, [r3, #80]	; 0x50
}
 8017b56:	e055      	b.n	8017c04 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8017b58:	687b      	ldr	r3, [r7, #4]
 8017b5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017b5c:	2b02      	cmp	r3, #2
 8017b5e:	d151      	bne.n	8017c04 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8017b60:	7bfb      	ldrb	r3, [r7, #15]
 8017b62:	2b22      	cmp	r3, #34	; 0x22
 8017b64:	d10d      	bne.n	8017b82 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8017b66:	687b      	ldr	r3, [r7, #4]
 8017b68:	681b      	ldr	r3, [r3, #0]
 8017b6a:	681a      	ldr	r2, [r3, #0]
 8017b6c:	687b      	ldr	r3, [r7, #4]
 8017b6e:	681b      	ldr	r3, [r3, #0]
 8017b70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017b74:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8017b76:	687b      	ldr	r3, [r7, #4]
 8017b78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017b7a:	1c5a      	adds	r2, r3, #1
 8017b7c:	687b      	ldr	r3, [r7, #4]
 8017b7e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8017b80:	e040      	b.n	8017c04 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8017b82:	687b      	ldr	r3, [r7, #4]
 8017b84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017b86:	b29b      	uxth	r3, r3
 8017b88:	2b00      	cmp	r3, #0
 8017b8a:	d015      	beq.n	8017bb8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8017b8c:	7bfb      	ldrb	r3, [r7, #15]
 8017b8e:	2b21      	cmp	r3, #33	; 0x21
 8017b90:	d112      	bne.n	8017bb8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8017b92:	687b      	ldr	r3, [r7, #4]
 8017b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017b96:	781a      	ldrb	r2, [r3, #0]
 8017b98:	687b      	ldr	r3, [r7, #4]
 8017b9a:	681b      	ldr	r3, [r3, #0]
 8017b9c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8017b9e:	687b      	ldr	r3, [r7, #4]
 8017ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017ba2:	1c5a      	adds	r2, r3, #1
 8017ba4:	687b      	ldr	r3, [r7, #4]
 8017ba6:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8017ba8:	687b      	ldr	r3, [r7, #4]
 8017baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017bac:	b29b      	uxth	r3, r3
 8017bae:	3b01      	subs	r3, #1
 8017bb0:	b29a      	uxth	r2, r3
 8017bb2:	687b      	ldr	r3, [r7, #4]
 8017bb4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8017bb6:	e025      	b.n	8017c04 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8017bb8:	687b      	ldr	r3, [r7, #4]
 8017bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017bbc:	b29b      	uxth	r3, r3
 8017bbe:	2b00      	cmp	r3, #0
 8017bc0:	d120      	bne.n	8017c04 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8017bc2:	7bfb      	ldrb	r3, [r7, #15]
 8017bc4:	2b21      	cmp	r3, #33	; 0x21
 8017bc6:	d11d      	bne.n	8017c04 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8017bc8:	687b      	ldr	r3, [r7, #4]
 8017bca:	681b      	ldr	r3, [r3, #0]
 8017bcc:	685a      	ldr	r2, [r3, #4]
 8017bce:	687b      	ldr	r3, [r7, #4]
 8017bd0:	681b      	ldr	r3, [r3, #0]
 8017bd2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8017bd6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017bd8:	687b      	ldr	r3, [r7, #4]
 8017bda:	681b      	ldr	r3, [r3, #0]
 8017bdc:	681a      	ldr	r2, [r3, #0]
 8017bde:	687b      	ldr	r3, [r7, #4]
 8017be0:	681b      	ldr	r3, [r3, #0]
 8017be2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017be6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8017be8:	687b      	ldr	r3, [r7, #4]
 8017bea:	2200      	movs	r2, #0
 8017bec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8017bee:	687b      	ldr	r3, [r7, #4]
 8017bf0:	2220      	movs	r2, #32
 8017bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8017bf6:	687b      	ldr	r3, [r7, #4]
 8017bf8:	2200      	movs	r2, #0
 8017bfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8017bfe:	6878      	ldr	r0, [r7, #4]
 8017c00:	f7ff fe36 	bl	8017870 <HAL_I2C_MemTxCpltCallback>
}
 8017c04:	bf00      	nop
 8017c06:	3710      	adds	r7, #16
 8017c08:	46bd      	mov	sp, r7
 8017c0a:	bd80      	pop	{r7, pc}

08017c0c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8017c0c:	b580      	push	{r7, lr}
 8017c0e:	b084      	sub	sp, #16
 8017c10:	af00      	add	r7, sp, #0
 8017c12:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8017c14:	687b      	ldr	r3, [r7, #4]
 8017c16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017c1a:	b2db      	uxtb	r3, r3
 8017c1c:	2b22      	cmp	r3, #34	; 0x22
 8017c1e:	f040 80ac 	bne.w	8017d7a <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8017c22:	687b      	ldr	r3, [r7, #4]
 8017c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017c26:	b29b      	uxth	r3, r3
 8017c28:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8017c2a:	68fb      	ldr	r3, [r7, #12]
 8017c2c:	2b03      	cmp	r3, #3
 8017c2e:	d921      	bls.n	8017c74 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017c30:	687b      	ldr	r3, [r7, #4]
 8017c32:	681b      	ldr	r3, [r3, #0]
 8017c34:	691a      	ldr	r2, [r3, #16]
 8017c36:	687b      	ldr	r3, [r7, #4]
 8017c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017c3a:	b2d2      	uxtb	r2, r2
 8017c3c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8017c3e:	687b      	ldr	r3, [r7, #4]
 8017c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017c42:	1c5a      	adds	r2, r3, #1
 8017c44:	687b      	ldr	r3, [r7, #4]
 8017c46:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8017c48:	687b      	ldr	r3, [r7, #4]
 8017c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017c4c:	b29b      	uxth	r3, r3
 8017c4e:	3b01      	subs	r3, #1
 8017c50:	b29a      	uxth	r2, r3
 8017c52:	687b      	ldr	r3, [r7, #4]
 8017c54:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8017c56:	687b      	ldr	r3, [r7, #4]
 8017c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017c5a:	b29b      	uxth	r3, r3
 8017c5c:	2b03      	cmp	r3, #3
 8017c5e:	f040 808c 	bne.w	8017d7a <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8017c62:	687b      	ldr	r3, [r7, #4]
 8017c64:	681b      	ldr	r3, [r3, #0]
 8017c66:	685a      	ldr	r2, [r3, #4]
 8017c68:	687b      	ldr	r3, [r7, #4]
 8017c6a:	681b      	ldr	r3, [r3, #0]
 8017c6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8017c70:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8017c72:	e082      	b.n	8017d7a <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8017c74:	687b      	ldr	r3, [r7, #4]
 8017c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017c78:	2b02      	cmp	r3, #2
 8017c7a:	d075      	beq.n	8017d68 <I2C_MasterReceive_RXNE+0x15c>
 8017c7c:	68fb      	ldr	r3, [r7, #12]
 8017c7e:	2b01      	cmp	r3, #1
 8017c80:	d002      	beq.n	8017c88 <I2C_MasterReceive_RXNE+0x7c>
 8017c82:	68fb      	ldr	r3, [r7, #12]
 8017c84:	2b00      	cmp	r3, #0
 8017c86:	d16f      	bne.n	8017d68 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8017c88:	6878      	ldr	r0, [r7, #4]
 8017c8a:	f001 fafd 	bl	8019288 <I2C_WaitOnSTOPRequestThroughIT>
 8017c8e:	4603      	mov	r3, r0
 8017c90:	2b00      	cmp	r3, #0
 8017c92:	d142      	bne.n	8017d1a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017c94:	687b      	ldr	r3, [r7, #4]
 8017c96:	681b      	ldr	r3, [r3, #0]
 8017c98:	681a      	ldr	r2, [r3, #0]
 8017c9a:	687b      	ldr	r3, [r7, #4]
 8017c9c:	681b      	ldr	r3, [r3, #0]
 8017c9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8017ca2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8017ca4:	687b      	ldr	r3, [r7, #4]
 8017ca6:	681b      	ldr	r3, [r3, #0]
 8017ca8:	685a      	ldr	r2, [r3, #4]
 8017caa:	687b      	ldr	r3, [r7, #4]
 8017cac:	681b      	ldr	r3, [r3, #0]
 8017cae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8017cb2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017cb4:	687b      	ldr	r3, [r7, #4]
 8017cb6:	681b      	ldr	r3, [r3, #0]
 8017cb8:	691a      	ldr	r2, [r3, #16]
 8017cba:	687b      	ldr	r3, [r7, #4]
 8017cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017cbe:	b2d2      	uxtb	r2, r2
 8017cc0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8017cc2:	687b      	ldr	r3, [r7, #4]
 8017cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017cc6:	1c5a      	adds	r2, r3, #1
 8017cc8:	687b      	ldr	r3, [r7, #4]
 8017cca:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8017ccc:	687b      	ldr	r3, [r7, #4]
 8017cce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017cd0:	b29b      	uxth	r3, r3
 8017cd2:	3b01      	subs	r3, #1
 8017cd4:	b29a      	uxth	r2, r3
 8017cd6:	687b      	ldr	r3, [r7, #4]
 8017cd8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8017cda:	687b      	ldr	r3, [r7, #4]
 8017cdc:	2220      	movs	r2, #32
 8017cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8017ce2:	687b      	ldr	r3, [r7, #4]
 8017ce4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8017ce8:	b2db      	uxtb	r3, r3
 8017cea:	2b40      	cmp	r3, #64	; 0x40
 8017cec:	d10a      	bne.n	8017d04 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8017cee:	687b      	ldr	r3, [r7, #4]
 8017cf0:	2200      	movs	r2, #0
 8017cf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8017cf6:	687b      	ldr	r3, [r7, #4]
 8017cf8:	2200      	movs	r2, #0
 8017cfa:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8017cfc:	6878      	ldr	r0, [r7, #4]
 8017cfe:	f7ff fdc1 	bl	8017884 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8017d02:	e03a      	b.n	8017d7a <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8017d04:	687b      	ldr	r3, [r7, #4]
 8017d06:	2200      	movs	r2, #0
 8017d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8017d0c:	687b      	ldr	r3, [r7, #4]
 8017d0e:	2212      	movs	r2, #18
 8017d10:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8017d12:	6878      	ldr	r0, [r7, #4]
 8017d14:	f7ff fd76 	bl	8017804 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8017d18:	e02f      	b.n	8017d7a <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8017d1a:	687b      	ldr	r3, [r7, #4]
 8017d1c:	681b      	ldr	r3, [r3, #0]
 8017d1e:	685a      	ldr	r2, [r3, #4]
 8017d20:	687b      	ldr	r3, [r7, #4]
 8017d22:	681b      	ldr	r3, [r3, #0]
 8017d24:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8017d28:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017d2a:	687b      	ldr	r3, [r7, #4]
 8017d2c:	681b      	ldr	r3, [r3, #0]
 8017d2e:	691a      	ldr	r2, [r3, #16]
 8017d30:	687b      	ldr	r3, [r7, #4]
 8017d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017d34:	b2d2      	uxtb	r2, r2
 8017d36:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8017d38:	687b      	ldr	r3, [r7, #4]
 8017d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017d3c:	1c5a      	adds	r2, r3, #1
 8017d3e:	687b      	ldr	r3, [r7, #4]
 8017d40:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8017d42:	687b      	ldr	r3, [r7, #4]
 8017d44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017d46:	b29b      	uxth	r3, r3
 8017d48:	3b01      	subs	r3, #1
 8017d4a:	b29a      	uxth	r2, r3
 8017d4c:	687b      	ldr	r3, [r7, #4]
 8017d4e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8017d50:	687b      	ldr	r3, [r7, #4]
 8017d52:	2220      	movs	r2, #32
 8017d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8017d58:	687b      	ldr	r3, [r7, #4]
 8017d5a:	2200      	movs	r2, #0
 8017d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8017d60:	6878      	ldr	r0, [r7, #4]
 8017d62:	f7ff fd99 	bl	8017898 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8017d66:	e008      	b.n	8017d7a <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8017d68:	687b      	ldr	r3, [r7, #4]
 8017d6a:	681b      	ldr	r3, [r3, #0]
 8017d6c:	685a      	ldr	r2, [r3, #4]
 8017d6e:	687b      	ldr	r3, [r7, #4]
 8017d70:	681b      	ldr	r3, [r3, #0]
 8017d72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8017d76:	605a      	str	r2, [r3, #4]
}
 8017d78:	e7ff      	b.n	8017d7a <I2C_MasterReceive_RXNE+0x16e>
 8017d7a:	bf00      	nop
 8017d7c:	3710      	adds	r7, #16
 8017d7e:	46bd      	mov	sp, r7
 8017d80:	bd80      	pop	{r7, pc}

08017d82 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8017d82:	b580      	push	{r7, lr}
 8017d84:	b084      	sub	sp, #16
 8017d86:	af00      	add	r7, sp, #0
 8017d88:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8017d8a:	687b      	ldr	r3, [r7, #4]
 8017d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017d8e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8017d90:	687b      	ldr	r3, [r7, #4]
 8017d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017d94:	b29b      	uxth	r3, r3
 8017d96:	2b04      	cmp	r3, #4
 8017d98:	d11b      	bne.n	8017dd2 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8017d9a:	687b      	ldr	r3, [r7, #4]
 8017d9c:	681b      	ldr	r3, [r3, #0]
 8017d9e:	685a      	ldr	r2, [r3, #4]
 8017da0:	687b      	ldr	r3, [r7, #4]
 8017da2:	681b      	ldr	r3, [r3, #0]
 8017da4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8017da8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017daa:	687b      	ldr	r3, [r7, #4]
 8017dac:	681b      	ldr	r3, [r3, #0]
 8017dae:	691a      	ldr	r2, [r3, #16]
 8017db0:	687b      	ldr	r3, [r7, #4]
 8017db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017db4:	b2d2      	uxtb	r2, r2
 8017db6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8017db8:	687b      	ldr	r3, [r7, #4]
 8017dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017dbc:	1c5a      	adds	r2, r3, #1
 8017dbe:	687b      	ldr	r3, [r7, #4]
 8017dc0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8017dc2:	687b      	ldr	r3, [r7, #4]
 8017dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017dc6:	b29b      	uxth	r3, r3
 8017dc8:	3b01      	subs	r3, #1
 8017dca:	b29a      	uxth	r2, r3
 8017dcc:	687b      	ldr	r3, [r7, #4]
 8017dce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8017dd0:	e0bd      	b.n	8017f4e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8017dd2:	687b      	ldr	r3, [r7, #4]
 8017dd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017dd6:	b29b      	uxth	r3, r3
 8017dd8:	2b03      	cmp	r3, #3
 8017dda:	d129      	bne.n	8017e30 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8017ddc:	687b      	ldr	r3, [r7, #4]
 8017dde:	681b      	ldr	r3, [r3, #0]
 8017de0:	685a      	ldr	r2, [r3, #4]
 8017de2:	687b      	ldr	r3, [r7, #4]
 8017de4:	681b      	ldr	r3, [r3, #0]
 8017de6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8017dea:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8017dec:	68fb      	ldr	r3, [r7, #12]
 8017dee:	2b04      	cmp	r3, #4
 8017df0:	d00a      	beq.n	8017e08 <I2C_MasterReceive_BTF+0x86>
 8017df2:	68fb      	ldr	r3, [r7, #12]
 8017df4:	2b02      	cmp	r3, #2
 8017df6:	d007      	beq.n	8017e08 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017df8:	687b      	ldr	r3, [r7, #4]
 8017dfa:	681b      	ldr	r3, [r3, #0]
 8017dfc:	681a      	ldr	r2, [r3, #0]
 8017dfe:	687b      	ldr	r3, [r7, #4]
 8017e00:	681b      	ldr	r3, [r3, #0]
 8017e02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8017e06:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017e08:	687b      	ldr	r3, [r7, #4]
 8017e0a:	681b      	ldr	r3, [r3, #0]
 8017e0c:	691a      	ldr	r2, [r3, #16]
 8017e0e:	687b      	ldr	r3, [r7, #4]
 8017e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017e12:	b2d2      	uxtb	r2, r2
 8017e14:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8017e16:	687b      	ldr	r3, [r7, #4]
 8017e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017e1a:	1c5a      	adds	r2, r3, #1
 8017e1c:	687b      	ldr	r3, [r7, #4]
 8017e1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8017e20:	687b      	ldr	r3, [r7, #4]
 8017e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017e24:	b29b      	uxth	r3, r3
 8017e26:	3b01      	subs	r3, #1
 8017e28:	b29a      	uxth	r2, r3
 8017e2a:	687b      	ldr	r3, [r7, #4]
 8017e2c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8017e2e:	e08e      	b.n	8017f4e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8017e30:	687b      	ldr	r3, [r7, #4]
 8017e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017e34:	b29b      	uxth	r3, r3
 8017e36:	2b02      	cmp	r3, #2
 8017e38:	d176      	bne.n	8017f28 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8017e3a:	68fb      	ldr	r3, [r7, #12]
 8017e3c:	2b01      	cmp	r3, #1
 8017e3e:	d002      	beq.n	8017e46 <I2C_MasterReceive_BTF+0xc4>
 8017e40:	68fb      	ldr	r3, [r7, #12]
 8017e42:	2b10      	cmp	r3, #16
 8017e44:	d108      	bne.n	8017e58 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017e46:	687b      	ldr	r3, [r7, #4]
 8017e48:	681b      	ldr	r3, [r3, #0]
 8017e4a:	681a      	ldr	r2, [r3, #0]
 8017e4c:	687b      	ldr	r3, [r7, #4]
 8017e4e:	681b      	ldr	r3, [r3, #0]
 8017e50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8017e54:	601a      	str	r2, [r3, #0]
 8017e56:	e019      	b.n	8017e8c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8017e58:	68fb      	ldr	r3, [r7, #12]
 8017e5a:	2b04      	cmp	r3, #4
 8017e5c:	d002      	beq.n	8017e64 <I2C_MasterReceive_BTF+0xe2>
 8017e5e:	68fb      	ldr	r3, [r7, #12]
 8017e60:	2b02      	cmp	r3, #2
 8017e62:	d108      	bne.n	8017e76 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017e64:	687b      	ldr	r3, [r7, #4]
 8017e66:	681b      	ldr	r3, [r3, #0]
 8017e68:	681a      	ldr	r2, [r3, #0]
 8017e6a:	687b      	ldr	r3, [r7, #4]
 8017e6c:	681b      	ldr	r3, [r3, #0]
 8017e6e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8017e72:	601a      	str	r2, [r3, #0]
 8017e74:	e00a      	b.n	8017e8c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8017e76:	68fb      	ldr	r3, [r7, #12]
 8017e78:	2b10      	cmp	r3, #16
 8017e7a:	d007      	beq.n	8017e8c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017e7c:	687b      	ldr	r3, [r7, #4]
 8017e7e:	681b      	ldr	r3, [r3, #0]
 8017e80:	681a      	ldr	r2, [r3, #0]
 8017e82:	687b      	ldr	r3, [r7, #4]
 8017e84:	681b      	ldr	r3, [r3, #0]
 8017e86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017e8a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017e8c:	687b      	ldr	r3, [r7, #4]
 8017e8e:	681b      	ldr	r3, [r3, #0]
 8017e90:	691a      	ldr	r2, [r3, #16]
 8017e92:	687b      	ldr	r3, [r7, #4]
 8017e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017e96:	b2d2      	uxtb	r2, r2
 8017e98:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8017e9a:	687b      	ldr	r3, [r7, #4]
 8017e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017e9e:	1c5a      	adds	r2, r3, #1
 8017ea0:	687b      	ldr	r3, [r7, #4]
 8017ea2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8017ea4:	687b      	ldr	r3, [r7, #4]
 8017ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017ea8:	b29b      	uxth	r3, r3
 8017eaa:	3b01      	subs	r3, #1
 8017eac:	b29a      	uxth	r2, r3
 8017eae:	687b      	ldr	r3, [r7, #4]
 8017eb0:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017eb2:	687b      	ldr	r3, [r7, #4]
 8017eb4:	681b      	ldr	r3, [r3, #0]
 8017eb6:	691a      	ldr	r2, [r3, #16]
 8017eb8:	687b      	ldr	r3, [r7, #4]
 8017eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017ebc:	b2d2      	uxtb	r2, r2
 8017ebe:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8017ec0:	687b      	ldr	r3, [r7, #4]
 8017ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017ec4:	1c5a      	adds	r2, r3, #1
 8017ec6:	687b      	ldr	r3, [r7, #4]
 8017ec8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8017eca:	687b      	ldr	r3, [r7, #4]
 8017ecc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017ece:	b29b      	uxth	r3, r3
 8017ed0:	3b01      	subs	r3, #1
 8017ed2:	b29a      	uxth	r2, r3
 8017ed4:	687b      	ldr	r3, [r7, #4]
 8017ed6:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8017ed8:	687b      	ldr	r3, [r7, #4]
 8017eda:	681b      	ldr	r3, [r3, #0]
 8017edc:	685a      	ldr	r2, [r3, #4]
 8017ede:	687b      	ldr	r3, [r7, #4]
 8017ee0:	681b      	ldr	r3, [r3, #0]
 8017ee2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8017ee6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8017ee8:	687b      	ldr	r3, [r7, #4]
 8017eea:	2220      	movs	r2, #32
 8017eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8017ef0:	687b      	ldr	r3, [r7, #4]
 8017ef2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8017ef6:	b2db      	uxtb	r3, r3
 8017ef8:	2b40      	cmp	r3, #64	; 0x40
 8017efa:	d10a      	bne.n	8017f12 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8017efc:	687b      	ldr	r3, [r7, #4]
 8017efe:	2200      	movs	r2, #0
 8017f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8017f04:	687b      	ldr	r3, [r7, #4]
 8017f06:	2200      	movs	r2, #0
 8017f08:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8017f0a:	6878      	ldr	r0, [r7, #4]
 8017f0c:	f7ff fcba 	bl	8017884 <HAL_I2C_MemRxCpltCallback>
}
 8017f10:	e01d      	b.n	8017f4e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8017f12:	687b      	ldr	r3, [r7, #4]
 8017f14:	2200      	movs	r2, #0
 8017f16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8017f1a:	687b      	ldr	r3, [r7, #4]
 8017f1c:	2212      	movs	r2, #18
 8017f1e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8017f20:	6878      	ldr	r0, [r7, #4]
 8017f22:	f7ff fc6f 	bl	8017804 <HAL_I2C_MasterRxCpltCallback>
}
 8017f26:	e012      	b.n	8017f4e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017f28:	687b      	ldr	r3, [r7, #4]
 8017f2a:	681b      	ldr	r3, [r3, #0]
 8017f2c:	691a      	ldr	r2, [r3, #16]
 8017f2e:	687b      	ldr	r3, [r7, #4]
 8017f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017f32:	b2d2      	uxtb	r2, r2
 8017f34:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8017f36:	687b      	ldr	r3, [r7, #4]
 8017f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017f3a:	1c5a      	adds	r2, r3, #1
 8017f3c:	687b      	ldr	r3, [r7, #4]
 8017f3e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8017f40:	687b      	ldr	r3, [r7, #4]
 8017f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017f44:	b29b      	uxth	r3, r3
 8017f46:	3b01      	subs	r3, #1
 8017f48:	b29a      	uxth	r2, r3
 8017f4a:	687b      	ldr	r3, [r7, #4]
 8017f4c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8017f4e:	bf00      	nop
 8017f50:	3710      	adds	r7, #16
 8017f52:	46bd      	mov	sp, r7
 8017f54:	bd80      	pop	{r7, pc}

08017f56 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8017f56:	b480      	push	{r7}
 8017f58:	b083      	sub	sp, #12
 8017f5a:	af00      	add	r7, sp, #0
 8017f5c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8017f5e:	687b      	ldr	r3, [r7, #4]
 8017f60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8017f64:	b2db      	uxtb	r3, r3
 8017f66:	2b40      	cmp	r3, #64	; 0x40
 8017f68:	d117      	bne.n	8017f9a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8017f6a:	687b      	ldr	r3, [r7, #4]
 8017f6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017f6e:	2b00      	cmp	r3, #0
 8017f70:	d109      	bne.n	8017f86 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8017f72:	687b      	ldr	r3, [r7, #4]
 8017f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017f76:	b2db      	uxtb	r3, r3
 8017f78:	461a      	mov	r2, r3
 8017f7a:	687b      	ldr	r3, [r7, #4]
 8017f7c:	681b      	ldr	r3, [r3, #0]
 8017f7e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8017f82:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8017f84:	e067      	b.n	8018056 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8017f86:	687b      	ldr	r3, [r7, #4]
 8017f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017f8a:	b2db      	uxtb	r3, r3
 8017f8c:	f043 0301 	orr.w	r3, r3, #1
 8017f90:	b2da      	uxtb	r2, r3
 8017f92:	687b      	ldr	r3, [r7, #4]
 8017f94:	681b      	ldr	r3, [r3, #0]
 8017f96:	611a      	str	r2, [r3, #16]
}
 8017f98:	e05d      	b.n	8018056 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8017f9a:	687b      	ldr	r3, [r7, #4]
 8017f9c:	691b      	ldr	r3, [r3, #16]
 8017f9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8017fa2:	d133      	bne.n	801800c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8017fa4:	687b      	ldr	r3, [r7, #4]
 8017fa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017faa:	b2db      	uxtb	r3, r3
 8017fac:	2b21      	cmp	r3, #33	; 0x21
 8017fae:	d109      	bne.n	8017fc4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8017fb0:	687b      	ldr	r3, [r7, #4]
 8017fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017fb4:	b2db      	uxtb	r3, r3
 8017fb6:	461a      	mov	r2, r3
 8017fb8:	687b      	ldr	r3, [r7, #4]
 8017fba:	681b      	ldr	r3, [r3, #0]
 8017fbc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8017fc0:	611a      	str	r2, [r3, #16]
 8017fc2:	e008      	b.n	8017fd6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8017fc4:	687b      	ldr	r3, [r7, #4]
 8017fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017fc8:	b2db      	uxtb	r3, r3
 8017fca:	f043 0301 	orr.w	r3, r3, #1
 8017fce:	b2da      	uxtb	r2, r3
 8017fd0:	687b      	ldr	r3, [r7, #4]
 8017fd2:	681b      	ldr	r3, [r3, #0]
 8017fd4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8017fd6:	687b      	ldr	r3, [r7, #4]
 8017fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017fda:	2b00      	cmp	r3, #0
 8017fdc:	d004      	beq.n	8017fe8 <I2C_Master_SB+0x92>
 8017fde:	687b      	ldr	r3, [r7, #4]
 8017fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017fe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017fe4:	2b00      	cmp	r3, #0
 8017fe6:	d108      	bne.n	8017ffa <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8017fe8:	687b      	ldr	r3, [r7, #4]
 8017fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017fec:	2b00      	cmp	r3, #0
 8017fee:	d032      	beq.n	8018056 <I2C_Master_SB+0x100>
 8017ff0:	687b      	ldr	r3, [r7, #4]
 8017ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017ff6:	2b00      	cmp	r3, #0
 8017ff8:	d02d      	beq.n	8018056 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8017ffa:	687b      	ldr	r3, [r7, #4]
 8017ffc:	681b      	ldr	r3, [r3, #0]
 8017ffe:	685a      	ldr	r2, [r3, #4]
 8018000:	687b      	ldr	r3, [r7, #4]
 8018002:	681b      	ldr	r3, [r3, #0]
 8018004:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8018008:	605a      	str	r2, [r3, #4]
}
 801800a:	e024      	b.n	8018056 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 801800c:	687b      	ldr	r3, [r7, #4]
 801800e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018010:	2b00      	cmp	r3, #0
 8018012:	d10e      	bne.n	8018032 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8018014:	687b      	ldr	r3, [r7, #4]
 8018016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018018:	b29b      	uxth	r3, r3
 801801a:	11db      	asrs	r3, r3, #7
 801801c:	b2db      	uxtb	r3, r3
 801801e:	f003 0306 	and.w	r3, r3, #6
 8018022:	b2db      	uxtb	r3, r3
 8018024:	f063 030f 	orn	r3, r3, #15
 8018028:	b2da      	uxtb	r2, r3
 801802a:	687b      	ldr	r3, [r7, #4]
 801802c:	681b      	ldr	r3, [r3, #0]
 801802e:	611a      	str	r2, [r3, #16]
}
 8018030:	e011      	b.n	8018056 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8018032:	687b      	ldr	r3, [r7, #4]
 8018034:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018036:	2b01      	cmp	r3, #1
 8018038:	d10d      	bne.n	8018056 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 801803a:	687b      	ldr	r3, [r7, #4]
 801803c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801803e:	b29b      	uxth	r3, r3
 8018040:	11db      	asrs	r3, r3, #7
 8018042:	b2db      	uxtb	r3, r3
 8018044:	f003 0306 	and.w	r3, r3, #6
 8018048:	b2db      	uxtb	r3, r3
 801804a:	f063 030e 	orn	r3, r3, #14
 801804e:	b2da      	uxtb	r2, r3
 8018050:	687b      	ldr	r3, [r7, #4]
 8018052:	681b      	ldr	r3, [r3, #0]
 8018054:	611a      	str	r2, [r3, #16]
}
 8018056:	bf00      	nop
 8018058:	370c      	adds	r7, #12
 801805a:	46bd      	mov	sp, r7
 801805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018060:	4770      	bx	lr

08018062 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8018062:	b480      	push	{r7}
 8018064:	b083      	sub	sp, #12
 8018066:	af00      	add	r7, sp, #0
 8018068:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 801806a:	687b      	ldr	r3, [r7, #4]
 801806c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801806e:	b2da      	uxtb	r2, r3
 8018070:	687b      	ldr	r3, [r7, #4]
 8018072:	681b      	ldr	r3, [r3, #0]
 8018074:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8018076:	687b      	ldr	r3, [r7, #4]
 8018078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801807a:	2b00      	cmp	r3, #0
 801807c:	d004      	beq.n	8018088 <I2C_Master_ADD10+0x26>
 801807e:	687b      	ldr	r3, [r7, #4]
 8018080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018084:	2b00      	cmp	r3, #0
 8018086:	d108      	bne.n	801809a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8018088:	687b      	ldr	r3, [r7, #4]
 801808a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801808c:	2b00      	cmp	r3, #0
 801808e:	d00c      	beq.n	80180aa <I2C_Master_ADD10+0x48>
 8018090:	687b      	ldr	r3, [r7, #4]
 8018092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018096:	2b00      	cmp	r3, #0
 8018098:	d007      	beq.n	80180aa <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801809a:	687b      	ldr	r3, [r7, #4]
 801809c:	681b      	ldr	r3, [r3, #0]
 801809e:	685a      	ldr	r2, [r3, #4]
 80180a0:	687b      	ldr	r3, [r7, #4]
 80180a2:	681b      	ldr	r3, [r3, #0]
 80180a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80180a8:	605a      	str	r2, [r3, #4]
  }
}
 80180aa:	bf00      	nop
 80180ac:	370c      	adds	r7, #12
 80180ae:	46bd      	mov	sp, r7
 80180b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180b4:	4770      	bx	lr

080180b6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80180b6:	b480      	push	{r7}
 80180b8:	b091      	sub	sp, #68	; 0x44
 80180ba:	af00      	add	r7, sp, #0
 80180bc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80180be:	687b      	ldr	r3, [r7, #4]
 80180c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80180c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80180c8:	687b      	ldr	r3, [r7, #4]
 80180ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80180cc:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80180ce:	687b      	ldr	r3, [r7, #4]
 80180d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80180d2:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80180d4:	687b      	ldr	r3, [r7, #4]
 80180d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80180da:	b2db      	uxtb	r3, r3
 80180dc:	2b22      	cmp	r3, #34	; 0x22
 80180de:	f040 8169 	bne.w	80183b4 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80180e2:	687b      	ldr	r3, [r7, #4]
 80180e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80180e6:	2b00      	cmp	r3, #0
 80180e8:	d10f      	bne.n	801810a <I2C_Master_ADDR+0x54>
 80180ea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80180ee:	2b40      	cmp	r3, #64	; 0x40
 80180f0:	d10b      	bne.n	801810a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80180f2:	2300      	movs	r3, #0
 80180f4:	633b      	str	r3, [r7, #48]	; 0x30
 80180f6:	687b      	ldr	r3, [r7, #4]
 80180f8:	681b      	ldr	r3, [r3, #0]
 80180fa:	695b      	ldr	r3, [r3, #20]
 80180fc:	633b      	str	r3, [r7, #48]	; 0x30
 80180fe:	687b      	ldr	r3, [r7, #4]
 8018100:	681b      	ldr	r3, [r3, #0]
 8018102:	699b      	ldr	r3, [r3, #24]
 8018104:	633b      	str	r3, [r7, #48]	; 0x30
 8018106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018108:	e160      	b.n	80183cc <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 801810a:	687b      	ldr	r3, [r7, #4]
 801810c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801810e:	2b00      	cmp	r3, #0
 8018110:	d11d      	bne.n	801814e <I2C_Master_ADDR+0x98>
 8018112:	687b      	ldr	r3, [r7, #4]
 8018114:	691b      	ldr	r3, [r3, #16]
 8018116:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 801811a:	d118      	bne.n	801814e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801811c:	2300      	movs	r3, #0
 801811e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018120:	687b      	ldr	r3, [r7, #4]
 8018122:	681b      	ldr	r3, [r3, #0]
 8018124:	695b      	ldr	r3, [r3, #20]
 8018126:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018128:	687b      	ldr	r3, [r7, #4]
 801812a:	681b      	ldr	r3, [r3, #0]
 801812c:	699b      	ldr	r3, [r3, #24]
 801812e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018130:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8018132:	687b      	ldr	r3, [r7, #4]
 8018134:	681b      	ldr	r3, [r3, #0]
 8018136:	681a      	ldr	r2, [r3, #0]
 8018138:	687b      	ldr	r3, [r7, #4]
 801813a:	681b      	ldr	r3, [r3, #0]
 801813c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8018140:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8018142:	687b      	ldr	r3, [r7, #4]
 8018144:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018146:	1c5a      	adds	r2, r3, #1
 8018148:	687b      	ldr	r3, [r7, #4]
 801814a:	651a      	str	r2, [r3, #80]	; 0x50
 801814c:	e13e      	b.n	80183cc <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 801814e:	687b      	ldr	r3, [r7, #4]
 8018150:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018152:	b29b      	uxth	r3, r3
 8018154:	2b00      	cmp	r3, #0
 8018156:	d113      	bne.n	8018180 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018158:	2300      	movs	r3, #0
 801815a:	62bb      	str	r3, [r7, #40]	; 0x28
 801815c:	687b      	ldr	r3, [r7, #4]
 801815e:	681b      	ldr	r3, [r3, #0]
 8018160:	695b      	ldr	r3, [r3, #20]
 8018162:	62bb      	str	r3, [r7, #40]	; 0x28
 8018164:	687b      	ldr	r3, [r7, #4]
 8018166:	681b      	ldr	r3, [r3, #0]
 8018168:	699b      	ldr	r3, [r3, #24]
 801816a:	62bb      	str	r3, [r7, #40]	; 0x28
 801816c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801816e:	687b      	ldr	r3, [r7, #4]
 8018170:	681b      	ldr	r3, [r3, #0]
 8018172:	681a      	ldr	r2, [r3, #0]
 8018174:	687b      	ldr	r3, [r7, #4]
 8018176:	681b      	ldr	r3, [r3, #0]
 8018178:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801817c:	601a      	str	r2, [r3, #0]
 801817e:	e115      	b.n	80183ac <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8018180:	687b      	ldr	r3, [r7, #4]
 8018182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018184:	b29b      	uxth	r3, r3
 8018186:	2b01      	cmp	r3, #1
 8018188:	f040 808a 	bne.w	80182a0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 801818c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801818e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8018192:	d137      	bne.n	8018204 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018194:	687b      	ldr	r3, [r7, #4]
 8018196:	681b      	ldr	r3, [r3, #0]
 8018198:	681a      	ldr	r2, [r3, #0]
 801819a:	687b      	ldr	r3, [r7, #4]
 801819c:	681b      	ldr	r3, [r3, #0]
 801819e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80181a2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80181a4:	687b      	ldr	r3, [r7, #4]
 80181a6:	681b      	ldr	r3, [r3, #0]
 80181a8:	685b      	ldr	r3, [r3, #4]
 80181aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80181ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80181b2:	d113      	bne.n	80181dc <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80181b4:	687b      	ldr	r3, [r7, #4]
 80181b6:	681b      	ldr	r3, [r3, #0]
 80181b8:	681a      	ldr	r2, [r3, #0]
 80181ba:	687b      	ldr	r3, [r7, #4]
 80181bc:	681b      	ldr	r3, [r3, #0]
 80181be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80181c2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80181c4:	2300      	movs	r3, #0
 80181c6:	627b      	str	r3, [r7, #36]	; 0x24
 80181c8:	687b      	ldr	r3, [r7, #4]
 80181ca:	681b      	ldr	r3, [r3, #0]
 80181cc:	695b      	ldr	r3, [r3, #20]
 80181ce:	627b      	str	r3, [r7, #36]	; 0x24
 80181d0:	687b      	ldr	r3, [r7, #4]
 80181d2:	681b      	ldr	r3, [r3, #0]
 80181d4:	699b      	ldr	r3, [r3, #24]
 80181d6:	627b      	str	r3, [r7, #36]	; 0x24
 80181d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181da:	e0e7      	b.n	80183ac <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80181dc:	2300      	movs	r3, #0
 80181de:	623b      	str	r3, [r7, #32]
 80181e0:	687b      	ldr	r3, [r7, #4]
 80181e2:	681b      	ldr	r3, [r3, #0]
 80181e4:	695b      	ldr	r3, [r3, #20]
 80181e6:	623b      	str	r3, [r7, #32]
 80181e8:	687b      	ldr	r3, [r7, #4]
 80181ea:	681b      	ldr	r3, [r3, #0]
 80181ec:	699b      	ldr	r3, [r3, #24]
 80181ee:	623b      	str	r3, [r7, #32]
 80181f0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80181f2:	687b      	ldr	r3, [r7, #4]
 80181f4:	681b      	ldr	r3, [r3, #0]
 80181f6:	681a      	ldr	r2, [r3, #0]
 80181f8:	687b      	ldr	r3, [r7, #4]
 80181fa:	681b      	ldr	r3, [r3, #0]
 80181fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018200:	601a      	str	r2, [r3, #0]
 8018202:	e0d3      	b.n	80183ac <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8018204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018206:	2b08      	cmp	r3, #8
 8018208:	d02e      	beq.n	8018268 <I2C_Master_ADDR+0x1b2>
 801820a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801820c:	2b20      	cmp	r3, #32
 801820e:	d02b      	beq.n	8018268 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8018210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018212:	2b12      	cmp	r3, #18
 8018214:	d102      	bne.n	801821c <I2C_Master_ADDR+0x166>
 8018216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018218:	2b01      	cmp	r3, #1
 801821a:	d125      	bne.n	8018268 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 801821c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801821e:	2b04      	cmp	r3, #4
 8018220:	d00e      	beq.n	8018240 <I2C_Master_ADDR+0x18a>
 8018222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018224:	2b02      	cmp	r3, #2
 8018226:	d00b      	beq.n	8018240 <I2C_Master_ADDR+0x18a>
 8018228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801822a:	2b10      	cmp	r3, #16
 801822c:	d008      	beq.n	8018240 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801822e:	687b      	ldr	r3, [r7, #4]
 8018230:	681b      	ldr	r3, [r3, #0]
 8018232:	681a      	ldr	r2, [r3, #0]
 8018234:	687b      	ldr	r3, [r7, #4]
 8018236:	681b      	ldr	r3, [r3, #0]
 8018238:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801823c:	601a      	str	r2, [r3, #0]
 801823e:	e007      	b.n	8018250 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018240:	687b      	ldr	r3, [r7, #4]
 8018242:	681b      	ldr	r3, [r3, #0]
 8018244:	681a      	ldr	r2, [r3, #0]
 8018246:	687b      	ldr	r3, [r7, #4]
 8018248:	681b      	ldr	r3, [r3, #0]
 801824a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801824e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018250:	2300      	movs	r3, #0
 8018252:	61fb      	str	r3, [r7, #28]
 8018254:	687b      	ldr	r3, [r7, #4]
 8018256:	681b      	ldr	r3, [r3, #0]
 8018258:	695b      	ldr	r3, [r3, #20]
 801825a:	61fb      	str	r3, [r7, #28]
 801825c:	687b      	ldr	r3, [r7, #4]
 801825e:	681b      	ldr	r3, [r3, #0]
 8018260:	699b      	ldr	r3, [r3, #24]
 8018262:	61fb      	str	r3, [r7, #28]
 8018264:	69fb      	ldr	r3, [r7, #28]
 8018266:	e0a1      	b.n	80183ac <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018268:	687b      	ldr	r3, [r7, #4]
 801826a:	681b      	ldr	r3, [r3, #0]
 801826c:	681a      	ldr	r2, [r3, #0]
 801826e:	687b      	ldr	r3, [r7, #4]
 8018270:	681b      	ldr	r3, [r3, #0]
 8018272:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018276:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018278:	2300      	movs	r3, #0
 801827a:	61bb      	str	r3, [r7, #24]
 801827c:	687b      	ldr	r3, [r7, #4]
 801827e:	681b      	ldr	r3, [r3, #0]
 8018280:	695b      	ldr	r3, [r3, #20]
 8018282:	61bb      	str	r3, [r7, #24]
 8018284:	687b      	ldr	r3, [r7, #4]
 8018286:	681b      	ldr	r3, [r3, #0]
 8018288:	699b      	ldr	r3, [r3, #24]
 801828a:	61bb      	str	r3, [r7, #24]
 801828c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801828e:	687b      	ldr	r3, [r7, #4]
 8018290:	681b      	ldr	r3, [r3, #0]
 8018292:	681a      	ldr	r2, [r3, #0]
 8018294:	687b      	ldr	r3, [r7, #4]
 8018296:	681b      	ldr	r3, [r3, #0]
 8018298:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801829c:	601a      	str	r2, [r3, #0]
 801829e:	e085      	b.n	80183ac <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80182a0:	687b      	ldr	r3, [r7, #4]
 80182a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80182a4:	b29b      	uxth	r3, r3
 80182a6:	2b02      	cmp	r3, #2
 80182a8:	d14d      	bne.n	8018346 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80182aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80182ac:	2b04      	cmp	r3, #4
 80182ae:	d016      	beq.n	80182de <I2C_Master_ADDR+0x228>
 80182b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80182b2:	2b02      	cmp	r3, #2
 80182b4:	d013      	beq.n	80182de <I2C_Master_ADDR+0x228>
 80182b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80182b8:	2b10      	cmp	r3, #16
 80182ba:	d010      	beq.n	80182de <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80182bc:	687b      	ldr	r3, [r7, #4]
 80182be:	681b      	ldr	r3, [r3, #0]
 80182c0:	681a      	ldr	r2, [r3, #0]
 80182c2:	687b      	ldr	r3, [r7, #4]
 80182c4:	681b      	ldr	r3, [r3, #0]
 80182c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80182ca:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80182cc:	687b      	ldr	r3, [r7, #4]
 80182ce:	681b      	ldr	r3, [r3, #0]
 80182d0:	681a      	ldr	r2, [r3, #0]
 80182d2:	687b      	ldr	r3, [r7, #4]
 80182d4:	681b      	ldr	r3, [r3, #0]
 80182d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80182da:	601a      	str	r2, [r3, #0]
 80182dc:	e007      	b.n	80182ee <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80182de:	687b      	ldr	r3, [r7, #4]
 80182e0:	681b      	ldr	r3, [r3, #0]
 80182e2:	681a      	ldr	r2, [r3, #0]
 80182e4:	687b      	ldr	r3, [r7, #4]
 80182e6:	681b      	ldr	r3, [r3, #0]
 80182e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80182ec:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80182ee:	687b      	ldr	r3, [r7, #4]
 80182f0:	681b      	ldr	r3, [r3, #0]
 80182f2:	685b      	ldr	r3, [r3, #4]
 80182f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80182f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80182fc:	d117      	bne.n	801832e <I2C_Master_ADDR+0x278>
 80182fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018300:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8018304:	d00b      	beq.n	801831e <I2C_Master_ADDR+0x268>
 8018306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018308:	2b01      	cmp	r3, #1
 801830a:	d008      	beq.n	801831e <I2C_Master_ADDR+0x268>
 801830c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801830e:	2b08      	cmp	r3, #8
 8018310:	d005      	beq.n	801831e <I2C_Master_ADDR+0x268>
 8018312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018314:	2b10      	cmp	r3, #16
 8018316:	d002      	beq.n	801831e <I2C_Master_ADDR+0x268>
 8018318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801831a:	2b20      	cmp	r3, #32
 801831c:	d107      	bne.n	801832e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 801831e:	687b      	ldr	r3, [r7, #4]
 8018320:	681b      	ldr	r3, [r3, #0]
 8018322:	685a      	ldr	r2, [r3, #4]
 8018324:	687b      	ldr	r3, [r7, #4]
 8018326:	681b      	ldr	r3, [r3, #0]
 8018328:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801832c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801832e:	2300      	movs	r3, #0
 8018330:	617b      	str	r3, [r7, #20]
 8018332:	687b      	ldr	r3, [r7, #4]
 8018334:	681b      	ldr	r3, [r3, #0]
 8018336:	695b      	ldr	r3, [r3, #20]
 8018338:	617b      	str	r3, [r7, #20]
 801833a:	687b      	ldr	r3, [r7, #4]
 801833c:	681b      	ldr	r3, [r3, #0]
 801833e:	699b      	ldr	r3, [r3, #24]
 8018340:	617b      	str	r3, [r7, #20]
 8018342:	697b      	ldr	r3, [r7, #20]
 8018344:	e032      	b.n	80183ac <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018346:	687b      	ldr	r3, [r7, #4]
 8018348:	681b      	ldr	r3, [r3, #0]
 801834a:	681a      	ldr	r2, [r3, #0]
 801834c:	687b      	ldr	r3, [r7, #4]
 801834e:	681b      	ldr	r3, [r3, #0]
 8018350:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8018354:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8018356:	687b      	ldr	r3, [r7, #4]
 8018358:	681b      	ldr	r3, [r3, #0]
 801835a:	685b      	ldr	r3, [r3, #4]
 801835c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018360:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8018364:	d117      	bne.n	8018396 <I2C_Master_ADDR+0x2e0>
 8018366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018368:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801836c:	d00b      	beq.n	8018386 <I2C_Master_ADDR+0x2d0>
 801836e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018370:	2b01      	cmp	r3, #1
 8018372:	d008      	beq.n	8018386 <I2C_Master_ADDR+0x2d0>
 8018374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018376:	2b08      	cmp	r3, #8
 8018378:	d005      	beq.n	8018386 <I2C_Master_ADDR+0x2d0>
 801837a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801837c:	2b10      	cmp	r3, #16
 801837e:	d002      	beq.n	8018386 <I2C_Master_ADDR+0x2d0>
 8018380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018382:	2b20      	cmp	r3, #32
 8018384:	d107      	bne.n	8018396 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8018386:	687b      	ldr	r3, [r7, #4]
 8018388:	681b      	ldr	r3, [r3, #0]
 801838a:	685a      	ldr	r2, [r3, #4]
 801838c:	687b      	ldr	r3, [r7, #4]
 801838e:	681b      	ldr	r3, [r3, #0]
 8018390:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8018394:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018396:	2300      	movs	r3, #0
 8018398:	613b      	str	r3, [r7, #16]
 801839a:	687b      	ldr	r3, [r7, #4]
 801839c:	681b      	ldr	r3, [r3, #0]
 801839e:	695b      	ldr	r3, [r3, #20]
 80183a0:	613b      	str	r3, [r7, #16]
 80183a2:	687b      	ldr	r3, [r7, #4]
 80183a4:	681b      	ldr	r3, [r3, #0]
 80183a6:	699b      	ldr	r3, [r3, #24]
 80183a8:	613b      	str	r3, [r7, #16]
 80183aa:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80183ac:	687b      	ldr	r3, [r7, #4]
 80183ae:	2200      	movs	r2, #0
 80183b0:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80183b2:	e00b      	b.n	80183cc <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80183b4:	2300      	movs	r3, #0
 80183b6:	60fb      	str	r3, [r7, #12]
 80183b8:	687b      	ldr	r3, [r7, #4]
 80183ba:	681b      	ldr	r3, [r3, #0]
 80183bc:	695b      	ldr	r3, [r3, #20]
 80183be:	60fb      	str	r3, [r7, #12]
 80183c0:	687b      	ldr	r3, [r7, #4]
 80183c2:	681b      	ldr	r3, [r3, #0]
 80183c4:	699b      	ldr	r3, [r3, #24]
 80183c6:	60fb      	str	r3, [r7, #12]
 80183c8:	68fb      	ldr	r3, [r7, #12]
}
 80183ca:	e7ff      	b.n	80183cc <I2C_Master_ADDR+0x316>
 80183cc:	bf00      	nop
 80183ce:	3744      	adds	r7, #68	; 0x44
 80183d0:	46bd      	mov	sp, r7
 80183d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183d6:	4770      	bx	lr

080183d8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80183d8:	b580      	push	{r7, lr}
 80183da:	b084      	sub	sp, #16
 80183dc:	af00      	add	r7, sp, #0
 80183de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80183e0:	687b      	ldr	r3, [r7, #4]
 80183e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80183e6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80183e8:	687b      	ldr	r3, [r7, #4]
 80183ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80183ec:	b29b      	uxth	r3, r3
 80183ee:	2b00      	cmp	r3, #0
 80183f0:	d02b      	beq.n	801844a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80183f2:	687b      	ldr	r3, [r7, #4]
 80183f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80183f6:	781a      	ldrb	r2, [r3, #0]
 80183f8:	687b      	ldr	r3, [r7, #4]
 80183fa:	681b      	ldr	r3, [r3, #0]
 80183fc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80183fe:	687b      	ldr	r3, [r7, #4]
 8018400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018402:	1c5a      	adds	r2, r3, #1
 8018404:	687b      	ldr	r3, [r7, #4]
 8018406:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8018408:	687b      	ldr	r3, [r7, #4]
 801840a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801840c:	b29b      	uxth	r3, r3
 801840e:	3b01      	subs	r3, #1
 8018410:	b29a      	uxth	r2, r3
 8018412:	687b      	ldr	r3, [r7, #4]
 8018414:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8018416:	687b      	ldr	r3, [r7, #4]
 8018418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801841a:	b29b      	uxth	r3, r3
 801841c:	2b00      	cmp	r3, #0
 801841e:	d114      	bne.n	801844a <I2C_SlaveTransmit_TXE+0x72>
 8018420:	7bfb      	ldrb	r3, [r7, #15]
 8018422:	2b29      	cmp	r3, #41	; 0x29
 8018424:	d111      	bne.n	801844a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8018426:	687b      	ldr	r3, [r7, #4]
 8018428:	681b      	ldr	r3, [r3, #0]
 801842a:	685a      	ldr	r2, [r3, #4]
 801842c:	687b      	ldr	r3, [r7, #4]
 801842e:	681b      	ldr	r3, [r3, #0]
 8018430:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018434:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8018436:	687b      	ldr	r3, [r7, #4]
 8018438:	2221      	movs	r2, #33	; 0x21
 801843a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801843c:	687b      	ldr	r3, [r7, #4]
 801843e:	2228      	movs	r2, #40	; 0x28
 8018440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8018444:	6878      	ldr	r0, [r7, #4]
 8018446:	f7ff f9e7 	bl	8017818 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 801844a:	bf00      	nop
 801844c:	3710      	adds	r7, #16
 801844e:	46bd      	mov	sp, r7
 8018450:	bd80      	pop	{r7, pc}

08018452 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8018452:	b480      	push	{r7}
 8018454:	b083      	sub	sp, #12
 8018456:	af00      	add	r7, sp, #0
 8018458:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 801845a:	687b      	ldr	r3, [r7, #4]
 801845c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801845e:	b29b      	uxth	r3, r3
 8018460:	2b00      	cmp	r3, #0
 8018462:	d011      	beq.n	8018488 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8018464:	687b      	ldr	r3, [r7, #4]
 8018466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018468:	781a      	ldrb	r2, [r3, #0]
 801846a:	687b      	ldr	r3, [r7, #4]
 801846c:	681b      	ldr	r3, [r3, #0]
 801846e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8018470:	687b      	ldr	r3, [r7, #4]
 8018472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018474:	1c5a      	adds	r2, r3, #1
 8018476:	687b      	ldr	r3, [r7, #4]
 8018478:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 801847a:	687b      	ldr	r3, [r7, #4]
 801847c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801847e:	b29b      	uxth	r3, r3
 8018480:	3b01      	subs	r3, #1
 8018482:	b29a      	uxth	r2, r3
 8018484:	687b      	ldr	r3, [r7, #4]
 8018486:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8018488:	bf00      	nop
 801848a:	370c      	adds	r7, #12
 801848c:	46bd      	mov	sp, r7
 801848e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018492:	4770      	bx	lr

08018494 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8018494:	b580      	push	{r7, lr}
 8018496:	b084      	sub	sp, #16
 8018498:	af00      	add	r7, sp, #0
 801849a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801849c:	687b      	ldr	r3, [r7, #4]
 801849e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80184a2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80184a4:	687b      	ldr	r3, [r7, #4]
 80184a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80184a8:	b29b      	uxth	r3, r3
 80184aa:	2b00      	cmp	r3, #0
 80184ac:	d02c      	beq.n	8018508 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80184ae:	687b      	ldr	r3, [r7, #4]
 80184b0:	681b      	ldr	r3, [r3, #0]
 80184b2:	691a      	ldr	r2, [r3, #16]
 80184b4:	687b      	ldr	r3, [r7, #4]
 80184b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80184b8:	b2d2      	uxtb	r2, r2
 80184ba:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80184bc:	687b      	ldr	r3, [r7, #4]
 80184be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80184c0:	1c5a      	adds	r2, r3, #1
 80184c2:	687b      	ldr	r3, [r7, #4]
 80184c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80184c6:	687b      	ldr	r3, [r7, #4]
 80184c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80184ca:	b29b      	uxth	r3, r3
 80184cc:	3b01      	subs	r3, #1
 80184ce:	b29a      	uxth	r2, r3
 80184d0:	687b      	ldr	r3, [r7, #4]
 80184d2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80184d4:	687b      	ldr	r3, [r7, #4]
 80184d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80184d8:	b29b      	uxth	r3, r3
 80184da:	2b00      	cmp	r3, #0
 80184dc:	d114      	bne.n	8018508 <I2C_SlaveReceive_RXNE+0x74>
 80184de:	7bfb      	ldrb	r3, [r7, #15]
 80184e0:	2b2a      	cmp	r3, #42	; 0x2a
 80184e2:	d111      	bne.n	8018508 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80184e4:	687b      	ldr	r3, [r7, #4]
 80184e6:	681b      	ldr	r3, [r3, #0]
 80184e8:	685a      	ldr	r2, [r3, #4]
 80184ea:	687b      	ldr	r3, [r7, #4]
 80184ec:	681b      	ldr	r3, [r3, #0]
 80184ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80184f2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80184f4:	687b      	ldr	r3, [r7, #4]
 80184f6:	2222      	movs	r2, #34	; 0x22
 80184f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80184fa:	687b      	ldr	r3, [r7, #4]
 80184fc:	2228      	movs	r2, #40	; 0x28
 80184fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8018502:	6878      	ldr	r0, [r7, #4]
 8018504:	f7ff f992 	bl	801782c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8018508:	bf00      	nop
 801850a:	3710      	adds	r7, #16
 801850c:	46bd      	mov	sp, r7
 801850e:	bd80      	pop	{r7, pc}

08018510 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8018510:	b480      	push	{r7}
 8018512:	b083      	sub	sp, #12
 8018514:	af00      	add	r7, sp, #0
 8018516:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8018518:	687b      	ldr	r3, [r7, #4]
 801851a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801851c:	b29b      	uxth	r3, r3
 801851e:	2b00      	cmp	r3, #0
 8018520:	d012      	beq.n	8018548 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018522:	687b      	ldr	r3, [r7, #4]
 8018524:	681b      	ldr	r3, [r3, #0]
 8018526:	691a      	ldr	r2, [r3, #16]
 8018528:	687b      	ldr	r3, [r7, #4]
 801852a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801852c:	b2d2      	uxtb	r2, r2
 801852e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8018530:	687b      	ldr	r3, [r7, #4]
 8018532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018534:	1c5a      	adds	r2, r3, #1
 8018536:	687b      	ldr	r3, [r7, #4]
 8018538:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 801853a:	687b      	ldr	r3, [r7, #4]
 801853c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801853e:	b29b      	uxth	r3, r3
 8018540:	3b01      	subs	r3, #1
 8018542:	b29a      	uxth	r2, r3
 8018544:	687b      	ldr	r3, [r7, #4]
 8018546:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8018548:	bf00      	nop
 801854a:	370c      	adds	r7, #12
 801854c:	46bd      	mov	sp, r7
 801854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018552:	4770      	bx	lr

08018554 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8018554:	b580      	push	{r7, lr}
 8018556:	b084      	sub	sp, #16
 8018558:	af00      	add	r7, sp, #0
 801855a:	6078      	str	r0, [r7, #4]
 801855c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 801855e:	2300      	movs	r3, #0
 8018560:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8018562:	687b      	ldr	r3, [r7, #4]
 8018564:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018568:	b2db      	uxtb	r3, r3
 801856a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 801856e:	2b28      	cmp	r3, #40	; 0x28
 8018570:	d127      	bne.n	80185c2 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8018572:	687b      	ldr	r3, [r7, #4]
 8018574:	681b      	ldr	r3, [r3, #0]
 8018576:	685a      	ldr	r2, [r3, #4]
 8018578:	687b      	ldr	r3, [r7, #4]
 801857a:	681b      	ldr	r3, [r3, #0]
 801857c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018580:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8018582:	683b      	ldr	r3, [r7, #0]
 8018584:	089b      	lsrs	r3, r3, #2
 8018586:	f003 0301 	and.w	r3, r3, #1
 801858a:	2b00      	cmp	r3, #0
 801858c:	d101      	bne.n	8018592 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 801858e:	2301      	movs	r3, #1
 8018590:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8018592:	683b      	ldr	r3, [r7, #0]
 8018594:	09db      	lsrs	r3, r3, #7
 8018596:	f003 0301 	and.w	r3, r3, #1
 801859a:	2b00      	cmp	r3, #0
 801859c:	d103      	bne.n	80185a6 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 801859e:	687b      	ldr	r3, [r7, #4]
 80185a0:	68db      	ldr	r3, [r3, #12]
 80185a2:	81bb      	strh	r3, [r7, #12]
 80185a4:	e002      	b.n	80185ac <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80185a6:	687b      	ldr	r3, [r7, #4]
 80185a8:	699b      	ldr	r3, [r3, #24]
 80185aa:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80185ac:	687b      	ldr	r3, [r7, #4]
 80185ae:	2200      	movs	r2, #0
 80185b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80185b4:	89ba      	ldrh	r2, [r7, #12]
 80185b6:	7bfb      	ldrb	r3, [r7, #15]
 80185b8:	4619      	mov	r1, r3
 80185ba:	6878      	ldr	r0, [r7, #4]
 80185bc:	f7ff f940 	bl	8017840 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80185c0:	e00e      	b.n	80185e0 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80185c2:	2300      	movs	r3, #0
 80185c4:	60bb      	str	r3, [r7, #8]
 80185c6:	687b      	ldr	r3, [r7, #4]
 80185c8:	681b      	ldr	r3, [r3, #0]
 80185ca:	695b      	ldr	r3, [r3, #20]
 80185cc:	60bb      	str	r3, [r7, #8]
 80185ce:	687b      	ldr	r3, [r7, #4]
 80185d0:	681b      	ldr	r3, [r3, #0]
 80185d2:	699b      	ldr	r3, [r3, #24]
 80185d4:	60bb      	str	r3, [r7, #8]
 80185d6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80185d8:	687b      	ldr	r3, [r7, #4]
 80185da:	2200      	movs	r2, #0
 80185dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80185e0:	bf00      	nop
 80185e2:	3710      	adds	r7, #16
 80185e4:	46bd      	mov	sp, r7
 80185e6:	bd80      	pop	{r7, pc}

080185e8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80185e8:	b580      	push	{r7, lr}
 80185ea:	b084      	sub	sp, #16
 80185ec:	af00      	add	r7, sp, #0
 80185ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80185f0:	687b      	ldr	r3, [r7, #4]
 80185f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80185f6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80185f8:	687b      	ldr	r3, [r7, #4]
 80185fa:	681b      	ldr	r3, [r3, #0]
 80185fc:	685a      	ldr	r2, [r3, #4]
 80185fe:	687b      	ldr	r3, [r7, #4]
 8018600:	681b      	ldr	r3, [r3, #0]
 8018602:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8018606:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8018608:	2300      	movs	r3, #0
 801860a:	60bb      	str	r3, [r7, #8]
 801860c:	687b      	ldr	r3, [r7, #4]
 801860e:	681b      	ldr	r3, [r3, #0]
 8018610:	695b      	ldr	r3, [r3, #20]
 8018612:	60bb      	str	r3, [r7, #8]
 8018614:	687b      	ldr	r3, [r7, #4]
 8018616:	681b      	ldr	r3, [r3, #0]
 8018618:	681a      	ldr	r2, [r3, #0]
 801861a:	687b      	ldr	r3, [r7, #4]
 801861c:	681b      	ldr	r3, [r3, #0]
 801861e:	f042 0201 	orr.w	r2, r2, #1
 8018622:	601a      	str	r2, [r3, #0]
 8018624:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018626:	687b      	ldr	r3, [r7, #4]
 8018628:	681b      	ldr	r3, [r3, #0]
 801862a:	681a      	ldr	r2, [r3, #0]
 801862c:	687b      	ldr	r3, [r7, #4]
 801862e:	681b      	ldr	r3, [r3, #0]
 8018630:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018634:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8018636:	687b      	ldr	r3, [r7, #4]
 8018638:	681b      	ldr	r3, [r3, #0]
 801863a:	685b      	ldr	r3, [r3, #4]
 801863c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018640:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8018644:	d172      	bne.n	801872c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8018646:	7bfb      	ldrb	r3, [r7, #15]
 8018648:	2b22      	cmp	r3, #34	; 0x22
 801864a:	d002      	beq.n	8018652 <I2C_Slave_STOPF+0x6a>
 801864c:	7bfb      	ldrb	r3, [r7, #15]
 801864e:	2b2a      	cmp	r3, #42	; 0x2a
 8018650:	d135      	bne.n	80186be <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8018652:	687b      	ldr	r3, [r7, #4]
 8018654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018656:	681b      	ldr	r3, [r3, #0]
 8018658:	685b      	ldr	r3, [r3, #4]
 801865a:	b29a      	uxth	r2, r3
 801865c:	687b      	ldr	r3, [r7, #4]
 801865e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8018660:	687b      	ldr	r3, [r7, #4]
 8018662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018664:	b29b      	uxth	r3, r3
 8018666:	2b00      	cmp	r3, #0
 8018668:	d005      	beq.n	8018676 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801866a:	687b      	ldr	r3, [r7, #4]
 801866c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801866e:	f043 0204 	orr.w	r2, r3, #4
 8018672:	687b      	ldr	r3, [r7, #4]
 8018674:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8018676:	687b      	ldr	r3, [r7, #4]
 8018678:	681b      	ldr	r3, [r3, #0]
 801867a:	685a      	ldr	r2, [r3, #4]
 801867c:	687b      	ldr	r3, [r7, #4]
 801867e:	681b      	ldr	r3, [r3, #0]
 8018680:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8018684:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8018686:	687b      	ldr	r3, [r7, #4]
 8018688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801868a:	4618      	mov	r0, r3
 801868c:	f7fd fdb4 	bl	80161f8 <HAL_DMA_GetState>
 8018690:	4603      	mov	r3, r0
 8018692:	2b01      	cmp	r3, #1
 8018694:	d049      	beq.n	801872a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8018696:	687b      	ldr	r3, [r7, #4]
 8018698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801869a:	4a69      	ldr	r2, [pc, #420]	; (8018840 <I2C_Slave_STOPF+0x258>)
 801869c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 801869e:	687b      	ldr	r3, [r7, #4]
 80186a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80186a2:	4618      	mov	r0, r3
 80186a4:	f7fd fbfc 	bl	8015ea0 <HAL_DMA_Abort_IT>
 80186a8:	4603      	mov	r3, r0
 80186aa:	2b00      	cmp	r3, #0
 80186ac:	d03d      	beq.n	801872a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80186ae:	687b      	ldr	r3, [r7, #4]
 80186b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80186b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80186b4:	687a      	ldr	r2, [r7, #4]
 80186b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80186b8:	4610      	mov	r0, r2
 80186ba:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80186bc:	e035      	b.n	801872a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80186be:	687b      	ldr	r3, [r7, #4]
 80186c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80186c2:	681b      	ldr	r3, [r3, #0]
 80186c4:	685b      	ldr	r3, [r3, #4]
 80186c6:	b29a      	uxth	r2, r3
 80186c8:	687b      	ldr	r3, [r7, #4]
 80186ca:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80186cc:	687b      	ldr	r3, [r7, #4]
 80186ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80186d0:	b29b      	uxth	r3, r3
 80186d2:	2b00      	cmp	r3, #0
 80186d4:	d005      	beq.n	80186e2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80186d6:	687b      	ldr	r3, [r7, #4]
 80186d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80186da:	f043 0204 	orr.w	r2, r3, #4
 80186de:	687b      	ldr	r3, [r7, #4]
 80186e0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80186e2:	687b      	ldr	r3, [r7, #4]
 80186e4:	681b      	ldr	r3, [r3, #0]
 80186e6:	685a      	ldr	r2, [r3, #4]
 80186e8:	687b      	ldr	r3, [r7, #4]
 80186ea:	681b      	ldr	r3, [r3, #0]
 80186ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80186f0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80186f2:	687b      	ldr	r3, [r7, #4]
 80186f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80186f6:	4618      	mov	r0, r3
 80186f8:	f7fd fd7e 	bl	80161f8 <HAL_DMA_GetState>
 80186fc:	4603      	mov	r3, r0
 80186fe:	2b01      	cmp	r3, #1
 8018700:	d014      	beq.n	801872c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8018702:	687b      	ldr	r3, [r7, #4]
 8018704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018706:	4a4e      	ldr	r2, [pc, #312]	; (8018840 <I2C_Slave_STOPF+0x258>)
 8018708:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 801870a:	687b      	ldr	r3, [r7, #4]
 801870c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801870e:	4618      	mov	r0, r3
 8018710:	f7fd fbc6 	bl	8015ea0 <HAL_DMA_Abort_IT>
 8018714:	4603      	mov	r3, r0
 8018716:	2b00      	cmp	r3, #0
 8018718:	d008      	beq.n	801872c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 801871a:	687b      	ldr	r3, [r7, #4]
 801871c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801871e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018720:	687a      	ldr	r2, [r7, #4]
 8018722:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8018724:	4610      	mov	r0, r2
 8018726:	4798      	blx	r3
 8018728:	e000      	b.n	801872c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801872a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 801872c:	687b      	ldr	r3, [r7, #4]
 801872e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018730:	b29b      	uxth	r3, r3
 8018732:	2b00      	cmp	r3, #0
 8018734:	d03e      	beq.n	80187b4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8018736:	687b      	ldr	r3, [r7, #4]
 8018738:	681b      	ldr	r3, [r3, #0]
 801873a:	695b      	ldr	r3, [r3, #20]
 801873c:	f003 0304 	and.w	r3, r3, #4
 8018740:	2b04      	cmp	r3, #4
 8018742:	d112      	bne.n	801876a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018744:	687b      	ldr	r3, [r7, #4]
 8018746:	681b      	ldr	r3, [r3, #0]
 8018748:	691a      	ldr	r2, [r3, #16]
 801874a:	687b      	ldr	r3, [r7, #4]
 801874c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801874e:	b2d2      	uxtb	r2, r2
 8018750:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8018752:	687b      	ldr	r3, [r7, #4]
 8018754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018756:	1c5a      	adds	r2, r3, #1
 8018758:	687b      	ldr	r3, [r7, #4]
 801875a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 801875c:	687b      	ldr	r3, [r7, #4]
 801875e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018760:	b29b      	uxth	r3, r3
 8018762:	3b01      	subs	r3, #1
 8018764:	b29a      	uxth	r2, r3
 8018766:	687b      	ldr	r3, [r7, #4]
 8018768:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 801876a:	687b      	ldr	r3, [r7, #4]
 801876c:	681b      	ldr	r3, [r3, #0]
 801876e:	695b      	ldr	r3, [r3, #20]
 8018770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018774:	2b40      	cmp	r3, #64	; 0x40
 8018776:	d112      	bne.n	801879e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018778:	687b      	ldr	r3, [r7, #4]
 801877a:	681b      	ldr	r3, [r3, #0]
 801877c:	691a      	ldr	r2, [r3, #16]
 801877e:	687b      	ldr	r3, [r7, #4]
 8018780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018782:	b2d2      	uxtb	r2, r2
 8018784:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8018786:	687b      	ldr	r3, [r7, #4]
 8018788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801878a:	1c5a      	adds	r2, r3, #1
 801878c:	687b      	ldr	r3, [r7, #4]
 801878e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8018790:	687b      	ldr	r3, [r7, #4]
 8018792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018794:	b29b      	uxth	r3, r3
 8018796:	3b01      	subs	r3, #1
 8018798:	b29a      	uxth	r2, r3
 801879a:	687b      	ldr	r3, [r7, #4]
 801879c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 801879e:	687b      	ldr	r3, [r7, #4]
 80187a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80187a2:	b29b      	uxth	r3, r3
 80187a4:	2b00      	cmp	r3, #0
 80187a6:	d005      	beq.n	80187b4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80187a8:	687b      	ldr	r3, [r7, #4]
 80187aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80187ac:	f043 0204 	orr.w	r2, r3, #4
 80187b0:	687b      	ldr	r3, [r7, #4]
 80187b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80187b4:	687b      	ldr	r3, [r7, #4]
 80187b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80187b8:	2b00      	cmp	r3, #0
 80187ba:	d003      	beq.n	80187c4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80187bc:	6878      	ldr	r0, [r7, #4]
 80187be:	f000 f8b3 	bl	8018928 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80187c2:	e039      	b.n	8018838 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80187c4:	7bfb      	ldrb	r3, [r7, #15]
 80187c6:	2b2a      	cmp	r3, #42	; 0x2a
 80187c8:	d109      	bne.n	80187de <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80187ca:	687b      	ldr	r3, [r7, #4]
 80187cc:	2200      	movs	r2, #0
 80187ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80187d0:	687b      	ldr	r3, [r7, #4]
 80187d2:	2228      	movs	r2, #40	; 0x28
 80187d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80187d8:	6878      	ldr	r0, [r7, #4]
 80187da:	f7ff f827 	bl	801782c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80187de:	687b      	ldr	r3, [r7, #4]
 80187e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80187e4:	b2db      	uxtb	r3, r3
 80187e6:	2b28      	cmp	r3, #40	; 0x28
 80187e8:	d111      	bne.n	801880e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80187ea:	687b      	ldr	r3, [r7, #4]
 80187ec:	4a15      	ldr	r2, [pc, #84]	; (8018844 <I2C_Slave_STOPF+0x25c>)
 80187ee:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80187f0:	687b      	ldr	r3, [r7, #4]
 80187f2:	2200      	movs	r2, #0
 80187f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80187f6:	687b      	ldr	r3, [r7, #4]
 80187f8:	2220      	movs	r2, #32
 80187fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80187fe:	687b      	ldr	r3, [r7, #4]
 8018800:	2200      	movs	r2, #0
 8018802:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8018806:	6878      	ldr	r0, [r7, #4]
 8018808:	f7ff f828 	bl	801785c <HAL_I2C_ListenCpltCallback>
}
 801880c:	e014      	b.n	8018838 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 801880e:	687b      	ldr	r3, [r7, #4]
 8018810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018812:	2b22      	cmp	r3, #34	; 0x22
 8018814:	d002      	beq.n	801881c <I2C_Slave_STOPF+0x234>
 8018816:	7bfb      	ldrb	r3, [r7, #15]
 8018818:	2b22      	cmp	r3, #34	; 0x22
 801881a:	d10d      	bne.n	8018838 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 801881c:	687b      	ldr	r3, [r7, #4]
 801881e:	2200      	movs	r2, #0
 8018820:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8018822:	687b      	ldr	r3, [r7, #4]
 8018824:	2220      	movs	r2, #32
 8018826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801882a:	687b      	ldr	r3, [r7, #4]
 801882c:	2200      	movs	r2, #0
 801882e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8018832:	6878      	ldr	r0, [r7, #4]
 8018834:	f7fe fffa 	bl	801782c <HAL_I2C_SlaveRxCpltCallback>
}
 8018838:	bf00      	nop
 801883a:	3710      	adds	r7, #16
 801883c:	46bd      	mov	sp, r7
 801883e:	bd80      	pop	{r7, pc}
 8018840:	08018e89 	.word	0x08018e89
 8018844:	ffff0000 	.word	0xffff0000

08018848 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8018848:	b580      	push	{r7, lr}
 801884a:	b084      	sub	sp, #16
 801884c:	af00      	add	r7, sp, #0
 801884e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8018850:	687b      	ldr	r3, [r7, #4]
 8018852:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018856:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8018858:	687b      	ldr	r3, [r7, #4]
 801885a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801885c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 801885e:	68bb      	ldr	r3, [r7, #8]
 8018860:	2b08      	cmp	r3, #8
 8018862:	d002      	beq.n	801886a <I2C_Slave_AF+0x22>
 8018864:	68bb      	ldr	r3, [r7, #8]
 8018866:	2b20      	cmp	r3, #32
 8018868:	d129      	bne.n	80188be <I2C_Slave_AF+0x76>
 801886a:	7bfb      	ldrb	r3, [r7, #15]
 801886c:	2b28      	cmp	r3, #40	; 0x28
 801886e:	d126      	bne.n	80188be <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8018870:	687b      	ldr	r3, [r7, #4]
 8018872:	4a2c      	ldr	r2, [pc, #176]	; (8018924 <I2C_Slave_AF+0xdc>)
 8018874:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8018876:	687b      	ldr	r3, [r7, #4]
 8018878:	681b      	ldr	r3, [r3, #0]
 801887a:	685a      	ldr	r2, [r3, #4]
 801887c:	687b      	ldr	r3, [r7, #4]
 801887e:	681b      	ldr	r3, [r3, #0]
 8018880:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8018884:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8018886:	687b      	ldr	r3, [r7, #4]
 8018888:	681b      	ldr	r3, [r3, #0]
 801888a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801888e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018890:	687b      	ldr	r3, [r7, #4]
 8018892:	681b      	ldr	r3, [r3, #0]
 8018894:	681a      	ldr	r2, [r3, #0]
 8018896:	687b      	ldr	r3, [r7, #4]
 8018898:	681b      	ldr	r3, [r3, #0]
 801889a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801889e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80188a0:	687b      	ldr	r3, [r7, #4]
 80188a2:	2200      	movs	r2, #0
 80188a4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80188a6:	687b      	ldr	r3, [r7, #4]
 80188a8:	2220      	movs	r2, #32
 80188aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80188ae:	687b      	ldr	r3, [r7, #4]
 80188b0:	2200      	movs	r2, #0
 80188b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80188b6:	6878      	ldr	r0, [r7, #4]
 80188b8:	f7fe ffd0 	bl	801785c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80188bc:	e02e      	b.n	801891c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80188be:	7bfb      	ldrb	r3, [r7, #15]
 80188c0:	2b21      	cmp	r3, #33	; 0x21
 80188c2:	d126      	bne.n	8018912 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80188c4:	687b      	ldr	r3, [r7, #4]
 80188c6:	4a17      	ldr	r2, [pc, #92]	; (8018924 <I2C_Slave_AF+0xdc>)
 80188c8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80188ca:	687b      	ldr	r3, [r7, #4]
 80188cc:	2221      	movs	r2, #33	; 0x21
 80188ce:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80188d0:	687b      	ldr	r3, [r7, #4]
 80188d2:	2220      	movs	r2, #32
 80188d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80188d8:	687b      	ldr	r3, [r7, #4]
 80188da:	2200      	movs	r2, #0
 80188dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80188e0:	687b      	ldr	r3, [r7, #4]
 80188e2:	681b      	ldr	r3, [r3, #0]
 80188e4:	685a      	ldr	r2, [r3, #4]
 80188e6:	687b      	ldr	r3, [r7, #4]
 80188e8:	681b      	ldr	r3, [r3, #0]
 80188ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80188ee:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80188f0:	687b      	ldr	r3, [r7, #4]
 80188f2:	681b      	ldr	r3, [r3, #0]
 80188f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80188f8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80188fa:	687b      	ldr	r3, [r7, #4]
 80188fc:	681b      	ldr	r3, [r3, #0]
 80188fe:	681a      	ldr	r2, [r3, #0]
 8018900:	687b      	ldr	r3, [r7, #4]
 8018902:	681b      	ldr	r3, [r3, #0]
 8018904:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018908:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 801890a:	6878      	ldr	r0, [r7, #4]
 801890c:	f7fe ff84 	bl	8017818 <HAL_I2C_SlaveTxCpltCallback>
}
 8018910:	e004      	b.n	801891c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8018912:	687b      	ldr	r3, [r7, #4]
 8018914:	681b      	ldr	r3, [r3, #0]
 8018916:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801891a:	615a      	str	r2, [r3, #20]
}
 801891c:	bf00      	nop
 801891e:	3710      	adds	r7, #16
 8018920:	46bd      	mov	sp, r7
 8018922:	bd80      	pop	{r7, pc}
 8018924:	ffff0000 	.word	0xffff0000

08018928 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8018928:	b580      	push	{r7, lr}
 801892a:	b084      	sub	sp, #16
 801892c:	af00      	add	r7, sp, #0
 801892e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8018930:	687b      	ldr	r3, [r7, #4]
 8018932:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018936:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8018938:	687b      	ldr	r3, [r7, #4]
 801893a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801893e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8018940:	7bbb      	ldrb	r3, [r7, #14]
 8018942:	2b10      	cmp	r3, #16
 8018944:	d002      	beq.n	801894c <I2C_ITError+0x24>
 8018946:	7bbb      	ldrb	r3, [r7, #14]
 8018948:	2b40      	cmp	r3, #64	; 0x40
 801894a:	d10a      	bne.n	8018962 <I2C_ITError+0x3a>
 801894c:	7bfb      	ldrb	r3, [r7, #15]
 801894e:	2b22      	cmp	r3, #34	; 0x22
 8018950:	d107      	bne.n	8018962 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8018952:	687b      	ldr	r3, [r7, #4]
 8018954:	681b      	ldr	r3, [r3, #0]
 8018956:	681a      	ldr	r2, [r3, #0]
 8018958:	687b      	ldr	r3, [r7, #4]
 801895a:	681b      	ldr	r3, [r3, #0]
 801895c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8018960:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8018962:	7bfb      	ldrb	r3, [r7, #15]
 8018964:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8018968:	2b28      	cmp	r3, #40	; 0x28
 801896a:	d107      	bne.n	801897c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 801896c:	687b      	ldr	r3, [r7, #4]
 801896e:	2200      	movs	r2, #0
 8018970:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8018972:	687b      	ldr	r3, [r7, #4]
 8018974:	2228      	movs	r2, #40	; 0x28
 8018976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 801897a:	e015      	b.n	80189a8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 801897c:	687b      	ldr	r3, [r7, #4]
 801897e:	681b      	ldr	r3, [r3, #0]
 8018980:	685b      	ldr	r3, [r3, #4]
 8018982:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018986:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801898a:	d00a      	beq.n	80189a2 <I2C_ITError+0x7a>
 801898c:	7bfb      	ldrb	r3, [r7, #15]
 801898e:	2b60      	cmp	r3, #96	; 0x60
 8018990:	d007      	beq.n	80189a2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8018992:	687b      	ldr	r3, [r7, #4]
 8018994:	2220      	movs	r2, #32
 8018996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801899a:	687b      	ldr	r3, [r7, #4]
 801899c:	2200      	movs	r2, #0
 801899e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80189a2:	687b      	ldr	r3, [r7, #4]
 80189a4:	2200      	movs	r2, #0
 80189a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80189a8:	687b      	ldr	r3, [r7, #4]
 80189aa:	681b      	ldr	r3, [r3, #0]
 80189ac:	685b      	ldr	r3, [r3, #4]
 80189ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80189b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80189b6:	d162      	bne.n	8018a7e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80189b8:	687b      	ldr	r3, [r7, #4]
 80189ba:	681b      	ldr	r3, [r3, #0]
 80189bc:	685a      	ldr	r2, [r3, #4]
 80189be:	687b      	ldr	r3, [r7, #4]
 80189c0:	681b      	ldr	r3, [r3, #0]
 80189c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80189c6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80189c8:	687b      	ldr	r3, [r7, #4]
 80189ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80189cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80189d0:	b2db      	uxtb	r3, r3
 80189d2:	2b01      	cmp	r3, #1
 80189d4:	d020      	beq.n	8018a18 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80189d6:	687b      	ldr	r3, [r7, #4]
 80189d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80189da:	4a6a      	ldr	r2, [pc, #424]	; (8018b84 <I2C_ITError+0x25c>)
 80189dc:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80189de:	687b      	ldr	r3, [r7, #4]
 80189e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80189e2:	4618      	mov	r0, r3
 80189e4:	f7fd fa5c 	bl	8015ea0 <HAL_DMA_Abort_IT>
 80189e8:	4603      	mov	r3, r0
 80189ea:	2b00      	cmp	r3, #0
 80189ec:	f000 8089 	beq.w	8018b02 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80189f0:	687b      	ldr	r3, [r7, #4]
 80189f2:	681b      	ldr	r3, [r3, #0]
 80189f4:	681a      	ldr	r2, [r3, #0]
 80189f6:	687b      	ldr	r3, [r7, #4]
 80189f8:	681b      	ldr	r3, [r3, #0]
 80189fa:	f022 0201 	bic.w	r2, r2, #1
 80189fe:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8018a00:	687b      	ldr	r3, [r7, #4]
 8018a02:	2220      	movs	r2, #32
 8018a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8018a08:	687b      	ldr	r3, [r7, #4]
 8018a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018a0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018a0e:	687a      	ldr	r2, [r7, #4]
 8018a10:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8018a12:	4610      	mov	r0, r2
 8018a14:	4798      	blx	r3
 8018a16:	e074      	b.n	8018b02 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8018a18:	687b      	ldr	r3, [r7, #4]
 8018a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018a1c:	4a59      	ldr	r2, [pc, #356]	; (8018b84 <I2C_ITError+0x25c>)
 8018a1e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8018a20:	687b      	ldr	r3, [r7, #4]
 8018a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018a24:	4618      	mov	r0, r3
 8018a26:	f7fd fa3b 	bl	8015ea0 <HAL_DMA_Abort_IT>
 8018a2a:	4603      	mov	r3, r0
 8018a2c:	2b00      	cmp	r3, #0
 8018a2e:	d068      	beq.n	8018b02 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8018a30:	687b      	ldr	r3, [r7, #4]
 8018a32:	681b      	ldr	r3, [r3, #0]
 8018a34:	695b      	ldr	r3, [r3, #20]
 8018a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018a3a:	2b40      	cmp	r3, #64	; 0x40
 8018a3c:	d10b      	bne.n	8018a56 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018a3e:	687b      	ldr	r3, [r7, #4]
 8018a40:	681b      	ldr	r3, [r3, #0]
 8018a42:	691a      	ldr	r2, [r3, #16]
 8018a44:	687b      	ldr	r3, [r7, #4]
 8018a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a48:	b2d2      	uxtb	r2, r2
 8018a4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8018a4c:	687b      	ldr	r3, [r7, #4]
 8018a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a50:	1c5a      	adds	r2, r3, #1
 8018a52:	687b      	ldr	r3, [r7, #4]
 8018a54:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8018a56:	687b      	ldr	r3, [r7, #4]
 8018a58:	681b      	ldr	r3, [r3, #0]
 8018a5a:	681a      	ldr	r2, [r3, #0]
 8018a5c:	687b      	ldr	r3, [r7, #4]
 8018a5e:	681b      	ldr	r3, [r3, #0]
 8018a60:	f022 0201 	bic.w	r2, r2, #1
 8018a64:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8018a66:	687b      	ldr	r3, [r7, #4]
 8018a68:	2220      	movs	r2, #32
 8018a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8018a6e:	687b      	ldr	r3, [r7, #4]
 8018a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018a72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018a74:	687a      	ldr	r2, [r7, #4]
 8018a76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8018a78:	4610      	mov	r0, r2
 8018a7a:	4798      	blx	r3
 8018a7c:	e041      	b.n	8018b02 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8018a7e:	687b      	ldr	r3, [r7, #4]
 8018a80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018a84:	b2db      	uxtb	r3, r3
 8018a86:	2b60      	cmp	r3, #96	; 0x60
 8018a88:	d125      	bne.n	8018ad6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8018a8a:	687b      	ldr	r3, [r7, #4]
 8018a8c:	2220      	movs	r2, #32
 8018a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8018a92:	687b      	ldr	r3, [r7, #4]
 8018a94:	2200      	movs	r2, #0
 8018a96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8018a98:	687b      	ldr	r3, [r7, #4]
 8018a9a:	681b      	ldr	r3, [r3, #0]
 8018a9c:	695b      	ldr	r3, [r3, #20]
 8018a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018aa2:	2b40      	cmp	r3, #64	; 0x40
 8018aa4:	d10b      	bne.n	8018abe <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018aa6:	687b      	ldr	r3, [r7, #4]
 8018aa8:	681b      	ldr	r3, [r3, #0]
 8018aaa:	691a      	ldr	r2, [r3, #16]
 8018aac:	687b      	ldr	r3, [r7, #4]
 8018aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ab0:	b2d2      	uxtb	r2, r2
 8018ab2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8018ab4:	687b      	ldr	r3, [r7, #4]
 8018ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ab8:	1c5a      	adds	r2, r3, #1
 8018aba:	687b      	ldr	r3, [r7, #4]
 8018abc:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8018abe:	687b      	ldr	r3, [r7, #4]
 8018ac0:	681b      	ldr	r3, [r3, #0]
 8018ac2:	681a      	ldr	r2, [r3, #0]
 8018ac4:	687b      	ldr	r3, [r7, #4]
 8018ac6:	681b      	ldr	r3, [r3, #0]
 8018ac8:	f022 0201 	bic.w	r2, r2, #1
 8018acc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8018ace:	6878      	ldr	r0, [r7, #4]
 8018ad0:	f7fe feec 	bl	80178ac <HAL_I2C_AbortCpltCallback>
 8018ad4:	e015      	b.n	8018b02 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8018ad6:	687b      	ldr	r3, [r7, #4]
 8018ad8:	681b      	ldr	r3, [r3, #0]
 8018ada:	695b      	ldr	r3, [r3, #20]
 8018adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018ae0:	2b40      	cmp	r3, #64	; 0x40
 8018ae2:	d10b      	bne.n	8018afc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018ae4:	687b      	ldr	r3, [r7, #4]
 8018ae6:	681b      	ldr	r3, [r3, #0]
 8018ae8:	691a      	ldr	r2, [r3, #16]
 8018aea:	687b      	ldr	r3, [r7, #4]
 8018aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018aee:	b2d2      	uxtb	r2, r2
 8018af0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8018af2:	687b      	ldr	r3, [r7, #4]
 8018af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018af6:	1c5a      	adds	r2, r3, #1
 8018af8:	687b      	ldr	r3, [r7, #4]
 8018afa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8018afc:	6878      	ldr	r0, [r7, #4]
 8018afe:	f7fe fecb 	bl	8017898 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8018b02:	687b      	ldr	r3, [r7, #4]
 8018b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018b06:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8018b08:	68bb      	ldr	r3, [r7, #8]
 8018b0a:	f003 0301 	and.w	r3, r3, #1
 8018b0e:	2b00      	cmp	r3, #0
 8018b10:	d10e      	bne.n	8018b30 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8018b12:	68bb      	ldr	r3, [r7, #8]
 8018b14:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8018b18:	2b00      	cmp	r3, #0
 8018b1a:	d109      	bne.n	8018b30 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8018b1c:	68bb      	ldr	r3, [r7, #8]
 8018b1e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8018b22:	2b00      	cmp	r3, #0
 8018b24:	d104      	bne.n	8018b30 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8018b26:	68bb      	ldr	r3, [r7, #8]
 8018b28:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8018b2c:	2b00      	cmp	r3, #0
 8018b2e:	d007      	beq.n	8018b40 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8018b30:	687b      	ldr	r3, [r7, #4]
 8018b32:	681b      	ldr	r3, [r3, #0]
 8018b34:	685a      	ldr	r2, [r3, #4]
 8018b36:	687b      	ldr	r3, [r7, #4]
 8018b38:	681b      	ldr	r3, [r3, #0]
 8018b3a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8018b3e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8018b40:	687b      	ldr	r3, [r7, #4]
 8018b42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018b46:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8018b48:	687b      	ldr	r3, [r7, #4]
 8018b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018b4c:	f003 0304 	and.w	r3, r3, #4
 8018b50:	2b04      	cmp	r3, #4
 8018b52:	d113      	bne.n	8018b7c <I2C_ITError+0x254>
 8018b54:	7bfb      	ldrb	r3, [r7, #15]
 8018b56:	2b28      	cmp	r3, #40	; 0x28
 8018b58:	d110      	bne.n	8018b7c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8018b5a:	687b      	ldr	r3, [r7, #4]
 8018b5c:	4a0a      	ldr	r2, [pc, #40]	; (8018b88 <I2C_ITError+0x260>)
 8018b5e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8018b60:	687b      	ldr	r3, [r7, #4]
 8018b62:	2200      	movs	r2, #0
 8018b64:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8018b66:	687b      	ldr	r3, [r7, #4]
 8018b68:	2220      	movs	r2, #32
 8018b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8018b6e:	687b      	ldr	r3, [r7, #4]
 8018b70:	2200      	movs	r2, #0
 8018b72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8018b76:	6878      	ldr	r0, [r7, #4]
 8018b78:	f7fe fe70 	bl	801785c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8018b7c:	bf00      	nop
 8018b7e:	3710      	adds	r7, #16
 8018b80:	46bd      	mov	sp, r7
 8018b82:	bd80      	pop	{r7, pc}
 8018b84:	08018e89 	.word	0x08018e89
 8018b88:	ffff0000 	.word	0xffff0000

08018b8c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8018b8c:	b580      	push	{r7, lr}
 8018b8e:	b088      	sub	sp, #32
 8018b90:	af02      	add	r7, sp, #8
 8018b92:	60f8      	str	r0, [r7, #12]
 8018b94:	4608      	mov	r0, r1
 8018b96:	4611      	mov	r1, r2
 8018b98:	461a      	mov	r2, r3
 8018b9a:	4603      	mov	r3, r0
 8018b9c:	817b      	strh	r3, [r7, #10]
 8018b9e:	460b      	mov	r3, r1
 8018ba0:	813b      	strh	r3, [r7, #8]
 8018ba2:	4613      	mov	r3, r2
 8018ba4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8018ba6:	68fb      	ldr	r3, [r7, #12]
 8018ba8:	681b      	ldr	r3, [r3, #0]
 8018baa:	681a      	ldr	r2, [r3, #0]
 8018bac:	68fb      	ldr	r3, [r7, #12]
 8018bae:	681b      	ldr	r3, [r3, #0]
 8018bb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8018bb4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8018bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018bb8:	9300      	str	r3, [sp, #0]
 8018bba:	6a3b      	ldr	r3, [r7, #32]
 8018bbc:	2200      	movs	r2, #0
 8018bbe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8018bc2:	68f8      	ldr	r0, [r7, #12]
 8018bc4:	f000 fa08 	bl	8018fd8 <I2C_WaitOnFlagUntilTimeout>
 8018bc8:	4603      	mov	r3, r0
 8018bca:	2b00      	cmp	r3, #0
 8018bcc:	d00d      	beq.n	8018bea <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8018bce:	68fb      	ldr	r3, [r7, #12]
 8018bd0:	681b      	ldr	r3, [r3, #0]
 8018bd2:	681b      	ldr	r3, [r3, #0]
 8018bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018bd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018bdc:	d103      	bne.n	8018be6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8018bde:	68fb      	ldr	r3, [r7, #12]
 8018be0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018be4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8018be6:	2303      	movs	r3, #3
 8018be8:	e05f      	b.n	8018caa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8018bea:	897b      	ldrh	r3, [r7, #10]
 8018bec:	b2db      	uxtb	r3, r3
 8018bee:	461a      	mov	r2, r3
 8018bf0:	68fb      	ldr	r3, [r7, #12]
 8018bf2:	681b      	ldr	r3, [r3, #0]
 8018bf4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8018bf8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8018bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018bfc:	6a3a      	ldr	r2, [r7, #32]
 8018bfe:	492d      	ldr	r1, [pc, #180]	; (8018cb4 <I2C_RequestMemoryWrite+0x128>)
 8018c00:	68f8      	ldr	r0, [r7, #12]
 8018c02:	f000 fa40 	bl	8019086 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8018c06:	4603      	mov	r3, r0
 8018c08:	2b00      	cmp	r3, #0
 8018c0a:	d001      	beq.n	8018c10 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8018c0c:	2301      	movs	r3, #1
 8018c0e:	e04c      	b.n	8018caa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018c10:	2300      	movs	r3, #0
 8018c12:	617b      	str	r3, [r7, #20]
 8018c14:	68fb      	ldr	r3, [r7, #12]
 8018c16:	681b      	ldr	r3, [r3, #0]
 8018c18:	695b      	ldr	r3, [r3, #20]
 8018c1a:	617b      	str	r3, [r7, #20]
 8018c1c:	68fb      	ldr	r3, [r7, #12]
 8018c1e:	681b      	ldr	r3, [r3, #0]
 8018c20:	699b      	ldr	r3, [r3, #24]
 8018c22:	617b      	str	r3, [r7, #20]
 8018c24:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8018c26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018c28:	6a39      	ldr	r1, [r7, #32]
 8018c2a:	68f8      	ldr	r0, [r7, #12]
 8018c2c:	f000 faaa 	bl	8019184 <I2C_WaitOnTXEFlagUntilTimeout>
 8018c30:	4603      	mov	r3, r0
 8018c32:	2b00      	cmp	r3, #0
 8018c34:	d00d      	beq.n	8018c52 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8018c36:	68fb      	ldr	r3, [r7, #12]
 8018c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018c3a:	2b04      	cmp	r3, #4
 8018c3c:	d107      	bne.n	8018c4e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8018c3e:	68fb      	ldr	r3, [r7, #12]
 8018c40:	681b      	ldr	r3, [r3, #0]
 8018c42:	681a      	ldr	r2, [r3, #0]
 8018c44:	68fb      	ldr	r3, [r7, #12]
 8018c46:	681b      	ldr	r3, [r3, #0]
 8018c48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018c4c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8018c4e:	2301      	movs	r3, #1
 8018c50:	e02b      	b.n	8018caa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8018c52:	88fb      	ldrh	r3, [r7, #6]
 8018c54:	2b01      	cmp	r3, #1
 8018c56:	d105      	bne.n	8018c64 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8018c58:	893b      	ldrh	r3, [r7, #8]
 8018c5a:	b2da      	uxtb	r2, r3
 8018c5c:	68fb      	ldr	r3, [r7, #12]
 8018c5e:	681b      	ldr	r3, [r3, #0]
 8018c60:	611a      	str	r2, [r3, #16]
 8018c62:	e021      	b.n	8018ca8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8018c64:	893b      	ldrh	r3, [r7, #8]
 8018c66:	0a1b      	lsrs	r3, r3, #8
 8018c68:	b29b      	uxth	r3, r3
 8018c6a:	b2da      	uxtb	r2, r3
 8018c6c:	68fb      	ldr	r3, [r7, #12]
 8018c6e:	681b      	ldr	r3, [r3, #0]
 8018c70:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8018c72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018c74:	6a39      	ldr	r1, [r7, #32]
 8018c76:	68f8      	ldr	r0, [r7, #12]
 8018c78:	f000 fa84 	bl	8019184 <I2C_WaitOnTXEFlagUntilTimeout>
 8018c7c:	4603      	mov	r3, r0
 8018c7e:	2b00      	cmp	r3, #0
 8018c80:	d00d      	beq.n	8018c9e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8018c82:	68fb      	ldr	r3, [r7, #12]
 8018c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018c86:	2b04      	cmp	r3, #4
 8018c88:	d107      	bne.n	8018c9a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8018c8a:	68fb      	ldr	r3, [r7, #12]
 8018c8c:	681b      	ldr	r3, [r3, #0]
 8018c8e:	681a      	ldr	r2, [r3, #0]
 8018c90:	68fb      	ldr	r3, [r7, #12]
 8018c92:	681b      	ldr	r3, [r3, #0]
 8018c94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018c98:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8018c9a:	2301      	movs	r3, #1
 8018c9c:	e005      	b.n	8018caa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8018c9e:	893b      	ldrh	r3, [r7, #8]
 8018ca0:	b2da      	uxtb	r2, r3
 8018ca2:	68fb      	ldr	r3, [r7, #12]
 8018ca4:	681b      	ldr	r3, [r3, #0]
 8018ca6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8018ca8:	2300      	movs	r3, #0
}
 8018caa:	4618      	mov	r0, r3
 8018cac:	3718      	adds	r7, #24
 8018cae:	46bd      	mov	sp, r7
 8018cb0:	bd80      	pop	{r7, pc}
 8018cb2:	bf00      	nop
 8018cb4:	00010002 	.word	0x00010002

08018cb8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8018cb8:	b580      	push	{r7, lr}
 8018cba:	b088      	sub	sp, #32
 8018cbc:	af02      	add	r7, sp, #8
 8018cbe:	60f8      	str	r0, [r7, #12]
 8018cc0:	4608      	mov	r0, r1
 8018cc2:	4611      	mov	r1, r2
 8018cc4:	461a      	mov	r2, r3
 8018cc6:	4603      	mov	r3, r0
 8018cc8:	817b      	strh	r3, [r7, #10]
 8018cca:	460b      	mov	r3, r1
 8018ccc:	813b      	strh	r3, [r7, #8]
 8018cce:	4613      	mov	r3, r2
 8018cd0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018cd2:	68fb      	ldr	r3, [r7, #12]
 8018cd4:	681b      	ldr	r3, [r3, #0]
 8018cd6:	681a      	ldr	r2, [r3, #0]
 8018cd8:	68fb      	ldr	r3, [r7, #12]
 8018cda:	681b      	ldr	r3, [r3, #0]
 8018cdc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8018ce0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8018ce2:	68fb      	ldr	r3, [r7, #12]
 8018ce4:	681b      	ldr	r3, [r3, #0]
 8018ce6:	681a      	ldr	r2, [r3, #0]
 8018ce8:	68fb      	ldr	r3, [r7, #12]
 8018cea:	681b      	ldr	r3, [r3, #0]
 8018cec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8018cf0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8018cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018cf4:	9300      	str	r3, [sp, #0]
 8018cf6:	6a3b      	ldr	r3, [r7, #32]
 8018cf8:	2200      	movs	r2, #0
 8018cfa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8018cfe:	68f8      	ldr	r0, [r7, #12]
 8018d00:	f000 f96a 	bl	8018fd8 <I2C_WaitOnFlagUntilTimeout>
 8018d04:	4603      	mov	r3, r0
 8018d06:	2b00      	cmp	r3, #0
 8018d08:	d00d      	beq.n	8018d26 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8018d0a:	68fb      	ldr	r3, [r7, #12]
 8018d0c:	681b      	ldr	r3, [r3, #0]
 8018d0e:	681b      	ldr	r3, [r3, #0]
 8018d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018d14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018d18:	d103      	bne.n	8018d22 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8018d1a:	68fb      	ldr	r3, [r7, #12]
 8018d1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018d20:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8018d22:	2303      	movs	r3, #3
 8018d24:	e0aa      	b.n	8018e7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8018d26:	897b      	ldrh	r3, [r7, #10]
 8018d28:	b2db      	uxtb	r3, r3
 8018d2a:	461a      	mov	r2, r3
 8018d2c:	68fb      	ldr	r3, [r7, #12]
 8018d2e:	681b      	ldr	r3, [r3, #0]
 8018d30:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8018d34:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8018d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d38:	6a3a      	ldr	r2, [r7, #32]
 8018d3a:	4952      	ldr	r1, [pc, #328]	; (8018e84 <I2C_RequestMemoryRead+0x1cc>)
 8018d3c:	68f8      	ldr	r0, [r7, #12]
 8018d3e:	f000 f9a2 	bl	8019086 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8018d42:	4603      	mov	r3, r0
 8018d44:	2b00      	cmp	r3, #0
 8018d46:	d001      	beq.n	8018d4c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8018d48:	2301      	movs	r3, #1
 8018d4a:	e097      	b.n	8018e7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018d4c:	2300      	movs	r3, #0
 8018d4e:	617b      	str	r3, [r7, #20]
 8018d50:	68fb      	ldr	r3, [r7, #12]
 8018d52:	681b      	ldr	r3, [r3, #0]
 8018d54:	695b      	ldr	r3, [r3, #20]
 8018d56:	617b      	str	r3, [r7, #20]
 8018d58:	68fb      	ldr	r3, [r7, #12]
 8018d5a:	681b      	ldr	r3, [r3, #0]
 8018d5c:	699b      	ldr	r3, [r3, #24]
 8018d5e:	617b      	str	r3, [r7, #20]
 8018d60:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8018d62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018d64:	6a39      	ldr	r1, [r7, #32]
 8018d66:	68f8      	ldr	r0, [r7, #12]
 8018d68:	f000 fa0c 	bl	8019184 <I2C_WaitOnTXEFlagUntilTimeout>
 8018d6c:	4603      	mov	r3, r0
 8018d6e:	2b00      	cmp	r3, #0
 8018d70:	d00d      	beq.n	8018d8e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8018d72:	68fb      	ldr	r3, [r7, #12]
 8018d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018d76:	2b04      	cmp	r3, #4
 8018d78:	d107      	bne.n	8018d8a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8018d7a:	68fb      	ldr	r3, [r7, #12]
 8018d7c:	681b      	ldr	r3, [r3, #0]
 8018d7e:	681a      	ldr	r2, [r3, #0]
 8018d80:	68fb      	ldr	r3, [r7, #12]
 8018d82:	681b      	ldr	r3, [r3, #0]
 8018d84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018d88:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8018d8a:	2301      	movs	r3, #1
 8018d8c:	e076      	b.n	8018e7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8018d8e:	88fb      	ldrh	r3, [r7, #6]
 8018d90:	2b01      	cmp	r3, #1
 8018d92:	d105      	bne.n	8018da0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8018d94:	893b      	ldrh	r3, [r7, #8]
 8018d96:	b2da      	uxtb	r2, r3
 8018d98:	68fb      	ldr	r3, [r7, #12]
 8018d9a:	681b      	ldr	r3, [r3, #0]
 8018d9c:	611a      	str	r2, [r3, #16]
 8018d9e:	e021      	b.n	8018de4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8018da0:	893b      	ldrh	r3, [r7, #8]
 8018da2:	0a1b      	lsrs	r3, r3, #8
 8018da4:	b29b      	uxth	r3, r3
 8018da6:	b2da      	uxtb	r2, r3
 8018da8:	68fb      	ldr	r3, [r7, #12]
 8018daa:	681b      	ldr	r3, [r3, #0]
 8018dac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8018dae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018db0:	6a39      	ldr	r1, [r7, #32]
 8018db2:	68f8      	ldr	r0, [r7, #12]
 8018db4:	f000 f9e6 	bl	8019184 <I2C_WaitOnTXEFlagUntilTimeout>
 8018db8:	4603      	mov	r3, r0
 8018dba:	2b00      	cmp	r3, #0
 8018dbc:	d00d      	beq.n	8018dda <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8018dbe:	68fb      	ldr	r3, [r7, #12]
 8018dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018dc2:	2b04      	cmp	r3, #4
 8018dc4:	d107      	bne.n	8018dd6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8018dc6:	68fb      	ldr	r3, [r7, #12]
 8018dc8:	681b      	ldr	r3, [r3, #0]
 8018dca:	681a      	ldr	r2, [r3, #0]
 8018dcc:	68fb      	ldr	r3, [r7, #12]
 8018dce:	681b      	ldr	r3, [r3, #0]
 8018dd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018dd4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8018dd6:	2301      	movs	r3, #1
 8018dd8:	e050      	b.n	8018e7c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8018dda:	893b      	ldrh	r3, [r7, #8]
 8018ddc:	b2da      	uxtb	r2, r3
 8018dde:	68fb      	ldr	r3, [r7, #12]
 8018de0:	681b      	ldr	r3, [r3, #0]
 8018de2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8018de4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018de6:	6a39      	ldr	r1, [r7, #32]
 8018de8:	68f8      	ldr	r0, [r7, #12]
 8018dea:	f000 f9cb 	bl	8019184 <I2C_WaitOnTXEFlagUntilTimeout>
 8018dee:	4603      	mov	r3, r0
 8018df0:	2b00      	cmp	r3, #0
 8018df2:	d00d      	beq.n	8018e10 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8018df4:	68fb      	ldr	r3, [r7, #12]
 8018df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018df8:	2b04      	cmp	r3, #4
 8018dfa:	d107      	bne.n	8018e0c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8018dfc:	68fb      	ldr	r3, [r7, #12]
 8018dfe:	681b      	ldr	r3, [r3, #0]
 8018e00:	681a      	ldr	r2, [r3, #0]
 8018e02:	68fb      	ldr	r3, [r7, #12]
 8018e04:	681b      	ldr	r3, [r3, #0]
 8018e06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018e0a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8018e0c:	2301      	movs	r3, #1
 8018e0e:	e035      	b.n	8018e7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8018e10:	68fb      	ldr	r3, [r7, #12]
 8018e12:	681b      	ldr	r3, [r3, #0]
 8018e14:	681a      	ldr	r2, [r3, #0]
 8018e16:	68fb      	ldr	r3, [r7, #12]
 8018e18:	681b      	ldr	r3, [r3, #0]
 8018e1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8018e1e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8018e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e22:	9300      	str	r3, [sp, #0]
 8018e24:	6a3b      	ldr	r3, [r7, #32]
 8018e26:	2200      	movs	r2, #0
 8018e28:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8018e2c:	68f8      	ldr	r0, [r7, #12]
 8018e2e:	f000 f8d3 	bl	8018fd8 <I2C_WaitOnFlagUntilTimeout>
 8018e32:	4603      	mov	r3, r0
 8018e34:	2b00      	cmp	r3, #0
 8018e36:	d00d      	beq.n	8018e54 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8018e38:	68fb      	ldr	r3, [r7, #12]
 8018e3a:	681b      	ldr	r3, [r3, #0]
 8018e3c:	681b      	ldr	r3, [r3, #0]
 8018e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018e42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018e46:	d103      	bne.n	8018e50 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8018e48:	68fb      	ldr	r3, [r7, #12]
 8018e4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018e4e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8018e50:	2303      	movs	r3, #3
 8018e52:	e013      	b.n	8018e7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8018e54:	897b      	ldrh	r3, [r7, #10]
 8018e56:	b2db      	uxtb	r3, r3
 8018e58:	f043 0301 	orr.w	r3, r3, #1
 8018e5c:	b2da      	uxtb	r2, r3
 8018e5e:	68fb      	ldr	r3, [r7, #12]
 8018e60:	681b      	ldr	r3, [r3, #0]
 8018e62:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8018e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e66:	6a3a      	ldr	r2, [r7, #32]
 8018e68:	4906      	ldr	r1, [pc, #24]	; (8018e84 <I2C_RequestMemoryRead+0x1cc>)
 8018e6a:	68f8      	ldr	r0, [r7, #12]
 8018e6c:	f000 f90b 	bl	8019086 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8018e70:	4603      	mov	r3, r0
 8018e72:	2b00      	cmp	r3, #0
 8018e74:	d001      	beq.n	8018e7a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8018e76:	2301      	movs	r3, #1
 8018e78:	e000      	b.n	8018e7c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8018e7a:	2300      	movs	r3, #0
}
 8018e7c:	4618      	mov	r0, r3
 8018e7e:	3718      	adds	r7, #24
 8018e80:	46bd      	mov	sp, r7
 8018e82:	bd80      	pop	{r7, pc}
 8018e84:	00010002 	.word	0x00010002

08018e88 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8018e88:	b580      	push	{r7, lr}
 8018e8a:	b086      	sub	sp, #24
 8018e8c:	af00      	add	r7, sp, #0
 8018e8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8018e90:	2300      	movs	r3, #0
 8018e92:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8018e94:	687b      	ldr	r3, [r7, #4]
 8018e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018e98:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8018e9a:	697b      	ldr	r3, [r7, #20]
 8018e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018ea0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8018ea2:	4b4b      	ldr	r3, [pc, #300]	; (8018fd0 <I2C_DMAAbort+0x148>)
 8018ea4:	681b      	ldr	r3, [r3, #0]
 8018ea6:	08db      	lsrs	r3, r3, #3
 8018ea8:	4a4a      	ldr	r2, [pc, #296]	; (8018fd4 <I2C_DMAAbort+0x14c>)
 8018eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8018eae:	0a1a      	lsrs	r2, r3, #8
 8018eb0:	4613      	mov	r3, r2
 8018eb2:	009b      	lsls	r3, r3, #2
 8018eb4:	4413      	add	r3, r2
 8018eb6:	00da      	lsls	r2, r3, #3
 8018eb8:	1ad3      	subs	r3, r2, r3
 8018eba:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8018ebc:	68fb      	ldr	r3, [r7, #12]
 8018ebe:	2b00      	cmp	r3, #0
 8018ec0:	d106      	bne.n	8018ed0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8018ec2:	697b      	ldr	r3, [r7, #20]
 8018ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018ec6:	f043 0220 	orr.w	r2, r3, #32
 8018eca:	697b      	ldr	r3, [r7, #20]
 8018ecc:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8018ece:	e00a      	b.n	8018ee6 <I2C_DMAAbort+0x5e>
    }
    count--;
 8018ed0:	68fb      	ldr	r3, [r7, #12]
 8018ed2:	3b01      	subs	r3, #1
 8018ed4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8018ed6:	697b      	ldr	r3, [r7, #20]
 8018ed8:	681b      	ldr	r3, [r3, #0]
 8018eda:	681b      	ldr	r3, [r3, #0]
 8018edc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8018ee0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018ee4:	d0ea      	beq.n	8018ebc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8018ee6:	697b      	ldr	r3, [r7, #20]
 8018ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018eea:	2b00      	cmp	r3, #0
 8018eec:	d003      	beq.n	8018ef6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8018eee:	697b      	ldr	r3, [r7, #20]
 8018ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018ef2:	2200      	movs	r2, #0
 8018ef4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8018ef6:	697b      	ldr	r3, [r7, #20]
 8018ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018efa:	2b00      	cmp	r3, #0
 8018efc:	d003      	beq.n	8018f06 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8018efe:	697b      	ldr	r3, [r7, #20]
 8018f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018f02:	2200      	movs	r2, #0
 8018f04:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018f06:	697b      	ldr	r3, [r7, #20]
 8018f08:	681b      	ldr	r3, [r3, #0]
 8018f0a:	681a      	ldr	r2, [r3, #0]
 8018f0c:	697b      	ldr	r3, [r7, #20]
 8018f0e:	681b      	ldr	r3, [r3, #0]
 8018f10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018f14:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8018f16:	697b      	ldr	r3, [r7, #20]
 8018f18:	2200      	movs	r2, #0
 8018f1a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8018f1c:	697b      	ldr	r3, [r7, #20]
 8018f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018f20:	2b00      	cmp	r3, #0
 8018f22:	d003      	beq.n	8018f2c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8018f24:	697b      	ldr	r3, [r7, #20]
 8018f26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018f28:	2200      	movs	r2, #0
 8018f2a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8018f2c:	697b      	ldr	r3, [r7, #20]
 8018f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018f30:	2b00      	cmp	r3, #0
 8018f32:	d003      	beq.n	8018f3c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8018f34:	697b      	ldr	r3, [r7, #20]
 8018f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018f38:	2200      	movs	r2, #0
 8018f3a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8018f3c:	697b      	ldr	r3, [r7, #20]
 8018f3e:	681b      	ldr	r3, [r3, #0]
 8018f40:	681a      	ldr	r2, [r3, #0]
 8018f42:	697b      	ldr	r3, [r7, #20]
 8018f44:	681b      	ldr	r3, [r3, #0]
 8018f46:	f022 0201 	bic.w	r2, r2, #1
 8018f4a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8018f4c:	697b      	ldr	r3, [r7, #20]
 8018f4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018f52:	b2db      	uxtb	r3, r3
 8018f54:	2b60      	cmp	r3, #96	; 0x60
 8018f56:	d10e      	bne.n	8018f76 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8018f58:	697b      	ldr	r3, [r7, #20]
 8018f5a:	2220      	movs	r2, #32
 8018f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8018f60:	697b      	ldr	r3, [r7, #20]
 8018f62:	2200      	movs	r2, #0
 8018f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8018f68:	697b      	ldr	r3, [r7, #20]
 8018f6a:	2200      	movs	r2, #0
 8018f6c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8018f6e:	6978      	ldr	r0, [r7, #20]
 8018f70:	f7fe fc9c 	bl	80178ac <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8018f74:	e027      	b.n	8018fc6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8018f76:	7cfb      	ldrb	r3, [r7, #19]
 8018f78:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8018f7c:	2b28      	cmp	r3, #40	; 0x28
 8018f7e:	d117      	bne.n	8018fb0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8018f80:	697b      	ldr	r3, [r7, #20]
 8018f82:	681b      	ldr	r3, [r3, #0]
 8018f84:	681a      	ldr	r2, [r3, #0]
 8018f86:	697b      	ldr	r3, [r7, #20]
 8018f88:	681b      	ldr	r3, [r3, #0]
 8018f8a:	f042 0201 	orr.w	r2, r2, #1
 8018f8e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018f90:	697b      	ldr	r3, [r7, #20]
 8018f92:	681b      	ldr	r3, [r3, #0]
 8018f94:	681a      	ldr	r2, [r3, #0]
 8018f96:	697b      	ldr	r3, [r7, #20]
 8018f98:	681b      	ldr	r3, [r3, #0]
 8018f9a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8018f9e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8018fa0:	697b      	ldr	r3, [r7, #20]
 8018fa2:	2200      	movs	r2, #0
 8018fa4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8018fa6:	697b      	ldr	r3, [r7, #20]
 8018fa8:	2228      	movs	r2, #40	; 0x28
 8018faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8018fae:	e007      	b.n	8018fc0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8018fb0:	697b      	ldr	r3, [r7, #20]
 8018fb2:	2220      	movs	r2, #32
 8018fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8018fb8:	697b      	ldr	r3, [r7, #20]
 8018fba:	2200      	movs	r2, #0
 8018fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8018fc0:	6978      	ldr	r0, [r7, #20]
 8018fc2:	f7fe fc69 	bl	8017898 <HAL_I2C_ErrorCallback>
}
 8018fc6:	bf00      	nop
 8018fc8:	3718      	adds	r7, #24
 8018fca:	46bd      	mov	sp, r7
 8018fcc:	bd80      	pop	{r7, pc}
 8018fce:	bf00      	nop
 8018fd0:	2000017c 	.word	0x2000017c
 8018fd4:	14f8b589 	.word	0x14f8b589

08018fd8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8018fd8:	b580      	push	{r7, lr}
 8018fda:	b084      	sub	sp, #16
 8018fdc:	af00      	add	r7, sp, #0
 8018fde:	60f8      	str	r0, [r7, #12]
 8018fe0:	60b9      	str	r1, [r7, #8]
 8018fe2:	603b      	str	r3, [r7, #0]
 8018fe4:	4613      	mov	r3, r2
 8018fe6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8018fe8:	e025      	b.n	8019036 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8018fea:	683b      	ldr	r3, [r7, #0]
 8018fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018ff0:	d021      	beq.n	8019036 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8018ff2:	f7fc fc9d 	bl	8015930 <HAL_GetTick>
 8018ff6:	4602      	mov	r2, r0
 8018ff8:	69bb      	ldr	r3, [r7, #24]
 8018ffa:	1ad3      	subs	r3, r2, r3
 8018ffc:	683a      	ldr	r2, [r7, #0]
 8018ffe:	429a      	cmp	r2, r3
 8019000:	d302      	bcc.n	8019008 <I2C_WaitOnFlagUntilTimeout+0x30>
 8019002:	683b      	ldr	r3, [r7, #0]
 8019004:	2b00      	cmp	r3, #0
 8019006:	d116      	bne.n	8019036 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8019008:	68fb      	ldr	r3, [r7, #12]
 801900a:	2200      	movs	r2, #0
 801900c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 801900e:	68fb      	ldr	r3, [r7, #12]
 8019010:	2220      	movs	r2, #32
 8019012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8019016:	68fb      	ldr	r3, [r7, #12]
 8019018:	2200      	movs	r2, #0
 801901a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 801901e:	68fb      	ldr	r3, [r7, #12]
 8019020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019022:	f043 0220 	orr.w	r2, r3, #32
 8019026:	68fb      	ldr	r3, [r7, #12]
 8019028:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801902a:	68fb      	ldr	r3, [r7, #12]
 801902c:	2200      	movs	r2, #0
 801902e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8019032:	2301      	movs	r3, #1
 8019034:	e023      	b.n	801907e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8019036:	68bb      	ldr	r3, [r7, #8]
 8019038:	0c1b      	lsrs	r3, r3, #16
 801903a:	b2db      	uxtb	r3, r3
 801903c:	2b01      	cmp	r3, #1
 801903e:	d10d      	bne.n	801905c <I2C_WaitOnFlagUntilTimeout+0x84>
 8019040:	68fb      	ldr	r3, [r7, #12]
 8019042:	681b      	ldr	r3, [r3, #0]
 8019044:	695b      	ldr	r3, [r3, #20]
 8019046:	43da      	mvns	r2, r3
 8019048:	68bb      	ldr	r3, [r7, #8]
 801904a:	4013      	ands	r3, r2
 801904c:	b29b      	uxth	r3, r3
 801904e:	2b00      	cmp	r3, #0
 8019050:	bf0c      	ite	eq
 8019052:	2301      	moveq	r3, #1
 8019054:	2300      	movne	r3, #0
 8019056:	b2db      	uxtb	r3, r3
 8019058:	461a      	mov	r2, r3
 801905a:	e00c      	b.n	8019076 <I2C_WaitOnFlagUntilTimeout+0x9e>
 801905c:	68fb      	ldr	r3, [r7, #12]
 801905e:	681b      	ldr	r3, [r3, #0]
 8019060:	699b      	ldr	r3, [r3, #24]
 8019062:	43da      	mvns	r2, r3
 8019064:	68bb      	ldr	r3, [r7, #8]
 8019066:	4013      	ands	r3, r2
 8019068:	b29b      	uxth	r3, r3
 801906a:	2b00      	cmp	r3, #0
 801906c:	bf0c      	ite	eq
 801906e:	2301      	moveq	r3, #1
 8019070:	2300      	movne	r3, #0
 8019072:	b2db      	uxtb	r3, r3
 8019074:	461a      	mov	r2, r3
 8019076:	79fb      	ldrb	r3, [r7, #7]
 8019078:	429a      	cmp	r2, r3
 801907a:	d0b6      	beq.n	8018fea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801907c:	2300      	movs	r3, #0
}
 801907e:	4618      	mov	r0, r3
 8019080:	3710      	adds	r7, #16
 8019082:	46bd      	mov	sp, r7
 8019084:	bd80      	pop	{r7, pc}

08019086 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8019086:	b580      	push	{r7, lr}
 8019088:	b084      	sub	sp, #16
 801908a:	af00      	add	r7, sp, #0
 801908c:	60f8      	str	r0, [r7, #12]
 801908e:	60b9      	str	r1, [r7, #8]
 8019090:	607a      	str	r2, [r7, #4]
 8019092:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8019094:	e051      	b.n	801913a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8019096:	68fb      	ldr	r3, [r7, #12]
 8019098:	681b      	ldr	r3, [r3, #0]
 801909a:	695b      	ldr	r3, [r3, #20]
 801909c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80190a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80190a4:	d123      	bne.n	80190ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80190a6:	68fb      	ldr	r3, [r7, #12]
 80190a8:	681b      	ldr	r3, [r3, #0]
 80190aa:	681a      	ldr	r2, [r3, #0]
 80190ac:	68fb      	ldr	r3, [r7, #12]
 80190ae:	681b      	ldr	r3, [r3, #0]
 80190b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80190b4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80190b6:	68fb      	ldr	r3, [r7, #12]
 80190b8:	681b      	ldr	r3, [r3, #0]
 80190ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80190be:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80190c0:	68fb      	ldr	r3, [r7, #12]
 80190c2:	2200      	movs	r2, #0
 80190c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80190c6:	68fb      	ldr	r3, [r7, #12]
 80190c8:	2220      	movs	r2, #32
 80190ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80190ce:	68fb      	ldr	r3, [r7, #12]
 80190d0:	2200      	movs	r2, #0
 80190d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80190d6:	68fb      	ldr	r3, [r7, #12]
 80190d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80190da:	f043 0204 	orr.w	r2, r3, #4
 80190de:	68fb      	ldr	r3, [r7, #12]
 80190e0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80190e2:	68fb      	ldr	r3, [r7, #12]
 80190e4:	2200      	movs	r2, #0
 80190e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80190ea:	2301      	movs	r3, #1
 80190ec:	e046      	b.n	801917c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80190ee:	687b      	ldr	r3, [r7, #4]
 80190f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80190f4:	d021      	beq.n	801913a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80190f6:	f7fc fc1b 	bl	8015930 <HAL_GetTick>
 80190fa:	4602      	mov	r2, r0
 80190fc:	683b      	ldr	r3, [r7, #0]
 80190fe:	1ad3      	subs	r3, r2, r3
 8019100:	687a      	ldr	r2, [r7, #4]
 8019102:	429a      	cmp	r2, r3
 8019104:	d302      	bcc.n	801910c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8019106:	687b      	ldr	r3, [r7, #4]
 8019108:	2b00      	cmp	r3, #0
 801910a:	d116      	bne.n	801913a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801910c:	68fb      	ldr	r3, [r7, #12]
 801910e:	2200      	movs	r2, #0
 8019110:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8019112:	68fb      	ldr	r3, [r7, #12]
 8019114:	2220      	movs	r2, #32
 8019116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801911a:	68fb      	ldr	r3, [r7, #12]
 801911c:	2200      	movs	r2, #0
 801911e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8019122:	68fb      	ldr	r3, [r7, #12]
 8019124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019126:	f043 0220 	orr.w	r2, r3, #32
 801912a:	68fb      	ldr	r3, [r7, #12]
 801912c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801912e:	68fb      	ldr	r3, [r7, #12]
 8019130:	2200      	movs	r2, #0
 8019132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8019136:	2301      	movs	r3, #1
 8019138:	e020      	b.n	801917c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 801913a:	68bb      	ldr	r3, [r7, #8]
 801913c:	0c1b      	lsrs	r3, r3, #16
 801913e:	b2db      	uxtb	r3, r3
 8019140:	2b01      	cmp	r3, #1
 8019142:	d10c      	bne.n	801915e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8019144:	68fb      	ldr	r3, [r7, #12]
 8019146:	681b      	ldr	r3, [r3, #0]
 8019148:	695b      	ldr	r3, [r3, #20]
 801914a:	43da      	mvns	r2, r3
 801914c:	68bb      	ldr	r3, [r7, #8]
 801914e:	4013      	ands	r3, r2
 8019150:	b29b      	uxth	r3, r3
 8019152:	2b00      	cmp	r3, #0
 8019154:	bf14      	ite	ne
 8019156:	2301      	movne	r3, #1
 8019158:	2300      	moveq	r3, #0
 801915a:	b2db      	uxtb	r3, r3
 801915c:	e00b      	b.n	8019176 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 801915e:	68fb      	ldr	r3, [r7, #12]
 8019160:	681b      	ldr	r3, [r3, #0]
 8019162:	699b      	ldr	r3, [r3, #24]
 8019164:	43da      	mvns	r2, r3
 8019166:	68bb      	ldr	r3, [r7, #8]
 8019168:	4013      	ands	r3, r2
 801916a:	b29b      	uxth	r3, r3
 801916c:	2b00      	cmp	r3, #0
 801916e:	bf14      	ite	ne
 8019170:	2301      	movne	r3, #1
 8019172:	2300      	moveq	r3, #0
 8019174:	b2db      	uxtb	r3, r3
 8019176:	2b00      	cmp	r3, #0
 8019178:	d18d      	bne.n	8019096 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 801917a:	2300      	movs	r3, #0
}
 801917c:	4618      	mov	r0, r3
 801917e:	3710      	adds	r7, #16
 8019180:	46bd      	mov	sp, r7
 8019182:	bd80      	pop	{r7, pc}

08019184 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8019184:	b580      	push	{r7, lr}
 8019186:	b084      	sub	sp, #16
 8019188:	af00      	add	r7, sp, #0
 801918a:	60f8      	str	r0, [r7, #12]
 801918c:	60b9      	str	r1, [r7, #8]
 801918e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8019190:	e02d      	b.n	80191ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8019192:	68f8      	ldr	r0, [r7, #12]
 8019194:	f000 f900 	bl	8019398 <I2C_IsAcknowledgeFailed>
 8019198:	4603      	mov	r3, r0
 801919a:	2b00      	cmp	r3, #0
 801919c:	d001      	beq.n	80191a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 801919e:	2301      	movs	r3, #1
 80191a0:	e02d      	b.n	80191fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80191a2:	68bb      	ldr	r3, [r7, #8]
 80191a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80191a8:	d021      	beq.n	80191ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80191aa:	f7fc fbc1 	bl	8015930 <HAL_GetTick>
 80191ae:	4602      	mov	r2, r0
 80191b0:	687b      	ldr	r3, [r7, #4]
 80191b2:	1ad3      	subs	r3, r2, r3
 80191b4:	68ba      	ldr	r2, [r7, #8]
 80191b6:	429a      	cmp	r2, r3
 80191b8:	d302      	bcc.n	80191c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80191ba:	68bb      	ldr	r3, [r7, #8]
 80191bc:	2b00      	cmp	r3, #0
 80191be:	d116      	bne.n	80191ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80191c0:	68fb      	ldr	r3, [r7, #12]
 80191c2:	2200      	movs	r2, #0
 80191c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80191c6:	68fb      	ldr	r3, [r7, #12]
 80191c8:	2220      	movs	r2, #32
 80191ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80191ce:	68fb      	ldr	r3, [r7, #12]
 80191d0:	2200      	movs	r2, #0
 80191d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80191d6:	68fb      	ldr	r3, [r7, #12]
 80191d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80191da:	f043 0220 	orr.w	r2, r3, #32
 80191de:	68fb      	ldr	r3, [r7, #12]
 80191e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80191e2:	68fb      	ldr	r3, [r7, #12]
 80191e4:	2200      	movs	r2, #0
 80191e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80191ea:	2301      	movs	r3, #1
 80191ec:	e007      	b.n	80191fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80191ee:	68fb      	ldr	r3, [r7, #12]
 80191f0:	681b      	ldr	r3, [r3, #0]
 80191f2:	695b      	ldr	r3, [r3, #20]
 80191f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80191f8:	2b80      	cmp	r3, #128	; 0x80
 80191fa:	d1ca      	bne.n	8019192 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80191fc:	2300      	movs	r3, #0
}
 80191fe:	4618      	mov	r0, r3
 8019200:	3710      	adds	r7, #16
 8019202:	46bd      	mov	sp, r7
 8019204:	bd80      	pop	{r7, pc}

08019206 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8019206:	b580      	push	{r7, lr}
 8019208:	b084      	sub	sp, #16
 801920a:	af00      	add	r7, sp, #0
 801920c:	60f8      	str	r0, [r7, #12]
 801920e:	60b9      	str	r1, [r7, #8]
 8019210:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8019212:	e02d      	b.n	8019270 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8019214:	68f8      	ldr	r0, [r7, #12]
 8019216:	f000 f8bf 	bl	8019398 <I2C_IsAcknowledgeFailed>
 801921a:	4603      	mov	r3, r0
 801921c:	2b00      	cmp	r3, #0
 801921e:	d001      	beq.n	8019224 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8019220:	2301      	movs	r3, #1
 8019222:	e02d      	b.n	8019280 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8019224:	68bb      	ldr	r3, [r7, #8]
 8019226:	f1b3 3fff 	cmp.w	r3, #4294967295
 801922a:	d021      	beq.n	8019270 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801922c:	f7fc fb80 	bl	8015930 <HAL_GetTick>
 8019230:	4602      	mov	r2, r0
 8019232:	687b      	ldr	r3, [r7, #4]
 8019234:	1ad3      	subs	r3, r2, r3
 8019236:	68ba      	ldr	r2, [r7, #8]
 8019238:	429a      	cmp	r2, r3
 801923a:	d302      	bcc.n	8019242 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 801923c:	68bb      	ldr	r3, [r7, #8]
 801923e:	2b00      	cmp	r3, #0
 8019240:	d116      	bne.n	8019270 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8019242:	68fb      	ldr	r3, [r7, #12]
 8019244:	2200      	movs	r2, #0
 8019246:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8019248:	68fb      	ldr	r3, [r7, #12]
 801924a:	2220      	movs	r2, #32
 801924c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8019250:	68fb      	ldr	r3, [r7, #12]
 8019252:	2200      	movs	r2, #0
 8019254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8019258:	68fb      	ldr	r3, [r7, #12]
 801925a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801925c:	f043 0220 	orr.w	r2, r3, #32
 8019260:	68fb      	ldr	r3, [r7, #12]
 8019262:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8019264:	68fb      	ldr	r3, [r7, #12]
 8019266:	2200      	movs	r2, #0
 8019268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801926c:	2301      	movs	r3, #1
 801926e:	e007      	b.n	8019280 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8019270:	68fb      	ldr	r3, [r7, #12]
 8019272:	681b      	ldr	r3, [r3, #0]
 8019274:	695b      	ldr	r3, [r3, #20]
 8019276:	f003 0304 	and.w	r3, r3, #4
 801927a:	2b04      	cmp	r3, #4
 801927c:	d1ca      	bne.n	8019214 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801927e:	2300      	movs	r3, #0
}
 8019280:	4618      	mov	r0, r3
 8019282:	3710      	adds	r7, #16
 8019284:	46bd      	mov	sp, r7
 8019286:	bd80      	pop	{r7, pc}

08019288 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8019288:	b480      	push	{r7}
 801928a:	b085      	sub	sp, #20
 801928c:	af00      	add	r7, sp, #0
 801928e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8019290:	2300      	movs	r3, #0
 8019292:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8019294:	4b13      	ldr	r3, [pc, #76]	; (80192e4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8019296:	681b      	ldr	r3, [r3, #0]
 8019298:	08db      	lsrs	r3, r3, #3
 801929a:	4a13      	ldr	r2, [pc, #76]	; (80192e8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 801929c:	fba2 2303 	umull	r2, r3, r2, r3
 80192a0:	0a1a      	lsrs	r2, r3, #8
 80192a2:	4613      	mov	r3, r2
 80192a4:	009b      	lsls	r3, r3, #2
 80192a6:	4413      	add	r3, r2
 80192a8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80192aa:	68fb      	ldr	r3, [r7, #12]
 80192ac:	3b01      	subs	r3, #1
 80192ae:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80192b0:	68fb      	ldr	r3, [r7, #12]
 80192b2:	2b00      	cmp	r3, #0
 80192b4:	d107      	bne.n	80192c6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80192b6:	687b      	ldr	r3, [r7, #4]
 80192b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80192ba:	f043 0220 	orr.w	r2, r3, #32
 80192be:	687b      	ldr	r3, [r7, #4]
 80192c0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80192c2:	2301      	movs	r3, #1
 80192c4:	e008      	b.n	80192d8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80192c6:	687b      	ldr	r3, [r7, #4]
 80192c8:	681b      	ldr	r3, [r3, #0]
 80192ca:	681b      	ldr	r3, [r3, #0]
 80192cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80192d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80192d4:	d0e9      	beq.n	80192aa <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80192d6:	2300      	movs	r3, #0
}
 80192d8:	4618      	mov	r0, r3
 80192da:	3714      	adds	r7, #20
 80192dc:	46bd      	mov	sp, r7
 80192de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192e2:	4770      	bx	lr
 80192e4:	2000017c 	.word	0x2000017c
 80192e8:	14f8b589 	.word	0x14f8b589

080192ec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80192ec:	b580      	push	{r7, lr}
 80192ee:	b084      	sub	sp, #16
 80192f0:	af00      	add	r7, sp, #0
 80192f2:	60f8      	str	r0, [r7, #12]
 80192f4:	60b9      	str	r1, [r7, #8]
 80192f6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80192f8:	e042      	b.n	8019380 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80192fa:	68fb      	ldr	r3, [r7, #12]
 80192fc:	681b      	ldr	r3, [r3, #0]
 80192fe:	695b      	ldr	r3, [r3, #20]
 8019300:	f003 0310 	and.w	r3, r3, #16
 8019304:	2b10      	cmp	r3, #16
 8019306:	d119      	bne.n	801933c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8019308:	68fb      	ldr	r3, [r7, #12]
 801930a:	681b      	ldr	r3, [r3, #0]
 801930c:	f06f 0210 	mvn.w	r2, #16
 8019310:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8019312:	68fb      	ldr	r3, [r7, #12]
 8019314:	2200      	movs	r2, #0
 8019316:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8019318:	68fb      	ldr	r3, [r7, #12]
 801931a:	2220      	movs	r2, #32
 801931c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8019320:	68fb      	ldr	r3, [r7, #12]
 8019322:	2200      	movs	r2, #0
 8019324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8019328:	68fb      	ldr	r3, [r7, #12]
 801932a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801932c:	68fb      	ldr	r3, [r7, #12]
 801932e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8019330:	68fb      	ldr	r3, [r7, #12]
 8019332:	2200      	movs	r2, #0
 8019334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8019338:	2301      	movs	r3, #1
 801933a:	e029      	b.n	8019390 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801933c:	f7fc faf8 	bl	8015930 <HAL_GetTick>
 8019340:	4602      	mov	r2, r0
 8019342:	687b      	ldr	r3, [r7, #4]
 8019344:	1ad3      	subs	r3, r2, r3
 8019346:	68ba      	ldr	r2, [r7, #8]
 8019348:	429a      	cmp	r2, r3
 801934a:	d302      	bcc.n	8019352 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 801934c:	68bb      	ldr	r3, [r7, #8]
 801934e:	2b00      	cmp	r3, #0
 8019350:	d116      	bne.n	8019380 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8019352:	68fb      	ldr	r3, [r7, #12]
 8019354:	2200      	movs	r2, #0
 8019356:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8019358:	68fb      	ldr	r3, [r7, #12]
 801935a:	2220      	movs	r2, #32
 801935c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8019360:	68fb      	ldr	r3, [r7, #12]
 8019362:	2200      	movs	r2, #0
 8019364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8019368:	68fb      	ldr	r3, [r7, #12]
 801936a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801936c:	f043 0220 	orr.w	r2, r3, #32
 8019370:	68fb      	ldr	r3, [r7, #12]
 8019372:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8019374:	68fb      	ldr	r3, [r7, #12]
 8019376:	2200      	movs	r2, #0
 8019378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 801937c:	2301      	movs	r3, #1
 801937e:	e007      	b.n	8019390 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8019380:	68fb      	ldr	r3, [r7, #12]
 8019382:	681b      	ldr	r3, [r3, #0]
 8019384:	695b      	ldr	r3, [r3, #20]
 8019386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801938a:	2b40      	cmp	r3, #64	; 0x40
 801938c:	d1b5      	bne.n	80192fa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 801938e:	2300      	movs	r3, #0
}
 8019390:	4618      	mov	r0, r3
 8019392:	3710      	adds	r7, #16
 8019394:	46bd      	mov	sp, r7
 8019396:	bd80      	pop	{r7, pc}

08019398 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8019398:	b480      	push	{r7}
 801939a:	b083      	sub	sp, #12
 801939c:	af00      	add	r7, sp, #0
 801939e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80193a0:	687b      	ldr	r3, [r7, #4]
 80193a2:	681b      	ldr	r3, [r3, #0]
 80193a4:	695b      	ldr	r3, [r3, #20]
 80193a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80193aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80193ae:	d11b      	bne.n	80193e8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80193b0:	687b      	ldr	r3, [r7, #4]
 80193b2:	681b      	ldr	r3, [r3, #0]
 80193b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80193b8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80193ba:	687b      	ldr	r3, [r7, #4]
 80193bc:	2200      	movs	r2, #0
 80193be:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80193c0:	687b      	ldr	r3, [r7, #4]
 80193c2:	2220      	movs	r2, #32
 80193c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80193c8:	687b      	ldr	r3, [r7, #4]
 80193ca:	2200      	movs	r2, #0
 80193cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80193d0:	687b      	ldr	r3, [r7, #4]
 80193d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80193d4:	f043 0204 	orr.w	r2, r3, #4
 80193d8:	687b      	ldr	r3, [r7, #4]
 80193da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80193dc:	687b      	ldr	r3, [r7, #4]
 80193de:	2200      	movs	r2, #0
 80193e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80193e4:	2301      	movs	r3, #1
 80193e6:	e000      	b.n	80193ea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80193e8:	2300      	movs	r3, #0
}
 80193ea:	4618      	mov	r0, r3
 80193ec:	370c      	adds	r7, #12
 80193ee:	46bd      	mov	sp, r7
 80193f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193f4:	4770      	bx	lr

080193f6 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80193f6:	b480      	push	{r7}
 80193f8:	b083      	sub	sp, #12
 80193fa:	af00      	add	r7, sp, #0
 80193fc:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80193fe:	687b      	ldr	r3, [r7, #4]
 8019400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019402:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8019406:	d103      	bne.n	8019410 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8019408:	687b      	ldr	r3, [r7, #4]
 801940a:	2201      	movs	r2, #1
 801940c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 801940e:	e007      	b.n	8019420 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8019410:	687b      	ldr	r3, [r7, #4]
 8019412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019414:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8019418:	d102      	bne.n	8019420 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 801941a:	687b      	ldr	r3, [r7, #4]
 801941c:	2208      	movs	r2, #8
 801941e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8019420:	bf00      	nop
 8019422:	370c      	adds	r7, #12
 8019424:	46bd      	mov	sp, r7
 8019426:	f85d 7b04 	ldr.w	r7, [sp], #4
 801942a:	4770      	bx	lr

0801942c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801942c:	b580      	push	{r7, lr}
 801942e:	b086      	sub	sp, #24
 8019430:	af00      	add	r7, sp, #0
 8019432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8019434:	687b      	ldr	r3, [r7, #4]
 8019436:	2b00      	cmp	r3, #0
 8019438:	d101      	bne.n	801943e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801943a:	2301      	movs	r3, #1
 801943c:	e267      	b.n	801990e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801943e:	687b      	ldr	r3, [r7, #4]
 8019440:	681b      	ldr	r3, [r3, #0]
 8019442:	f003 0301 	and.w	r3, r3, #1
 8019446:	2b00      	cmp	r3, #0
 8019448:	d075      	beq.n	8019536 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801944a:	4b88      	ldr	r3, [pc, #544]	; (801966c <HAL_RCC_OscConfig+0x240>)
 801944c:	689b      	ldr	r3, [r3, #8]
 801944e:	f003 030c 	and.w	r3, r3, #12
 8019452:	2b04      	cmp	r3, #4
 8019454:	d00c      	beq.n	8019470 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8019456:	4b85      	ldr	r3, [pc, #532]	; (801966c <HAL_RCC_OscConfig+0x240>)
 8019458:	689b      	ldr	r3, [r3, #8]
 801945a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801945e:	2b08      	cmp	r3, #8
 8019460:	d112      	bne.n	8019488 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8019462:	4b82      	ldr	r3, [pc, #520]	; (801966c <HAL_RCC_OscConfig+0x240>)
 8019464:	685b      	ldr	r3, [r3, #4]
 8019466:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801946a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801946e:	d10b      	bne.n	8019488 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8019470:	4b7e      	ldr	r3, [pc, #504]	; (801966c <HAL_RCC_OscConfig+0x240>)
 8019472:	681b      	ldr	r3, [r3, #0]
 8019474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8019478:	2b00      	cmp	r3, #0
 801947a:	d05b      	beq.n	8019534 <HAL_RCC_OscConfig+0x108>
 801947c:	687b      	ldr	r3, [r7, #4]
 801947e:	685b      	ldr	r3, [r3, #4]
 8019480:	2b00      	cmp	r3, #0
 8019482:	d157      	bne.n	8019534 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8019484:	2301      	movs	r3, #1
 8019486:	e242      	b.n	801990e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8019488:	687b      	ldr	r3, [r7, #4]
 801948a:	685b      	ldr	r3, [r3, #4]
 801948c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019490:	d106      	bne.n	80194a0 <HAL_RCC_OscConfig+0x74>
 8019492:	4b76      	ldr	r3, [pc, #472]	; (801966c <HAL_RCC_OscConfig+0x240>)
 8019494:	681b      	ldr	r3, [r3, #0]
 8019496:	4a75      	ldr	r2, [pc, #468]	; (801966c <HAL_RCC_OscConfig+0x240>)
 8019498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801949c:	6013      	str	r3, [r2, #0]
 801949e:	e01d      	b.n	80194dc <HAL_RCC_OscConfig+0xb0>
 80194a0:	687b      	ldr	r3, [r7, #4]
 80194a2:	685b      	ldr	r3, [r3, #4]
 80194a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80194a8:	d10c      	bne.n	80194c4 <HAL_RCC_OscConfig+0x98>
 80194aa:	4b70      	ldr	r3, [pc, #448]	; (801966c <HAL_RCC_OscConfig+0x240>)
 80194ac:	681b      	ldr	r3, [r3, #0]
 80194ae:	4a6f      	ldr	r2, [pc, #444]	; (801966c <HAL_RCC_OscConfig+0x240>)
 80194b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80194b4:	6013      	str	r3, [r2, #0]
 80194b6:	4b6d      	ldr	r3, [pc, #436]	; (801966c <HAL_RCC_OscConfig+0x240>)
 80194b8:	681b      	ldr	r3, [r3, #0]
 80194ba:	4a6c      	ldr	r2, [pc, #432]	; (801966c <HAL_RCC_OscConfig+0x240>)
 80194bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80194c0:	6013      	str	r3, [r2, #0]
 80194c2:	e00b      	b.n	80194dc <HAL_RCC_OscConfig+0xb0>
 80194c4:	4b69      	ldr	r3, [pc, #420]	; (801966c <HAL_RCC_OscConfig+0x240>)
 80194c6:	681b      	ldr	r3, [r3, #0]
 80194c8:	4a68      	ldr	r2, [pc, #416]	; (801966c <HAL_RCC_OscConfig+0x240>)
 80194ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80194ce:	6013      	str	r3, [r2, #0]
 80194d0:	4b66      	ldr	r3, [pc, #408]	; (801966c <HAL_RCC_OscConfig+0x240>)
 80194d2:	681b      	ldr	r3, [r3, #0]
 80194d4:	4a65      	ldr	r2, [pc, #404]	; (801966c <HAL_RCC_OscConfig+0x240>)
 80194d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80194da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80194dc:	687b      	ldr	r3, [r7, #4]
 80194de:	685b      	ldr	r3, [r3, #4]
 80194e0:	2b00      	cmp	r3, #0
 80194e2:	d013      	beq.n	801950c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80194e4:	f7fc fa24 	bl	8015930 <HAL_GetTick>
 80194e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80194ea:	e008      	b.n	80194fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80194ec:	f7fc fa20 	bl	8015930 <HAL_GetTick>
 80194f0:	4602      	mov	r2, r0
 80194f2:	693b      	ldr	r3, [r7, #16]
 80194f4:	1ad3      	subs	r3, r2, r3
 80194f6:	2b64      	cmp	r3, #100	; 0x64
 80194f8:	d901      	bls.n	80194fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80194fa:	2303      	movs	r3, #3
 80194fc:	e207      	b.n	801990e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80194fe:	4b5b      	ldr	r3, [pc, #364]	; (801966c <HAL_RCC_OscConfig+0x240>)
 8019500:	681b      	ldr	r3, [r3, #0]
 8019502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8019506:	2b00      	cmp	r3, #0
 8019508:	d0f0      	beq.n	80194ec <HAL_RCC_OscConfig+0xc0>
 801950a:	e014      	b.n	8019536 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801950c:	f7fc fa10 	bl	8015930 <HAL_GetTick>
 8019510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8019512:	e008      	b.n	8019526 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8019514:	f7fc fa0c 	bl	8015930 <HAL_GetTick>
 8019518:	4602      	mov	r2, r0
 801951a:	693b      	ldr	r3, [r7, #16]
 801951c:	1ad3      	subs	r3, r2, r3
 801951e:	2b64      	cmp	r3, #100	; 0x64
 8019520:	d901      	bls.n	8019526 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8019522:	2303      	movs	r3, #3
 8019524:	e1f3      	b.n	801990e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8019526:	4b51      	ldr	r3, [pc, #324]	; (801966c <HAL_RCC_OscConfig+0x240>)
 8019528:	681b      	ldr	r3, [r3, #0]
 801952a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801952e:	2b00      	cmp	r3, #0
 8019530:	d1f0      	bne.n	8019514 <HAL_RCC_OscConfig+0xe8>
 8019532:	e000      	b.n	8019536 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8019534:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8019536:	687b      	ldr	r3, [r7, #4]
 8019538:	681b      	ldr	r3, [r3, #0]
 801953a:	f003 0302 	and.w	r3, r3, #2
 801953e:	2b00      	cmp	r3, #0
 8019540:	d063      	beq.n	801960a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8019542:	4b4a      	ldr	r3, [pc, #296]	; (801966c <HAL_RCC_OscConfig+0x240>)
 8019544:	689b      	ldr	r3, [r3, #8]
 8019546:	f003 030c 	and.w	r3, r3, #12
 801954a:	2b00      	cmp	r3, #0
 801954c:	d00b      	beq.n	8019566 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801954e:	4b47      	ldr	r3, [pc, #284]	; (801966c <HAL_RCC_OscConfig+0x240>)
 8019550:	689b      	ldr	r3, [r3, #8]
 8019552:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8019556:	2b08      	cmp	r3, #8
 8019558:	d11c      	bne.n	8019594 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801955a:	4b44      	ldr	r3, [pc, #272]	; (801966c <HAL_RCC_OscConfig+0x240>)
 801955c:	685b      	ldr	r3, [r3, #4]
 801955e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8019562:	2b00      	cmp	r3, #0
 8019564:	d116      	bne.n	8019594 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8019566:	4b41      	ldr	r3, [pc, #260]	; (801966c <HAL_RCC_OscConfig+0x240>)
 8019568:	681b      	ldr	r3, [r3, #0]
 801956a:	f003 0302 	and.w	r3, r3, #2
 801956e:	2b00      	cmp	r3, #0
 8019570:	d005      	beq.n	801957e <HAL_RCC_OscConfig+0x152>
 8019572:	687b      	ldr	r3, [r7, #4]
 8019574:	68db      	ldr	r3, [r3, #12]
 8019576:	2b01      	cmp	r3, #1
 8019578:	d001      	beq.n	801957e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 801957a:	2301      	movs	r3, #1
 801957c:	e1c7      	b.n	801990e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801957e:	4b3b      	ldr	r3, [pc, #236]	; (801966c <HAL_RCC_OscConfig+0x240>)
 8019580:	681b      	ldr	r3, [r3, #0]
 8019582:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8019586:	687b      	ldr	r3, [r7, #4]
 8019588:	691b      	ldr	r3, [r3, #16]
 801958a:	00db      	lsls	r3, r3, #3
 801958c:	4937      	ldr	r1, [pc, #220]	; (801966c <HAL_RCC_OscConfig+0x240>)
 801958e:	4313      	orrs	r3, r2
 8019590:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8019592:	e03a      	b.n	801960a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8019594:	687b      	ldr	r3, [r7, #4]
 8019596:	68db      	ldr	r3, [r3, #12]
 8019598:	2b00      	cmp	r3, #0
 801959a:	d020      	beq.n	80195de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801959c:	4b34      	ldr	r3, [pc, #208]	; (8019670 <HAL_RCC_OscConfig+0x244>)
 801959e:	2201      	movs	r2, #1
 80195a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80195a2:	f7fc f9c5 	bl	8015930 <HAL_GetTick>
 80195a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80195a8:	e008      	b.n	80195bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80195aa:	f7fc f9c1 	bl	8015930 <HAL_GetTick>
 80195ae:	4602      	mov	r2, r0
 80195b0:	693b      	ldr	r3, [r7, #16]
 80195b2:	1ad3      	subs	r3, r2, r3
 80195b4:	2b02      	cmp	r3, #2
 80195b6:	d901      	bls.n	80195bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80195b8:	2303      	movs	r3, #3
 80195ba:	e1a8      	b.n	801990e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80195bc:	4b2b      	ldr	r3, [pc, #172]	; (801966c <HAL_RCC_OscConfig+0x240>)
 80195be:	681b      	ldr	r3, [r3, #0]
 80195c0:	f003 0302 	and.w	r3, r3, #2
 80195c4:	2b00      	cmp	r3, #0
 80195c6:	d0f0      	beq.n	80195aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80195c8:	4b28      	ldr	r3, [pc, #160]	; (801966c <HAL_RCC_OscConfig+0x240>)
 80195ca:	681b      	ldr	r3, [r3, #0]
 80195cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80195d0:	687b      	ldr	r3, [r7, #4]
 80195d2:	691b      	ldr	r3, [r3, #16]
 80195d4:	00db      	lsls	r3, r3, #3
 80195d6:	4925      	ldr	r1, [pc, #148]	; (801966c <HAL_RCC_OscConfig+0x240>)
 80195d8:	4313      	orrs	r3, r2
 80195da:	600b      	str	r3, [r1, #0]
 80195dc:	e015      	b.n	801960a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80195de:	4b24      	ldr	r3, [pc, #144]	; (8019670 <HAL_RCC_OscConfig+0x244>)
 80195e0:	2200      	movs	r2, #0
 80195e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80195e4:	f7fc f9a4 	bl	8015930 <HAL_GetTick>
 80195e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80195ea:	e008      	b.n	80195fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80195ec:	f7fc f9a0 	bl	8015930 <HAL_GetTick>
 80195f0:	4602      	mov	r2, r0
 80195f2:	693b      	ldr	r3, [r7, #16]
 80195f4:	1ad3      	subs	r3, r2, r3
 80195f6:	2b02      	cmp	r3, #2
 80195f8:	d901      	bls.n	80195fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80195fa:	2303      	movs	r3, #3
 80195fc:	e187      	b.n	801990e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80195fe:	4b1b      	ldr	r3, [pc, #108]	; (801966c <HAL_RCC_OscConfig+0x240>)
 8019600:	681b      	ldr	r3, [r3, #0]
 8019602:	f003 0302 	and.w	r3, r3, #2
 8019606:	2b00      	cmp	r3, #0
 8019608:	d1f0      	bne.n	80195ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801960a:	687b      	ldr	r3, [r7, #4]
 801960c:	681b      	ldr	r3, [r3, #0]
 801960e:	f003 0308 	and.w	r3, r3, #8
 8019612:	2b00      	cmp	r3, #0
 8019614:	d036      	beq.n	8019684 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8019616:	687b      	ldr	r3, [r7, #4]
 8019618:	695b      	ldr	r3, [r3, #20]
 801961a:	2b00      	cmp	r3, #0
 801961c:	d016      	beq.n	801964c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801961e:	4b15      	ldr	r3, [pc, #84]	; (8019674 <HAL_RCC_OscConfig+0x248>)
 8019620:	2201      	movs	r2, #1
 8019622:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8019624:	f7fc f984 	bl	8015930 <HAL_GetTick>
 8019628:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801962a:	e008      	b.n	801963e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801962c:	f7fc f980 	bl	8015930 <HAL_GetTick>
 8019630:	4602      	mov	r2, r0
 8019632:	693b      	ldr	r3, [r7, #16]
 8019634:	1ad3      	subs	r3, r2, r3
 8019636:	2b02      	cmp	r3, #2
 8019638:	d901      	bls.n	801963e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 801963a:	2303      	movs	r3, #3
 801963c:	e167      	b.n	801990e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801963e:	4b0b      	ldr	r3, [pc, #44]	; (801966c <HAL_RCC_OscConfig+0x240>)
 8019640:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019642:	f003 0302 	and.w	r3, r3, #2
 8019646:	2b00      	cmp	r3, #0
 8019648:	d0f0      	beq.n	801962c <HAL_RCC_OscConfig+0x200>
 801964a:	e01b      	b.n	8019684 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801964c:	4b09      	ldr	r3, [pc, #36]	; (8019674 <HAL_RCC_OscConfig+0x248>)
 801964e:	2200      	movs	r2, #0
 8019650:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8019652:	f7fc f96d 	bl	8015930 <HAL_GetTick>
 8019656:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8019658:	e00e      	b.n	8019678 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801965a:	f7fc f969 	bl	8015930 <HAL_GetTick>
 801965e:	4602      	mov	r2, r0
 8019660:	693b      	ldr	r3, [r7, #16]
 8019662:	1ad3      	subs	r3, r2, r3
 8019664:	2b02      	cmp	r3, #2
 8019666:	d907      	bls.n	8019678 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8019668:	2303      	movs	r3, #3
 801966a:	e150      	b.n	801990e <HAL_RCC_OscConfig+0x4e2>
 801966c:	40023800 	.word	0x40023800
 8019670:	42470000 	.word	0x42470000
 8019674:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8019678:	4b88      	ldr	r3, [pc, #544]	; (801989c <HAL_RCC_OscConfig+0x470>)
 801967a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801967c:	f003 0302 	and.w	r3, r3, #2
 8019680:	2b00      	cmp	r3, #0
 8019682:	d1ea      	bne.n	801965a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8019684:	687b      	ldr	r3, [r7, #4]
 8019686:	681b      	ldr	r3, [r3, #0]
 8019688:	f003 0304 	and.w	r3, r3, #4
 801968c:	2b00      	cmp	r3, #0
 801968e:	f000 8097 	beq.w	80197c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8019692:	2300      	movs	r3, #0
 8019694:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8019696:	4b81      	ldr	r3, [pc, #516]	; (801989c <HAL_RCC_OscConfig+0x470>)
 8019698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801969a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801969e:	2b00      	cmp	r3, #0
 80196a0:	d10f      	bne.n	80196c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80196a2:	2300      	movs	r3, #0
 80196a4:	60bb      	str	r3, [r7, #8]
 80196a6:	4b7d      	ldr	r3, [pc, #500]	; (801989c <HAL_RCC_OscConfig+0x470>)
 80196a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80196aa:	4a7c      	ldr	r2, [pc, #496]	; (801989c <HAL_RCC_OscConfig+0x470>)
 80196ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80196b0:	6413      	str	r3, [r2, #64]	; 0x40
 80196b2:	4b7a      	ldr	r3, [pc, #488]	; (801989c <HAL_RCC_OscConfig+0x470>)
 80196b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80196b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80196ba:	60bb      	str	r3, [r7, #8]
 80196bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80196be:	2301      	movs	r3, #1
 80196c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80196c2:	4b77      	ldr	r3, [pc, #476]	; (80198a0 <HAL_RCC_OscConfig+0x474>)
 80196c4:	681b      	ldr	r3, [r3, #0]
 80196c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80196ca:	2b00      	cmp	r3, #0
 80196cc:	d118      	bne.n	8019700 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80196ce:	4b74      	ldr	r3, [pc, #464]	; (80198a0 <HAL_RCC_OscConfig+0x474>)
 80196d0:	681b      	ldr	r3, [r3, #0]
 80196d2:	4a73      	ldr	r2, [pc, #460]	; (80198a0 <HAL_RCC_OscConfig+0x474>)
 80196d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80196d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80196da:	f7fc f929 	bl	8015930 <HAL_GetTick>
 80196de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80196e0:	e008      	b.n	80196f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80196e2:	f7fc f925 	bl	8015930 <HAL_GetTick>
 80196e6:	4602      	mov	r2, r0
 80196e8:	693b      	ldr	r3, [r7, #16]
 80196ea:	1ad3      	subs	r3, r2, r3
 80196ec:	2b02      	cmp	r3, #2
 80196ee:	d901      	bls.n	80196f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80196f0:	2303      	movs	r3, #3
 80196f2:	e10c      	b.n	801990e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80196f4:	4b6a      	ldr	r3, [pc, #424]	; (80198a0 <HAL_RCC_OscConfig+0x474>)
 80196f6:	681b      	ldr	r3, [r3, #0]
 80196f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80196fc:	2b00      	cmp	r3, #0
 80196fe:	d0f0      	beq.n	80196e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8019700:	687b      	ldr	r3, [r7, #4]
 8019702:	689b      	ldr	r3, [r3, #8]
 8019704:	2b01      	cmp	r3, #1
 8019706:	d106      	bne.n	8019716 <HAL_RCC_OscConfig+0x2ea>
 8019708:	4b64      	ldr	r3, [pc, #400]	; (801989c <HAL_RCC_OscConfig+0x470>)
 801970a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801970c:	4a63      	ldr	r2, [pc, #396]	; (801989c <HAL_RCC_OscConfig+0x470>)
 801970e:	f043 0301 	orr.w	r3, r3, #1
 8019712:	6713      	str	r3, [r2, #112]	; 0x70
 8019714:	e01c      	b.n	8019750 <HAL_RCC_OscConfig+0x324>
 8019716:	687b      	ldr	r3, [r7, #4]
 8019718:	689b      	ldr	r3, [r3, #8]
 801971a:	2b05      	cmp	r3, #5
 801971c:	d10c      	bne.n	8019738 <HAL_RCC_OscConfig+0x30c>
 801971e:	4b5f      	ldr	r3, [pc, #380]	; (801989c <HAL_RCC_OscConfig+0x470>)
 8019720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019722:	4a5e      	ldr	r2, [pc, #376]	; (801989c <HAL_RCC_OscConfig+0x470>)
 8019724:	f043 0304 	orr.w	r3, r3, #4
 8019728:	6713      	str	r3, [r2, #112]	; 0x70
 801972a:	4b5c      	ldr	r3, [pc, #368]	; (801989c <HAL_RCC_OscConfig+0x470>)
 801972c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801972e:	4a5b      	ldr	r2, [pc, #364]	; (801989c <HAL_RCC_OscConfig+0x470>)
 8019730:	f043 0301 	orr.w	r3, r3, #1
 8019734:	6713      	str	r3, [r2, #112]	; 0x70
 8019736:	e00b      	b.n	8019750 <HAL_RCC_OscConfig+0x324>
 8019738:	4b58      	ldr	r3, [pc, #352]	; (801989c <HAL_RCC_OscConfig+0x470>)
 801973a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801973c:	4a57      	ldr	r2, [pc, #348]	; (801989c <HAL_RCC_OscConfig+0x470>)
 801973e:	f023 0301 	bic.w	r3, r3, #1
 8019742:	6713      	str	r3, [r2, #112]	; 0x70
 8019744:	4b55      	ldr	r3, [pc, #340]	; (801989c <HAL_RCC_OscConfig+0x470>)
 8019746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019748:	4a54      	ldr	r2, [pc, #336]	; (801989c <HAL_RCC_OscConfig+0x470>)
 801974a:	f023 0304 	bic.w	r3, r3, #4
 801974e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8019750:	687b      	ldr	r3, [r7, #4]
 8019752:	689b      	ldr	r3, [r3, #8]
 8019754:	2b00      	cmp	r3, #0
 8019756:	d015      	beq.n	8019784 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8019758:	f7fc f8ea 	bl	8015930 <HAL_GetTick>
 801975c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801975e:	e00a      	b.n	8019776 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8019760:	f7fc f8e6 	bl	8015930 <HAL_GetTick>
 8019764:	4602      	mov	r2, r0
 8019766:	693b      	ldr	r3, [r7, #16]
 8019768:	1ad3      	subs	r3, r2, r3
 801976a:	f241 3288 	movw	r2, #5000	; 0x1388
 801976e:	4293      	cmp	r3, r2
 8019770:	d901      	bls.n	8019776 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8019772:	2303      	movs	r3, #3
 8019774:	e0cb      	b.n	801990e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8019776:	4b49      	ldr	r3, [pc, #292]	; (801989c <HAL_RCC_OscConfig+0x470>)
 8019778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801977a:	f003 0302 	and.w	r3, r3, #2
 801977e:	2b00      	cmp	r3, #0
 8019780:	d0ee      	beq.n	8019760 <HAL_RCC_OscConfig+0x334>
 8019782:	e014      	b.n	80197ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8019784:	f7fc f8d4 	bl	8015930 <HAL_GetTick>
 8019788:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801978a:	e00a      	b.n	80197a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801978c:	f7fc f8d0 	bl	8015930 <HAL_GetTick>
 8019790:	4602      	mov	r2, r0
 8019792:	693b      	ldr	r3, [r7, #16]
 8019794:	1ad3      	subs	r3, r2, r3
 8019796:	f241 3288 	movw	r2, #5000	; 0x1388
 801979a:	4293      	cmp	r3, r2
 801979c:	d901      	bls.n	80197a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 801979e:	2303      	movs	r3, #3
 80197a0:	e0b5      	b.n	801990e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80197a2:	4b3e      	ldr	r3, [pc, #248]	; (801989c <HAL_RCC_OscConfig+0x470>)
 80197a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80197a6:	f003 0302 	and.w	r3, r3, #2
 80197aa:	2b00      	cmp	r3, #0
 80197ac:	d1ee      	bne.n	801978c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80197ae:	7dfb      	ldrb	r3, [r7, #23]
 80197b0:	2b01      	cmp	r3, #1
 80197b2:	d105      	bne.n	80197c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80197b4:	4b39      	ldr	r3, [pc, #228]	; (801989c <HAL_RCC_OscConfig+0x470>)
 80197b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80197b8:	4a38      	ldr	r2, [pc, #224]	; (801989c <HAL_RCC_OscConfig+0x470>)
 80197ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80197be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80197c0:	687b      	ldr	r3, [r7, #4]
 80197c2:	699b      	ldr	r3, [r3, #24]
 80197c4:	2b00      	cmp	r3, #0
 80197c6:	f000 80a1 	beq.w	801990c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80197ca:	4b34      	ldr	r3, [pc, #208]	; (801989c <HAL_RCC_OscConfig+0x470>)
 80197cc:	689b      	ldr	r3, [r3, #8]
 80197ce:	f003 030c 	and.w	r3, r3, #12
 80197d2:	2b08      	cmp	r3, #8
 80197d4:	d05c      	beq.n	8019890 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80197d6:	687b      	ldr	r3, [r7, #4]
 80197d8:	699b      	ldr	r3, [r3, #24]
 80197da:	2b02      	cmp	r3, #2
 80197dc:	d141      	bne.n	8019862 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80197de:	4b31      	ldr	r3, [pc, #196]	; (80198a4 <HAL_RCC_OscConfig+0x478>)
 80197e0:	2200      	movs	r2, #0
 80197e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80197e4:	f7fc f8a4 	bl	8015930 <HAL_GetTick>
 80197e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80197ea:	e008      	b.n	80197fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80197ec:	f7fc f8a0 	bl	8015930 <HAL_GetTick>
 80197f0:	4602      	mov	r2, r0
 80197f2:	693b      	ldr	r3, [r7, #16]
 80197f4:	1ad3      	subs	r3, r2, r3
 80197f6:	2b02      	cmp	r3, #2
 80197f8:	d901      	bls.n	80197fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80197fa:	2303      	movs	r3, #3
 80197fc:	e087      	b.n	801990e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80197fe:	4b27      	ldr	r3, [pc, #156]	; (801989c <HAL_RCC_OscConfig+0x470>)
 8019800:	681b      	ldr	r3, [r3, #0]
 8019802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8019806:	2b00      	cmp	r3, #0
 8019808:	d1f0      	bne.n	80197ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 801980a:	687b      	ldr	r3, [r7, #4]
 801980c:	69da      	ldr	r2, [r3, #28]
 801980e:	687b      	ldr	r3, [r7, #4]
 8019810:	6a1b      	ldr	r3, [r3, #32]
 8019812:	431a      	orrs	r2, r3
 8019814:	687b      	ldr	r3, [r7, #4]
 8019816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019818:	019b      	lsls	r3, r3, #6
 801981a:	431a      	orrs	r2, r3
 801981c:	687b      	ldr	r3, [r7, #4]
 801981e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019820:	085b      	lsrs	r3, r3, #1
 8019822:	3b01      	subs	r3, #1
 8019824:	041b      	lsls	r3, r3, #16
 8019826:	431a      	orrs	r2, r3
 8019828:	687b      	ldr	r3, [r7, #4]
 801982a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801982c:	061b      	lsls	r3, r3, #24
 801982e:	491b      	ldr	r1, [pc, #108]	; (801989c <HAL_RCC_OscConfig+0x470>)
 8019830:	4313      	orrs	r3, r2
 8019832:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8019834:	4b1b      	ldr	r3, [pc, #108]	; (80198a4 <HAL_RCC_OscConfig+0x478>)
 8019836:	2201      	movs	r2, #1
 8019838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801983a:	f7fc f879 	bl	8015930 <HAL_GetTick>
 801983e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8019840:	e008      	b.n	8019854 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8019842:	f7fc f875 	bl	8015930 <HAL_GetTick>
 8019846:	4602      	mov	r2, r0
 8019848:	693b      	ldr	r3, [r7, #16]
 801984a:	1ad3      	subs	r3, r2, r3
 801984c:	2b02      	cmp	r3, #2
 801984e:	d901      	bls.n	8019854 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8019850:	2303      	movs	r3, #3
 8019852:	e05c      	b.n	801990e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8019854:	4b11      	ldr	r3, [pc, #68]	; (801989c <HAL_RCC_OscConfig+0x470>)
 8019856:	681b      	ldr	r3, [r3, #0]
 8019858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801985c:	2b00      	cmp	r3, #0
 801985e:	d0f0      	beq.n	8019842 <HAL_RCC_OscConfig+0x416>
 8019860:	e054      	b.n	801990c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8019862:	4b10      	ldr	r3, [pc, #64]	; (80198a4 <HAL_RCC_OscConfig+0x478>)
 8019864:	2200      	movs	r2, #0
 8019866:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8019868:	f7fc f862 	bl	8015930 <HAL_GetTick>
 801986c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801986e:	e008      	b.n	8019882 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8019870:	f7fc f85e 	bl	8015930 <HAL_GetTick>
 8019874:	4602      	mov	r2, r0
 8019876:	693b      	ldr	r3, [r7, #16]
 8019878:	1ad3      	subs	r3, r2, r3
 801987a:	2b02      	cmp	r3, #2
 801987c:	d901      	bls.n	8019882 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 801987e:	2303      	movs	r3, #3
 8019880:	e045      	b.n	801990e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8019882:	4b06      	ldr	r3, [pc, #24]	; (801989c <HAL_RCC_OscConfig+0x470>)
 8019884:	681b      	ldr	r3, [r3, #0]
 8019886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801988a:	2b00      	cmp	r3, #0
 801988c:	d1f0      	bne.n	8019870 <HAL_RCC_OscConfig+0x444>
 801988e:	e03d      	b.n	801990c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8019890:	687b      	ldr	r3, [r7, #4]
 8019892:	699b      	ldr	r3, [r3, #24]
 8019894:	2b01      	cmp	r3, #1
 8019896:	d107      	bne.n	80198a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8019898:	2301      	movs	r3, #1
 801989a:	e038      	b.n	801990e <HAL_RCC_OscConfig+0x4e2>
 801989c:	40023800 	.word	0x40023800
 80198a0:	40007000 	.word	0x40007000
 80198a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80198a8:	4b1b      	ldr	r3, [pc, #108]	; (8019918 <HAL_RCC_OscConfig+0x4ec>)
 80198aa:	685b      	ldr	r3, [r3, #4]
 80198ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80198ae:	687b      	ldr	r3, [r7, #4]
 80198b0:	699b      	ldr	r3, [r3, #24]
 80198b2:	2b01      	cmp	r3, #1
 80198b4:	d028      	beq.n	8019908 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80198b6:	68fb      	ldr	r3, [r7, #12]
 80198b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80198bc:	687b      	ldr	r3, [r7, #4]
 80198be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80198c0:	429a      	cmp	r2, r3
 80198c2:	d121      	bne.n	8019908 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80198c4:	68fb      	ldr	r3, [r7, #12]
 80198c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80198ca:	687b      	ldr	r3, [r7, #4]
 80198cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80198ce:	429a      	cmp	r2, r3
 80198d0:	d11a      	bne.n	8019908 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80198d2:	68fa      	ldr	r2, [r7, #12]
 80198d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80198d8:	4013      	ands	r3, r2
 80198da:	687a      	ldr	r2, [r7, #4]
 80198dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80198de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80198e0:	4293      	cmp	r3, r2
 80198e2:	d111      	bne.n	8019908 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80198e4:	68fb      	ldr	r3, [r7, #12]
 80198e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80198ea:	687b      	ldr	r3, [r7, #4]
 80198ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80198ee:	085b      	lsrs	r3, r3, #1
 80198f0:	3b01      	subs	r3, #1
 80198f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80198f4:	429a      	cmp	r2, r3
 80198f6:	d107      	bne.n	8019908 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80198f8:	68fb      	ldr	r3, [r7, #12]
 80198fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80198fe:	687b      	ldr	r3, [r7, #4]
 8019900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019902:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8019904:	429a      	cmp	r2, r3
 8019906:	d001      	beq.n	801990c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8019908:	2301      	movs	r3, #1
 801990a:	e000      	b.n	801990e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 801990c:	2300      	movs	r3, #0
}
 801990e:	4618      	mov	r0, r3
 8019910:	3718      	adds	r7, #24
 8019912:	46bd      	mov	sp, r7
 8019914:	bd80      	pop	{r7, pc}
 8019916:	bf00      	nop
 8019918:	40023800 	.word	0x40023800

0801991c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801991c:	b580      	push	{r7, lr}
 801991e:	b084      	sub	sp, #16
 8019920:	af00      	add	r7, sp, #0
 8019922:	6078      	str	r0, [r7, #4]
 8019924:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8019926:	687b      	ldr	r3, [r7, #4]
 8019928:	2b00      	cmp	r3, #0
 801992a:	d101      	bne.n	8019930 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801992c:	2301      	movs	r3, #1
 801992e:	e0cc      	b.n	8019aca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8019930:	4b68      	ldr	r3, [pc, #416]	; (8019ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8019932:	681b      	ldr	r3, [r3, #0]
 8019934:	f003 0307 	and.w	r3, r3, #7
 8019938:	683a      	ldr	r2, [r7, #0]
 801993a:	429a      	cmp	r2, r3
 801993c:	d90c      	bls.n	8019958 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801993e:	4b65      	ldr	r3, [pc, #404]	; (8019ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8019940:	683a      	ldr	r2, [r7, #0]
 8019942:	b2d2      	uxtb	r2, r2
 8019944:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8019946:	4b63      	ldr	r3, [pc, #396]	; (8019ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8019948:	681b      	ldr	r3, [r3, #0]
 801994a:	f003 0307 	and.w	r3, r3, #7
 801994e:	683a      	ldr	r2, [r7, #0]
 8019950:	429a      	cmp	r2, r3
 8019952:	d001      	beq.n	8019958 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8019954:	2301      	movs	r3, #1
 8019956:	e0b8      	b.n	8019aca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8019958:	687b      	ldr	r3, [r7, #4]
 801995a:	681b      	ldr	r3, [r3, #0]
 801995c:	f003 0302 	and.w	r3, r3, #2
 8019960:	2b00      	cmp	r3, #0
 8019962:	d020      	beq.n	80199a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8019964:	687b      	ldr	r3, [r7, #4]
 8019966:	681b      	ldr	r3, [r3, #0]
 8019968:	f003 0304 	and.w	r3, r3, #4
 801996c:	2b00      	cmp	r3, #0
 801996e:	d005      	beq.n	801997c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8019970:	4b59      	ldr	r3, [pc, #356]	; (8019ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8019972:	689b      	ldr	r3, [r3, #8]
 8019974:	4a58      	ldr	r2, [pc, #352]	; (8019ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8019976:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 801997a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801997c:	687b      	ldr	r3, [r7, #4]
 801997e:	681b      	ldr	r3, [r3, #0]
 8019980:	f003 0308 	and.w	r3, r3, #8
 8019984:	2b00      	cmp	r3, #0
 8019986:	d005      	beq.n	8019994 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8019988:	4b53      	ldr	r3, [pc, #332]	; (8019ad8 <HAL_RCC_ClockConfig+0x1bc>)
 801998a:	689b      	ldr	r3, [r3, #8]
 801998c:	4a52      	ldr	r2, [pc, #328]	; (8019ad8 <HAL_RCC_ClockConfig+0x1bc>)
 801998e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8019992:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8019994:	4b50      	ldr	r3, [pc, #320]	; (8019ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8019996:	689b      	ldr	r3, [r3, #8]
 8019998:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801999c:	687b      	ldr	r3, [r7, #4]
 801999e:	689b      	ldr	r3, [r3, #8]
 80199a0:	494d      	ldr	r1, [pc, #308]	; (8019ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80199a2:	4313      	orrs	r3, r2
 80199a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80199a6:	687b      	ldr	r3, [r7, #4]
 80199a8:	681b      	ldr	r3, [r3, #0]
 80199aa:	f003 0301 	and.w	r3, r3, #1
 80199ae:	2b00      	cmp	r3, #0
 80199b0:	d044      	beq.n	8019a3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80199b2:	687b      	ldr	r3, [r7, #4]
 80199b4:	685b      	ldr	r3, [r3, #4]
 80199b6:	2b01      	cmp	r3, #1
 80199b8:	d107      	bne.n	80199ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80199ba:	4b47      	ldr	r3, [pc, #284]	; (8019ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80199bc:	681b      	ldr	r3, [r3, #0]
 80199be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80199c2:	2b00      	cmp	r3, #0
 80199c4:	d119      	bne.n	80199fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80199c6:	2301      	movs	r3, #1
 80199c8:	e07f      	b.n	8019aca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80199ca:	687b      	ldr	r3, [r7, #4]
 80199cc:	685b      	ldr	r3, [r3, #4]
 80199ce:	2b02      	cmp	r3, #2
 80199d0:	d003      	beq.n	80199da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80199d2:	687b      	ldr	r3, [r7, #4]
 80199d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80199d6:	2b03      	cmp	r3, #3
 80199d8:	d107      	bne.n	80199ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80199da:	4b3f      	ldr	r3, [pc, #252]	; (8019ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80199dc:	681b      	ldr	r3, [r3, #0]
 80199de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80199e2:	2b00      	cmp	r3, #0
 80199e4:	d109      	bne.n	80199fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80199e6:	2301      	movs	r3, #1
 80199e8:	e06f      	b.n	8019aca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80199ea:	4b3b      	ldr	r3, [pc, #236]	; (8019ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80199ec:	681b      	ldr	r3, [r3, #0]
 80199ee:	f003 0302 	and.w	r3, r3, #2
 80199f2:	2b00      	cmp	r3, #0
 80199f4:	d101      	bne.n	80199fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80199f6:	2301      	movs	r3, #1
 80199f8:	e067      	b.n	8019aca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80199fa:	4b37      	ldr	r3, [pc, #220]	; (8019ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80199fc:	689b      	ldr	r3, [r3, #8]
 80199fe:	f023 0203 	bic.w	r2, r3, #3
 8019a02:	687b      	ldr	r3, [r7, #4]
 8019a04:	685b      	ldr	r3, [r3, #4]
 8019a06:	4934      	ldr	r1, [pc, #208]	; (8019ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8019a08:	4313      	orrs	r3, r2
 8019a0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8019a0c:	f7fb ff90 	bl	8015930 <HAL_GetTick>
 8019a10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8019a12:	e00a      	b.n	8019a2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8019a14:	f7fb ff8c 	bl	8015930 <HAL_GetTick>
 8019a18:	4602      	mov	r2, r0
 8019a1a:	68fb      	ldr	r3, [r7, #12]
 8019a1c:	1ad3      	subs	r3, r2, r3
 8019a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8019a22:	4293      	cmp	r3, r2
 8019a24:	d901      	bls.n	8019a2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8019a26:	2303      	movs	r3, #3
 8019a28:	e04f      	b.n	8019aca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8019a2a:	4b2b      	ldr	r3, [pc, #172]	; (8019ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8019a2c:	689b      	ldr	r3, [r3, #8]
 8019a2e:	f003 020c 	and.w	r2, r3, #12
 8019a32:	687b      	ldr	r3, [r7, #4]
 8019a34:	685b      	ldr	r3, [r3, #4]
 8019a36:	009b      	lsls	r3, r3, #2
 8019a38:	429a      	cmp	r2, r3
 8019a3a:	d1eb      	bne.n	8019a14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8019a3c:	4b25      	ldr	r3, [pc, #148]	; (8019ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8019a3e:	681b      	ldr	r3, [r3, #0]
 8019a40:	f003 0307 	and.w	r3, r3, #7
 8019a44:	683a      	ldr	r2, [r7, #0]
 8019a46:	429a      	cmp	r2, r3
 8019a48:	d20c      	bcs.n	8019a64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8019a4a:	4b22      	ldr	r3, [pc, #136]	; (8019ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8019a4c:	683a      	ldr	r2, [r7, #0]
 8019a4e:	b2d2      	uxtb	r2, r2
 8019a50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8019a52:	4b20      	ldr	r3, [pc, #128]	; (8019ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8019a54:	681b      	ldr	r3, [r3, #0]
 8019a56:	f003 0307 	and.w	r3, r3, #7
 8019a5a:	683a      	ldr	r2, [r7, #0]
 8019a5c:	429a      	cmp	r2, r3
 8019a5e:	d001      	beq.n	8019a64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8019a60:	2301      	movs	r3, #1
 8019a62:	e032      	b.n	8019aca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8019a64:	687b      	ldr	r3, [r7, #4]
 8019a66:	681b      	ldr	r3, [r3, #0]
 8019a68:	f003 0304 	and.w	r3, r3, #4
 8019a6c:	2b00      	cmp	r3, #0
 8019a6e:	d008      	beq.n	8019a82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8019a70:	4b19      	ldr	r3, [pc, #100]	; (8019ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8019a72:	689b      	ldr	r3, [r3, #8]
 8019a74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8019a78:	687b      	ldr	r3, [r7, #4]
 8019a7a:	68db      	ldr	r3, [r3, #12]
 8019a7c:	4916      	ldr	r1, [pc, #88]	; (8019ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8019a7e:	4313      	orrs	r3, r2
 8019a80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8019a82:	687b      	ldr	r3, [r7, #4]
 8019a84:	681b      	ldr	r3, [r3, #0]
 8019a86:	f003 0308 	and.w	r3, r3, #8
 8019a8a:	2b00      	cmp	r3, #0
 8019a8c:	d009      	beq.n	8019aa2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8019a8e:	4b12      	ldr	r3, [pc, #72]	; (8019ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8019a90:	689b      	ldr	r3, [r3, #8]
 8019a92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8019a96:	687b      	ldr	r3, [r7, #4]
 8019a98:	691b      	ldr	r3, [r3, #16]
 8019a9a:	00db      	lsls	r3, r3, #3
 8019a9c:	490e      	ldr	r1, [pc, #56]	; (8019ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8019a9e:	4313      	orrs	r3, r2
 8019aa0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8019aa2:	f000 f821 	bl	8019ae8 <HAL_RCC_GetSysClockFreq>
 8019aa6:	4602      	mov	r2, r0
 8019aa8:	4b0b      	ldr	r3, [pc, #44]	; (8019ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8019aaa:	689b      	ldr	r3, [r3, #8]
 8019aac:	091b      	lsrs	r3, r3, #4
 8019aae:	f003 030f 	and.w	r3, r3, #15
 8019ab2:	490a      	ldr	r1, [pc, #40]	; (8019adc <HAL_RCC_ClockConfig+0x1c0>)
 8019ab4:	5ccb      	ldrb	r3, [r1, r3]
 8019ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8019aba:	4a09      	ldr	r2, [pc, #36]	; (8019ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8019abc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8019abe:	4b09      	ldr	r3, [pc, #36]	; (8019ae4 <HAL_RCC_ClockConfig+0x1c8>)
 8019ac0:	681b      	ldr	r3, [r3, #0]
 8019ac2:	4618      	mov	r0, r3
 8019ac4:	f7fb fef0 	bl	80158a8 <HAL_InitTick>

  return HAL_OK;
 8019ac8:	2300      	movs	r3, #0
}
 8019aca:	4618      	mov	r0, r3
 8019acc:	3710      	adds	r7, #16
 8019ace:	46bd      	mov	sp, r7
 8019ad0:	bd80      	pop	{r7, pc}
 8019ad2:	bf00      	nop
 8019ad4:	40023c00 	.word	0x40023c00
 8019ad8:	40023800 	.word	0x40023800
 8019adc:	0802908c 	.word	0x0802908c
 8019ae0:	2000017c 	.word	0x2000017c
 8019ae4:	20000180 	.word	0x20000180

08019ae8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8019ae8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8019aec:	b094      	sub	sp, #80	; 0x50
 8019aee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8019af0:	2300      	movs	r3, #0
 8019af2:	647b      	str	r3, [r7, #68]	; 0x44
 8019af4:	2300      	movs	r3, #0
 8019af6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8019af8:	2300      	movs	r3, #0
 8019afa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8019afc:	2300      	movs	r3, #0
 8019afe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8019b00:	4b79      	ldr	r3, [pc, #484]	; (8019ce8 <HAL_RCC_GetSysClockFreq+0x200>)
 8019b02:	689b      	ldr	r3, [r3, #8]
 8019b04:	f003 030c 	and.w	r3, r3, #12
 8019b08:	2b08      	cmp	r3, #8
 8019b0a:	d00d      	beq.n	8019b28 <HAL_RCC_GetSysClockFreq+0x40>
 8019b0c:	2b08      	cmp	r3, #8
 8019b0e:	f200 80e1 	bhi.w	8019cd4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8019b12:	2b00      	cmp	r3, #0
 8019b14:	d002      	beq.n	8019b1c <HAL_RCC_GetSysClockFreq+0x34>
 8019b16:	2b04      	cmp	r3, #4
 8019b18:	d003      	beq.n	8019b22 <HAL_RCC_GetSysClockFreq+0x3a>
 8019b1a:	e0db      	b.n	8019cd4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8019b1c:	4b73      	ldr	r3, [pc, #460]	; (8019cec <HAL_RCC_GetSysClockFreq+0x204>)
 8019b1e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8019b20:	e0db      	b.n	8019cda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8019b22:	4b73      	ldr	r3, [pc, #460]	; (8019cf0 <HAL_RCC_GetSysClockFreq+0x208>)
 8019b24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8019b26:	e0d8      	b.n	8019cda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8019b28:	4b6f      	ldr	r3, [pc, #444]	; (8019ce8 <HAL_RCC_GetSysClockFreq+0x200>)
 8019b2a:	685b      	ldr	r3, [r3, #4]
 8019b2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019b30:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8019b32:	4b6d      	ldr	r3, [pc, #436]	; (8019ce8 <HAL_RCC_GetSysClockFreq+0x200>)
 8019b34:	685b      	ldr	r3, [r3, #4]
 8019b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8019b3a:	2b00      	cmp	r3, #0
 8019b3c:	d063      	beq.n	8019c06 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8019b3e:	4b6a      	ldr	r3, [pc, #424]	; (8019ce8 <HAL_RCC_GetSysClockFreq+0x200>)
 8019b40:	685b      	ldr	r3, [r3, #4]
 8019b42:	099b      	lsrs	r3, r3, #6
 8019b44:	2200      	movs	r2, #0
 8019b46:	63bb      	str	r3, [r7, #56]	; 0x38
 8019b48:	63fa      	str	r2, [r7, #60]	; 0x3c
 8019b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019b4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8019b50:	633b      	str	r3, [r7, #48]	; 0x30
 8019b52:	2300      	movs	r3, #0
 8019b54:	637b      	str	r3, [r7, #52]	; 0x34
 8019b56:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8019b5a:	4622      	mov	r2, r4
 8019b5c:	462b      	mov	r3, r5
 8019b5e:	f04f 0000 	mov.w	r0, #0
 8019b62:	f04f 0100 	mov.w	r1, #0
 8019b66:	0159      	lsls	r1, r3, #5
 8019b68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8019b6c:	0150      	lsls	r0, r2, #5
 8019b6e:	4602      	mov	r2, r0
 8019b70:	460b      	mov	r3, r1
 8019b72:	4621      	mov	r1, r4
 8019b74:	1a51      	subs	r1, r2, r1
 8019b76:	6139      	str	r1, [r7, #16]
 8019b78:	4629      	mov	r1, r5
 8019b7a:	eb63 0301 	sbc.w	r3, r3, r1
 8019b7e:	617b      	str	r3, [r7, #20]
 8019b80:	f04f 0200 	mov.w	r2, #0
 8019b84:	f04f 0300 	mov.w	r3, #0
 8019b88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8019b8c:	4659      	mov	r1, fp
 8019b8e:	018b      	lsls	r3, r1, #6
 8019b90:	4651      	mov	r1, sl
 8019b92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8019b96:	4651      	mov	r1, sl
 8019b98:	018a      	lsls	r2, r1, #6
 8019b9a:	4651      	mov	r1, sl
 8019b9c:	ebb2 0801 	subs.w	r8, r2, r1
 8019ba0:	4659      	mov	r1, fp
 8019ba2:	eb63 0901 	sbc.w	r9, r3, r1
 8019ba6:	f04f 0200 	mov.w	r2, #0
 8019baa:	f04f 0300 	mov.w	r3, #0
 8019bae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8019bb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8019bb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8019bba:	4690      	mov	r8, r2
 8019bbc:	4699      	mov	r9, r3
 8019bbe:	4623      	mov	r3, r4
 8019bc0:	eb18 0303 	adds.w	r3, r8, r3
 8019bc4:	60bb      	str	r3, [r7, #8]
 8019bc6:	462b      	mov	r3, r5
 8019bc8:	eb49 0303 	adc.w	r3, r9, r3
 8019bcc:	60fb      	str	r3, [r7, #12]
 8019bce:	f04f 0200 	mov.w	r2, #0
 8019bd2:	f04f 0300 	mov.w	r3, #0
 8019bd6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8019bda:	4629      	mov	r1, r5
 8019bdc:	024b      	lsls	r3, r1, #9
 8019bde:	4621      	mov	r1, r4
 8019be0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8019be4:	4621      	mov	r1, r4
 8019be6:	024a      	lsls	r2, r1, #9
 8019be8:	4610      	mov	r0, r2
 8019bea:	4619      	mov	r1, r3
 8019bec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019bee:	2200      	movs	r2, #0
 8019bf0:	62bb      	str	r3, [r7, #40]	; 0x28
 8019bf2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8019bf4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8019bf8:	f7e6 fffe 	bl	8000bf8 <__aeabi_uldivmod>
 8019bfc:	4602      	mov	r2, r0
 8019bfe:	460b      	mov	r3, r1
 8019c00:	4613      	mov	r3, r2
 8019c02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8019c04:	e058      	b.n	8019cb8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8019c06:	4b38      	ldr	r3, [pc, #224]	; (8019ce8 <HAL_RCC_GetSysClockFreq+0x200>)
 8019c08:	685b      	ldr	r3, [r3, #4]
 8019c0a:	099b      	lsrs	r3, r3, #6
 8019c0c:	2200      	movs	r2, #0
 8019c0e:	4618      	mov	r0, r3
 8019c10:	4611      	mov	r1, r2
 8019c12:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8019c16:	623b      	str	r3, [r7, #32]
 8019c18:	2300      	movs	r3, #0
 8019c1a:	627b      	str	r3, [r7, #36]	; 0x24
 8019c1c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8019c20:	4642      	mov	r2, r8
 8019c22:	464b      	mov	r3, r9
 8019c24:	f04f 0000 	mov.w	r0, #0
 8019c28:	f04f 0100 	mov.w	r1, #0
 8019c2c:	0159      	lsls	r1, r3, #5
 8019c2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8019c32:	0150      	lsls	r0, r2, #5
 8019c34:	4602      	mov	r2, r0
 8019c36:	460b      	mov	r3, r1
 8019c38:	4641      	mov	r1, r8
 8019c3a:	ebb2 0a01 	subs.w	sl, r2, r1
 8019c3e:	4649      	mov	r1, r9
 8019c40:	eb63 0b01 	sbc.w	fp, r3, r1
 8019c44:	f04f 0200 	mov.w	r2, #0
 8019c48:	f04f 0300 	mov.w	r3, #0
 8019c4c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8019c50:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8019c54:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8019c58:	ebb2 040a 	subs.w	r4, r2, sl
 8019c5c:	eb63 050b 	sbc.w	r5, r3, fp
 8019c60:	f04f 0200 	mov.w	r2, #0
 8019c64:	f04f 0300 	mov.w	r3, #0
 8019c68:	00eb      	lsls	r3, r5, #3
 8019c6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8019c6e:	00e2      	lsls	r2, r4, #3
 8019c70:	4614      	mov	r4, r2
 8019c72:	461d      	mov	r5, r3
 8019c74:	4643      	mov	r3, r8
 8019c76:	18e3      	adds	r3, r4, r3
 8019c78:	603b      	str	r3, [r7, #0]
 8019c7a:	464b      	mov	r3, r9
 8019c7c:	eb45 0303 	adc.w	r3, r5, r3
 8019c80:	607b      	str	r3, [r7, #4]
 8019c82:	f04f 0200 	mov.w	r2, #0
 8019c86:	f04f 0300 	mov.w	r3, #0
 8019c8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8019c8e:	4629      	mov	r1, r5
 8019c90:	028b      	lsls	r3, r1, #10
 8019c92:	4621      	mov	r1, r4
 8019c94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8019c98:	4621      	mov	r1, r4
 8019c9a:	028a      	lsls	r2, r1, #10
 8019c9c:	4610      	mov	r0, r2
 8019c9e:	4619      	mov	r1, r3
 8019ca0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019ca2:	2200      	movs	r2, #0
 8019ca4:	61bb      	str	r3, [r7, #24]
 8019ca6:	61fa      	str	r2, [r7, #28]
 8019ca8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8019cac:	f7e6 ffa4 	bl	8000bf8 <__aeabi_uldivmod>
 8019cb0:	4602      	mov	r2, r0
 8019cb2:	460b      	mov	r3, r1
 8019cb4:	4613      	mov	r3, r2
 8019cb6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8019cb8:	4b0b      	ldr	r3, [pc, #44]	; (8019ce8 <HAL_RCC_GetSysClockFreq+0x200>)
 8019cba:	685b      	ldr	r3, [r3, #4]
 8019cbc:	0c1b      	lsrs	r3, r3, #16
 8019cbe:	f003 0303 	and.w	r3, r3, #3
 8019cc2:	3301      	adds	r3, #1
 8019cc4:	005b      	lsls	r3, r3, #1
 8019cc6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8019cc8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8019cca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8019cd0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8019cd2:	e002      	b.n	8019cda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8019cd4:	4b05      	ldr	r3, [pc, #20]	; (8019cec <HAL_RCC_GetSysClockFreq+0x204>)
 8019cd6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8019cd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8019cda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8019cdc:	4618      	mov	r0, r3
 8019cde:	3750      	adds	r7, #80	; 0x50
 8019ce0:	46bd      	mov	sp, r7
 8019ce2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8019ce6:	bf00      	nop
 8019ce8:	40023800 	.word	0x40023800
 8019cec:	00f42400 	.word	0x00f42400
 8019cf0:	007a1200 	.word	0x007a1200

08019cf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8019cf4:	b480      	push	{r7}
 8019cf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8019cf8:	4b03      	ldr	r3, [pc, #12]	; (8019d08 <HAL_RCC_GetHCLKFreq+0x14>)
 8019cfa:	681b      	ldr	r3, [r3, #0]
}
 8019cfc:	4618      	mov	r0, r3
 8019cfe:	46bd      	mov	sp, r7
 8019d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d04:	4770      	bx	lr
 8019d06:	bf00      	nop
 8019d08:	2000017c 	.word	0x2000017c

08019d0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8019d0c:	b580      	push	{r7, lr}
 8019d0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8019d10:	f7ff fff0 	bl	8019cf4 <HAL_RCC_GetHCLKFreq>
 8019d14:	4602      	mov	r2, r0
 8019d16:	4b05      	ldr	r3, [pc, #20]	; (8019d2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8019d18:	689b      	ldr	r3, [r3, #8]
 8019d1a:	0a9b      	lsrs	r3, r3, #10
 8019d1c:	f003 0307 	and.w	r3, r3, #7
 8019d20:	4903      	ldr	r1, [pc, #12]	; (8019d30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8019d22:	5ccb      	ldrb	r3, [r1, r3]
 8019d24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8019d28:	4618      	mov	r0, r3
 8019d2a:	bd80      	pop	{r7, pc}
 8019d2c:	40023800 	.word	0x40023800
 8019d30:	0802909c 	.word	0x0802909c

08019d34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8019d34:	b580      	push	{r7, lr}
 8019d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8019d38:	f7ff ffdc 	bl	8019cf4 <HAL_RCC_GetHCLKFreq>
 8019d3c:	4602      	mov	r2, r0
 8019d3e:	4b05      	ldr	r3, [pc, #20]	; (8019d54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8019d40:	689b      	ldr	r3, [r3, #8]
 8019d42:	0b5b      	lsrs	r3, r3, #13
 8019d44:	f003 0307 	and.w	r3, r3, #7
 8019d48:	4903      	ldr	r1, [pc, #12]	; (8019d58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8019d4a:	5ccb      	ldrb	r3, [r1, r3]
 8019d4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8019d50:	4618      	mov	r0, r3
 8019d52:	bd80      	pop	{r7, pc}
 8019d54:	40023800 	.word	0x40023800
 8019d58:	0802909c 	.word	0x0802909c

08019d5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8019d5c:	b580      	push	{r7, lr}
 8019d5e:	b082      	sub	sp, #8
 8019d60:	af00      	add	r7, sp, #0
 8019d62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8019d64:	687b      	ldr	r3, [r7, #4]
 8019d66:	2b00      	cmp	r3, #0
 8019d68:	d101      	bne.n	8019d6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8019d6a:	2301      	movs	r3, #1
 8019d6c:	e041      	b.n	8019df2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8019d6e:	687b      	ldr	r3, [r7, #4]
 8019d70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019d74:	b2db      	uxtb	r3, r3
 8019d76:	2b00      	cmp	r3, #0
 8019d78:	d106      	bne.n	8019d88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8019d7a:	687b      	ldr	r3, [r7, #4]
 8019d7c:	2200      	movs	r2, #0
 8019d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8019d82:	6878      	ldr	r0, [r7, #4]
 8019d84:	f7fb fa86 	bl	8015294 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8019d88:	687b      	ldr	r3, [r7, #4]
 8019d8a:	2202      	movs	r2, #2
 8019d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8019d90:	687b      	ldr	r3, [r7, #4]
 8019d92:	681a      	ldr	r2, [r3, #0]
 8019d94:	687b      	ldr	r3, [r7, #4]
 8019d96:	3304      	adds	r3, #4
 8019d98:	4619      	mov	r1, r3
 8019d9a:	4610      	mov	r0, r2
 8019d9c:	f000 fcae 	bl	801a6fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8019da0:	687b      	ldr	r3, [r7, #4]
 8019da2:	2201      	movs	r2, #1
 8019da4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8019da8:	687b      	ldr	r3, [r7, #4]
 8019daa:	2201      	movs	r2, #1
 8019dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8019db0:	687b      	ldr	r3, [r7, #4]
 8019db2:	2201      	movs	r2, #1
 8019db4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8019db8:	687b      	ldr	r3, [r7, #4]
 8019dba:	2201      	movs	r2, #1
 8019dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8019dc0:	687b      	ldr	r3, [r7, #4]
 8019dc2:	2201      	movs	r2, #1
 8019dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8019dc8:	687b      	ldr	r3, [r7, #4]
 8019dca:	2201      	movs	r2, #1
 8019dcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8019dd0:	687b      	ldr	r3, [r7, #4]
 8019dd2:	2201      	movs	r2, #1
 8019dd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8019dd8:	687b      	ldr	r3, [r7, #4]
 8019dda:	2201      	movs	r2, #1
 8019ddc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8019de0:	687b      	ldr	r3, [r7, #4]
 8019de2:	2201      	movs	r2, #1
 8019de4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8019de8:	687b      	ldr	r3, [r7, #4]
 8019dea:	2201      	movs	r2, #1
 8019dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8019df0:	2300      	movs	r3, #0
}
 8019df2:	4618      	mov	r0, r3
 8019df4:	3708      	adds	r7, #8
 8019df6:	46bd      	mov	sp, r7
 8019df8:	bd80      	pop	{r7, pc}
	...

08019dfc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8019dfc:	b480      	push	{r7}
 8019dfe:	b085      	sub	sp, #20
 8019e00:	af00      	add	r7, sp, #0
 8019e02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8019e04:	687b      	ldr	r3, [r7, #4]
 8019e06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019e0a:	b2db      	uxtb	r3, r3
 8019e0c:	2b01      	cmp	r3, #1
 8019e0e:	d001      	beq.n	8019e14 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8019e10:	2301      	movs	r3, #1
 8019e12:	e03c      	b.n	8019e8e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8019e14:	687b      	ldr	r3, [r7, #4]
 8019e16:	2202      	movs	r2, #2
 8019e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8019e1c:	687b      	ldr	r3, [r7, #4]
 8019e1e:	681b      	ldr	r3, [r3, #0]
 8019e20:	4a1e      	ldr	r2, [pc, #120]	; (8019e9c <HAL_TIM_Base_Start+0xa0>)
 8019e22:	4293      	cmp	r3, r2
 8019e24:	d018      	beq.n	8019e58 <HAL_TIM_Base_Start+0x5c>
 8019e26:	687b      	ldr	r3, [r7, #4]
 8019e28:	681b      	ldr	r3, [r3, #0]
 8019e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8019e2e:	d013      	beq.n	8019e58 <HAL_TIM_Base_Start+0x5c>
 8019e30:	687b      	ldr	r3, [r7, #4]
 8019e32:	681b      	ldr	r3, [r3, #0]
 8019e34:	4a1a      	ldr	r2, [pc, #104]	; (8019ea0 <HAL_TIM_Base_Start+0xa4>)
 8019e36:	4293      	cmp	r3, r2
 8019e38:	d00e      	beq.n	8019e58 <HAL_TIM_Base_Start+0x5c>
 8019e3a:	687b      	ldr	r3, [r7, #4]
 8019e3c:	681b      	ldr	r3, [r3, #0]
 8019e3e:	4a19      	ldr	r2, [pc, #100]	; (8019ea4 <HAL_TIM_Base_Start+0xa8>)
 8019e40:	4293      	cmp	r3, r2
 8019e42:	d009      	beq.n	8019e58 <HAL_TIM_Base_Start+0x5c>
 8019e44:	687b      	ldr	r3, [r7, #4]
 8019e46:	681b      	ldr	r3, [r3, #0]
 8019e48:	4a17      	ldr	r2, [pc, #92]	; (8019ea8 <HAL_TIM_Base_Start+0xac>)
 8019e4a:	4293      	cmp	r3, r2
 8019e4c:	d004      	beq.n	8019e58 <HAL_TIM_Base_Start+0x5c>
 8019e4e:	687b      	ldr	r3, [r7, #4]
 8019e50:	681b      	ldr	r3, [r3, #0]
 8019e52:	4a16      	ldr	r2, [pc, #88]	; (8019eac <HAL_TIM_Base_Start+0xb0>)
 8019e54:	4293      	cmp	r3, r2
 8019e56:	d111      	bne.n	8019e7c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8019e58:	687b      	ldr	r3, [r7, #4]
 8019e5a:	681b      	ldr	r3, [r3, #0]
 8019e5c:	689b      	ldr	r3, [r3, #8]
 8019e5e:	f003 0307 	and.w	r3, r3, #7
 8019e62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8019e64:	68fb      	ldr	r3, [r7, #12]
 8019e66:	2b06      	cmp	r3, #6
 8019e68:	d010      	beq.n	8019e8c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8019e6a:	687b      	ldr	r3, [r7, #4]
 8019e6c:	681b      	ldr	r3, [r3, #0]
 8019e6e:	681a      	ldr	r2, [r3, #0]
 8019e70:	687b      	ldr	r3, [r7, #4]
 8019e72:	681b      	ldr	r3, [r3, #0]
 8019e74:	f042 0201 	orr.w	r2, r2, #1
 8019e78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8019e7a:	e007      	b.n	8019e8c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8019e7c:	687b      	ldr	r3, [r7, #4]
 8019e7e:	681b      	ldr	r3, [r3, #0]
 8019e80:	681a      	ldr	r2, [r3, #0]
 8019e82:	687b      	ldr	r3, [r7, #4]
 8019e84:	681b      	ldr	r3, [r3, #0]
 8019e86:	f042 0201 	orr.w	r2, r2, #1
 8019e8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8019e8c:	2300      	movs	r3, #0
}
 8019e8e:	4618      	mov	r0, r3
 8019e90:	3714      	adds	r7, #20
 8019e92:	46bd      	mov	sp, r7
 8019e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e98:	4770      	bx	lr
 8019e9a:	bf00      	nop
 8019e9c:	40010000 	.word	0x40010000
 8019ea0:	40000400 	.word	0x40000400
 8019ea4:	40000800 	.word	0x40000800
 8019ea8:	40000c00 	.word	0x40000c00
 8019eac:	40014000 	.word	0x40014000

08019eb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8019eb0:	b480      	push	{r7}
 8019eb2:	b085      	sub	sp, #20
 8019eb4:	af00      	add	r7, sp, #0
 8019eb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8019eb8:	687b      	ldr	r3, [r7, #4]
 8019eba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019ebe:	b2db      	uxtb	r3, r3
 8019ec0:	2b01      	cmp	r3, #1
 8019ec2:	d001      	beq.n	8019ec8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8019ec4:	2301      	movs	r3, #1
 8019ec6:	e044      	b.n	8019f52 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8019ec8:	687b      	ldr	r3, [r7, #4]
 8019eca:	2202      	movs	r2, #2
 8019ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8019ed0:	687b      	ldr	r3, [r7, #4]
 8019ed2:	681b      	ldr	r3, [r3, #0]
 8019ed4:	68da      	ldr	r2, [r3, #12]
 8019ed6:	687b      	ldr	r3, [r7, #4]
 8019ed8:	681b      	ldr	r3, [r3, #0]
 8019eda:	f042 0201 	orr.w	r2, r2, #1
 8019ede:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8019ee0:	687b      	ldr	r3, [r7, #4]
 8019ee2:	681b      	ldr	r3, [r3, #0]
 8019ee4:	4a1e      	ldr	r2, [pc, #120]	; (8019f60 <HAL_TIM_Base_Start_IT+0xb0>)
 8019ee6:	4293      	cmp	r3, r2
 8019ee8:	d018      	beq.n	8019f1c <HAL_TIM_Base_Start_IT+0x6c>
 8019eea:	687b      	ldr	r3, [r7, #4]
 8019eec:	681b      	ldr	r3, [r3, #0]
 8019eee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8019ef2:	d013      	beq.n	8019f1c <HAL_TIM_Base_Start_IT+0x6c>
 8019ef4:	687b      	ldr	r3, [r7, #4]
 8019ef6:	681b      	ldr	r3, [r3, #0]
 8019ef8:	4a1a      	ldr	r2, [pc, #104]	; (8019f64 <HAL_TIM_Base_Start_IT+0xb4>)
 8019efa:	4293      	cmp	r3, r2
 8019efc:	d00e      	beq.n	8019f1c <HAL_TIM_Base_Start_IT+0x6c>
 8019efe:	687b      	ldr	r3, [r7, #4]
 8019f00:	681b      	ldr	r3, [r3, #0]
 8019f02:	4a19      	ldr	r2, [pc, #100]	; (8019f68 <HAL_TIM_Base_Start_IT+0xb8>)
 8019f04:	4293      	cmp	r3, r2
 8019f06:	d009      	beq.n	8019f1c <HAL_TIM_Base_Start_IT+0x6c>
 8019f08:	687b      	ldr	r3, [r7, #4]
 8019f0a:	681b      	ldr	r3, [r3, #0]
 8019f0c:	4a17      	ldr	r2, [pc, #92]	; (8019f6c <HAL_TIM_Base_Start_IT+0xbc>)
 8019f0e:	4293      	cmp	r3, r2
 8019f10:	d004      	beq.n	8019f1c <HAL_TIM_Base_Start_IT+0x6c>
 8019f12:	687b      	ldr	r3, [r7, #4]
 8019f14:	681b      	ldr	r3, [r3, #0]
 8019f16:	4a16      	ldr	r2, [pc, #88]	; (8019f70 <HAL_TIM_Base_Start_IT+0xc0>)
 8019f18:	4293      	cmp	r3, r2
 8019f1a:	d111      	bne.n	8019f40 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8019f1c:	687b      	ldr	r3, [r7, #4]
 8019f1e:	681b      	ldr	r3, [r3, #0]
 8019f20:	689b      	ldr	r3, [r3, #8]
 8019f22:	f003 0307 	and.w	r3, r3, #7
 8019f26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8019f28:	68fb      	ldr	r3, [r7, #12]
 8019f2a:	2b06      	cmp	r3, #6
 8019f2c:	d010      	beq.n	8019f50 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8019f2e:	687b      	ldr	r3, [r7, #4]
 8019f30:	681b      	ldr	r3, [r3, #0]
 8019f32:	681a      	ldr	r2, [r3, #0]
 8019f34:	687b      	ldr	r3, [r7, #4]
 8019f36:	681b      	ldr	r3, [r3, #0]
 8019f38:	f042 0201 	orr.w	r2, r2, #1
 8019f3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8019f3e:	e007      	b.n	8019f50 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8019f40:	687b      	ldr	r3, [r7, #4]
 8019f42:	681b      	ldr	r3, [r3, #0]
 8019f44:	681a      	ldr	r2, [r3, #0]
 8019f46:	687b      	ldr	r3, [r7, #4]
 8019f48:	681b      	ldr	r3, [r3, #0]
 8019f4a:	f042 0201 	orr.w	r2, r2, #1
 8019f4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8019f50:	2300      	movs	r3, #0
}
 8019f52:	4618      	mov	r0, r3
 8019f54:	3714      	adds	r7, #20
 8019f56:	46bd      	mov	sp, r7
 8019f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f5c:	4770      	bx	lr
 8019f5e:	bf00      	nop
 8019f60:	40010000 	.word	0x40010000
 8019f64:	40000400 	.word	0x40000400
 8019f68:	40000800 	.word	0x40000800
 8019f6c:	40000c00 	.word	0x40000c00
 8019f70:	40014000 	.word	0x40014000

08019f74 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8019f74:	b580      	push	{r7, lr}
 8019f76:	b082      	sub	sp, #8
 8019f78:	af00      	add	r7, sp, #0
 8019f7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8019f7c:	687b      	ldr	r3, [r7, #4]
 8019f7e:	2b00      	cmp	r3, #0
 8019f80:	d101      	bne.n	8019f86 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8019f82:	2301      	movs	r3, #1
 8019f84:	e041      	b.n	801a00a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8019f86:	687b      	ldr	r3, [r7, #4]
 8019f88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019f8c:	b2db      	uxtb	r3, r3
 8019f8e:	2b00      	cmp	r3, #0
 8019f90:	d106      	bne.n	8019fa0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8019f92:	687b      	ldr	r3, [r7, #4]
 8019f94:	2200      	movs	r2, #0
 8019f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8019f9a:	6878      	ldr	r0, [r7, #4]
 8019f9c:	f000 f839 	bl	801a012 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8019fa0:	687b      	ldr	r3, [r7, #4]
 8019fa2:	2202      	movs	r2, #2
 8019fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8019fa8:	687b      	ldr	r3, [r7, #4]
 8019faa:	681a      	ldr	r2, [r3, #0]
 8019fac:	687b      	ldr	r3, [r7, #4]
 8019fae:	3304      	adds	r3, #4
 8019fb0:	4619      	mov	r1, r3
 8019fb2:	4610      	mov	r0, r2
 8019fb4:	f000 fba2 	bl	801a6fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8019fb8:	687b      	ldr	r3, [r7, #4]
 8019fba:	2201      	movs	r2, #1
 8019fbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8019fc0:	687b      	ldr	r3, [r7, #4]
 8019fc2:	2201      	movs	r2, #1
 8019fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8019fc8:	687b      	ldr	r3, [r7, #4]
 8019fca:	2201      	movs	r2, #1
 8019fcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8019fd0:	687b      	ldr	r3, [r7, #4]
 8019fd2:	2201      	movs	r2, #1
 8019fd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8019fd8:	687b      	ldr	r3, [r7, #4]
 8019fda:	2201      	movs	r2, #1
 8019fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8019fe0:	687b      	ldr	r3, [r7, #4]
 8019fe2:	2201      	movs	r2, #1
 8019fe4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8019fe8:	687b      	ldr	r3, [r7, #4]
 8019fea:	2201      	movs	r2, #1
 8019fec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8019ff0:	687b      	ldr	r3, [r7, #4]
 8019ff2:	2201      	movs	r2, #1
 8019ff4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8019ff8:	687b      	ldr	r3, [r7, #4]
 8019ffa:	2201      	movs	r2, #1
 8019ffc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801a000:	687b      	ldr	r3, [r7, #4]
 801a002:	2201      	movs	r2, #1
 801a004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801a008:	2300      	movs	r3, #0
}
 801a00a:	4618      	mov	r0, r3
 801a00c:	3708      	adds	r7, #8
 801a00e:	46bd      	mov	sp, r7
 801a010:	bd80      	pop	{r7, pc}

0801a012 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 801a012:	b480      	push	{r7}
 801a014:	b083      	sub	sp, #12
 801a016:	af00      	add	r7, sp, #0
 801a018:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 801a01a:	bf00      	nop
 801a01c:	370c      	adds	r7, #12
 801a01e:	46bd      	mov	sp, r7
 801a020:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a024:	4770      	bx	lr
	...

0801a028 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801a028:	b580      	push	{r7, lr}
 801a02a:	b084      	sub	sp, #16
 801a02c:	af00      	add	r7, sp, #0
 801a02e:	6078      	str	r0, [r7, #4]
 801a030:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801a032:	683b      	ldr	r3, [r7, #0]
 801a034:	2b00      	cmp	r3, #0
 801a036:	d109      	bne.n	801a04c <HAL_TIM_PWM_Start+0x24>
 801a038:	687b      	ldr	r3, [r7, #4]
 801a03a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801a03e:	b2db      	uxtb	r3, r3
 801a040:	2b01      	cmp	r3, #1
 801a042:	bf14      	ite	ne
 801a044:	2301      	movne	r3, #1
 801a046:	2300      	moveq	r3, #0
 801a048:	b2db      	uxtb	r3, r3
 801a04a:	e022      	b.n	801a092 <HAL_TIM_PWM_Start+0x6a>
 801a04c:	683b      	ldr	r3, [r7, #0]
 801a04e:	2b04      	cmp	r3, #4
 801a050:	d109      	bne.n	801a066 <HAL_TIM_PWM_Start+0x3e>
 801a052:	687b      	ldr	r3, [r7, #4]
 801a054:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801a058:	b2db      	uxtb	r3, r3
 801a05a:	2b01      	cmp	r3, #1
 801a05c:	bf14      	ite	ne
 801a05e:	2301      	movne	r3, #1
 801a060:	2300      	moveq	r3, #0
 801a062:	b2db      	uxtb	r3, r3
 801a064:	e015      	b.n	801a092 <HAL_TIM_PWM_Start+0x6a>
 801a066:	683b      	ldr	r3, [r7, #0]
 801a068:	2b08      	cmp	r3, #8
 801a06a:	d109      	bne.n	801a080 <HAL_TIM_PWM_Start+0x58>
 801a06c:	687b      	ldr	r3, [r7, #4]
 801a06e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801a072:	b2db      	uxtb	r3, r3
 801a074:	2b01      	cmp	r3, #1
 801a076:	bf14      	ite	ne
 801a078:	2301      	movne	r3, #1
 801a07a:	2300      	moveq	r3, #0
 801a07c:	b2db      	uxtb	r3, r3
 801a07e:	e008      	b.n	801a092 <HAL_TIM_PWM_Start+0x6a>
 801a080:	687b      	ldr	r3, [r7, #4]
 801a082:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801a086:	b2db      	uxtb	r3, r3
 801a088:	2b01      	cmp	r3, #1
 801a08a:	bf14      	ite	ne
 801a08c:	2301      	movne	r3, #1
 801a08e:	2300      	moveq	r3, #0
 801a090:	b2db      	uxtb	r3, r3
 801a092:	2b00      	cmp	r3, #0
 801a094:	d001      	beq.n	801a09a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 801a096:	2301      	movs	r3, #1
 801a098:	e068      	b.n	801a16c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801a09a:	683b      	ldr	r3, [r7, #0]
 801a09c:	2b00      	cmp	r3, #0
 801a09e:	d104      	bne.n	801a0aa <HAL_TIM_PWM_Start+0x82>
 801a0a0:	687b      	ldr	r3, [r7, #4]
 801a0a2:	2202      	movs	r2, #2
 801a0a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801a0a8:	e013      	b.n	801a0d2 <HAL_TIM_PWM_Start+0xaa>
 801a0aa:	683b      	ldr	r3, [r7, #0]
 801a0ac:	2b04      	cmp	r3, #4
 801a0ae:	d104      	bne.n	801a0ba <HAL_TIM_PWM_Start+0x92>
 801a0b0:	687b      	ldr	r3, [r7, #4]
 801a0b2:	2202      	movs	r2, #2
 801a0b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801a0b8:	e00b      	b.n	801a0d2 <HAL_TIM_PWM_Start+0xaa>
 801a0ba:	683b      	ldr	r3, [r7, #0]
 801a0bc:	2b08      	cmp	r3, #8
 801a0be:	d104      	bne.n	801a0ca <HAL_TIM_PWM_Start+0xa2>
 801a0c0:	687b      	ldr	r3, [r7, #4]
 801a0c2:	2202      	movs	r2, #2
 801a0c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801a0c8:	e003      	b.n	801a0d2 <HAL_TIM_PWM_Start+0xaa>
 801a0ca:	687b      	ldr	r3, [r7, #4]
 801a0cc:	2202      	movs	r2, #2
 801a0ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801a0d2:	687b      	ldr	r3, [r7, #4]
 801a0d4:	681b      	ldr	r3, [r3, #0]
 801a0d6:	2201      	movs	r2, #1
 801a0d8:	6839      	ldr	r1, [r7, #0]
 801a0da:	4618      	mov	r0, r3
 801a0dc:	f000 fdb4 	bl	801ac48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801a0e0:	687b      	ldr	r3, [r7, #4]
 801a0e2:	681b      	ldr	r3, [r3, #0]
 801a0e4:	4a23      	ldr	r2, [pc, #140]	; (801a174 <HAL_TIM_PWM_Start+0x14c>)
 801a0e6:	4293      	cmp	r3, r2
 801a0e8:	d107      	bne.n	801a0fa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801a0ea:	687b      	ldr	r3, [r7, #4]
 801a0ec:	681b      	ldr	r3, [r3, #0]
 801a0ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801a0f0:	687b      	ldr	r3, [r7, #4]
 801a0f2:	681b      	ldr	r3, [r3, #0]
 801a0f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801a0f8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801a0fa:	687b      	ldr	r3, [r7, #4]
 801a0fc:	681b      	ldr	r3, [r3, #0]
 801a0fe:	4a1d      	ldr	r2, [pc, #116]	; (801a174 <HAL_TIM_PWM_Start+0x14c>)
 801a100:	4293      	cmp	r3, r2
 801a102:	d018      	beq.n	801a136 <HAL_TIM_PWM_Start+0x10e>
 801a104:	687b      	ldr	r3, [r7, #4]
 801a106:	681b      	ldr	r3, [r3, #0]
 801a108:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801a10c:	d013      	beq.n	801a136 <HAL_TIM_PWM_Start+0x10e>
 801a10e:	687b      	ldr	r3, [r7, #4]
 801a110:	681b      	ldr	r3, [r3, #0]
 801a112:	4a19      	ldr	r2, [pc, #100]	; (801a178 <HAL_TIM_PWM_Start+0x150>)
 801a114:	4293      	cmp	r3, r2
 801a116:	d00e      	beq.n	801a136 <HAL_TIM_PWM_Start+0x10e>
 801a118:	687b      	ldr	r3, [r7, #4]
 801a11a:	681b      	ldr	r3, [r3, #0]
 801a11c:	4a17      	ldr	r2, [pc, #92]	; (801a17c <HAL_TIM_PWM_Start+0x154>)
 801a11e:	4293      	cmp	r3, r2
 801a120:	d009      	beq.n	801a136 <HAL_TIM_PWM_Start+0x10e>
 801a122:	687b      	ldr	r3, [r7, #4]
 801a124:	681b      	ldr	r3, [r3, #0]
 801a126:	4a16      	ldr	r2, [pc, #88]	; (801a180 <HAL_TIM_PWM_Start+0x158>)
 801a128:	4293      	cmp	r3, r2
 801a12a:	d004      	beq.n	801a136 <HAL_TIM_PWM_Start+0x10e>
 801a12c:	687b      	ldr	r3, [r7, #4]
 801a12e:	681b      	ldr	r3, [r3, #0]
 801a130:	4a14      	ldr	r2, [pc, #80]	; (801a184 <HAL_TIM_PWM_Start+0x15c>)
 801a132:	4293      	cmp	r3, r2
 801a134:	d111      	bne.n	801a15a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801a136:	687b      	ldr	r3, [r7, #4]
 801a138:	681b      	ldr	r3, [r3, #0]
 801a13a:	689b      	ldr	r3, [r3, #8]
 801a13c:	f003 0307 	and.w	r3, r3, #7
 801a140:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801a142:	68fb      	ldr	r3, [r7, #12]
 801a144:	2b06      	cmp	r3, #6
 801a146:	d010      	beq.n	801a16a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 801a148:	687b      	ldr	r3, [r7, #4]
 801a14a:	681b      	ldr	r3, [r3, #0]
 801a14c:	681a      	ldr	r2, [r3, #0]
 801a14e:	687b      	ldr	r3, [r7, #4]
 801a150:	681b      	ldr	r3, [r3, #0]
 801a152:	f042 0201 	orr.w	r2, r2, #1
 801a156:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801a158:	e007      	b.n	801a16a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801a15a:	687b      	ldr	r3, [r7, #4]
 801a15c:	681b      	ldr	r3, [r3, #0]
 801a15e:	681a      	ldr	r2, [r3, #0]
 801a160:	687b      	ldr	r3, [r7, #4]
 801a162:	681b      	ldr	r3, [r3, #0]
 801a164:	f042 0201 	orr.w	r2, r2, #1
 801a168:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801a16a:	2300      	movs	r3, #0
}
 801a16c:	4618      	mov	r0, r3
 801a16e:	3710      	adds	r7, #16
 801a170:	46bd      	mov	sp, r7
 801a172:	bd80      	pop	{r7, pc}
 801a174:	40010000 	.word	0x40010000
 801a178:	40000400 	.word	0x40000400
 801a17c:	40000800 	.word	0x40000800
 801a180:	40000c00 	.word	0x40000c00
 801a184:	40014000 	.word	0x40014000

0801a188 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801a188:	b580      	push	{r7, lr}
 801a18a:	b082      	sub	sp, #8
 801a18c:	af00      	add	r7, sp, #0
 801a18e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801a190:	687b      	ldr	r3, [r7, #4]
 801a192:	681b      	ldr	r3, [r3, #0]
 801a194:	691b      	ldr	r3, [r3, #16]
 801a196:	f003 0302 	and.w	r3, r3, #2
 801a19a:	2b02      	cmp	r3, #2
 801a19c:	d122      	bne.n	801a1e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801a19e:	687b      	ldr	r3, [r7, #4]
 801a1a0:	681b      	ldr	r3, [r3, #0]
 801a1a2:	68db      	ldr	r3, [r3, #12]
 801a1a4:	f003 0302 	and.w	r3, r3, #2
 801a1a8:	2b02      	cmp	r3, #2
 801a1aa:	d11b      	bne.n	801a1e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801a1ac:	687b      	ldr	r3, [r7, #4]
 801a1ae:	681b      	ldr	r3, [r3, #0]
 801a1b0:	f06f 0202 	mvn.w	r2, #2
 801a1b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801a1b6:	687b      	ldr	r3, [r7, #4]
 801a1b8:	2201      	movs	r2, #1
 801a1ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801a1bc:	687b      	ldr	r3, [r7, #4]
 801a1be:	681b      	ldr	r3, [r3, #0]
 801a1c0:	699b      	ldr	r3, [r3, #24]
 801a1c2:	f003 0303 	and.w	r3, r3, #3
 801a1c6:	2b00      	cmp	r3, #0
 801a1c8:	d003      	beq.n	801a1d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801a1ca:	6878      	ldr	r0, [r7, #4]
 801a1cc:	f000 fa77 	bl	801a6be <HAL_TIM_IC_CaptureCallback>
 801a1d0:	e005      	b.n	801a1de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801a1d2:	6878      	ldr	r0, [r7, #4]
 801a1d4:	f000 fa69 	bl	801a6aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801a1d8:	6878      	ldr	r0, [r7, #4]
 801a1da:	f000 fa7a 	bl	801a6d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801a1de:	687b      	ldr	r3, [r7, #4]
 801a1e0:	2200      	movs	r2, #0
 801a1e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801a1e4:	687b      	ldr	r3, [r7, #4]
 801a1e6:	681b      	ldr	r3, [r3, #0]
 801a1e8:	691b      	ldr	r3, [r3, #16]
 801a1ea:	f003 0304 	and.w	r3, r3, #4
 801a1ee:	2b04      	cmp	r3, #4
 801a1f0:	d122      	bne.n	801a238 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801a1f2:	687b      	ldr	r3, [r7, #4]
 801a1f4:	681b      	ldr	r3, [r3, #0]
 801a1f6:	68db      	ldr	r3, [r3, #12]
 801a1f8:	f003 0304 	and.w	r3, r3, #4
 801a1fc:	2b04      	cmp	r3, #4
 801a1fe:	d11b      	bne.n	801a238 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801a200:	687b      	ldr	r3, [r7, #4]
 801a202:	681b      	ldr	r3, [r3, #0]
 801a204:	f06f 0204 	mvn.w	r2, #4
 801a208:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801a20a:	687b      	ldr	r3, [r7, #4]
 801a20c:	2202      	movs	r2, #2
 801a20e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801a210:	687b      	ldr	r3, [r7, #4]
 801a212:	681b      	ldr	r3, [r3, #0]
 801a214:	699b      	ldr	r3, [r3, #24]
 801a216:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801a21a:	2b00      	cmp	r3, #0
 801a21c:	d003      	beq.n	801a226 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801a21e:	6878      	ldr	r0, [r7, #4]
 801a220:	f000 fa4d 	bl	801a6be <HAL_TIM_IC_CaptureCallback>
 801a224:	e005      	b.n	801a232 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801a226:	6878      	ldr	r0, [r7, #4]
 801a228:	f000 fa3f 	bl	801a6aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801a22c:	6878      	ldr	r0, [r7, #4]
 801a22e:	f000 fa50 	bl	801a6d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801a232:	687b      	ldr	r3, [r7, #4]
 801a234:	2200      	movs	r2, #0
 801a236:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801a238:	687b      	ldr	r3, [r7, #4]
 801a23a:	681b      	ldr	r3, [r3, #0]
 801a23c:	691b      	ldr	r3, [r3, #16]
 801a23e:	f003 0308 	and.w	r3, r3, #8
 801a242:	2b08      	cmp	r3, #8
 801a244:	d122      	bne.n	801a28c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801a246:	687b      	ldr	r3, [r7, #4]
 801a248:	681b      	ldr	r3, [r3, #0]
 801a24a:	68db      	ldr	r3, [r3, #12]
 801a24c:	f003 0308 	and.w	r3, r3, #8
 801a250:	2b08      	cmp	r3, #8
 801a252:	d11b      	bne.n	801a28c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801a254:	687b      	ldr	r3, [r7, #4]
 801a256:	681b      	ldr	r3, [r3, #0]
 801a258:	f06f 0208 	mvn.w	r2, #8
 801a25c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801a25e:	687b      	ldr	r3, [r7, #4]
 801a260:	2204      	movs	r2, #4
 801a262:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801a264:	687b      	ldr	r3, [r7, #4]
 801a266:	681b      	ldr	r3, [r3, #0]
 801a268:	69db      	ldr	r3, [r3, #28]
 801a26a:	f003 0303 	and.w	r3, r3, #3
 801a26e:	2b00      	cmp	r3, #0
 801a270:	d003      	beq.n	801a27a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801a272:	6878      	ldr	r0, [r7, #4]
 801a274:	f000 fa23 	bl	801a6be <HAL_TIM_IC_CaptureCallback>
 801a278:	e005      	b.n	801a286 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801a27a:	6878      	ldr	r0, [r7, #4]
 801a27c:	f000 fa15 	bl	801a6aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801a280:	6878      	ldr	r0, [r7, #4]
 801a282:	f000 fa26 	bl	801a6d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801a286:	687b      	ldr	r3, [r7, #4]
 801a288:	2200      	movs	r2, #0
 801a28a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801a28c:	687b      	ldr	r3, [r7, #4]
 801a28e:	681b      	ldr	r3, [r3, #0]
 801a290:	691b      	ldr	r3, [r3, #16]
 801a292:	f003 0310 	and.w	r3, r3, #16
 801a296:	2b10      	cmp	r3, #16
 801a298:	d122      	bne.n	801a2e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801a29a:	687b      	ldr	r3, [r7, #4]
 801a29c:	681b      	ldr	r3, [r3, #0]
 801a29e:	68db      	ldr	r3, [r3, #12]
 801a2a0:	f003 0310 	and.w	r3, r3, #16
 801a2a4:	2b10      	cmp	r3, #16
 801a2a6:	d11b      	bne.n	801a2e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801a2a8:	687b      	ldr	r3, [r7, #4]
 801a2aa:	681b      	ldr	r3, [r3, #0]
 801a2ac:	f06f 0210 	mvn.w	r2, #16
 801a2b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801a2b2:	687b      	ldr	r3, [r7, #4]
 801a2b4:	2208      	movs	r2, #8
 801a2b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801a2b8:	687b      	ldr	r3, [r7, #4]
 801a2ba:	681b      	ldr	r3, [r3, #0]
 801a2bc:	69db      	ldr	r3, [r3, #28]
 801a2be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801a2c2:	2b00      	cmp	r3, #0
 801a2c4:	d003      	beq.n	801a2ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801a2c6:	6878      	ldr	r0, [r7, #4]
 801a2c8:	f000 f9f9 	bl	801a6be <HAL_TIM_IC_CaptureCallback>
 801a2cc:	e005      	b.n	801a2da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801a2ce:	6878      	ldr	r0, [r7, #4]
 801a2d0:	f000 f9eb 	bl	801a6aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801a2d4:	6878      	ldr	r0, [r7, #4]
 801a2d6:	f000 f9fc 	bl	801a6d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801a2da:	687b      	ldr	r3, [r7, #4]
 801a2dc:	2200      	movs	r2, #0
 801a2de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801a2e0:	687b      	ldr	r3, [r7, #4]
 801a2e2:	681b      	ldr	r3, [r3, #0]
 801a2e4:	691b      	ldr	r3, [r3, #16]
 801a2e6:	f003 0301 	and.w	r3, r3, #1
 801a2ea:	2b01      	cmp	r3, #1
 801a2ec:	d10e      	bne.n	801a30c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801a2ee:	687b      	ldr	r3, [r7, #4]
 801a2f0:	681b      	ldr	r3, [r3, #0]
 801a2f2:	68db      	ldr	r3, [r3, #12]
 801a2f4:	f003 0301 	and.w	r3, r3, #1
 801a2f8:	2b01      	cmp	r3, #1
 801a2fa:	d107      	bne.n	801a30c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801a2fc:	687b      	ldr	r3, [r7, #4]
 801a2fe:	681b      	ldr	r3, [r3, #0]
 801a300:	f06f 0201 	mvn.w	r2, #1
 801a304:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801a306:	6878      	ldr	r0, [r7, #4]
 801a308:	f7e9 f85e 	bl	80033c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801a30c:	687b      	ldr	r3, [r7, #4]
 801a30e:	681b      	ldr	r3, [r3, #0]
 801a310:	691b      	ldr	r3, [r3, #16]
 801a312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a316:	2b80      	cmp	r3, #128	; 0x80
 801a318:	d10e      	bne.n	801a338 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801a31a:	687b      	ldr	r3, [r7, #4]
 801a31c:	681b      	ldr	r3, [r3, #0]
 801a31e:	68db      	ldr	r3, [r3, #12]
 801a320:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a324:	2b80      	cmp	r3, #128	; 0x80
 801a326:	d107      	bne.n	801a338 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801a328:	687b      	ldr	r3, [r7, #4]
 801a32a:	681b      	ldr	r3, [r3, #0]
 801a32c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801a330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801a332:	6878      	ldr	r0, [r7, #4]
 801a334:	f000 fd26 	bl	801ad84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801a338:	687b      	ldr	r3, [r7, #4]
 801a33a:	681b      	ldr	r3, [r3, #0]
 801a33c:	691b      	ldr	r3, [r3, #16]
 801a33e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a342:	2b40      	cmp	r3, #64	; 0x40
 801a344:	d10e      	bne.n	801a364 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801a346:	687b      	ldr	r3, [r7, #4]
 801a348:	681b      	ldr	r3, [r3, #0]
 801a34a:	68db      	ldr	r3, [r3, #12]
 801a34c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a350:	2b40      	cmp	r3, #64	; 0x40
 801a352:	d107      	bne.n	801a364 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801a354:	687b      	ldr	r3, [r7, #4]
 801a356:	681b      	ldr	r3, [r3, #0]
 801a358:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801a35c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801a35e:	6878      	ldr	r0, [r7, #4]
 801a360:	f000 f9c1 	bl	801a6e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801a364:	687b      	ldr	r3, [r7, #4]
 801a366:	681b      	ldr	r3, [r3, #0]
 801a368:	691b      	ldr	r3, [r3, #16]
 801a36a:	f003 0320 	and.w	r3, r3, #32
 801a36e:	2b20      	cmp	r3, #32
 801a370:	d10e      	bne.n	801a390 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801a372:	687b      	ldr	r3, [r7, #4]
 801a374:	681b      	ldr	r3, [r3, #0]
 801a376:	68db      	ldr	r3, [r3, #12]
 801a378:	f003 0320 	and.w	r3, r3, #32
 801a37c:	2b20      	cmp	r3, #32
 801a37e:	d107      	bne.n	801a390 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801a380:	687b      	ldr	r3, [r7, #4]
 801a382:	681b      	ldr	r3, [r3, #0]
 801a384:	f06f 0220 	mvn.w	r2, #32
 801a388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801a38a:	6878      	ldr	r0, [r7, #4]
 801a38c:	f000 fcf0 	bl	801ad70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801a390:	bf00      	nop
 801a392:	3708      	adds	r7, #8
 801a394:	46bd      	mov	sp, r7
 801a396:	bd80      	pop	{r7, pc}

0801a398 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801a398:	b580      	push	{r7, lr}
 801a39a:	b086      	sub	sp, #24
 801a39c:	af00      	add	r7, sp, #0
 801a39e:	60f8      	str	r0, [r7, #12]
 801a3a0:	60b9      	str	r1, [r7, #8]
 801a3a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801a3a4:	2300      	movs	r3, #0
 801a3a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801a3a8:	68fb      	ldr	r3, [r7, #12]
 801a3aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801a3ae:	2b01      	cmp	r3, #1
 801a3b0:	d101      	bne.n	801a3b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 801a3b2:	2302      	movs	r3, #2
 801a3b4:	e0ae      	b.n	801a514 <HAL_TIM_PWM_ConfigChannel+0x17c>
 801a3b6:	68fb      	ldr	r3, [r7, #12]
 801a3b8:	2201      	movs	r2, #1
 801a3ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 801a3be:	687b      	ldr	r3, [r7, #4]
 801a3c0:	2b0c      	cmp	r3, #12
 801a3c2:	f200 809f 	bhi.w	801a504 <HAL_TIM_PWM_ConfigChannel+0x16c>
 801a3c6:	a201      	add	r2, pc, #4	; (adr r2, 801a3cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 801a3c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a3cc:	0801a401 	.word	0x0801a401
 801a3d0:	0801a505 	.word	0x0801a505
 801a3d4:	0801a505 	.word	0x0801a505
 801a3d8:	0801a505 	.word	0x0801a505
 801a3dc:	0801a441 	.word	0x0801a441
 801a3e0:	0801a505 	.word	0x0801a505
 801a3e4:	0801a505 	.word	0x0801a505
 801a3e8:	0801a505 	.word	0x0801a505
 801a3ec:	0801a483 	.word	0x0801a483
 801a3f0:	0801a505 	.word	0x0801a505
 801a3f4:	0801a505 	.word	0x0801a505
 801a3f8:	0801a505 	.word	0x0801a505
 801a3fc:	0801a4c3 	.word	0x0801a4c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801a400:	68fb      	ldr	r3, [r7, #12]
 801a402:	681b      	ldr	r3, [r3, #0]
 801a404:	68b9      	ldr	r1, [r7, #8]
 801a406:	4618      	mov	r0, r3
 801a408:	f000 f9f8 	bl	801a7fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801a40c:	68fb      	ldr	r3, [r7, #12]
 801a40e:	681b      	ldr	r3, [r3, #0]
 801a410:	699a      	ldr	r2, [r3, #24]
 801a412:	68fb      	ldr	r3, [r7, #12]
 801a414:	681b      	ldr	r3, [r3, #0]
 801a416:	f042 0208 	orr.w	r2, r2, #8
 801a41a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801a41c:	68fb      	ldr	r3, [r7, #12]
 801a41e:	681b      	ldr	r3, [r3, #0]
 801a420:	699a      	ldr	r2, [r3, #24]
 801a422:	68fb      	ldr	r3, [r7, #12]
 801a424:	681b      	ldr	r3, [r3, #0]
 801a426:	f022 0204 	bic.w	r2, r2, #4
 801a42a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801a42c:	68fb      	ldr	r3, [r7, #12]
 801a42e:	681b      	ldr	r3, [r3, #0]
 801a430:	6999      	ldr	r1, [r3, #24]
 801a432:	68bb      	ldr	r3, [r7, #8]
 801a434:	691a      	ldr	r2, [r3, #16]
 801a436:	68fb      	ldr	r3, [r7, #12]
 801a438:	681b      	ldr	r3, [r3, #0]
 801a43a:	430a      	orrs	r2, r1
 801a43c:	619a      	str	r2, [r3, #24]
      break;
 801a43e:	e064      	b.n	801a50a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801a440:	68fb      	ldr	r3, [r7, #12]
 801a442:	681b      	ldr	r3, [r3, #0]
 801a444:	68b9      	ldr	r1, [r7, #8]
 801a446:	4618      	mov	r0, r3
 801a448:	f000 fa3e 	bl	801a8c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801a44c:	68fb      	ldr	r3, [r7, #12]
 801a44e:	681b      	ldr	r3, [r3, #0]
 801a450:	699a      	ldr	r2, [r3, #24]
 801a452:	68fb      	ldr	r3, [r7, #12]
 801a454:	681b      	ldr	r3, [r3, #0]
 801a456:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801a45a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801a45c:	68fb      	ldr	r3, [r7, #12]
 801a45e:	681b      	ldr	r3, [r3, #0]
 801a460:	699a      	ldr	r2, [r3, #24]
 801a462:	68fb      	ldr	r3, [r7, #12]
 801a464:	681b      	ldr	r3, [r3, #0]
 801a466:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801a46a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801a46c:	68fb      	ldr	r3, [r7, #12]
 801a46e:	681b      	ldr	r3, [r3, #0]
 801a470:	6999      	ldr	r1, [r3, #24]
 801a472:	68bb      	ldr	r3, [r7, #8]
 801a474:	691b      	ldr	r3, [r3, #16]
 801a476:	021a      	lsls	r2, r3, #8
 801a478:	68fb      	ldr	r3, [r7, #12]
 801a47a:	681b      	ldr	r3, [r3, #0]
 801a47c:	430a      	orrs	r2, r1
 801a47e:	619a      	str	r2, [r3, #24]
      break;
 801a480:	e043      	b.n	801a50a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801a482:	68fb      	ldr	r3, [r7, #12]
 801a484:	681b      	ldr	r3, [r3, #0]
 801a486:	68b9      	ldr	r1, [r7, #8]
 801a488:	4618      	mov	r0, r3
 801a48a:	f000 fa89 	bl	801a9a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801a48e:	68fb      	ldr	r3, [r7, #12]
 801a490:	681b      	ldr	r3, [r3, #0]
 801a492:	69da      	ldr	r2, [r3, #28]
 801a494:	68fb      	ldr	r3, [r7, #12]
 801a496:	681b      	ldr	r3, [r3, #0]
 801a498:	f042 0208 	orr.w	r2, r2, #8
 801a49c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801a49e:	68fb      	ldr	r3, [r7, #12]
 801a4a0:	681b      	ldr	r3, [r3, #0]
 801a4a2:	69da      	ldr	r2, [r3, #28]
 801a4a4:	68fb      	ldr	r3, [r7, #12]
 801a4a6:	681b      	ldr	r3, [r3, #0]
 801a4a8:	f022 0204 	bic.w	r2, r2, #4
 801a4ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801a4ae:	68fb      	ldr	r3, [r7, #12]
 801a4b0:	681b      	ldr	r3, [r3, #0]
 801a4b2:	69d9      	ldr	r1, [r3, #28]
 801a4b4:	68bb      	ldr	r3, [r7, #8]
 801a4b6:	691a      	ldr	r2, [r3, #16]
 801a4b8:	68fb      	ldr	r3, [r7, #12]
 801a4ba:	681b      	ldr	r3, [r3, #0]
 801a4bc:	430a      	orrs	r2, r1
 801a4be:	61da      	str	r2, [r3, #28]
      break;
 801a4c0:	e023      	b.n	801a50a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801a4c2:	68fb      	ldr	r3, [r7, #12]
 801a4c4:	681b      	ldr	r3, [r3, #0]
 801a4c6:	68b9      	ldr	r1, [r7, #8]
 801a4c8:	4618      	mov	r0, r3
 801a4ca:	f000 fad3 	bl	801aa74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801a4ce:	68fb      	ldr	r3, [r7, #12]
 801a4d0:	681b      	ldr	r3, [r3, #0]
 801a4d2:	69da      	ldr	r2, [r3, #28]
 801a4d4:	68fb      	ldr	r3, [r7, #12]
 801a4d6:	681b      	ldr	r3, [r3, #0]
 801a4d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801a4dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801a4de:	68fb      	ldr	r3, [r7, #12]
 801a4e0:	681b      	ldr	r3, [r3, #0]
 801a4e2:	69da      	ldr	r2, [r3, #28]
 801a4e4:	68fb      	ldr	r3, [r7, #12]
 801a4e6:	681b      	ldr	r3, [r3, #0]
 801a4e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801a4ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801a4ee:	68fb      	ldr	r3, [r7, #12]
 801a4f0:	681b      	ldr	r3, [r3, #0]
 801a4f2:	69d9      	ldr	r1, [r3, #28]
 801a4f4:	68bb      	ldr	r3, [r7, #8]
 801a4f6:	691b      	ldr	r3, [r3, #16]
 801a4f8:	021a      	lsls	r2, r3, #8
 801a4fa:	68fb      	ldr	r3, [r7, #12]
 801a4fc:	681b      	ldr	r3, [r3, #0]
 801a4fe:	430a      	orrs	r2, r1
 801a500:	61da      	str	r2, [r3, #28]
      break;
 801a502:	e002      	b.n	801a50a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 801a504:	2301      	movs	r3, #1
 801a506:	75fb      	strb	r3, [r7, #23]
      break;
 801a508:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801a50a:	68fb      	ldr	r3, [r7, #12]
 801a50c:	2200      	movs	r2, #0
 801a50e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801a512:	7dfb      	ldrb	r3, [r7, #23]
}
 801a514:	4618      	mov	r0, r3
 801a516:	3718      	adds	r7, #24
 801a518:	46bd      	mov	sp, r7
 801a51a:	bd80      	pop	{r7, pc}

0801a51c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801a51c:	b580      	push	{r7, lr}
 801a51e:	b084      	sub	sp, #16
 801a520:	af00      	add	r7, sp, #0
 801a522:	6078      	str	r0, [r7, #4]
 801a524:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801a526:	2300      	movs	r3, #0
 801a528:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801a52a:	687b      	ldr	r3, [r7, #4]
 801a52c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801a530:	2b01      	cmp	r3, #1
 801a532:	d101      	bne.n	801a538 <HAL_TIM_ConfigClockSource+0x1c>
 801a534:	2302      	movs	r3, #2
 801a536:	e0b4      	b.n	801a6a2 <HAL_TIM_ConfigClockSource+0x186>
 801a538:	687b      	ldr	r3, [r7, #4]
 801a53a:	2201      	movs	r2, #1
 801a53c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801a540:	687b      	ldr	r3, [r7, #4]
 801a542:	2202      	movs	r2, #2
 801a544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801a548:	687b      	ldr	r3, [r7, #4]
 801a54a:	681b      	ldr	r3, [r3, #0]
 801a54c:	689b      	ldr	r3, [r3, #8]
 801a54e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801a550:	68bb      	ldr	r3, [r7, #8]
 801a552:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 801a556:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801a558:	68bb      	ldr	r3, [r7, #8]
 801a55a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801a55e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801a560:	687b      	ldr	r3, [r7, #4]
 801a562:	681b      	ldr	r3, [r3, #0]
 801a564:	68ba      	ldr	r2, [r7, #8]
 801a566:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801a568:	683b      	ldr	r3, [r7, #0]
 801a56a:	681b      	ldr	r3, [r3, #0]
 801a56c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801a570:	d03e      	beq.n	801a5f0 <HAL_TIM_ConfigClockSource+0xd4>
 801a572:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801a576:	f200 8087 	bhi.w	801a688 <HAL_TIM_ConfigClockSource+0x16c>
 801a57a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801a57e:	f000 8086 	beq.w	801a68e <HAL_TIM_ConfigClockSource+0x172>
 801a582:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801a586:	d87f      	bhi.n	801a688 <HAL_TIM_ConfigClockSource+0x16c>
 801a588:	2b70      	cmp	r3, #112	; 0x70
 801a58a:	d01a      	beq.n	801a5c2 <HAL_TIM_ConfigClockSource+0xa6>
 801a58c:	2b70      	cmp	r3, #112	; 0x70
 801a58e:	d87b      	bhi.n	801a688 <HAL_TIM_ConfigClockSource+0x16c>
 801a590:	2b60      	cmp	r3, #96	; 0x60
 801a592:	d050      	beq.n	801a636 <HAL_TIM_ConfigClockSource+0x11a>
 801a594:	2b60      	cmp	r3, #96	; 0x60
 801a596:	d877      	bhi.n	801a688 <HAL_TIM_ConfigClockSource+0x16c>
 801a598:	2b50      	cmp	r3, #80	; 0x50
 801a59a:	d03c      	beq.n	801a616 <HAL_TIM_ConfigClockSource+0xfa>
 801a59c:	2b50      	cmp	r3, #80	; 0x50
 801a59e:	d873      	bhi.n	801a688 <HAL_TIM_ConfigClockSource+0x16c>
 801a5a0:	2b40      	cmp	r3, #64	; 0x40
 801a5a2:	d058      	beq.n	801a656 <HAL_TIM_ConfigClockSource+0x13a>
 801a5a4:	2b40      	cmp	r3, #64	; 0x40
 801a5a6:	d86f      	bhi.n	801a688 <HAL_TIM_ConfigClockSource+0x16c>
 801a5a8:	2b30      	cmp	r3, #48	; 0x30
 801a5aa:	d064      	beq.n	801a676 <HAL_TIM_ConfigClockSource+0x15a>
 801a5ac:	2b30      	cmp	r3, #48	; 0x30
 801a5ae:	d86b      	bhi.n	801a688 <HAL_TIM_ConfigClockSource+0x16c>
 801a5b0:	2b20      	cmp	r3, #32
 801a5b2:	d060      	beq.n	801a676 <HAL_TIM_ConfigClockSource+0x15a>
 801a5b4:	2b20      	cmp	r3, #32
 801a5b6:	d867      	bhi.n	801a688 <HAL_TIM_ConfigClockSource+0x16c>
 801a5b8:	2b00      	cmp	r3, #0
 801a5ba:	d05c      	beq.n	801a676 <HAL_TIM_ConfigClockSource+0x15a>
 801a5bc:	2b10      	cmp	r3, #16
 801a5be:	d05a      	beq.n	801a676 <HAL_TIM_ConfigClockSource+0x15a>
 801a5c0:	e062      	b.n	801a688 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801a5c2:	687b      	ldr	r3, [r7, #4]
 801a5c4:	6818      	ldr	r0, [r3, #0]
 801a5c6:	683b      	ldr	r3, [r7, #0]
 801a5c8:	6899      	ldr	r1, [r3, #8]
 801a5ca:	683b      	ldr	r3, [r7, #0]
 801a5cc:	685a      	ldr	r2, [r3, #4]
 801a5ce:	683b      	ldr	r3, [r7, #0]
 801a5d0:	68db      	ldr	r3, [r3, #12]
 801a5d2:	f000 fb19 	bl	801ac08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801a5d6:	687b      	ldr	r3, [r7, #4]
 801a5d8:	681b      	ldr	r3, [r3, #0]
 801a5da:	689b      	ldr	r3, [r3, #8]
 801a5dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801a5de:	68bb      	ldr	r3, [r7, #8]
 801a5e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 801a5e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801a5e6:	687b      	ldr	r3, [r7, #4]
 801a5e8:	681b      	ldr	r3, [r3, #0]
 801a5ea:	68ba      	ldr	r2, [r7, #8]
 801a5ec:	609a      	str	r2, [r3, #8]
      break;
 801a5ee:	e04f      	b.n	801a690 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801a5f0:	687b      	ldr	r3, [r7, #4]
 801a5f2:	6818      	ldr	r0, [r3, #0]
 801a5f4:	683b      	ldr	r3, [r7, #0]
 801a5f6:	6899      	ldr	r1, [r3, #8]
 801a5f8:	683b      	ldr	r3, [r7, #0]
 801a5fa:	685a      	ldr	r2, [r3, #4]
 801a5fc:	683b      	ldr	r3, [r7, #0]
 801a5fe:	68db      	ldr	r3, [r3, #12]
 801a600:	f000 fb02 	bl	801ac08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801a604:	687b      	ldr	r3, [r7, #4]
 801a606:	681b      	ldr	r3, [r3, #0]
 801a608:	689a      	ldr	r2, [r3, #8]
 801a60a:	687b      	ldr	r3, [r7, #4]
 801a60c:	681b      	ldr	r3, [r3, #0]
 801a60e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801a612:	609a      	str	r2, [r3, #8]
      break;
 801a614:	e03c      	b.n	801a690 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801a616:	687b      	ldr	r3, [r7, #4]
 801a618:	6818      	ldr	r0, [r3, #0]
 801a61a:	683b      	ldr	r3, [r7, #0]
 801a61c:	6859      	ldr	r1, [r3, #4]
 801a61e:	683b      	ldr	r3, [r7, #0]
 801a620:	68db      	ldr	r3, [r3, #12]
 801a622:	461a      	mov	r2, r3
 801a624:	f000 fa76 	bl	801ab14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801a628:	687b      	ldr	r3, [r7, #4]
 801a62a:	681b      	ldr	r3, [r3, #0]
 801a62c:	2150      	movs	r1, #80	; 0x50
 801a62e:	4618      	mov	r0, r3
 801a630:	f000 facf 	bl	801abd2 <TIM_ITRx_SetConfig>
      break;
 801a634:	e02c      	b.n	801a690 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801a636:	687b      	ldr	r3, [r7, #4]
 801a638:	6818      	ldr	r0, [r3, #0]
 801a63a:	683b      	ldr	r3, [r7, #0]
 801a63c:	6859      	ldr	r1, [r3, #4]
 801a63e:	683b      	ldr	r3, [r7, #0]
 801a640:	68db      	ldr	r3, [r3, #12]
 801a642:	461a      	mov	r2, r3
 801a644:	f000 fa95 	bl	801ab72 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801a648:	687b      	ldr	r3, [r7, #4]
 801a64a:	681b      	ldr	r3, [r3, #0]
 801a64c:	2160      	movs	r1, #96	; 0x60
 801a64e:	4618      	mov	r0, r3
 801a650:	f000 fabf 	bl	801abd2 <TIM_ITRx_SetConfig>
      break;
 801a654:	e01c      	b.n	801a690 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801a656:	687b      	ldr	r3, [r7, #4]
 801a658:	6818      	ldr	r0, [r3, #0]
 801a65a:	683b      	ldr	r3, [r7, #0]
 801a65c:	6859      	ldr	r1, [r3, #4]
 801a65e:	683b      	ldr	r3, [r7, #0]
 801a660:	68db      	ldr	r3, [r3, #12]
 801a662:	461a      	mov	r2, r3
 801a664:	f000 fa56 	bl	801ab14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801a668:	687b      	ldr	r3, [r7, #4]
 801a66a:	681b      	ldr	r3, [r3, #0]
 801a66c:	2140      	movs	r1, #64	; 0x40
 801a66e:	4618      	mov	r0, r3
 801a670:	f000 faaf 	bl	801abd2 <TIM_ITRx_SetConfig>
      break;
 801a674:	e00c      	b.n	801a690 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801a676:	687b      	ldr	r3, [r7, #4]
 801a678:	681a      	ldr	r2, [r3, #0]
 801a67a:	683b      	ldr	r3, [r7, #0]
 801a67c:	681b      	ldr	r3, [r3, #0]
 801a67e:	4619      	mov	r1, r3
 801a680:	4610      	mov	r0, r2
 801a682:	f000 faa6 	bl	801abd2 <TIM_ITRx_SetConfig>
      break;
 801a686:	e003      	b.n	801a690 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 801a688:	2301      	movs	r3, #1
 801a68a:	73fb      	strb	r3, [r7, #15]
      break;
 801a68c:	e000      	b.n	801a690 <HAL_TIM_ConfigClockSource+0x174>
      break;
 801a68e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801a690:	687b      	ldr	r3, [r7, #4]
 801a692:	2201      	movs	r2, #1
 801a694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801a698:	687b      	ldr	r3, [r7, #4]
 801a69a:	2200      	movs	r2, #0
 801a69c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801a6a0:	7bfb      	ldrb	r3, [r7, #15]
}
 801a6a2:	4618      	mov	r0, r3
 801a6a4:	3710      	adds	r7, #16
 801a6a6:	46bd      	mov	sp, r7
 801a6a8:	bd80      	pop	{r7, pc}

0801a6aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801a6aa:	b480      	push	{r7}
 801a6ac:	b083      	sub	sp, #12
 801a6ae:	af00      	add	r7, sp, #0
 801a6b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801a6b2:	bf00      	nop
 801a6b4:	370c      	adds	r7, #12
 801a6b6:	46bd      	mov	sp, r7
 801a6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6bc:	4770      	bx	lr

0801a6be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801a6be:	b480      	push	{r7}
 801a6c0:	b083      	sub	sp, #12
 801a6c2:	af00      	add	r7, sp, #0
 801a6c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801a6c6:	bf00      	nop
 801a6c8:	370c      	adds	r7, #12
 801a6ca:	46bd      	mov	sp, r7
 801a6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6d0:	4770      	bx	lr

0801a6d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801a6d2:	b480      	push	{r7}
 801a6d4:	b083      	sub	sp, #12
 801a6d6:	af00      	add	r7, sp, #0
 801a6d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801a6da:	bf00      	nop
 801a6dc:	370c      	adds	r7, #12
 801a6de:	46bd      	mov	sp, r7
 801a6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6e4:	4770      	bx	lr

0801a6e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801a6e6:	b480      	push	{r7}
 801a6e8:	b083      	sub	sp, #12
 801a6ea:	af00      	add	r7, sp, #0
 801a6ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801a6ee:	bf00      	nop
 801a6f0:	370c      	adds	r7, #12
 801a6f2:	46bd      	mov	sp, r7
 801a6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6f8:	4770      	bx	lr
	...

0801a6fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 801a6fc:	b480      	push	{r7}
 801a6fe:	b085      	sub	sp, #20
 801a700:	af00      	add	r7, sp, #0
 801a702:	6078      	str	r0, [r7, #4]
 801a704:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801a706:	687b      	ldr	r3, [r7, #4]
 801a708:	681b      	ldr	r3, [r3, #0]
 801a70a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801a70c:	687b      	ldr	r3, [r7, #4]
 801a70e:	4a34      	ldr	r2, [pc, #208]	; (801a7e0 <TIM_Base_SetConfig+0xe4>)
 801a710:	4293      	cmp	r3, r2
 801a712:	d00f      	beq.n	801a734 <TIM_Base_SetConfig+0x38>
 801a714:	687b      	ldr	r3, [r7, #4]
 801a716:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801a71a:	d00b      	beq.n	801a734 <TIM_Base_SetConfig+0x38>
 801a71c:	687b      	ldr	r3, [r7, #4]
 801a71e:	4a31      	ldr	r2, [pc, #196]	; (801a7e4 <TIM_Base_SetConfig+0xe8>)
 801a720:	4293      	cmp	r3, r2
 801a722:	d007      	beq.n	801a734 <TIM_Base_SetConfig+0x38>
 801a724:	687b      	ldr	r3, [r7, #4]
 801a726:	4a30      	ldr	r2, [pc, #192]	; (801a7e8 <TIM_Base_SetConfig+0xec>)
 801a728:	4293      	cmp	r3, r2
 801a72a:	d003      	beq.n	801a734 <TIM_Base_SetConfig+0x38>
 801a72c:	687b      	ldr	r3, [r7, #4]
 801a72e:	4a2f      	ldr	r2, [pc, #188]	; (801a7ec <TIM_Base_SetConfig+0xf0>)
 801a730:	4293      	cmp	r3, r2
 801a732:	d108      	bne.n	801a746 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801a734:	68fb      	ldr	r3, [r7, #12]
 801a736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801a73a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801a73c:	683b      	ldr	r3, [r7, #0]
 801a73e:	685b      	ldr	r3, [r3, #4]
 801a740:	68fa      	ldr	r2, [r7, #12]
 801a742:	4313      	orrs	r3, r2
 801a744:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801a746:	687b      	ldr	r3, [r7, #4]
 801a748:	4a25      	ldr	r2, [pc, #148]	; (801a7e0 <TIM_Base_SetConfig+0xe4>)
 801a74a:	4293      	cmp	r3, r2
 801a74c:	d01b      	beq.n	801a786 <TIM_Base_SetConfig+0x8a>
 801a74e:	687b      	ldr	r3, [r7, #4]
 801a750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801a754:	d017      	beq.n	801a786 <TIM_Base_SetConfig+0x8a>
 801a756:	687b      	ldr	r3, [r7, #4]
 801a758:	4a22      	ldr	r2, [pc, #136]	; (801a7e4 <TIM_Base_SetConfig+0xe8>)
 801a75a:	4293      	cmp	r3, r2
 801a75c:	d013      	beq.n	801a786 <TIM_Base_SetConfig+0x8a>
 801a75e:	687b      	ldr	r3, [r7, #4]
 801a760:	4a21      	ldr	r2, [pc, #132]	; (801a7e8 <TIM_Base_SetConfig+0xec>)
 801a762:	4293      	cmp	r3, r2
 801a764:	d00f      	beq.n	801a786 <TIM_Base_SetConfig+0x8a>
 801a766:	687b      	ldr	r3, [r7, #4]
 801a768:	4a20      	ldr	r2, [pc, #128]	; (801a7ec <TIM_Base_SetConfig+0xf0>)
 801a76a:	4293      	cmp	r3, r2
 801a76c:	d00b      	beq.n	801a786 <TIM_Base_SetConfig+0x8a>
 801a76e:	687b      	ldr	r3, [r7, #4]
 801a770:	4a1f      	ldr	r2, [pc, #124]	; (801a7f0 <TIM_Base_SetConfig+0xf4>)
 801a772:	4293      	cmp	r3, r2
 801a774:	d007      	beq.n	801a786 <TIM_Base_SetConfig+0x8a>
 801a776:	687b      	ldr	r3, [r7, #4]
 801a778:	4a1e      	ldr	r2, [pc, #120]	; (801a7f4 <TIM_Base_SetConfig+0xf8>)
 801a77a:	4293      	cmp	r3, r2
 801a77c:	d003      	beq.n	801a786 <TIM_Base_SetConfig+0x8a>
 801a77e:	687b      	ldr	r3, [r7, #4]
 801a780:	4a1d      	ldr	r2, [pc, #116]	; (801a7f8 <TIM_Base_SetConfig+0xfc>)
 801a782:	4293      	cmp	r3, r2
 801a784:	d108      	bne.n	801a798 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801a786:	68fb      	ldr	r3, [r7, #12]
 801a788:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801a78c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801a78e:	683b      	ldr	r3, [r7, #0]
 801a790:	68db      	ldr	r3, [r3, #12]
 801a792:	68fa      	ldr	r2, [r7, #12]
 801a794:	4313      	orrs	r3, r2
 801a796:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801a798:	68fb      	ldr	r3, [r7, #12]
 801a79a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801a79e:	683b      	ldr	r3, [r7, #0]
 801a7a0:	695b      	ldr	r3, [r3, #20]
 801a7a2:	4313      	orrs	r3, r2
 801a7a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801a7a6:	687b      	ldr	r3, [r7, #4]
 801a7a8:	68fa      	ldr	r2, [r7, #12]
 801a7aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801a7ac:	683b      	ldr	r3, [r7, #0]
 801a7ae:	689a      	ldr	r2, [r3, #8]
 801a7b0:	687b      	ldr	r3, [r7, #4]
 801a7b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801a7b4:	683b      	ldr	r3, [r7, #0]
 801a7b6:	681a      	ldr	r2, [r3, #0]
 801a7b8:	687b      	ldr	r3, [r7, #4]
 801a7ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801a7bc:	687b      	ldr	r3, [r7, #4]
 801a7be:	4a08      	ldr	r2, [pc, #32]	; (801a7e0 <TIM_Base_SetConfig+0xe4>)
 801a7c0:	4293      	cmp	r3, r2
 801a7c2:	d103      	bne.n	801a7cc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801a7c4:	683b      	ldr	r3, [r7, #0]
 801a7c6:	691a      	ldr	r2, [r3, #16]
 801a7c8:	687b      	ldr	r3, [r7, #4]
 801a7ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801a7cc:	687b      	ldr	r3, [r7, #4]
 801a7ce:	2201      	movs	r2, #1
 801a7d0:	615a      	str	r2, [r3, #20]
}
 801a7d2:	bf00      	nop
 801a7d4:	3714      	adds	r7, #20
 801a7d6:	46bd      	mov	sp, r7
 801a7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7dc:	4770      	bx	lr
 801a7de:	bf00      	nop
 801a7e0:	40010000 	.word	0x40010000
 801a7e4:	40000400 	.word	0x40000400
 801a7e8:	40000800 	.word	0x40000800
 801a7ec:	40000c00 	.word	0x40000c00
 801a7f0:	40014000 	.word	0x40014000
 801a7f4:	40014400 	.word	0x40014400
 801a7f8:	40014800 	.word	0x40014800

0801a7fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801a7fc:	b480      	push	{r7}
 801a7fe:	b087      	sub	sp, #28
 801a800:	af00      	add	r7, sp, #0
 801a802:	6078      	str	r0, [r7, #4]
 801a804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801a806:	687b      	ldr	r3, [r7, #4]
 801a808:	6a1b      	ldr	r3, [r3, #32]
 801a80a:	f023 0201 	bic.w	r2, r3, #1
 801a80e:	687b      	ldr	r3, [r7, #4]
 801a810:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801a812:	687b      	ldr	r3, [r7, #4]
 801a814:	6a1b      	ldr	r3, [r3, #32]
 801a816:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801a818:	687b      	ldr	r3, [r7, #4]
 801a81a:	685b      	ldr	r3, [r3, #4]
 801a81c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801a81e:	687b      	ldr	r3, [r7, #4]
 801a820:	699b      	ldr	r3, [r3, #24]
 801a822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801a824:	68fb      	ldr	r3, [r7, #12]
 801a826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801a82a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801a82c:	68fb      	ldr	r3, [r7, #12]
 801a82e:	f023 0303 	bic.w	r3, r3, #3
 801a832:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801a834:	683b      	ldr	r3, [r7, #0]
 801a836:	681b      	ldr	r3, [r3, #0]
 801a838:	68fa      	ldr	r2, [r7, #12]
 801a83a:	4313      	orrs	r3, r2
 801a83c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801a83e:	697b      	ldr	r3, [r7, #20]
 801a840:	f023 0302 	bic.w	r3, r3, #2
 801a844:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801a846:	683b      	ldr	r3, [r7, #0]
 801a848:	689b      	ldr	r3, [r3, #8]
 801a84a:	697a      	ldr	r2, [r7, #20]
 801a84c:	4313      	orrs	r3, r2
 801a84e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801a850:	687b      	ldr	r3, [r7, #4]
 801a852:	4a1c      	ldr	r2, [pc, #112]	; (801a8c4 <TIM_OC1_SetConfig+0xc8>)
 801a854:	4293      	cmp	r3, r2
 801a856:	d10c      	bne.n	801a872 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801a858:	697b      	ldr	r3, [r7, #20]
 801a85a:	f023 0308 	bic.w	r3, r3, #8
 801a85e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801a860:	683b      	ldr	r3, [r7, #0]
 801a862:	68db      	ldr	r3, [r3, #12]
 801a864:	697a      	ldr	r2, [r7, #20]
 801a866:	4313      	orrs	r3, r2
 801a868:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801a86a:	697b      	ldr	r3, [r7, #20]
 801a86c:	f023 0304 	bic.w	r3, r3, #4
 801a870:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801a872:	687b      	ldr	r3, [r7, #4]
 801a874:	4a13      	ldr	r2, [pc, #76]	; (801a8c4 <TIM_OC1_SetConfig+0xc8>)
 801a876:	4293      	cmp	r3, r2
 801a878:	d111      	bne.n	801a89e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801a87a:	693b      	ldr	r3, [r7, #16]
 801a87c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801a880:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801a882:	693b      	ldr	r3, [r7, #16]
 801a884:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801a888:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801a88a:	683b      	ldr	r3, [r7, #0]
 801a88c:	695b      	ldr	r3, [r3, #20]
 801a88e:	693a      	ldr	r2, [r7, #16]
 801a890:	4313      	orrs	r3, r2
 801a892:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801a894:	683b      	ldr	r3, [r7, #0]
 801a896:	699b      	ldr	r3, [r3, #24]
 801a898:	693a      	ldr	r2, [r7, #16]
 801a89a:	4313      	orrs	r3, r2
 801a89c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801a89e:	687b      	ldr	r3, [r7, #4]
 801a8a0:	693a      	ldr	r2, [r7, #16]
 801a8a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801a8a4:	687b      	ldr	r3, [r7, #4]
 801a8a6:	68fa      	ldr	r2, [r7, #12]
 801a8a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801a8aa:	683b      	ldr	r3, [r7, #0]
 801a8ac:	685a      	ldr	r2, [r3, #4]
 801a8ae:	687b      	ldr	r3, [r7, #4]
 801a8b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801a8b2:	687b      	ldr	r3, [r7, #4]
 801a8b4:	697a      	ldr	r2, [r7, #20]
 801a8b6:	621a      	str	r2, [r3, #32]
}
 801a8b8:	bf00      	nop
 801a8ba:	371c      	adds	r7, #28
 801a8bc:	46bd      	mov	sp, r7
 801a8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8c2:	4770      	bx	lr
 801a8c4:	40010000 	.word	0x40010000

0801a8c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801a8c8:	b480      	push	{r7}
 801a8ca:	b087      	sub	sp, #28
 801a8cc:	af00      	add	r7, sp, #0
 801a8ce:	6078      	str	r0, [r7, #4]
 801a8d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801a8d2:	687b      	ldr	r3, [r7, #4]
 801a8d4:	6a1b      	ldr	r3, [r3, #32]
 801a8d6:	f023 0210 	bic.w	r2, r3, #16
 801a8da:	687b      	ldr	r3, [r7, #4]
 801a8dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801a8de:	687b      	ldr	r3, [r7, #4]
 801a8e0:	6a1b      	ldr	r3, [r3, #32]
 801a8e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801a8e4:	687b      	ldr	r3, [r7, #4]
 801a8e6:	685b      	ldr	r3, [r3, #4]
 801a8e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801a8ea:	687b      	ldr	r3, [r7, #4]
 801a8ec:	699b      	ldr	r3, [r3, #24]
 801a8ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801a8f0:	68fb      	ldr	r3, [r7, #12]
 801a8f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801a8f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801a8f8:	68fb      	ldr	r3, [r7, #12]
 801a8fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801a8fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801a900:	683b      	ldr	r3, [r7, #0]
 801a902:	681b      	ldr	r3, [r3, #0]
 801a904:	021b      	lsls	r3, r3, #8
 801a906:	68fa      	ldr	r2, [r7, #12]
 801a908:	4313      	orrs	r3, r2
 801a90a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801a90c:	697b      	ldr	r3, [r7, #20]
 801a90e:	f023 0320 	bic.w	r3, r3, #32
 801a912:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801a914:	683b      	ldr	r3, [r7, #0]
 801a916:	689b      	ldr	r3, [r3, #8]
 801a918:	011b      	lsls	r3, r3, #4
 801a91a:	697a      	ldr	r2, [r7, #20]
 801a91c:	4313      	orrs	r3, r2
 801a91e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801a920:	687b      	ldr	r3, [r7, #4]
 801a922:	4a1e      	ldr	r2, [pc, #120]	; (801a99c <TIM_OC2_SetConfig+0xd4>)
 801a924:	4293      	cmp	r3, r2
 801a926:	d10d      	bne.n	801a944 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801a928:	697b      	ldr	r3, [r7, #20]
 801a92a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801a92e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801a930:	683b      	ldr	r3, [r7, #0]
 801a932:	68db      	ldr	r3, [r3, #12]
 801a934:	011b      	lsls	r3, r3, #4
 801a936:	697a      	ldr	r2, [r7, #20]
 801a938:	4313      	orrs	r3, r2
 801a93a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801a93c:	697b      	ldr	r3, [r7, #20]
 801a93e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801a942:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801a944:	687b      	ldr	r3, [r7, #4]
 801a946:	4a15      	ldr	r2, [pc, #84]	; (801a99c <TIM_OC2_SetConfig+0xd4>)
 801a948:	4293      	cmp	r3, r2
 801a94a:	d113      	bne.n	801a974 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801a94c:	693b      	ldr	r3, [r7, #16]
 801a94e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801a952:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801a954:	693b      	ldr	r3, [r7, #16]
 801a956:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801a95a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801a95c:	683b      	ldr	r3, [r7, #0]
 801a95e:	695b      	ldr	r3, [r3, #20]
 801a960:	009b      	lsls	r3, r3, #2
 801a962:	693a      	ldr	r2, [r7, #16]
 801a964:	4313      	orrs	r3, r2
 801a966:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801a968:	683b      	ldr	r3, [r7, #0]
 801a96a:	699b      	ldr	r3, [r3, #24]
 801a96c:	009b      	lsls	r3, r3, #2
 801a96e:	693a      	ldr	r2, [r7, #16]
 801a970:	4313      	orrs	r3, r2
 801a972:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801a974:	687b      	ldr	r3, [r7, #4]
 801a976:	693a      	ldr	r2, [r7, #16]
 801a978:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801a97a:	687b      	ldr	r3, [r7, #4]
 801a97c:	68fa      	ldr	r2, [r7, #12]
 801a97e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801a980:	683b      	ldr	r3, [r7, #0]
 801a982:	685a      	ldr	r2, [r3, #4]
 801a984:	687b      	ldr	r3, [r7, #4]
 801a986:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801a988:	687b      	ldr	r3, [r7, #4]
 801a98a:	697a      	ldr	r2, [r7, #20]
 801a98c:	621a      	str	r2, [r3, #32]
}
 801a98e:	bf00      	nop
 801a990:	371c      	adds	r7, #28
 801a992:	46bd      	mov	sp, r7
 801a994:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a998:	4770      	bx	lr
 801a99a:	bf00      	nop
 801a99c:	40010000 	.word	0x40010000

0801a9a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801a9a0:	b480      	push	{r7}
 801a9a2:	b087      	sub	sp, #28
 801a9a4:	af00      	add	r7, sp, #0
 801a9a6:	6078      	str	r0, [r7, #4]
 801a9a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801a9aa:	687b      	ldr	r3, [r7, #4]
 801a9ac:	6a1b      	ldr	r3, [r3, #32]
 801a9ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801a9b2:	687b      	ldr	r3, [r7, #4]
 801a9b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801a9b6:	687b      	ldr	r3, [r7, #4]
 801a9b8:	6a1b      	ldr	r3, [r3, #32]
 801a9ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801a9bc:	687b      	ldr	r3, [r7, #4]
 801a9be:	685b      	ldr	r3, [r3, #4]
 801a9c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801a9c2:	687b      	ldr	r3, [r7, #4]
 801a9c4:	69db      	ldr	r3, [r3, #28]
 801a9c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801a9c8:	68fb      	ldr	r3, [r7, #12]
 801a9ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801a9ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801a9d0:	68fb      	ldr	r3, [r7, #12]
 801a9d2:	f023 0303 	bic.w	r3, r3, #3
 801a9d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801a9d8:	683b      	ldr	r3, [r7, #0]
 801a9da:	681b      	ldr	r3, [r3, #0]
 801a9dc:	68fa      	ldr	r2, [r7, #12]
 801a9de:	4313      	orrs	r3, r2
 801a9e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801a9e2:	697b      	ldr	r3, [r7, #20]
 801a9e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801a9e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801a9ea:	683b      	ldr	r3, [r7, #0]
 801a9ec:	689b      	ldr	r3, [r3, #8]
 801a9ee:	021b      	lsls	r3, r3, #8
 801a9f0:	697a      	ldr	r2, [r7, #20]
 801a9f2:	4313      	orrs	r3, r2
 801a9f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801a9f6:	687b      	ldr	r3, [r7, #4]
 801a9f8:	4a1d      	ldr	r2, [pc, #116]	; (801aa70 <TIM_OC3_SetConfig+0xd0>)
 801a9fa:	4293      	cmp	r3, r2
 801a9fc:	d10d      	bne.n	801aa1a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801a9fe:	697b      	ldr	r3, [r7, #20]
 801aa00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801aa04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801aa06:	683b      	ldr	r3, [r7, #0]
 801aa08:	68db      	ldr	r3, [r3, #12]
 801aa0a:	021b      	lsls	r3, r3, #8
 801aa0c:	697a      	ldr	r2, [r7, #20]
 801aa0e:	4313      	orrs	r3, r2
 801aa10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801aa12:	697b      	ldr	r3, [r7, #20]
 801aa14:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801aa18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801aa1a:	687b      	ldr	r3, [r7, #4]
 801aa1c:	4a14      	ldr	r2, [pc, #80]	; (801aa70 <TIM_OC3_SetConfig+0xd0>)
 801aa1e:	4293      	cmp	r3, r2
 801aa20:	d113      	bne.n	801aa4a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801aa22:	693b      	ldr	r3, [r7, #16]
 801aa24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801aa28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801aa2a:	693b      	ldr	r3, [r7, #16]
 801aa2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801aa30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801aa32:	683b      	ldr	r3, [r7, #0]
 801aa34:	695b      	ldr	r3, [r3, #20]
 801aa36:	011b      	lsls	r3, r3, #4
 801aa38:	693a      	ldr	r2, [r7, #16]
 801aa3a:	4313      	orrs	r3, r2
 801aa3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801aa3e:	683b      	ldr	r3, [r7, #0]
 801aa40:	699b      	ldr	r3, [r3, #24]
 801aa42:	011b      	lsls	r3, r3, #4
 801aa44:	693a      	ldr	r2, [r7, #16]
 801aa46:	4313      	orrs	r3, r2
 801aa48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801aa4a:	687b      	ldr	r3, [r7, #4]
 801aa4c:	693a      	ldr	r2, [r7, #16]
 801aa4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801aa50:	687b      	ldr	r3, [r7, #4]
 801aa52:	68fa      	ldr	r2, [r7, #12]
 801aa54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801aa56:	683b      	ldr	r3, [r7, #0]
 801aa58:	685a      	ldr	r2, [r3, #4]
 801aa5a:	687b      	ldr	r3, [r7, #4]
 801aa5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801aa5e:	687b      	ldr	r3, [r7, #4]
 801aa60:	697a      	ldr	r2, [r7, #20]
 801aa62:	621a      	str	r2, [r3, #32]
}
 801aa64:	bf00      	nop
 801aa66:	371c      	adds	r7, #28
 801aa68:	46bd      	mov	sp, r7
 801aa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa6e:	4770      	bx	lr
 801aa70:	40010000 	.word	0x40010000

0801aa74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801aa74:	b480      	push	{r7}
 801aa76:	b087      	sub	sp, #28
 801aa78:	af00      	add	r7, sp, #0
 801aa7a:	6078      	str	r0, [r7, #4]
 801aa7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801aa7e:	687b      	ldr	r3, [r7, #4]
 801aa80:	6a1b      	ldr	r3, [r3, #32]
 801aa82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801aa86:	687b      	ldr	r3, [r7, #4]
 801aa88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801aa8a:	687b      	ldr	r3, [r7, #4]
 801aa8c:	6a1b      	ldr	r3, [r3, #32]
 801aa8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801aa90:	687b      	ldr	r3, [r7, #4]
 801aa92:	685b      	ldr	r3, [r3, #4]
 801aa94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801aa96:	687b      	ldr	r3, [r7, #4]
 801aa98:	69db      	ldr	r3, [r3, #28]
 801aa9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801aa9c:	68fb      	ldr	r3, [r7, #12]
 801aa9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801aaa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801aaa4:	68fb      	ldr	r3, [r7, #12]
 801aaa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801aaaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801aaac:	683b      	ldr	r3, [r7, #0]
 801aaae:	681b      	ldr	r3, [r3, #0]
 801aab0:	021b      	lsls	r3, r3, #8
 801aab2:	68fa      	ldr	r2, [r7, #12]
 801aab4:	4313      	orrs	r3, r2
 801aab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801aab8:	693b      	ldr	r3, [r7, #16]
 801aaba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801aabe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801aac0:	683b      	ldr	r3, [r7, #0]
 801aac2:	689b      	ldr	r3, [r3, #8]
 801aac4:	031b      	lsls	r3, r3, #12
 801aac6:	693a      	ldr	r2, [r7, #16]
 801aac8:	4313      	orrs	r3, r2
 801aaca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801aacc:	687b      	ldr	r3, [r7, #4]
 801aace:	4a10      	ldr	r2, [pc, #64]	; (801ab10 <TIM_OC4_SetConfig+0x9c>)
 801aad0:	4293      	cmp	r3, r2
 801aad2:	d109      	bne.n	801aae8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801aad4:	697b      	ldr	r3, [r7, #20]
 801aad6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801aada:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801aadc:	683b      	ldr	r3, [r7, #0]
 801aade:	695b      	ldr	r3, [r3, #20]
 801aae0:	019b      	lsls	r3, r3, #6
 801aae2:	697a      	ldr	r2, [r7, #20]
 801aae4:	4313      	orrs	r3, r2
 801aae6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801aae8:	687b      	ldr	r3, [r7, #4]
 801aaea:	697a      	ldr	r2, [r7, #20]
 801aaec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801aaee:	687b      	ldr	r3, [r7, #4]
 801aaf0:	68fa      	ldr	r2, [r7, #12]
 801aaf2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801aaf4:	683b      	ldr	r3, [r7, #0]
 801aaf6:	685a      	ldr	r2, [r3, #4]
 801aaf8:	687b      	ldr	r3, [r7, #4]
 801aafa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801aafc:	687b      	ldr	r3, [r7, #4]
 801aafe:	693a      	ldr	r2, [r7, #16]
 801ab00:	621a      	str	r2, [r3, #32]
}
 801ab02:	bf00      	nop
 801ab04:	371c      	adds	r7, #28
 801ab06:	46bd      	mov	sp, r7
 801ab08:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab0c:	4770      	bx	lr
 801ab0e:	bf00      	nop
 801ab10:	40010000 	.word	0x40010000

0801ab14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801ab14:	b480      	push	{r7}
 801ab16:	b087      	sub	sp, #28
 801ab18:	af00      	add	r7, sp, #0
 801ab1a:	60f8      	str	r0, [r7, #12]
 801ab1c:	60b9      	str	r1, [r7, #8]
 801ab1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801ab20:	68fb      	ldr	r3, [r7, #12]
 801ab22:	6a1b      	ldr	r3, [r3, #32]
 801ab24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801ab26:	68fb      	ldr	r3, [r7, #12]
 801ab28:	6a1b      	ldr	r3, [r3, #32]
 801ab2a:	f023 0201 	bic.w	r2, r3, #1
 801ab2e:	68fb      	ldr	r3, [r7, #12]
 801ab30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801ab32:	68fb      	ldr	r3, [r7, #12]
 801ab34:	699b      	ldr	r3, [r3, #24]
 801ab36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801ab38:	693b      	ldr	r3, [r7, #16]
 801ab3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801ab3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801ab40:	687b      	ldr	r3, [r7, #4]
 801ab42:	011b      	lsls	r3, r3, #4
 801ab44:	693a      	ldr	r2, [r7, #16]
 801ab46:	4313      	orrs	r3, r2
 801ab48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801ab4a:	697b      	ldr	r3, [r7, #20]
 801ab4c:	f023 030a 	bic.w	r3, r3, #10
 801ab50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801ab52:	697a      	ldr	r2, [r7, #20]
 801ab54:	68bb      	ldr	r3, [r7, #8]
 801ab56:	4313      	orrs	r3, r2
 801ab58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801ab5a:	68fb      	ldr	r3, [r7, #12]
 801ab5c:	693a      	ldr	r2, [r7, #16]
 801ab5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801ab60:	68fb      	ldr	r3, [r7, #12]
 801ab62:	697a      	ldr	r2, [r7, #20]
 801ab64:	621a      	str	r2, [r3, #32]
}
 801ab66:	bf00      	nop
 801ab68:	371c      	adds	r7, #28
 801ab6a:	46bd      	mov	sp, r7
 801ab6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab70:	4770      	bx	lr

0801ab72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801ab72:	b480      	push	{r7}
 801ab74:	b087      	sub	sp, #28
 801ab76:	af00      	add	r7, sp, #0
 801ab78:	60f8      	str	r0, [r7, #12]
 801ab7a:	60b9      	str	r1, [r7, #8]
 801ab7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801ab7e:	68fb      	ldr	r3, [r7, #12]
 801ab80:	6a1b      	ldr	r3, [r3, #32]
 801ab82:	f023 0210 	bic.w	r2, r3, #16
 801ab86:	68fb      	ldr	r3, [r7, #12]
 801ab88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801ab8a:	68fb      	ldr	r3, [r7, #12]
 801ab8c:	699b      	ldr	r3, [r3, #24]
 801ab8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801ab90:	68fb      	ldr	r3, [r7, #12]
 801ab92:	6a1b      	ldr	r3, [r3, #32]
 801ab94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801ab96:	697b      	ldr	r3, [r7, #20]
 801ab98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801ab9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801ab9e:	687b      	ldr	r3, [r7, #4]
 801aba0:	031b      	lsls	r3, r3, #12
 801aba2:	697a      	ldr	r2, [r7, #20]
 801aba4:	4313      	orrs	r3, r2
 801aba6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801aba8:	693b      	ldr	r3, [r7, #16]
 801abaa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801abae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801abb0:	68bb      	ldr	r3, [r7, #8]
 801abb2:	011b      	lsls	r3, r3, #4
 801abb4:	693a      	ldr	r2, [r7, #16]
 801abb6:	4313      	orrs	r3, r2
 801abb8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801abba:	68fb      	ldr	r3, [r7, #12]
 801abbc:	697a      	ldr	r2, [r7, #20]
 801abbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801abc0:	68fb      	ldr	r3, [r7, #12]
 801abc2:	693a      	ldr	r2, [r7, #16]
 801abc4:	621a      	str	r2, [r3, #32]
}
 801abc6:	bf00      	nop
 801abc8:	371c      	adds	r7, #28
 801abca:	46bd      	mov	sp, r7
 801abcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abd0:	4770      	bx	lr

0801abd2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801abd2:	b480      	push	{r7}
 801abd4:	b085      	sub	sp, #20
 801abd6:	af00      	add	r7, sp, #0
 801abd8:	6078      	str	r0, [r7, #4]
 801abda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801abdc:	687b      	ldr	r3, [r7, #4]
 801abde:	689b      	ldr	r3, [r3, #8]
 801abe0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801abe2:	68fb      	ldr	r3, [r7, #12]
 801abe4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801abe8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801abea:	683a      	ldr	r2, [r7, #0]
 801abec:	68fb      	ldr	r3, [r7, #12]
 801abee:	4313      	orrs	r3, r2
 801abf0:	f043 0307 	orr.w	r3, r3, #7
 801abf4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801abf6:	687b      	ldr	r3, [r7, #4]
 801abf8:	68fa      	ldr	r2, [r7, #12]
 801abfa:	609a      	str	r2, [r3, #8]
}
 801abfc:	bf00      	nop
 801abfe:	3714      	adds	r7, #20
 801ac00:	46bd      	mov	sp, r7
 801ac02:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac06:	4770      	bx	lr

0801ac08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801ac08:	b480      	push	{r7}
 801ac0a:	b087      	sub	sp, #28
 801ac0c:	af00      	add	r7, sp, #0
 801ac0e:	60f8      	str	r0, [r7, #12]
 801ac10:	60b9      	str	r1, [r7, #8]
 801ac12:	607a      	str	r2, [r7, #4]
 801ac14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801ac16:	68fb      	ldr	r3, [r7, #12]
 801ac18:	689b      	ldr	r3, [r3, #8]
 801ac1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801ac1c:	697b      	ldr	r3, [r7, #20]
 801ac1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801ac22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801ac24:	683b      	ldr	r3, [r7, #0]
 801ac26:	021a      	lsls	r2, r3, #8
 801ac28:	687b      	ldr	r3, [r7, #4]
 801ac2a:	431a      	orrs	r2, r3
 801ac2c:	68bb      	ldr	r3, [r7, #8]
 801ac2e:	4313      	orrs	r3, r2
 801ac30:	697a      	ldr	r2, [r7, #20]
 801ac32:	4313      	orrs	r3, r2
 801ac34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801ac36:	68fb      	ldr	r3, [r7, #12]
 801ac38:	697a      	ldr	r2, [r7, #20]
 801ac3a:	609a      	str	r2, [r3, #8]
}
 801ac3c:	bf00      	nop
 801ac3e:	371c      	adds	r7, #28
 801ac40:	46bd      	mov	sp, r7
 801ac42:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac46:	4770      	bx	lr

0801ac48 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801ac48:	b480      	push	{r7}
 801ac4a:	b087      	sub	sp, #28
 801ac4c:	af00      	add	r7, sp, #0
 801ac4e:	60f8      	str	r0, [r7, #12]
 801ac50:	60b9      	str	r1, [r7, #8]
 801ac52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801ac54:	68bb      	ldr	r3, [r7, #8]
 801ac56:	f003 031f 	and.w	r3, r3, #31
 801ac5a:	2201      	movs	r2, #1
 801ac5c:	fa02 f303 	lsl.w	r3, r2, r3
 801ac60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801ac62:	68fb      	ldr	r3, [r7, #12]
 801ac64:	6a1a      	ldr	r2, [r3, #32]
 801ac66:	697b      	ldr	r3, [r7, #20]
 801ac68:	43db      	mvns	r3, r3
 801ac6a:	401a      	ands	r2, r3
 801ac6c:	68fb      	ldr	r3, [r7, #12]
 801ac6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801ac70:	68fb      	ldr	r3, [r7, #12]
 801ac72:	6a1a      	ldr	r2, [r3, #32]
 801ac74:	68bb      	ldr	r3, [r7, #8]
 801ac76:	f003 031f 	and.w	r3, r3, #31
 801ac7a:	6879      	ldr	r1, [r7, #4]
 801ac7c:	fa01 f303 	lsl.w	r3, r1, r3
 801ac80:	431a      	orrs	r2, r3
 801ac82:	68fb      	ldr	r3, [r7, #12]
 801ac84:	621a      	str	r2, [r3, #32]
}
 801ac86:	bf00      	nop
 801ac88:	371c      	adds	r7, #28
 801ac8a:	46bd      	mov	sp, r7
 801ac8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac90:	4770      	bx	lr
	...

0801ac94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 801ac94:	b480      	push	{r7}
 801ac96:	b085      	sub	sp, #20
 801ac98:	af00      	add	r7, sp, #0
 801ac9a:	6078      	str	r0, [r7, #4]
 801ac9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801ac9e:	687b      	ldr	r3, [r7, #4]
 801aca0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801aca4:	2b01      	cmp	r3, #1
 801aca6:	d101      	bne.n	801acac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801aca8:	2302      	movs	r3, #2
 801acaa:	e050      	b.n	801ad4e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 801acac:	687b      	ldr	r3, [r7, #4]
 801acae:	2201      	movs	r2, #1
 801acb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801acb4:	687b      	ldr	r3, [r7, #4]
 801acb6:	2202      	movs	r2, #2
 801acb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801acbc:	687b      	ldr	r3, [r7, #4]
 801acbe:	681b      	ldr	r3, [r3, #0]
 801acc0:	685b      	ldr	r3, [r3, #4]
 801acc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801acc4:	687b      	ldr	r3, [r7, #4]
 801acc6:	681b      	ldr	r3, [r3, #0]
 801acc8:	689b      	ldr	r3, [r3, #8]
 801acca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801accc:	68fb      	ldr	r3, [r7, #12]
 801acce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801acd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801acd4:	683b      	ldr	r3, [r7, #0]
 801acd6:	681b      	ldr	r3, [r3, #0]
 801acd8:	68fa      	ldr	r2, [r7, #12]
 801acda:	4313      	orrs	r3, r2
 801acdc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801acde:	687b      	ldr	r3, [r7, #4]
 801ace0:	681b      	ldr	r3, [r3, #0]
 801ace2:	68fa      	ldr	r2, [r7, #12]
 801ace4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801ace6:	687b      	ldr	r3, [r7, #4]
 801ace8:	681b      	ldr	r3, [r3, #0]
 801acea:	4a1c      	ldr	r2, [pc, #112]	; (801ad5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 801acec:	4293      	cmp	r3, r2
 801acee:	d018      	beq.n	801ad22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801acf0:	687b      	ldr	r3, [r7, #4]
 801acf2:	681b      	ldr	r3, [r3, #0]
 801acf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801acf8:	d013      	beq.n	801ad22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801acfa:	687b      	ldr	r3, [r7, #4]
 801acfc:	681b      	ldr	r3, [r3, #0]
 801acfe:	4a18      	ldr	r2, [pc, #96]	; (801ad60 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 801ad00:	4293      	cmp	r3, r2
 801ad02:	d00e      	beq.n	801ad22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801ad04:	687b      	ldr	r3, [r7, #4]
 801ad06:	681b      	ldr	r3, [r3, #0]
 801ad08:	4a16      	ldr	r2, [pc, #88]	; (801ad64 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 801ad0a:	4293      	cmp	r3, r2
 801ad0c:	d009      	beq.n	801ad22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801ad0e:	687b      	ldr	r3, [r7, #4]
 801ad10:	681b      	ldr	r3, [r3, #0]
 801ad12:	4a15      	ldr	r2, [pc, #84]	; (801ad68 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 801ad14:	4293      	cmp	r3, r2
 801ad16:	d004      	beq.n	801ad22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801ad18:	687b      	ldr	r3, [r7, #4]
 801ad1a:	681b      	ldr	r3, [r3, #0]
 801ad1c:	4a13      	ldr	r2, [pc, #76]	; (801ad6c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 801ad1e:	4293      	cmp	r3, r2
 801ad20:	d10c      	bne.n	801ad3c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801ad22:	68bb      	ldr	r3, [r7, #8]
 801ad24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801ad28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801ad2a:	683b      	ldr	r3, [r7, #0]
 801ad2c:	685b      	ldr	r3, [r3, #4]
 801ad2e:	68ba      	ldr	r2, [r7, #8]
 801ad30:	4313      	orrs	r3, r2
 801ad32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801ad34:	687b      	ldr	r3, [r7, #4]
 801ad36:	681b      	ldr	r3, [r3, #0]
 801ad38:	68ba      	ldr	r2, [r7, #8]
 801ad3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801ad3c:	687b      	ldr	r3, [r7, #4]
 801ad3e:	2201      	movs	r2, #1
 801ad40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801ad44:	687b      	ldr	r3, [r7, #4]
 801ad46:	2200      	movs	r2, #0
 801ad48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801ad4c:	2300      	movs	r3, #0
}
 801ad4e:	4618      	mov	r0, r3
 801ad50:	3714      	adds	r7, #20
 801ad52:	46bd      	mov	sp, r7
 801ad54:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad58:	4770      	bx	lr
 801ad5a:	bf00      	nop
 801ad5c:	40010000 	.word	0x40010000
 801ad60:	40000400 	.word	0x40000400
 801ad64:	40000800 	.word	0x40000800
 801ad68:	40000c00 	.word	0x40000c00
 801ad6c:	40014000 	.word	0x40014000

0801ad70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801ad70:	b480      	push	{r7}
 801ad72:	b083      	sub	sp, #12
 801ad74:	af00      	add	r7, sp, #0
 801ad76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801ad78:	bf00      	nop
 801ad7a:	370c      	adds	r7, #12
 801ad7c:	46bd      	mov	sp, r7
 801ad7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad82:	4770      	bx	lr

0801ad84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801ad84:	b480      	push	{r7}
 801ad86:	b083      	sub	sp, #12
 801ad88:	af00      	add	r7, sp, #0
 801ad8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801ad8c:	bf00      	nop
 801ad8e:	370c      	adds	r7, #12
 801ad90:	46bd      	mov	sp, r7
 801ad92:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad96:	4770      	bx	lr

0801ad98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801ad98:	b580      	push	{r7, lr}
 801ad9a:	b082      	sub	sp, #8
 801ad9c:	af00      	add	r7, sp, #0
 801ad9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801ada0:	687b      	ldr	r3, [r7, #4]
 801ada2:	2b00      	cmp	r3, #0
 801ada4:	d101      	bne.n	801adaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801ada6:	2301      	movs	r3, #1
 801ada8:	e03f      	b.n	801ae2a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 801adaa:	687b      	ldr	r3, [r7, #4]
 801adac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801adb0:	b2db      	uxtb	r3, r3
 801adb2:	2b00      	cmp	r3, #0
 801adb4:	d106      	bne.n	801adc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801adb6:	687b      	ldr	r3, [r7, #4]
 801adb8:	2200      	movs	r2, #0
 801adba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801adbe:	6878      	ldr	r0, [r7, #4]
 801adc0:	f7fa fafe 	bl	80153c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801adc4:	687b      	ldr	r3, [r7, #4]
 801adc6:	2224      	movs	r2, #36	; 0x24
 801adc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 801adcc:	687b      	ldr	r3, [r7, #4]
 801adce:	681b      	ldr	r3, [r3, #0]
 801add0:	68da      	ldr	r2, [r3, #12]
 801add2:	687b      	ldr	r3, [r7, #4]
 801add4:	681b      	ldr	r3, [r3, #0]
 801add6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801adda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 801addc:	6878      	ldr	r0, [r7, #4]
 801adde:	f000 ff9b 	bl	801bd18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801ade2:	687b      	ldr	r3, [r7, #4]
 801ade4:	681b      	ldr	r3, [r3, #0]
 801ade6:	691a      	ldr	r2, [r3, #16]
 801ade8:	687b      	ldr	r3, [r7, #4]
 801adea:	681b      	ldr	r3, [r3, #0]
 801adec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801adf0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801adf2:	687b      	ldr	r3, [r7, #4]
 801adf4:	681b      	ldr	r3, [r3, #0]
 801adf6:	695a      	ldr	r2, [r3, #20]
 801adf8:	687b      	ldr	r3, [r7, #4]
 801adfa:	681b      	ldr	r3, [r3, #0]
 801adfc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801ae00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 801ae02:	687b      	ldr	r3, [r7, #4]
 801ae04:	681b      	ldr	r3, [r3, #0]
 801ae06:	68da      	ldr	r2, [r3, #12]
 801ae08:	687b      	ldr	r3, [r7, #4]
 801ae0a:	681b      	ldr	r3, [r3, #0]
 801ae0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801ae10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801ae12:	687b      	ldr	r3, [r7, #4]
 801ae14:	2200      	movs	r2, #0
 801ae16:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 801ae18:	687b      	ldr	r3, [r7, #4]
 801ae1a:	2220      	movs	r2, #32
 801ae1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 801ae20:	687b      	ldr	r3, [r7, #4]
 801ae22:	2220      	movs	r2, #32
 801ae24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 801ae28:	2300      	movs	r3, #0
}
 801ae2a:	4618      	mov	r0, r3
 801ae2c:	3708      	adds	r7, #8
 801ae2e:	46bd      	mov	sp, r7
 801ae30:	bd80      	pop	{r7, pc}

0801ae32 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801ae32:	b580      	push	{r7, lr}
 801ae34:	b08a      	sub	sp, #40	; 0x28
 801ae36:	af02      	add	r7, sp, #8
 801ae38:	60f8      	str	r0, [r7, #12]
 801ae3a:	60b9      	str	r1, [r7, #8]
 801ae3c:	603b      	str	r3, [r7, #0]
 801ae3e:	4613      	mov	r3, r2
 801ae40:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 801ae42:	2300      	movs	r3, #0
 801ae44:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801ae46:	68fb      	ldr	r3, [r7, #12]
 801ae48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ae4c:	b2db      	uxtb	r3, r3
 801ae4e:	2b20      	cmp	r3, #32
 801ae50:	d17c      	bne.n	801af4c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 801ae52:	68bb      	ldr	r3, [r7, #8]
 801ae54:	2b00      	cmp	r3, #0
 801ae56:	d002      	beq.n	801ae5e <HAL_UART_Transmit+0x2c>
 801ae58:	88fb      	ldrh	r3, [r7, #6]
 801ae5a:	2b00      	cmp	r3, #0
 801ae5c:	d101      	bne.n	801ae62 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 801ae5e:	2301      	movs	r3, #1
 801ae60:	e075      	b.n	801af4e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801ae62:	68fb      	ldr	r3, [r7, #12]
 801ae64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801ae68:	2b01      	cmp	r3, #1
 801ae6a:	d101      	bne.n	801ae70 <HAL_UART_Transmit+0x3e>
 801ae6c:	2302      	movs	r3, #2
 801ae6e:	e06e      	b.n	801af4e <HAL_UART_Transmit+0x11c>
 801ae70:	68fb      	ldr	r3, [r7, #12]
 801ae72:	2201      	movs	r2, #1
 801ae74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801ae78:	68fb      	ldr	r3, [r7, #12]
 801ae7a:	2200      	movs	r2, #0
 801ae7c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801ae7e:	68fb      	ldr	r3, [r7, #12]
 801ae80:	2221      	movs	r2, #33	; 0x21
 801ae82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801ae86:	f7fa fd53 	bl	8015930 <HAL_GetTick>
 801ae8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 801ae8c:	68fb      	ldr	r3, [r7, #12]
 801ae8e:	88fa      	ldrh	r2, [r7, #6]
 801ae90:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 801ae92:	68fb      	ldr	r3, [r7, #12]
 801ae94:	88fa      	ldrh	r2, [r7, #6]
 801ae96:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801ae98:	68fb      	ldr	r3, [r7, #12]
 801ae9a:	689b      	ldr	r3, [r3, #8]
 801ae9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801aea0:	d108      	bne.n	801aeb4 <HAL_UART_Transmit+0x82>
 801aea2:	68fb      	ldr	r3, [r7, #12]
 801aea4:	691b      	ldr	r3, [r3, #16]
 801aea6:	2b00      	cmp	r3, #0
 801aea8:	d104      	bne.n	801aeb4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 801aeaa:	2300      	movs	r3, #0
 801aeac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801aeae:	68bb      	ldr	r3, [r7, #8]
 801aeb0:	61bb      	str	r3, [r7, #24]
 801aeb2:	e003      	b.n	801aebc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 801aeb4:	68bb      	ldr	r3, [r7, #8]
 801aeb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801aeb8:	2300      	movs	r3, #0
 801aeba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 801aebc:	68fb      	ldr	r3, [r7, #12]
 801aebe:	2200      	movs	r2, #0
 801aec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 801aec4:	e02a      	b.n	801af1c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801aec6:	683b      	ldr	r3, [r7, #0]
 801aec8:	9300      	str	r3, [sp, #0]
 801aeca:	697b      	ldr	r3, [r7, #20]
 801aecc:	2200      	movs	r2, #0
 801aece:	2180      	movs	r1, #128	; 0x80
 801aed0:	68f8      	ldr	r0, [r7, #12]
 801aed2:	f000 fc53 	bl	801b77c <UART_WaitOnFlagUntilTimeout>
 801aed6:	4603      	mov	r3, r0
 801aed8:	2b00      	cmp	r3, #0
 801aeda:	d001      	beq.n	801aee0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 801aedc:	2303      	movs	r3, #3
 801aede:	e036      	b.n	801af4e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 801aee0:	69fb      	ldr	r3, [r7, #28]
 801aee2:	2b00      	cmp	r3, #0
 801aee4:	d10b      	bne.n	801aefe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 801aee6:	69bb      	ldr	r3, [r7, #24]
 801aee8:	881b      	ldrh	r3, [r3, #0]
 801aeea:	461a      	mov	r2, r3
 801aeec:	68fb      	ldr	r3, [r7, #12]
 801aeee:	681b      	ldr	r3, [r3, #0]
 801aef0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801aef4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 801aef6:	69bb      	ldr	r3, [r7, #24]
 801aef8:	3302      	adds	r3, #2
 801aefa:	61bb      	str	r3, [r7, #24]
 801aefc:	e007      	b.n	801af0e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 801aefe:	69fb      	ldr	r3, [r7, #28]
 801af00:	781a      	ldrb	r2, [r3, #0]
 801af02:	68fb      	ldr	r3, [r7, #12]
 801af04:	681b      	ldr	r3, [r3, #0]
 801af06:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 801af08:	69fb      	ldr	r3, [r7, #28]
 801af0a:	3301      	adds	r3, #1
 801af0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801af0e:	68fb      	ldr	r3, [r7, #12]
 801af10:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801af12:	b29b      	uxth	r3, r3
 801af14:	3b01      	subs	r3, #1
 801af16:	b29a      	uxth	r2, r3
 801af18:	68fb      	ldr	r3, [r7, #12]
 801af1a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 801af1c:	68fb      	ldr	r3, [r7, #12]
 801af1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801af20:	b29b      	uxth	r3, r3
 801af22:	2b00      	cmp	r3, #0
 801af24:	d1cf      	bne.n	801aec6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801af26:	683b      	ldr	r3, [r7, #0]
 801af28:	9300      	str	r3, [sp, #0]
 801af2a:	697b      	ldr	r3, [r7, #20]
 801af2c:	2200      	movs	r2, #0
 801af2e:	2140      	movs	r1, #64	; 0x40
 801af30:	68f8      	ldr	r0, [r7, #12]
 801af32:	f000 fc23 	bl	801b77c <UART_WaitOnFlagUntilTimeout>
 801af36:	4603      	mov	r3, r0
 801af38:	2b00      	cmp	r3, #0
 801af3a:	d001      	beq.n	801af40 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 801af3c:	2303      	movs	r3, #3
 801af3e:	e006      	b.n	801af4e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801af40:	68fb      	ldr	r3, [r7, #12]
 801af42:	2220      	movs	r2, #32
 801af44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 801af48:	2300      	movs	r3, #0
 801af4a:	e000      	b.n	801af4e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 801af4c:	2302      	movs	r3, #2
  }
}
 801af4e:	4618      	mov	r0, r3
 801af50:	3720      	adds	r7, #32
 801af52:	46bd      	mov	sp, r7
 801af54:	bd80      	pop	{r7, pc}

0801af56 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801af56:	b580      	push	{r7, lr}
 801af58:	b08c      	sub	sp, #48	; 0x30
 801af5a:	af00      	add	r7, sp, #0
 801af5c:	60f8      	str	r0, [r7, #12]
 801af5e:	60b9      	str	r1, [r7, #8]
 801af60:	4613      	mov	r3, r2
 801af62:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801af64:	68fb      	ldr	r3, [r7, #12]
 801af66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801af6a:	b2db      	uxtb	r3, r3
 801af6c:	2b20      	cmp	r3, #32
 801af6e:	d152      	bne.n	801b016 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 801af70:	68bb      	ldr	r3, [r7, #8]
 801af72:	2b00      	cmp	r3, #0
 801af74:	d002      	beq.n	801af7c <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 801af76:	88fb      	ldrh	r3, [r7, #6]
 801af78:	2b00      	cmp	r3, #0
 801af7a:	d101      	bne.n	801af80 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 801af7c:	2301      	movs	r3, #1
 801af7e:	e04b      	b.n	801b018 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 801af80:	68fb      	ldr	r3, [r7, #12]
 801af82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801af86:	2b01      	cmp	r3, #1
 801af88:	d101      	bne.n	801af8e <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 801af8a:	2302      	movs	r3, #2
 801af8c:	e044      	b.n	801b018 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 801af8e:	68fb      	ldr	r3, [r7, #12]
 801af90:	2201      	movs	r2, #1
 801af92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 801af96:	68fb      	ldr	r3, [r7, #12]
 801af98:	2201      	movs	r2, #1
 801af9a:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 801af9c:	88fb      	ldrh	r3, [r7, #6]
 801af9e:	461a      	mov	r2, r3
 801afa0:	68b9      	ldr	r1, [r7, #8]
 801afa2:	68f8      	ldr	r0, [r7, #12]
 801afa4:	f000 fc58 	bl	801b858 <UART_Start_Receive_DMA>
 801afa8:	4603      	mov	r3, r0
 801afaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 801afae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801afb2:	2b00      	cmp	r3, #0
 801afb4:	d12c      	bne.n	801b010 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801afb6:	68fb      	ldr	r3, [r7, #12]
 801afb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801afba:	2b01      	cmp	r3, #1
 801afbc:	d125      	bne.n	801b00a <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 801afbe:	2300      	movs	r3, #0
 801afc0:	613b      	str	r3, [r7, #16]
 801afc2:	68fb      	ldr	r3, [r7, #12]
 801afc4:	681b      	ldr	r3, [r3, #0]
 801afc6:	681b      	ldr	r3, [r3, #0]
 801afc8:	613b      	str	r3, [r7, #16]
 801afca:	68fb      	ldr	r3, [r7, #12]
 801afcc:	681b      	ldr	r3, [r3, #0]
 801afce:	685b      	ldr	r3, [r3, #4]
 801afd0:	613b      	str	r3, [r7, #16]
 801afd2:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801afd4:	68fb      	ldr	r3, [r7, #12]
 801afd6:	681b      	ldr	r3, [r3, #0]
 801afd8:	330c      	adds	r3, #12
 801afda:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801afdc:	69bb      	ldr	r3, [r7, #24]
 801afde:	e853 3f00 	ldrex	r3, [r3]
 801afe2:	617b      	str	r3, [r7, #20]
   return(result);
 801afe4:	697b      	ldr	r3, [r7, #20]
 801afe6:	f043 0310 	orr.w	r3, r3, #16
 801afea:	62bb      	str	r3, [r7, #40]	; 0x28
 801afec:	68fb      	ldr	r3, [r7, #12]
 801afee:	681b      	ldr	r3, [r3, #0]
 801aff0:	330c      	adds	r3, #12
 801aff2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801aff4:	627a      	str	r2, [r7, #36]	; 0x24
 801aff6:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801aff8:	6a39      	ldr	r1, [r7, #32]
 801affa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801affc:	e841 2300 	strex	r3, r2, [r1]
 801b000:	61fb      	str	r3, [r7, #28]
   return(result);
 801b002:	69fb      	ldr	r3, [r7, #28]
 801b004:	2b00      	cmp	r3, #0
 801b006:	d1e5      	bne.n	801afd4 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 801b008:	e002      	b.n	801b010 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 801b00a:	2301      	movs	r3, #1
 801b00c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 801b010:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801b014:	e000      	b.n	801b018 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 801b016:	2302      	movs	r3, #2
  }
}
 801b018:	4618      	mov	r0, r3
 801b01a:	3730      	adds	r7, #48	; 0x30
 801b01c:	46bd      	mov	sp, r7
 801b01e:	bd80      	pop	{r7, pc}

0801b020 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801b020:	b580      	push	{r7, lr}
 801b022:	b0ba      	sub	sp, #232	; 0xe8
 801b024:	af00      	add	r7, sp, #0
 801b026:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 801b028:	687b      	ldr	r3, [r7, #4]
 801b02a:	681b      	ldr	r3, [r3, #0]
 801b02c:	681b      	ldr	r3, [r3, #0]
 801b02e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801b032:	687b      	ldr	r3, [r7, #4]
 801b034:	681b      	ldr	r3, [r3, #0]
 801b036:	68db      	ldr	r3, [r3, #12]
 801b038:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801b03c:	687b      	ldr	r3, [r7, #4]
 801b03e:	681b      	ldr	r3, [r3, #0]
 801b040:	695b      	ldr	r3, [r3, #20]
 801b042:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 801b046:	2300      	movs	r3, #0
 801b048:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 801b04c:	2300      	movs	r3, #0
 801b04e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 801b052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b056:	f003 030f 	and.w	r3, r3, #15
 801b05a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 801b05e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801b062:	2b00      	cmp	r3, #0
 801b064:	d10f      	bne.n	801b086 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801b066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b06a:	f003 0320 	and.w	r3, r3, #32
 801b06e:	2b00      	cmp	r3, #0
 801b070:	d009      	beq.n	801b086 <HAL_UART_IRQHandler+0x66>
 801b072:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b076:	f003 0320 	and.w	r3, r3, #32
 801b07a:	2b00      	cmp	r3, #0
 801b07c:	d003      	beq.n	801b086 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 801b07e:	6878      	ldr	r0, [r7, #4]
 801b080:	f000 fd8f 	bl	801bba2 <UART_Receive_IT>
      return;
 801b084:	e256      	b.n	801b534 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 801b086:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801b08a:	2b00      	cmp	r3, #0
 801b08c:	f000 80de 	beq.w	801b24c <HAL_UART_IRQHandler+0x22c>
 801b090:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801b094:	f003 0301 	and.w	r3, r3, #1
 801b098:	2b00      	cmp	r3, #0
 801b09a:	d106      	bne.n	801b0aa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 801b09c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b0a0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 801b0a4:	2b00      	cmp	r3, #0
 801b0a6:	f000 80d1 	beq.w	801b24c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 801b0aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b0ae:	f003 0301 	and.w	r3, r3, #1
 801b0b2:	2b00      	cmp	r3, #0
 801b0b4:	d00b      	beq.n	801b0ce <HAL_UART_IRQHandler+0xae>
 801b0b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b0ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b0be:	2b00      	cmp	r3, #0
 801b0c0:	d005      	beq.n	801b0ce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801b0c2:	687b      	ldr	r3, [r7, #4]
 801b0c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b0c6:	f043 0201 	orr.w	r2, r3, #1
 801b0ca:	687b      	ldr	r3, [r7, #4]
 801b0cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801b0ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b0d2:	f003 0304 	and.w	r3, r3, #4
 801b0d6:	2b00      	cmp	r3, #0
 801b0d8:	d00b      	beq.n	801b0f2 <HAL_UART_IRQHandler+0xd2>
 801b0da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801b0de:	f003 0301 	and.w	r3, r3, #1
 801b0e2:	2b00      	cmp	r3, #0
 801b0e4:	d005      	beq.n	801b0f2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801b0e6:	687b      	ldr	r3, [r7, #4]
 801b0e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b0ea:	f043 0202 	orr.w	r2, r3, #2
 801b0ee:	687b      	ldr	r3, [r7, #4]
 801b0f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801b0f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b0f6:	f003 0302 	and.w	r3, r3, #2
 801b0fa:	2b00      	cmp	r3, #0
 801b0fc:	d00b      	beq.n	801b116 <HAL_UART_IRQHandler+0xf6>
 801b0fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801b102:	f003 0301 	and.w	r3, r3, #1
 801b106:	2b00      	cmp	r3, #0
 801b108:	d005      	beq.n	801b116 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801b10a:	687b      	ldr	r3, [r7, #4]
 801b10c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b10e:	f043 0204 	orr.w	r2, r3, #4
 801b112:	687b      	ldr	r3, [r7, #4]
 801b114:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 801b116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b11a:	f003 0308 	and.w	r3, r3, #8
 801b11e:	2b00      	cmp	r3, #0
 801b120:	d011      	beq.n	801b146 <HAL_UART_IRQHandler+0x126>
 801b122:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b126:	f003 0320 	and.w	r3, r3, #32
 801b12a:	2b00      	cmp	r3, #0
 801b12c:	d105      	bne.n	801b13a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 801b12e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801b132:	f003 0301 	and.w	r3, r3, #1
 801b136:	2b00      	cmp	r3, #0
 801b138:	d005      	beq.n	801b146 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801b13a:	687b      	ldr	r3, [r7, #4]
 801b13c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b13e:	f043 0208 	orr.w	r2, r3, #8
 801b142:	687b      	ldr	r3, [r7, #4]
 801b144:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801b146:	687b      	ldr	r3, [r7, #4]
 801b148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b14a:	2b00      	cmp	r3, #0
 801b14c:	f000 81ed 	beq.w	801b52a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801b150:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b154:	f003 0320 	and.w	r3, r3, #32
 801b158:	2b00      	cmp	r3, #0
 801b15a:	d008      	beq.n	801b16e <HAL_UART_IRQHandler+0x14e>
 801b15c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b160:	f003 0320 	and.w	r3, r3, #32
 801b164:	2b00      	cmp	r3, #0
 801b166:	d002      	beq.n	801b16e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 801b168:	6878      	ldr	r0, [r7, #4]
 801b16a:	f000 fd1a 	bl	801bba2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 801b16e:	687b      	ldr	r3, [r7, #4]
 801b170:	681b      	ldr	r3, [r3, #0]
 801b172:	695b      	ldr	r3, [r3, #20]
 801b174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b178:	2b40      	cmp	r3, #64	; 0x40
 801b17a:	bf0c      	ite	eq
 801b17c:	2301      	moveq	r3, #1
 801b17e:	2300      	movne	r3, #0
 801b180:	b2db      	uxtb	r3, r3
 801b182:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 801b186:	687b      	ldr	r3, [r7, #4]
 801b188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b18a:	f003 0308 	and.w	r3, r3, #8
 801b18e:	2b00      	cmp	r3, #0
 801b190:	d103      	bne.n	801b19a <HAL_UART_IRQHandler+0x17a>
 801b192:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801b196:	2b00      	cmp	r3, #0
 801b198:	d04f      	beq.n	801b23a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801b19a:	6878      	ldr	r0, [r7, #4]
 801b19c:	f000 fc22 	bl	801b9e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b1a0:	687b      	ldr	r3, [r7, #4]
 801b1a2:	681b      	ldr	r3, [r3, #0]
 801b1a4:	695b      	ldr	r3, [r3, #20]
 801b1a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b1aa:	2b40      	cmp	r3, #64	; 0x40
 801b1ac:	d141      	bne.n	801b232 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801b1ae:	687b      	ldr	r3, [r7, #4]
 801b1b0:	681b      	ldr	r3, [r3, #0]
 801b1b2:	3314      	adds	r3, #20
 801b1b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b1b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801b1bc:	e853 3f00 	ldrex	r3, [r3]
 801b1c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 801b1c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801b1c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801b1cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801b1d0:	687b      	ldr	r3, [r7, #4]
 801b1d2:	681b      	ldr	r3, [r3, #0]
 801b1d4:	3314      	adds	r3, #20
 801b1d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801b1da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 801b1de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b1e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801b1e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801b1ea:	e841 2300 	strex	r3, r2, [r1]
 801b1ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 801b1f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801b1f6:	2b00      	cmp	r3, #0
 801b1f8:	d1d9      	bne.n	801b1ae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 801b1fa:	687b      	ldr	r3, [r7, #4]
 801b1fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b1fe:	2b00      	cmp	r3, #0
 801b200:	d013      	beq.n	801b22a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801b202:	687b      	ldr	r3, [r7, #4]
 801b204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b206:	4a7d      	ldr	r2, [pc, #500]	; (801b3fc <HAL_UART_IRQHandler+0x3dc>)
 801b208:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801b20a:	687b      	ldr	r3, [r7, #4]
 801b20c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b20e:	4618      	mov	r0, r3
 801b210:	f7fa fe46 	bl	8015ea0 <HAL_DMA_Abort_IT>
 801b214:	4603      	mov	r3, r0
 801b216:	2b00      	cmp	r3, #0
 801b218:	d016      	beq.n	801b248 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801b21a:	687b      	ldr	r3, [r7, #4]
 801b21c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b21e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b220:	687a      	ldr	r2, [r7, #4]
 801b222:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801b224:	4610      	mov	r0, r2
 801b226:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b228:	e00e      	b.n	801b248 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801b22a:	6878      	ldr	r0, [r7, #4]
 801b22c:	f000 f9a4 	bl	801b578 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b230:	e00a      	b.n	801b248 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801b232:	6878      	ldr	r0, [r7, #4]
 801b234:	f000 f9a0 	bl	801b578 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b238:	e006      	b.n	801b248 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801b23a:	6878      	ldr	r0, [r7, #4]
 801b23c:	f000 f99c 	bl	801b578 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801b240:	687b      	ldr	r3, [r7, #4]
 801b242:	2200      	movs	r2, #0
 801b244:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 801b246:	e170      	b.n	801b52a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b248:	bf00      	nop
    return;
 801b24a:	e16e      	b.n	801b52a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801b24c:	687b      	ldr	r3, [r7, #4]
 801b24e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b250:	2b01      	cmp	r3, #1
 801b252:	f040 814a 	bne.w	801b4ea <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 801b256:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b25a:	f003 0310 	and.w	r3, r3, #16
 801b25e:	2b00      	cmp	r3, #0
 801b260:	f000 8143 	beq.w	801b4ea <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 801b264:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b268:	f003 0310 	and.w	r3, r3, #16
 801b26c:	2b00      	cmp	r3, #0
 801b26e:	f000 813c 	beq.w	801b4ea <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 801b272:	2300      	movs	r3, #0
 801b274:	60bb      	str	r3, [r7, #8]
 801b276:	687b      	ldr	r3, [r7, #4]
 801b278:	681b      	ldr	r3, [r3, #0]
 801b27a:	681b      	ldr	r3, [r3, #0]
 801b27c:	60bb      	str	r3, [r7, #8]
 801b27e:	687b      	ldr	r3, [r7, #4]
 801b280:	681b      	ldr	r3, [r3, #0]
 801b282:	685b      	ldr	r3, [r3, #4]
 801b284:	60bb      	str	r3, [r7, #8]
 801b286:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b288:	687b      	ldr	r3, [r7, #4]
 801b28a:	681b      	ldr	r3, [r3, #0]
 801b28c:	695b      	ldr	r3, [r3, #20]
 801b28e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b292:	2b40      	cmp	r3, #64	; 0x40
 801b294:	f040 80b4 	bne.w	801b400 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801b298:	687b      	ldr	r3, [r7, #4]
 801b29a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b29c:	681b      	ldr	r3, [r3, #0]
 801b29e:	685b      	ldr	r3, [r3, #4]
 801b2a0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 801b2a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 801b2a8:	2b00      	cmp	r3, #0
 801b2aa:	f000 8140 	beq.w	801b52e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801b2ae:	687b      	ldr	r3, [r7, #4]
 801b2b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801b2b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801b2b6:	429a      	cmp	r2, r3
 801b2b8:	f080 8139 	bcs.w	801b52e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801b2bc:	687b      	ldr	r3, [r7, #4]
 801b2be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801b2c2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 801b2c4:	687b      	ldr	r3, [r7, #4]
 801b2c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b2c8:	69db      	ldr	r3, [r3, #28]
 801b2ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801b2ce:	f000 8088 	beq.w	801b3e2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801b2d2:	687b      	ldr	r3, [r7, #4]
 801b2d4:	681b      	ldr	r3, [r3, #0]
 801b2d6:	330c      	adds	r3, #12
 801b2d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b2dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801b2e0:	e853 3f00 	ldrex	r3, [r3]
 801b2e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 801b2e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801b2ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801b2f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801b2f4:	687b      	ldr	r3, [r7, #4]
 801b2f6:	681b      	ldr	r3, [r3, #0]
 801b2f8:	330c      	adds	r3, #12
 801b2fa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 801b2fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 801b302:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b306:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801b30a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801b30e:	e841 2300 	strex	r3, r2, [r1]
 801b312:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 801b316:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801b31a:	2b00      	cmp	r3, #0
 801b31c:	d1d9      	bne.n	801b2d2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801b31e:	687b      	ldr	r3, [r7, #4]
 801b320:	681b      	ldr	r3, [r3, #0]
 801b322:	3314      	adds	r3, #20
 801b324:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b326:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b328:	e853 3f00 	ldrex	r3, [r3]
 801b32c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801b32e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801b330:	f023 0301 	bic.w	r3, r3, #1
 801b334:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801b338:	687b      	ldr	r3, [r7, #4]
 801b33a:	681b      	ldr	r3, [r3, #0]
 801b33c:	3314      	adds	r3, #20
 801b33e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801b342:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801b346:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b348:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801b34a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801b34e:	e841 2300 	strex	r3, r2, [r1]
 801b352:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 801b354:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801b356:	2b00      	cmp	r3, #0
 801b358:	d1e1      	bne.n	801b31e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801b35a:	687b      	ldr	r3, [r7, #4]
 801b35c:	681b      	ldr	r3, [r3, #0]
 801b35e:	3314      	adds	r3, #20
 801b360:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b362:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801b364:	e853 3f00 	ldrex	r3, [r3]
 801b368:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801b36a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801b36c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801b370:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801b374:	687b      	ldr	r3, [r7, #4]
 801b376:	681b      	ldr	r3, [r3, #0]
 801b378:	3314      	adds	r3, #20
 801b37a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801b37e:	66fa      	str	r2, [r7, #108]	; 0x6c
 801b380:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b382:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801b384:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801b386:	e841 2300 	strex	r3, r2, [r1]
 801b38a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801b38c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801b38e:	2b00      	cmp	r3, #0
 801b390:	d1e3      	bne.n	801b35a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801b392:	687b      	ldr	r3, [r7, #4]
 801b394:	2220      	movs	r2, #32
 801b396:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801b39a:	687b      	ldr	r3, [r7, #4]
 801b39c:	2200      	movs	r2, #0
 801b39e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801b3a0:	687b      	ldr	r3, [r7, #4]
 801b3a2:	681b      	ldr	r3, [r3, #0]
 801b3a4:	330c      	adds	r3, #12
 801b3a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b3a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b3aa:	e853 3f00 	ldrex	r3, [r3]
 801b3ae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801b3b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b3b2:	f023 0310 	bic.w	r3, r3, #16
 801b3b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801b3ba:	687b      	ldr	r3, [r7, #4]
 801b3bc:	681b      	ldr	r3, [r3, #0]
 801b3be:	330c      	adds	r3, #12
 801b3c0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801b3c4:	65ba      	str	r2, [r7, #88]	; 0x58
 801b3c6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b3c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801b3ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801b3cc:	e841 2300 	strex	r3, r2, [r1]
 801b3d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801b3d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b3d4:	2b00      	cmp	r3, #0
 801b3d6:	d1e3      	bne.n	801b3a0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801b3d8:	687b      	ldr	r3, [r7, #4]
 801b3da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b3dc:	4618      	mov	r0, r3
 801b3de:	f7fa fcef 	bl	8015dc0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801b3e2:	687b      	ldr	r3, [r7, #4]
 801b3e4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 801b3e6:	687b      	ldr	r3, [r7, #4]
 801b3e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801b3ea:	b29b      	uxth	r3, r3
 801b3ec:	1ad3      	subs	r3, r2, r3
 801b3ee:	b29b      	uxth	r3, r3
 801b3f0:	4619      	mov	r1, r3
 801b3f2:	6878      	ldr	r0, [r7, #4]
 801b3f4:	f7e5 fd9a 	bl	8000f2c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 801b3f8:	e099      	b.n	801b52e <HAL_UART_IRQHandler+0x50e>
 801b3fa:	bf00      	nop
 801b3fc:	0801baab 	.word	0x0801baab
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801b400:	687b      	ldr	r3, [r7, #4]
 801b402:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 801b404:	687b      	ldr	r3, [r7, #4]
 801b406:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801b408:	b29b      	uxth	r3, r3
 801b40a:	1ad3      	subs	r3, r2, r3
 801b40c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 801b410:	687b      	ldr	r3, [r7, #4]
 801b412:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801b414:	b29b      	uxth	r3, r3
 801b416:	2b00      	cmp	r3, #0
 801b418:	f000 808b 	beq.w	801b532 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 801b41c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801b420:	2b00      	cmp	r3, #0
 801b422:	f000 8086 	beq.w	801b532 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801b426:	687b      	ldr	r3, [r7, #4]
 801b428:	681b      	ldr	r3, [r3, #0]
 801b42a:	330c      	adds	r3, #12
 801b42c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b42e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b430:	e853 3f00 	ldrex	r3, [r3]
 801b434:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801b436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b438:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801b43c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801b440:	687b      	ldr	r3, [r7, #4]
 801b442:	681b      	ldr	r3, [r3, #0]
 801b444:	330c      	adds	r3, #12
 801b446:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801b44a:	647a      	str	r2, [r7, #68]	; 0x44
 801b44c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b44e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801b450:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801b452:	e841 2300 	strex	r3, r2, [r1]
 801b456:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801b458:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b45a:	2b00      	cmp	r3, #0
 801b45c:	d1e3      	bne.n	801b426 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801b45e:	687b      	ldr	r3, [r7, #4]
 801b460:	681b      	ldr	r3, [r3, #0]
 801b462:	3314      	adds	r3, #20
 801b464:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b468:	e853 3f00 	ldrex	r3, [r3]
 801b46c:	623b      	str	r3, [r7, #32]
   return(result);
 801b46e:	6a3b      	ldr	r3, [r7, #32]
 801b470:	f023 0301 	bic.w	r3, r3, #1
 801b474:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801b478:	687b      	ldr	r3, [r7, #4]
 801b47a:	681b      	ldr	r3, [r3, #0]
 801b47c:	3314      	adds	r3, #20
 801b47e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801b482:	633a      	str	r2, [r7, #48]	; 0x30
 801b484:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b486:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801b488:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b48a:	e841 2300 	strex	r3, r2, [r1]
 801b48e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801b490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b492:	2b00      	cmp	r3, #0
 801b494:	d1e3      	bne.n	801b45e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801b496:	687b      	ldr	r3, [r7, #4]
 801b498:	2220      	movs	r2, #32
 801b49a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801b49e:	687b      	ldr	r3, [r7, #4]
 801b4a0:	2200      	movs	r2, #0
 801b4a2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801b4a4:	687b      	ldr	r3, [r7, #4]
 801b4a6:	681b      	ldr	r3, [r3, #0]
 801b4a8:	330c      	adds	r3, #12
 801b4aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b4ac:	693b      	ldr	r3, [r7, #16]
 801b4ae:	e853 3f00 	ldrex	r3, [r3]
 801b4b2:	60fb      	str	r3, [r7, #12]
   return(result);
 801b4b4:	68fb      	ldr	r3, [r7, #12]
 801b4b6:	f023 0310 	bic.w	r3, r3, #16
 801b4ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801b4be:	687b      	ldr	r3, [r7, #4]
 801b4c0:	681b      	ldr	r3, [r3, #0]
 801b4c2:	330c      	adds	r3, #12
 801b4c4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 801b4c8:	61fa      	str	r2, [r7, #28]
 801b4ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b4cc:	69b9      	ldr	r1, [r7, #24]
 801b4ce:	69fa      	ldr	r2, [r7, #28]
 801b4d0:	e841 2300 	strex	r3, r2, [r1]
 801b4d4:	617b      	str	r3, [r7, #20]
   return(result);
 801b4d6:	697b      	ldr	r3, [r7, #20]
 801b4d8:	2b00      	cmp	r3, #0
 801b4da:	d1e3      	bne.n	801b4a4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801b4dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801b4e0:	4619      	mov	r1, r3
 801b4e2:	6878      	ldr	r0, [r7, #4]
 801b4e4:	f7e5 fd22 	bl	8000f2c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 801b4e8:	e023      	b.n	801b532 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 801b4ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b4ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b4f2:	2b00      	cmp	r3, #0
 801b4f4:	d009      	beq.n	801b50a <HAL_UART_IRQHandler+0x4ea>
 801b4f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b4fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b4fe:	2b00      	cmp	r3, #0
 801b500:	d003      	beq.n	801b50a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 801b502:	6878      	ldr	r0, [r7, #4]
 801b504:	f000 fae5 	bl	801bad2 <UART_Transmit_IT>
    return;
 801b508:	e014      	b.n	801b534 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 801b50a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b50e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b512:	2b00      	cmp	r3, #0
 801b514:	d00e      	beq.n	801b534 <HAL_UART_IRQHandler+0x514>
 801b516:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b51a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b51e:	2b00      	cmp	r3, #0
 801b520:	d008      	beq.n	801b534 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 801b522:	6878      	ldr	r0, [r7, #4]
 801b524:	f000 fb25 	bl	801bb72 <UART_EndTransmit_IT>
    return;
 801b528:	e004      	b.n	801b534 <HAL_UART_IRQHandler+0x514>
    return;
 801b52a:	bf00      	nop
 801b52c:	e002      	b.n	801b534 <HAL_UART_IRQHandler+0x514>
      return;
 801b52e:	bf00      	nop
 801b530:	e000      	b.n	801b534 <HAL_UART_IRQHandler+0x514>
      return;
 801b532:	bf00      	nop
  }
}
 801b534:	37e8      	adds	r7, #232	; 0xe8
 801b536:	46bd      	mov	sp, r7
 801b538:	bd80      	pop	{r7, pc}
 801b53a:	bf00      	nop

0801b53c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801b53c:	b480      	push	{r7}
 801b53e:	b083      	sub	sp, #12
 801b540:	af00      	add	r7, sp, #0
 801b542:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 801b544:	bf00      	nop
 801b546:	370c      	adds	r7, #12
 801b548:	46bd      	mov	sp, r7
 801b54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b54e:	4770      	bx	lr

0801b550 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 801b550:	b480      	push	{r7}
 801b552:	b083      	sub	sp, #12
 801b554:	af00      	add	r7, sp, #0
 801b556:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 801b558:	bf00      	nop
 801b55a:	370c      	adds	r7, #12
 801b55c:	46bd      	mov	sp, r7
 801b55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b562:	4770      	bx	lr

0801b564 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801b564:	b480      	push	{r7}
 801b566:	b083      	sub	sp, #12
 801b568:	af00      	add	r7, sp, #0
 801b56a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 801b56c:	bf00      	nop
 801b56e:	370c      	adds	r7, #12
 801b570:	46bd      	mov	sp, r7
 801b572:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b576:	4770      	bx	lr

0801b578 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801b578:	b480      	push	{r7}
 801b57a:	b083      	sub	sp, #12
 801b57c:	af00      	add	r7, sp, #0
 801b57e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 801b580:	bf00      	nop
 801b582:	370c      	adds	r7, #12
 801b584:	46bd      	mov	sp, r7
 801b586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b58a:	4770      	bx	lr

0801b58c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801b58c:	b580      	push	{r7, lr}
 801b58e:	b09c      	sub	sp, #112	; 0x70
 801b590:	af00      	add	r7, sp, #0
 801b592:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801b594:	687b      	ldr	r3, [r7, #4]
 801b596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b598:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 801b59a:	687b      	ldr	r3, [r7, #4]
 801b59c:	681b      	ldr	r3, [r3, #0]
 801b59e:	681b      	ldr	r3, [r3, #0]
 801b5a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b5a4:	2b00      	cmp	r3, #0
 801b5a6:	d172      	bne.n	801b68e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 801b5a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b5aa:	2200      	movs	r2, #0
 801b5ac:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801b5ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b5b0:	681b      	ldr	r3, [r3, #0]
 801b5b2:	330c      	adds	r3, #12
 801b5b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b5b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b5b8:	e853 3f00 	ldrex	r3, [r3]
 801b5bc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801b5be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b5c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801b5c4:	66bb      	str	r3, [r7, #104]	; 0x68
 801b5c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b5c8:	681b      	ldr	r3, [r3, #0]
 801b5ca:	330c      	adds	r3, #12
 801b5cc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801b5ce:	65ba      	str	r2, [r7, #88]	; 0x58
 801b5d0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b5d2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801b5d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801b5d6:	e841 2300 	strex	r3, r2, [r1]
 801b5da:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801b5dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b5de:	2b00      	cmp	r3, #0
 801b5e0:	d1e5      	bne.n	801b5ae <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801b5e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b5e4:	681b      	ldr	r3, [r3, #0]
 801b5e6:	3314      	adds	r3, #20
 801b5e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b5ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b5ec:	e853 3f00 	ldrex	r3, [r3]
 801b5f0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801b5f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b5f4:	f023 0301 	bic.w	r3, r3, #1
 801b5f8:	667b      	str	r3, [r7, #100]	; 0x64
 801b5fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b5fc:	681b      	ldr	r3, [r3, #0]
 801b5fe:	3314      	adds	r3, #20
 801b600:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801b602:	647a      	str	r2, [r7, #68]	; 0x44
 801b604:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b606:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801b608:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801b60a:	e841 2300 	strex	r3, r2, [r1]
 801b60e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801b610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b612:	2b00      	cmp	r3, #0
 801b614:	d1e5      	bne.n	801b5e2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801b616:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b618:	681b      	ldr	r3, [r3, #0]
 801b61a:	3314      	adds	r3, #20
 801b61c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b61e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b620:	e853 3f00 	ldrex	r3, [r3]
 801b624:	623b      	str	r3, [r7, #32]
   return(result);
 801b626:	6a3b      	ldr	r3, [r7, #32]
 801b628:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801b62c:	663b      	str	r3, [r7, #96]	; 0x60
 801b62e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b630:	681b      	ldr	r3, [r3, #0]
 801b632:	3314      	adds	r3, #20
 801b634:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801b636:	633a      	str	r2, [r7, #48]	; 0x30
 801b638:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b63a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801b63c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b63e:	e841 2300 	strex	r3, r2, [r1]
 801b642:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801b644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b646:	2b00      	cmp	r3, #0
 801b648:	d1e5      	bne.n	801b616 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801b64a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b64c:	2220      	movs	r2, #32
 801b64e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801b652:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b656:	2b01      	cmp	r3, #1
 801b658:	d119      	bne.n	801b68e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801b65a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b65c:	681b      	ldr	r3, [r3, #0]
 801b65e:	330c      	adds	r3, #12
 801b660:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b662:	693b      	ldr	r3, [r7, #16]
 801b664:	e853 3f00 	ldrex	r3, [r3]
 801b668:	60fb      	str	r3, [r7, #12]
   return(result);
 801b66a:	68fb      	ldr	r3, [r7, #12]
 801b66c:	f023 0310 	bic.w	r3, r3, #16
 801b670:	65fb      	str	r3, [r7, #92]	; 0x5c
 801b672:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b674:	681b      	ldr	r3, [r3, #0]
 801b676:	330c      	adds	r3, #12
 801b678:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801b67a:	61fa      	str	r2, [r7, #28]
 801b67c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b67e:	69b9      	ldr	r1, [r7, #24]
 801b680:	69fa      	ldr	r2, [r7, #28]
 801b682:	e841 2300 	strex	r3, r2, [r1]
 801b686:	617b      	str	r3, [r7, #20]
   return(result);
 801b688:	697b      	ldr	r3, [r7, #20]
 801b68a:	2b00      	cmp	r3, #0
 801b68c:	d1e5      	bne.n	801b65a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801b68e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b692:	2b01      	cmp	r3, #1
 801b694:	d106      	bne.n	801b6a4 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801b696:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b698:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801b69a:	4619      	mov	r1, r3
 801b69c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801b69e:	f7e5 fc45 	bl	8000f2c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801b6a2:	e002      	b.n	801b6aa <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 801b6a4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801b6a6:	f7ff ff53 	bl	801b550 <HAL_UART_RxCpltCallback>
}
 801b6aa:	bf00      	nop
 801b6ac:	3770      	adds	r7, #112	; 0x70
 801b6ae:	46bd      	mov	sp, r7
 801b6b0:	bd80      	pop	{r7, pc}

0801b6b2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801b6b2:	b580      	push	{r7, lr}
 801b6b4:	b084      	sub	sp, #16
 801b6b6:	af00      	add	r7, sp, #0
 801b6b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801b6ba:	687b      	ldr	r3, [r7, #4]
 801b6bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b6be:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801b6c0:	68fb      	ldr	r3, [r7, #12]
 801b6c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b6c4:	2b01      	cmp	r3, #1
 801b6c6:	d108      	bne.n	801b6da <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 801b6c8:	68fb      	ldr	r3, [r7, #12]
 801b6ca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801b6cc:	085b      	lsrs	r3, r3, #1
 801b6ce:	b29b      	uxth	r3, r3
 801b6d0:	4619      	mov	r1, r3
 801b6d2:	68f8      	ldr	r0, [r7, #12]
 801b6d4:	f7e5 fc2a 	bl	8000f2c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801b6d8:	e002      	b.n	801b6e0 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 801b6da:	68f8      	ldr	r0, [r7, #12]
 801b6dc:	f7ff ff42 	bl	801b564 <HAL_UART_RxHalfCpltCallback>
}
 801b6e0:	bf00      	nop
 801b6e2:	3710      	adds	r7, #16
 801b6e4:	46bd      	mov	sp, r7
 801b6e6:	bd80      	pop	{r7, pc}

0801b6e8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801b6e8:	b580      	push	{r7, lr}
 801b6ea:	b084      	sub	sp, #16
 801b6ec:	af00      	add	r7, sp, #0
 801b6ee:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 801b6f0:	2300      	movs	r3, #0
 801b6f2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801b6f4:	687b      	ldr	r3, [r7, #4]
 801b6f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b6f8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 801b6fa:	68bb      	ldr	r3, [r7, #8]
 801b6fc:	681b      	ldr	r3, [r3, #0]
 801b6fe:	695b      	ldr	r3, [r3, #20]
 801b700:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b704:	2b80      	cmp	r3, #128	; 0x80
 801b706:	bf0c      	ite	eq
 801b708:	2301      	moveq	r3, #1
 801b70a:	2300      	movne	r3, #0
 801b70c:	b2db      	uxtb	r3, r3
 801b70e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 801b710:	68bb      	ldr	r3, [r7, #8]
 801b712:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801b716:	b2db      	uxtb	r3, r3
 801b718:	2b21      	cmp	r3, #33	; 0x21
 801b71a:	d108      	bne.n	801b72e <UART_DMAError+0x46>
 801b71c:	68fb      	ldr	r3, [r7, #12]
 801b71e:	2b00      	cmp	r3, #0
 801b720:	d005      	beq.n	801b72e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 801b722:	68bb      	ldr	r3, [r7, #8]
 801b724:	2200      	movs	r2, #0
 801b726:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 801b728:	68b8      	ldr	r0, [r7, #8]
 801b72a:	f000 f933 	bl	801b994 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 801b72e:	68bb      	ldr	r3, [r7, #8]
 801b730:	681b      	ldr	r3, [r3, #0]
 801b732:	695b      	ldr	r3, [r3, #20]
 801b734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b738:	2b40      	cmp	r3, #64	; 0x40
 801b73a:	bf0c      	ite	eq
 801b73c:	2301      	moveq	r3, #1
 801b73e:	2300      	movne	r3, #0
 801b740:	b2db      	uxtb	r3, r3
 801b742:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 801b744:	68bb      	ldr	r3, [r7, #8]
 801b746:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801b74a:	b2db      	uxtb	r3, r3
 801b74c:	2b22      	cmp	r3, #34	; 0x22
 801b74e:	d108      	bne.n	801b762 <UART_DMAError+0x7a>
 801b750:	68fb      	ldr	r3, [r7, #12]
 801b752:	2b00      	cmp	r3, #0
 801b754:	d005      	beq.n	801b762 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 801b756:	68bb      	ldr	r3, [r7, #8]
 801b758:	2200      	movs	r2, #0
 801b75a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 801b75c:	68b8      	ldr	r0, [r7, #8]
 801b75e:	f000 f941 	bl	801b9e4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801b762:	68bb      	ldr	r3, [r7, #8]
 801b764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b766:	f043 0210 	orr.w	r2, r3, #16
 801b76a:	68bb      	ldr	r3, [r7, #8]
 801b76c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801b76e:	68b8      	ldr	r0, [r7, #8]
 801b770:	f7ff ff02 	bl	801b578 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801b774:	bf00      	nop
 801b776:	3710      	adds	r7, #16
 801b778:	46bd      	mov	sp, r7
 801b77a:	bd80      	pop	{r7, pc}

0801b77c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 801b77c:	b580      	push	{r7, lr}
 801b77e:	b090      	sub	sp, #64	; 0x40
 801b780:	af00      	add	r7, sp, #0
 801b782:	60f8      	str	r0, [r7, #12]
 801b784:	60b9      	str	r1, [r7, #8]
 801b786:	603b      	str	r3, [r7, #0]
 801b788:	4613      	mov	r3, r2
 801b78a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801b78c:	e050      	b.n	801b830 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801b78e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b790:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b794:	d04c      	beq.n	801b830 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 801b796:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b798:	2b00      	cmp	r3, #0
 801b79a:	d007      	beq.n	801b7ac <UART_WaitOnFlagUntilTimeout+0x30>
 801b79c:	f7fa f8c8 	bl	8015930 <HAL_GetTick>
 801b7a0:	4602      	mov	r2, r0
 801b7a2:	683b      	ldr	r3, [r7, #0]
 801b7a4:	1ad3      	subs	r3, r2, r3
 801b7a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801b7a8:	429a      	cmp	r2, r3
 801b7aa:	d241      	bcs.n	801b830 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801b7ac:	68fb      	ldr	r3, [r7, #12]
 801b7ae:	681b      	ldr	r3, [r3, #0]
 801b7b0:	330c      	adds	r3, #12
 801b7b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b7b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b7b6:	e853 3f00 	ldrex	r3, [r3]
 801b7ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801b7bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b7be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801b7c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 801b7c4:	68fb      	ldr	r3, [r7, #12]
 801b7c6:	681b      	ldr	r3, [r3, #0]
 801b7c8:	330c      	adds	r3, #12
 801b7ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801b7cc:	637a      	str	r2, [r7, #52]	; 0x34
 801b7ce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b7d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801b7d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b7d4:	e841 2300 	strex	r3, r2, [r1]
 801b7d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801b7da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b7dc:	2b00      	cmp	r3, #0
 801b7de:	d1e5      	bne.n	801b7ac <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801b7e0:	68fb      	ldr	r3, [r7, #12]
 801b7e2:	681b      	ldr	r3, [r3, #0]
 801b7e4:	3314      	adds	r3, #20
 801b7e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b7e8:	697b      	ldr	r3, [r7, #20]
 801b7ea:	e853 3f00 	ldrex	r3, [r3]
 801b7ee:	613b      	str	r3, [r7, #16]
   return(result);
 801b7f0:	693b      	ldr	r3, [r7, #16]
 801b7f2:	f023 0301 	bic.w	r3, r3, #1
 801b7f6:	63bb      	str	r3, [r7, #56]	; 0x38
 801b7f8:	68fb      	ldr	r3, [r7, #12]
 801b7fa:	681b      	ldr	r3, [r3, #0]
 801b7fc:	3314      	adds	r3, #20
 801b7fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b800:	623a      	str	r2, [r7, #32]
 801b802:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b804:	69f9      	ldr	r1, [r7, #28]
 801b806:	6a3a      	ldr	r2, [r7, #32]
 801b808:	e841 2300 	strex	r3, r2, [r1]
 801b80c:	61bb      	str	r3, [r7, #24]
   return(result);
 801b80e:	69bb      	ldr	r3, [r7, #24]
 801b810:	2b00      	cmp	r3, #0
 801b812:	d1e5      	bne.n	801b7e0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 801b814:	68fb      	ldr	r3, [r7, #12]
 801b816:	2220      	movs	r2, #32
 801b818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 801b81c:	68fb      	ldr	r3, [r7, #12]
 801b81e:	2220      	movs	r2, #32
 801b820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 801b824:	68fb      	ldr	r3, [r7, #12]
 801b826:	2200      	movs	r2, #0
 801b828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 801b82c:	2303      	movs	r3, #3
 801b82e:	e00f      	b.n	801b850 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801b830:	68fb      	ldr	r3, [r7, #12]
 801b832:	681b      	ldr	r3, [r3, #0]
 801b834:	681a      	ldr	r2, [r3, #0]
 801b836:	68bb      	ldr	r3, [r7, #8]
 801b838:	4013      	ands	r3, r2
 801b83a:	68ba      	ldr	r2, [r7, #8]
 801b83c:	429a      	cmp	r2, r3
 801b83e:	bf0c      	ite	eq
 801b840:	2301      	moveq	r3, #1
 801b842:	2300      	movne	r3, #0
 801b844:	b2db      	uxtb	r3, r3
 801b846:	461a      	mov	r2, r3
 801b848:	79fb      	ldrb	r3, [r7, #7]
 801b84a:	429a      	cmp	r2, r3
 801b84c:	d09f      	beq.n	801b78e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801b84e:	2300      	movs	r3, #0
}
 801b850:	4618      	mov	r0, r3
 801b852:	3740      	adds	r7, #64	; 0x40
 801b854:	46bd      	mov	sp, r7
 801b856:	bd80      	pop	{r7, pc}

0801b858 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801b858:	b580      	push	{r7, lr}
 801b85a:	b098      	sub	sp, #96	; 0x60
 801b85c:	af00      	add	r7, sp, #0
 801b85e:	60f8      	str	r0, [r7, #12]
 801b860:	60b9      	str	r1, [r7, #8]
 801b862:	4613      	mov	r3, r2
 801b864:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 801b866:	68ba      	ldr	r2, [r7, #8]
 801b868:	68fb      	ldr	r3, [r7, #12]
 801b86a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 801b86c:	68fb      	ldr	r3, [r7, #12]
 801b86e:	88fa      	ldrh	r2, [r7, #6]
 801b870:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801b872:	68fb      	ldr	r3, [r7, #12]
 801b874:	2200      	movs	r2, #0
 801b876:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801b878:	68fb      	ldr	r3, [r7, #12]
 801b87a:	2222      	movs	r2, #34	; 0x22
 801b87c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801b880:	68fb      	ldr	r3, [r7, #12]
 801b882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b884:	4a40      	ldr	r2, [pc, #256]	; (801b988 <UART_Start_Receive_DMA+0x130>)
 801b886:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801b888:	68fb      	ldr	r3, [r7, #12]
 801b88a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b88c:	4a3f      	ldr	r2, [pc, #252]	; (801b98c <UART_Start_Receive_DMA+0x134>)
 801b88e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 801b890:	68fb      	ldr	r3, [r7, #12]
 801b892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b894:	4a3e      	ldr	r2, [pc, #248]	; (801b990 <UART_Start_Receive_DMA+0x138>)
 801b896:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 801b898:	68fb      	ldr	r3, [r7, #12]
 801b89a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b89c:	2200      	movs	r2, #0
 801b89e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 801b8a0:	f107 0308 	add.w	r3, r7, #8
 801b8a4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 801b8a6:	68fb      	ldr	r3, [r7, #12]
 801b8a8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801b8aa:	68fb      	ldr	r3, [r7, #12]
 801b8ac:	681b      	ldr	r3, [r3, #0]
 801b8ae:	3304      	adds	r3, #4
 801b8b0:	4619      	mov	r1, r3
 801b8b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801b8b4:	681a      	ldr	r2, [r3, #0]
 801b8b6:	88fb      	ldrh	r3, [r7, #6]
 801b8b8:	f7fa fa2a 	bl	8015d10 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 801b8bc:	2300      	movs	r3, #0
 801b8be:	613b      	str	r3, [r7, #16]
 801b8c0:	68fb      	ldr	r3, [r7, #12]
 801b8c2:	681b      	ldr	r3, [r3, #0]
 801b8c4:	681b      	ldr	r3, [r3, #0]
 801b8c6:	613b      	str	r3, [r7, #16]
 801b8c8:	68fb      	ldr	r3, [r7, #12]
 801b8ca:	681b      	ldr	r3, [r3, #0]
 801b8cc:	685b      	ldr	r3, [r3, #4]
 801b8ce:	613b      	str	r3, [r7, #16]
 801b8d0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801b8d2:	68fb      	ldr	r3, [r7, #12]
 801b8d4:	2200      	movs	r2, #0
 801b8d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 801b8da:	68fb      	ldr	r3, [r7, #12]
 801b8dc:	691b      	ldr	r3, [r3, #16]
 801b8de:	2b00      	cmp	r3, #0
 801b8e0:	d019      	beq.n	801b916 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801b8e2:	68fb      	ldr	r3, [r7, #12]
 801b8e4:	681b      	ldr	r3, [r3, #0]
 801b8e6:	330c      	adds	r3, #12
 801b8e8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b8ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b8ec:	e853 3f00 	ldrex	r3, [r3]
 801b8f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801b8f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b8f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801b8f8:	65bb      	str	r3, [r7, #88]	; 0x58
 801b8fa:	68fb      	ldr	r3, [r7, #12]
 801b8fc:	681b      	ldr	r3, [r3, #0]
 801b8fe:	330c      	adds	r3, #12
 801b900:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801b902:	64fa      	str	r2, [r7, #76]	; 0x4c
 801b904:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b906:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801b908:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801b90a:	e841 2300 	strex	r3, r2, [r1]
 801b90e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801b910:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b912:	2b00      	cmp	r3, #0
 801b914:	d1e5      	bne.n	801b8e2 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801b916:	68fb      	ldr	r3, [r7, #12]
 801b918:	681b      	ldr	r3, [r3, #0]
 801b91a:	3314      	adds	r3, #20
 801b91c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b91e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b920:	e853 3f00 	ldrex	r3, [r3]
 801b924:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801b926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b928:	f043 0301 	orr.w	r3, r3, #1
 801b92c:	657b      	str	r3, [r7, #84]	; 0x54
 801b92e:	68fb      	ldr	r3, [r7, #12]
 801b930:	681b      	ldr	r3, [r3, #0]
 801b932:	3314      	adds	r3, #20
 801b934:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801b936:	63ba      	str	r2, [r7, #56]	; 0x38
 801b938:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b93a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801b93c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b93e:	e841 2300 	strex	r3, r2, [r1]
 801b942:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801b944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b946:	2b00      	cmp	r3, #0
 801b948:	d1e5      	bne.n	801b916 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801b94a:	68fb      	ldr	r3, [r7, #12]
 801b94c:	681b      	ldr	r3, [r3, #0]
 801b94e:	3314      	adds	r3, #20
 801b950:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b952:	69bb      	ldr	r3, [r7, #24]
 801b954:	e853 3f00 	ldrex	r3, [r3]
 801b958:	617b      	str	r3, [r7, #20]
   return(result);
 801b95a:	697b      	ldr	r3, [r7, #20]
 801b95c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b960:	653b      	str	r3, [r7, #80]	; 0x50
 801b962:	68fb      	ldr	r3, [r7, #12]
 801b964:	681b      	ldr	r3, [r3, #0]
 801b966:	3314      	adds	r3, #20
 801b968:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801b96a:	627a      	str	r2, [r7, #36]	; 0x24
 801b96c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b96e:	6a39      	ldr	r1, [r7, #32]
 801b970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b972:	e841 2300 	strex	r3, r2, [r1]
 801b976:	61fb      	str	r3, [r7, #28]
   return(result);
 801b978:	69fb      	ldr	r3, [r7, #28]
 801b97a:	2b00      	cmp	r3, #0
 801b97c:	d1e5      	bne.n	801b94a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 801b97e:	2300      	movs	r3, #0
}
 801b980:	4618      	mov	r0, r3
 801b982:	3760      	adds	r7, #96	; 0x60
 801b984:	46bd      	mov	sp, r7
 801b986:	bd80      	pop	{r7, pc}
 801b988:	0801b58d 	.word	0x0801b58d
 801b98c:	0801b6b3 	.word	0x0801b6b3
 801b990:	0801b6e9 	.word	0x0801b6e9

0801b994 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801b994:	b480      	push	{r7}
 801b996:	b089      	sub	sp, #36	; 0x24
 801b998:	af00      	add	r7, sp, #0
 801b99a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 801b99c:	687b      	ldr	r3, [r7, #4]
 801b99e:	681b      	ldr	r3, [r3, #0]
 801b9a0:	330c      	adds	r3, #12
 801b9a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b9a4:	68fb      	ldr	r3, [r7, #12]
 801b9a6:	e853 3f00 	ldrex	r3, [r3]
 801b9aa:	60bb      	str	r3, [r7, #8]
   return(result);
 801b9ac:	68bb      	ldr	r3, [r7, #8]
 801b9ae:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 801b9b2:	61fb      	str	r3, [r7, #28]
 801b9b4:	687b      	ldr	r3, [r7, #4]
 801b9b6:	681b      	ldr	r3, [r3, #0]
 801b9b8:	330c      	adds	r3, #12
 801b9ba:	69fa      	ldr	r2, [r7, #28]
 801b9bc:	61ba      	str	r2, [r7, #24]
 801b9be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b9c0:	6979      	ldr	r1, [r7, #20]
 801b9c2:	69ba      	ldr	r2, [r7, #24]
 801b9c4:	e841 2300 	strex	r3, r2, [r1]
 801b9c8:	613b      	str	r3, [r7, #16]
   return(result);
 801b9ca:	693b      	ldr	r3, [r7, #16]
 801b9cc:	2b00      	cmp	r3, #0
 801b9ce:	d1e5      	bne.n	801b99c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801b9d0:	687b      	ldr	r3, [r7, #4]
 801b9d2:	2220      	movs	r2, #32
 801b9d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 801b9d8:	bf00      	nop
 801b9da:	3724      	adds	r7, #36	; 0x24
 801b9dc:	46bd      	mov	sp, r7
 801b9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9e2:	4770      	bx	lr

0801b9e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801b9e4:	b480      	push	{r7}
 801b9e6:	b095      	sub	sp, #84	; 0x54
 801b9e8:	af00      	add	r7, sp, #0
 801b9ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801b9ec:	687b      	ldr	r3, [r7, #4]
 801b9ee:	681b      	ldr	r3, [r3, #0]
 801b9f0:	330c      	adds	r3, #12
 801b9f2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b9f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b9f6:	e853 3f00 	ldrex	r3, [r3]
 801b9fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801b9fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b9fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801ba02:	64fb      	str	r3, [r7, #76]	; 0x4c
 801ba04:	687b      	ldr	r3, [r7, #4]
 801ba06:	681b      	ldr	r3, [r3, #0]
 801ba08:	330c      	adds	r3, #12
 801ba0a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801ba0c:	643a      	str	r2, [r7, #64]	; 0x40
 801ba0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ba10:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801ba12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801ba14:	e841 2300 	strex	r3, r2, [r1]
 801ba18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801ba1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ba1c:	2b00      	cmp	r3, #0
 801ba1e:	d1e5      	bne.n	801b9ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801ba20:	687b      	ldr	r3, [r7, #4]
 801ba22:	681b      	ldr	r3, [r3, #0]
 801ba24:	3314      	adds	r3, #20
 801ba26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ba28:	6a3b      	ldr	r3, [r7, #32]
 801ba2a:	e853 3f00 	ldrex	r3, [r3]
 801ba2e:	61fb      	str	r3, [r7, #28]
   return(result);
 801ba30:	69fb      	ldr	r3, [r7, #28]
 801ba32:	f023 0301 	bic.w	r3, r3, #1
 801ba36:	64bb      	str	r3, [r7, #72]	; 0x48
 801ba38:	687b      	ldr	r3, [r7, #4]
 801ba3a:	681b      	ldr	r3, [r3, #0]
 801ba3c:	3314      	adds	r3, #20
 801ba3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801ba40:	62fa      	str	r2, [r7, #44]	; 0x2c
 801ba42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ba44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801ba46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ba48:	e841 2300 	strex	r3, r2, [r1]
 801ba4c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801ba4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ba50:	2b00      	cmp	r3, #0
 801ba52:	d1e5      	bne.n	801ba20 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801ba54:	687b      	ldr	r3, [r7, #4]
 801ba56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ba58:	2b01      	cmp	r3, #1
 801ba5a:	d119      	bne.n	801ba90 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801ba5c:	687b      	ldr	r3, [r7, #4]
 801ba5e:	681b      	ldr	r3, [r3, #0]
 801ba60:	330c      	adds	r3, #12
 801ba62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ba64:	68fb      	ldr	r3, [r7, #12]
 801ba66:	e853 3f00 	ldrex	r3, [r3]
 801ba6a:	60bb      	str	r3, [r7, #8]
   return(result);
 801ba6c:	68bb      	ldr	r3, [r7, #8]
 801ba6e:	f023 0310 	bic.w	r3, r3, #16
 801ba72:	647b      	str	r3, [r7, #68]	; 0x44
 801ba74:	687b      	ldr	r3, [r7, #4]
 801ba76:	681b      	ldr	r3, [r3, #0]
 801ba78:	330c      	adds	r3, #12
 801ba7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801ba7c:	61ba      	str	r2, [r7, #24]
 801ba7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ba80:	6979      	ldr	r1, [r7, #20]
 801ba82:	69ba      	ldr	r2, [r7, #24]
 801ba84:	e841 2300 	strex	r3, r2, [r1]
 801ba88:	613b      	str	r3, [r7, #16]
   return(result);
 801ba8a:	693b      	ldr	r3, [r7, #16]
 801ba8c:	2b00      	cmp	r3, #0
 801ba8e:	d1e5      	bne.n	801ba5c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801ba90:	687b      	ldr	r3, [r7, #4]
 801ba92:	2220      	movs	r2, #32
 801ba94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801ba98:	687b      	ldr	r3, [r7, #4]
 801ba9a:	2200      	movs	r2, #0
 801ba9c:	631a      	str	r2, [r3, #48]	; 0x30
}
 801ba9e:	bf00      	nop
 801baa0:	3754      	adds	r7, #84	; 0x54
 801baa2:	46bd      	mov	sp, r7
 801baa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801baa8:	4770      	bx	lr

0801baaa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801baaa:	b580      	push	{r7, lr}
 801baac:	b084      	sub	sp, #16
 801baae:	af00      	add	r7, sp, #0
 801bab0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801bab2:	687b      	ldr	r3, [r7, #4]
 801bab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bab6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 801bab8:	68fb      	ldr	r3, [r7, #12]
 801baba:	2200      	movs	r2, #0
 801babc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 801babe:	68fb      	ldr	r3, [r7, #12]
 801bac0:	2200      	movs	r2, #0
 801bac2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801bac4:	68f8      	ldr	r0, [r7, #12]
 801bac6:	f7ff fd57 	bl	801b578 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801baca:	bf00      	nop
 801bacc:	3710      	adds	r7, #16
 801bace:	46bd      	mov	sp, r7
 801bad0:	bd80      	pop	{r7, pc}

0801bad2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 801bad2:	b480      	push	{r7}
 801bad4:	b085      	sub	sp, #20
 801bad6:	af00      	add	r7, sp, #0
 801bad8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801bada:	687b      	ldr	r3, [r7, #4]
 801badc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801bae0:	b2db      	uxtb	r3, r3
 801bae2:	2b21      	cmp	r3, #33	; 0x21
 801bae4:	d13e      	bne.n	801bb64 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801bae6:	687b      	ldr	r3, [r7, #4]
 801bae8:	689b      	ldr	r3, [r3, #8]
 801baea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801baee:	d114      	bne.n	801bb1a <UART_Transmit_IT+0x48>
 801baf0:	687b      	ldr	r3, [r7, #4]
 801baf2:	691b      	ldr	r3, [r3, #16]
 801baf4:	2b00      	cmp	r3, #0
 801baf6:	d110      	bne.n	801bb1a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 801baf8:	687b      	ldr	r3, [r7, #4]
 801bafa:	6a1b      	ldr	r3, [r3, #32]
 801bafc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 801bafe:	68fb      	ldr	r3, [r7, #12]
 801bb00:	881b      	ldrh	r3, [r3, #0]
 801bb02:	461a      	mov	r2, r3
 801bb04:	687b      	ldr	r3, [r7, #4]
 801bb06:	681b      	ldr	r3, [r3, #0]
 801bb08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801bb0c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 801bb0e:	687b      	ldr	r3, [r7, #4]
 801bb10:	6a1b      	ldr	r3, [r3, #32]
 801bb12:	1c9a      	adds	r2, r3, #2
 801bb14:	687b      	ldr	r3, [r7, #4]
 801bb16:	621a      	str	r2, [r3, #32]
 801bb18:	e008      	b.n	801bb2c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 801bb1a:	687b      	ldr	r3, [r7, #4]
 801bb1c:	6a1b      	ldr	r3, [r3, #32]
 801bb1e:	1c59      	adds	r1, r3, #1
 801bb20:	687a      	ldr	r2, [r7, #4]
 801bb22:	6211      	str	r1, [r2, #32]
 801bb24:	781a      	ldrb	r2, [r3, #0]
 801bb26:	687b      	ldr	r3, [r7, #4]
 801bb28:	681b      	ldr	r3, [r3, #0]
 801bb2a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 801bb2c:	687b      	ldr	r3, [r7, #4]
 801bb2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801bb30:	b29b      	uxth	r3, r3
 801bb32:	3b01      	subs	r3, #1
 801bb34:	b29b      	uxth	r3, r3
 801bb36:	687a      	ldr	r2, [r7, #4]
 801bb38:	4619      	mov	r1, r3
 801bb3a:	84d1      	strh	r1, [r2, #38]	; 0x26
 801bb3c:	2b00      	cmp	r3, #0
 801bb3e:	d10f      	bne.n	801bb60 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801bb40:	687b      	ldr	r3, [r7, #4]
 801bb42:	681b      	ldr	r3, [r3, #0]
 801bb44:	68da      	ldr	r2, [r3, #12]
 801bb46:	687b      	ldr	r3, [r7, #4]
 801bb48:	681b      	ldr	r3, [r3, #0]
 801bb4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801bb4e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 801bb50:	687b      	ldr	r3, [r7, #4]
 801bb52:	681b      	ldr	r3, [r3, #0]
 801bb54:	68da      	ldr	r2, [r3, #12]
 801bb56:	687b      	ldr	r3, [r7, #4]
 801bb58:	681b      	ldr	r3, [r3, #0]
 801bb5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801bb5e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 801bb60:	2300      	movs	r3, #0
 801bb62:	e000      	b.n	801bb66 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 801bb64:	2302      	movs	r3, #2
  }
}
 801bb66:	4618      	mov	r0, r3
 801bb68:	3714      	adds	r7, #20
 801bb6a:	46bd      	mov	sp, r7
 801bb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb70:	4770      	bx	lr

0801bb72 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801bb72:	b580      	push	{r7, lr}
 801bb74:	b082      	sub	sp, #8
 801bb76:	af00      	add	r7, sp, #0
 801bb78:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 801bb7a:	687b      	ldr	r3, [r7, #4]
 801bb7c:	681b      	ldr	r3, [r3, #0]
 801bb7e:	68da      	ldr	r2, [r3, #12]
 801bb80:	687b      	ldr	r3, [r7, #4]
 801bb82:	681b      	ldr	r3, [r3, #0]
 801bb84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801bb88:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801bb8a:	687b      	ldr	r3, [r7, #4]
 801bb8c:	2220      	movs	r2, #32
 801bb8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801bb92:	6878      	ldr	r0, [r7, #4]
 801bb94:	f7ff fcd2 	bl	801b53c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 801bb98:	2300      	movs	r3, #0
}
 801bb9a:	4618      	mov	r0, r3
 801bb9c:	3708      	adds	r7, #8
 801bb9e:	46bd      	mov	sp, r7
 801bba0:	bd80      	pop	{r7, pc}

0801bba2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 801bba2:	b580      	push	{r7, lr}
 801bba4:	b08c      	sub	sp, #48	; 0x30
 801bba6:	af00      	add	r7, sp, #0
 801bba8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801bbaa:	687b      	ldr	r3, [r7, #4]
 801bbac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801bbb0:	b2db      	uxtb	r3, r3
 801bbb2:	2b22      	cmp	r3, #34	; 0x22
 801bbb4:	f040 80ab 	bne.w	801bd0e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801bbb8:	687b      	ldr	r3, [r7, #4]
 801bbba:	689b      	ldr	r3, [r3, #8]
 801bbbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801bbc0:	d117      	bne.n	801bbf2 <UART_Receive_IT+0x50>
 801bbc2:	687b      	ldr	r3, [r7, #4]
 801bbc4:	691b      	ldr	r3, [r3, #16]
 801bbc6:	2b00      	cmp	r3, #0
 801bbc8:	d113      	bne.n	801bbf2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 801bbca:	2300      	movs	r3, #0
 801bbcc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 801bbce:	687b      	ldr	r3, [r7, #4]
 801bbd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bbd2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 801bbd4:	687b      	ldr	r3, [r7, #4]
 801bbd6:	681b      	ldr	r3, [r3, #0]
 801bbd8:	685b      	ldr	r3, [r3, #4]
 801bbda:	b29b      	uxth	r3, r3
 801bbdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801bbe0:	b29a      	uxth	r2, r3
 801bbe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bbe4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 801bbe6:	687b      	ldr	r3, [r7, #4]
 801bbe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bbea:	1c9a      	adds	r2, r3, #2
 801bbec:	687b      	ldr	r3, [r7, #4]
 801bbee:	629a      	str	r2, [r3, #40]	; 0x28
 801bbf0:	e026      	b.n	801bc40 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 801bbf2:	687b      	ldr	r3, [r7, #4]
 801bbf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bbf6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 801bbf8:	2300      	movs	r3, #0
 801bbfa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 801bbfc:	687b      	ldr	r3, [r7, #4]
 801bbfe:	689b      	ldr	r3, [r3, #8]
 801bc00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801bc04:	d007      	beq.n	801bc16 <UART_Receive_IT+0x74>
 801bc06:	687b      	ldr	r3, [r7, #4]
 801bc08:	689b      	ldr	r3, [r3, #8]
 801bc0a:	2b00      	cmp	r3, #0
 801bc0c:	d10a      	bne.n	801bc24 <UART_Receive_IT+0x82>
 801bc0e:	687b      	ldr	r3, [r7, #4]
 801bc10:	691b      	ldr	r3, [r3, #16]
 801bc12:	2b00      	cmp	r3, #0
 801bc14:	d106      	bne.n	801bc24 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 801bc16:	687b      	ldr	r3, [r7, #4]
 801bc18:	681b      	ldr	r3, [r3, #0]
 801bc1a:	685b      	ldr	r3, [r3, #4]
 801bc1c:	b2da      	uxtb	r2, r3
 801bc1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bc20:	701a      	strb	r2, [r3, #0]
 801bc22:	e008      	b.n	801bc36 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 801bc24:	687b      	ldr	r3, [r7, #4]
 801bc26:	681b      	ldr	r3, [r3, #0]
 801bc28:	685b      	ldr	r3, [r3, #4]
 801bc2a:	b2db      	uxtb	r3, r3
 801bc2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801bc30:	b2da      	uxtb	r2, r3
 801bc32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bc34:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 801bc36:	687b      	ldr	r3, [r7, #4]
 801bc38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bc3a:	1c5a      	adds	r2, r3, #1
 801bc3c:	687b      	ldr	r3, [r7, #4]
 801bc3e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 801bc40:	687b      	ldr	r3, [r7, #4]
 801bc42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801bc44:	b29b      	uxth	r3, r3
 801bc46:	3b01      	subs	r3, #1
 801bc48:	b29b      	uxth	r3, r3
 801bc4a:	687a      	ldr	r2, [r7, #4]
 801bc4c:	4619      	mov	r1, r3
 801bc4e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 801bc50:	2b00      	cmp	r3, #0
 801bc52:	d15a      	bne.n	801bd0a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 801bc54:	687b      	ldr	r3, [r7, #4]
 801bc56:	681b      	ldr	r3, [r3, #0]
 801bc58:	68da      	ldr	r2, [r3, #12]
 801bc5a:	687b      	ldr	r3, [r7, #4]
 801bc5c:	681b      	ldr	r3, [r3, #0]
 801bc5e:	f022 0220 	bic.w	r2, r2, #32
 801bc62:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 801bc64:	687b      	ldr	r3, [r7, #4]
 801bc66:	681b      	ldr	r3, [r3, #0]
 801bc68:	68da      	ldr	r2, [r3, #12]
 801bc6a:	687b      	ldr	r3, [r7, #4]
 801bc6c:	681b      	ldr	r3, [r3, #0]
 801bc6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801bc72:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 801bc74:	687b      	ldr	r3, [r7, #4]
 801bc76:	681b      	ldr	r3, [r3, #0]
 801bc78:	695a      	ldr	r2, [r3, #20]
 801bc7a:	687b      	ldr	r3, [r7, #4]
 801bc7c:	681b      	ldr	r3, [r3, #0]
 801bc7e:	f022 0201 	bic.w	r2, r2, #1
 801bc82:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801bc84:	687b      	ldr	r3, [r7, #4]
 801bc86:	2220      	movs	r2, #32
 801bc88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801bc8c:	687b      	ldr	r3, [r7, #4]
 801bc8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bc90:	2b01      	cmp	r3, #1
 801bc92:	d135      	bne.n	801bd00 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801bc94:	687b      	ldr	r3, [r7, #4]
 801bc96:	2200      	movs	r2, #0
 801bc98:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801bc9a:	687b      	ldr	r3, [r7, #4]
 801bc9c:	681b      	ldr	r3, [r3, #0]
 801bc9e:	330c      	adds	r3, #12
 801bca0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bca2:	697b      	ldr	r3, [r7, #20]
 801bca4:	e853 3f00 	ldrex	r3, [r3]
 801bca8:	613b      	str	r3, [r7, #16]
   return(result);
 801bcaa:	693b      	ldr	r3, [r7, #16]
 801bcac:	f023 0310 	bic.w	r3, r3, #16
 801bcb0:	627b      	str	r3, [r7, #36]	; 0x24
 801bcb2:	687b      	ldr	r3, [r7, #4]
 801bcb4:	681b      	ldr	r3, [r3, #0]
 801bcb6:	330c      	adds	r3, #12
 801bcb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801bcba:	623a      	str	r2, [r7, #32]
 801bcbc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bcbe:	69f9      	ldr	r1, [r7, #28]
 801bcc0:	6a3a      	ldr	r2, [r7, #32]
 801bcc2:	e841 2300 	strex	r3, r2, [r1]
 801bcc6:	61bb      	str	r3, [r7, #24]
   return(result);
 801bcc8:	69bb      	ldr	r3, [r7, #24]
 801bcca:	2b00      	cmp	r3, #0
 801bccc:	d1e5      	bne.n	801bc9a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 801bcce:	687b      	ldr	r3, [r7, #4]
 801bcd0:	681b      	ldr	r3, [r3, #0]
 801bcd2:	681b      	ldr	r3, [r3, #0]
 801bcd4:	f003 0310 	and.w	r3, r3, #16
 801bcd8:	2b10      	cmp	r3, #16
 801bcda:	d10a      	bne.n	801bcf2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 801bcdc:	2300      	movs	r3, #0
 801bcde:	60fb      	str	r3, [r7, #12]
 801bce0:	687b      	ldr	r3, [r7, #4]
 801bce2:	681b      	ldr	r3, [r3, #0]
 801bce4:	681b      	ldr	r3, [r3, #0]
 801bce6:	60fb      	str	r3, [r7, #12]
 801bce8:	687b      	ldr	r3, [r7, #4]
 801bcea:	681b      	ldr	r3, [r3, #0]
 801bcec:	685b      	ldr	r3, [r3, #4]
 801bcee:	60fb      	str	r3, [r7, #12]
 801bcf0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801bcf2:	687b      	ldr	r3, [r7, #4]
 801bcf4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801bcf6:	4619      	mov	r1, r3
 801bcf8:	6878      	ldr	r0, [r7, #4]
 801bcfa:	f7e5 f917 	bl	8000f2c <HAL_UARTEx_RxEventCallback>
 801bcfe:	e002      	b.n	801bd06 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 801bd00:	6878      	ldr	r0, [r7, #4]
 801bd02:	f7ff fc25 	bl	801b550 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 801bd06:	2300      	movs	r3, #0
 801bd08:	e002      	b.n	801bd10 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 801bd0a:	2300      	movs	r3, #0
 801bd0c:	e000      	b.n	801bd10 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 801bd0e:	2302      	movs	r3, #2
  }
}
 801bd10:	4618      	mov	r0, r3
 801bd12:	3730      	adds	r7, #48	; 0x30
 801bd14:	46bd      	mov	sp, r7
 801bd16:	bd80      	pop	{r7, pc}

0801bd18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 801bd18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801bd1c:	b0c0      	sub	sp, #256	; 0x100
 801bd1e:	af00      	add	r7, sp, #0
 801bd20:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801bd24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801bd28:	681b      	ldr	r3, [r3, #0]
 801bd2a:	691b      	ldr	r3, [r3, #16]
 801bd2c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 801bd30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801bd34:	68d9      	ldr	r1, [r3, #12]
 801bd36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801bd3a:	681a      	ldr	r2, [r3, #0]
 801bd3c:	ea40 0301 	orr.w	r3, r0, r1
 801bd40:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 801bd42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801bd46:	689a      	ldr	r2, [r3, #8]
 801bd48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801bd4c:	691b      	ldr	r3, [r3, #16]
 801bd4e:	431a      	orrs	r2, r3
 801bd50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801bd54:	695b      	ldr	r3, [r3, #20]
 801bd56:	431a      	orrs	r2, r3
 801bd58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801bd5c:	69db      	ldr	r3, [r3, #28]
 801bd5e:	4313      	orrs	r3, r2
 801bd60:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 801bd64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801bd68:	681b      	ldr	r3, [r3, #0]
 801bd6a:	68db      	ldr	r3, [r3, #12]
 801bd6c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 801bd70:	f021 010c 	bic.w	r1, r1, #12
 801bd74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801bd78:	681a      	ldr	r2, [r3, #0]
 801bd7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801bd7e:	430b      	orrs	r3, r1
 801bd80:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 801bd82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801bd86:	681b      	ldr	r3, [r3, #0]
 801bd88:	695b      	ldr	r3, [r3, #20]
 801bd8a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 801bd8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801bd92:	6999      	ldr	r1, [r3, #24]
 801bd94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801bd98:	681a      	ldr	r2, [r3, #0]
 801bd9a:	ea40 0301 	orr.w	r3, r0, r1
 801bd9e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 801bda0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801bda4:	681a      	ldr	r2, [r3, #0]
 801bda6:	4b8f      	ldr	r3, [pc, #572]	; (801bfe4 <UART_SetConfig+0x2cc>)
 801bda8:	429a      	cmp	r2, r3
 801bdaa:	d005      	beq.n	801bdb8 <UART_SetConfig+0xa0>
 801bdac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801bdb0:	681a      	ldr	r2, [r3, #0]
 801bdb2:	4b8d      	ldr	r3, [pc, #564]	; (801bfe8 <UART_SetConfig+0x2d0>)
 801bdb4:	429a      	cmp	r2, r3
 801bdb6:	d104      	bne.n	801bdc2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 801bdb8:	f7fd ffbc 	bl	8019d34 <HAL_RCC_GetPCLK2Freq>
 801bdbc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 801bdc0:	e003      	b.n	801bdca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 801bdc2:	f7fd ffa3 	bl	8019d0c <HAL_RCC_GetPCLK1Freq>
 801bdc6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801bdca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801bdce:	69db      	ldr	r3, [r3, #28]
 801bdd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801bdd4:	f040 810c 	bne.w	801bff0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801bdd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801bddc:	2200      	movs	r2, #0
 801bdde:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801bde2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 801bde6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 801bdea:	4622      	mov	r2, r4
 801bdec:	462b      	mov	r3, r5
 801bdee:	1891      	adds	r1, r2, r2
 801bdf0:	65b9      	str	r1, [r7, #88]	; 0x58
 801bdf2:	415b      	adcs	r3, r3
 801bdf4:	65fb      	str	r3, [r7, #92]	; 0x5c
 801bdf6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 801bdfa:	4621      	mov	r1, r4
 801bdfc:	eb12 0801 	adds.w	r8, r2, r1
 801be00:	4629      	mov	r1, r5
 801be02:	eb43 0901 	adc.w	r9, r3, r1
 801be06:	f04f 0200 	mov.w	r2, #0
 801be0a:	f04f 0300 	mov.w	r3, #0
 801be0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801be12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801be16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801be1a:	4690      	mov	r8, r2
 801be1c:	4699      	mov	r9, r3
 801be1e:	4623      	mov	r3, r4
 801be20:	eb18 0303 	adds.w	r3, r8, r3
 801be24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801be28:	462b      	mov	r3, r5
 801be2a:	eb49 0303 	adc.w	r3, r9, r3
 801be2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801be32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801be36:	685b      	ldr	r3, [r3, #4]
 801be38:	2200      	movs	r2, #0
 801be3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801be3e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 801be42:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 801be46:	460b      	mov	r3, r1
 801be48:	18db      	adds	r3, r3, r3
 801be4a:	653b      	str	r3, [r7, #80]	; 0x50
 801be4c:	4613      	mov	r3, r2
 801be4e:	eb42 0303 	adc.w	r3, r2, r3
 801be52:	657b      	str	r3, [r7, #84]	; 0x54
 801be54:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 801be58:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 801be5c:	f7e4 fecc 	bl	8000bf8 <__aeabi_uldivmod>
 801be60:	4602      	mov	r2, r0
 801be62:	460b      	mov	r3, r1
 801be64:	4b61      	ldr	r3, [pc, #388]	; (801bfec <UART_SetConfig+0x2d4>)
 801be66:	fba3 2302 	umull	r2, r3, r3, r2
 801be6a:	095b      	lsrs	r3, r3, #5
 801be6c:	011c      	lsls	r4, r3, #4
 801be6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801be72:	2200      	movs	r2, #0
 801be74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801be78:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 801be7c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 801be80:	4642      	mov	r2, r8
 801be82:	464b      	mov	r3, r9
 801be84:	1891      	adds	r1, r2, r2
 801be86:	64b9      	str	r1, [r7, #72]	; 0x48
 801be88:	415b      	adcs	r3, r3
 801be8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801be8c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 801be90:	4641      	mov	r1, r8
 801be92:	eb12 0a01 	adds.w	sl, r2, r1
 801be96:	4649      	mov	r1, r9
 801be98:	eb43 0b01 	adc.w	fp, r3, r1
 801be9c:	f04f 0200 	mov.w	r2, #0
 801bea0:	f04f 0300 	mov.w	r3, #0
 801bea4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 801bea8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 801beac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801beb0:	4692      	mov	sl, r2
 801beb2:	469b      	mov	fp, r3
 801beb4:	4643      	mov	r3, r8
 801beb6:	eb1a 0303 	adds.w	r3, sl, r3
 801beba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801bebe:	464b      	mov	r3, r9
 801bec0:	eb4b 0303 	adc.w	r3, fp, r3
 801bec4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801bec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801becc:	685b      	ldr	r3, [r3, #4]
 801bece:	2200      	movs	r2, #0
 801bed0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801bed4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 801bed8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 801bedc:	460b      	mov	r3, r1
 801bede:	18db      	adds	r3, r3, r3
 801bee0:	643b      	str	r3, [r7, #64]	; 0x40
 801bee2:	4613      	mov	r3, r2
 801bee4:	eb42 0303 	adc.w	r3, r2, r3
 801bee8:	647b      	str	r3, [r7, #68]	; 0x44
 801beea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801beee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 801bef2:	f7e4 fe81 	bl	8000bf8 <__aeabi_uldivmod>
 801bef6:	4602      	mov	r2, r0
 801bef8:	460b      	mov	r3, r1
 801befa:	4611      	mov	r1, r2
 801befc:	4b3b      	ldr	r3, [pc, #236]	; (801bfec <UART_SetConfig+0x2d4>)
 801befe:	fba3 2301 	umull	r2, r3, r3, r1
 801bf02:	095b      	lsrs	r3, r3, #5
 801bf04:	2264      	movs	r2, #100	; 0x64
 801bf06:	fb02 f303 	mul.w	r3, r2, r3
 801bf0a:	1acb      	subs	r3, r1, r3
 801bf0c:	00db      	lsls	r3, r3, #3
 801bf0e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 801bf12:	4b36      	ldr	r3, [pc, #216]	; (801bfec <UART_SetConfig+0x2d4>)
 801bf14:	fba3 2302 	umull	r2, r3, r3, r2
 801bf18:	095b      	lsrs	r3, r3, #5
 801bf1a:	005b      	lsls	r3, r3, #1
 801bf1c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 801bf20:	441c      	add	r4, r3
 801bf22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801bf26:	2200      	movs	r2, #0
 801bf28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801bf2c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 801bf30:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 801bf34:	4642      	mov	r2, r8
 801bf36:	464b      	mov	r3, r9
 801bf38:	1891      	adds	r1, r2, r2
 801bf3a:	63b9      	str	r1, [r7, #56]	; 0x38
 801bf3c:	415b      	adcs	r3, r3
 801bf3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 801bf40:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801bf44:	4641      	mov	r1, r8
 801bf46:	1851      	adds	r1, r2, r1
 801bf48:	6339      	str	r1, [r7, #48]	; 0x30
 801bf4a:	4649      	mov	r1, r9
 801bf4c:	414b      	adcs	r3, r1
 801bf4e:	637b      	str	r3, [r7, #52]	; 0x34
 801bf50:	f04f 0200 	mov.w	r2, #0
 801bf54:	f04f 0300 	mov.w	r3, #0
 801bf58:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 801bf5c:	4659      	mov	r1, fp
 801bf5e:	00cb      	lsls	r3, r1, #3
 801bf60:	4651      	mov	r1, sl
 801bf62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801bf66:	4651      	mov	r1, sl
 801bf68:	00ca      	lsls	r2, r1, #3
 801bf6a:	4610      	mov	r0, r2
 801bf6c:	4619      	mov	r1, r3
 801bf6e:	4603      	mov	r3, r0
 801bf70:	4642      	mov	r2, r8
 801bf72:	189b      	adds	r3, r3, r2
 801bf74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801bf78:	464b      	mov	r3, r9
 801bf7a:	460a      	mov	r2, r1
 801bf7c:	eb42 0303 	adc.w	r3, r2, r3
 801bf80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801bf84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801bf88:	685b      	ldr	r3, [r3, #4]
 801bf8a:	2200      	movs	r2, #0
 801bf8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 801bf90:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 801bf94:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 801bf98:	460b      	mov	r3, r1
 801bf9a:	18db      	adds	r3, r3, r3
 801bf9c:	62bb      	str	r3, [r7, #40]	; 0x28
 801bf9e:	4613      	mov	r3, r2
 801bfa0:	eb42 0303 	adc.w	r3, r2, r3
 801bfa4:	62fb      	str	r3, [r7, #44]	; 0x2c
 801bfa6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801bfaa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 801bfae:	f7e4 fe23 	bl	8000bf8 <__aeabi_uldivmod>
 801bfb2:	4602      	mov	r2, r0
 801bfb4:	460b      	mov	r3, r1
 801bfb6:	4b0d      	ldr	r3, [pc, #52]	; (801bfec <UART_SetConfig+0x2d4>)
 801bfb8:	fba3 1302 	umull	r1, r3, r3, r2
 801bfbc:	095b      	lsrs	r3, r3, #5
 801bfbe:	2164      	movs	r1, #100	; 0x64
 801bfc0:	fb01 f303 	mul.w	r3, r1, r3
 801bfc4:	1ad3      	subs	r3, r2, r3
 801bfc6:	00db      	lsls	r3, r3, #3
 801bfc8:	3332      	adds	r3, #50	; 0x32
 801bfca:	4a08      	ldr	r2, [pc, #32]	; (801bfec <UART_SetConfig+0x2d4>)
 801bfcc:	fba2 2303 	umull	r2, r3, r2, r3
 801bfd0:	095b      	lsrs	r3, r3, #5
 801bfd2:	f003 0207 	and.w	r2, r3, #7
 801bfd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801bfda:	681b      	ldr	r3, [r3, #0]
 801bfdc:	4422      	add	r2, r4
 801bfde:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 801bfe0:	e105      	b.n	801c1ee <UART_SetConfig+0x4d6>
 801bfe2:	bf00      	nop
 801bfe4:	40011000 	.word	0x40011000
 801bfe8:	40011400 	.word	0x40011400
 801bfec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801bff0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801bff4:	2200      	movs	r2, #0
 801bff6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801bffa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801bffe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 801c002:	4642      	mov	r2, r8
 801c004:	464b      	mov	r3, r9
 801c006:	1891      	adds	r1, r2, r2
 801c008:	6239      	str	r1, [r7, #32]
 801c00a:	415b      	adcs	r3, r3
 801c00c:	627b      	str	r3, [r7, #36]	; 0x24
 801c00e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801c012:	4641      	mov	r1, r8
 801c014:	1854      	adds	r4, r2, r1
 801c016:	4649      	mov	r1, r9
 801c018:	eb43 0501 	adc.w	r5, r3, r1
 801c01c:	f04f 0200 	mov.w	r2, #0
 801c020:	f04f 0300 	mov.w	r3, #0
 801c024:	00eb      	lsls	r3, r5, #3
 801c026:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801c02a:	00e2      	lsls	r2, r4, #3
 801c02c:	4614      	mov	r4, r2
 801c02e:	461d      	mov	r5, r3
 801c030:	4643      	mov	r3, r8
 801c032:	18e3      	adds	r3, r4, r3
 801c034:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801c038:	464b      	mov	r3, r9
 801c03a:	eb45 0303 	adc.w	r3, r5, r3
 801c03e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801c042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c046:	685b      	ldr	r3, [r3, #4]
 801c048:	2200      	movs	r2, #0
 801c04a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801c04e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 801c052:	f04f 0200 	mov.w	r2, #0
 801c056:	f04f 0300 	mov.w	r3, #0
 801c05a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 801c05e:	4629      	mov	r1, r5
 801c060:	008b      	lsls	r3, r1, #2
 801c062:	4621      	mov	r1, r4
 801c064:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801c068:	4621      	mov	r1, r4
 801c06a:	008a      	lsls	r2, r1, #2
 801c06c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 801c070:	f7e4 fdc2 	bl	8000bf8 <__aeabi_uldivmod>
 801c074:	4602      	mov	r2, r0
 801c076:	460b      	mov	r3, r1
 801c078:	4b60      	ldr	r3, [pc, #384]	; (801c1fc <UART_SetConfig+0x4e4>)
 801c07a:	fba3 2302 	umull	r2, r3, r3, r2
 801c07e:	095b      	lsrs	r3, r3, #5
 801c080:	011c      	lsls	r4, r3, #4
 801c082:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801c086:	2200      	movs	r2, #0
 801c088:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801c08c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 801c090:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 801c094:	4642      	mov	r2, r8
 801c096:	464b      	mov	r3, r9
 801c098:	1891      	adds	r1, r2, r2
 801c09a:	61b9      	str	r1, [r7, #24]
 801c09c:	415b      	adcs	r3, r3
 801c09e:	61fb      	str	r3, [r7, #28]
 801c0a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801c0a4:	4641      	mov	r1, r8
 801c0a6:	1851      	adds	r1, r2, r1
 801c0a8:	6139      	str	r1, [r7, #16]
 801c0aa:	4649      	mov	r1, r9
 801c0ac:	414b      	adcs	r3, r1
 801c0ae:	617b      	str	r3, [r7, #20]
 801c0b0:	f04f 0200 	mov.w	r2, #0
 801c0b4:	f04f 0300 	mov.w	r3, #0
 801c0b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 801c0bc:	4659      	mov	r1, fp
 801c0be:	00cb      	lsls	r3, r1, #3
 801c0c0:	4651      	mov	r1, sl
 801c0c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801c0c6:	4651      	mov	r1, sl
 801c0c8:	00ca      	lsls	r2, r1, #3
 801c0ca:	4610      	mov	r0, r2
 801c0cc:	4619      	mov	r1, r3
 801c0ce:	4603      	mov	r3, r0
 801c0d0:	4642      	mov	r2, r8
 801c0d2:	189b      	adds	r3, r3, r2
 801c0d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801c0d8:	464b      	mov	r3, r9
 801c0da:	460a      	mov	r2, r1
 801c0dc:	eb42 0303 	adc.w	r3, r2, r3
 801c0e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801c0e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c0e8:	685b      	ldr	r3, [r3, #4]
 801c0ea:	2200      	movs	r2, #0
 801c0ec:	67bb      	str	r3, [r7, #120]	; 0x78
 801c0ee:	67fa      	str	r2, [r7, #124]	; 0x7c
 801c0f0:	f04f 0200 	mov.w	r2, #0
 801c0f4:	f04f 0300 	mov.w	r3, #0
 801c0f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 801c0fc:	4649      	mov	r1, r9
 801c0fe:	008b      	lsls	r3, r1, #2
 801c100:	4641      	mov	r1, r8
 801c102:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801c106:	4641      	mov	r1, r8
 801c108:	008a      	lsls	r2, r1, #2
 801c10a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 801c10e:	f7e4 fd73 	bl	8000bf8 <__aeabi_uldivmod>
 801c112:	4602      	mov	r2, r0
 801c114:	460b      	mov	r3, r1
 801c116:	4b39      	ldr	r3, [pc, #228]	; (801c1fc <UART_SetConfig+0x4e4>)
 801c118:	fba3 1302 	umull	r1, r3, r3, r2
 801c11c:	095b      	lsrs	r3, r3, #5
 801c11e:	2164      	movs	r1, #100	; 0x64
 801c120:	fb01 f303 	mul.w	r3, r1, r3
 801c124:	1ad3      	subs	r3, r2, r3
 801c126:	011b      	lsls	r3, r3, #4
 801c128:	3332      	adds	r3, #50	; 0x32
 801c12a:	4a34      	ldr	r2, [pc, #208]	; (801c1fc <UART_SetConfig+0x4e4>)
 801c12c:	fba2 2303 	umull	r2, r3, r2, r3
 801c130:	095b      	lsrs	r3, r3, #5
 801c132:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801c136:	441c      	add	r4, r3
 801c138:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801c13c:	2200      	movs	r2, #0
 801c13e:	673b      	str	r3, [r7, #112]	; 0x70
 801c140:	677a      	str	r2, [r7, #116]	; 0x74
 801c142:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 801c146:	4642      	mov	r2, r8
 801c148:	464b      	mov	r3, r9
 801c14a:	1891      	adds	r1, r2, r2
 801c14c:	60b9      	str	r1, [r7, #8]
 801c14e:	415b      	adcs	r3, r3
 801c150:	60fb      	str	r3, [r7, #12]
 801c152:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801c156:	4641      	mov	r1, r8
 801c158:	1851      	adds	r1, r2, r1
 801c15a:	6039      	str	r1, [r7, #0]
 801c15c:	4649      	mov	r1, r9
 801c15e:	414b      	adcs	r3, r1
 801c160:	607b      	str	r3, [r7, #4]
 801c162:	f04f 0200 	mov.w	r2, #0
 801c166:	f04f 0300 	mov.w	r3, #0
 801c16a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 801c16e:	4659      	mov	r1, fp
 801c170:	00cb      	lsls	r3, r1, #3
 801c172:	4651      	mov	r1, sl
 801c174:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801c178:	4651      	mov	r1, sl
 801c17a:	00ca      	lsls	r2, r1, #3
 801c17c:	4610      	mov	r0, r2
 801c17e:	4619      	mov	r1, r3
 801c180:	4603      	mov	r3, r0
 801c182:	4642      	mov	r2, r8
 801c184:	189b      	adds	r3, r3, r2
 801c186:	66bb      	str	r3, [r7, #104]	; 0x68
 801c188:	464b      	mov	r3, r9
 801c18a:	460a      	mov	r2, r1
 801c18c:	eb42 0303 	adc.w	r3, r2, r3
 801c190:	66fb      	str	r3, [r7, #108]	; 0x6c
 801c192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c196:	685b      	ldr	r3, [r3, #4]
 801c198:	2200      	movs	r2, #0
 801c19a:	663b      	str	r3, [r7, #96]	; 0x60
 801c19c:	667a      	str	r2, [r7, #100]	; 0x64
 801c19e:	f04f 0200 	mov.w	r2, #0
 801c1a2:	f04f 0300 	mov.w	r3, #0
 801c1a6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 801c1aa:	4649      	mov	r1, r9
 801c1ac:	008b      	lsls	r3, r1, #2
 801c1ae:	4641      	mov	r1, r8
 801c1b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801c1b4:	4641      	mov	r1, r8
 801c1b6:	008a      	lsls	r2, r1, #2
 801c1b8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 801c1bc:	f7e4 fd1c 	bl	8000bf8 <__aeabi_uldivmod>
 801c1c0:	4602      	mov	r2, r0
 801c1c2:	460b      	mov	r3, r1
 801c1c4:	4b0d      	ldr	r3, [pc, #52]	; (801c1fc <UART_SetConfig+0x4e4>)
 801c1c6:	fba3 1302 	umull	r1, r3, r3, r2
 801c1ca:	095b      	lsrs	r3, r3, #5
 801c1cc:	2164      	movs	r1, #100	; 0x64
 801c1ce:	fb01 f303 	mul.w	r3, r1, r3
 801c1d2:	1ad3      	subs	r3, r2, r3
 801c1d4:	011b      	lsls	r3, r3, #4
 801c1d6:	3332      	adds	r3, #50	; 0x32
 801c1d8:	4a08      	ldr	r2, [pc, #32]	; (801c1fc <UART_SetConfig+0x4e4>)
 801c1da:	fba2 2303 	umull	r2, r3, r2, r3
 801c1de:	095b      	lsrs	r3, r3, #5
 801c1e0:	f003 020f 	and.w	r2, r3, #15
 801c1e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c1e8:	681b      	ldr	r3, [r3, #0]
 801c1ea:	4422      	add	r2, r4
 801c1ec:	609a      	str	r2, [r3, #8]
}
 801c1ee:	bf00      	nop
 801c1f0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 801c1f4:	46bd      	mov	sp, r7
 801c1f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801c1fa:	bf00      	nop
 801c1fc:	51eb851f 	.word	0x51eb851f

0801c200 <pow>:
 801c200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c202:	ed2d 8b02 	vpush	{d8}
 801c206:	eeb0 8a40 	vmov.f32	s16, s0
 801c20a:	eef0 8a60 	vmov.f32	s17, s1
 801c20e:	ec55 4b11 	vmov	r4, r5, d1
 801c212:	f000 f865 	bl	801c2e0 <__ieee754_pow>
 801c216:	4622      	mov	r2, r4
 801c218:	462b      	mov	r3, r5
 801c21a:	4620      	mov	r0, r4
 801c21c:	4629      	mov	r1, r5
 801c21e:	ec57 6b10 	vmov	r6, r7, d0
 801c222:	f7e4 fc83 	bl	8000b2c <__aeabi_dcmpun>
 801c226:	2800      	cmp	r0, #0
 801c228:	d13b      	bne.n	801c2a2 <pow+0xa2>
 801c22a:	ec51 0b18 	vmov	r0, r1, d8
 801c22e:	2200      	movs	r2, #0
 801c230:	2300      	movs	r3, #0
 801c232:	f7e4 fc49 	bl	8000ac8 <__aeabi_dcmpeq>
 801c236:	b1b8      	cbz	r0, 801c268 <pow+0x68>
 801c238:	2200      	movs	r2, #0
 801c23a:	2300      	movs	r3, #0
 801c23c:	4620      	mov	r0, r4
 801c23e:	4629      	mov	r1, r5
 801c240:	f7e4 fc42 	bl	8000ac8 <__aeabi_dcmpeq>
 801c244:	2800      	cmp	r0, #0
 801c246:	d146      	bne.n	801c2d6 <pow+0xd6>
 801c248:	ec45 4b10 	vmov	d0, r4, r5
 801c24c:	f000 fe61 	bl	801cf12 <finite>
 801c250:	b338      	cbz	r0, 801c2a2 <pow+0xa2>
 801c252:	2200      	movs	r2, #0
 801c254:	2300      	movs	r3, #0
 801c256:	4620      	mov	r0, r4
 801c258:	4629      	mov	r1, r5
 801c25a:	f7e4 fc3f 	bl	8000adc <__aeabi_dcmplt>
 801c25e:	b300      	cbz	r0, 801c2a2 <pow+0xa2>
 801c260:	f000 ff06 	bl	801d070 <__errno>
 801c264:	2322      	movs	r3, #34	; 0x22
 801c266:	e01b      	b.n	801c2a0 <pow+0xa0>
 801c268:	ec47 6b10 	vmov	d0, r6, r7
 801c26c:	f000 fe51 	bl	801cf12 <finite>
 801c270:	b9e0      	cbnz	r0, 801c2ac <pow+0xac>
 801c272:	eeb0 0a48 	vmov.f32	s0, s16
 801c276:	eef0 0a68 	vmov.f32	s1, s17
 801c27a:	f000 fe4a 	bl	801cf12 <finite>
 801c27e:	b1a8      	cbz	r0, 801c2ac <pow+0xac>
 801c280:	ec45 4b10 	vmov	d0, r4, r5
 801c284:	f000 fe45 	bl	801cf12 <finite>
 801c288:	b180      	cbz	r0, 801c2ac <pow+0xac>
 801c28a:	4632      	mov	r2, r6
 801c28c:	463b      	mov	r3, r7
 801c28e:	4630      	mov	r0, r6
 801c290:	4639      	mov	r1, r7
 801c292:	f7e4 fc4b 	bl	8000b2c <__aeabi_dcmpun>
 801c296:	2800      	cmp	r0, #0
 801c298:	d0e2      	beq.n	801c260 <pow+0x60>
 801c29a:	f000 fee9 	bl	801d070 <__errno>
 801c29e:	2321      	movs	r3, #33	; 0x21
 801c2a0:	6003      	str	r3, [r0, #0]
 801c2a2:	ecbd 8b02 	vpop	{d8}
 801c2a6:	ec47 6b10 	vmov	d0, r6, r7
 801c2aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c2ac:	2200      	movs	r2, #0
 801c2ae:	2300      	movs	r3, #0
 801c2b0:	4630      	mov	r0, r6
 801c2b2:	4639      	mov	r1, r7
 801c2b4:	f7e4 fc08 	bl	8000ac8 <__aeabi_dcmpeq>
 801c2b8:	2800      	cmp	r0, #0
 801c2ba:	d0f2      	beq.n	801c2a2 <pow+0xa2>
 801c2bc:	eeb0 0a48 	vmov.f32	s0, s16
 801c2c0:	eef0 0a68 	vmov.f32	s1, s17
 801c2c4:	f000 fe25 	bl	801cf12 <finite>
 801c2c8:	2800      	cmp	r0, #0
 801c2ca:	d0ea      	beq.n	801c2a2 <pow+0xa2>
 801c2cc:	ec45 4b10 	vmov	d0, r4, r5
 801c2d0:	f000 fe1f 	bl	801cf12 <finite>
 801c2d4:	e7c3      	b.n	801c25e <pow+0x5e>
 801c2d6:	4f01      	ldr	r7, [pc, #4]	; (801c2dc <pow+0xdc>)
 801c2d8:	2600      	movs	r6, #0
 801c2da:	e7e2      	b.n	801c2a2 <pow+0xa2>
 801c2dc:	3ff00000 	.word	0x3ff00000

0801c2e0 <__ieee754_pow>:
 801c2e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c2e4:	ed2d 8b06 	vpush	{d8-d10}
 801c2e8:	b089      	sub	sp, #36	; 0x24
 801c2ea:	ed8d 1b00 	vstr	d1, [sp]
 801c2ee:	e9dd 2900 	ldrd	r2, r9, [sp]
 801c2f2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801c2f6:	ea58 0102 	orrs.w	r1, r8, r2
 801c2fa:	ec57 6b10 	vmov	r6, r7, d0
 801c2fe:	d115      	bne.n	801c32c <__ieee754_pow+0x4c>
 801c300:	19b3      	adds	r3, r6, r6
 801c302:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801c306:	4152      	adcs	r2, r2
 801c308:	4299      	cmp	r1, r3
 801c30a:	4b89      	ldr	r3, [pc, #548]	; (801c530 <__ieee754_pow+0x250>)
 801c30c:	4193      	sbcs	r3, r2
 801c30e:	f080 84d2 	bcs.w	801ccb6 <__ieee754_pow+0x9d6>
 801c312:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c316:	4630      	mov	r0, r6
 801c318:	4639      	mov	r1, r7
 801c31a:	f7e3 ffb7 	bl	800028c <__adddf3>
 801c31e:	ec41 0b10 	vmov	d0, r0, r1
 801c322:	b009      	add	sp, #36	; 0x24
 801c324:	ecbd 8b06 	vpop	{d8-d10}
 801c328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c32c:	4b81      	ldr	r3, [pc, #516]	; (801c534 <__ieee754_pow+0x254>)
 801c32e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801c332:	429c      	cmp	r4, r3
 801c334:	ee10 aa10 	vmov	sl, s0
 801c338:	463d      	mov	r5, r7
 801c33a:	dc06      	bgt.n	801c34a <__ieee754_pow+0x6a>
 801c33c:	d101      	bne.n	801c342 <__ieee754_pow+0x62>
 801c33e:	2e00      	cmp	r6, #0
 801c340:	d1e7      	bne.n	801c312 <__ieee754_pow+0x32>
 801c342:	4598      	cmp	r8, r3
 801c344:	dc01      	bgt.n	801c34a <__ieee754_pow+0x6a>
 801c346:	d10f      	bne.n	801c368 <__ieee754_pow+0x88>
 801c348:	b172      	cbz	r2, 801c368 <__ieee754_pow+0x88>
 801c34a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 801c34e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801c352:	ea55 050a 	orrs.w	r5, r5, sl
 801c356:	d1dc      	bne.n	801c312 <__ieee754_pow+0x32>
 801c358:	e9dd 3200 	ldrd	r3, r2, [sp]
 801c35c:	18db      	adds	r3, r3, r3
 801c35e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801c362:	4152      	adcs	r2, r2
 801c364:	429d      	cmp	r5, r3
 801c366:	e7d0      	b.n	801c30a <__ieee754_pow+0x2a>
 801c368:	2d00      	cmp	r5, #0
 801c36a:	da3b      	bge.n	801c3e4 <__ieee754_pow+0x104>
 801c36c:	4b72      	ldr	r3, [pc, #456]	; (801c538 <__ieee754_pow+0x258>)
 801c36e:	4598      	cmp	r8, r3
 801c370:	dc51      	bgt.n	801c416 <__ieee754_pow+0x136>
 801c372:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801c376:	4598      	cmp	r8, r3
 801c378:	f340 84ac 	ble.w	801ccd4 <__ieee754_pow+0x9f4>
 801c37c:	ea4f 5328 	mov.w	r3, r8, asr #20
 801c380:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801c384:	2b14      	cmp	r3, #20
 801c386:	dd0f      	ble.n	801c3a8 <__ieee754_pow+0xc8>
 801c388:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801c38c:	fa22 f103 	lsr.w	r1, r2, r3
 801c390:	fa01 f303 	lsl.w	r3, r1, r3
 801c394:	4293      	cmp	r3, r2
 801c396:	f040 849d 	bne.w	801ccd4 <__ieee754_pow+0x9f4>
 801c39a:	f001 0101 	and.w	r1, r1, #1
 801c39e:	f1c1 0302 	rsb	r3, r1, #2
 801c3a2:	9304      	str	r3, [sp, #16]
 801c3a4:	b182      	cbz	r2, 801c3c8 <__ieee754_pow+0xe8>
 801c3a6:	e05f      	b.n	801c468 <__ieee754_pow+0x188>
 801c3a8:	2a00      	cmp	r2, #0
 801c3aa:	d15b      	bne.n	801c464 <__ieee754_pow+0x184>
 801c3ac:	f1c3 0314 	rsb	r3, r3, #20
 801c3b0:	fa48 f103 	asr.w	r1, r8, r3
 801c3b4:	fa01 f303 	lsl.w	r3, r1, r3
 801c3b8:	4543      	cmp	r3, r8
 801c3ba:	f040 8488 	bne.w	801ccce <__ieee754_pow+0x9ee>
 801c3be:	f001 0101 	and.w	r1, r1, #1
 801c3c2:	f1c1 0302 	rsb	r3, r1, #2
 801c3c6:	9304      	str	r3, [sp, #16]
 801c3c8:	4b5c      	ldr	r3, [pc, #368]	; (801c53c <__ieee754_pow+0x25c>)
 801c3ca:	4598      	cmp	r8, r3
 801c3cc:	d132      	bne.n	801c434 <__ieee754_pow+0x154>
 801c3ce:	f1b9 0f00 	cmp.w	r9, #0
 801c3d2:	f280 8478 	bge.w	801ccc6 <__ieee754_pow+0x9e6>
 801c3d6:	4959      	ldr	r1, [pc, #356]	; (801c53c <__ieee754_pow+0x25c>)
 801c3d8:	4632      	mov	r2, r6
 801c3da:	463b      	mov	r3, r7
 801c3dc:	2000      	movs	r0, #0
 801c3de:	f7e4 fa35 	bl	800084c <__aeabi_ddiv>
 801c3e2:	e79c      	b.n	801c31e <__ieee754_pow+0x3e>
 801c3e4:	2300      	movs	r3, #0
 801c3e6:	9304      	str	r3, [sp, #16]
 801c3e8:	2a00      	cmp	r2, #0
 801c3ea:	d13d      	bne.n	801c468 <__ieee754_pow+0x188>
 801c3ec:	4b51      	ldr	r3, [pc, #324]	; (801c534 <__ieee754_pow+0x254>)
 801c3ee:	4598      	cmp	r8, r3
 801c3f0:	d1ea      	bne.n	801c3c8 <__ieee754_pow+0xe8>
 801c3f2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801c3f6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801c3fa:	ea53 030a 	orrs.w	r3, r3, sl
 801c3fe:	f000 845a 	beq.w	801ccb6 <__ieee754_pow+0x9d6>
 801c402:	4b4f      	ldr	r3, [pc, #316]	; (801c540 <__ieee754_pow+0x260>)
 801c404:	429c      	cmp	r4, r3
 801c406:	dd08      	ble.n	801c41a <__ieee754_pow+0x13a>
 801c408:	f1b9 0f00 	cmp.w	r9, #0
 801c40c:	f2c0 8457 	blt.w	801ccbe <__ieee754_pow+0x9de>
 801c410:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c414:	e783      	b.n	801c31e <__ieee754_pow+0x3e>
 801c416:	2302      	movs	r3, #2
 801c418:	e7e5      	b.n	801c3e6 <__ieee754_pow+0x106>
 801c41a:	f1b9 0f00 	cmp.w	r9, #0
 801c41e:	f04f 0000 	mov.w	r0, #0
 801c422:	f04f 0100 	mov.w	r1, #0
 801c426:	f6bf af7a 	bge.w	801c31e <__ieee754_pow+0x3e>
 801c42a:	e9dd 0300 	ldrd	r0, r3, [sp]
 801c42e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801c432:	e774      	b.n	801c31e <__ieee754_pow+0x3e>
 801c434:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801c438:	d106      	bne.n	801c448 <__ieee754_pow+0x168>
 801c43a:	4632      	mov	r2, r6
 801c43c:	463b      	mov	r3, r7
 801c43e:	4630      	mov	r0, r6
 801c440:	4639      	mov	r1, r7
 801c442:	f7e4 f8d9 	bl	80005f8 <__aeabi_dmul>
 801c446:	e76a      	b.n	801c31e <__ieee754_pow+0x3e>
 801c448:	4b3e      	ldr	r3, [pc, #248]	; (801c544 <__ieee754_pow+0x264>)
 801c44a:	4599      	cmp	r9, r3
 801c44c:	d10c      	bne.n	801c468 <__ieee754_pow+0x188>
 801c44e:	2d00      	cmp	r5, #0
 801c450:	db0a      	blt.n	801c468 <__ieee754_pow+0x188>
 801c452:	ec47 6b10 	vmov	d0, r6, r7
 801c456:	b009      	add	sp, #36	; 0x24
 801c458:	ecbd 8b06 	vpop	{d8-d10}
 801c45c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c460:	f000 bc6c 	b.w	801cd3c <__ieee754_sqrt>
 801c464:	2300      	movs	r3, #0
 801c466:	9304      	str	r3, [sp, #16]
 801c468:	ec47 6b10 	vmov	d0, r6, r7
 801c46c:	f000 fd48 	bl	801cf00 <fabs>
 801c470:	ec51 0b10 	vmov	r0, r1, d0
 801c474:	f1ba 0f00 	cmp.w	sl, #0
 801c478:	d129      	bne.n	801c4ce <__ieee754_pow+0x1ee>
 801c47a:	b124      	cbz	r4, 801c486 <__ieee754_pow+0x1a6>
 801c47c:	4b2f      	ldr	r3, [pc, #188]	; (801c53c <__ieee754_pow+0x25c>)
 801c47e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801c482:	429a      	cmp	r2, r3
 801c484:	d123      	bne.n	801c4ce <__ieee754_pow+0x1ee>
 801c486:	f1b9 0f00 	cmp.w	r9, #0
 801c48a:	da05      	bge.n	801c498 <__ieee754_pow+0x1b8>
 801c48c:	4602      	mov	r2, r0
 801c48e:	460b      	mov	r3, r1
 801c490:	2000      	movs	r0, #0
 801c492:	492a      	ldr	r1, [pc, #168]	; (801c53c <__ieee754_pow+0x25c>)
 801c494:	f7e4 f9da 	bl	800084c <__aeabi_ddiv>
 801c498:	2d00      	cmp	r5, #0
 801c49a:	f6bf af40 	bge.w	801c31e <__ieee754_pow+0x3e>
 801c49e:	9b04      	ldr	r3, [sp, #16]
 801c4a0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801c4a4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801c4a8:	4323      	orrs	r3, r4
 801c4aa:	d108      	bne.n	801c4be <__ieee754_pow+0x1de>
 801c4ac:	4602      	mov	r2, r0
 801c4ae:	460b      	mov	r3, r1
 801c4b0:	4610      	mov	r0, r2
 801c4b2:	4619      	mov	r1, r3
 801c4b4:	f7e3 fee8 	bl	8000288 <__aeabi_dsub>
 801c4b8:	4602      	mov	r2, r0
 801c4ba:	460b      	mov	r3, r1
 801c4bc:	e78f      	b.n	801c3de <__ieee754_pow+0xfe>
 801c4be:	9b04      	ldr	r3, [sp, #16]
 801c4c0:	2b01      	cmp	r3, #1
 801c4c2:	f47f af2c 	bne.w	801c31e <__ieee754_pow+0x3e>
 801c4c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c4ca:	4619      	mov	r1, r3
 801c4cc:	e727      	b.n	801c31e <__ieee754_pow+0x3e>
 801c4ce:	0feb      	lsrs	r3, r5, #31
 801c4d0:	3b01      	subs	r3, #1
 801c4d2:	9306      	str	r3, [sp, #24]
 801c4d4:	9a06      	ldr	r2, [sp, #24]
 801c4d6:	9b04      	ldr	r3, [sp, #16]
 801c4d8:	4313      	orrs	r3, r2
 801c4da:	d102      	bne.n	801c4e2 <__ieee754_pow+0x202>
 801c4dc:	4632      	mov	r2, r6
 801c4de:	463b      	mov	r3, r7
 801c4e0:	e7e6      	b.n	801c4b0 <__ieee754_pow+0x1d0>
 801c4e2:	4b19      	ldr	r3, [pc, #100]	; (801c548 <__ieee754_pow+0x268>)
 801c4e4:	4598      	cmp	r8, r3
 801c4e6:	f340 80fb 	ble.w	801c6e0 <__ieee754_pow+0x400>
 801c4ea:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801c4ee:	4598      	cmp	r8, r3
 801c4f0:	4b13      	ldr	r3, [pc, #76]	; (801c540 <__ieee754_pow+0x260>)
 801c4f2:	dd0c      	ble.n	801c50e <__ieee754_pow+0x22e>
 801c4f4:	429c      	cmp	r4, r3
 801c4f6:	dc0f      	bgt.n	801c518 <__ieee754_pow+0x238>
 801c4f8:	f1b9 0f00 	cmp.w	r9, #0
 801c4fc:	da0f      	bge.n	801c51e <__ieee754_pow+0x23e>
 801c4fe:	2000      	movs	r0, #0
 801c500:	b009      	add	sp, #36	; 0x24
 801c502:	ecbd 8b06 	vpop	{d8-d10}
 801c506:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c50a:	f000 bcf0 	b.w	801ceee <__math_oflow>
 801c50e:	429c      	cmp	r4, r3
 801c510:	dbf2      	blt.n	801c4f8 <__ieee754_pow+0x218>
 801c512:	4b0a      	ldr	r3, [pc, #40]	; (801c53c <__ieee754_pow+0x25c>)
 801c514:	429c      	cmp	r4, r3
 801c516:	dd19      	ble.n	801c54c <__ieee754_pow+0x26c>
 801c518:	f1b9 0f00 	cmp.w	r9, #0
 801c51c:	dcef      	bgt.n	801c4fe <__ieee754_pow+0x21e>
 801c51e:	2000      	movs	r0, #0
 801c520:	b009      	add	sp, #36	; 0x24
 801c522:	ecbd 8b06 	vpop	{d8-d10}
 801c526:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c52a:	f000 bcd7 	b.w	801cedc <__math_uflow>
 801c52e:	bf00      	nop
 801c530:	fff00000 	.word	0xfff00000
 801c534:	7ff00000 	.word	0x7ff00000
 801c538:	433fffff 	.word	0x433fffff
 801c53c:	3ff00000 	.word	0x3ff00000
 801c540:	3fefffff 	.word	0x3fefffff
 801c544:	3fe00000 	.word	0x3fe00000
 801c548:	41e00000 	.word	0x41e00000
 801c54c:	4b60      	ldr	r3, [pc, #384]	; (801c6d0 <__ieee754_pow+0x3f0>)
 801c54e:	2200      	movs	r2, #0
 801c550:	f7e3 fe9a 	bl	8000288 <__aeabi_dsub>
 801c554:	a354      	add	r3, pc, #336	; (adr r3, 801c6a8 <__ieee754_pow+0x3c8>)
 801c556:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c55a:	4604      	mov	r4, r0
 801c55c:	460d      	mov	r5, r1
 801c55e:	f7e4 f84b 	bl	80005f8 <__aeabi_dmul>
 801c562:	a353      	add	r3, pc, #332	; (adr r3, 801c6b0 <__ieee754_pow+0x3d0>)
 801c564:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c568:	4606      	mov	r6, r0
 801c56a:	460f      	mov	r7, r1
 801c56c:	4620      	mov	r0, r4
 801c56e:	4629      	mov	r1, r5
 801c570:	f7e4 f842 	bl	80005f8 <__aeabi_dmul>
 801c574:	4b57      	ldr	r3, [pc, #348]	; (801c6d4 <__ieee754_pow+0x3f4>)
 801c576:	4682      	mov	sl, r0
 801c578:	468b      	mov	fp, r1
 801c57a:	2200      	movs	r2, #0
 801c57c:	4620      	mov	r0, r4
 801c57e:	4629      	mov	r1, r5
 801c580:	f7e4 f83a 	bl	80005f8 <__aeabi_dmul>
 801c584:	4602      	mov	r2, r0
 801c586:	460b      	mov	r3, r1
 801c588:	a14b      	add	r1, pc, #300	; (adr r1, 801c6b8 <__ieee754_pow+0x3d8>)
 801c58a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c58e:	f7e3 fe7b 	bl	8000288 <__aeabi_dsub>
 801c592:	4622      	mov	r2, r4
 801c594:	462b      	mov	r3, r5
 801c596:	f7e4 f82f 	bl	80005f8 <__aeabi_dmul>
 801c59a:	4602      	mov	r2, r0
 801c59c:	460b      	mov	r3, r1
 801c59e:	2000      	movs	r0, #0
 801c5a0:	494d      	ldr	r1, [pc, #308]	; (801c6d8 <__ieee754_pow+0x3f8>)
 801c5a2:	f7e3 fe71 	bl	8000288 <__aeabi_dsub>
 801c5a6:	4622      	mov	r2, r4
 801c5a8:	4680      	mov	r8, r0
 801c5aa:	4689      	mov	r9, r1
 801c5ac:	462b      	mov	r3, r5
 801c5ae:	4620      	mov	r0, r4
 801c5b0:	4629      	mov	r1, r5
 801c5b2:	f7e4 f821 	bl	80005f8 <__aeabi_dmul>
 801c5b6:	4602      	mov	r2, r0
 801c5b8:	460b      	mov	r3, r1
 801c5ba:	4640      	mov	r0, r8
 801c5bc:	4649      	mov	r1, r9
 801c5be:	f7e4 f81b 	bl	80005f8 <__aeabi_dmul>
 801c5c2:	a33f      	add	r3, pc, #252	; (adr r3, 801c6c0 <__ieee754_pow+0x3e0>)
 801c5c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c5c8:	f7e4 f816 	bl	80005f8 <__aeabi_dmul>
 801c5cc:	4602      	mov	r2, r0
 801c5ce:	460b      	mov	r3, r1
 801c5d0:	4650      	mov	r0, sl
 801c5d2:	4659      	mov	r1, fp
 801c5d4:	f7e3 fe58 	bl	8000288 <__aeabi_dsub>
 801c5d8:	4602      	mov	r2, r0
 801c5da:	460b      	mov	r3, r1
 801c5dc:	4680      	mov	r8, r0
 801c5de:	4689      	mov	r9, r1
 801c5e0:	4630      	mov	r0, r6
 801c5e2:	4639      	mov	r1, r7
 801c5e4:	f7e3 fe52 	bl	800028c <__adddf3>
 801c5e8:	2000      	movs	r0, #0
 801c5ea:	4632      	mov	r2, r6
 801c5ec:	463b      	mov	r3, r7
 801c5ee:	4604      	mov	r4, r0
 801c5f0:	460d      	mov	r5, r1
 801c5f2:	f7e3 fe49 	bl	8000288 <__aeabi_dsub>
 801c5f6:	4602      	mov	r2, r0
 801c5f8:	460b      	mov	r3, r1
 801c5fa:	4640      	mov	r0, r8
 801c5fc:	4649      	mov	r1, r9
 801c5fe:	f7e3 fe43 	bl	8000288 <__aeabi_dsub>
 801c602:	9b04      	ldr	r3, [sp, #16]
 801c604:	9a06      	ldr	r2, [sp, #24]
 801c606:	3b01      	subs	r3, #1
 801c608:	4313      	orrs	r3, r2
 801c60a:	4682      	mov	sl, r0
 801c60c:	468b      	mov	fp, r1
 801c60e:	f040 81e7 	bne.w	801c9e0 <__ieee754_pow+0x700>
 801c612:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 801c6c8 <__ieee754_pow+0x3e8>
 801c616:	eeb0 8a47 	vmov.f32	s16, s14
 801c61a:	eef0 8a67 	vmov.f32	s17, s15
 801c61e:	e9dd 6700 	ldrd	r6, r7, [sp]
 801c622:	2600      	movs	r6, #0
 801c624:	4632      	mov	r2, r6
 801c626:	463b      	mov	r3, r7
 801c628:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c62c:	f7e3 fe2c 	bl	8000288 <__aeabi_dsub>
 801c630:	4622      	mov	r2, r4
 801c632:	462b      	mov	r3, r5
 801c634:	f7e3 ffe0 	bl	80005f8 <__aeabi_dmul>
 801c638:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c63c:	4680      	mov	r8, r0
 801c63e:	4689      	mov	r9, r1
 801c640:	4650      	mov	r0, sl
 801c642:	4659      	mov	r1, fp
 801c644:	f7e3 ffd8 	bl	80005f8 <__aeabi_dmul>
 801c648:	4602      	mov	r2, r0
 801c64a:	460b      	mov	r3, r1
 801c64c:	4640      	mov	r0, r8
 801c64e:	4649      	mov	r1, r9
 801c650:	f7e3 fe1c 	bl	800028c <__adddf3>
 801c654:	4632      	mov	r2, r6
 801c656:	463b      	mov	r3, r7
 801c658:	4680      	mov	r8, r0
 801c65a:	4689      	mov	r9, r1
 801c65c:	4620      	mov	r0, r4
 801c65e:	4629      	mov	r1, r5
 801c660:	f7e3 ffca 	bl	80005f8 <__aeabi_dmul>
 801c664:	460b      	mov	r3, r1
 801c666:	4604      	mov	r4, r0
 801c668:	460d      	mov	r5, r1
 801c66a:	4602      	mov	r2, r0
 801c66c:	4649      	mov	r1, r9
 801c66e:	4640      	mov	r0, r8
 801c670:	f7e3 fe0c 	bl	800028c <__adddf3>
 801c674:	4b19      	ldr	r3, [pc, #100]	; (801c6dc <__ieee754_pow+0x3fc>)
 801c676:	4299      	cmp	r1, r3
 801c678:	ec45 4b19 	vmov	d9, r4, r5
 801c67c:	4606      	mov	r6, r0
 801c67e:	460f      	mov	r7, r1
 801c680:	468b      	mov	fp, r1
 801c682:	f340 82f1 	ble.w	801cc68 <__ieee754_pow+0x988>
 801c686:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801c68a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801c68e:	4303      	orrs	r3, r0
 801c690:	f000 81e4 	beq.w	801ca5c <__ieee754_pow+0x77c>
 801c694:	ec51 0b18 	vmov	r0, r1, d8
 801c698:	2200      	movs	r2, #0
 801c69a:	2300      	movs	r3, #0
 801c69c:	f7e4 fa1e 	bl	8000adc <__aeabi_dcmplt>
 801c6a0:	3800      	subs	r0, #0
 801c6a2:	bf18      	it	ne
 801c6a4:	2001      	movne	r0, #1
 801c6a6:	e72b      	b.n	801c500 <__ieee754_pow+0x220>
 801c6a8:	60000000 	.word	0x60000000
 801c6ac:	3ff71547 	.word	0x3ff71547
 801c6b0:	f85ddf44 	.word	0xf85ddf44
 801c6b4:	3e54ae0b 	.word	0x3e54ae0b
 801c6b8:	55555555 	.word	0x55555555
 801c6bc:	3fd55555 	.word	0x3fd55555
 801c6c0:	652b82fe 	.word	0x652b82fe
 801c6c4:	3ff71547 	.word	0x3ff71547
 801c6c8:	00000000 	.word	0x00000000
 801c6cc:	bff00000 	.word	0xbff00000
 801c6d0:	3ff00000 	.word	0x3ff00000
 801c6d4:	3fd00000 	.word	0x3fd00000
 801c6d8:	3fe00000 	.word	0x3fe00000
 801c6dc:	408fffff 	.word	0x408fffff
 801c6e0:	4bd5      	ldr	r3, [pc, #852]	; (801ca38 <__ieee754_pow+0x758>)
 801c6e2:	402b      	ands	r3, r5
 801c6e4:	2200      	movs	r2, #0
 801c6e6:	b92b      	cbnz	r3, 801c6f4 <__ieee754_pow+0x414>
 801c6e8:	4bd4      	ldr	r3, [pc, #848]	; (801ca3c <__ieee754_pow+0x75c>)
 801c6ea:	f7e3 ff85 	bl	80005f8 <__aeabi_dmul>
 801c6ee:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801c6f2:	460c      	mov	r4, r1
 801c6f4:	1523      	asrs	r3, r4, #20
 801c6f6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801c6fa:	4413      	add	r3, r2
 801c6fc:	9305      	str	r3, [sp, #20]
 801c6fe:	4bd0      	ldr	r3, [pc, #832]	; (801ca40 <__ieee754_pow+0x760>)
 801c700:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801c704:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801c708:	429c      	cmp	r4, r3
 801c70a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801c70e:	dd08      	ble.n	801c722 <__ieee754_pow+0x442>
 801c710:	4bcc      	ldr	r3, [pc, #816]	; (801ca44 <__ieee754_pow+0x764>)
 801c712:	429c      	cmp	r4, r3
 801c714:	f340 8162 	ble.w	801c9dc <__ieee754_pow+0x6fc>
 801c718:	9b05      	ldr	r3, [sp, #20]
 801c71a:	3301      	adds	r3, #1
 801c71c:	9305      	str	r3, [sp, #20]
 801c71e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801c722:	2400      	movs	r4, #0
 801c724:	00e3      	lsls	r3, r4, #3
 801c726:	9307      	str	r3, [sp, #28]
 801c728:	4bc7      	ldr	r3, [pc, #796]	; (801ca48 <__ieee754_pow+0x768>)
 801c72a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801c72e:	ed93 7b00 	vldr	d7, [r3]
 801c732:	4629      	mov	r1, r5
 801c734:	ec53 2b17 	vmov	r2, r3, d7
 801c738:	eeb0 9a47 	vmov.f32	s18, s14
 801c73c:	eef0 9a67 	vmov.f32	s19, s15
 801c740:	4682      	mov	sl, r0
 801c742:	f7e3 fda1 	bl	8000288 <__aeabi_dsub>
 801c746:	4652      	mov	r2, sl
 801c748:	4606      	mov	r6, r0
 801c74a:	460f      	mov	r7, r1
 801c74c:	462b      	mov	r3, r5
 801c74e:	ec51 0b19 	vmov	r0, r1, d9
 801c752:	f7e3 fd9b 	bl	800028c <__adddf3>
 801c756:	4602      	mov	r2, r0
 801c758:	460b      	mov	r3, r1
 801c75a:	2000      	movs	r0, #0
 801c75c:	49bb      	ldr	r1, [pc, #748]	; (801ca4c <__ieee754_pow+0x76c>)
 801c75e:	f7e4 f875 	bl	800084c <__aeabi_ddiv>
 801c762:	ec41 0b1a 	vmov	d10, r0, r1
 801c766:	4602      	mov	r2, r0
 801c768:	460b      	mov	r3, r1
 801c76a:	4630      	mov	r0, r6
 801c76c:	4639      	mov	r1, r7
 801c76e:	f7e3 ff43 	bl	80005f8 <__aeabi_dmul>
 801c772:	2300      	movs	r3, #0
 801c774:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c778:	9302      	str	r3, [sp, #8]
 801c77a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801c77e:	46ab      	mov	fp, r5
 801c780:	106d      	asrs	r5, r5, #1
 801c782:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801c786:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801c78a:	ec41 0b18 	vmov	d8, r0, r1
 801c78e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801c792:	2200      	movs	r2, #0
 801c794:	4640      	mov	r0, r8
 801c796:	4649      	mov	r1, r9
 801c798:	4614      	mov	r4, r2
 801c79a:	461d      	mov	r5, r3
 801c79c:	f7e3 ff2c 	bl	80005f8 <__aeabi_dmul>
 801c7a0:	4602      	mov	r2, r0
 801c7a2:	460b      	mov	r3, r1
 801c7a4:	4630      	mov	r0, r6
 801c7a6:	4639      	mov	r1, r7
 801c7a8:	f7e3 fd6e 	bl	8000288 <__aeabi_dsub>
 801c7ac:	ec53 2b19 	vmov	r2, r3, d9
 801c7b0:	4606      	mov	r6, r0
 801c7b2:	460f      	mov	r7, r1
 801c7b4:	4620      	mov	r0, r4
 801c7b6:	4629      	mov	r1, r5
 801c7b8:	f7e3 fd66 	bl	8000288 <__aeabi_dsub>
 801c7bc:	4602      	mov	r2, r0
 801c7be:	460b      	mov	r3, r1
 801c7c0:	4650      	mov	r0, sl
 801c7c2:	4659      	mov	r1, fp
 801c7c4:	f7e3 fd60 	bl	8000288 <__aeabi_dsub>
 801c7c8:	4642      	mov	r2, r8
 801c7ca:	464b      	mov	r3, r9
 801c7cc:	f7e3 ff14 	bl	80005f8 <__aeabi_dmul>
 801c7d0:	4602      	mov	r2, r0
 801c7d2:	460b      	mov	r3, r1
 801c7d4:	4630      	mov	r0, r6
 801c7d6:	4639      	mov	r1, r7
 801c7d8:	f7e3 fd56 	bl	8000288 <__aeabi_dsub>
 801c7dc:	ec53 2b1a 	vmov	r2, r3, d10
 801c7e0:	f7e3 ff0a 	bl	80005f8 <__aeabi_dmul>
 801c7e4:	ec53 2b18 	vmov	r2, r3, d8
 801c7e8:	ec41 0b19 	vmov	d9, r0, r1
 801c7ec:	ec51 0b18 	vmov	r0, r1, d8
 801c7f0:	f7e3 ff02 	bl	80005f8 <__aeabi_dmul>
 801c7f4:	a37c      	add	r3, pc, #496	; (adr r3, 801c9e8 <__ieee754_pow+0x708>)
 801c7f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c7fa:	4604      	mov	r4, r0
 801c7fc:	460d      	mov	r5, r1
 801c7fe:	f7e3 fefb 	bl	80005f8 <__aeabi_dmul>
 801c802:	a37b      	add	r3, pc, #492	; (adr r3, 801c9f0 <__ieee754_pow+0x710>)
 801c804:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c808:	f7e3 fd40 	bl	800028c <__adddf3>
 801c80c:	4622      	mov	r2, r4
 801c80e:	462b      	mov	r3, r5
 801c810:	f7e3 fef2 	bl	80005f8 <__aeabi_dmul>
 801c814:	a378      	add	r3, pc, #480	; (adr r3, 801c9f8 <__ieee754_pow+0x718>)
 801c816:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c81a:	f7e3 fd37 	bl	800028c <__adddf3>
 801c81e:	4622      	mov	r2, r4
 801c820:	462b      	mov	r3, r5
 801c822:	f7e3 fee9 	bl	80005f8 <__aeabi_dmul>
 801c826:	a376      	add	r3, pc, #472	; (adr r3, 801ca00 <__ieee754_pow+0x720>)
 801c828:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c82c:	f7e3 fd2e 	bl	800028c <__adddf3>
 801c830:	4622      	mov	r2, r4
 801c832:	462b      	mov	r3, r5
 801c834:	f7e3 fee0 	bl	80005f8 <__aeabi_dmul>
 801c838:	a373      	add	r3, pc, #460	; (adr r3, 801ca08 <__ieee754_pow+0x728>)
 801c83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c83e:	f7e3 fd25 	bl	800028c <__adddf3>
 801c842:	4622      	mov	r2, r4
 801c844:	462b      	mov	r3, r5
 801c846:	f7e3 fed7 	bl	80005f8 <__aeabi_dmul>
 801c84a:	a371      	add	r3, pc, #452	; (adr r3, 801ca10 <__ieee754_pow+0x730>)
 801c84c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c850:	f7e3 fd1c 	bl	800028c <__adddf3>
 801c854:	4622      	mov	r2, r4
 801c856:	4606      	mov	r6, r0
 801c858:	460f      	mov	r7, r1
 801c85a:	462b      	mov	r3, r5
 801c85c:	4620      	mov	r0, r4
 801c85e:	4629      	mov	r1, r5
 801c860:	f7e3 feca 	bl	80005f8 <__aeabi_dmul>
 801c864:	4602      	mov	r2, r0
 801c866:	460b      	mov	r3, r1
 801c868:	4630      	mov	r0, r6
 801c86a:	4639      	mov	r1, r7
 801c86c:	f7e3 fec4 	bl	80005f8 <__aeabi_dmul>
 801c870:	4642      	mov	r2, r8
 801c872:	4604      	mov	r4, r0
 801c874:	460d      	mov	r5, r1
 801c876:	464b      	mov	r3, r9
 801c878:	ec51 0b18 	vmov	r0, r1, d8
 801c87c:	f7e3 fd06 	bl	800028c <__adddf3>
 801c880:	ec53 2b19 	vmov	r2, r3, d9
 801c884:	f7e3 feb8 	bl	80005f8 <__aeabi_dmul>
 801c888:	4622      	mov	r2, r4
 801c88a:	462b      	mov	r3, r5
 801c88c:	f7e3 fcfe 	bl	800028c <__adddf3>
 801c890:	4642      	mov	r2, r8
 801c892:	4682      	mov	sl, r0
 801c894:	468b      	mov	fp, r1
 801c896:	464b      	mov	r3, r9
 801c898:	4640      	mov	r0, r8
 801c89a:	4649      	mov	r1, r9
 801c89c:	f7e3 feac 	bl	80005f8 <__aeabi_dmul>
 801c8a0:	4b6b      	ldr	r3, [pc, #428]	; (801ca50 <__ieee754_pow+0x770>)
 801c8a2:	2200      	movs	r2, #0
 801c8a4:	4606      	mov	r6, r0
 801c8a6:	460f      	mov	r7, r1
 801c8a8:	f7e3 fcf0 	bl	800028c <__adddf3>
 801c8ac:	4652      	mov	r2, sl
 801c8ae:	465b      	mov	r3, fp
 801c8b0:	f7e3 fcec 	bl	800028c <__adddf3>
 801c8b4:	2000      	movs	r0, #0
 801c8b6:	4604      	mov	r4, r0
 801c8b8:	460d      	mov	r5, r1
 801c8ba:	4602      	mov	r2, r0
 801c8bc:	460b      	mov	r3, r1
 801c8be:	4640      	mov	r0, r8
 801c8c0:	4649      	mov	r1, r9
 801c8c2:	f7e3 fe99 	bl	80005f8 <__aeabi_dmul>
 801c8c6:	4b62      	ldr	r3, [pc, #392]	; (801ca50 <__ieee754_pow+0x770>)
 801c8c8:	4680      	mov	r8, r0
 801c8ca:	4689      	mov	r9, r1
 801c8cc:	2200      	movs	r2, #0
 801c8ce:	4620      	mov	r0, r4
 801c8d0:	4629      	mov	r1, r5
 801c8d2:	f7e3 fcd9 	bl	8000288 <__aeabi_dsub>
 801c8d6:	4632      	mov	r2, r6
 801c8d8:	463b      	mov	r3, r7
 801c8da:	f7e3 fcd5 	bl	8000288 <__aeabi_dsub>
 801c8de:	4602      	mov	r2, r0
 801c8e0:	460b      	mov	r3, r1
 801c8e2:	4650      	mov	r0, sl
 801c8e4:	4659      	mov	r1, fp
 801c8e6:	f7e3 fccf 	bl	8000288 <__aeabi_dsub>
 801c8ea:	ec53 2b18 	vmov	r2, r3, d8
 801c8ee:	f7e3 fe83 	bl	80005f8 <__aeabi_dmul>
 801c8f2:	4622      	mov	r2, r4
 801c8f4:	4606      	mov	r6, r0
 801c8f6:	460f      	mov	r7, r1
 801c8f8:	462b      	mov	r3, r5
 801c8fa:	ec51 0b19 	vmov	r0, r1, d9
 801c8fe:	f7e3 fe7b 	bl	80005f8 <__aeabi_dmul>
 801c902:	4602      	mov	r2, r0
 801c904:	460b      	mov	r3, r1
 801c906:	4630      	mov	r0, r6
 801c908:	4639      	mov	r1, r7
 801c90a:	f7e3 fcbf 	bl	800028c <__adddf3>
 801c90e:	4606      	mov	r6, r0
 801c910:	460f      	mov	r7, r1
 801c912:	4602      	mov	r2, r0
 801c914:	460b      	mov	r3, r1
 801c916:	4640      	mov	r0, r8
 801c918:	4649      	mov	r1, r9
 801c91a:	f7e3 fcb7 	bl	800028c <__adddf3>
 801c91e:	a33e      	add	r3, pc, #248	; (adr r3, 801ca18 <__ieee754_pow+0x738>)
 801c920:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c924:	2000      	movs	r0, #0
 801c926:	4604      	mov	r4, r0
 801c928:	460d      	mov	r5, r1
 801c92a:	f7e3 fe65 	bl	80005f8 <__aeabi_dmul>
 801c92e:	4642      	mov	r2, r8
 801c930:	ec41 0b18 	vmov	d8, r0, r1
 801c934:	464b      	mov	r3, r9
 801c936:	4620      	mov	r0, r4
 801c938:	4629      	mov	r1, r5
 801c93a:	f7e3 fca5 	bl	8000288 <__aeabi_dsub>
 801c93e:	4602      	mov	r2, r0
 801c940:	460b      	mov	r3, r1
 801c942:	4630      	mov	r0, r6
 801c944:	4639      	mov	r1, r7
 801c946:	f7e3 fc9f 	bl	8000288 <__aeabi_dsub>
 801c94a:	a335      	add	r3, pc, #212	; (adr r3, 801ca20 <__ieee754_pow+0x740>)
 801c94c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c950:	f7e3 fe52 	bl	80005f8 <__aeabi_dmul>
 801c954:	a334      	add	r3, pc, #208	; (adr r3, 801ca28 <__ieee754_pow+0x748>)
 801c956:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c95a:	4606      	mov	r6, r0
 801c95c:	460f      	mov	r7, r1
 801c95e:	4620      	mov	r0, r4
 801c960:	4629      	mov	r1, r5
 801c962:	f7e3 fe49 	bl	80005f8 <__aeabi_dmul>
 801c966:	4602      	mov	r2, r0
 801c968:	460b      	mov	r3, r1
 801c96a:	4630      	mov	r0, r6
 801c96c:	4639      	mov	r1, r7
 801c96e:	f7e3 fc8d 	bl	800028c <__adddf3>
 801c972:	9a07      	ldr	r2, [sp, #28]
 801c974:	4b37      	ldr	r3, [pc, #220]	; (801ca54 <__ieee754_pow+0x774>)
 801c976:	4413      	add	r3, r2
 801c978:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c97c:	f7e3 fc86 	bl	800028c <__adddf3>
 801c980:	4682      	mov	sl, r0
 801c982:	9805      	ldr	r0, [sp, #20]
 801c984:	468b      	mov	fp, r1
 801c986:	f7e3 fdcd 	bl	8000524 <__aeabi_i2d>
 801c98a:	9a07      	ldr	r2, [sp, #28]
 801c98c:	4b32      	ldr	r3, [pc, #200]	; (801ca58 <__ieee754_pow+0x778>)
 801c98e:	4413      	add	r3, r2
 801c990:	e9d3 8900 	ldrd	r8, r9, [r3]
 801c994:	4606      	mov	r6, r0
 801c996:	460f      	mov	r7, r1
 801c998:	4652      	mov	r2, sl
 801c99a:	465b      	mov	r3, fp
 801c99c:	ec51 0b18 	vmov	r0, r1, d8
 801c9a0:	f7e3 fc74 	bl	800028c <__adddf3>
 801c9a4:	4642      	mov	r2, r8
 801c9a6:	464b      	mov	r3, r9
 801c9a8:	f7e3 fc70 	bl	800028c <__adddf3>
 801c9ac:	4632      	mov	r2, r6
 801c9ae:	463b      	mov	r3, r7
 801c9b0:	f7e3 fc6c 	bl	800028c <__adddf3>
 801c9b4:	2000      	movs	r0, #0
 801c9b6:	4632      	mov	r2, r6
 801c9b8:	463b      	mov	r3, r7
 801c9ba:	4604      	mov	r4, r0
 801c9bc:	460d      	mov	r5, r1
 801c9be:	f7e3 fc63 	bl	8000288 <__aeabi_dsub>
 801c9c2:	4642      	mov	r2, r8
 801c9c4:	464b      	mov	r3, r9
 801c9c6:	f7e3 fc5f 	bl	8000288 <__aeabi_dsub>
 801c9ca:	ec53 2b18 	vmov	r2, r3, d8
 801c9ce:	f7e3 fc5b 	bl	8000288 <__aeabi_dsub>
 801c9d2:	4602      	mov	r2, r0
 801c9d4:	460b      	mov	r3, r1
 801c9d6:	4650      	mov	r0, sl
 801c9d8:	4659      	mov	r1, fp
 801c9da:	e610      	b.n	801c5fe <__ieee754_pow+0x31e>
 801c9dc:	2401      	movs	r4, #1
 801c9de:	e6a1      	b.n	801c724 <__ieee754_pow+0x444>
 801c9e0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 801ca30 <__ieee754_pow+0x750>
 801c9e4:	e617      	b.n	801c616 <__ieee754_pow+0x336>
 801c9e6:	bf00      	nop
 801c9e8:	4a454eef 	.word	0x4a454eef
 801c9ec:	3fca7e28 	.word	0x3fca7e28
 801c9f0:	93c9db65 	.word	0x93c9db65
 801c9f4:	3fcd864a 	.word	0x3fcd864a
 801c9f8:	a91d4101 	.word	0xa91d4101
 801c9fc:	3fd17460 	.word	0x3fd17460
 801ca00:	518f264d 	.word	0x518f264d
 801ca04:	3fd55555 	.word	0x3fd55555
 801ca08:	db6fabff 	.word	0xdb6fabff
 801ca0c:	3fdb6db6 	.word	0x3fdb6db6
 801ca10:	33333303 	.word	0x33333303
 801ca14:	3fe33333 	.word	0x3fe33333
 801ca18:	e0000000 	.word	0xe0000000
 801ca1c:	3feec709 	.word	0x3feec709
 801ca20:	dc3a03fd 	.word	0xdc3a03fd
 801ca24:	3feec709 	.word	0x3feec709
 801ca28:	145b01f5 	.word	0x145b01f5
 801ca2c:	be3e2fe0 	.word	0xbe3e2fe0
 801ca30:	00000000 	.word	0x00000000
 801ca34:	3ff00000 	.word	0x3ff00000
 801ca38:	7ff00000 	.word	0x7ff00000
 801ca3c:	43400000 	.word	0x43400000
 801ca40:	0003988e 	.word	0x0003988e
 801ca44:	000bb679 	.word	0x000bb679
 801ca48:	080290b0 	.word	0x080290b0
 801ca4c:	3ff00000 	.word	0x3ff00000
 801ca50:	40080000 	.word	0x40080000
 801ca54:	080290d0 	.word	0x080290d0
 801ca58:	080290c0 	.word	0x080290c0
 801ca5c:	a3b5      	add	r3, pc, #724	; (adr r3, 801cd34 <__ieee754_pow+0xa54>)
 801ca5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca62:	4640      	mov	r0, r8
 801ca64:	4649      	mov	r1, r9
 801ca66:	f7e3 fc11 	bl	800028c <__adddf3>
 801ca6a:	4622      	mov	r2, r4
 801ca6c:	ec41 0b1a 	vmov	d10, r0, r1
 801ca70:	462b      	mov	r3, r5
 801ca72:	4630      	mov	r0, r6
 801ca74:	4639      	mov	r1, r7
 801ca76:	f7e3 fc07 	bl	8000288 <__aeabi_dsub>
 801ca7a:	4602      	mov	r2, r0
 801ca7c:	460b      	mov	r3, r1
 801ca7e:	ec51 0b1a 	vmov	r0, r1, d10
 801ca82:	f7e4 f849 	bl	8000b18 <__aeabi_dcmpgt>
 801ca86:	2800      	cmp	r0, #0
 801ca88:	f47f ae04 	bne.w	801c694 <__ieee754_pow+0x3b4>
 801ca8c:	4aa4      	ldr	r2, [pc, #656]	; (801cd20 <__ieee754_pow+0xa40>)
 801ca8e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801ca92:	4293      	cmp	r3, r2
 801ca94:	f340 8108 	ble.w	801cca8 <__ieee754_pow+0x9c8>
 801ca98:	151b      	asrs	r3, r3, #20
 801ca9a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801ca9e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801caa2:	fa4a f303 	asr.w	r3, sl, r3
 801caa6:	445b      	add	r3, fp
 801caa8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801caac:	4e9d      	ldr	r6, [pc, #628]	; (801cd24 <__ieee754_pow+0xa44>)
 801caae:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801cab2:	4116      	asrs	r6, r2
 801cab4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801cab8:	2000      	movs	r0, #0
 801caba:	ea23 0106 	bic.w	r1, r3, r6
 801cabe:	f1c2 0214 	rsb	r2, r2, #20
 801cac2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801cac6:	fa4a fa02 	asr.w	sl, sl, r2
 801caca:	f1bb 0f00 	cmp.w	fp, #0
 801cace:	4602      	mov	r2, r0
 801cad0:	460b      	mov	r3, r1
 801cad2:	4620      	mov	r0, r4
 801cad4:	4629      	mov	r1, r5
 801cad6:	bfb8      	it	lt
 801cad8:	f1ca 0a00 	rsblt	sl, sl, #0
 801cadc:	f7e3 fbd4 	bl	8000288 <__aeabi_dsub>
 801cae0:	ec41 0b19 	vmov	d9, r0, r1
 801cae4:	4642      	mov	r2, r8
 801cae6:	464b      	mov	r3, r9
 801cae8:	ec51 0b19 	vmov	r0, r1, d9
 801caec:	f7e3 fbce 	bl	800028c <__adddf3>
 801caf0:	a37b      	add	r3, pc, #492	; (adr r3, 801cce0 <__ieee754_pow+0xa00>)
 801caf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801caf6:	2000      	movs	r0, #0
 801caf8:	4604      	mov	r4, r0
 801cafa:	460d      	mov	r5, r1
 801cafc:	f7e3 fd7c 	bl	80005f8 <__aeabi_dmul>
 801cb00:	ec53 2b19 	vmov	r2, r3, d9
 801cb04:	4606      	mov	r6, r0
 801cb06:	460f      	mov	r7, r1
 801cb08:	4620      	mov	r0, r4
 801cb0a:	4629      	mov	r1, r5
 801cb0c:	f7e3 fbbc 	bl	8000288 <__aeabi_dsub>
 801cb10:	4602      	mov	r2, r0
 801cb12:	460b      	mov	r3, r1
 801cb14:	4640      	mov	r0, r8
 801cb16:	4649      	mov	r1, r9
 801cb18:	f7e3 fbb6 	bl	8000288 <__aeabi_dsub>
 801cb1c:	a372      	add	r3, pc, #456	; (adr r3, 801cce8 <__ieee754_pow+0xa08>)
 801cb1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cb22:	f7e3 fd69 	bl	80005f8 <__aeabi_dmul>
 801cb26:	a372      	add	r3, pc, #456	; (adr r3, 801ccf0 <__ieee754_pow+0xa10>)
 801cb28:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cb2c:	4680      	mov	r8, r0
 801cb2e:	4689      	mov	r9, r1
 801cb30:	4620      	mov	r0, r4
 801cb32:	4629      	mov	r1, r5
 801cb34:	f7e3 fd60 	bl	80005f8 <__aeabi_dmul>
 801cb38:	4602      	mov	r2, r0
 801cb3a:	460b      	mov	r3, r1
 801cb3c:	4640      	mov	r0, r8
 801cb3e:	4649      	mov	r1, r9
 801cb40:	f7e3 fba4 	bl	800028c <__adddf3>
 801cb44:	4604      	mov	r4, r0
 801cb46:	460d      	mov	r5, r1
 801cb48:	4602      	mov	r2, r0
 801cb4a:	460b      	mov	r3, r1
 801cb4c:	4630      	mov	r0, r6
 801cb4e:	4639      	mov	r1, r7
 801cb50:	f7e3 fb9c 	bl	800028c <__adddf3>
 801cb54:	4632      	mov	r2, r6
 801cb56:	463b      	mov	r3, r7
 801cb58:	4680      	mov	r8, r0
 801cb5a:	4689      	mov	r9, r1
 801cb5c:	f7e3 fb94 	bl	8000288 <__aeabi_dsub>
 801cb60:	4602      	mov	r2, r0
 801cb62:	460b      	mov	r3, r1
 801cb64:	4620      	mov	r0, r4
 801cb66:	4629      	mov	r1, r5
 801cb68:	f7e3 fb8e 	bl	8000288 <__aeabi_dsub>
 801cb6c:	4642      	mov	r2, r8
 801cb6e:	4606      	mov	r6, r0
 801cb70:	460f      	mov	r7, r1
 801cb72:	464b      	mov	r3, r9
 801cb74:	4640      	mov	r0, r8
 801cb76:	4649      	mov	r1, r9
 801cb78:	f7e3 fd3e 	bl	80005f8 <__aeabi_dmul>
 801cb7c:	a35e      	add	r3, pc, #376	; (adr r3, 801ccf8 <__ieee754_pow+0xa18>)
 801cb7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cb82:	4604      	mov	r4, r0
 801cb84:	460d      	mov	r5, r1
 801cb86:	f7e3 fd37 	bl	80005f8 <__aeabi_dmul>
 801cb8a:	a35d      	add	r3, pc, #372	; (adr r3, 801cd00 <__ieee754_pow+0xa20>)
 801cb8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cb90:	f7e3 fb7a 	bl	8000288 <__aeabi_dsub>
 801cb94:	4622      	mov	r2, r4
 801cb96:	462b      	mov	r3, r5
 801cb98:	f7e3 fd2e 	bl	80005f8 <__aeabi_dmul>
 801cb9c:	a35a      	add	r3, pc, #360	; (adr r3, 801cd08 <__ieee754_pow+0xa28>)
 801cb9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cba2:	f7e3 fb73 	bl	800028c <__adddf3>
 801cba6:	4622      	mov	r2, r4
 801cba8:	462b      	mov	r3, r5
 801cbaa:	f7e3 fd25 	bl	80005f8 <__aeabi_dmul>
 801cbae:	a358      	add	r3, pc, #352	; (adr r3, 801cd10 <__ieee754_pow+0xa30>)
 801cbb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cbb4:	f7e3 fb68 	bl	8000288 <__aeabi_dsub>
 801cbb8:	4622      	mov	r2, r4
 801cbba:	462b      	mov	r3, r5
 801cbbc:	f7e3 fd1c 	bl	80005f8 <__aeabi_dmul>
 801cbc0:	a355      	add	r3, pc, #340	; (adr r3, 801cd18 <__ieee754_pow+0xa38>)
 801cbc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cbc6:	f7e3 fb61 	bl	800028c <__adddf3>
 801cbca:	4622      	mov	r2, r4
 801cbcc:	462b      	mov	r3, r5
 801cbce:	f7e3 fd13 	bl	80005f8 <__aeabi_dmul>
 801cbd2:	4602      	mov	r2, r0
 801cbd4:	460b      	mov	r3, r1
 801cbd6:	4640      	mov	r0, r8
 801cbd8:	4649      	mov	r1, r9
 801cbda:	f7e3 fb55 	bl	8000288 <__aeabi_dsub>
 801cbde:	4604      	mov	r4, r0
 801cbe0:	460d      	mov	r5, r1
 801cbe2:	4602      	mov	r2, r0
 801cbe4:	460b      	mov	r3, r1
 801cbe6:	4640      	mov	r0, r8
 801cbe8:	4649      	mov	r1, r9
 801cbea:	f7e3 fd05 	bl	80005f8 <__aeabi_dmul>
 801cbee:	2200      	movs	r2, #0
 801cbf0:	ec41 0b19 	vmov	d9, r0, r1
 801cbf4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801cbf8:	4620      	mov	r0, r4
 801cbfa:	4629      	mov	r1, r5
 801cbfc:	f7e3 fb44 	bl	8000288 <__aeabi_dsub>
 801cc00:	4602      	mov	r2, r0
 801cc02:	460b      	mov	r3, r1
 801cc04:	ec51 0b19 	vmov	r0, r1, d9
 801cc08:	f7e3 fe20 	bl	800084c <__aeabi_ddiv>
 801cc0c:	4632      	mov	r2, r6
 801cc0e:	4604      	mov	r4, r0
 801cc10:	460d      	mov	r5, r1
 801cc12:	463b      	mov	r3, r7
 801cc14:	4640      	mov	r0, r8
 801cc16:	4649      	mov	r1, r9
 801cc18:	f7e3 fcee 	bl	80005f8 <__aeabi_dmul>
 801cc1c:	4632      	mov	r2, r6
 801cc1e:	463b      	mov	r3, r7
 801cc20:	f7e3 fb34 	bl	800028c <__adddf3>
 801cc24:	4602      	mov	r2, r0
 801cc26:	460b      	mov	r3, r1
 801cc28:	4620      	mov	r0, r4
 801cc2a:	4629      	mov	r1, r5
 801cc2c:	f7e3 fb2c 	bl	8000288 <__aeabi_dsub>
 801cc30:	4642      	mov	r2, r8
 801cc32:	464b      	mov	r3, r9
 801cc34:	f7e3 fb28 	bl	8000288 <__aeabi_dsub>
 801cc38:	460b      	mov	r3, r1
 801cc3a:	4602      	mov	r2, r0
 801cc3c:	493a      	ldr	r1, [pc, #232]	; (801cd28 <__ieee754_pow+0xa48>)
 801cc3e:	2000      	movs	r0, #0
 801cc40:	f7e3 fb22 	bl	8000288 <__aeabi_dsub>
 801cc44:	ec41 0b10 	vmov	d0, r0, r1
 801cc48:	ee10 3a90 	vmov	r3, s1
 801cc4c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801cc50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801cc54:	da2b      	bge.n	801ccae <__ieee754_pow+0x9ce>
 801cc56:	4650      	mov	r0, sl
 801cc58:	f000 f966 	bl	801cf28 <scalbn>
 801cc5c:	ec51 0b10 	vmov	r0, r1, d0
 801cc60:	ec53 2b18 	vmov	r2, r3, d8
 801cc64:	f7ff bbed 	b.w	801c442 <__ieee754_pow+0x162>
 801cc68:	4b30      	ldr	r3, [pc, #192]	; (801cd2c <__ieee754_pow+0xa4c>)
 801cc6a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801cc6e:	429e      	cmp	r6, r3
 801cc70:	f77f af0c 	ble.w	801ca8c <__ieee754_pow+0x7ac>
 801cc74:	4b2e      	ldr	r3, [pc, #184]	; (801cd30 <__ieee754_pow+0xa50>)
 801cc76:	440b      	add	r3, r1
 801cc78:	4303      	orrs	r3, r0
 801cc7a:	d009      	beq.n	801cc90 <__ieee754_pow+0x9b0>
 801cc7c:	ec51 0b18 	vmov	r0, r1, d8
 801cc80:	2200      	movs	r2, #0
 801cc82:	2300      	movs	r3, #0
 801cc84:	f7e3 ff2a 	bl	8000adc <__aeabi_dcmplt>
 801cc88:	3800      	subs	r0, #0
 801cc8a:	bf18      	it	ne
 801cc8c:	2001      	movne	r0, #1
 801cc8e:	e447      	b.n	801c520 <__ieee754_pow+0x240>
 801cc90:	4622      	mov	r2, r4
 801cc92:	462b      	mov	r3, r5
 801cc94:	f7e3 faf8 	bl	8000288 <__aeabi_dsub>
 801cc98:	4642      	mov	r2, r8
 801cc9a:	464b      	mov	r3, r9
 801cc9c:	f7e3 ff32 	bl	8000b04 <__aeabi_dcmpge>
 801cca0:	2800      	cmp	r0, #0
 801cca2:	f43f aef3 	beq.w	801ca8c <__ieee754_pow+0x7ac>
 801cca6:	e7e9      	b.n	801cc7c <__ieee754_pow+0x99c>
 801cca8:	f04f 0a00 	mov.w	sl, #0
 801ccac:	e71a      	b.n	801cae4 <__ieee754_pow+0x804>
 801ccae:	ec51 0b10 	vmov	r0, r1, d0
 801ccb2:	4619      	mov	r1, r3
 801ccb4:	e7d4      	b.n	801cc60 <__ieee754_pow+0x980>
 801ccb6:	491c      	ldr	r1, [pc, #112]	; (801cd28 <__ieee754_pow+0xa48>)
 801ccb8:	2000      	movs	r0, #0
 801ccba:	f7ff bb30 	b.w	801c31e <__ieee754_pow+0x3e>
 801ccbe:	2000      	movs	r0, #0
 801ccc0:	2100      	movs	r1, #0
 801ccc2:	f7ff bb2c 	b.w	801c31e <__ieee754_pow+0x3e>
 801ccc6:	4630      	mov	r0, r6
 801ccc8:	4639      	mov	r1, r7
 801ccca:	f7ff bb28 	b.w	801c31e <__ieee754_pow+0x3e>
 801ccce:	9204      	str	r2, [sp, #16]
 801ccd0:	f7ff bb7a 	b.w	801c3c8 <__ieee754_pow+0xe8>
 801ccd4:	2300      	movs	r3, #0
 801ccd6:	f7ff bb64 	b.w	801c3a2 <__ieee754_pow+0xc2>
 801ccda:	bf00      	nop
 801ccdc:	f3af 8000 	nop.w
 801cce0:	00000000 	.word	0x00000000
 801cce4:	3fe62e43 	.word	0x3fe62e43
 801cce8:	fefa39ef 	.word	0xfefa39ef
 801ccec:	3fe62e42 	.word	0x3fe62e42
 801ccf0:	0ca86c39 	.word	0x0ca86c39
 801ccf4:	be205c61 	.word	0xbe205c61
 801ccf8:	72bea4d0 	.word	0x72bea4d0
 801ccfc:	3e663769 	.word	0x3e663769
 801cd00:	c5d26bf1 	.word	0xc5d26bf1
 801cd04:	3ebbbd41 	.word	0x3ebbbd41
 801cd08:	af25de2c 	.word	0xaf25de2c
 801cd0c:	3f11566a 	.word	0x3f11566a
 801cd10:	16bebd93 	.word	0x16bebd93
 801cd14:	3f66c16c 	.word	0x3f66c16c
 801cd18:	5555553e 	.word	0x5555553e
 801cd1c:	3fc55555 	.word	0x3fc55555
 801cd20:	3fe00000 	.word	0x3fe00000
 801cd24:	000fffff 	.word	0x000fffff
 801cd28:	3ff00000 	.word	0x3ff00000
 801cd2c:	4090cbff 	.word	0x4090cbff
 801cd30:	3f6f3400 	.word	0x3f6f3400
 801cd34:	652b82fe 	.word	0x652b82fe
 801cd38:	3c971547 	.word	0x3c971547

0801cd3c <__ieee754_sqrt>:
 801cd3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cd40:	ec55 4b10 	vmov	r4, r5, d0
 801cd44:	4e55      	ldr	r6, [pc, #340]	; (801ce9c <__ieee754_sqrt+0x160>)
 801cd46:	43ae      	bics	r6, r5
 801cd48:	ee10 0a10 	vmov	r0, s0
 801cd4c:	ee10 3a10 	vmov	r3, s0
 801cd50:	462a      	mov	r2, r5
 801cd52:	4629      	mov	r1, r5
 801cd54:	d110      	bne.n	801cd78 <__ieee754_sqrt+0x3c>
 801cd56:	ee10 2a10 	vmov	r2, s0
 801cd5a:	462b      	mov	r3, r5
 801cd5c:	f7e3 fc4c 	bl	80005f8 <__aeabi_dmul>
 801cd60:	4602      	mov	r2, r0
 801cd62:	460b      	mov	r3, r1
 801cd64:	4620      	mov	r0, r4
 801cd66:	4629      	mov	r1, r5
 801cd68:	f7e3 fa90 	bl	800028c <__adddf3>
 801cd6c:	4604      	mov	r4, r0
 801cd6e:	460d      	mov	r5, r1
 801cd70:	ec45 4b10 	vmov	d0, r4, r5
 801cd74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cd78:	2d00      	cmp	r5, #0
 801cd7a:	dc10      	bgt.n	801cd9e <__ieee754_sqrt+0x62>
 801cd7c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801cd80:	4330      	orrs	r0, r6
 801cd82:	d0f5      	beq.n	801cd70 <__ieee754_sqrt+0x34>
 801cd84:	b15d      	cbz	r5, 801cd9e <__ieee754_sqrt+0x62>
 801cd86:	ee10 2a10 	vmov	r2, s0
 801cd8a:	462b      	mov	r3, r5
 801cd8c:	ee10 0a10 	vmov	r0, s0
 801cd90:	f7e3 fa7a 	bl	8000288 <__aeabi_dsub>
 801cd94:	4602      	mov	r2, r0
 801cd96:	460b      	mov	r3, r1
 801cd98:	f7e3 fd58 	bl	800084c <__aeabi_ddiv>
 801cd9c:	e7e6      	b.n	801cd6c <__ieee754_sqrt+0x30>
 801cd9e:	1512      	asrs	r2, r2, #20
 801cda0:	d074      	beq.n	801ce8c <__ieee754_sqrt+0x150>
 801cda2:	07d4      	lsls	r4, r2, #31
 801cda4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801cda8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 801cdac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801cdb0:	bf5e      	ittt	pl
 801cdb2:	0fda      	lsrpl	r2, r3, #31
 801cdb4:	005b      	lslpl	r3, r3, #1
 801cdb6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 801cdba:	2400      	movs	r4, #0
 801cdbc:	0fda      	lsrs	r2, r3, #31
 801cdbe:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801cdc2:	107f      	asrs	r7, r7, #1
 801cdc4:	005b      	lsls	r3, r3, #1
 801cdc6:	2516      	movs	r5, #22
 801cdc8:	4620      	mov	r0, r4
 801cdca:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801cdce:	1886      	adds	r6, r0, r2
 801cdd0:	428e      	cmp	r6, r1
 801cdd2:	bfde      	ittt	le
 801cdd4:	1b89      	suble	r1, r1, r6
 801cdd6:	18b0      	addle	r0, r6, r2
 801cdd8:	18a4      	addle	r4, r4, r2
 801cdda:	0049      	lsls	r1, r1, #1
 801cddc:	3d01      	subs	r5, #1
 801cdde:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 801cde2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801cde6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801cdea:	d1f0      	bne.n	801cdce <__ieee754_sqrt+0x92>
 801cdec:	462a      	mov	r2, r5
 801cdee:	f04f 0e20 	mov.w	lr, #32
 801cdf2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801cdf6:	4281      	cmp	r1, r0
 801cdf8:	eb06 0c05 	add.w	ip, r6, r5
 801cdfc:	dc02      	bgt.n	801ce04 <__ieee754_sqrt+0xc8>
 801cdfe:	d113      	bne.n	801ce28 <__ieee754_sqrt+0xec>
 801ce00:	459c      	cmp	ip, r3
 801ce02:	d811      	bhi.n	801ce28 <__ieee754_sqrt+0xec>
 801ce04:	f1bc 0f00 	cmp.w	ip, #0
 801ce08:	eb0c 0506 	add.w	r5, ip, r6
 801ce0c:	da43      	bge.n	801ce96 <__ieee754_sqrt+0x15a>
 801ce0e:	2d00      	cmp	r5, #0
 801ce10:	db41      	blt.n	801ce96 <__ieee754_sqrt+0x15a>
 801ce12:	f100 0801 	add.w	r8, r0, #1
 801ce16:	1a09      	subs	r1, r1, r0
 801ce18:	459c      	cmp	ip, r3
 801ce1a:	bf88      	it	hi
 801ce1c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 801ce20:	eba3 030c 	sub.w	r3, r3, ip
 801ce24:	4432      	add	r2, r6
 801ce26:	4640      	mov	r0, r8
 801ce28:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 801ce2c:	f1be 0e01 	subs.w	lr, lr, #1
 801ce30:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 801ce34:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801ce38:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801ce3c:	d1db      	bne.n	801cdf6 <__ieee754_sqrt+0xba>
 801ce3e:	430b      	orrs	r3, r1
 801ce40:	d006      	beq.n	801ce50 <__ieee754_sqrt+0x114>
 801ce42:	1c50      	adds	r0, r2, #1
 801ce44:	bf13      	iteet	ne
 801ce46:	3201      	addne	r2, #1
 801ce48:	3401      	addeq	r4, #1
 801ce4a:	4672      	moveq	r2, lr
 801ce4c:	f022 0201 	bicne.w	r2, r2, #1
 801ce50:	1063      	asrs	r3, r4, #1
 801ce52:	0852      	lsrs	r2, r2, #1
 801ce54:	07e1      	lsls	r1, r4, #31
 801ce56:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801ce5a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801ce5e:	bf48      	it	mi
 801ce60:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 801ce64:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 801ce68:	4614      	mov	r4, r2
 801ce6a:	e781      	b.n	801cd70 <__ieee754_sqrt+0x34>
 801ce6c:	0ad9      	lsrs	r1, r3, #11
 801ce6e:	3815      	subs	r0, #21
 801ce70:	055b      	lsls	r3, r3, #21
 801ce72:	2900      	cmp	r1, #0
 801ce74:	d0fa      	beq.n	801ce6c <__ieee754_sqrt+0x130>
 801ce76:	02cd      	lsls	r5, r1, #11
 801ce78:	d50a      	bpl.n	801ce90 <__ieee754_sqrt+0x154>
 801ce7a:	f1c2 0420 	rsb	r4, r2, #32
 801ce7e:	fa23 f404 	lsr.w	r4, r3, r4
 801ce82:	1e55      	subs	r5, r2, #1
 801ce84:	4093      	lsls	r3, r2
 801ce86:	4321      	orrs	r1, r4
 801ce88:	1b42      	subs	r2, r0, r5
 801ce8a:	e78a      	b.n	801cda2 <__ieee754_sqrt+0x66>
 801ce8c:	4610      	mov	r0, r2
 801ce8e:	e7f0      	b.n	801ce72 <__ieee754_sqrt+0x136>
 801ce90:	0049      	lsls	r1, r1, #1
 801ce92:	3201      	adds	r2, #1
 801ce94:	e7ef      	b.n	801ce76 <__ieee754_sqrt+0x13a>
 801ce96:	4680      	mov	r8, r0
 801ce98:	e7bd      	b.n	801ce16 <__ieee754_sqrt+0xda>
 801ce9a:	bf00      	nop
 801ce9c:	7ff00000 	.word	0x7ff00000

0801cea0 <with_errno>:
 801cea0:	b570      	push	{r4, r5, r6, lr}
 801cea2:	4604      	mov	r4, r0
 801cea4:	460d      	mov	r5, r1
 801cea6:	4616      	mov	r6, r2
 801cea8:	f000 f8e2 	bl	801d070 <__errno>
 801ceac:	4629      	mov	r1, r5
 801ceae:	6006      	str	r6, [r0, #0]
 801ceb0:	4620      	mov	r0, r4
 801ceb2:	bd70      	pop	{r4, r5, r6, pc}

0801ceb4 <xflow>:
 801ceb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ceb6:	4614      	mov	r4, r2
 801ceb8:	461d      	mov	r5, r3
 801ceba:	b108      	cbz	r0, 801cec0 <xflow+0xc>
 801cebc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801cec0:	e9cd 2300 	strd	r2, r3, [sp]
 801cec4:	e9dd 2300 	ldrd	r2, r3, [sp]
 801cec8:	4620      	mov	r0, r4
 801ceca:	4629      	mov	r1, r5
 801cecc:	f7e3 fb94 	bl	80005f8 <__aeabi_dmul>
 801ced0:	2222      	movs	r2, #34	; 0x22
 801ced2:	b003      	add	sp, #12
 801ced4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ced8:	f7ff bfe2 	b.w	801cea0 <with_errno>

0801cedc <__math_uflow>:
 801cedc:	b508      	push	{r3, lr}
 801cede:	2200      	movs	r2, #0
 801cee0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801cee4:	f7ff ffe6 	bl	801ceb4 <xflow>
 801cee8:	ec41 0b10 	vmov	d0, r0, r1
 801ceec:	bd08      	pop	{r3, pc}

0801ceee <__math_oflow>:
 801ceee:	b508      	push	{r3, lr}
 801cef0:	2200      	movs	r2, #0
 801cef2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801cef6:	f7ff ffdd 	bl	801ceb4 <xflow>
 801cefa:	ec41 0b10 	vmov	d0, r0, r1
 801cefe:	bd08      	pop	{r3, pc}

0801cf00 <fabs>:
 801cf00:	ec51 0b10 	vmov	r0, r1, d0
 801cf04:	ee10 2a10 	vmov	r2, s0
 801cf08:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801cf0c:	ec43 2b10 	vmov	d0, r2, r3
 801cf10:	4770      	bx	lr

0801cf12 <finite>:
 801cf12:	b082      	sub	sp, #8
 801cf14:	ed8d 0b00 	vstr	d0, [sp]
 801cf18:	9801      	ldr	r0, [sp, #4]
 801cf1a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801cf1e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801cf22:	0fc0      	lsrs	r0, r0, #31
 801cf24:	b002      	add	sp, #8
 801cf26:	4770      	bx	lr

0801cf28 <scalbn>:
 801cf28:	b570      	push	{r4, r5, r6, lr}
 801cf2a:	ec55 4b10 	vmov	r4, r5, d0
 801cf2e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801cf32:	4606      	mov	r6, r0
 801cf34:	462b      	mov	r3, r5
 801cf36:	b99a      	cbnz	r2, 801cf60 <scalbn+0x38>
 801cf38:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801cf3c:	4323      	orrs	r3, r4
 801cf3e:	d036      	beq.n	801cfae <scalbn+0x86>
 801cf40:	4b39      	ldr	r3, [pc, #228]	; (801d028 <scalbn+0x100>)
 801cf42:	4629      	mov	r1, r5
 801cf44:	ee10 0a10 	vmov	r0, s0
 801cf48:	2200      	movs	r2, #0
 801cf4a:	f7e3 fb55 	bl	80005f8 <__aeabi_dmul>
 801cf4e:	4b37      	ldr	r3, [pc, #220]	; (801d02c <scalbn+0x104>)
 801cf50:	429e      	cmp	r6, r3
 801cf52:	4604      	mov	r4, r0
 801cf54:	460d      	mov	r5, r1
 801cf56:	da10      	bge.n	801cf7a <scalbn+0x52>
 801cf58:	a32b      	add	r3, pc, #172	; (adr r3, 801d008 <scalbn+0xe0>)
 801cf5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf5e:	e03a      	b.n	801cfd6 <scalbn+0xae>
 801cf60:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801cf64:	428a      	cmp	r2, r1
 801cf66:	d10c      	bne.n	801cf82 <scalbn+0x5a>
 801cf68:	ee10 2a10 	vmov	r2, s0
 801cf6c:	4620      	mov	r0, r4
 801cf6e:	4629      	mov	r1, r5
 801cf70:	f7e3 f98c 	bl	800028c <__adddf3>
 801cf74:	4604      	mov	r4, r0
 801cf76:	460d      	mov	r5, r1
 801cf78:	e019      	b.n	801cfae <scalbn+0x86>
 801cf7a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801cf7e:	460b      	mov	r3, r1
 801cf80:	3a36      	subs	r2, #54	; 0x36
 801cf82:	4432      	add	r2, r6
 801cf84:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801cf88:	428a      	cmp	r2, r1
 801cf8a:	dd08      	ble.n	801cf9e <scalbn+0x76>
 801cf8c:	2d00      	cmp	r5, #0
 801cf8e:	a120      	add	r1, pc, #128	; (adr r1, 801d010 <scalbn+0xe8>)
 801cf90:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cf94:	da1c      	bge.n	801cfd0 <scalbn+0xa8>
 801cf96:	a120      	add	r1, pc, #128	; (adr r1, 801d018 <scalbn+0xf0>)
 801cf98:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cf9c:	e018      	b.n	801cfd0 <scalbn+0xa8>
 801cf9e:	2a00      	cmp	r2, #0
 801cfa0:	dd08      	ble.n	801cfb4 <scalbn+0x8c>
 801cfa2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801cfa6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801cfaa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801cfae:	ec45 4b10 	vmov	d0, r4, r5
 801cfb2:	bd70      	pop	{r4, r5, r6, pc}
 801cfb4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801cfb8:	da19      	bge.n	801cfee <scalbn+0xc6>
 801cfba:	f24c 3350 	movw	r3, #50000	; 0xc350
 801cfbe:	429e      	cmp	r6, r3
 801cfc0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801cfc4:	dd0a      	ble.n	801cfdc <scalbn+0xb4>
 801cfc6:	a112      	add	r1, pc, #72	; (adr r1, 801d010 <scalbn+0xe8>)
 801cfc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cfcc:	2b00      	cmp	r3, #0
 801cfce:	d1e2      	bne.n	801cf96 <scalbn+0x6e>
 801cfd0:	a30f      	add	r3, pc, #60	; (adr r3, 801d010 <scalbn+0xe8>)
 801cfd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cfd6:	f7e3 fb0f 	bl	80005f8 <__aeabi_dmul>
 801cfda:	e7cb      	b.n	801cf74 <scalbn+0x4c>
 801cfdc:	a10a      	add	r1, pc, #40	; (adr r1, 801d008 <scalbn+0xe0>)
 801cfde:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cfe2:	2b00      	cmp	r3, #0
 801cfe4:	d0b8      	beq.n	801cf58 <scalbn+0x30>
 801cfe6:	a10e      	add	r1, pc, #56	; (adr r1, 801d020 <scalbn+0xf8>)
 801cfe8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cfec:	e7b4      	b.n	801cf58 <scalbn+0x30>
 801cfee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801cff2:	3236      	adds	r2, #54	; 0x36
 801cff4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801cff8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801cffc:	4620      	mov	r0, r4
 801cffe:	4b0c      	ldr	r3, [pc, #48]	; (801d030 <scalbn+0x108>)
 801d000:	2200      	movs	r2, #0
 801d002:	e7e8      	b.n	801cfd6 <scalbn+0xae>
 801d004:	f3af 8000 	nop.w
 801d008:	c2f8f359 	.word	0xc2f8f359
 801d00c:	01a56e1f 	.word	0x01a56e1f
 801d010:	8800759c 	.word	0x8800759c
 801d014:	7e37e43c 	.word	0x7e37e43c
 801d018:	8800759c 	.word	0x8800759c
 801d01c:	fe37e43c 	.word	0xfe37e43c
 801d020:	c2f8f359 	.word	0xc2f8f359
 801d024:	81a56e1f 	.word	0x81a56e1f
 801d028:	43500000 	.word	0x43500000
 801d02c:	ffff3cb0 	.word	0xffff3cb0
 801d030:	3c900000 	.word	0x3c900000

0801d034 <__assert_func>:
 801d034:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d036:	4614      	mov	r4, r2
 801d038:	461a      	mov	r2, r3
 801d03a:	4b09      	ldr	r3, [pc, #36]	; (801d060 <__assert_func+0x2c>)
 801d03c:	681b      	ldr	r3, [r3, #0]
 801d03e:	4605      	mov	r5, r0
 801d040:	68d8      	ldr	r0, [r3, #12]
 801d042:	b14c      	cbz	r4, 801d058 <__assert_func+0x24>
 801d044:	4b07      	ldr	r3, [pc, #28]	; (801d064 <__assert_func+0x30>)
 801d046:	9100      	str	r1, [sp, #0]
 801d048:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801d04c:	4906      	ldr	r1, [pc, #24]	; (801d068 <__assert_func+0x34>)
 801d04e:	462b      	mov	r3, r5
 801d050:	f000 f814 	bl	801d07c <fiprintf>
 801d054:	f000 fc0c 	bl	801d870 <abort>
 801d058:	4b04      	ldr	r3, [pc, #16]	; (801d06c <__assert_func+0x38>)
 801d05a:	461c      	mov	r4, r3
 801d05c:	e7f3      	b.n	801d046 <__assert_func+0x12>
 801d05e:	bf00      	nop
 801d060:	20000188 	.word	0x20000188
 801d064:	080290e0 	.word	0x080290e0
 801d068:	080290ed 	.word	0x080290ed
 801d06c:	0802911b 	.word	0x0802911b

0801d070 <__errno>:
 801d070:	4b01      	ldr	r3, [pc, #4]	; (801d078 <__errno+0x8>)
 801d072:	6818      	ldr	r0, [r3, #0]
 801d074:	4770      	bx	lr
 801d076:	bf00      	nop
 801d078:	20000188 	.word	0x20000188

0801d07c <fiprintf>:
 801d07c:	b40e      	push	{r1, r2, r3}
 801d07e:	b503      	push	{r0, r1, lr}
 801d080:	4601      	mov	r1, r0
 801d082:	ab03      	add	r3, sp, #12
 801d084:	4805      	ldr	r0, [pc, #20]	; (801d09c <fiprintf+0x20>)
 801d086:	f853 2b04 	ldr.w	r2, [r3], #4
 801d08a:	6800      	ldr	r0, [r0, #0]
 801d08c:	9301      	str	r3, [sp, #4]
 801d08e:	f000 f86b 	bl	801d168 <_vfiprintf_r>
 801d092:	b002      	add	sp, #8
 801d094:	f85d eb04 	ldr.w	lr, [sp], #4
 801d098:	b003      	add	sp, #12
 801d09a:	4770      	bx	lr
 801d09c:	20000188 	.word	0x20000188

0801d0a0 <__libc_init_array>:
 801d0a0:	b570      	push	{r4, r5, r6, lr}
 801d0a2:	4d0d      	ldr	r5, [pc, #52]	; (801d0d8 <__libc_init_array+0x38>)
 801d0a4:	4c0d      	ldr	r4, [pc, #52]	; (801d0dc <__libc_init_array+0x3c>)
 801d0a6:	1b64      	subs	r4, r4, r5
 801d0a8:	10a4      	asrs	r4, r4, #2
 801d0aa:	2600      	movs	r6, #0
 801d0ac:	42a6      	cmp	r6, r4
 801d0ae:	d109      	bne.n	801d0c4 <__libc_init_array+0x24>
 801d0b0:	4d0b      	ldr	r5, [pc, #44]	; (801d0e0 <__libc_init_array+0x40>)
 801d0b2:	4c0c      	ldr	r4, [pc, #48]	; (801d0e4 <__libc_init_array+0x44>)
 801d0b4:	f000 fff0 	bl	801e098 <_init>
 801d0b8:	1b64      	subs	r4, r4, r5
 801d0ba:	10a4      	asrs	r4, r4, #2
 801d0bc:	2600      	movs	r6, #0
 801d0be:	42a6      	cmp	r6, r4
 801d0c0:	d105      	bne.n	801d0ce <__libc_init_array+0x2e>
 801d0c2:	bd70      	pop	{r4, r5, r6, pc}
 801d0c4:	f855 3b04 	ldr.w	r3, [r5], #4
 801d0c8:	4798      	blx	r3
 801d0ca:	3601      	adds	r6, #1
 801d0cc:	e7ee      	b.n	801d0ac <__libc_init_array+0xc>
 801d0ce:	f855 3b04 	ldr.w	r3, [r5], #4
 801d0d2:	4798      	blx	r3
 801d0d4:	3601      	adds	r6, #1
 801d0d6:	e7f2      	b.n	801d0be <__libc_init_array+0x1e>
 801d0d8:	080291bc 	.word	0x080291bc
 801d0dc:	080291bc 	.word	0x080291bc
 801d0e0:	080291bc 	.word	0x080291bc
 801d0e4:	080291c4 	.word	0x080291c4

0801d0e8 <memcpy>:
 801d0e8:	440a      	add	r2, r1
 801d0ea:	4291      	cmp	r1, r2
 801d0ec:	f100 33ff 	add.w	r3, r0, #4294967295
 801d0f0:	d100      	bne.n	801d0f4 <memcpy+0xc>
 801d0f2:	4770      	bx	lr
 801d0f4:	b510      	push	{r4, lr}
 801d0f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d0fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 801d0fe:	4291      	cmp	r1, r2
 801d100:	d1f9      	bne.n	801d0f6 <memcpy+0xe>
 801d102:	bd10      	pop	{r4, pc}

0801d104 <memset>:
 801d104:	4402      	add	r2, r0
 801d106:	4603      	mov	r3, r0
 801d108:	4293      	cmp	r3, r2
 801d10a:	d100      	bne.n	801d10e <memset+0xa>
 801d10c:	4770      	bx	lr
 801d10e:	f803 1b01 	strb.w	r1, [r3], #1
 801d112:	e7f9      	b.n	801d108 <memset+0x4>

0801d114 <__sfputc_r>:
 801d114:	6893      	ldr	r3, [r2, #8]
 801d116:	3b01      	subs	r3, #1
 801d118:	2b00      	cmp	r3, #0
 801d11a:	b410      	push	{r4}
 801d11c:	6093      	str	r3, [r2, #8]
 801d11e:	da08      	bge.n	801d132 <__sfputc_r+0x1e>
 801d120:	6994      	ldr	r4, [r2, #24]
 801d122:	42a3      	cmp	r3, r4
 801d124:	db01      	blt.n	801d12a <__sfputc_r+0x16>
 801d126:	290a      	cmp	r1, #10
 801d128:	d103      	bne.n	801d132 <__sfputc_r+0x1e>
 801d12a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d12e:	f000 badf 	b.w	801d6f0 <__swbuf_r>
 801d132:	6813      	ldr	r3, [r2, #0]
 801d134:	1c58      	adds	r0, r3, #1
 801d136:	6010      	str	r0, [r2, #0]
 801d138:	7019      	strb	r1, [r3, #0]
 801d13a:	4608      	mov	r0, r1
 801d13c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d140:	4770      	bx	lr

0801d142 <__sfputs_r>:
 801d142:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d144:	4606      	mov	r6, r0
 801d146:	460f      	mov	r7, r1
 801d148:	4614      	mov	r4, r2
 801d14a:	18d5      	adds	r5, r2, r3
 801d14c:	42ac      	cmp	r4, r5
 801d14e:	d101      	bne.n	801d154 <__sfputs_r+0x12>
 801d150:	2000      	movs	r0, #0
 801d152:	e007      	b.n	801d164 <__sfputs_r+0x22>
 801d154:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d158:	463a      	mov	r2, r7
 801d15a:	4630      	mov	r0, r6
 801d15c:	f7ff ffda 	bl	801d114 <__sfputc_r>
 801d160:	1c43      	adds	r3, r0, #1
 801d162:	d1f3      	bne.n	801d14c <__sfputs_r+0xa>
 801d164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801d168 <_vfiprintf_r>:
 801d168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d16c:	460d      	mov	r5, r1
 801d16e:	b09d      	sub	sp, #116	; 0x74
 801d170:	4614      	mov	r4, r2
 801d172:	4698      	mov	r8, r3
 801d174:	4606      	mov	r6, r0
 801d176:	b118      	cbz	r0, 801d180 <_vfiprintf_r+0x18>
 801d178:	6983      	ldr	r3, [r0, #24]
 801d17a:	b90b      	cbnz	r3, 801d180 <_vfiprintf_r+0x18>
 801d17c:	f000 fc9a 	bl	801dab4 <__sinit>
 801d180:	4b89      	ldr	r3, [pc, #548]	; (801d3a8 <_vfiprintf_r+0x240>)
 801d182:	429d      	cmp	r5, r3
 801d184:	d11b      	bne.n	801d1be <_vfiprintf_r+0x56>
 801d186:	6875      	ldr	r5, [r6, #4]
 801d188:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d18a:	07d9      	lsls	r1, r3, #31
 801d18c:	d405      	bmi.n	801d19a <_vfiprintf_r+0x32>
 801d18e:	89ab      	ldrh	r3, [r5, #12]
 801d190:	059a      	lsls	r2, r3, #22
 801d192:	d402      	bmi.n	801d19a <_vfiprintf_r+0x32>
 801d194:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d196:	f000 fd2b 	bl	801dbf0 <__retarget_lock_acquire_recursive>
 801d19a:	89ab      	ldrh	r3, [r5, #12]
 801d19c:	071b      	lsls	r3, r3, #28
 801d19e:	d501      	bpl.n	801d1a4 <_vfiprintf_r+0x3c>
 801d1a0:	692b      	ldr	r3, [r5, #16]
 801d1a2:	b9eb      	cbnz	r3, 801d1e0 <_vfiprintf_r+0x78>
 801d1a4:	4629      	mov	r1, r5
 801d1a6:	4630      	mov	r0, r6
 801d1a8:	f000 faf4 	bl	801d794 <__swsetup_r>
 801d1ac:	b1c0      	cbz	r0, 801d1e0 <_vfiprintf_r+0x78>
 801d1ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d1b0:	07dc      	lsls	r4, r3, #31
 801d1b2:	d50e      	bpl.n	801d1d2 <_vfiprintf_r+0x6a>
 801d1b4:	f04f 30ff 	mov.w	r0, #4294967295
 801d1b8:	b01d      	add	sp, #116	; 0x74
 801d1ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d1be:	4b7b      	ldr	r3, [pc, #492]	; (801d3ac <_vfiprintf_r+0x244>)
 801d1c0:	429d      	cmp	r5, r3
 801d1c2:	d101      	bne.n	801d1c8 <_vfiprintf_r+0x60>
 801d1c4:	68b5      	ldr	r5, [r6, #8]
 801d1c6:	e7df      	b.n	801d188 <_vfiprintf_r+0x20>
 801d1c8:	4b79      	ldr	r3, [pc, #484]	; (801d3b0 <_vfiprintf_r+0x248>)
 801d1ca:	429d      	cmp	r5, r3
 801d1cc:	bf08      	it	eq
 801d1ce:	68f5      	ldreq	r5, [r6, #12]
 801d1d0:	e7da      	b.n	801d188 <_vfiprintf_r+0x20>
 801d1d2:	89ab      	ldrh	r3, [r5, #12]
 801d1d4:	0598      	lsls	r0, r3, #22
 801d1d6:	d4ed      	bmi.n	801d1b4 <_vfiprintf_r+0x4c>
 801d1d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d1da:	f000 fd0a 	bl	801dbf2 <__retarget_lock_release_recursive>
 801d1de:	e7e9      	b.n	801d1b4 <_vfiprintf_r+0x4c>
 801d1e0:	2300      	movs	r3, #0
 801d1e2:	9309      	str	r3, [sp, #36]	; 0x24
 801d1e4:	2320      	movs	r3, #32
 801d1e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d1ea:	f8cd 800c 	str.w	r8, [sp, #12]
 801d1ee:	2330      	movs	r3, #48	; 0x30
 801d1f0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801d3b4 <_vfiprintf_r+0x24c>
 801d1f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d1f8:	f04f 0901 	mov.w	r9, #1
 801d1fc:	4623      	mov	r3, r4
 801d1fe:	469a      	mov	sl, r3
 801d200:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d204:	b10a      	cbz	r2, 801d20a <_vfiprintf_r+0xa2>
 801d206:	2a25      	cmp	r2, #37	; 0x25
 801d208:	d1f9      	bne.n	801d1fe <_vfiprintf_r+0x96>
 801d20a:	ebba 0b04 	subs.w	fp, sl, r4
 801d20e:	d00b      	beq.n	801d228 <_vfiprintf_r+0xc0>
 801d210:	465b      	mov	r3, fp
 801d212:	4622      	mov	r2, r4
 801d214:	4629      	mov	r1, r5
 801d216:	4630      	mov	r0, r6
 801d218:	f7ff ff93 	bl	801d142 <__sfputs_r>
 801d21c:	3001      	adds	r0, #1
 801d21e:	f000 80aa 	beq.w	801d376 <_vfiprintf_r+0x20e>
 801d222:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d224:	445a      	add	r2, fp
 801d226:	9209      	str	r2, [sp, #36]	; 0x24
 801d228:	f89a 3000 	ldrb.w	r3, [sl]
 801d22c:	2b00      	cmp	r3, #0
 801d22e:	f000 80a2 	beq.w	801d376 <_vfiprintf_r+0x20e>
 801d232:	2300      	movs	r3, #0
 801d234:	f04f 32ff 	mov.w	r2, #4294967295
 801d238:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d23c:	f10a 0a01 	add.w	sl, sl, #1
 801d240:	9304      	str	r3, [sp, #16]
 801d242:	9307      	str	r3, [sp, #28]
 801d244:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d248:	931a      	str	r3, [sp, #104]	; 0x68
 801d24a:	4654      	mov	r4, sl
 801d24c:	2205      	movs	r2, #5
 801d24e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d252:	4858      	ldr	r0, [pc, #352]	; (801d3b4 <_vfiprintf_r+0x24c>)
 801d254:	f7e2 ffc4 	bl	80001e0 <memchr>
 801d258:	9a04      	ldr	r2, [sp, #16]
 801d25a:	b9d8      	cbnz	r0, 801d294 <_vfiprintf_r+0x12c>
 801d25c:	06d1      	lsls	r1, r2, #27
 801d25e:	bf44      	itt	mi
 801d260:	2320      	movmi	r3, #32
 801d262:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d266:	0713      	lsls	r3, r2, #28
 801d268:	bf44      	itt	mi
 801d26a:	232b      	movmi	r3, #43	; 0x2b
 801d26c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d270:	f89a 3000 	ldrb.w	r3, [sl]
 801d274:	2b2a      	cmp	r3, #42	; 0x2a
 801d276:	d015      	beq.n	801d2a4 <_vfiprintf_r+0x13c>
 801d278:	9a07      	ldr	r2, [sp, #28]
 801d27a:	4654      	mov	r4, sl
 801d27c:	2000      	movs	r0, #0
 801d27e:	f04f 0c0a 	mov.w	ip, #10
 801d282:	4621      	mov	r1, r4
 801d284:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d288:	3b30      	subs	r3, #48	; 0x30
 801d28a:	2b09      	cmp	r3, #9
 801d28c:	d94e      	bls.n	801d32c <_vfiprintf_r+0x1c4>
 801d28e:	b1b0      	cbz	r0, 801d2be <_vfiprintf_r+0x156>
 801d290:	9207      	str	r2, [sp, #28]
 801d292:	e014      	b.n	801d2be <_vfiprintf_r+0x156>
 801d294:	eba0 0308 	sub.w	r3, r0, r8
 801d298:	fa09 f303 	lsl.w	r3, r9, r3
 801d29c:	4313      	orrs	r3, r2
 801d29e:	9304      	str	r3, [sp, #16]
 801d2a0:	46a2      	mov	sl, r4
 801d2a2:	e7d2      	b.n	801d24a <_vfiprintf_r+0xe2>
 801d2a4:	9b03      	ldr	r3, [sp, #12]
 801d2a6:	1d19      	adds	r1, r3, #4
 801d2a8:	681b      	ldr	r3, [r3, #0]
 801d2aa:	9103      	str	r1, [sp, #12]
 801d2ac:	2b00      	cmp	r3, #0
 801d2ae:	bfbb      	ittet	lt
 801d2b0:	425b      	neglt	r3, r3
 801d2b2:	f042 0202 	orrlt.w	r2, r2, #2
 801d2b6:	9307      	strge	r3, [sp, #28]
 801d2b8:	9307      	strlt	r3, [sp, #28]
 801d2ba:	bfb8      	it	lt
 801d2bc:	9204      	strlt	r2, [sp, #16]
 801d2be:	7823      	ldrb	r3, [r4, #0]
 801d2c0:	2b2e      	cmp	r3, #46	; 0x2e
 801d2c2:	d10c      	bne.n	801d2de <_vfiprintf_r+0x176>
 801d2c4:	7863      	ldrb	r3, [r4, #1]
 801d2c6:	2b2a      	cmp	r3, #42	; 0x2a
 801d2c8:	d135      	bne.n	801d336 <_vfiprintf_r+0x1ce>
 801d2ca:	9b03      	ldr	r3, [sp, #12]
 801d2cc:	1d1a      	adds	r2, r3, #4
 801d2ce:	681b      	ldr	r3, [r3, #0]
 801d2d0:	9203      	str	r2, [sp, #12]
 801d2d2:	2b00      	cmp	r3, #0
 801d2d4:	bfb8      	it	lt
 801d2d6:	f04f 33ff 	movlt.w	r3, #4294967295
 801d2da:	3402      	adds	r4, #2
 801d2dc:	9305      	str	r3, [sp, #20]
 801d2de:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801d3c4 <_vfiprintf_r+0x25c>
 801d2e2:	7821      	ldrb	r1, [r4, #0]
 801d2e4:	2203      	movs	r2, #3
 801d2e6:	4650      	mov	r0, sl
 801d2e8:	f7e2 ff7a 	bl	80001e0 <memchr>
 801d2ec:	b140      	cbz	r0, 801d300 <_vfiprintf_r+0x198>
 801d2ee:	2340      	movs	r3, #64	; 0x40
 801d2f0:	eba0 000a 	sub.w	r0, r0, sl
 801d2f4:	fa03 f000 	lsl.w	r0, r3, r0
 801d2f8:	9b04      	ldr	r3, [sp, #16]
 801d2fa:	4303      	orrs	r3, r0
 801d2fc:	3401      	adds	r4, #1
 801d2fe:	9304      	str	r3, [sp, #16]
 801d300:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d304:	482c      	ldr	r0, [pc, #176]	; (801d3b8 <_vfiprintf_r+0x250>)
 801d306:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d30a:	2206      	movs	r2, #6
 801d30c:	f7e2 ff68 	bl	80001e0 <memchr>
 801d310:	2800      	cmp	r0, #0
 801d312:	d03f      	beq.n	801d394 <_vfiprintf_r+0x22c>
 801d314:	4b29      	ldr	r3, [pc, #164]	; (801d3bc <_vfiprintf_r+0x254>)
 801d316:	bb1b      	cbnz	r3, 801d360 <_vfiprintf_r+0x1f8>
 801d318:	9b03      	ldr	r3, [sp, #12]
 801d31a:	3307      	adds	r3, #7
 801d31c:	f023 0307 	bic.w	r3, r3, #7
 801d320:	3308      	adds	r3, #8
 801d322:	9303      	str	r3, [sp, #12]
 801d324:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d326:	443b      	add	r3, r7
 801d328:	9309      	str	r3, [sp, #36]	; 0x24
 801d32a:	e767      	b.n	801d1fc <_vfiprintf_r+0x94>
 801d32c:	fb0c 3202 	mla	r2, ip, r2, r3
 801d330:	460c      	mov	r4, r1
 801d332:	2001      	movs	r0, #1
 801d334:	e7a5      	b.n	801d282 <_vfiprintf_r+0x11a>
 801d336:	2300      	movs	r3, #0
 801d338:	3401      	adds	r4, #1
 801d33a:	9305      	str	r3, [sp, #20]
 801d33c:	4619      	mov	r1, r3
 801d33e:	f04f 0c0a 	mov.w	ip, #10
 801d342:	4620      	mov	r0, r4
 801d344:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d348:	3a30      	subs	r2, #48	; 0x30
 801d34a:	2a09      	cmp	r2, #9
 801d34c:	d903      	bls.n	801d356 <_vfiprintf_r+0x1ee>
 801d34e:	2b00      	cmp	r3, #0
 801d350:	d0c5      	beq.n	801d2de <_vfiprintf_r+0x176>
 801d352:	9105      	str	r1, [sp, #20]
 801d354:	e7c3      	b.n	801d2de <_vfiprintf_r+0x176>
 801d356:	fb0c 2101 	mla	r1, ip, r1, r2
 801d35a:	4604      	mov	r4, r0
 801d35c:	2301      	movs	r3, #1
 801d35e:	e7f0      	b.n	801d342 <_vfiprintf_r+0x1da>
 801d360:	ab03      	add	r3, sp, #12
 801d362:	9300      	str	r3, [sp, #0]
 801d364:	462a      	mov	r2, r5
 801d366:	4b16      	ldr	r3, [pc, #88]	; (801d3c0 <_vfiprintf_r+0x258>)
 801d368:	a904      	add	r1, sp, #16
 801d36a:	4630      	mov	r0, r6
 801d36c:	f3af 8000 	nop.w
 801d370:	4607      	mov	r7, r0
 801d372:	1c78      	adds	r0, r7, #1
 801d374:	d1d6      	bne.n	801d324 <_vfiprintf_r+0x1bc>
 801d376:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d378:	07d9      	lsls	r1, r3, #31
 801d37a:	d405      	bmi.n	801d388 <_vfiprintf_r+0x220>
 801d37c:	89ab      	ldrh	r3, [r5, #12]
 801d37e:	059a      	lsls	r2, r3, #22
 801d380:	d402      	bmi.n	801d388 <_vfiprintf_r+0x220>
 801d382:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d384:	f000 fc35 	bl	801dbf2 <__retarget_lock_release_recursive>
 801d388:	89ab      	ldrh	r3, [r5, #12]
 801d38a:	065b      	lsls	r3, r3, #25
 801d38c:	f53f af12 	bmi.w	801d1b4 <_vfiprintf_r+0x4c>
 801d390:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d392:	e711      	b.n	801d1b8 <_vfiprintf_r+0x50>
 801d394:	ab03      	add	r3, sp, #12
 801d396:	9300      	str	r3, [sp, #0]
 801d398:	462a      	mov	r2, r5
 801d39a:	4b09      	ldr	r3, [pc, #36]	; (801d3c0 <_vfiprintf_r+0x258>)
 801d39c:	a904      	add	r1, sp, #16
 801d39e:	4630      	mov	r0, r6
 801d3a0:	f000 f880 	bl	801d4a4 <_printf_i>
 801d3a4:	e7e4      	b.n	801d370 <_vfiprintf_r+0x208>
 801d3a6:	bf00      	nop
 801d3a8:	08029174 	.word	0x08029174
 801d3ac:	08029194 	.word	0x08029194
 801d3b0:	08029154 	.word	0x08029154
 801d3b4:	08029120 	.word	0x08029120
 801d3b8:	0802912a 	.word	0x0802912a
 801d3bc:	00000000 	.word	0x00000000
 801d3c0:	0801d143 	.word	0x0801d143
 801d3c4:	08029126 	.word	0x08029126

0801d3c8 <_printf_common>:
 801d3c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d3cc:	4616      	mov	r6, r2
 801d3ce:	4699      	mov	r9, r3
 801d3d0:	688a      	ldr	r2, [r1, #8]
 801d3d2:	690b      	ldr	r3, [r1, #16]
 801d3d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801d3d8:	4293      	cmp	r3, r2
 801d3da:	bfb8      	it	lt
 801d3dc:	4613      	movlt	r3, r2
 801d3de:	6033      	str	r3, [r6, #0]
 801d3e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801d3e4:	4607      	mov	r7, r0
 801d3e6:	460c      	mov	r4, r1
 801d3e8:	b10a      	cbz	r2, 801d3ee <_printf_common+0x26>
 801d3ea:	3301      	adds	r3, #1
 801d3ec:	6033      	str	r3, [r6, #0]
 801d3ee:	6823      	ldr	r3, [r4, #0]
 801d3f0:	0699      	lsls	r1, r3, #26
 801d3f2:	bf42      	ittt	mi
 801d3f4:	6833      	ldrmi	r3, [r6, #0]
 801d3f6:	3302      	addmi	r3, #2
 801d3f8:	6033      	strmi	r3, [r6, #0]
 801d3fa:	6825      	ldr	r5, [r4, #0]
 801d3fc:	f015 0506 	ands.w	r5, r5, #6
 801d400:	d106      	bne.n	801d410 <_printf_common+0x48>
 801d402:	f104 0a19 	add.w	sl, r4, #25
 801d406:	68e3      	ldr	r3, [r4, #12]
 801d408:	6832      	ldr	r2, [r6, #0]
 801d40a:	1a9b      	subs	r3, r3, r2
 801d40c:	42ab      	cmp	r3, r5
 801d40e:	dc26      	bgt.n	801d45e <_printf_common+0x96>
 801d410:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801d414:	1e13      	subs	r3, r2, #0
 801d416:	6822      	ldr	r2, [r4, #0]
 801d418:	bf18      	it	ne
 801d41a:	2301      	movne	r3, #1
 801d41c:	0692      	lsls	r2, r2, #26
 801d41e:	d42b      	bmi.n	801d478 <_printf_common+0xb0>
 801d420:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801d424:	4649      	mov	r1, r9
 801d426:	4638      	mov	r0, r7
 801d428:	47c0      	blx	r8
 801d42a:	3001      	adds	r0, #1
 801d42c:	d01e      	beq.n	801d46c <_printf_common+0xa4>
 801d42e:	6823      	ldr	r3, [r4, #0]
 801d430:	68e5      	ldr	r5, [r4, #12]
 801d432:	6832      	ldr	r2, [r6, #0]
 801d434:	f003 0306 	and.w	r3, r3, #6
 801d438:	2b04      	cmp	r3, #4
 801d43a:	bf08      	it	eq
 801d43c:	1aad      	subeq	r5, r5, r2
 801d43e:	68a3      	ldr	r3, [r4, #8]
 801d440:	6922      	ldr	r2, [r4, #16]
 801d442:	bf0c      	ite	eq
 801d444:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801d448:	2500      	movne	r5, #0
 801d44a:	4293      	cmp	r3, r2
 801d44c:	bfc4      	itt	gt
 801d44e:	1a9b      	subgt	r3, r3, r2
 801d450:	18ed      	addgt	r5, r5, r3
 801d452:	2600      	movs	r6, #0
 801d454:	341a      	adds	r4, #26
 801d456:	42b5      	cmp	r5, r6
 801d458:	d11a      	bne.n	801d490 <_printf_common+0xc8>
 801d45a:	2000      	movs	r0, #0
 801d45c:	e008      	b.n	801d470 <_printf_common+0xa8>
 801d45e:	2301      	movs	r3, #1
 801d460:	4652      	mov	r2, sl
 801d462:	4649      	mov	r1, r9
 801d464:	4638      	mov	r0, r7
 801d466:	47c0      	blx	r8
 801d468:	3001      	adds	r0, #1
 801d46a:	d103      	bne.n	801d474 <_printf_common+0xac>
 801d46c:	f04f 30ff 	mov.w	r0, #4294967295
 801d470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d474:	3501      	adds	r5, #1
 801d476:	e7c6      	b.n	801d406 <_printf_common+0x3e>
 801d478:	18e1      	adds	r1, r4, r3
 801d47a:	1c5a      	adds	r2, r3, #1
 801d47c:	2030      	movs	r0, #48	; 0x30
 801d47e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801d482:	4422      	add	r2, r4
 801d484:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801d488:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801d48c:	3302      	adds	r3, #2
 801d48e:	e7c7      	b.n	801d420 <_printf_common+0x58>
 801d490:	2301      	movs	r3, #1
 801d492:	4622      	mov	r2, r4
 801d494:	4649      	mov	r1, r9
 801d496:	4638      	mov	r0, r7
 801d498:	47c0      	blx	r8
 801d49a:	3001      	adds	r0, #1
 801d49c:	d0e6      	beq.n	801d46c <_printf_common+0xa4>
 801d49e:	3601      	adds	r6, #1
 801d4a0:	e7d9      	b.n	801d456 <_printf_common+0x8e>
	...

0801d4a4 <_printf_i>:
 801d4a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d4a8:	7e0f      	ldrb	r7, [r1, #24]
 801d4aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801d4ac:	2f78      	cmp	r7, #120	; 0x78
 801d4ae:	4691      	mov	r9, r2
 801d4b0:	4680      	mov	r8, r0
 801d4b2:	460c      	mov	r4, r1
 801d4b4:	469a      	mov	sl, r3
 801d4b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801d4ba:	d807      	bhi.n	801d4cc <_printf_i+0x28>
 801d4bc:	2f62      	cmp	r7, #98	; 0x62
 801d4be:	d80a      	bhi.n	801d4d6 <_printf_i+0x32>
 801d4c0:	2f00      	cmp	r7, #0
 801d4c2:	f000 80d8 	beq.w	801d676 <_printf_i+0x1d2>
 801d4c6:	2f58      	cmp	r7, #88	; 0x58
 801d4c8:	f000 80a3 	beq.w	801d612 <_printf_i+0x16e>
 801d4cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801d4d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801d4d4:	e03a      	b.n	801d54c <_printf_i+0xa8>
 801d4d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801d4da:	2b15      	cmp	r3, #21
 801d4dc:	d8f6      	bhi.n	801d4cc <_printf_i+0x28>
 801d4de:	a101      	add	r1, pc, #4	; (adr r1, 801d4e4 <_printf_i+0x40>)
 801d4e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801d4e4:	0801d53d 	.word	0x0801d53d
 801d4e8:	0801d551 	.word	0x0801d551
 801d4ec:	0801d4cd 	.word	0x0801d4cd
 801d4f0:	0801d4cd 	.word	0x0801d4cd
 801d4f4:	0801d4cd 	.word	0x0801d4cd
 801d4f8:	0801d4cd 	.word	0x0801d4cd
 801d4fc:	0801d551 	.word	0x0801d551
 801d500:	0801d4cd 	.word	0x0801d4cd
 801d504:	0801d4cd 	.word	0x0801d4cd
 801d508:	0801d4cd 	.word	0x0801d4cd
 801d50c:	0801d4cd 	.word	0x0801d4cd
 801d510:	0801d65d 	.word	0x0801d65d
 801d514:	0801d581 	.word	0x0801d581
 801d518:	0801d63f 	.word	0x0801d63f
 801d51c:	0801d4cd 	.word	0x0801d4cd
 801d520:	0801d4cd 	.word	0x0801d4cd
 801d524:	0801d67f 	.word	0x0801d67f
 801d528:	0801d4cd 	.word	0x0801d4cd
 801d52c:	0801d581 	.word	0x0801d581
 801d530:	0801d4cd 	.word	0x0801d4cd
 801d534:	0801d4cd 	.word	0x0801d4cd
 801d538:	0801d647 	.word	0x0801d647
 801d53c:	682b      	ldr	r3, [r5, #0]
 801d53e:	1d1a      	adds	r2, r3, #4
 801d540:	681b      	ldr	r3, [r3, #0]
 801d542:	602a      	str	r2, [r5, #0]
 801d544:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801d548:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801d54c:	2301      	movs	r3, #1
 801d54e:	e0a3      	b.n	801d698 <_printf_i+0x1f4>
 801d550:	6820      	ldr	r0, [r4, #0]
 801d552:	6829      	ldr	r1, [r5, #0]
 801d554:	0606      	lsls	r6, r0, #24
 801d556:	f101 0304 	add.w	r3, r1, #4
 801d55a:	d50a      	bpl.n	801d572 <_printf_i+0xce>
 801d55c:	680e      	ldr	r6, [r1, #0]
 801d55e:	602b      	str	r3, [r5, #0]
 801d560:	2e00      	cmp	r6, #0
 801d562:	da03      	bge.n	801d56c <_printf_i+0xc8>
 801d564:	232d      	movs	r3, #45	; 0x2d
 801d566:	4276      	negs	r6, r6
 801d568:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d56c:	485e      	ldr	r0, [pc, #376]	; (801d6e8 <_printf_i+0x244>)
 801d56e:	230a      	movs	r3, #10
 801d570:	e019      	b.n	801d5a6 <_printf_i+0x102>
 801d572:	680e      	ldr	r6, [r1, #0]
 801d574:	602b      	str	r3, [r5, #0]
 801d576:	f010 0f40 	tst.w	r0, #64	; 0x40
 801d57a:	bf18      	it	ne
 801d57c:	b236      	sxthne	r6, r6
 801d57e:	e7ef      	b.n	801d560 <_printf_i+0xbc>
 801d580:	682b      	ldr	r3, [r5, #0]
 801d582:	6820      	ldr	r0, [r4, #0]
 801d584:	1d19      	adds	r1, r3, #4
 801d586:	6029      	str	r1, [r5, #0]
 801d588:	0601      	lsls	r1, r0, #24
 801d58a:	d501      	bpl.n	801d590 <_printf_i+0xec>
 801d58c:	681e      	ldr	r6, [r3, #0]
 801d58e:	e002      	b.n	801d596 <_printf_i+0xf2>
 801d590:	0646      	lsls	r6, r0, #25
 801d592:	d5fb      	bpl.n	801d58c <_printf_i+0xe8>
 801d594:	881e      	ldrh	r6, [r3, #0]
 801d596:	4854      	ldr	r0, [pc, #336]	; (801d6e8 <_printf_i+0x244>)
 801d598:	2f6f      	cmp	r7, #111	; 0x6f
 801d59a:	bf0c      	ite	eq
 801d59c:	2308      	moveq	r3, #8
 801d59e:	230a      	movne	r3, #10
 801d5a0:	2100      	movs	r1, #0
 801d5a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801d5a6:	6865      	ldr	r5, [r4, #4]
 801d5a8:	60a5      	str	r5, [r4, #8]
 801d5aa:	2d00      	cmp	r5, #0
 801d5ac:	bfa2      	ittt	ge
 801d5ae:	6821      	ldrge	r1, [r4, #0]
 801d5b0:	f021 0104 	bicge.w	r1, r1, #4
 801d5b4:	6021      	strge	r1, [r4, #0]
 801d5b6:	b90e      	cbnz	r6, 801d5bc <_printf_i+0x118>
 801d5b8:	2d00      	cmp	r5, #0
 801d5ba:	d04d      	beq.n	801d658 <_printf_i+0x1b4>
 801d5bc:	4615      	mov	r5, r2
 801d5be:	fbb6 f1f3 	udiv	r1, r6, r3
 801d5c2:	fb03 6711 	mls	r7, r3, r1, r6
 801d5c6:	5dc7      	ldrb	r7, [r0, r7]
 801d5c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801d5cc:	4637      	mov	r7, r6
 801d5ce:	42bb      	cmp	r3, r7
 801d5d0:	460e      	mov	r6, r1
 801d5d2:	d9f4      	bls.n	801d5be <_printf_i+0x11a>
 801d5d4:	2b08      	cmp	r3, #8
 801d5d6:	d10b      	bne.n	801d5f0 <_printf_i+0x14c>
 801d5d8:	6823      	ldr	r3, [r4, #0]
 801d5da:	07de      	lsls	r6, r3, #31
 801d5dc:	d508      	bpl.n	801d5f0 <_printf_i+0x14c>
 801d5de:	6923      	ldr	r3, [r4, #16]
 801d5e0:	6861      	ldr	r1, [r4, #4]
 801d5e2:	4299      	cmp	r1, r3
 801d5e4:	bfde      	ittt	le
 801d5e6:	2330      	movle	r3, #48	; 0x30
 801d5e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 801d5ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 801d5f0:	1b52      	subs	r2, r2, r5
 801d5f2:	6122      	str	r2, [r4, #16]
 801d5f4:	f8cd a000 	str.w	sl, [sp]
 801d5f8:	464b      	mov	r3, r9
 801d5fa:	aa03      	add	r2, sp, #12
 801d5fc:	4621      	mov	r1, r4
 801d5fe:	4640      	mov	r0, r8
 801d600:	f7ff fee2 	bl	801d3c8 <_printf_common>
 801d604:	3001      	adds	r0, #1
 801d606:	d14c      	bne.n	801d6a2 <_printf_i+0x1fe>
 801d608:	f04f 30ff 	mov.w	r0, #4294967295
 801d60c:	b004      	add	sp, #16
 801d60e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d612:	4835      	ldr	r0, [pc, #212]	; (801d6e8 <_printf_i+0x244>)
 801d614:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801d618:	6829      	ldr	r1, [r5, #0]
 801d61a:	6823      	ldr	r3, [r4, #0]
 801d61c:	f851 6b04 	ldr.w	r6, [r1], #4
 801d620:	6029      	str	r1, [r5, #0]
 801d622:	061d      	lsls	r5, r3, #24
 801d624:	d514      	bpl.n	801d650 <_printf_i+0x1ac>
 801d626:	07df      	lsls	r7, r3, #31
 801d628:	bf44      	itt	mi
 801d62a:	f043 0320 	orrmi.w	r3, r3, #32
 801d62e:	6023      	strmi	r3, [r4, #0]
 801d630:	b91e      	cbnz	r6, 801d63a <_printf_i+0x196>
 801d632:	6823      	ldr	r3, [r4, #0]
 801d634:	f023 0320 	bic.w	r3, r3, #32
 801d638:	6023      	str	r3, [r4, #0]
 801d63a:	2310      	movs	r3, #16
 801d63c:	e7b0      	b.n	801d5a0 <_printf_i+0xfc>
 801d63e:	6823      	ldr	r3, [r4, #0]
 801d640:	f043 0320 	orr.w	r3, r3, #32
 801d644:	6023      	str	r3, [r4, #0]
 801d646:	2378      	movs	r3, #120	; 0x78
 801d648:	4828      	ldr	r0, [pc, #160]	; (801d6ec <_printf_i+0x248>)
 801d64a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801d64e:	e7e3      	b.n	801d618 <_printf_i+0x174>
 801d650:	0659      	lsls	r1, r3, #25
 801d652:	bf48      	it	mi
 801d654:	b2b6      	uxthmi	r6, r6
 801d656:	e7e6      	b.n	801d626 <_printf_i+0x182>
 801d658:	4615      	mov	r5, r2
 801d65a:	e7bb      	b.n	801d5d4 <_printf_i+0x130>
 801d65c:	682b      	ldr	r3, [r5, #0]
 801d65e:	6826      	ldr	r6, [r4, #0]
 801d660:	6961      	ldr	r1, [r4, #20]
 801d662:	1d18      	adds	r0, r3, #4
 801d664:	6028      	str	r0, [r5, #0]
 801d666:	0635      	lsls	r5, r6, #24
 801d668:	681b      	ldr	r3, [r3, #0]
 801d66a:	d501      	bpl.n	801d670 <_printf_i+0x1cc>
 801d66c:	6019      	str	r1, [r3, #0]
 801d66e:	e002      	b.n	801d676 <_printf_i+0x1d2>
 801d670:	0670      	lsls	r0, r6, #25
 801d672:	d5fb      	bpl.n	801d66c <_printf_i+0x1c8>
 801d674:	8019      	strh	r1, [r3, #0]
 801d676:	2300      	movs	r3, #0
 801d678:	6123      	str	r3, [r4, #16]
 801d67a:	4615      	mov	r5, r2
 801d67c:	e7ba      	b.n	801d5f4 <_printf_i+0x150>
 801d67e:	682b      	ldr	r3, [r5, #0]
 801d680:	1d1a      	adds	r2, r3, #4
 801d682:	602a      	str	r2, [r5, #0]
 801d684:	681d      	ldr	r5, [r3, #0]
 801d686:	6862      	ldr	r2, [r4, #4]
 801d688:	2100      	movs	r1, #0
 801d68a:	4628      	mov	r0, r5
 801d68c:	f7e2 fda8 	bl	80001e0 <memchr>
 801d690:	b108      	cbz	r0, 801d696 <_printf_i+0x1f2>
 801d692:	1b40      	subs	r0, r0, r5
 801d694:	6060      	str	r0, [r4, #4]
 801d696:	6863      	ldr	r3, [r4, #4]
 801d698:	6123      	str	r3, [r4, #16]
 801d69a:	2300      	movs	r3, #0
 801d69c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d6a0:	e7a8      	b.n	801d5f4 <_printf_i+0x150>
 801d6a2:	6923      	ldr	r3, [r4, #16]
 801d6a4:	462a      	mov	r2, r5
 801d6a6:	4649      	mov	r1, r9
 801d6a8:	4640      	mov	r0, r8
 801d6aa:	47d0      	blx	sl
 801d6ac:	3001      	adds	r0, #1
 801d6ae:	d0ab      	beq.n	801d608 <_printf_i+0x164>
 801d6b0:	6823      	ldr	r3, [r4, #0]
 801d6b2:	079b      	lsls	r3, r3, #30
 801d6b4:	d413      	bmi.n	801d6de <_printf_i+0x23a>
 801d6b6:	68e0      	ldr	r0, [r4, #12]
 801d6b8:	9b03      	ldr	r3, [sp, #12]
 801d6ba:	4298      	cmp	r0, r3
 801d6bc:	bfb8      	it	lt
 801d6be:	4618      	movlt	r0, r3
 801d6c0:	e7a4      	b.n	801d60c <_printf_i+0x168>
 801d6c2:	2301      	movs	r3, #1
 801d6c4:	4632      	mov	r2, r6
 801d6c6:	4649      	mov	r1, r9
 801d6c8:	4640      	mov	r0, r8
 801d6ca:	47d0      	blx	sl
 801d6cc:	3001      	adds	r0, #1
 801d6ce:	d09b      	beq.n	801d608 <_printf_i+0x164>
 801d6d0:	3501      	adds	r5, #1
 801d6d2:	68e3      	ldr	r3, [r4, #12]
 801d6d4:	9903      	ldr	r1, [sp, #12]
 801d6d6:	1a5b      	subs	r3, r3, r1
 801d6d8:	42ab      	cmp	r3, r5
 801d6da:	dcf2      	bgt.n	801d6c2 <_printf_i+0x21e>
 801d6dc:	e7eb      	b.n	801d6b6 <_printf_i+0x212>
 801d6de:	2500      	movs	r5, #0
 801d6e0:	f104 0619 	add.w	r6, r4, #25
 801d6e4:	e7f5      	b.n	801d6d2 <_printf_i+0x22e>
 801d6e6:	bf00      	nop
 801d6e8:	08029131 	.word	0x08029131
 801d6ec:	08029142 	.word	0x08029142

0801d6f0 <__swbuf_r>:
 801d6f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d6f2:	460e      	mov	r6, r1
 801d6f4:	4614      	mov	r4, r2
 801d6f6:	4605      	mov	r5, r0
 801d6f8:	b118      	cbz	r0, 801d702 <__swbuf_r+0x12>
 801d6fa:	6983      	ldr	r3, [r0, #24]
 801d6fc:	b90b      	cbnz	r3, 801d702 <__swbuf_r+0x12>
 801d6fe:	f000 f9d9 	bl	801dab4 <__sinit>
 801d702:	4b21      	ldr	r3, [pc, #132]	; (801d788 <__swbuf_r+0x98>)
 801d704:	429c      	cmp	r4, r3
 801d706:	d12b      	bne.n	801d760 <__swbuf_r+0x70>
 801d708:	686c      	ldr	r4, [r5, #4]
 801d70a:	69a3      	ldr	r3, [r4, #24]
 801d70c:	60a3      	str	r3, [r4, #8]
 801d70e:	89a3      	ldrh	r3, [r4, #12]
 801d710:	071a      	lsls	r2, r3, #28
 801d712:	d52f      	bpl.n	801d774 <__swbuf_r+0x84>
 801d714:	6923      	ldr	r3, [r4, #16]
 801d716:	b36b      	cbz	r3, 801d774 <__swbuf_r+0x84>
 801d718:	6923      	ldr	r3, [r4, #16]
 801d71a:	6820      	ldr	r0, [r4, #0]
 801d71c:	1ac0      	subs	r0, r0, r3
 801d71e:	6963      	ldr	r3, [r4, #20]
 801d720:	b2f6      	uxtb	r6, r6
 801d722:	4283      	cmp	r3, r0
 801d724:	4637      	mov	r7, r6
 801d726:	dc04      	bgt.n	801d732 <__swbuf_r+0x42>
 801d728:	4621      	mov	r1, r4
 801d72a:	4628      	mov	r0, r5
 801d72c:	f000 f92e 	bl	801d98c <_fflush_r>
 801d730:	bb30      	cbnz	r0, 801d780 <__swbuf_r+0x90>
 801d732:	68a3      	ldr	r3, [r4, #8]
 801d734:	3b01      	subs	r3, #1
 801d736:	60a3      	str	r3, [r4, #8]
 801d738:	6823      	ldr	r3, [r4, #0]
 801d73a:	1c5a      	adds	r2, r3, #1
 801d73c:	6022      	str	r2, [r4, #0]
 801d73e:	701e      	strb	r6, [r3, #0]
 801d740:	6963      	ldr	r3, [r4, #20]
 801d742:	3001      	adds	r0, #1
 801d744:	4283      	cmp	r3, r0
 801d746:	d004      	beq.n	801d752 <__swbuf_r+0x62>
 801d748:	89a3      	ldrh	r3, [r4, #12]
 801d74a:	07db      	lsls	r3, r3, #31
 801d74c:	d506      	bpl.n	801d75c <__swbuf_r+0x6c>
 801d74e:	2e0a      	cmp	r6, #10
 801d750:	d104      	bne.n	801d75c <__swbuf_r+0x6c>
 801d752:	4621      	mov	r1, r4
 801d754:	4628      	mov	r0, r5
 801d756:	f000 f919 	bl	801d98c <_fflush_r>
 801d75a:	b988      	cbnz	r0, 801d780 <__swbuf_r+0x90>
 801d75c:	4638      	mov	r0, r7
 801d75e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d760:	4b0a      	ldr	r3, [pc, #40]	; (801d78c <__swbuf_r+0x9c>)
 801d762:	429c      	cmp	r4, r3
 801d764:	d101      	bne.n	801d76a <__swbuf_r+0x7a>
 801d766:	68ac      	ldr	r4, [r5, #8]
 801d768:	e7cf      	b.n	801d70a <__swbuf_r+0x1a>
 801d76a:	4b09      	ldr	r3, [pc, #36]	; (801d790 <__swbuf_r+0xa0>)
 801d76c:	429c      	cmp	r4, r3
 801d76e:	bf08      	it	eq
 801d770:	68ec      	ldreq	r4, [r5, #12]
 801d772:	e7ca      	b.n	801d70a <__swbuf_r+0x1a>
 801d774:	4621      	mov	r1, r4
 801d776:	4628      	mov	r0, r5
 801d778:	f000 f80c 	bl	801d794 <__swsetup_r>
 801d77c:	2800      	cmp	r0, #0
 801d77e:	d0cb      	beq.n	801d718 <__swbuf_r+0x28>
 801d780:	f04f 37ff 	mov.w	r7, #4294967295
 801d784:	e7ea      	b.n	801d75c <__swbuf_r+0x6c>
 801d786:	bf00      	nop
 801d788:	08029174 	.word	0x08029174
 801d78c:	08029194 	.word	0x08029194
 801d790:	08029154 	.word	0x08029154

0801d794 <__swsetup_r>:
 801d794:	4b32      	ldr	r3, [pc, #200]	; (801d860 <__swsetup_r+0xcc>)
 801d796:	b570      	push	{r4, r5, r6, lr}
 801d798:	681d      	ldr	r5, [r3, #0]
 801d79a:	4606      	mov	r6, r0
 801d79c:	460c      	mov	r4, r1
 801d79e:	b125      	cbz	r5, 801d7aa <__swsetup_r+0x16>
 801d7a0:	69ab      	ldr	r3, [r5, #24]
 801d7a2:	b913      	cbnz	r3, 801d7aa <__swsetup_r+0x16>
 801d7a4:	4628      	mov	r0, r5
 801d7a6:	f000 f985 	bl	801dab4 <__sinit>
 801d7aa:	4b2e      	ldr	r3, [pc, #184]	; (801d864 <__swsetup_r+0xd0>)
 801d7ac:	429c      	cmp	r4, r3
 801d7ae:	d10f      	bne.n	801d7d0 <__swsetup_r+0x3c>
 801d7b0:	686c      	ldr	r4, [r5, #4]
 801d7b2:	89a3      	ldrh	r3, [r4, #12]
 801d7b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d7b8:	0719      	lsls	r1, r3, #28
 801d7ba:	d42c      	bmi.n	801d816 <__swsetup_r+0x82>
 801d7bc:	06dd      	lsls	r5, r3, #27
 801d7be:	d411      	bmi.n	801d7e4 <__swsetup_r+0x50>
 801d7c0:	2309      	movs	r3, #9
 801d7c2:	6033      	str	r3, [r6, #0]
 801d7c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801d7c8:	81a3      	strh	r3, [r4, #12]
 801d7ca:	f04f 30ff 	mov.w	r0, #4294967295
 801d7ce:	e03e      	b.n	801d84e <__swsetup_r+0xba>
 801d7d0:	4b25      	ldr	r3, [pc, #148]	; (801d868 <__swsetup_r+0xd4>)
 801d7d2:	429c      	cmp	r4, r3
 801d7d4:	d101      	bne.n	801d7da <__swsetup_r+0x46>
 801d7d6:	68ac      	ldr	r4, [r5, #8]
 801d7d8:	e7eb      	b.n	801d7b2 <__swsetup_r+0x1e>
 801d7da:	4b24      	ldr	r3, [pc, #144]	; (801d86c <__swsetup_r+0xd8>)
 801d7dc:	429c      	cmp	r4, r3
 801d7de:	bf08      	it	eq
 801d7e0:	68ec      	ldreq	r4, [r5, #12]
 801d7e2:	e7e6      	b.n	801d7b2 <__swsetup_r+0x1e>
 801d7e4:	0758      	lsls	r0, r3, #29
 801d7e6:	d512      	bpl.n	801d80e <__swsetup_r+0x7a>
 801d7e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d7ea:	b141      	cbz	r1, 801d7fe <__swsetup_r+0x6a>
 801d7ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d7f0:	4299      	cmp	r1, r3
 801d7f2:	d002      	beq.n	801d7fa <__swsetup_r+0x66>
 801d7f4:	4630      	mov	r0, r6
 801d7f6:	f000 fa63 	bl	801dcc0 <_free_r>
 801d7fa:	2300      	movs	r3, #0
 801d7fc:	6363      	str	r3, [r4, #52]	; 0x34
 801d7fe:	89a3      	ldrh	r3, [r4, #12]
 801d800:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801d804:	81a3      	strh	r3, [r4, #12]
 801d806:	2300      	movs	r3, #0
 801d808:	6063      	str	r3, [r4, #4]
 801d80a:	6923      	ldr	r3, [r4, #16]
 801d80c:	6023      	str	r3, [r4, #0]
 801d80e:	89a3      	ldrh	r3, [r4, #12]
 801d810:	f043 0308 	orr.w	r3, r3, #8
 801d814:	81a3      	strh	r3, [r4, #12]
 801d816:	6923      	ldr	r3, [r4, #16]
 801d818:	b94b      	cbnz	r3, 801d82e <__swsetup_r+0x9a>
 801d81a:	89a3      	ldrh	r3, [r4, #12]
 801d81c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801d820:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d824:	d003      	beq.n	801d82e <__swsetup_r+0x9a>
 801d826:	4621      	mov	r1, r4
 801d828:	4630      	mov	r0, r6
 801d82a:	f000 fa09 	bl	801dc40 <__smakebuf_r>
 801d82e:	89a0      	ldrh	r0, [r4, #12]
 801d830:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d834:	f010 0301 	ands.w	r3, r0, #1
 801d838:	d00a      	beq.n	801d850 <__swsetup_r+0xbc>
 801d83a:	2300      	movs	r3, #0
 801d83c:	60a3      	str	r3, [r4, #8]
 801d83e:	6963      	ldr	r3, [r4, #20]
 801d840:	425b      	negs	r3, r3
 801d842:	61a3      	str	r3, [r4, #24]
 801d844:	6923      	ldr	r3, [r4, #16]
 801d846:	b943      	cbnz	r3, 801d85a <__swsetup_r+0xc6>
 801d848:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801d84c:	d1ba      	bne.n	801d7c4 <__swsetup_r+0x30>
 801d84e:	bd70      	pop	{r4, r5, r6, pc}
 801d850:	0781      	lsls	r1, r0, #30
 801d852:	bf58      	it	pl
 801d854:	6963      	ldrpl	r3, [r4, #20]
 801d856:	60a3      	str	r3, [r4, #8]
 801d858:	e7f4      	b.n	801d844 <__swsetup_r+0xb0>
 801d85a:	2000      	movs	r0, #0
 801d85c:	e7f7      	b.n	801d84e <__swsetup_r+0xba>
 801d85e:	bf00      	nop
 801d860:	20000188 	.word	0x20000188
 801d864:	08029174 	.word	0x08029174
 801d868:	08029194 	.word	0x08029194
 801d86c:	08029154 	.word	0x08029154

0801d870 <abort>:
 801d870:	b508      	push	{r3, lr}
 801d872:	2006      	movs	r0, #6
 801d874:	f000 fb3c 	bl	801def0 <raise>
 801d878:	2001      	movs	r0, #1
 801d87a:	f7f7 ff09 	bl	8015690 <_exit>
	...

0801d880 <__sflush_r>:
 801d880:	898a      	ldrh	r2, [r1, #12]
 801d882:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d886:	4605      	mov	r5, r0
 801d888:	0710      	lsls	r0, r2, #28
 801d88a:	460c      	mov	r4, r1
 801d88c:	d458      	bmi.n	801d940 <__sflush_r+0xc0>
 801d88e:	684b      	ldr	r3, [r1, #4]
 801d890:	2b00      	cmp	r3, #0
 801d892:	dc05      	bgt.n	801d8a0 <__sflush_r+0x20>
 801d894:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801d896:	2b00      	cmp	r3, #0
 801d898:	dc02      	bgt.n	801d8a0 <__sflush_r+0x20>
 801d89a:	2000      	movs	r0, #0
 801d89c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d8a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d8a2:	2e00      	cmp	r6, #0
 801d8a4:	d0f9      	beq.n	801d89a <__sflush_r+0x1a>
 801d8a6:	2300      	movs	r3, #0
 801d8a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801d8ac:	682f      	ldr	r7, [r5, #0]
 801d8ae:	602b      	str	r3, [r5, #0]
 801d8b0:	d032      	beq.n	801d918 <__sflush_r+0x98>
 801d8b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801d8b4:	89a3      	ldrh	r3, [r4, #12]
 801d8b6:	075a      	lsls	r2, r3, #29
 801d8b8:	d505      	bpl.n	801d8c6 <__sflush_r+0x46>
 801d8ba:	6863      	ldr	r3, [r4, #4]
 801d8bc:	1ac0      	subs	r0, r0, r3
 801d8be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801d8c0:	b10b      	cbz	r3, 801d8c6 <__sflush_r+0x46>
 801d8c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801d8c4:	1ac0      	subs	r0, r0, r3
 801d8c6:	2300      	movs	r3, #0
 801d8c8:	4602      	mov	r2, r0
 801d8ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d8cc:	6a21      	ldr	r1, [r4, #32]
 801d8ce:	4628      	mov	r0, r5
 801d8d0:	47b0      	blx	r6
 801d8d2:	1c43      	adds	r3, r0, #1
 801d8d4:	89a3      	ldrh	r3, [r4, #12]
 801d8d6:	d106      	bne.n	801d8e6 <__sflush_r+0x66>
 801d8d8:	6829      	ldr	r1, [r5, #0]
 801d8da:	291d      	cmp	r1, #29
 801d8dc:	d82c      	bhi.n	801d938 <__sflush_r+0xb8>
 801d8de:	4a2a      	ldr	r2, [pc, #168]	; (801d988 <__sflush_r+0x108>)
 801d8e0:	40ca      	lsrs	r2, r1
 801d8e2:	07d6      	lsls	r6, r2, #31
 801d8e4:	d528      	bpl.n	801d938 <__sflush_r+0xb8>
 801d8e6:	2200      	movs	r2, #0
 801d8e8:	6062      	str	r2, [r4, #4]
 801d8ea:	04d9      	lsls	r1, r3, #19
 801d8ec:	6922      	ldr	r2, [r4, #16]
 801d8ee:	6022      	str	r2, [r4, #0]
 801d8f0:	d504      	bpl.n	801d8fc <__sflush_r+0x7c>
 801d8f2:	1c42      	adds	r2, r0, #1
 801d8f4:	d101      	bne.n	801d8fa <__sflush_r+0x7a>
 801d8f6:	682b      	ldr	r3, [r5, #0]
 801d8f8:	b903      	cbnz	r3, 801d8fc <__sflush_r+0x7c>
 801d8fa:	6560      	str	r0, [r4, #84]	; 0x54
 801d8fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d8fe:	602f      	str	r7, [r5, #0]
 801d900:	2900      	cmp	r1, #0
 801d902:	d0ca      	beq.n	801d89a <__sflush_r+0x1a>
 801d904:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d908:	4299      	cmp	r1, r3
 801d90a:	d002      	beq.n	801d912 <__sflush_r+0x92>
 801d90c:	4628      	mov	r0, r5
 801d90e:	f000 f9d7 	bl	801dcc0 <_free_r>
 801d912:	2000      	movs	r0, #0
 801d914:	6360      	str	r0, [r4, #52]	; 0x34
 801d916:	e7c1      	b.n	801d89c <__sflush_r+0x1c>
 801d918:	6a21      	ldr	r1, [r4, #32]
 801d91a:	2301      	movs	r3, #1
 801d91c:	4628      	mov	r0, r5
 801d91e:	47b0      	blx	r6
 801d920:	1c41      	adds	r1, r0, #1
 801d922:	d1c7      	bne.n	801d8b4 <__sflush_r+0x34>
 801d924:	682b      	ldr	r3, [r5, #0]
 801d926:	2b00      	cmp	r3, #0
 801d928:	d0c4      	beq.n	801d8b4 <__sflush_r+0x34>
 801d92a:	2b1d      	cmp	r3, #29
 801d92c:	d001      	beq.n	801d932 <__sflush_r+0xb2>
 801d92e:	2b16      	cmp	r3, #22
 801d930:	d101      	bne.n	801d936 <__sflush_r+0xb6>
 801d932:	602f      	str	r7, [r5, #0]
 801d934:	e7b1      	b.n	801d89a <__sflush_r+0x1a>
 801d936:	89a3      	ldrh	r3, [r4, #12]
 801d938:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d93c:	81a3      	strh	r3, [r4, #12]
 801d93e:	e7ad      	b.n	801d89c <__sflush_r+0x1c>
 801d940:	690f      	ldr	r7, [r1, #16]
 801d942:	2f00      	cmp	r7, #0
 801d944:	d0a9      	beq.n	801d89a <__sflush_r+0x1a>
 801d946:	0793      	lsls	r3, r2, #30
 801d948:	680e      	ldr	r6, [r1, #0]
 801d94a:	bf08      	it	eq
 801d94c:	694b      	ldreq	r3, [r1, #20]
 801d94e:	600f      	str	r7, [r1, #0]
 801d950:	bf18      	it	ne
 801d952:	2300      	movne	r3, #0
 801d954:	eba6 0807 	sub.w	r8, r6, r7
 801d958:	608b      	str	r3, [r1, #8]
 801d95a:	f1b8 0f00 	cmp.w	r8, #0
 801d95e:	dd9c      	ble.n	801d89a <__sflush_r+0x1a>
 801d960:	6a21      	ldr	r1, [r4, #32]
 801d962:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801d964:	4643      	mov	r3, r8
 801d966:	463a      	mov	r2, r7
 801d968:	4628      	mov	r0, r5
 801d96a:	47b0      	blx	r6
 801d96c:	2800      	cmp	r0, #0
 801d96e:	dc06      	bgt.n	801d97e <__sflush_r+0xfe>
 801d970:	89a3      	ldrh	r3, [r4, #12]
 801d972:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d976:	81a3      	strh	r3, [r4, #12]
 801d978:	f04f 30ff 	mov.w	r0, #4294967295
 801d97c:	e78e      	b.n	801d89c <__sflush_r+0x1c>
 801d97e:	4407      	add	r7, r0
 801d980:	eba8 0800 	sub.w	r8, r8, r0
 801d984:	e7e9      	b.n	801d95a <__sflush_r+0xda>
 801d986:	bf00      	nop
 801d988:	20400001 	.word	0x20400001

0801d98c <_fflush_r>:
 801d98c:	b538      	push	{r3, r4, r5, lr}
 801d98e:	690b      	ldr	r3, [r1, #16]
 801d990:	4605      	mov	r5, r0
 801d992:	460c      	mov	r4, r1
 801d994:	b913      	cbnz	r3, 801d99c <_fflush_r+0x10>
 801d996:	2500      	movs	r5, #0
 801d998:	4628      	mov	r0, r5
 801d99a:	bd38      	pop	{r3, r4, r5, pc}
 801d99c:	b118      	cbz	r0, 801d9a6 <_fflush_r+0x1a>
 801d99e:	6983      	ldr	r3, [r0, #24]
 801d9a0:	b90b      	cbnz	r3, 801d9a6 <_fflush_r+0x1a>
 801d9a2:	f000 f887 	bl	801dab4 <__sinit>
 801d9a6:	4b14      	ldr	r3, [pc, #80]	; (801d9f8 <_fflush_r+0x6c>)
 801d9a8:	429c      	cmp	r4, r3
 801d9aa:	d11b      	bne.n	801d9e4 <_fflush_r+0x58>
 801d9ac:	686c      	ldr	r4, [r5, #4]
 801d9ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d9b2:	2b00      	cmp	r3, #0
 801d9b4:	d0ef      	beq.n	801d996 <_fflush_r+0xa>
 801d9b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801d9b8:	07d0      	lsls	r0, r2, #31
 801d9ba:	d404      	bmi.n	801d9c6 <_fflush_r+0x3a>
 801d9bc:	0599      	lsls	r1, r3, #22
 801d9be:	d402      	bmi.n	801d9c6 <_fflush_r+0x3a>
 801d9c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d9c2:	f000 f915 	bl	801dbf0 <__retarget_lock_acquire_recursive>
 801d9c6:	4628      	mov	r0, r5
 801d9c8:	4621      	mov	r1, r4
 801d9ca:	f7ff ff59 	bl	801d880 <__sflush_r>
 801d9ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d9d0:	07da      	lsls	r2, r3, #31
 801d9d2:	4605      	mov	r5, r0
 801d9d4:	d4e0      	bmi.n	801d998 <_fflush_r+0xc>
 801d9d6:	89a3      	ldrh	r3, [r4, #12]
 801d9d8:	059b      	lsls	r3, r3, #22
 801d9da:	d4dd      	bmi.n	801d998 <_fflush_r+0xc>
 801d9dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d9de:	f000 f908 	bl	801dbf2 <__retarget_lock_release_recursive>
 801d9e2:	e7d9      	b.n	801d998 <_fflush_r+0xc>
 801d9e4:	4b05      	ldr	r3, [pc, #20]	; (801d9fc <_fflush_r+0x70>)
 801d9e6:	429c      	cmp	r4, r3
 801d9e8:	d101      	bne.n	801d9ee <_fflush_r+0x62>
 801d9ea:	68ac      	ldr	r4, [r5, #8]
 801d9ec:	e7df      	b.n	801d9ae <_fflush_r+0x22>
 801d9ee:	4b04      	ldr	r3, [pc, #16]	; (801da00 <_fflush_r+0x74>)
 801d9f0:	429c      	cmp	r4, r3
 801d9f2:	bf08      	it	eq
 801d9f4:	68ec      	ldreq	r4, [r5, #12]
 801d9f6:	e7da      	b.n	801d9ae <_fflush_r+0x22>
 801d9f8:	08029174 	.word	0x08029174
 801d9fc:	08029194 	.word	0x08029194
 801da00:	08029154 	.word	0x08029154

0801da04 <std>:
 801da04:	2300      	movs	r3, #0
 801da06:	b510      	push	{r4, lr}
 801da08:	4604      	mov	r4, r0
 801da0a:	e9c0 3300 	strd	r3, r3, [r0]
 801da0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801da12:	6083      	str	r3, [r0, #8]
 801da14:	8181      	strh	r1, [r0, #12]
 801da16:	6643      	str	r3, [r0, #100]	; 0x64
 801da18:	81c2      	strh	r2, [r0, #14]
 801da1a:	6183      	str	r3, [r0, #24]
 801da1c:	4619      	mov	r1, r3
 801da1e:	2208      	movs	r2, #8
 801da20:	305c      	adds	r0, #92	; 0x5c
 801da22:	f7ff fb6f 	bl	801d104 <memset>
 801da26:	4b05      	ldr	r3, [pc, #20]	; (801da3c <std+0x38>)
 801da28:	6263      	str	r3, [r4, #36]	; 0x24
 801da2a:	4b05      	ldr	r3, [pc, #20]	; (801da40 <std+0x3c>)
 801da2c:	62a3      	str	r3, [r4, #40]	; 0x28
 801da2e:	4b05      	ldr	r3, [pc, #20]	; (801da44 <std+0x40>)
 801da30:	62e3      	str	r3, [r4, #44]	; 0x2c
 801da32:	4b05      	ldr	r3, [pc, #20]	; (801da48 <std+0x44>)
 801da34:	6224      	str	r4, [r4, #32]
 801da36:	6323      	str	r3, [r4, #48]	; 0x30
 801da38:	bd10      	pop	{r4, pc}
 801da3a:	bf00      	nop
 801da3c:	0801df29 	.word	0x0801df29
 801da40:	0801df4b 	.word	0x0801df4b
 801da44:	0801df83 	.word	0x0801df83
 801da48:	0801dfa7 	.word	0x0801dfa7

0801da4c <_cleanup_r>:
 801da4c:	4901      	ldr	r1, [pc, #4]	; (801da54 <_cleanup_r+0x8>)
 801da4e:	f000 b8af 	b.w	801dbb0 <_fwalk_reent>
 801da52:	bf00      	nop
 801da54:	0801d98d 	.word	0x0801d98d

0801da58 <__sfmoreglue>:
 801da58:	b570      	push	{r4, r5, r6, lr}
 801da5a:	2268      	movs	r2, #104	; 0x68
 801da5c:	1e4d      	subs	r5, r1, #1
 801da5e:	4355      	muls	r5, r2
 801da60:	460e      	mov	r6, r1
 801da62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801da66:	f000 f997 	bl	801dd98 <_malloc_r>
 801da6a:	4604      	mov	r4, r0
 801da6c:	b140      	cbz	r0, 801da80 <__sfmoreglue+0x28>
 801da6e:	2100      	movs	r1, #0
 801da70:	e9c0 1600 	strd	r1, r6, [r0]
 801da74:	300c      	adds	r0, #12
 801da76:	60a0      	str	r0, [r4, #8]
 801da78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801da7c:	f7ff fb42 	bl	801d104 <memset>
 801da80:	4620      	mov	r0, r4
 801da82:	bd70      	pop	{r4, r5, r6, pc}

0801da84 <__sfp_lock_acquire>:
 801da84:	4801      	ldr	r0, [pc, #4]	; (801da8c <__sfp_lock_acquire+0x8>)
 801da86:	f000 b8b3 	b.w	801dbf0 <__retarget_lock_acquire_recursive>
 801da8a:	bf00      	nop
 801da8c:	20000725 	.word	0x20000725

0801da90 <__sfp_lock_release>:
 801da90:	4801      	ldr	r0, [pc, #4]	; (801da98 <__sfp_lock_release+0x8>)
 801da92:	f000 b8ae 	b.w	801dbf2 <__retarget_lock_release_recursive>
 801da96:	bf00      	nop
 801da98:	20000725 	.word	0x20000725

0801da9c <__sinit_lock_acquire>:
 801da9c:	4801      	ldr	r0, [pc, #4]	; (801daa4 <__sinit_lock_acquire+0x8>)
 801da9e:	f000 b8a7 	b.w	801dbf0 <__retarget_lock_acquire_recursive>
 801daa2:	bf00      	nop
 801daa4:	20000726 	.word	0x20000726

0801daa8 <__sinit_lock_release>:
 801daa8:	4801      	ldr	r0, [pc, #4]	; (801dab0 <__sinit_lock_release+0x8>)
 801daaa:	f000 b8a2 	b.w	801dbf2 <__retarget_lock_release_recursive>
 801daae:	bf00      	nop
 801dab0:	20000726 	.word	0x20000726

0801dab4 <__sinit>:
 801dab4:	b510      	push	{r4, lr}
 801dab6:	4604      	mov	r4, r0
 801dab8:	f7ff fff0 	bl	801da9c <__sinit_lock_acquire>
 801dabc:	69a3      	ldr	r3, [r4, #24]
 801dabe:	b11b      	cbz	r3, 801dac8 <__sinit+0x14>
 801dac0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dac4:	f7ff bff0 	b.w	801daa8 <__sinit_lock_release>
 801dac8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801dacc:	6523      	str	r3, [r4, #80]	; 0x50
 801dace:	4b13      	ldr	r3, [pc, #76]	; (801db1c <__sinit+0x68>)
 801dad0:	4a13      	ldr	r2, [pc, #76]	; (801db20 <__sinit+0x6c>)
 801dad2:	681b      	ldr	r3, [r3, #0]
 801dad4:	62a2      	str	r2, [r4, #40]	; 0x28
 801dad6:	42a3      	cmp	r3, r4
 801dad8:	bf04      	itt	eq
 801dada:	2301      	moveq	r3, #1
 801dadc:	61a3      	streq	r3, [r4, #24]
 801dade:	4620      	mov	r0, r4
 801dae0:	f000 f820 	bl	801db24 <__sfp>
 801dae4:	6060      	str	r0, [r4, #4]
 801dae6:	4620      	mov	r0, r4
 801dae8:	f000 f81c 	bl	801db24 <__sfp>
 801daec:	60a0      	str	r0, [r4, #8]
 801daee:	4620      	mov	r0, r4
 801daf0:	f000 f818 	bl	801db24 <__sfp>
 801daf4:	2200      	movs	r2, #0
 801daf6:	60e0      	str	r0, [r4, #12]
 801daf8:	2104      	movs	r1, #4
 801dafa:	6860      	ldr	r0, [r4, #4]
 801dafc:	f7ff ff82 	bl	801da04 <std>
 801db00:	68a0      	ldr	r0, [r4, #8]
 801db02:	2201      	movs	r2, #1
 801db04:	2109      	movs	r1, #9
 801db06:	f7ff ff7d 	bl	801da04 <std>
 801db0a:	68e0      	ldr	r0, [r4, #12]
 801db0c:	2202      	movs	r2, #2
 801db0e:	2112      	movs	r1, #18
 801db10:	f7ff ff78 	bl	801da04 <std>
 801db14:	2301      	movs	r3, #1
 801db16:	61a3      	str	r3, [r4, #24]
 801db18:	e7d2      	b.n	801dac0 <__sinit+0xc>
 801db1a:	bf00      	nop
 801db1c:	0802911c 	.word	0x0802911c
 801db20:	0801da4d 	.word	0x0801da4d

0801db24 <__sfp>:
 801db24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801db26:	4607      	mov	r7, r0
 801db28:	f7ff ffac 	bl	801da84 <__sfp_lock_acquire>
 801db2c:	4b1e      	ldr	r3, [pc, #120]	; (801dba8 <__sfp+0x84>)
 801db2e:	681e      	ldr	r6, [r3, #0]
 801db30:	69b3      	ldr	r3, [r6, #24]
 801db32:	b913      	cbnz	r3, 801db3a <__sfp+0x16>
 801db34:	4630      	mov	r0, r6
 801db36:	f7ff ffbd 	bl	801dab4 <__sinit>
 801db3a:	3648      	adds	r6, #72	; 0x48
 801db3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801db40:	3b01      	subs	r3, #1
 801db42:	d503      	bpl.n	801db4c <__sfp+0x28>
 801db44:	6833      	ldr	r3, [r6, #0]
 801db46:	b30b      	cbz	r3, 801db8c <__sfp+0x68>
 801db48:	6836      	ldr	r6, [r6, #0]
 801db4a:	e7f7      	b.n	801db3c <__sfp+0x18>
 801db4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801db50:	b9d5      	cbnz	r5, 801db88 <__sfp+0x64>
 801db52:	4b16      	ldr	r3, [pc, #88]	; (801dbac <__sfp+0x88>)
 801db54:	60e3      	str	r3, [r4, #12]
 801db56:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801db5a:	6665      	str	r5, [r4, #100]	; 0x64
 801db5c:	f000 f847 	bl	801dbee <__retarget_lock_init_recursive>
 801db60:	f7ff ff96 	bl	801da90 <__sfp_lock_release>
 801db64:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801db68:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801db6c:	6025      	str	r5, [r4, #0]
 801db6e:	61a5      	str	r5, [r4, #24]
 801db70:	2208      	movs	r2, #8
 801db72:	4629      	mov	r1, r5
 801db74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801db78:	f7ff fac4 	bl	801d104 <memset>
 801db7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801db80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801db84:	4620      	mov	r0, r4
 801db86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801db88:	3468      	adds	r4, #104	; 0x68
 801db8a:	e7d9      	b.n	801db40 <__sfp+0x1c>
 801db8c:	2104      	movs	r1, #4
 801db8e:	4638      	mov	r0, r7
 801db90:	f7ff ff62 	bl	801da58 <__sfmoreglue>
 801db94:	4604      	mov	r4, r0
 801db96:	6030      	str	r0, [r6, #0]
 801db98:	2800      	cmp	r0, #0
 801db9a:	d1d5      	bne.n	801db48 <__sfp+0x24>
 801db9c:	f7ff ff78 	bl	801da90 <__sfp_lock_release>
 801dba0:	230c      	movs	r3, #12
 801dba2:	603b      	str	r3, [r7, #0]
 801dba4:	e7ee      	b.n	801db84 <__sfp+0x60>
 801dba6:	bf00      	nop
 801dba8:	0802911c 	.word	0x0802911c
 801dbac:	ffff0001 	.word	0xffff0001

0801dbb0 <_fwalk_reent>:
 801dbb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dbb4:	4606      	mov	r6, r0
 801dbb6:	4688      	mov	r8, r1
 801dbb8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801dbbc:	2700      	movs	r7, #0
 801dbbe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801dbc2:	f1b9 0901 	subs.w	r9, r9, #1
 801dbc6:	d505      	bpl.n	801dbd4 <_fwalk_reent+0x24>
 801dbc8:	6824      	ldr	r4, [r4, #0]
 801dbca:	2c00      	cmp	r4, #0
 801dbcc:	d1f7      	bne.n	801dbbe <_fwalk_reent+0xe>
 801dbce:	4638      	mov	r0, r7
 801dbd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dbd4:	89ab      	ldrh	r3, [r5, #12]
 801dbd6:	2b01      	cmp	r3, #1
 801dbd8:	d907      	bls.n	801dbea <_fwalk_reent+0x3a>
 801dbda:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801dbde:	3301      	adds	r3, #1
 801dbe0:	d003      	beq.n	801dbea <_fwalk_reent+0x3a>
 801dbe2:	4629      	mov	r1, r5
 801dbe4:	4630      	mov	r0, r6
 801dbe6:	47c0      	blx	r8
 801dbe8:	4307      	orrs	r7, r0
 801dbea:	3568      	adds	r5, #104	; 0x68
 801dbec:	e7e9      	b.n	801dbc2 <_fwalk_reent+0x12>

0801dbee <__retarget_lock_init_recursive>:
 801dbee:	4770      	bx	lr

0801dbf0 <__retarget_lock_acquire_recursive>:
 801dbf0:	4770      	bx	lr

0801dbf2 <__retarget_lock_release_recursive>:
 801dbf2:	4770      	bx	lr

0801dbf4 <__swhatbuf_r>:
 801dbf4:	b570      	push	{r4, r5, r6, lr}
 801dbf6:	460e      	mov	r6, r1
 801dbf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dbfc:	2900      	cmp	r1, #0
 801dbfe:	b096      	sub	sp, #88	; 0x58
 801dc00:	4614      	mov	r4, r2
 801dc02:	461d      	mov	r5, r3
 801dc04:	da08      	bge.n	801dc18 <__swhatbuf_r+0x24>
 801dc06:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801dc0a:	2200      	movs	r2, #0
 801dc0c:	602a      	str	r2, [r5, #0]
 801dc0e:	061a      	lsls	r2, r3, #24
 801dc10:	d410      	bmi.n	801dc34 <__swhatbuf_r+0x40>
 801dc12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801dc16:	e00e      	b.n	801dc36 <__swhatbuf_r+0x42>
 801dc18:	466a      	mov	r2, sp
 801dc1a:	f000 f9eb 	bl	801dff4 <_fstat_r>
 801dc1e:	2800      	cmp	r0, #0
 801dc20:	dbf1      	blt.n	801dc06 <__swhatbuf_r+0x12>
 801dc22:	9a01      	ldr	r2, [sp, #4]
 801dc24:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801dc28:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801dc2c:	425a      	negs	r2, r3
 801dc2e:	415a      	adcs	r2, r3
 801dc30:	602a      	str	r2, [r5, #0]
 801dc32:	e7ee      	b.n	801dc12 <__swhatbuf_r+0x1e>
 801dc34:	2340      	movs	r3, #64	; 0x40
 801dc36:	2000      	movs	r0, #0
 801dc38:	6023      	str	r3, [r4, #0]
 801dc3a:	b016      	add	sp, #88	; 0x58
 801dc3c:	bd70      	pop	{r4, r5, r6, pc}
	...

0801dc40 <__smakebuf_r>:
 801dc40:	898b      	ldrh	r3, [r1, #12]
 801dc42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801dc44:	079d      	lsls	r5, r3, #30
 801dc46:	4606      	mov	r6, r0
 801dc48:	460c      	mov	r4, r1
 801dc4a:	d507      	bpl.n	801dc5c <__smakebuf_r+0x1c>
 801dc4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801dc50:	6023      	str	r3, [r4, #0]
 801dc52:	6123      	str	r3, [r4, #16]
 801dc54:	2301      	movs	r3, #1
 801dc56:	6163      	str	r3, [r4, #20]
 801dc58:	b002      	add	sp, #8
 801dc5a:	bd70      	pop	{r4, r5, r6, pc}
 801dc5c:	ab01      	add	r3, sp, #4
 801dc5e:	466a      	mov	r2, sp
 801dc60:	f7ff ffc8 	bl	801dbf4 <__swhatbuf_r>
 801dc64:	9900      	ldr	r1, [sp, #0]
 801dc66:	4605      	mov	r5, r0
 801dc68:	4630      	mov	r0, r6
 801dc6a:	f000 f895 	bl	801dd98 <_malloc_r>
 801dc6e:	b948      	cbnz	r0, 801dc84 <__smakebuf_r+0x44>
 801dc70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dc74:	059a      	lsls	r2, r3, #22
 801dc76:	d4ef      	bmi.n	801dc58 <__smakebuf_r+0x18>
 801dc78:	f023 0303 	bic.w	r3, r3, #3
 801dc7c:	f043 0302 	orr.w	r3, r3, #2
 801dc80:	81a3      	strh	r3, [r4, #12]
 801dc82:	e7e3      	b.n	801dc4c <__smakebuf_r+0xc>
 801dc84:	4b0d      	ldr	r3, [pc, #52]	; (801dcbc <__smakebuf_r+0x7c>)
 801dc86:	62b3      	str	r3, [r6, #40]	; 0x28
 801dc88:	89a3      	ldrh	r3, [r4, #12]
 801dc8a:	6020      	str	r0, [r4, #0]
 801dc8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801dc90:	81a3      	strh	r3, [r4, #12]
 801dc92:	9b00      	ldr	r3, [sp, #0]
 801dc94:	6163      	str	r3, [r4, #20]
 801dc96:	9b01      	ldr	r3, [sp, #4]
 801dc98:	6120      	str	r0, [r4, #16]
 801dc9a:	b15b      	cbz	r3, 801dcb4 <__smakebuf_r+0x74>
 801dc9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801dca0:	4630      	mov	r0, r6
 801dca2:	f000 f9b9 	bl	801e018 <_isatty_r>
 801dca6:	b128      	cbz	r0, 801dcb4 <__smakebuf_r+0x74>
 801dca8:	89a3      	ldrh	r3, [r4, #12]
 801dcaa:	f023 0303 	bic.w	r3, r3, #3
 801dcae:	f043 0301 	orr.w	r3, r3, #1
 801dcb2:	81a3      	strh	r3, [r4, #12]
 801dcb4:	89a0      	ldrh	r0, [r4, #12]
 801dcb6:	4305      	orrs	r5, r0
 801dcb8:	81a5      	strh	r5, [r4, #12]
 801dcba:	e7cd      	b.n	801dc58 <__smakebuf_r+0x18>
 801dcbc:	0801da4d 	.word	0x0801da4d

0801dcc0 <_free_r>:
 801dcc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801dcc2:	2900      	cmp	r1, #0
 801dcc4:	d044      	beq.n	801dd50 <_free_r+0x90>
 801dcc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801dcca:	9001      	str	r0, [sp, #4]
 801dccc:	2b00      	cmp	r3, #0
 801dcce:	f1a1 0404 	sub.w	r4, r1, #4
 801dcd2:	bfb8      	it	lt
 801dcd4:	18e4      	addlt	r4, r4, r3
 801dcd6:	f000 f9c1 	bl	801e05c <__malloc_lock>
 801dcda:	4a1e      	ldr	r2, [pc, #120]	; (801dd54 <_free_r+0x94>)
 801dcdc:	9801      	ldr	r0, [sp, #4]
 801dcde:	6813      	ldr	r3, [r2, #0]
 801dce0:	b933      	cbnz	r3, 801dcf0 <_free_r+0x30>
 801dce2:	6063      	str	r3, [r4, #4]
 801dce4:	6014      	str	r4, [r2, #0]
 801dce6:	b003      	add	sp, #12
 801dce8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801dcec:	f000 b9bc 	b.w	801e068 <__malloc_unlock>
 801dcf0:	42a3      	cmp	r3, r4
 801dcf2:	d908      	bls.n	801dd06 <_free_r+0x46>
 801dcf4:	6825      	ldr	r5, [r4, #0]
 801dcf6:	1961      	adds	r1, r4, r5
 801dcf8:	428b      	cmp	r3, r1
 801dcfa:	bf01      	itttt	eq
 801dcfc:	6819      	ldreq	r1, [r3, #0]
 801dcfe:	685b      	ldreq	r3, [r3, #4]
 801dd00:	1949      	addeq	r1, r1, r5
 801dd02:	6021      	streq	r1, [r4, #0]
 801dd04:	e7ed      	b.n	801dce2 <_free_r+0x22>
 801dd06:	461a      	mov	r2, r3
 801dd08:	685b      	ldr	r3, [r3, #4]
 801dd0a:	b10b      	cbz	r3, 801dd10 <_free_r+0x50>
 801dd0c:	42a3      	cmp	r3, r4
 801dd0e:	d9fa      	bls.n	801dd06 <_free_r+0x46>
 801dd10:	6811      	ldr	r1, [r2, #0]
 801dd12:	1855      	adds	r5, r2, r1
 801dd14:	42a5      	cmp	r5, r4
 801dd16:	d10b      	bne.n	801dd30 <_free_r+0x70>
 801dd18:	6824      	ldr	r4, [r4, #0]
 801dd1a:	4421      	add	r1, r4
 801dd1c:	1854      	adds	r4, r2, r1
 801dd1e:	42a3      	cmp	r3, r4
 801dd20:	6011      	str	r1, [r2, #0]
 801dd22:	d1e0      	bne.n	801dce6 <_free_r+0x26>
 801dd24:	681c      	ldr	r4, [r3, #0]
 801dd26:	685b      	ldr	r3, [r3, #4]
 801dd28:	6053      	str	r3, [r2, #4]
 801dd2a:	4421      	add	r1, r4
 801dd2c:	6011      	str	r1, [r2, #0]
 801dd2e:	e7da      	b.n	801dce6 <_free_r+0x26>
 801dd30:	d902      	bls.n	801dd38 <_free_r+0x78>
 801dd32:	230c      	movs	r3, #12
 801dd34:	6003      	str	r3, [r0, #0]
 801dd36:	e7d6      	b.n	801dce6 <_free_r+0x26>
 801dd38:	6825      	ldr	r5, [r4, #0]
 801dd3a:	1961      	adds	r1, r4, r5
 801dd3c:	428b      	cmp	r3, r1
 801dd3e:	bf04      	itt	eq
 801dd40:	6819      	ldreq	r1, [r3, #0]
 801dd42:	685b      	ldreq	r3, [r3, #4]
 801dd44:	6063      	str	r3, [r4, #4]
 801dd46:	bf04      	itt	eq
 801dd48:	1949      	addeq	r1, r1, r5
 801dd4a:	6021      	streq	r1, [r4, #0]
 801dd4c:	6054      	str	r4, [r2, #4]
 801dd4e:	e7ca      	b.n	801dce6 <_free_r+0x26>
 801dd50:	b003      	add	sp, #12
 801dd52:	bd30      	pop	{r4, r5, pc}
 801dd54:	20000728 	.word	0x20000728

0801dd58 <sbrk_aligned>:
 801dd58:	b570      	push	{r4, r5, r6, lr}
 801dd5a:	4e0e      	ldr	r6, [pc, #56]	; (801dd94 <sbrk_aligned+0x3c>)
 801dd5c:	460c      	mov	r4, r1
 801dd5e:	6831      	ldr	r1, [r6, #0]
 801dd60:	4605      	mov	r5, r0
 801dd62:	b911      	cbnz	r1, 801dd6a <sbrk_aligned+0x12>
 801dd64:	f000 f88c 	bl	801de80 <_sbrk_r>
 801dd68:	6030      	str	r0, [r6, #0]
 801dd6a:	4621      	mov	r1, r4
 801dd6c:	4628      	mov	r0, r5
 801dd6e:	f000 f887 	bl	801de80 <_sbrk_r>
 801dd72:	1c43      	adds	r3, r0, #1
 801dd74:	d00a      	beq.n	801dd8c <sbrk_aligned+0x34>
 801dd76:	1cc4      	adds	r4, r0, #3
 801dd78:	f024 0403 	bic.w	r4, r4, #3
 801dd7c:	42a0      	cmp	r0, r4
 801dd7e:	d007      	beq.n	801dd90 <sbrk_aligned+0x38>
 801dd80:	1a21      	subs	r1, r4, r0
 801dd82:	4628      	mov	r0, r5
 801dd84:	f000 f87c 	bl	801de80 <_sbrk_r>
 801dd88:	3001      	adds	r0, #1
 801dd8a:	d101      	bne.n	801dd90 <sbrk_aligned+0x38>
 801dd8c:	f04f 34ff 	mov.w	r4, #4294967295
 801dd90:	4620      	mov	r0, r4
 801dd92:	bd70      	pop	{r4, r5, r6, pc}
 801dd94:	2000072c 	.word	0x2000072c

0801dd98 <_malloc_r>:
 801dd98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dd9c:	1ccd      	adds	r5, r1, #3
 801dd9e:	f025 0503 	bic.w	r5, r5, #3
 801dda2:	3508      	adds	r5, #8
 801dda4:	2d0c      	cmp	r5, #12
 801dda6:	bf38      	it	cc
 801dda8:	250c      	movcc	r5, #12
 801ddaa:	2d00      	cmp	r5, #0
 801ddac:	4607      	mov	r7, r0
 801ddae:	db01      	blt.n	801ddb4 <_malloc_r+0x1c>
 801ddb0:	42a9      	cmp	r1, r5
 801ddb2:	d905      	bls.n	801ddc0 <_malloc_r+0x28>
 801ddb4:	230c      	movs	r3, #12
 801ddb6:	603b      	str	r3, [r7, #0]
 801ddb8:	2600      	movs	r6, #0
 801ddba:	4630      	mov	r0, r6
 801ddbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ddc0:	4e2e      	ldr	r6, [pc, #184]	; (801de7c <_malloc_r+0xe4>)
 801ddc2:	f000 f94b 	bl	801e05c <__malloc_lock>
 801ddc6:	6833      	ldr	r3, [r6, #0]
 801ddc8:	461c      	mov	r4, r3
 801ddca:	bb34      	cbnz	r4, 801de1a <_malloc_r+0x82>
 801ddcc:	4629      	mov	r1, r5
 801ddce:	4638      	mov	r0, r7
 801ddd0:	f7ff ffc2 	bl	801dd58 <sbrk_aligned>
 801ddd4:	1c43      	adds	r3, r0, #1
 801ddd6:	4604      	mov	r4, r0
 801ddd8:	d14d      	bne.n	801de76 <_malloc_r+0xde>
 801ddda:	6834      	ldr	r4, [r6, #0]
 801dddc:	4626      	mov	r6, r4
 801ddde:	2e00      	cmp	r6, #0
 801dde0:	d140      	bne.n	801de64 <_malloc_r+0xcc>
 801dde2:	6823      	ldr	r3, [r4, #0]
 801dde4:	4631      	mov	r1, r6
 801dde6:	4638      	mov	r0, r7
 801dde8:	eb04 0803 	add.w	r8, r4, r3
 801ddec:	f000 f848 	bl	801de80 <_sbrk_r>
 801ddf0:	4580      	cmp	r8, r0
 801ddf2:	d13a      	bne.n	801de6a <_malloc_r+0xd2>
 801ddf4:	6821      	ldr	r1, [r4, #0]
 801ddf6:	3503      	adds	r5, #3
 801ddf8:	1a6d      	subs	r5, r5, r1
 801ddfa:	f025 0503 	bic.w	r5, r5, #3
 801ddfe:	3508      	adds	r5, #8
 801de00:	2d0c      	cmp	r5, #12
 801de02:	bf38      	it	cc
 801de04:	250c      	movcc	r5, #12
 801de06:	4629      	mov	r1, r5
 801de08:	4638      	mov	r0, r7
 801de0a:	f7ff ffa5 	bl	801dd58 <sbrk_aligned>
 801de0e:	3001      	adds	r0, #1
 801de10:	d02b      	beq.n	801de6a <_malloc_r+0xd2>
 801de12:	6823      	ldr	r3, [r4, #0]
 801de14:	442b      	add	r3, r5
 801de16:	6023      	str	r3, [r4, #0]
 801de18:	e00e      	b.n	801de38 <_malloc_r+0xa0>
 801de1a:	6822      	ldr	r2, [r4, #0]
 801de1c:	1b52      	subs	r2, r2, r5
 801de1e:	d41e      	bmi.n	801de5e <_malloc_r+0xc6>
 801de20:	2a0b      	cmp	r2, #11
 801de22:	d916      	bls.n	801de52 <_malloc_r+0xba>
 801de24:	1961      	adds	r1, r4, r5
 801de26:	42a3      	cmp	r3, r4
 801de28:	6025      	str	r5, [r4, #0]
 801de2a:	bf18      	it	ne
 801de2c:	6059      	strne	r1, [r3, #4]
 801de2e:	6863      	ldr	r3, [r4, #4]
 801de30:	bf08      	it	eq
 801de32:	6031      	streq	r1, [r6, #0]
 801de34:	5162      	str	r2, [r4, r5]
 801de36:	604b      	str	r3, [r1, #4]
 801de38:	4638      	mov	r0, r7
 801de3a:	f104 060b 	add.w	r6, r4, #11
 801de3e:	f000 f913 	bl	801e068 <__malloc_unlock>
 801de42:	f026 0607 	bic.w	r6, r6, #7
 801de46:	1d23      	adds	r3, r4, #4
 801de48:	1af2      	subs	r2, r6, r3
 801de4a:	d0b6      	beq.n	801ddba <_malloc_r+0x22>
 801de4c:	1b9b      	subs	r3, r3, r6
 801de4e:	50a3      	str	r3, [r4, r2]
 801de50:	e7b3      	b.n	801ddba <_malloc_r+0x22>
 801de52:	6862      	ldr	r2, [r4, #4]
 801de54:	42a3      	cmp	r3, r4
 801de56:	bf0c      	ite	eq
 801de58:	6032      	streq	r2, [r6, #0]
 801de5a:	605a      	strne	r2, [r3, #4]
 801de5c:	e7ec      	b.n	801de38 <_malloc_r+0xa0>
 801de5e:	4623      	mov	r3, r4
 801de60:	6864      	ldr	r4, [r4, #4]
 801de62:	e7b2      	b.n	801ddca <_malloc_r+0x32>
 801de64:	4634      	mov	r4, r6
 801de66:	6876      	ldr	r6, [r6, #4]
 801de68:	e7b9      	b.n	801ddde <_malloc_r+0x46>
 801de6a:	230c      	movs	r3, #12
 801de6c:	603b      	str	r3, [r7, #0]
 801de6e:	4638      	mov	r0, r7
 801de70:	f000 f8fa 	bl	801e068 <__malloc_unlock>
 801de74:	e7a1      	b.n	801ddba <_malloc_r+0x22>
 801de76:	6025      	str	r5, [r4, #0]
 801de78:	e7de      	b.n	801de38 <_malloc_r+0xa0>
 801de7a:	bf00      	nop
 801de7c:	20000728 	.word	0x20000728

0801de80 <_sbrk_r>:
 801de80:	b538      	push	{r3, r4, r5, lr}
 801de82:	4d06      	ldr	r5, [pc, #24]	; (801de9c <_sbrk_r+0x1c>)
 801de84:	2300      	movs	r3, #0
 801de86:	4604      	mov	r4, r0
 801de88:	4608      	mov	r0, r1
 801de8a:	602b      	str	r3, [r5, #0]
 801de8c:	f7f7 fc78 	bl	8015780 <_sbrk>
 801de90:	1c43      	adds	r3, r0, #1
 801de92:	d102      	bne.n	801de9a <_sbrk_r+0x1a>
 801de94:	682b      	ldr	r3, [r5, #0]
 801de96:	b103      	cbz	r3, 801de9a <_sbrk_r+0x1a>
 801de98:	6023      	str	r3, [r4, #0]
 801de9a:	bd38      	pop	{r3, r4, r5, pc}
 801de9c:	20000730 	.word	0x20000730

0801dea0 <_raise_r>:
 801dea0:	291f      	cmp	r1, #31
 801dea2:	b538      	push	{r3, r4, r5, lr}
 801dea4:	4604      	mov	r4, r0
 801dea6:	460d      	mov	r5, r1
 801dea8:	d904      	bls.n	801deb4 <_raise_r+0x14>
 801deaa:	2316      	movs	r3, #22
 801deac:	6003      	str	r3, [r0, #0]
 801deae:	f04f 30ff 	mov.w	r0, #4294967295
 801deb2:	bd38      	pop	{r3, r4, r5, pc}
 801deb4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801deb6:	b112      	cbz	r2, 801debe <_raise_r+0x1e>
 801deb8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801debc:	b94b      	cbnz	r3, 801ded2 <_raise_r+0x32>
 801debe:	4620      	mov	r0, r4
 801dec0:	f000 f830 	bl	801df24 <_getpid_r>
 801dec4:	462a      	mov	r2, r5
 801dec6:	4601      	mov	r1, r0
 801dec8:	4620      	mov	r0, r4
 801deca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801dece:	f000 b817 	b.w	801df00 <_kill_r>
 801ded2:	2b01      	cmp	r3, #1
 801ded4:	d00a      	beq.n	801deec <_raise_r+0x4c>
 801ded6:	1c59      	adds	r1, r3, #1
 801ded8:	d103      	bne.n	801dee2 <_raise_r+0x42>
 801deda:	2316      	movs	r3, #22
 801dedc:	6003      	str	r3, [r0, #0]
 801dede:	2001      	movs	r0, #1
 801dee0:	e7e7      	b.n	801deb2 <_raise_r+0x12>
 801dee2:	2400      	movs	r4, #0
 801dee4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801dee8:	4628      	mov	r0, r5
 801deea:	4798      	blx	r3
 801deec:	2000      	movs	r0, #0
 801deee:	e7e0      	b.n	801deb2 <_raise_r+0x12>

0801def0 <raise>:
 801def0:	4b02      	ldr	r3, [pc, #8]	; (801defc <raise+0xc>)
 801def2:	4601      	mov	r1, r0
 801def4:	6818      	ldr	r0, [r3, #0]
 801def6:	f7ff bfd3 	b.w	801dea0 <_raise_r>
 801defa:	bf00      	nop
 801defc:	20000188 	.word	0x20000188

0801df00 <_kill_r>:
 801df00:	b538      	push	{r3, r4, r5, lr}
 801df02:	4d07      	ldr	r5, [pc, #28]	; (801df20 <_kill_r+0x20>)
 801df04:	2300      	movs	r3, #0
 801df06:	4604      	mov	r4, r0
 801df08:	4608      	mov	r0, r1
 801df0a:	4611      	mov	r1, r2
 801df0c:	602b      	str	r3, [r5, #0]
 801df0e:	f7f7 fbaf 	bl	8015670 <_kill>
 801df12:	1c43      	adds	r3, r0, #1
 801df14:	d102      	bne.n	801df1c <_kill_r+0x1c>
 801df16:	682b      	ldr	r3, [r5, #0]
 801df18:	b103      	cbz	r3, 801df1c <_kill_r+0x1c>
 801df1a:	6023      	str	r3, [r4, #0]
 801df1c:	bd38      	pop	{r3, r4, r5, pc}
 801df1e:	bf00      	nop
 801df20:	20000730 	.word	0x20000730

0801df24 <_getpid_r>:
 801df24:	f7f7 bb9c 	b.w	8015660 <_getpid>

0801df28 <__sread>:
 801df28:	b510      	push	{r4, lr}
 801df2a:	460c      	mov	r4, r1
 801df2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801df30:	f000 f8a0 	bl	801e074 <_read_r>
 801df34:	2800      	cmp	r0, #0
 801df36:	bfab      	itete	ge
 801df38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801df3a:	89a3      	ldrhlt	r3, [r4, #12]
 801df3c:	181b      	addge	r3, r3, r0
 801df3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801df42:	bfac      	ite	ge
 801df44:	6563      	strge	r3, [r4, #84]	; 0x54
 801df46:	81a3      	strhlt	r3, [r4, #12]
 801df48:	bd10      	pop	{r4, pc}

0801df4a <__swrite>:
 801df4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801df4e:	461f      	mov	r7, r3
 801df50:	898b      	ldrh	r3, [r1, #12]
 801df52:	05db      	lsls	r3, r3, #23
 801df54:	4605      	mov	r5, r0
 801df56:	460c      	mov	r4, r1
 801df58:	4616      	mov	r6, r2
 801df5a:	d505      	bpl.n	801df68 <__swrite+0x1e>
 801df5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801df60:	2302      	movs	r3, #2
 801df62:	2200      	movs	r2, #0
 801df64:	f000 f868 	bl	801e038 <_lseek_r>
 801df68:	89a3      	ldrh	r3, [r4, #12]
 801df6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801df6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801df72:	81a3      	strh	r3, [r4, #12]
 801df74:	4632      	mov	r2, r6
 801df76:	463b      	mov	r3, r7
 801df78:	4628      	mov	r0, r5
 801df7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801df7e:	f000 b817 	b.w	801dfb0 <_write_r>

0801df82 <__sseek>:
 801df82:	b510      	push	{r4, lr}
 801df84:	460c      	mov	r4, r1
 801df86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801df8a:	f000 f855 	bl	801e038 <_lseek_r>
 801df8e:	1c43      	adds	r3, r0, #1
 801df90:	89a3      	ldrh	r3, [r4, #12]
 801df92:	bf15      	itete	ne
 801df94:	6560      	strne	r0, [r4, #84]	; 0x54
 801df96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801df9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801df9e:	81a3      	strheq	r3, [r4, #12]
 801dfa0:	bf18      	it	ne
 801dfa2:	81a3      	strhne	r3, [r4, #12]
 801dfa4:	bd10      	pop	{r4, pc}

0801dfa6 <__sclose>:
 801dfa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dfaa:	f000 b813 	b.w	801dfd4 <_close_r>
	...

0801dfb0 <_write_r>:
 801dfb0:	b538      	push	{r3, r4, r5, lr}
 801dfb2:	4d07      	ldr	r5, [pc, #28]	; (801dfd0 <_write_r+0x20>)
 801dfb4:	4604      	mov	r4, r0
 801dfb6:	4608      	mov	r0, r1
 801dfb8:	4611      	mov	r1, r2
 801dfba:	2200      	movs	r2, #0
 801dfbc:	602a      	str	r2, [r5, #0]
 801dfbe:	461a      	mov	r2, r3
 801dfc0:	f7f7 fb8d 	bl	80156de <_write>
 801dfc4:	1c43      	adds	r3, r0, #1
 801dfc6:	d102      	bne.n	801dfce <_write_r+0x1e>
 801dfc8:	682b      	ldr	r3, [r5, #0]
 801dfca:	b103      	cbz	r3, 801dfce <_write_r+0x1e>
 801dfcc:	6023      	str	r3, [r4, #0]
 801dfce:	bd38      	pop	{r3, r4, r5, pc}
 801dfd0:	20000730 	.word	0x20000730

0801dfd4 <_close_r>:
 801dfd4:	b538      	push	{r3, r4, r5, lr}
 801dfd6:	4d06      	ldr	r5, [pc, #24]	; (801dff0 <_close_r+0x1c>)
 801dfd8:	2300      	movs	r3, #0
 801dfda:	4604      	mov	r4, r0
 801dfdc:	4608      	mov	r0, r1
 801dfde:	602b      	str	r3, [r5, #0]
 801dfe0:	f7f7 fb99 	bl	8015716 <_close>
 801dfe4:	1c43      	adds	r3, r0, #1
 801dfe6:	d102      	bne.n	801dfee <_close_r+0x1a>
 801dfe8:	682b      	ldr	r3, [r5, #0]
 801dfea:	b103      	cbz	r3, 801dfee <_close_r+0x1a>
 801dfec:	6023      	str	r3, [r4, #0]
 801dfee:	bd38      	pop	{r3, r4, r5, pc}
 801dff0:	20000730 	.word	0x20000730

0801dff4 <_fstat_r>:
 801dff4:	b538      	push	{r3, r4, r5, lr}
 801dff6:	4d07      	ldr	r5, [pc, #28]	; (801e014 <_fstat_r+0x20>)
 801dff8:	2300      	movs	r3, #0
 801dffa:	4604      	mov	r4, r0
 801dffc:	4608      	mov	r0, r1
 801dffe:	4611      	mov	r1, r2
 801e000:	602b      	str	r3, [r5, #0]
 801e002:	f7f7 fb94 	bl	801572e <_fstat>
 801e006:	1c43      	adds	r3, r0, #1
 801e008:	d102      	bne.n	801e010 <_fstat_r+0x1c>
 801e00a:	682b      	ldr	r3, [r5, #0]
 801e00c:	b103      	cbz	r3, 801e010 <_fstat_r+0x1c>
 801e00e:	6023      	str	r3, [r4, #0]
 801e010:	bd38      	pop	{r3, r4, r5, pc}
 801e012:	bf00      	nop
 801e014:	20000730 	.word	0x20000730

0801e018 <_isatty_r>:
 801e018:	b538      	push	{r3, r4, r5, lr}
 801e01a:	4d06      	ldr	r5, [pc, #24]	; (801e034 <_isatty_r+0x1c>)
 801e01c:	2300      	movs	r3, #0
 801e01e:	4604      	mov	r4, r0
 801e020:	4608      	mov	r0, r1
 801e022:	602b      	str	r3, [r5, #0]
 801e024:	f7f7 fb93 	bl	801574e <_isatty>
 801e028:	1c43      	adds	r3, r0, #1
 801e02a:	d102      	bne.n	801e032 <_isatty_r+0x1a>
 801e02c:	682b      	ldr	r3, [r5, #0]
 801e02e:	b103      	cbz	r3, 801e032 <_isatty_r+0x1a>
 801e030:	6023      	str	r3, [r4, #0]
 801e032:	bd38      	pop	{r3, r4, r5, pc}
 801e034:	20000730 	.word	0x20000730

0801e038 <_lseek_r>:
 801e038:	b538      	push	{r3, r4, r5, lr}
 801e03a:	4d07      	ldr	r5, [pc, #28]	; (801e058 <_lseek_r+0x20>)
 801e03c:	4604      	mov	r4, r0
 801e03e:	4608      	mov	r0, r1
 801e040:	4611      	mov	r1, r2
 801e042:	2200      	movs	r2, #0
 801e044:	602a      	str	r2, [r5, #0]
 801e046:	461a      	mov	r2, r3
 801e048:	f7f7 fb8c 	bl	8015764 <_lseek>
 801e04c:	1c43      	adds	r3, r0, #1
 801e04e:	d102      	bne.n	801e056 <_lseek_r+0x1e>
 801e050:	682b      	ldr	r3, [r5, #0]
 801e052:	b103      	cbz	r3, 801e056 <_lseek_r+0x1e>
 801e054:	6023      	str	r3, [r4, #0]
 801e056:	bd38      	pop	{r3, r4, r5, pc}
 801e058:	20000730 	.word	0x20000730

0801e05c <__malloc_lock>:
 801e05c:	4801      	ldr	r0, [pc, #4]	; (801e064 <__malloc_lock+0x8>)
 801e05e:	f7ff bdc7 	b.w	801dbf0 <__retarget_lock_acquire_recursive>
 801e062:	bf00      	nop
 801e064:	20000724 	.word	0x20000724

0801e068 <__malloc_unlock>:
 801e068:	4801      	ldr	r0, [pc, #4]	; (801e070 <__malloc_unlock+0x8>)
 801e06a:	f7ff bdc2 	b.w	801dbf2 <__retarget_lock_release_recursive>
 801e06e:	bf00      	nop
 801e070:	20000724 	.word	0x20000724

0801e074 <_read_r>:
 801e074:	b538      	push	{r3, r4, r5, lr}
 801e076:	4d07      	ldr	r5, [pc, #28]	; (801e094 <_read_r+0x20>)
 801e078:	4604      	mov	r4, r0
 801e07a:	4608      	mov	r0, r1
 801e07c:	4611      	mov	r1, r2
 801e07e:	2200      	movs	r2, #0
 801e080:	602a      	str	r2, [r5, #0]
 801e082:	461a      	mov	r2, r3
 801e084:	f7f7 fb0e 	bl	80156a4 <_read>
 801e088:	1c43      	adds	r3, r0, #1
 801e08a:	d102      	bne.n	801e092 <_read_r+0x1e>
 801e08c:	682b      	ldr	r3, [r5, #0]
 801e08e:	b103      	cbz	r3, 801e092 <_read_r+0x1e>
 801e090:	6023      	str	r3, [r4, #0]
 801e092:	bd38      	pop	{r3, r4, r5, pc}
 801e094:	20000730 	.word	0x20000730

0801e098 <_init>:
 801e098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e09a:	bf00      	nop
 801e09c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e09e:	bc08      	pop	{r3}
 801e0a0:	469e      	mov	lr, r3
 801e0a2:	4770      	bx	lr

0801e0a4 <_fini>:
 801e0a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e0a6:	bf00      	nop
 801e0a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e0aa:	bc08      	pop	{r3}
 801e0ac:	469e      	mov	lr, r3
 801e0ae:	4770      	bx	lr
