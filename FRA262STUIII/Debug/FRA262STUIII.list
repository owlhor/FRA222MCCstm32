
FRA262STUIII.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009200  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08009398  08009398  00019398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093b8  080093b8  00020040  2**0
                  CONTENTS
  4 .ARM          00000008  080093b8  080093b8  000193b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080093c0  080093c0  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093c0  080093c0  000193c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080093c4  080093c4  000193c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  080093c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000320  20000040  08009408  00020040  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000360  08009408  00020360  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001134b  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f0d  00000000  00000000  000313bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f88  00000000  00000000  000332c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ef8  00000000  00000000  00034250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c46  00000000  00000000  00035148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011c8c  00000000  00000000  0004bd8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009159e  00000000  00000000  0005da1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eefb8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004330  00000000  00000000  000ef008  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000040 	.word	0x20000040
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08009380 	.word	0x08009380

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000044 	.word	0x20000044
 80001d4:	08009380 	.word	0x08009380

080001d8 <__aeabi_frsub>:
 80001d8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__addsf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_fsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080001e4 <__addsf3>:
 80001e4:	0042      	lsls	r2, r0, #1
 80001e6:	bf1f      	itttt	ne
 80001e8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80001ec:	ea92 0f03 	teqne	r2, r3
 80001f0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80001f4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80001f8:	d06a      	beq.n	80002d0 <__addsf3+0xec>
 80001fa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001fe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000202:	bfc1      	itttt	gt
 8000204:	18d2      	addgt	r2, r2, r3
 8000206:	4041      	eorgt	r1, r0
 8000208:	4048      	eorgt	r0, r1
 800020a:	4041      	eorgt	r1, r0
 800020c:	bfb8      	it	lt
 800020e:	425b      	neglt	r3, r3
 8000210:	2b19      	cmp	r3, #25
 8000212:	bf88      	it	hi
 8000214:	4770      	bxhi	lr
 8000216:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800021a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800021e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000222:	bf18      	it	ne
 8000224:	4240      	negne	r0, r0
 8000226:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800022a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800022e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000232:	bf18      	it	ne
 8000234:	4249      	negne	r1, r1
 8000236:	ea92 0f03 	teq	r2, r3
 800023a:	d03f      	beq.n	80002bc <__addsf3+0xd8>
 800023c:	f1a2 0201 	sub.w	r2, r2, #1
 8000240:	fa41 fc03 	asr.w	ip, r1, r3
 8000244:	eb10 000c 	adds.w	r0, r0, ip
 8000248:	f1c3 0320 	rsb	r3, r3, #32
 800024c:	fa01 f103 	lsl.w	r1, r1, r3
 8000250:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000254:	d502      	bpl.n	800025c <__addsf3+0x78>
 8000256:	4249      	negs	r1, r1
 8000258:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800025c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000260:	d313      	bcc.n	800028a <__addsf3+0xa6>
 8000262:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000266:	d306      	bcc.n	8000276 <__addsf3+0x92>
 8000268:	0840      	lsrs	r0, r0, #1
 800026a:	ea4f 0131 	mov.w	r1, r1, rrx
 800026e:	f102 0201 	add.w	r2, r2, #1
 8000272:	2afe      	cmp	r2, #254	; 0xfe
 8000274:	d251      	bcs.n	800031a <__addsf3+0x136>
 8000276:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800027a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800027e:	bf08      	it	eq
 8000280:	f020 0001 	biceq.w	r0, r0, #1
 8000284:	ea40 0003 	orr.w	r0, r0, r3
 8000288:	4770      	bx	lr
 800028a:	0049      	lsls	r1, r1, #1
 800028c:	eb40 0000 	adc.w	r0, r0, r0
 8000290:	3a01      	subs	r2, #1
 8000292:	bf28      	it	cs
 8000294:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000298:	d2ed      	bcs.n	8000276 <__addsf3+0x92>
 800029a:	fab0 fc80 	clz	ip, r0
 800029e:	f1ac 0c08 	sub.w	ip, ip, #8
 80002a2:	ebb2 020c 	subs.w	r2, r2, ip
 80002a6:	fa00 f00c 	lsl.w	r0, r0, ip
 80002aa:	bfaa      	itet	ge
 80002ac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002b0:	4252      	neglt	r2, r2
 80002b2:	4318      	orrge	r0, r3
 80002b4:	bfbc      	itt	lt
 80002b6:	40d0      	lsrlt	r0, r2
 80002b8:	4318      	orrlt	r0, r3
 80002ba:	4770      	bx	lr
 80002bc:	f092 0f00 	teq	r2, #0
 80002c0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80002c4:	bf06      	itte	eq
 80002c6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80002ca:	3201      	addeq	r2, #1
 80002cc:	3b01      	subne	r3, #1
 80002ce:	e7b5      	b.n	800023c <__addsf3+0x58>
 80002d0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80002d4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80002d8:	bf18      	it	ne
 80002da:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002de:	d021      	beq.n	8000324 <__addsf3+0x140>
 80002e0:	ea92 0f03 	teq	r2, r3
 80002e4:	d004      	beq.n	80002f0 <__addsf3+0x10c>
 80002e6:	f092 0f00 	teq	r2, #0
 80002ea:	bf08      	it	eq
 80002ec:	4608      	moveq	r0, r1
 80002ee:	4770      	bx	lr
 80002f0:	ea90 0f01 	teq	r0, r1
 80002f4:	bf1c      	itt	ne
 80002f6:	2000      	movne	r0, #0
 80002f8:	4770      	bxne	lr
 80002fa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80002fe:	d104      	bne.n	800030a <__addsf3+0x126>
 8000300:	0040      	lsls	r0, r0, #1
 8000302:	bf28      	it	cs
 8000304:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000308:	4770      	bx	lr
 800030a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800030e:	bf3c      	itt	cc
 8000310:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000314:	4770      	bxcc	lr
 8000316:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800031a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800031e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000322:	4770      	bx	lr
 8000324:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000328:	bf16      	itet	ne
 800032a:	4608      	movne	r0, r1
 800032c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000330:	4601      	movne	r1, r0
 8000332:	0242      	lsls	r2, r0, #9
 8000334:	bf06      	itte	eq
 8000336:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800033a:	ea90 0f01 	teqeq	r0, r1
 800033e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000342:	4770      	bx	lr

08000344 <__aeabi_ui2f>:
 8000344:	f04f 0300 	mov.w	r3, #0
 8000348:	e004      	b.n	8000354 <__aeabi_i2f+0x8>
 800034a:	bf00      	nop

0800034c <__aeabi_i2f>:
 800034c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000350:	bf48      	it	mi
 8000352:	4240      	negmi	r0, r0
 8000354:	ea5f 0c00 	movs.w	ip, r0
 8000358:	bf08      	it	eq
 800035a:	4770      	bxeq	lr
 800035c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000360:	4601      	mov	r1, r0
 8000362:	f04f 0000 	mov.w	r0, #0
 8000366:	e01c      	b.n	80003a2 <__aeabi_l2f+0x2a>

08000368 <__aeabi_ul2f>:
 8000368:	ea50 0201 	orrs.w	r2, r0, r1
 800036c:	bf08      	it	eq
 800036e:	4770      	bxeq	lr
 8000370:	f04f 0300 	mov.w	r3, #0
 8000374:	e00a      	b.n	800038c <__aeabi_l2f+0x14>
 8000376:	bf00      	nop

08000378 <__aeabi_l2f>:
 8000378:	ea50 0201 	orrs.w	r2, r0, r1
 800037c:	bf08      	it	eq
 800037e:	4770      	bxeq	lr
 8000380:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000384:	d502      	bpl.n	800038c <__aeabi_l2f+0x14>
 8000386:	4240      	negs	r0, r0
 8000388:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800038c:	ea5f 0c01 	movs.w	ip, r1
 8000390:	bf02      	ittt	eq
 8000392:	4684      	moveq	ip, r0
 8000394:	4601      	moveq	r1, r0
 8000396:	2000      	moveq	r0, #0
 8000398:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800039c:	bf08      	it	eq
 800039e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80003a2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80003a6:	fabc f28c 	clz	r2, ip
 80003aa:	3a08      	subs	r2, #8
 80003ac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003b0:	db10      	blt.n	80003d4 <__aeabi_l2f+0x5c>
 80003b2:	fa01 fc02 	lsl.w	ip, r1, r2
 80003b6:	4463      	add	r3, ip
 80003b8:	fa00 fc02 	lsl.w	ip, r0, r2
 80003bc:	f1c2 0220 	rsb	r2, r2, #32
 80003c0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003c4:	fa20 f202 	lsr.w	r2, r0, r2
 80003c8:	eb43 0002 	adc.w	r0, r3, r2
 80003cc:	bf08      	it	eq
 80003ce:	f020 0001 	biceq.w	r0, r0, #1
 80003d2:	4770      	bx	lr
 80003d4:	f102 0220 	add.w	r2, r2, #32
 80003d8:	fa01 fc02 	lsl.w	ip, r1, r2
 80003dc:	f1c2 0220 	rsb	r2, r2, #32
 80003e0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80003e4:	fa21 f202 	lsr.w	r2, r1, r2
 80003e8:	eb43 0002 	adc.w	r0, r3, r2
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80003f2:	4770      	bx	lr

080003f4 <__aeabi_uldivmod>:
 80003f4:	b953      	cbnz	r3, 800040c <__aeabi_uldivmod+0x18>
 80003f6:	b94a      	cbnz	r2, 800040c <__aeabi_uldivmod+0x18>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	bf08      	it	eq
 80003fc:	2800      	cmpeq	r0, #0
 80003fe:	bf1c      	itt	ne
 8000400:	f04f 31ff 	movne.w	r1, #4294967295
 8000404:	f04f 30ff 	movne.w	r0, #4294967295
 8000408:	f000 b974 	b.w	80006f4 <__aeabi_idiv0>
 800040c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000410:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000414:	f000 f806 	bl	8000424 <__udivmoddi4>
 8000418:	f8dd e004 	ldr.w	lr, [sp, #4]
 800041c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000420:	b004      	add	sp, #16
 8000422:	4770      	bx	lr

08000424 <__udivmoddi4>:
 8000424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000428:	9d08      	ldr	r5, [sp, #32]
 800042a:	4604      	mov	r4, r0
 800042c:	468e      	mov	lr, r1
 800042e:	2b00      	cmp	r3, #0
 8000430:	d14d      	bne.n	80004ce <__udivmoddi4+0xaa>
 8000432:	428a      	cmp	r2, r1
 8000434:	4694      	mov	ip, r2
 8000436:	d969      	bls.n	800050c <__udivmoddi4+0xe8>
 8000438:	fab2 f282 	clz	r2, r2
 800043c:	b152      	cbz	r2, 8000454 <__udivmoddi4+0x30>
 800043e:	fa01 f302 	lsl.w	r3, r1, r2
 8000442:	f1c2 0120 	rsb	r1, r2, #32
 8000446:	fa20 f101 	lsr.w	r1, r0, r1
 800044a:	fa0c fc02 	lsl.w	ip, ip, r2
 800044e:	ea41 0e03 	orr.w	lr, r1, r3
 8000452:	4094      	lsls	r4, r2
 8000454:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000458:	0c21      	lsrs	r1, r4, #16
 800045a:	fbbe f6f8 	udiv	r6, lr, r8
 800045e:	fa1f f78c 	uxth.w	r7, ip
 8000462:	fb08 e316 	mls	r3, r8, r6, lr
 8000466:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800046a:	fb06 f107 	mul.w	r1, r6, r7
 800046e:	4299      	cmp	r1, r3
 8000470:	d90a      	bls.n	8000488 <__udivmoddi4+0x64>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f106 30ff 	add.w	r0, r6, #4294967295
 800047a:	f080 811f 	bcs.w	80006bc <__udivmoddi4+0x298>
 800047e:	4299      	cmp	r1, r3
 8000480:	f240 811c 	bls.w	80006bc <__udivmoddi4+0x298>
 8000484:	3e02      	subs	r6, #2
 8000486:	4463      	add	r3, ip
 8000488:	1a5b      	subs	r3, r3, r1
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000490:	fb08 3310 	mls	r3, r8, r0, r3
 8000494:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000498:	fb00 f707 	mul.w	r7, r0, r7
 800049c:	42a7      	cmp	r7, r4
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x92>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004a8:	f080 810a 	bcs.w	80006c0 <__udivmoddi4+0x29c>
 80004ac:	42a7      	cmp	r7, r4
 80004ae:	f240 8107 	bls.w	80006c0 <__udivmoddi4+0x29c>
 80004b2:	4464      	add	r4, ip
 80004b4:	3802      	subs	r0, #2
 80004b6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004ba:	1be4      	subs	r4, r4, r7
 80004bc:	2600      	movs	r6, #0
 80004be:	b11d      	cbz	r5, 80004c8 <__udivmoddi4+0xa4>
 80004c0:	40d4      	lsrs	r4, r2
 80004c2:	2300      	movs	r3, #0
 80004c4:	e9c5 4300 	strd	r4, r3, [r5]
 80004c8:	4631      	mov	r1, r6
 80004ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ce:	428b      	cmp	r3, r1
 80004d0:	d909      	bls.n	80004e6 <__udivmoddi4+0xc2>
 80004d2:	2d00      	cmp	r5, #0
 80004d4:	f000 80ef 	beq.w	80006b6 <__udivmoddi4+0x292>
 80004d8:	2600      	movs	r6, #0
 80004da:	e9c5 0100 	strd	r0, r1, [r5]
 80004de:	4630      	mov	r0, r6
 80004e0:	4631      	mov	r1, r6
 80004e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e6:	fab3 f683 	clz	r6, r3
 80004ea:	2e00      	cmp	r6, #0
 80004ec:	d14a      	bne.n	8000584 <__udivmoddi4+0x160>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d302      	bcc.n	80004f8 <__udivmoddi4+0xd4>
 80004f2:	4282      	cmp	r2, r0
 80004f4:	f200 80f9 	bhi.w	80006ea <__udivmoddi4+0x2c6>
 80004f8:	1a84      	subs	r4, r0, r2
 80004fa:	eb61 0303 	sbc.w	r3, r1, r3
 80004fe:	2001      	movs	r0, #1
 8000500:	469e      	mov	lr, r3
 8000502:	2d00      	cmp	r5, #0
 8000504:	d0e0      	beq.n	80004c8 <__udivmoddi4+0xa4>
 8000506:	e9c5 4e00 	strd	r4, lr, [r5]
 800050a:	e7dd      	b.n	80004c8 <__udivmoddi4+0xa4>
 800050c:	b902      	cbnz	r2, 8000510 <__udivmoddi4+0xec>
 800050e:	deff      	udf	#255	; 0xff
 8000510:	fab2 f282 	clz	r2, r2
 8000514:	2a00      	cmp	r2, #0
 8000516:	f040 8092 	bne.w	800063e <__udivmoddi4+0x21a>
 800051a:	eba1 010c 	sub.w	r1, r1, ip
 800051e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000522:	fa1f fe8c 	uxth.w	lr, ip
 8000526:	2601      	movs	r6, #1
 8000528:	0c20      	lsrs	r0, r4, #16
 800052a:	fbb1 f3f7 	udiv	r3, r1, r7
 800052e:	fb07 1113 	mls	r1, r7, r3, r1
 8000532:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000536:	fb0e f003 	mul.w	r0, lr, r3
 800053a:	4288      	cmp	r0, r1
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x12c>
 800053e:	eb1c 0101 	adds.w	r1, ip, r1
 8000542:	f103 38ff 	add.w	r8, r3, #4294967295
 8000546:	d202      	bcs.n	800054e <__udivmoddi4+0x12a>
 8000548:	4288      	cmp	r0, r1
 800054a:	f200 80cb 	bhi.w	80006e4 <__udivmoddi4+0x2c0>
 800054e:	4643      	mov	r3, r8
 8000550:	1a09      	subs	r1, r1, r0
 8000552:	b2a4      	uxth	r4, r4
 8000554:	fbb1 f0f7 	udiv	r0, r1, r7
 8000558:	fb07 1110 	mls	r1, r7, r0, r1
 800055c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000560:	fb0e fe00 	mul.w	lr, lr, r0
 8000564:	45a6      	cmp	lr, r4
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x156>
 8000568:	eb1c 0404 	adds.w	r4, ip, r4
 800056c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000570:	d202      	bcs.n	8000578 <__udivmoddi4+0x154>
 8000572:	45a6      	cmp	lr, r4
 8000574:	f200 80bb 	bhi.w	80006ee <__udivmoddi4+0x2ca>
 8000578:	4608      	mov	r0, r1
 800057a:	eba4 040e 	sub.w	r4, r4, lr
 800057e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000582:	e79c      	b.n	80004be <__udivmoddi4+0x9a>
 8000584:	f1c6 0720 	rsb	r7, r6, #32
 8000588:	40b3      	lsls	r3, r6
 800058a:	fa22 fc07 	lsr.w	ip, r2, r7
 800058e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000592:	fa20 f407 	lsr.w	r4, r0, r7
 8000596:	fa01 f306 	lsl.w	r3, r1, r6
 800059a:	431c      	orrs	r4, r3
 800059c:	40f9      	lsrs	r1, r7
 800059e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80005a2:	fa00 f306 	lsl.w	r3, r0, r6
 80005a6:	fbb1 f8f9 	udiv	r8, r1, r9
 80005aa:	0c20      	lsrs	r0, r4, #16
 80005ac:	fa1f fe8c 	uxth.w	lr, ip
 80005b0:	fb09 1118 	mls	r1, r9, r8, r1
 80005b4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80005b8:	fb08 f00e 	mul.w	r0, r8, lr
 80005bc:	4288      	cmp	r0, r1
 80005be:	fa02 f206 	lsl.w	r2, r2, r6
 80005c2:	d90b      	bls.n	80005dc <__udivmoddi4+0x1b8>
 80005c4:	eb1c 0101 	adds.w	r1, ip, r1
 80005c8:	f108 3aff 	add.w	sl, r8, #4294967295
 80005cc:	f080 8088 	bcs.w	80006e0 <__udivmoddi4+0x2bc>
 80005d0:	4288      	cmp	r0, r1
 80005d2:	f240 8085 	bls.w	80006e0 <__udivmoddi4+0x2bc>
 80005d6:	f1a8 0802 	sub.w	r8, r8, #2
 80005da:	4461      	add	r1, ip
 80005dc:	1a09      	subs	r1, r1, r0
 80005de:	b2a4      	uxth	r4, r4
 80005e0:	fbb1 f0f9 	udiv	r0, r1, r9
 80005e4:	fb09 1110 	mls	r1, r9, r0, r1
 80005e8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80005ec:	fb00 fe0e 	mul.w	lr, r0, lr
 80005f0:	458e      	cmp	lr, r1
 80005f2:	d908      	bls.n	8000606 <__udivmoddi4+0x1e2>
 80005f4:	eb1c 0101 	adds.w	r1, ip, r1
 80005f8:	f100 34ff 	add.w	r4, r0, #4294967295
 80005fc:	d26c      	bcs.n	80006d8 <__udivmoddi4+0x2b4>
 80005fe:	458e      	cmp	lr, r1
 8000600:	d96a      	bls.n	80006d8 <__udivmoddi4+0x2b4>
 8000602:	3802      	subs	r0, #2
 8000604:	4461      	add	r1, ip
 8000606:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800060a:	fba0 9402 	umull	r9, r4, r0, r2
 800060e:	eba1 010e 	sub.w	r1, r1, lr
 8000612:	42a1      	cmp	r1, r4
 8000614:	46c8      	mov	r8, r9
 8000616:	46a6      	mov	lr, r4
 8000618:	d356      	bcc.n	80006c8 <__udivmoddi4+0x2a4>
 800061a:	d053      	beq.n	80006c4 <__udivmoddi4+0x2a0>
 800061c:	b15d      	cbz	r5, 8000636 <__udivmoddi4+0x212>
 800061e:	ebb3 0208 	subs.w	r2, r3, r8
 8000622:	eb61 010e 	sbc.w	r1, r1, lr
 8000626:	fa01 f707 	lsl.w	r7, r1, r7
 800062a:	fa22 f306 	lsr.w	r3, r2, r6
 800062e:	40f1      	lsrs	r1, r6
 8000630:	431f      	orrs	r7, r3
 8000632:	e9c5 7100 	strd	r7, r1, [r5]
 8000636:	2600      	movs	r6, #0
 8000638:	4631      	mov	r1, r6
 800063a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800063e:	f1c2 0320 	rsb	r3, r2, #32
 8000642:	40d8      	lsrs	r0, r3
 8000644:	fa0c fc02 	lsl.w	ip, ip, r2
 8000648:	fa21 f303 	lsr.w	r3, r1, r3
 800064c:	4091      	lsls	r1, r2
 800064e:	4301      	orrs	r1, r0
 8000650:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000654:	fa1f fe8c 	uxth.w	lr, ip
 8000658:	fbb3 f0f7 	udiv	r0, r3, r7
 800065c:	fb07 3610 	mls	r6, r7, r0, r3
 8000660:	0c0b      	lsrs	r3, r1, #16
 8000662:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000666:	fb00 f60e 	mul.w	r6, r0, lr
 800066a:	429e      	cmp	r6, r3
 800066c:	fa04 f402 	lsl.w	r4, r4, r2
 8000670:	d908      	bls.n	8000684 <__udivmoddi4+0x260>
 8000672:	eb1c 0303 	adds.w	r3, ip, r3
 8000676:	f100 38ff 	add.w	r8, r0, #4294967295
 800067a:	d22f      	bcs.n	80006dc <__udivmoddi4+0x2b8>
 800067c:	429e      	cmp	r6, r3
 800067e:	d92d      	bls.n	80006dc <__udivmoddi4+0x2b8>
 8000680:	3802      	subs	r0, #2
 8000682:	4463      	add	r3, ip
 8000684:	1b9b      	subs	r3, r3, r6
 8000686:	b289      	uxth	r1, r1
 8000688:	fbb3 f6f7 	udiv	r6, r3, r7
 800068c:	fb07 3316 	mls	r3, r7, r6, r3
 8000690:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000694:	fb06 f30e 	mul.w	r3, r6, lr
 8000698:	428b      	cmp	r3, r1
 800069a:	d908      	bls.n	80006ae <__udivmoddi4+0x28a>
 800069c:	eb1c 0101 	adds.w	r1, ip, r1
 80006a0:	f106 38ff 	add.w	r8, r6, #4294967295
 80006a4:	d216      	bcs.n	80006d4 <__udivmoddi4+0x2b0>
 80006a6:	428b      	cmp	r3, r1
 80006a8:	d914      	bls.n	80006d4 <__udivmoddi4+0x2b0>
 80006aa:	3e02      	subs	r6, #2
 80006ac:	4461      	add	r1, ip
 80006ae:	1ac9      	subs	r1, r1, r3
 80006b0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80006b4:	e738      	b.n	8000528 <__udivmoddi4+0x104>
 80006b6:	462e      	mov	r6, r5
 80006b8:	4628      	mov	r0, r5
 80006ba:	e705      	b.n	80004c8 <__udivmoddi4+0xa4>
 80006bc:	4606      	mov	r6, r0
 80006be:	e6e3      	b.n	8000488 <__udivmoddi4+0x64>
 80006c0:	4618      	mov	r0, r3
 80006c2:	e6f8      	b.n	80004b6 <__udivmoddi4+0x92>
 80006c4:	454b      	cmp	r3, r9
 80006c6:	d2a9      	bcs.n	800061c <__udivmoddi4+0x1f8>
 80006c8:	ebb9 0802 	subs.w	r8, r9, r2
 80006cc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80006d0:	3801      	subs	r0, #1
 80006d2:	e7a3      	b.n	800061c <__udivmoddi4+0x1f8>
 80006d4:	4646      	mov	r6, r8
 80006d6:	e7ea      	b.n	80006ae <__udivmoddi4+0x28a>
 80006d8:	4620      	mov	r0, r4
 80006da:	e794      	b.n	8000606 <__udivmoddi4+0x1e2>
 80006dc:	4640      	mov	r0, r8
 80006de:	e7d1      	b.n	8000684 <__udivmoddi4+0x260>
 80006e0:	46d0      	mov	r8, sl
 80006e2:	e77b      	b.n	80005dc <__udivmoddi4+0x1b8>
 80006e4:	3b02      	subs	r3, #2
 80006e6:	4461      	add	r1, ip
 80006e8:	e732      	b.n	8000550 <__udivmoddi4+0x12c>
 80006ea:	4630      	mov	r0, r6
 80006ec:	e709      	b.n	8000502 <__udivmoddi4+0xde>
 80006ee:	4464      	add	r4, ip
 80006f0:	3802      	subs	r0, #2
 80006f2:	e742      	b.n	800057a <__udivmoddi4+0x156>

080006f4 <__aeabi_idiv0>:
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop

080006f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80006fc:	b084      	sub	sp, #16
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000700:	f001 fe52 	bl	80023a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000704:	f000 f8dc 	bl	80008c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000708:	f000 faf4 	bl	8000cf4 <MX_GPIO_Init>
  MX_DMA_Init();
 800070c:	f000 fad2 	bl	8000cb4 <MX_DMA_Init>
  MX_I2C1_Init();
 8000710:	f000 f93e 	bl	8000990 <MX_I2C1_Init>
  MX_TIM11_Init();
 8000714:	f000 fa7e 	bl	8000c14 <MX_TIM11_Init>
  MX_TIM2_Init();
 8000718:	f000 f996 	bl	8000a48 <MX_TIM2_Init>
  MX_TIM4_Init();
 800071c:	f000 fa04 	bl	8000b28 <MX_TIM4_Init>
  MX_I2C3_Init();
 8000720:	f000 f964 	bl	80009ec <MX_I2C3_Init>
  MX_USART2_UART_Init();
 8000724:	f000 fa9a 	bl	8000c5c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  	HAL_TIM_Base_Start_IT(&htim11); // micro timer
 8000728:	4854      	ldr	r0, [pc, #336]	; (800087c <main+0x184>)
 800072a:	f006 f963 	bl	80069f4 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start(&htim2); // Speed
 800072e:	4854      	ldr	r0, [pc, #336]	; (8000880 <main+0x188>)
 8000730:	f006 f906 	bl	8006940 <HAL_TIM_Base_Start>
    HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t*) &capturedata,
 8000734:	2310      	movs	r3, #16
 8000736:	4a53      	ldr	r2, [pc, #332]	; (8000884 <main+0x18c>)
 8000738:	2100      	movs	r1, #0
 800073a:	4851      	ldr	r0, [pc, #324]	; (8000880 <main+0x188>)
 800073c:	f006 fb20 	bl	8006d80 <HAL_TIM_IC_Start_DMA>
    			CAPTURENUM);

    //PWM Test
    HAL_TIM_Base_Start(&htim4);
 8000740:	4851      	ldr	r0, [pc, #324]	; (8000888 <main+0x190>)
 8000742:	f006 f8fd 	bl	8006940 <HAL_TIM_Base_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000746:	2100      	movs	r1, #0
 8000748:	484f      	ldr	r0, [pc, #316]	; (8000888 <main+0x190>)
 800074a:	f006 fa0f 	bl	8006b6c <HAL_TIM_PWM_Start>

    //MCP23017 setting init
    HAL_Delay(50);
 800074e:	2032      	movs	r0, #50	; 0x32
 8000750:	f001 fe9c 	bl	800248c <HAL_Delay>
    IOExpenderInit();
 8000754:	f000 fe48 	bl	80013e8 <IOExpenderInit>
	  	  //if(micros() - TimeStampGrand >= 1000){
	  		//TimeStampGrand = micros();
	  	  //}
*/
	  	  // Encoder I2CRead
	  	  if (micros()-timeStampSR >= 1000)      // don't use 1
 8000758:	f001 fb06 	bl	8001d68 <micros>
 800075c:	4602      	mov	r2, r0
 800075e:	460b      	mov	r3, r1
 8000760:	494a      	ldr	r1, [pc, #296]	; (800088c <main+0x194>)
 8000762:	6809      	ldr	r1, [r1, #0]
 8000764:	2000      	movs	r0, #0
 8000766:	60b9      	str	r1, [r7, #8]
 8000768:	60f8      	str	r0, [r7, #12]
 800076a:	68b9      	ldr	r1, [r7, #8]
 800076c:	1a54      	subs	r4, r2, r1
 800076e:	68f9      	ldr	r1, [r7, #12]
 8000770:	eb63 0501 	sbc.w	r5, r3, r1
 8000774:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 8000778:	f175 0300 	sbcs.w	r3, r5, #0
 800077c:	d312      	bcc.n	80007a4 <main+0xac>
	  	          {
	  	              timeStampSR = micros();           //set new time stamp
 800077e:	f001 faf3 	bl	8001d68 <micros>
 8000782:	4602      	mov	r2, r0
 8000784:	460b      	mov	r3, r1
 8000786:	4b41      	ldr	r3, [pc, #260]	; (800088c <main+0x194>)
 8000788:	601a      	str	r2, [r3, #0]
	  	              flag_absenc = 1;
 800078a:	4b41      	ldr	r3, [pc, #260]	; (8000890 <main+0x198>)
 800078c:	2201      	movs	r2, #1
 800078e:	701a      	strb	r2, [r3, #0]
	  	              pwr_sense = HAL_GPIO_ReadPin(Pwr_Sense_GPIO_Port, Pwr_Sense_Pin);
 8000790:	2102      	movs	r1, #2
 8000792:	4840      	ldr	r0, [pc, #256]	; (8000894 <main+0x19c>)
 8000794:	f002 fd44 	bl	8003220 <HAL_GPIO_ReadPin>
 8000798:	4603      	mov	r3, r0
 800079a:	461a      	mov	r2, r3
 800079c:	4b3e      	ldr	r3, [pc, #248]	; (8000898 <main+0x1a0>)
 800079e:	701a      	strb	r2, [r3, #0]
	  	              GrandStatumix();
 80007a0:	f000 fb82 	bl	8000ea8 <GrandStatumix>
	  	          }
	  	  AbsEncI2CReadx(RawEnBitAB);
 80007a4:	483d      	ldr	r0, [pc, #244]	; (800089c <main+0x1a4>)
 80007a6:	f000 fe35 	bl	8001414 <AbsEncI2CReadx>
	  			  RoundNumnd = deltaar*100.0*60.0;
	  			  Speedsmoothfunc(RoundNumnd);
	  		 }
	   	   */
	  	  ///////////////////// 2KHz change PWM PB6////////////////////
	  	  if(micros() - timestampPWM >= 500){
 80007aa:	f001 fadd 	bl	8001d68 <micros>
 80007ae:	4602      	mov	r2, r0
 80007b0:	460b      	mov	r3, r1
 80007b2:	493b      	ldr	r1, [pc, #236]	; (80008a0 <main+0x1a8>)
 80007b4:	6809      	ldr	r1, [r1, #0]
 80007b6:	2000      	movs	r0, #0
 80007b8:	6039      	str	r1, [r7, #0]
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	6839      	ldr	r1, [r7, #0]
 80007be:	ebb2 0801 	subs.w	r8, r2, r1
 80007c2:	6879      	ldr	r1, [r7, #4]
 80007c4:	eb63 0901 	sbc.w	r9, r3, r1
 80007c8:	f5b8 7ffa 	cmp.w	r8, #500	; 0x1f4
 80007cc:	f179 0300 	sbcs.w	r3, r9, #0
 80007d0:	d319      	bcc.n	8000806 <main+0x10e>
	  		  	  timestampPWM = micros(); // stamp
 80007d2:	f001 fac9 	bl	8001d68 <micros>
 80007d6:	4602      	mov	r2, r0
 80007d8:	460b      	mov	r3, r1
 80007da:	4b31      	ldr	r3, [pc, #196]	; (80008a0 <main+0x1a8>)
 80007dc:	601a      	str	r2, [r3, #0]
	  	  		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, PWMOut); // dutycycle
 80007de:	4b31      	ldr	r3, [pc, #196]	; (80008a4 <main+0x1ac>)
 80007e0:	881a      	ldrh	r2, [r3, #0]
 80007e2:	4b29      	ldr	r3, [pc, #164]	; (8000888 <main+0x190>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	635a      	str	r2, [r3, #52]	; 0x34
	  	  		  //__HAL_TIM_SET_PRESCALER(&htim4, pscalr); // Set freq of pwm
	  	  		  //ADC_Target = ADCFeedx[1].datt;
	  	  		if (mot_dirctn == 0){
 80007e8:	4b2f      	ldr	r3, [pc, #188]	; (80008a8 <main+0x1b0>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d105      	bne.n	80007fc <main+0x104>
	  	  		HAL_GPIO_WritePin(Mot_dir_GPIO_Port, Mot_dir_Pin, GPIO_PIN_RESET);
 80007f0:	2200      	movs	r2, #0
 80007f2:	2104      	movs	r1, #4
 80007f4:	4827      	ldr	r0, [pc, #156]	; (8000894 <main+0x19c>)
 80007f6:	f002 fd2b 	bl	8003250 <HAL_GPIO_WritePin>
 80007fa:	e004      	b.n	8000806 <main+0x10e>
	  	  		}else{
	  	  		HAL_GPIO_WritePin(Mot_dir_GPIO_Port, Mot_dir_Pin, GPIO_PIN_SET);
 80007fc:	2201      	movs	r2, #1
 80007fe:	2104      	movs	r1, #4
 8000800:	4824      	ldr	r0, [pc, #144]	; (8000894 <main+0x19c>)
 8000802:	f002 fd25 	bl	8003250 <HAL_GPIO_WritePin>
	  	  		}

	  	  	  }

	  	 if (grandState ==  work){
 8000806:	4b29      	ldr	r3, [pc, #164]	; (80008ac <main+0x1b4>)
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	2b01      	cmp	r3, #1
 800080c:	d103      	bne.n	8000816 <main+0x11e>
	  		 PIDzero();
 800080e:	f000 fcfd 	bl	800120c <PIDzero>
	  		 MotDrvCytron();
 8000812:	f000 fd85 	bl	8001320 <MotDrvCytron>
	  	 }

	  	 //////////// End Effector /////////////////////
	  	 Efft_activate(); // Activate by flag_efftActi = 1;
 8000816:	f000 fe59 	bl	80014cc <Efft_activate>
	  	 Efft_read(&efft_status);
 800081a:	4825      	ldr	r0, [pc, #148]	; (80008b0 <main+0x1b8>)
 800081c:	f000 fe9c 	bl	8001558 <Efft_read>
	  	 //// trig_efftRead up for 10 times afrer shoot / trig at shoot state
	  	 if(trig_efftRead != 0 && micros() - timestamp_efft >= 50000){
 8000820:	4b24      	ldr	r3, [pc, #144]	; (80008b4 <main+0x1bc>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d01e      	beq.n	8000866 <main+0x16e>
 8000828:	f001 fa9e 	bl	8001d68 <micros>
 800082c:	4b22      	ldr	r3, [pc, #136]	; (80008b8 <main+0x1c0>)
 800082e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000832:	ebb0 0a02 	subs.w	sl, r0, r2
 8000836:	eb61 0b03 	sbc.w	fp, r1, r3
 800083a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800083e:	459a      	cmp	sl, r3
 8000840:	f17b 0300 	sbcs.w	r3, fp, #0
 8000844:	d30f      	bcc.n	8000866 <main+0x16e>
	  		 timestamp_efft = micros();
 8000846:	f001 fa8f 	bl	8001d68 <micros>
 800084a:	4602      	mov	r2, r0
 800084c:	460b      	mov	r3, r1
 800084e:	491a      	ldr	r1, [pc, #104]	; (80008b8 <main+0x1c0>)
 8000850:	e9c1 2300 	strd	r2, r3, [r1]
	  		 flag_efftRead = 1;
 8000854:	4b19      	ldr	r3, [pc, #100]	; (80008bc <main+0x1c4>)
 8000856:	2201      	movs	r2, #1
 8000858:	701a      	strb	r2, [r3, #0]
	  		 trig_efftRead++;
 800085a:	4b16      	ldr	r3, [pc, #88]	; (80008b4 <main+0x1bc>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	3301      	adds	r3, #1
 8000860:	b2da      	uxtb	r2, r3
 8000862:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <main+0x1bc>)
 8000864:	701a      	strb	r2, [r3, #0]

	  	 }
	  	 //// disable this when run with laserwork
	  	 if(trig_efftRead >= 12){
 8000866:	4b13      	ldr	r3, [pc, #76]	; (80008b4 <main+0x1bc>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	2b0b      	cmp	r3, #11
 800086c:	d902      	bls.n	8000874 <main+0x17c>
	  		 trig_efftRead = 0;
 800086e:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <main+0x1bc>)
 8000870:	2200      	movs	r2, #0
 8000872:	701a      	strb	r2, [r3, #0]
	  	 	 //flag_efftRead = 0;
	  		 } // read xx times

	  	 ////////// UART UI Base System //////////////
	  	 UARTRecieveIT();
 8000874:	f001 f9de 	bl	8001c34 <UARTRecieveIT>
	  	  if (micros()-timeStampSR >= 1000)      // don't use 1
 8000878:	e76e      	b.n	8000758 <main+0x60>
 800087a:	bf00      	nop
 800087c:	20000194 	.word	0x20000194
 8000880:	20000104 	.word	0x20000104
 8000884:	200002a0 	.word	0x200002a0
 8000888:	2000014c 	.word	0x2000014c
 800088c:	20000294 	.word	0x20000294
 8000890:	2000029e 	.word	0x2000029e
 8000894:	40020400 	.word	0x40020400
 8000898:	20000281 	.word	0x20000281
 800089c:	20000298 	.word	0x20000298
 80008a0:	200002e0 	.word	0x200002e0
 80008a4:	2000000a 	.word	0x2000000a
 80008a8:	200002e4 	.word	0x200002e4
 80008ac:	20000280 	.word	0x20000280
 80008b0:	20000310 	.word	0x20000310
 80008b4:	20000313 	.word	0x20000313
 80008b8:	20000318 	.word	0x20000318
 80008bc:	20000312 	.word	0x20000312

080008c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b094      	sub	sp, #80	; 0x50
 80008c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008c6:	f107 0320 	add.w	r3, r7, #32
 80008ca:	2230      	movs	r2, #48	; 0x30
 80008cc:	2100      	movs	r1, #0
 80008ce:	4618      	mov	r0, r3
 80008d0:	f008 fd4e 	bl	8009370 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d4:	f107 030c 	add.w	r3, r7, #12
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]
 80008e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e4:	2300      	movs	r3, #0
 80008e6:	60bb      	str	r3, [r7, #8]
 80008e8:	4b27      	ldr	r3, [pc, #156]	; (8000988 <SystemClock_Config+0xc8>)
 80008ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ec:	4a26      	ldr	r2, [pc, #152]	; (8000988 <SystemClock_Config+0xc8>)
 80008ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f2:	6413      	str	r3, [r2, #64]	; 0x40
 80008f4:	4b24      	ldr	r3, [pc, #144]	; (8000988 <SystemClock_Config+0xc8>)
 80008f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008fc:	60bb      	str	r3, [r7, #8]
 80008fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000900:	2300      	movs	r3, #0
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	4b21      	ldr	r3, [pc, #132]	; (800098c <SystemClock_Config+0xcc>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a20      	ldr	r2, [pc, #128]	; (800098c <SystemClock_Config+0xcc>)
 800090a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800090e:	6013      	str	r3, [r2, #0]
 8000910:	4b1e      	ldr	r3, [pc, #120]	; (800098c <SystemClock_Config+0xcc>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000918:	607b      	str	r3, [r7, #4]
 800091a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800091c:	2302      	movs	r3, #2
 800091e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000920:	2301      	movs	r3, #1
 8000922:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000924:	2310      	movs	r3, #16
 8000926:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000928:	2302      	movs	r3, #2
 800092a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800092c:	2300      	movs	r3, #0
 800092e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000930:	2308      	movs	r3, #8
 8000932:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000934:	2364      	movs	r3, #100	; 0x64
 8000936:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000938:	2302      	movs	r3, #2
 800093a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800093c:	2304      	movs	r3, #4
 800093e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000940:	f107 0320 	add.w	r3, r7, #32
 8000944:	4618      	mov	r0, r3
 8000946:	f005 fb13 	bl	8005f70 <HAL_RCC_OscConfig>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000950:	f001 fa40 	bl	8001dd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000954:	230f      	movs	r3, #15
 8000956:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000958:	2302      	movs	r3, #2
 800095a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800095c:	2300      	movs	r3, #0
 800095e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000960:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000964:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000966:	2300      	movs	r3, #0
 8000968:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800096a:	f107 030c 	add.w	r3, r7, #12
 800096e:	2103      	movs	r1, #3
 8000970:	4618      	mov	r0, r3
 8000972:	f005 fd75 	bl	8006460 <HAL_RCC_ClockConfig>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800097c:	f001 fa2a 	bl	8001dd4 <Error_Handler>
  }
}
 8000980:	bf00      	nop
 8000982:	3750      	adds	r7, #80	; 0x50
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40023800 	.word	0x40023800
 800098c:	40007000 	.word	0x40007000

08000990 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000994:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <MX_I2C1_Init+0x50>)
 8000996:	4a13      	ldr	r2, [pc, #76]	; (80009e4 <MX_I2C1_Init+0x54>)
 8000998:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800099a:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <MX_I2C1_Init+0x50>)
 800099c:	4a12      	ldr	r2, [pc, #72]	; (80009e8 <MX_I2C1_Init+0x58>)
 800099e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009a0:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <MX_I2C1_Init+0x50>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <MX_I2C1_Init+0x50>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009ac:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <MX_I2C1_Init+0x50>)
 80009ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009b4:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <MX_I2C1_Init+0x50>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009ba:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <MX_I2C1_Init+0x50>)
 80009bc:	2200      	movs	r2, #0
 80009be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009c0:	4b07      	ldr	r3, [pc, #28]	; (80009e0 <MX_I2C1_Init+0x50>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009c6:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <MX_I2C1_Init+0x50>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009cc:	4804      	ldr	r0, [pc, #16]	; (80009e0 <MX_I2C1_Init+0x50>)
 80009ce:	f002 fc71 	bl	80032b4 <HAL_I2C_Init>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009d8:	f001 f9fc 	bl	8001dd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	2000005c 	.word	0x2000005c
 80009e4:	40005400 	.word	0x40005400
 80009e8:	00061a80 	.word	0x00061a80

080009ec <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80009f0:	4b12      	ldr	r3, [pc, #72]	; (8000a3c <MX_I2C3_Init+0x50>)
 80009f2:	4a13      	ldr	r2, [pc, #76]	; (8000a40 <MX_I2C3_Init+0x54>)
 80009f4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 80009f6:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <MX_I2C3_Init+0x50>)
 80009f8:	4a12      	ldr	r2, [pc, #72]	; (8000a44 <MX_I2C3_Init+0x58>)
 80009fa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009fc:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <MX_I2C3_Init+0x50>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000a02:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <MX_I2C3_Init+0x50>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a08:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <MX_I2C3_Init+0x50>)
 8000a0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a0e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a10:	4b0a      	ldr	r3, [pc, #40]	; (8000a3c <MX_I2C3_Init+0x50>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000a16:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <MX_I2C3_Init+0x50>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a1c:	4b07      	ldr	r3, [pc, #28]	; (8000a3c <MX_I2C3_Init+0x50>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a22:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <MX_I2C3_Init+0x50>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000a28:	4804      	ldr	r0, [pc, #16]	; (8000a3c <MX_I2C3_Init+0x50>)
 8000a2a:	f002 fc43 	bl	80032b4 <HAL_I2C_Init>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000a34:	f001 f9ce 	bl	8001dd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	200000b0 	.word	0x200000b0
 8000a40:	40005c00 	.word	0x40005c00
 8000a44:	00061a80 	.word	0x00061a80

08000a48 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08a      	sub	sp, #40	; 0x28
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a4e:	f107 0318 	add.w	r3, r7, #24
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]
 8000a58:	609a      	str	r2, [r3, #8]
 8000a5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a5c:	f107 0310 	add.w	r3, r7, #16
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000a66:	463b      	mov	r3, r7
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a72:	4b2c      	ldr	r3, [pc, #176]	; (8000b24 <MX_TIM2_Init+0xdc>)
 8000a74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a78:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8000a7a:	4b2a      	ldr	r3, [pc, #168]	; (8000b24 <MX_TIM2_Init+0xdc>)
 8000a7c:	2263      	movs	r2, #99	; 0x63
 8000a7e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a80:	4b28      	ldr	r3, [pc, #160]	; (8000b24 <MX_TIM2_Init+0xdc>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000a86:	4b27      	ldr	r3, [pc, #156]	; (8000b24 <MX_TIM2_Init+0xdc>)
 8000a88:	f04f 32ff 	mov.w	r2, #4294967295
 8000a8c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a8e:	4b25      	ldr	r3, [pc, #148]	; (8000b24 <MX_TIM2_Init+0xdc>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a94:	4b23      	ldr	r3, [pc, #140]	; (8000b24 <MX_TIM2_Init+0xdc>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a9a:	4822      	ldr	r0, [pc, #136]	; (8000b24 <MX_TIM2_Init+0xdc>)
 8000a9c:	f005 ff00 	bl	80068a0 <HAL_TIM_Base_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8000aa6:	f001 f995 	bl	8001dd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aae:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ab0:	f107 0318 	add.w	r3, r7, #24
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	481b      	ldr	r0, [pc, #108]	; (8000b24 <MX_TIM2_Init+0xdc>)
 8000ab8:	f006 fd64 	bl	8007584 <HAL_TIM_ConfigClockSource>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000ac2:	f001 f987 	bl	8001dd4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000ac6:	4817      	ldr	r0, [pc, #92]	; (8000b24 <MX_TIM2_Init+0xdc>)
 8000ac8:	f006 f900 	bl	8006ccc <HAL_TIM_IC_Init>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000ad2:	f001 f97f 	bl	8001dd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ada:	2300      	movs	r3, #0
 8000adc:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ade:	f107 0310 	add.w	r3, r7, #16
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	480f      	ldr	r0, [pc, #60]	; (8000b24 <MX_TIM2_Init+0xdc>)
 8000ae6:	f007 fb1b 	bl	8008120 <HAL_TIMEx_MasterConfigSynchronization>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8000af0:	f001 f970 	bl	8001dd4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000af4:	2300      	movs	r3, #0
 8000af6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000af8:	2301      	movs	r3, #1
 8000afa:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000afc:	2300      	movs	r3, #0
 8000afe:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000b00:	2300      	movs	r3, #0
 8000b02:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000b04:	463b      	mov	r3, r7
 8000b06:	2200      	movs	r2, #0
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4806      	ldr	r0, [pc, #24]	; (8000b24 <MX_TIM2_Init+0xdc>)
 8000b0c:	f006 fbdc 	bl	80072c8 <HAL_TIM_IC_ConfigChannel>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8000b16:	f001 f95d 	bl	8001dd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b1a:	bf00      	nop
 8000b1c:	3728      	adds	r7, #40	; 0x28
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20000104 	.word	0x20000104

08000b28 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08e      	sub	sp, #56	; 0x38
 8000b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	605a      	str	r2, [r3, #4]
 8000b38:	609a      	str	r2, [r3, #8]
 8000b3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b3c:	f107 0320 	add.w	r3, r7, #32
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b46:	1d3b      	adds	r3, r7, #4
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
 8000b54:	615a      	str	r2, [r3, #20]
 8000b56:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000b58:	4b2c      	ldr	r3, [pc, #176]	; (8000c0c <MX_TIM4_Init+0xe4>)
 8000b5a:	4a2d      	ldr	r2, [pc, #180]	; (8000c10 <MX_TIM4_Init+0xe8>)
 8000b5c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000b5e:	4b2b      	ldr	r3, [pc, #172]	; (8000c0c <MX_TIM4_Init+0xe4>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b64:	4b29      	ldr	r3, [pc, #164]	; (8000c0c <MX_TIM4_Init+0xe4>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8000b6a:	4b28      	ldr	r3, [pc, #160]	; (8000c0c <MX_TIM4_Init+0xe4>)
 8000b6c:	f242 720f 	movw	r2, #9999	; 0x270f
 8000b70:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b72:	4b26      	ldr	r3, [pc, #152]	; (8000c0c <MX_TIM4_Init+0xe4>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b78:	4b24      	ldr	r3, [pc, #144]	; (8000c0c <MX_TIM4_Init+0xe4>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000b7e:	4823      	ldr	r0, [pc, #140]	; (8000c0c <MX_TIM4_Init+0xe4>)
 8000b80:	f005 fe8e 	bl	80068a0 <HAL_TIM_Base_Init>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000b8a:	f001 f923 	bl	8001dd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b92:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000b94:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b98:	4619      	mov	r1, r3
 8000b9a:	481c      	ldr	r0, [pc, #112]	; (8000c0c <MX_TIM4_Init+0xe4>)
 8000b9c:	f006 fcf2 	bl	8007584 <HAL_TIM_ConfigClockSource>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000ba6:	f001 f915 	bl	8001dd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000baa:	4818      	ldr	r0, [pc, #96]	; (8000c0c <MX_TIM4_Init+0xe4>)
 8000bac:	f005 ff84 	bl	8006ab8 <HAL_TIM_PWM_Init>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000bb6:	f001 f90d 	bl	8001dd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000bc2:	f107 0320 	add.w	r3, r7, #32
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4810      	ldr	r0, [pc, #64]	; (8000c0c <MX_TIM4_Init+0xe4>)
 8000bca:	f007 faa9 	bl	8008120 <HAL_TIMEx_MasterConfigSynchronization>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000bd4:	f001 f8fe 	bl	8001dd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bd8:	2360      	movs	r3, #96	; 0x60
 8000bda:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000be0:	2300      	movs	r3, #0
 8000be2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000be4:	2300      	movs	r3, #0
 8000be6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000be8:	1d3b      	adds	r3, r7, #4
 8000bea:	2200      	movs	r2, #0
 8000bec:	4619      	mov	r1, r3
 8000bee:	4807      	ldr	r0, [pc, #28]	; (8000c0c <MX_TIM4_Init+0xe4>)
 8000bf0:	f006 fc06 	bl	8007400 <HAL_TIM_PWM_ConfigChannel>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000bfa:	f001 f8eb 	bl	8001dd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000bfe:	4803      	ldr	r0, [pc, #12]	; (8000c0c <MX_TIM4_Init+0xe4>)
 8000c00:	f001 fa84 	bl	800210c <HAL_TIM_MspPostInit>

}
 8000c04:	bf00      	nop
 8000c06:	3738      	adds	r7, #56	; 0x38
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	2000014c 	.word	0x2000014c
 8000c10:	40000800 	.word	0x40000800

08000c14 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000c18:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <MX_TIM11_Init+0x40>)
 8000c1a:	4a0f      	ldr	r2, [pc, #60]	; (8000c58 <MX_TIM11_Init+0x44>)
 8000c1c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8000c1e:	4b0d      	ldr	r3, [pc, #52]	; (8000c54 <MX_TIM11_Init+0x40>)
 8000c20:	2263      	movs	r2, #99	; 0x63
 8000c22:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c24:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <MX_TIM11_Init+0x40>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8000c2a:	4b0a      	ldr	r3, [pc, #40]	; (8000c54 <MX_TIM11_Init+0x40>)
 8000c2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c30:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c32:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <MX_TIM11_Init+0x40>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c38:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <MX_TIM11_Init+0x40>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000c3e:	4805      	ldr	r0, [pc, #20]	; (8000c54 <MX_TIM11_Init+0x40>)
 8000c40:	f005 fe2e 	bl	80068a0 <HAL_TIM_Base_Init>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8000c4a:	f001 f8c3 	bl	8001dd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20000194 	.word	0x20000194
 8000c58:	40014800 	.word	0x40014800

08000c5c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c60:	4b12      	ldr	r3, [pc, #72]	; (8000cac <MX_USART2_UART_Init+0x50>)
 8000c62:	4a13      	ldr	r2, [pc, #76]	; (8000cb0 <MX_USART2_UART_Init+0x54>)
 8000c64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 8000c66:	4b11      	ldr	r3, [pc, #68]	; (8000cac <MX_USART2_UART_Init+0x50>)
 8000c68:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 8000c6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8000c6e:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <MX_USART2_UART_Init+0x50>)
 8000c70:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c74:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c76:	4b0d      	ldr	r3, [pc, #52]	; (8000cac <MX_USART2_UART_Init+0x50>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8000c7c:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <MX_USART2_UART_Init+0x50>)
 8000c7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c84:	4b09      	ldr	r3, [pc, #36]	; (8000cac <MX_USART2_UART_Init+0x50>)
 8000c86:	220c      	movs	r2, #12
 8000c88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c8a:	4b08      	ldr	r3, [pc, #32]	; (8000cac <MX_USART2_UART_Init+0x50>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <MX_USART2_UART_Init+0x50>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c96:	4805      	ldr	r0, [pc, #20]	; (8000cac <MX_USART2_UART_Init+0x50>)
 8000c98:	f007 fac4 	bl	8008224 <HAL_UART_Init>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8000ca2:	f001 f897 	bl	8001dd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	2000023c 	.word	0x2000023c
 8000cb0:	40004400 	.word	0x40004400

08000cb4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	607b      	str	r3, [r7, #4]
 8000cbe:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <MX_DMA_Init+0x3c>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4a0b      	ldr	r2, [pc, #44]	; (8000cf0 <MX_DMA_Init+0x3c>)
 8000cc4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cca:	4b09      	ldr	r3, [pc, #36]	; (8000cf0 <MX_DMA_Init+0x3c>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cd2:	607b      	str	r3, [r7, #4]
 8000cd4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2100      	movs	r1, #0
 8000cda:	2010      	movs	r0, #16
 8000cdc:	f001 fcd5 	bl	800268a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000ce0:	2010      	movs	r0, #16
 8000ce2:	f001 fcee 	bl	80026c2 <HAL_NVIC_EnableIRQ>

}
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40023800 	.word	0x40023800

08000cf4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08a      	sub	sp, #40	; 0x28
 8000cf8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfa:	f107 0314 	add.w	r3, r7, #20
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]
 8000d06:	60da      	str	r2, [r3, #12]
 8000d08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	613b      	str	r3, [r7, #16]
 8000d0e:	4b61      	ldr	r3, [pc, #388]	; (8000e94 <MX_GPIO_Init+0x1a0>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	4a60      	ldr	r2, [pc, #384]	; (8000e94 <MX_GPIO_Init+0x1a0>)
 8000d14:	f043 0304 	orr.w	r3, r3, #4
 8000d18:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1a:	4b5e      	ldr	r3, [pc, #376]	; (8000e94 <MX_GPIO_Init+0x1a0>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	f003 0304 	and.w	r3, r3, #4
 8000d22:	613b      	str	r3, [r7, #16]
 8000d24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	60fb      	str	r3, [r7, #12]
 8000d2a:	4b5a      	ldr	r3, [pc, #360]	; (8000e94 <MX_GPIO_Init+0x1a0>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	4a59      	ldr	r2, [pc, #356]	; (8000e94 <MX_GPIO_Init+0x1a0>)
 8000d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d34:	6313      	str	r3, [r2, #48]	; 0x30
 8000d36:	4b57      	ldr	r3, [pc, #348]	; (8000e94 <MX_GPIO_Init+0x1a0>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	60bb      	str	r3, [r7, #8]
 8000d46:	4b53      	ldr	r3, [pc, #332]	; (8000e94 <MX_GPIO_Init+0x1a0>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	4a52      	ldr	r2, [pc, #328]	; (8000e94 <MX_GPIO_Init+0x1a0>)
 8000d4c:	f043 0301 	orr.w	r3, r3, #1
 8000d50:	6313      	str	r3, [r2, #48]	; 0x30
 8000d52:	4b50      	ldr	r3, [pc, #320]	; (8000e94 <MX_GPIO_Init+0x1a0>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	60bb      	str	r3, [r7, #8]
 8000d5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	607b      	str	r3, [r7, #4]
 8000d62:	4b4c      	ldr	r3, [pc, #304]	; (8000e94 <MX_GPIO_Init+0x1a0>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	4a4b      	ldr	r2, [pc, #300]	; (8000e94 <MX_GPIO_Init+0x1a0>)
 8000d68:	f043 0302 	orr.w	r3, r3, #2
 8000d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6e:	4b49      	ldr	r3, [pc, #292]	; (8000e94 <MX_GPIO_Init+0x1a0>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	f003 0302 	and.w	r3, r3, #2
 8000d76:	607b      	str	r3, [r7, #4]
 8000d78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	603b      	str	r3, [r7, #0]
 8000d7e:	4b45      	ldr	r3, [pc, #276]	; (8000e94 <MX_GPIO_Init+0x1a0>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	4a44      	ldr	r2, [pc, #272]	; (8000e94 <MX_GPIO_Init+0x1a0>)
 8000d84:	f043 0308 	orr.w	r3, r3, #8
 8000d88:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8a:	4b42      	ldr	r3, [pc, #264]	; (8000e94 <MX_GPIO_Init+0x1a0>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	f003 0308 	and.w	r3, r3, #8
 8000d92:	603b      	str	r3, [r7, #0]
 8000d94:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d96:	2200      	movs	r2, #0
 8000d98:	2120      	movs	r1, #32
 8000d9a:	483f      	ldr	r0, [pc, #252]	; (8000e98 <MX_GPIO_Init+0x1a4>)
 8000d9c:	f002 fa58 	bl	8003250 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Mot_dir_Pin|PLamp_Green_Pin|PLamp_Blue_Pin|PLamp_Yellow_Pin, GPIO_PIN_RESET);
 8000da0:	2200      	movs	r2, #0
 8000da2:	f24e 0104 	movw	r1, #57348	; 0xe004
 8000da6:	483d      	ldr	r0, [pc, #244]	; (8000e9c <MX_GPIO_Init+0x1a8>)
 8000da8:	f002 fa52 	bl	8003250 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin EXTI11_EMER_Pin */
  GPIO_InitStruct.Pin = B1_Pin|EXTI11_EMER_Pin;
 8000dac:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000db0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000db2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000db6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dbc:	f107 0314 	add.w	r3, r7, #20
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4837      	ldr	r0, [pc, #220]	; (8000ea0 <MX_GPIO_Init+0x1ac>)
 8000dc4:	f002 f8a8 	bl	8002f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000dc8:	2320      	movs	r3, #32
 8000dca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000dd8:	f107 0314 	add.w	r3, r7, #20
 8000ddc:	4619      	mov	r1, r3
 8000dde:	482e      	ldr	r0, [pc, #184]	; (8000e98 <MX_GPIO_Init+0x1a4>)
 8000de0:	f002 f89a 	bl	8002f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : Pwr_Sense_Pin */
  GPIO_InitStruct.Pin = Pwr_Sense_Pin;
 8000de4:	2302      	movs	r3, #2
 8000de6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000de8:	2300      	movs	r3, #0
 8000dea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Pwr_Sense_GPIO_Port, &GPIO_InitStruct);
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	4619      	mov	r1, r3
 8000df6:	4829      	ldr	r0, [pc, #164]	; (8000e9c <MX_GPIO_Init+0x1a8>)
 8000df8:	f002 f88e 	bl	8002f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : Mot_dir_Pin PLamp_Green_Pin PLamp_Blue_Pin PLamp_Yellow_Pin */
  GPIO_InitStruct.Pin = Mot_dir_Pin|PLamp_Green_Pin|PLamp_Blue_Pin|PLamp_Yellow_Pin;
 8000dfc:	f24e 0304 	movw	r3, #57348	; 0xe004
 8000e00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e02:	2301      	movs	r3, #1
 8000e04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e0e:	f107 0314 	add.w	r3, r7, #20
 8000e12:	4619      	mov	r1, r3
 8000e14:	4821      	ldr	r0, [pc, #132]	; (8000e9c <MX_GPIO_Init+0x1a8>)
 8000e16:	f002 f87f 	bl	8002f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXTI10_Stop_Pin */
  GPIO_InitStruct.Pin = EXTI10_Stop_Pin;
 8000e1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e20:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EXTI10_Stop_GPIO_Port, &GPIO_InitStruct);
 8000e2a:	f107 0314 	add.w	r3, r7, #20
 8000e2e:	4619      	mov	r1, r3
 8000e30:	481b      	ldr	r0, [pc, #108]	; (8000ea0 <MX_GPIO_Init+0x1ac>)
 8000e32:	f002 f871 	bl	8002f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : Stop_Sense_Pin */
  GPIO_InitStruct.Pin = Stop_Sense_Pin;
 8000e36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Stop_Sense_GPIO_Port, &GPIO_InitStruct);
 8000e44:	f107 0314 	add.w	r3, r7, #20
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4815      	ldr	r0, [pc, #84]	; (8000ea0 <MX_GPIO_Init+0x1ac>)
 8000e4c:	f002 f864 	bl	8002f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXTI2_SetZero_Pin */
  GPIO_InitStruct.Pin = EXTI2_SetZero_Pin;
 8000e50:	2304      	movs	r3, #4
 8000e52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e54:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EXTI2_SetZero_GPIO_Port, &GPIO_InitStruct);
 8000e5e:	f107 0314 	add.w	r3, r7, #20
 8000e62:	4619      	mov	r1, r3
 8000e64:	480f      	ldr	r0, [pc, #60]	; (8000ea4 <MX_GPIO_Init+0x1b0>)
 8000e66:	f002 f857 	bl	8002f18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	2008      	movs	r0, #8
 8000e70:	f001 fc0b 	bl	800268a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000e74:	2008      	movs	r0, #8
 8000e76:	f001 fc24 	bl	80026c2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	2028      	movs	r0, #40	; 0x28
 8000e80:	f001 fc03 	bl	800268a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e84:	2028      	movs	r0, #40	; 0x28
 8000e86:	f001 fc1c 	bl	80026c2 <HAL_NVIC_EnableIRQ>

}
 8000e8a:	bf00      	nop
 8000e8c:	3728      	adds	r7, #40	; 0x28
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40023800 	.word	0x40023800
 8000e98:	40020000 	.word	0x40020000
 8000e9c:	40020400 	.word	0x40020400
 8000ea0:	40020800 	.word	0x40020800
 8000ea4:	40020c00 	.word	0x40020c00

08000ea8 <GrandStatumix>:

/* USER CODE BEGIN 4 */
////////// Grand State //////////////////////////////////////////////////////
void GrandStatumix(){
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
	if (grandState != Ready){
 8000eac:	4b63      	ldr	r3, [pc, #396]	; (800103c <GrandStatumix+0x194>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d005      	beq.n	8000ec0 <GrandStatumix+0x18>
		HAL_GPIO_WritePin(PLamp_Green_GPIO_Port, PLamp_Green_Pin, GPIO_PIN_RESET);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eba:	4861      	ldr	r0, [pc, #388]	; (8001040 <GrandStatumix+0x198>)
 8000ebc:	f002 f9c8 	bl	8003250 <HAL_GPIO_WritePin>
	}
	if (grandState != work){
 8000ec0:	4b5e      	ldr	r3, [pc, #376]	; (800103c <GrandStatumix+0x194>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d005      	beq.n	8000ed4 <GrandStatumix+0x2c>
			HAL_GPIO_WritePin(PLamp_Blue_GPIO_Port, PLamp_Blue_Pin, GPIO_PIN_RESET);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ece:	485c      	ldr	r0, [pc, #368]	; (8001040 <GrandStatumix+0x198>)
 8000ed0:	f002 f9be 	bl	8003250 <HAL_GPIO_WritePin>
		}
	if (grandState != stop || grandState != stopnd){
 8000ed4:	4b59      	ldr	r3, [pc, #356]	; (800103c <GrandStatumix+0x194>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	d103      	bne.n	8000ee4 <GrandStatumix+0x3c>
 8000edc:	4b57      	ldr	r3, [pc, #348]	; (800103c <GrandStatumix+0x194>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	2b04      	cmp	r3, #4
 8000ee2:	d005      	beq.n	8000ef0 <GrandStatumix+0x48>
				HAL_GPIO_WritePin(PLamp_Yellow_GPIO_Port, PLamp_Yellow_Pin, GPIO_PIN_RESET);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000eea:	4855      	ldr	r0, [pc, #340]	; (8001040 <GrandStatumix+0x198>)
 8000eec:	f002 f9b0 	bl	8003250 <HAL_GPIO_WritePin>
			}

	stop_sense = HAL_GPIO_ReadPin(Stop_Sense_GPIO_Port, Stop_Sense_Pin);
 8000ef0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ef4:	4853      	ldr	r0, [pc, #332]	; (8001044 <GrandStatumix+0x19c>)
 8000ef6:	f002 f993 	bl	8003220 <HAL_GPIO_ReadPin>
 8000efa:	4603      	mov	r3, r0
 8000efc:	461a      	mov	r2, r3
 8000efe:	4b52      	ldr	r3, [pc, #328]	; (8001048 <GrandStatumix+0x1a0>)
 8000f00:	701a      	strb	r2, [r3, #0]


	switch(grandState){
 8000f02:	4b4e      	ldr	r3, [pc, #312]	; (800103c <GrandStatumix+0x194>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	3b01      	subs	r3, #1
 8000f08:	2b03      	cmp	r3, #3
 8000f0a:	d80b      	bhi.n	8000f24 <GrandStatumix+0x7c>
 8000f0c:	a201      	add	r2, pc, #4	; (adr r2, 8000f14 <GrandStatumix+0x6c>)
 8000f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f12:	bf00      	nop
 8000f14:	08000f65 	.word	0x08000f65
 8000f18:	08000fa3 	.word	0x08000fa3
 8000f1c:	08001009 	.word	0x08001009
 8000f20:	08000fdf 	.word	0x08000fdf
	default:
	case Ready:
		HAL_GPIO_WritePin(PLamp_Green_GPIO_Port, PLamp_Green_Pin, GPIO_PIN_SET);
 8000f24:	2201      	movs	r2, #1
 8000f26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f2a:	4845      	ldr	r0, [pc, #276]	; (8001040 <GrandStatumix+0x198>)
 8000f2c:	f002 f990 	bl	8003250 <HAL_GPIO_WritePin>
		PWMOut = 1200;
 8000f30:	4b46      	ldr	r3, [pc, #280]	; (800104c <GrandStatumix+0x1a4>)
 8000f32:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8000f36:	801a      	strh	r2, [r3, #0]
		if (pwr_sense == 1){grandState = emer;}
 8000f38:	4b45      	ldr	r3, [pc, #276]	; (8001050 <GrandStatumix+0x1a8>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d102      	bne.n	8000f46 <GrandStatumix+0x9e>
 8000f40:	4b3e      	ldr	r3, [pc, #248]	; (800103c <GrandStatumix+0x194>)
 8000f42:	2203      	movs	r2, #3
 8000f44:	701a      	strb	r2, [r3, #0]
		if (stop_sense == 0){grandState = stop;}
 8000f46:	4b40      	ldr	r3, [pc, #256]	; (8001048 <GrandStatumix+0x1a0>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d102      	bne.n	8000f54 <GrandStatumix+0xac>
 8000f4e:	4b3b      	ldr	r3, [pc, #236]	; (800103c <GrandStatumix+0x194>)
 8000f50:	2202      	movs	r2, #2
 8000f52:	701a      	strb	r2, [r3, #0]
		if (bluecounter != 0){grandState = work;} // can go work from ready only
 8000f54:	4b3f      	ldr	r3, [pc, #252]	; (8001054 <GrandStatumix+0x1ac>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d064      	beq.n	8001026 <GrandStatumix+0x17e>
 8000f5c:	4b37      	ldr	r3, [pc, #220]	; (800103c <GrandStatumix+0x194>)
 8000f5e:	2201      	movs	r2, #1
 8000f60:	701a      	strb	r2, [r3, #0]
	break;
 8000f62:	e060      	b.n	8001026 <GrandStatumix+0x17e>

	case work:
		HAL_GPIO_WritePin(PLamp_Blue_GPIO_Port, PLamp_Blue_Pin, GPIO_PIN_SET);
 8000f64:	2201      	movs	r2, #1
 8000f66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f6a:	4835      	ldr	r0, [pc, #212]	; (8001040 <GrandStatumix+0x198>)
 8000f6c:	f002 f970 	bl	8003250 <HAL_GPIO_WritePin>
		LaserTrajex_workflow();
 8000f70:	f000 f878 	bl	8001064 <LaserTrajex_workflow>

		if (pwr_sense == 1){
 8000f74:	4b36      	ldr	r3, [pc, #216]	; (8001050 <GrandStatumix+0x1a8>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d106      	bne.n	8000f8a <GrandStatumix+0xe2>
			grandState = emer;
 8000f7c:	4b2f      	ldr	r3, [pc, #188]	; (800103c <GrandStatumix+0x194>)
 8000f7e:	2203      	movs	r2, #3
 8000f80:	701a      	strb	r2, [r3, #0]
			u_contr = 0;}
 8000f82:	4b35      	ldr	r3, [pc, #212]	; (8001058 <GrandStatumix+0x1b0>)
 8000f84:	f04f 0200 	mov.w	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
		if (stop_sense == 0){
 8000f8a:	4b2f      	ldr	r3, [pc, #188]	; (8001048 <GrandStatumix+0x1a0>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d14b      	bne.n	800102a <GrandStatumix+0x182>
			//PWMOut = 0;
			grandState = stopnd;
 8000f92:	4b2a      	ldr	r3, [pc, #168]	; (800103c <GrandStatumix+0x194>)
 8000f94:	2204      	movs	r2, #4
 8000f96:	701a      	strb	r2, [r3, #0]
			u_contr = 0;}
 8000f98:	4b2f      	ldr	r3, [pc, #188]	; (8001058 <GrandStatumix+0x1b0>)
 8000f9a:	f04f 0200 	mov.w	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
	break;
 8000fa0:	e043      	b.n	800102a <GrandStatumix+0x182>

	case stop:
		HAL_GPIO_WritePin(PLamp_Yellow_GPIO_Port, PLamp_Yellow_Pin, GPIO_PIN_SET);
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fa8:	4825      	ldr	r0, [pc, #148]	; (8001040 <GrandStatumix+0x198>)
 8000faa:	f002 f951 	bl	8003250 <HAL_GPIO_WritePin>
		PWMOut = 0;
 8000fae:	4b27      	ldr	r3, [pc, #156]	; (800104c <GrandStatumix+0x1a4>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	801a      	strh	r2, [r3, #0]

		if (stop_sense == 1){
 8000fb4:	4b24      	ldr	r3, [pc, #144]	; (8001048 <GrandStatumix+0x1a0>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d138      	bne.n	800102e <GrandStatumix+0x186>
			grandState = Ready;
 8000fbc:	4b1f      	ldr	r3, [pc, #124]	; (800103c <GrandStatumix+0x194>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	701a      	strb	r2, [r3, #0]

			mot_dirctn++;
 8000fc2:	4b26      	ldr	r3, [pc, #152]	; (800105c <GrandStatumix+0x1b4>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	b2da      	uxtb	r2, r3
 8000fca:	4b24      	ldr	r3, [pc, #144]	; (800105c <GrandStatumix+0x1b4>)
 8000fcc:	701a      	strb	r2, [r3, #0]
			mot_dirctn%=2;
 8000fce:	4b23      	ldr	r3, [pc, #140]	; (800105c <GrandStatumix+0x1b4>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	b2da      	uxtb	r2, r3
 8000fd8:	4b20      	ldr	r3, [pc, #128]	; (800105c <GrandStatumix+0x1b4>)
 8000fda:	701a      	strb	r2, [r3, #0]
		}
	break;
 8000fdc:	e027      	b.n	800102e <GrandStatumix+0x186>

	case stopnd:
			HAL_GPIO_WritePin(PLamp_Yellow_GPIO_Port, PLamp_Yellow_Pin, GPIO_PIN_SET);
 8000fde:	2201      	movs	r2, #1
 8000fe0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fe4:	4816      	ldr	r0, [pc, #88]	; (8001040 <GrandStatumix+0x198>)
 8000fe6:	f002 f933 	bl	8003250 <HAL_GPIO_WritePin>
			PWMOut = 0;
 8000fea:	4b18      	ldr	r3, [pc, #96]	; (800104c <GrandStatumix+0x1a4>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	801a      	strh	r2, [r3, #0]
			Integral = 0;
 8000ff0:	4b1b      	ldr	r3, [pc, #108]	; (8001060 <GrandStatumix+0x1b8>)
 8000ff2:	f04f 0200 	mov.w	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]

			if (stop_sense == 1){
 8000ff8:	4b13      	ldr	r3, [pc, #76]	; (8001048 <GrandStatumix+0x1a0>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d118      	bne.n	8001032 <GrandStatumix+0x18a>
				grandState = work;
 8001000:	4b0e      	ldr	r3, [pc, #56]	; (800103c <GrandStatumix+0x194>)
 8001002:	2201      	movs	r2, #1
 8001004:	701a      	strb	r2, [r3, #0]
			}
		break;
 8001006:	e014      	b.n	8001032 <GrandStatumix+0x18a>

	case emer:
		ResetParam();
 8001008:	f000 f898 	bl	800113c <ResetParam>
		// Reset every variables at control
		if (pwr_sense == 0){
 800100c:	4b10      	ldr	r3, [pc, #64]	; (8001050 <GrandStatumix+0x1a8>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d110      	bne.n	8001036 <GrandStatumix+0x18e>
			grandState = Ready;
 8001014:	4b09      	ldr	r3, [pc, #36]	; (800103c <GrandStatumix+0x194>)
 8001016:	2200      	movs	r2, #0
 8001018:	701a      	strb	r2, [r3, #0]
			HAL_Delay(100);
 800101a:	2064      	movs	r0, #100	; 0x64
 800101c:	f001 fa36 	bl	800248c <HAL_Delay>
			IOExpenderInit();
 8001020:	f000 f9e2 	bl	80013e8 <IOExpenderInit>
		}
	break;
 8001024:	e007      	b.n	8001036 <GrandStatumix+0x18e>
	break;
 8001026:	bf00      	nop
 8001028:	e006      	b.n	8001038 <GrandStatumix+0x190>
	break;
 800102a:	bf00      	nop
 800102c:	e004      	b.n	8001038 <GrandStatumix+0x190>
	break;
 800102e:	bf00      	nop
 8001030:	e002      	b.n	8001038 <GrandStatumix+0x190>
		break;
 8001032:	bf00      	nop
 8001034:	e000      	b.n	8001038 <GrandStatumix+0x190>
	break;
 8001036:	bf00      	nop
	}
}
 8001038:	bf00      	nop
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20000280 	.word	0x20000280
 8001040:	40020400 	.word	0x40020400
 8001044:	40020800 	.word	0x40020800
 8001048:	20000282 	.word	0x20000282
 800104c:	2000000a 	.word	0x2000000a
 8001050:	20000281 	.word	0x20000281
 8001054:	200002e5 	.word	0x200002e5
 8001058:	200002f4 	.word	0x200002f4
 800105c:	200002e4 	.word	0x200002e4
 8001060:	20000308 	.word	0x20000308

08001064 <LaserTrajex_workflow>:

void LaserTrajex_workflow(){ // 1 loop go to shoot laser run
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
	//TargetDeg = positionlog[position_order];

	// -1 means no position value
	if (TargetDeg == -1){flag_LasxTraj = 0;}
 8001068:	4b2a      	ldr	r3, [pc, #168]	; (8001114 <LaserTrajex_workflow+0xb0>)
 800106a:	edd3 7a00 	vldr	s15, [r3]
 800106e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001072:	eef4 7a47 	vcmp.f32	s15, s14
 8001076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800107a:	d102      	bne.n	8001082 <LaserTrajex_workflow+0x1e>
 800107c:	4b26      	ldr	r3, [pc, #152]	; (8001118 <LaserTrajex_workflow+0xb4>)
 800107e:	2200      	movs	r2, #0
 8001080:	701a      	strb	r2, [r3, #0]

	switch(flag_LasxTraj){
 8001082:	4b25      	ldr	r3, [pc, #148]	; (8001118 <LaserTrajex_workflow+0xb4>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	2b01      	cmp	r3, #1
 8001088:	d015      	beq.n	80010b6 <LaserTrajex_workflow+0x52>
 800108a:	2b02      	cmp	r3, #2
 800108c:	d029      	beq.n	80010e2 <LaserTrajex_workflow+0x7e>
	default:
	case 0: // wait go flag
		////////// raise flag to 1 if need to drive the state

		if (grandState == work){ //flag_LasxTraj != 0 ||
 800108e:	4b23      	ldr	r3, [pc, #140]	; (800111c <LaserTrajex_workflow+0xb8>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	2b01      	cmp	r3, #1
 8001094:	d139      	bne.n	800110a <LaserTrajex_workflow+0xa6>
			flag_LasxTraj = 1;
 8001096:	4b20      	ldr	r3, [pc, #128]	; (8001118 <LaserTrajex_workflow+0xb4>)
 8001098:	2201      	movs	r2, #1
 800109a:	701a      	strb	r2, [r3, #0]
			TargetDeg = positionlog[position_order];
 800109c:	4b20      	ldr	r3, [pc, #128]	; (8001120 <LaserTrajex_workflow+0xbc>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	461a      	mov	r2, r3
 80010a2:	4b20      	ldr	r3, [pc, #128]	; (8001124 <LaserTrajex_workflow+0xc0>)
 80010a4:	5c9b      	ldrb	r3, [r3, r2]
 80010a6:	ee07 3a90 	vmov	s15, r3
 80010aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010ae:	4b19      	ldr	r3, [pc, #100]	; (8001114 <LaserTrajex_workflow+0xb0>)
 80010b0:	edc3 7a00 	vstr	s15, [r3]
		}
		break;
 80010b4:	e029      	b.n	800110a <LaserTrajex_workflow+0xa6>
	case 1: // traject
		PIDzero();
 80010b6:	f000 f8a9 	bl	800120c <PIDzero>
		MotDrvCytron();
 80010ba:	f000 f931 	bl	8001320 <MotDrvCytron>
		//////// raise flag to 2 and flag_efftActi = 1; if reach the target the position
		if(ErrPos[0] < 2){
 80010be:	4b1a      	ldr	r3, [pc, #104]	; (8001128 <LaserTrajex_workflow+0xc4>)
 80010c0:	edd3 7a00 	vldr	s15, [r3]
 80010c4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80010c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010d0:	d400      	bmi.n	80010d4 <LaserTrajex_workflow+0x70>
			flag_efftActi = 1;
			PWMOut = 0;
		}
		break;
 80010d2:	e01d      	b.n	8001110 <LaserTrajex_workflow+0xac>
			flag_efftActi = 1;
 80010d4:	4b15      	ldr	r3, [pc, #84]	; (800112c <LaserTrajex_workflow+0xc8>)
 80010d6:	2201      	movs	r2, #1
 80010d8:	701a      	strb	r2, [r3, #0]
			PWMOut = 0;
 80010da:	4b15      	ldr	r3, [pc, #84]	; (8001130 <LaserTrajex_workflow+0xcc>)
 80010dc:	2200      	movs	r2, #0
 80010de:	801a      	strh	r2, [r3, #0]
		break;
 80010e0:	e016      	b.n	8001110 <LaserTrajex_workflow+0xac>
	case 2: // Laserwork
		trig_efftRead = 1;
 80010e2:	4b14      	ldr	r3, [pc, #80]	; (8001134 <LaserTrajex_workflow+0xd0>)
 80010e4:	2201      	movs	r2, #1
 80010e6:	701a      	strb	r2, [r3, #0]

		if(efft_status == 0x78){ // if laser finished work
 80010e8:	4b13      	ldr	r3, [pc, #76]	; (8001138 <LaserTrajex_workflow+0xd4>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	2b78      	cmp	r3, #120	; 0x78
 80010ee:	d10e      	bne.n	800110e <LaserTrajex_workflow+0xaa>
			trig_efftRead = 0;
 80010f0:	4b10      	ldr	r3, [pc, #64]	; (8001134 <LaserTrajex_workflow+0xd0>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	701a      	strb	r2, [r3, #0]
			position_order++; // go to next obtained position
 80010f6:	4b0a      	ldr	r3, [pc, #40]	; (8001120 <LaserTrajex_workflow+0xbc>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	3301      	adds	r3, #1
 80010fc:	b2da      	uxtb	r2, r3
 80010fe:	4b08      	ldr	r3, [pc, #32]	; (8001120 <LaserTrajex_workflow+0xbc>)
 8001100:	701a      	strb	r2, [r3, #0]
			if (positionlog[position_order] == -1){
				//Real end, reset all position parameter
				flag_LasxTraj = 0;
				ResetParam();
				}
			else {flag_LasxTraj = 1;} // continue next pos if have
 8001102:	4b05      	ldr	r3, [pc, #20]	; (8001118 <LaserTrajex_workflow+0xb4>)
 8001104:	2201      	movs	r2, #1
 8001106:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001108:	e001      	b.n	800110e <LaserTrajex_workflow+0xaa>
		break;
 800110a:	bf00      	nop
 800110c:	e000      	b.n	8001110 <LaserTrajex_workflow+0xac>
		break;
 800110e:	bf00      	nop
	}
}
 8001110:	bf00      	nop
 8001112:	bd80      	pop	{r7, pc}
 8001114:	200002e8 	.word	0x200002e8
 8001118:	20000291 	.word	0x20000291
 800111c:	20000280 	.word	0x20000280
 8001120:	20000292 	.word	0x20000292
 8001124:	20000000 	.word	0x20000000
 8001128:	200002ec 	.word	0x200002ec
 800112c:	20000311 	.word	0x20000311
 8001130:	2000000a 	.word	0x2000000a
 8001134:	20000313 	.word	0x20000313
 8001138:	20000310 	.word	0x20000310

0800113c <ResetParam>:

void ResetParam(){
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
	// Reset every variables at control
	// reset position buffer
	PWMOut = 0;
 8001142:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <ResetParam+0x44>)
 8001144:	2200      	movs	r2, #0
 8001146:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i <= position_order; i++){
 8001148:	2300      	movs	r3, #0
 800114a:	607b      	str	r3, [r7, #4]
 800114c:	e008      	b.n	8001160 <ResetParam+0x24>
		positionlog[position_order] = -1;
 800114e:	4b0d      	ldr	r3, [pc, #52]	; (8001184 <ResetParam+0x48>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	461a      	mov	r2, r3
 8001154:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <ResetParam+0x4c>)
 8001156:	21ff      	movs	r1, #255	; 0xff
 8001158:	5499      	strb	r1, [r3, r2]
	for(int i = 0; i <= position_order; i++){
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	3301      	adds	r3, #1
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	4b08      	ldr	r3, [pc, #32]	; (8001184 <ResetParam+0x48>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	461a      	mov	r2, r3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4293      	cmp	r3, r2
 800116a:	ddf0      	ble.n	800114e <ResetParam+0x12>
	}
	position_order = 0;
 800116c:	4b05      	ldr	r3, [pc, #20]	; (8001184 <ResetParam+0x48>)
 800116e:	2200      	movs	r2, #0
 8001170:	701a      	strb	r2, [r3, #0]
}
 8001172:	bf00      	nop
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	2000000a 	.word	0x2000000a
 8001184:	20000292 	.word	0x20000292
 8001188:	20000000 	.word	0x20000000

0800118c <GraytoBinario>:
////////// Absolute Encoder ////////////////////////////////////////////
uint16_t GraytoBinario(uint16_t grayx,uint8_t numbit){ // numbit=10
 800118c:	b480      	push	{r7}
 800118e:	b087      	sub	sp, #28
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	460a      	mov	r2, r1
 8001196:	80fb      	strh	r3, [r7, #6]
 8001198:	4613      	mov	r3, r2
 800119a:	717b      	strb	r3, [r7, #5]

	uint16_t binaryout = 0b0;
 800119c:	2300      	movs	r3, #0
 800119e:	82fb      	strh	r3, [r7, #22]

    binaryout = (grayx >> (numbit-1))&0x01;
 80011a0:	88fa      	ldrh	r2, [r7, #6]
 80011a2:	797b      	ldrb	r3, [r7, #5]
 80011a4:	3b01      	subs	r3, #1
 80011a6:	fa42 f303 	asr.w	r3, r2, r3
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	f003 0301 	and.w	r3, r3, #1
 80011b0:	82fb      	strh	r3, [r7, #22]
    //std::cout << binaryout << std::endl;

    for (int i = 1; i < numbit ;i++){
 80011b2:	2301      	movs	r3, #1
 80011b4:	613b      	str	r3, [r7, #16]
 80011b6:	e01d      	b.n	80011f4 <GraytoBinario+0x68>
        /* XOR operation */
        int cp1 = binaryout&0x01 ;//>> (numbit-i)
 80011b8:	8afb      	ldrh	r3, [r7, #22]
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	60fb      	str	r3, [r7, #12]
        int cp2 = grayx >> (numbit-(i+1))&0x01; //
 80011c0:	88fa      	ldrh	r2, [r7, #6]
 80011c2:	7979      	ldrb	r1, [r7, #5]
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	3301      	adds	r3, #1
 80011c8:	1acb      	subs	r3, r1, r3
 80011ca:	fa42 f303 	asr.w	r3, r2, r3
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	60bb      	str	r3, [r7, #8]

        if (cp1 == cp2)
 80011d4:	68fa      	ldr	r2, [r7, #12]
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d103      	bne.n	80011e4 <GraytoBinario+0x58>
            {binaryout = (binaryout << 1) + 0; } //qd = 0;
 80011dc:	8afb      	ldrh	r3, [r7, #22]
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	82fb      	strh	r3, [r7, #22]
 80011e2:	e004      	b.n	80011ee <GraytoBinario+0x62>
        else
            {binaryout = (binaryout << 1) + 1; } //qd = 1;
 80011e4:	8afb      	ldrh	r3, [r7, #22]
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	b29b      	uxth	r3, r3
 80011ea:	3301      	adds	r3, #1
 80011ec:	82fb      	strh	r3, [r7, #22]
    for (int i = 1; i < numbit ;i++){
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	3301      	adds	r3, #1
 80011f2:	613b      	str	r3, [r7, #16]
 80011f4:	797b      	ldrb	r3, [r7, #5]
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	dbdd      	blt.n	80011b8 <GraytoBinario+0x2c>
        //std::cout << "cp" << i << " " << cp1 << cp2 << " " << qd << "  "<<binaryout << std::endl;
    }
    //BinPos = binaryout;
    return binaryout;
 80011fc:	8afb      	ldrh	r3, [r7, #22]
}
 80011fe:	4618      	mov	r0, r3
 8001200:	371c      	adds	r7, #28
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
	...

0800120c <PIDzero>:
	}
	RoundNumnd_sm =  summa / (CAPTURENUM-errcut);
}
*/
///////////////////// PID Zero /////////////////////////////
void PIDzero(){
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
	CrrntTime = micros();
 8001210:	f000 fdaa 	bl	8001d68 <micros>
 8001214:	4602      	mov	r2, r0
 8001216:	460b      	mov	r3, r1
 8001218:	4610      	mov	r0, r2
 800121a:	4619      	mov	r1, r3
 800121c:	f7ff f8a4 	bl	8000368 <__aeabi_ul2f>
 8001220:	4603      	mov	r3, r0
 8001222:	4a32      	ldr	r2, [pc, #200]	; (80012ec <PIDzero+0xe0>)
 8001224:	6013      	str	r3, [r2, #0]
	DeltaTime = (CrrntTime - PreviTime) / 1000000.0; // seconds
 8001226:	4b31      	ldr	r3, [pc, #196]	; (80012ec <PIDzero+0xe0>)
 8001228:	ed93 7a00 	vldr	s14, [r3]
 800122c:	4b30      	ldr	r3, [pc, #192]	; (80012f0 <PIDzero+0xe4>)
 800122e:	edd3 7a00 	vldr	s15, [r3]
 8001232:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001236:	eddf 6a2f 	vldr	s13, [pc, #188]	; 80012f4 <PIDzero+0xe8>
 800123a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800123e:	4b2e      	ldr	r3, [pc, #184]	; (80012f8 <PIDzero+0xec>)
 8001240:	edc3 7a00 	vstr	s15, [r3]
	PreviTime = CrrntTime; // log previ here for next loop
 8001244:	4b29      	ldr	r3, [pc, #164]	; (80012ec <PIDzero+0xe0>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a29      	ldr	r2, [pc, #164]	; (80012f0 <PIDzero+0xe4>)
 800124a:	6013      	str	r3, [r2, #0]

	ErrPos[0] = TargetDeg - BinPosXI;
 800124c:	4b2b      	ldr	r3, [pc, #172]	; (80012fc <PIDzero+0xf0>)
 800124e:	ed93 7a00 	vldr	s14, [r3]
 8001252:	4b2b      	ldr	r3, [pc, #172]	; (8001300 <PIDzero+0xf4>)
 8001254:	881b      	ldrh	r3, [r3, #0]
 8001256:	ee07 3a90 	vmov	s15, r3
 800125a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800125e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001262:	4b28      	ldr	r3, [pc, #160]	; (8001304 <PIDzero+0xf8>)
 8001264:	edc3 7a00 	vstr	s15, [r3]

	Propo = K_P * ErrPos[0];
 8001268:	4b26      	ldr	r3, [pc, #152]	; (8001304 <PIDzero+0xf8>)
 800126a:	ed93 7a00 	vldr	s14, [r3]
 800126e:	4b26      	ldr	r3, [pc, #152]	; (8001308 <PIDzero+0xfc>)
 8001270:	edd3 7a00 	vldr	s15, [r3]
 8001274:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001278:	4b24      	ldr	r3, [pc, #144]	; (800130c <PIDzero+0x100>)
 800127a:	edc3 7a00 	vstr	s15, [r3]

	Integral = Integral + ( ErrPos[0] * DeltaTime ); // Integral -Newton-Leibniz
 800127e:	4b21      	ldr	r3, [pc, #132]	; (8001304 <PIDzero+0xf8>)
 8001280:	ed93 7a00 	vldr	s14, [r3]
 8001284:	4b1c      	ldr	r3, [pc, #112]	; (80012f8 <PIDzero+0xec>)
 8001286:	edd3 7a00 	vldr	s15, [r3]
 800128a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800128e:	4b20      	ldr	r3, [pc, #128]	; (8001310 <PIDzero+0x104>)
 8001290:	edd3 7a00 	vldr	s15, [r3]
 8001294:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001298:	4b1d      	ldr	r3, [pc, #116]	; (8001310 <PIDzero+0x104>)
 800129a:	edc3 7a00 	vstr	s15, [r3]

	Derivate = (ErrPos[0]-ErrPos[1]) / DeltaTime; // d/dt position
 800129e:	4b19      	ldr	r3, [pc, #100]	; (8001304 <PIDzero+0xf8>)
 80012a0:	ed93 7a00 	vldr	s14, [r3]
 80012a4:	4b17      	ldr	r3, [pc, #92]	; (8001304 <PIDzero+0xf8>)
 80012a6:	edd3 7a01 	vldr	s15, [r3, #4]
 80012aa:	ee77 6a67 	vsub.f32	s13, s14, s15
 80012ae:	4b12      	ldr	r3, [pc, #72]	; (80012f8 <PIDzero+0xec>)
 80012b0:	ed93 7a00 	vldr	s14, [r3]
 80012b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012b8:	4b16      	ldr	r3, [pc, #88]	; (8001314 <PIDzero+0x108>)
 80012ba:	edc3 7a00 	vstr	s15, [r3]

	u_contr = Propo + (K_I * Integral) ; // PID u[k] + (K_D * Derivate)
 80012be:	4b16      	ldr	r3, [pc, #88]	; (8001318 <PIDzero+0x10c>)
 80012c0:	ed93 7a00 	vldr	s14, [r3]
 80012c4:	4b12      	ldr	r3, [pc, #72]	; (8001310 <PIDzero+0x104>)
 80012c6:	edd3 7a00 	vldr	s15, [r3]
 80012ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012ce:	4b0f      	ldr	r3, [pc, #60]	; (800130c <PIDzero+0x100>)
 80012d0:	edd3 7a00 	vldr	s15, [r3]
 80012d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012d8:	4b10      	ldr	r3, [pc, #64]	; (800131c <PIDzero+0x110>)
 80012da:	edc3 7a00 	vstr	s15, [r3]

	ErrPos[1] = ErrPos[0]; // log previous error
 80012de:	4b09      	ldr	r3, [pc, #36]	; (8001304 <PIDzero+0xf8>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a08      	ldr	r2, [pc, #32]	; (8001304 <PIDzero+0xf8>)
 80012e4:	6053      	str	r3, [r2, #4]
}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000300 	.word	0x20000300
 80012f0:	200002f8 	.word	0x200002f8
 80012f4:	49742400 	.word	0x49742400
 80012f8:	200002fc 	.word	0x200002fc
 80012fc:	200002e8 	.word	0x200002e8
 8001300:	2000029c 	.word	0x2000029c
 8001304:	200002ec 	.word	0x200002ec
 8001308:	2000000c 	.word	0x2000000c
 800130c:	20000304 	.word	0x20000304
 8001310:	20000308 	.word	0x20000308
 8001314:	2000030c 	.word	0x2000030c
 8001318:	20000010 	.word	0x20000010
 800131c:	200002f4 	.word	0x200002f4

08001320 <MotDrvCytron>:

void MotDrvCytron(){
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0

	//   direction chk
	if(u_contr < 0){mot_dirctn= 0;}
 8001324:	4b2c      	ldr	r3, [pc, #176]	; (80013d8 <MotDrvCytron+0xb8>)
 8001326:	edd3 7a00 	vldr	s15, [r3]
 800132a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800132e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001332:	d503      	bpl.n	800133c <MotDrvCytron+0x1c>
 8001334:	4b29      	ldr	r3, [pc, #164]	; (80013dc <MotDrvCytron+0xbc>)
 8001336:	2200      	movs	r2, #0
 8001338:	701a      	strb	r2, [r3, #0]
 800133a:	e00e      	b.n	800135a <MotDrvCytron+0x3a>
	else if(u_contr > 0) {mot_dirctn = 1;}
 800133c:	4b26      	ldr	r3, [pc, #152]	; (80013d8 <MotDrvCytron+0xb8>)
 800133e:	edd3 7a00 	vldr	s15, [r3]
 8001342:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800134a:	dd03      	ble.n	8001354 <MotDrvCytron+0x34>
 800134c:	4b23      	ldr	r3, [pc, #140]	; (80013dc <MotDrvCytron+0xbc>)
 800134e:	2201      	movs	r2, #1
 8001350:	701a      	strb	r2, [r3, #0]
 8001352:	e002      	b.n	800135a <MotDrvCytron+0x3a>
	else{PWMOut = 0;}
 8001354:	4b22      	ldr	r3, [pc, #136]	; (80013e0 <MotDrvCytron+0xc0>)
 8001356:	2200      	movs	r2, #0
 8001358:	801a      	strh	r2, [r3, #0]


	// speed
	PWMOut= (int)fabsf(u_contr); // Absolute int
 800135a:	4b1f      	ldr	r3, [pc, #124]	; (80013d8 <MotDrvCytron+0xb8>)
 800135c:	edd3 7a00 	vldr	s15, [r3]
 8001360:	eef0 7ae7 	vabs.f32	s15, s15
 8001364:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001368:	ee17 3a90 	vmov	r3, s15
 800136c:	b29a      	uxth	r2, r3
 800136e:	4b1c      	ldr	r3, [pc, #112]	; (80013e0 <MotDrvCytron+0xc0>)
 8001370:	801a      	strh	r2, [r3, #0]
	if(PWMOut > 5000){PWMOut = 5000;} // saturate 50% gear 1:6 - 120rpm => 10rpm
 8001372:	4b1b      	ldr	r3, [pc, #108]	; (80013e0 <MotDrvCytron+0xc0>)
 8001374:	881b      	ldrh	r3, [r3, #0]
 8001376:	f241 3288 	movw	r2, #5000	; 0x1388
 800137a:	4293      	cmp	r3, r2
 800137c:	d903      	bls.n	8001386 <MotDrvCytron+0x66>
 800137e:	4b18      	ldr	r3, [pc, #96]	; (80013e0 <MotDrvCytron+0xc0>)
 8001380:	f241 3288 	movw	r2, #5000	; 0x1388
 8001384:	801a      	strh	r2, [r3, #0]
	if(PWMOut < 1600 && fabsf(ErrPos[0]) >= 4){PWMOut = 1600;} //pvnt too low pwm that can't drive mot
 8001386:	4b16      	ldr	r3, [pc, #88]	; (80013e0 <MotDrvCytron+0xc0>)
 8001388:	881b      	ldrh	r3, [r3, #0]
 800138a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800138e:	d20f      	bcs.n	80013b0 <MotDrvCytron+0x90>
 8001390:	4b14      	ldr	r3, [pc, #80]	; (80013e4 <MotDrvCytron+0xc4>)
 8001392:	edd3 7a00 	vldr	s15, [r3]
 8001396:	eef0 7ae7 	vabs.f32	s15, s15
 800139a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800139e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013a6:	db03      	blt.n	80013b0 <MotDrvCytron+0x90>
 80013a8:	4b0d      	ldr	r3, [pc, #52]	; (80013e0 <MotDrvCytron+0xc0>)
 80013aa:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80013ae:	801a      	strh	r2, [r3, #0]
	if(ErrPos[0] < 2){PWMOut = 0;}
 80013b0:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <MotDrvCytron+0xc4>)
 80013b2:	edd3 7a00 	vldr	s15, [r3]
 80013b6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80013ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c2:	d400      	bmi.n	80013c6 <MotDrvCytron+0xa6>
}
 80013c4:	e002      	b.n	80013cc <MotDrvCytron+0xac>
	if(ErrPos[0] < 2){PWMOut = 0;}
 80013c6:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <MotDrvCytron+0xc0>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	801a      	strh	r2, [r3, #0]
}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	200002f4 	.word	0x200002f4
 80013dc:	200002e4 	.word	0x200002e4
 80013e0:	2000000a 	.word	0x2000000a
 80013e4:	200002ec 	.word	0x200002ec

080013e8 <IOExpenderInit>:

/////////////////////Abs Encoder I2C////////////////////////////////////////////
void IOExpenderInit() {// call when start system
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af04      	add	r7, sp, #16
			0x00, 0x00, 0x00, 0x00,
			0x00, // 0x12 GPIOA
			0x00, // 0x13 GPIOB
			0x00, 0x00 };
	// OLATB -> Out data for pinB
	HAL_I2C_Mem_Write(&hi2c1, ADDR_IOXT, 0x00, I2C_MEMADD_SIZE_8BIT, Setting,
 80013ee:	2364      	movs	r3, #100	; 0x64
 80013f0:	9302      	str	r3, [sp, #8]
 80013f2:	2316      	movs	r3, #22
 80013f4:	9301      	str	r3, [sp, #4]
 80013f6:	4b05      	ldr	r3, [pc, #20]	; (800140c <IOExpenderInit+0x24>)
 80013f8:	9300      	str	r3, [sp, #0]
 80013fa:	2301      	movs	r3, #1
 80013fc:	2200      	movs	r2, #0
 80013fe:	2140      	movs	r1, #64	; 0x40
 8001400:	4803      	ldr	r0, [pc, #12]	; (8001410 <IOExpenderInit+0x28>)
 8001402:	f002 f89b 	bl	800353c <HAL_I2C_Mem_Write>
			0x16, 100);
}
 8001406:	bf00      	nop
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	2000001c 	.word	0x2000001c
 8001410:	2000005c 	.word	0x2000005c

08001414 <AbsEncI2CReadx>:

void AbsEncI2CReadx(uint8_t *RawRAB){
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af04      	add	r7, sp, #16
 800141a:	6078      	str	r0, [r7, #4]

	if(flag_absenc != 0 && hi2c1.State == HAL_I2C_STATE_READY){
 800141c:	4b26      	ldr	r3, [pc, #152]	; (80014b8 <AbsEncI2CReadx+0xa4>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d044      	beq.n	80014ae <AbsEncI2CReadx+0x9a>
 8001424:	4b25      	ldr	r3, [pc, #148]	; (80014bc <AbsEncI2CReadx+0xa8>)
 8001426:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800142a:	b2db      	uxtb	r3, r3
 800142c:	2b20      	cmp	r3, #32
 800142e:	d13e      	bne.n	80014ae <AbsEncI2CReadx+0x9a>
		switch(flag_absenc){
 8001430:	4b21      	ldr	r3, [pc, #132]	; (80014b8 <AbsEncI2CReadx+0xa4>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d002      	beq.n	800143e <AbsEncI2CReadx+0x2a>
 8001438:	2b02      	cmp	r3, #2
 800143a:	d010      	beq.n	800145e <AbsEncI2CReadx+0x4a>
		default:
			break;
 800143c:	e038      	b.n	80014b0 <AbsEncI2CReadx+0x9c>

		case 1:
			//HAL_I2C_Master_Receive(&hi2c1, ADDR_IOXT, GrayCBitx, 1, 100);
			//HAL_I2C_Master_Seq_Receive_DMA(hi2c, DevAddress, pData, Size, XferOptions);
			HAL_I2C_Mem_Read(&hi2c1, ADDR_IOXT, 0x12, I2C_MEMADD_SIZE_8BIT,
 800143e:	2364      	movs	r3, #100	; 0x64
 8001440:	9302      	str	r3, [sp, #8]
 8001442:	2302      	movs	r3, #2
 8001444:	9301      	str	r3, [sp, #4]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	9300      	str	r3, [sp, #0]
 800144a:	2301      	movs	r3, #1
 800144c:	2212      	movs	r2, #18
 800144e:	2140      	movs	r1, #64	; 0x40
 8001450:	481a      	ldr	r0, [pc, #104]	; (80014bc <AbsEncI2CReadx+0xa8>)
 8001452:	f002 f96d 	bl	8003730 <HAL_I2C_Mem_Read>
						RawRAB, 2, 100);
			flag_absenc = 2;
 8001456:	4b18      	ldr	r3, [pc, #96]	; (80014b8 <AbsEncI2CReadx+0xa4>)
 8001458:	2202      	movs	r2, #2
 800145a:	701a      	strb	r2, [r3, #0]
		break;
 800145c:	e028      	b.n	80014b0 <AbsEncI2CReadx+0x9c>

		case 2:
			//invert in IPOL
			GrayCBitXI = (RawEnBitAB[1] << 8) | RawEnBitAB[0]; // GrayCBitx
 800145e:	4b18      	ldr	r3, [pc, #96]	; (80014c0 <AbsEncI2CReadx+0xac>)
 8001460:	785b      	ldrb	r3, [r3, #1]
 8001462:	021b      	lsls	r3, r3, #8
 8001464:	b21a      	sxth	r2, r3
 8001466:	4b16      	ldr	r3, [pc, #88]	; (80014c0 <AbsEncI2CReadx+0xac>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	b21b      	sxth	r3, r3
 800146c:	4313      	orrs	r3, r2
 800146e:	b21b      	sxth	r3, r3
 8001470:	b29a      	uxth	r2, r3
 8001472:	4b14      	ldr	r3, [pc, #80]	; (80014c4 <AbsEncI2CReadx+0xb0>)
 8001474:	801a      	strh	r2, [r3, #0]

			//GrayCBitXI = ~GrayCBitx - 0b1111110000000000; // invert and clear 6 high
			//GrayCBitXI = ~GrayCBitx & 0b0000001111111111;
			BinPosXI = GraytoBinario(GrayCBitXI, 10) + POSOFFSET;  //
 8001476:	4b13      	ldr	r3, [pc, #76]	; (80014c4 <AbsEncI2CReadx+0xb0>)
 8001478:	881b      	ldrh	r3, [r3, #0]
 800147a:	210a      	movs	r1, #10
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff fe85 	bl	800118c <GraytoBinario>
 8001482:	4603      	mov	r3, r0
 8001484:	f5a3 73dd 	sub.w	r3, r3, #442	; 0x1ba
 8001488:	b29a      	uxth	r2, r3
 800148a:	4b0f      	ldr	r3, [pc, #60]	; (80014c8 <AbsEncI2CReadx+0xb4>)
 800148c:	801a      	strh	r2, [r3, #0]
			if (BinPosXI >= 1024){BinPosXI = BinPosXI % 1024;}
 800148e:	4b0e      	ldr	r3, [pc, #56]	; (80014c8 <AbsEncI2CReadx+0xb4>)
 8001490:	881b      	ldrh	r3, [r3, #0]
 8001492:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001496:	d306      	bcc.n	80014a6 <AbsEncI2CReadx+0x92>
 8001498:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <AbsEncI2CReadx+0xb4>)
 800149a:	881b      	ldrh	r3, [r3, #0]
 800149c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80014a0:	b29a      	uxth	r2, r3
 80014a2:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <AbsEncI2CReadx+0xb4>)
 80014a4:	801a      	strh	r2, [r3, #0]
			flag_absenc = 0;
 80014a6:	4b04      	ldr	r3, [pc, #16]	; (80014b8 <AbsEncI2CReadx+0xa4>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	701a      	strb	r2, [r3, #0]
		break;
 80014ac:	e000      	b.n	80014b0 <AbsEncI2CReadx+0x9c>
		}
	}
 80014ae:	bf00      	nop
}
 80014b0:	bf00      	nop
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	2000029e 	.word	0x2000029e
 80014bc:	2000005c 	.word	0x2000005c
 80014c0:	20000298 	.word	0x20000298
 80014c4:	2000029a 	.word	0x2000029a
 80014c8:	2000029c 	.word	0x2000029c

080014cc <Efft_activate>:
//////////////// End Effector /////////////////////////////////
void Efft_activate(){
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af02      	add	r7, sp, #8
	uint8_t cmmd = 0x45;
 80014d2:	2345      	movs	r3, #69	; 0x45
 80014d4:	71fb      	strb	r3, [r7, #7]

	static enum{ef_INIT, ef_shoot} efshoot = ef_INIT;
	switch(efshoot){
 80014d6:	4b1c      	ldr	r3, [pc, #112]	; (8001548 <Efft_activate+0x7c>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d015      	beq.n	800150a <Efft_activate+0x3e>
	default:
	case ef_INIT:
		if(flag_efftActi != 0 && hi2c3.State == HAL_I2C_STATE_READY){
 80014de:	4b1b      	ldr	r3, [pc, #108]	; (800154c <Efft_activate+0x80>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d029      	beq.n	800153a <Efft_activate+0x6e>
 80014e6:	4b1a      	ldr	r3, [pc, #104]	; (8001550 <Efft_activate+0x84>)
 80014e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	2b20      	cmp	r3, #32
 80014f0:	d123      	bne.n	800153a <Efft_activate+0x6e>
			HAL_I2C_Master_Seq_Transmit_IT(&hi2c3, ADDR_EFFT, &cmmd, 0, I2C_FIRST_FRAME);
 80014f2:	1dfa      	adds	r2, r7, #7
 80014f4:	2301      	movs	r3, #1
 80014f6:	9300      	str	r3, [sp, #0]
 80014f8:	2300      	movs	r3, #0
 80014fa:	2146      	movs	r1, #70	; 0x46
 80014fc:	4814      	ldr	r0, [pc, #80]	; (8001550 <Efft_activate+0x84>)
 80014fe:	f002 fb3d 	bl	8003b7c <HAL_I2C_Master_Seq_Transmit_IT>
			//HAL_I2C_Master_Seq_Transmit_IT(&hi2c3, ADDR_EFFT, &cmmd, 1, I2C_FIRST_AND_LAST_FRAME);
			//HAL_I2C_Master_Transmit(&hi2c3, ADDR_EFFT, &cmmd, 2, 100);
			efshoot = ef_shoot;
 8001502:	4b11      	ldr	r3, [pc, #68]	; (8001548 <Efft_activate+0x7c>)
 8001504:	2201      	movs	r2, #1
 8001506:	701a      	strb	r2, [r3, #0]
		}
	break;
 8001508:	e017      	b.n	800153a <Efft_activate+0x6e>

	case ef_shoot:
		if (hi2c3.State == HAL_I2C_STATE_READY){
 800150a:	4b11      	ldr	r3, [pc, #68]	; (8001550 <Efft_activate+0x84>)
 800150c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001510:	b2db      	uxtb	r3, r3
 8001512:	2b20      	cmp	r3, #32
 8001514:	d113      	bne.n	800153e <Efft_activate+0x72>
			HAL_I2C_Master_Seq_Transmit_IT(&hi2c3, ADDR_EFFT, &cmmd, 1, I2C_LAST_FRAME);
 8001516:	1dfa      	adds	r2, r7, #7
 8001518:	2320      	movs	r3, #32
 800151a:	9300      	str	r3, [sp, #0]
 800151c:	2301      	movs	r3, #1
 800151e:	2146      	movs	r1, #70	; 0x46
 8001520:	480b      	ldr	r0, [pc, #44]	; (8001550 <Efft_activate+0x84>)
 8001522:	f002 fb2b 	bl	8003b7c <HAL_I2C_Master_Seq_Transmit_IT>
			efshoot = ef_INIT;
 8001526:	4b08      	ldr	r3, [pc, #32]	; (8001548 <Efft_activate+0x7c>)
 8001528:	2200      	movs	r2, #0
 800152a:	701a      	strb	r2, [r3, #0]
			flag_efftActi = 0;
 800152c:	4b07      	ldr	r3, [pc, #28]	; (800154c <Efft_activate+0x80>)
 800152e:	2200      	movs	r2, #0
 8001530:	701a      	strb	r2, [r3, #0]
			trig_efftRead = 1;
 8001532:	4b08      	ldr	r3, [pc, #32]	; (8001554 <Efft_activate+0x88>)
 8001534:	2201      	movs	r2, #1
 8001536:	701a      	strb	r2, [r3, #0]
		}
	break;
 8001538:	e001      	b.n	800153e <Efft_activate+0x72>
	break;
 800153a:	bf00      	nop
 800153c:	e000      	b.n	8001540 <Efft_activate+0x74>
	break;
 800153e:	bf00      	nop
	}

}
 8001540:	bf00      	nop
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	20000355 	.word	0x20000355
 800154c:	20000311 	.word	0x20000311
 8001550:	200000b0 	.word	0x200000b0
 8001554:	20000313 	.word	0x20000313

08001558 <Efft_read>:
void Efft_read(uint8_t *Rddata){
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af02      	add	r7, sp, #8
 800155e:	6078      	str	r0, [r7, #4]
		HAL_I2C_Mem_Read_IT(&hi2c3, ADDR_EFFT, &readRQ, I2C_MEMADD_SIZE_8BIT, Rddata, 1);
		//HAL_I2C_Mem_Read(&hi2c1, ADDR_EFFT, &readRQ, I2C_MEMADD_SIZE_8BIT, Rddata, 1, 100);
		flag_efftRead = 0;
	}
	*/
	switch(efrdStatus){
 8001560:	4b1a      	ldr	r3, [pc, #104]	; (80015cc <Efft_read+0x74>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d015      	beq.n	8001594 <Efft_read+0x3c>
	default:
	case 0:
		if (flag_efftRead != 0 && hi2c3.State == HAL_I2C_STATE_READY){
 8001568:	4b19      	ldr	r3, [pc, #100]	; (80015d0 <Efft_read+0x78>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d026      	beq.n	80015be <Efft_read+0x66>
 8001570:	4b18      	ldr	r3, [pc, #96]	; (80015d4 <Efft_read+0x7c>)
 8001572:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001576:	b2db      	uxtb	r3, r3
 8001578:	2b20      	cmp	r3, #32
 800157a:	d120      	bne.n	80015be <Efft_read+0x66>
			//HAL_I2C_Master_Transmit_IT(&hi2c3, ADDR_EFFT, 0x23, 1);
			HAL_I2C_Master_Seq_Transmit_IT(&hi2c3, ADDR_EFFT, &readRQ, 1, I2C_FIRST_AND_NEXT_FRAME);
 800157c:	2302      	movs	r3, #2
 800157e:	9300      	str	r3, [sp, #0]
 8001580:	2301      	movs	r3, #1
 8001582:	4a15      	ldr	r2, [pc, #84]	; (80015d8 <Efft_read+0x80>)
 8001584:	2146      	movs	r1, #70	; 0x46
 8001586:	4813      	ldr	r0, [pc, #76]	; (80015d4 <Efft_read+0x7c>)
 8001588:	f002 faf8 	bl	8003b7c <HAL_I2C_Master_Seq_Transmit_IT>
			//HAL_I2C_Master_Transmit(&hi2c3, ADDR_EFFT, &readRQ, 2, 100);
			//HAL_I2C_Master_Seq_Transmit_DMA(&hi2c3, ADDR_EFFT, &readRQ, 1, I2C_FIRST_AND_NEXT_FRAME);
			efrdStatus = 1;
 800158c:	4b0f      	ldr	r3, [pc, #60]	; (80015cc <Efft_read+0x74>)
 800158e:	2201      	movs	r2, #1
 8001590:	701a      	strb	r2, [r3, #0]
		}
	break;
 8001592:	e014      	b.n	80015be <Efft_read+0x66>

	case 1:

		if (hi2c3.State == HAL_I2C_STATE_READY){
 8001594:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <Efft_read+0x7c>)
 8001596:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800159a:	b2db      	uxtb	r3, r3
 800159c:	2b20      	cmp	r3, #32
 800159e:	d110      	bne.n	80015c2 <Efft_read+0x6a>
			HAL_I2C_Master_Seq_Receive_IT(&hi2c3, ADDR_EFFT, Rddata, 1, I2C_LAST_FRAME);
 80015a0:	2320      	movs	r3, #32
 80015a2:	9300      	str	r3, [sp, #0]
 80015a4:	2301      	movs	r3, #1
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	2146      	movs	r1, #70	; 0x46
 80015aa:	480a      	ldr	r0, [pc, #40]	; (80015d4 <Efft_read+0x7c>)
 80015ac:	f002 fbac 	bl	8003d08 <HAL_I2C_Master_Seq_Receive_IT>
			//HAL_I2C_Master_Seq_Receive_DMA(&hi2c3, ADDR_EFFT, Rddata, 1, I2C_LAST_FRAME);
			//HAL_I2C_Master_Receive(&hi2c3, ADDR_EFFT ,Rddata, 1, 100);
		flag_efftRead = 0;
 80015b0:	4b07      	ldr	r3, [pc, #28]	; (80015d0 <Efft_read+0x78>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	701a      	strb	r2, [r3, #0]
		efrdStatus = 0;
 80015b6:	4b05      	ldr	r3, [pc, #20]	; (80015cc <Efft_read+0x74>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	701a      	strb	r2, [r3, #0]
			}
	break;
 80015bc:	e001      	b.n	80015c2 <Efft_read+0x6a>
	break;
 80015be:	bf00      	nop
 80015c0:	e000      	b.n	80015c4 <Efft_read+0x6c>
	break;
 80015c2:	bf00      	nop
	}

}
 80015c4:	bf00      	nop
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20000356 	.word	0x20000356
 80015d0:	20000312 	.word	0x20000312
 80015d4:	200000b0 	.word	0x200000b0
 80015d8:	20000032 	.word	0x20000032

080015dc <All_mode_UARTUI>:
/////////////////UART UI Base System ////////////////////////////

void All_mode_UARTUI()
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
	// DataIn = 1 byte Data from UART Recieve
	switch (chkM){				// Check mode State
 80015e2:	4b83      	ldr	r3, [pc, #524]	; (80017f0 <All_mode_UARTUI+0x214>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d015      	beq.n	8001616 <All_mode_UARTUI+0x3a>
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d02b      	beq.n	8001646 <All_mode_UARTUI+0x6a>
		default:
		case 0: 				// Check start INIT
			StartM = DataIn;    // 	Use in Checksum Frame 3
 80015ee:	4b81      	ldr	r3, [pc, #516]	; (80017f4 <All_mode_UARTUI+0x218>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	b2da      	uxtb	r2, r3
 80015f4:	4b80      	ldr	r3, [pc, #512]	; (80017f8 <All_mode_UARTUI+0x21c>)
 80015f6:	701a      	strb	r2, [r3, #0]
			uint8_t chkStart = DataIn >> 4;
 80015f8:	4b7e      	ldr	r3, [pc, #504]	; (80017f4 <All_mode_UARTUI+0x218>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	111b      	asrs	r3, r3, #4
 80015fe:	71fb      	strb	r3, [r7, #7]
			if (chkStart == 9){ // 9 0b1001
 8001600:	79fb      	ldrb	r3, [r7, #7]
 8001602:	2b09      	cmp	r3, #9
 8001604:	d103      	bne.n	800160e <All_mode_UARTUI+0x32>
				chkM = 1;
 8001606:	4b7a      	ldr	r3, [pc, #488]	; (80017f0 <All_mode_UARTUI+0x214>)
 8001608:	2201      	movs	r2, #1
 800160a:	701a      	strb	r2, [r3, #0]
			}else{chkM = 0;}
			break;
 800160c:	e2f6      	b.n	8001bfc <All_mode_UARTUI+0x620>
			}else{chkM = 0;}
 800160e:	4b78      	ldr	r3, [pc, #480]	; (80017f0 <All_mode_UARTUI+0x214>)
 8001610:	2200      	movs	r2, #0
 8001612:	701a      	strb	r2, [r3, #0]
			break;
 8001614:	e2f2      	b.n	8001bfc <All_mode_UARTUI+0x620>

		case 1:					// Check if mode 1 - 14 or not
			NameM = (DataIn & 15); // 0b00001111
 8001616:	4b77      	ldr	r3, [pc, #476]	; (80017f4 <All_mode_UARTUI+0x218>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	b2db      	uxtb	r3, r3
 800161c:	f003 030f 	and.w	r3, r3, #15
 8001620:	b2da      	uxtb	r2, r3
 8001622:	4b76      	ldr	r3, [pc, #472]	; (80017fc <All_mode_UARTUI+0x220>)
 8001624:	701a      	strb	r2, [r3, #0]
			if (NameM >= 1 && NameM <= 14){
 8001626:	4b75      	ldr	r3, [pc, #468]	; (80017fc <All_mode_UARTUI+0x220>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d007      	beq.n	800163e <All_mode_UARTUI+0x62>
 800162e:	4b73      	ldr	r3, [pc, #460]	; (80017fc <All_mode_UARTUI+0x220>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	2b0e      	cmp	r3, #14
 8001634:	d803      	bhi.n	800163e <All_mode_UARTUI+0x62>
				chkM = 2;
 8001636:	4b6e      	ldr	r3, [pc, #440]	; (80017f0 <All_mode_UARTUI+0x214>)
 8001638:	2202      	movs	r2, #2
 800163a:	701a      	strb	r2, [r3, #0]
			}
			else{chkM = 0;}
			break;
 800163c:	e2de      	b.n	8001bfc <All_mode_UARTUI+0x620>
			else{chkM = 0;}
 800163e:	4b6c      	ldr	r3, [pc, #432]	; (80017f0 <All_mode_UARTUI+0x214>)
 8001640:	2200      	movs	r2, #0
 8001642:	701a      	strb	r2, [r3, #0]
			break;
 8001644:	e2da      	b.n	8001bfc <All_mode_UARTUI+0x620>
		///////////////////////// // 14Mode work State //////////////////////////
		case 2:
		switch (NameM){			// 14Mode work State
 8001646:	4b6d      	ldr	r3, [pc, #436]	; (80017fc <All_mode_UARTUI+0x220>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	3b01      	subs	r3, #1
 800164c:	2b0d      	cmp	r3, #13
 800164e:	f200 82d4 	bhi.w	8001bfa <All_mode_UARTUI+0x61e>
 8001652:	a201      	add	r2, pc, #4	; (adr r2, 8001658 <All_mode_UARTUI+0x7c>)
 8001654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001658:	08001691 	.word	0x08001691
 800165c:	08001703 	.word	0x08001703
 8001660:	08001741 	.word	0x08001741
 8001664:	0800177f 	.word	0x0800177f
 8001668:	08001821 	.word	0x08001821
 800166c:	08001893 	.word	0x08001893
 8001670:	08001905 	.word	0x08001905
 8001674:	080019a7 	.word	0x080019a7
 8001678:	080019ff 	.word	0x080019ff
 800167c:	08001a3d 	.word	0x08001a3d
 8001680:	08001ac1 	.word	0x08001ac1
 8001684:	08001afb 	.word	0x08001afb
 8001688:	08001b3d 	.word	0x08001b3d
 800168c:	08001b85 	.word	0x08001b85
				case 1:			// Check
					if (dataFN == 2){
 8001690:	4b5b      	ldr	r3, [pc, #364]	; (8001800 <All_mode_UARTUI+0x224>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	2b02      	cmp	r3, #2
 8001696:	d104      	bne.n	80016a2 <All_mode_UARTUI+0xc6>
						dataF1 = DataIn;
 8001698:	4b56      	ldr	r3, [pc, #344]	; (80017f4 <All_mode_UARTUI+0x218>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	b2da      	uxtb	r2, r3
 800169e:	4b59      	ldr	r3, [pc, #356]	; (8001804 <All_mode_UARTUI+0x228>)
 80016a0:	701a      	strb	r2, [r3, #0]
					}
					if(dataFN == 3){
 80016a2:	4b57      	ldr	r3, [pc, #348]	; (8001800 <All_mode_UARTUI+0x224>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	2b03      	cmp	r3, #3
 80016a8:	d104      	bne.n	80016b4 <All_mode_UARTUI+0xd8>
						dataF2 = DataIn;
 80016aa:	4b52      	ldr	r3, [pc, #328]	; (80017f4 <All_mode_UARTUI+0x218>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	b2da      	uxtb	r2, r3
 80016b0:	4b55      	ldr	r3, [pc, #340]	; (8001808 <All_mode_UARTUI+0x22c>)
 80016b2:	701a      	strb	r2, [r3, #0]
					}
					chksum = DataIn;
 80016b4:	4b4f      	ldr	r3, [pc, #316]	; (80017f4 <All_mode_UARTUI+0x218>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	b2da      	uxtb	r2, r3
 80016ba:	4b54      	ldr	r3, [pc, #336]	; (800180c <All_mode_UARTUI+0x230>)
 80016bc:	701a      	strb	r2, [r3, #0]
					chksum2 = ~(StartM + dataF1 + dataF2);
 80016be:	4b4e      	ldr	r3, [pc, #312]	; (80017f8 <All_mode_UARTUI+0x21c>)
 80016c0:	781a      	ldrb	r2, [r3, #0]
 80016c2:	4b50      	ldr	r3, [pc, #320]	; (8001804 <All_mode_UARTUI+0x228>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	4413      	add	r3, r2
 80016c8:	b2da      	uxtb	r2, r3
 80016ca:	4b4f      	ldr	r3, [pc, #316]	; (8001808 <All_mode_UARTUI+0x22c>)
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	4413      	add	r3, r2
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	43db      	mvns	r3, r3
 80016d4:	b2da      	uxtb	r2, r3
 80016d6:	4b4e      	ldr	r3, [pc, #312]	; (8001810 <All_mode_UARTUI+0x234>)
 80016d8:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum2){
 80016da:	4b4c      	ldr	r3, [pc, #304]	; (800180c <All_mode_UARTUI+0x230>)
 80016dc:	781a      	ldrb	r2, [r3, #0]
 80016de:	4b4c      	ldr	r3, [pc, #304]	; (8001810 <All_mode_UARTUI+0x234>)
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	f040 8270 	bne.w	8001bc8 <All_mode_UARTUI+0x5ec>
						//M_state = 1;
						HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,100); //Xu
 80016e8:	2364      	movs	r3, #100	; 0x64
 80016ea:	2202      	movs	r2, #2
 80016ec:	4949      	ldr	r1, [pc, #292]	; (8001814 <All_mode_UARTUI+0x238>)
 80016ee:	484a      	ldr	r0, [pc, #296]	; (8001818 <All_mode_UARTUI+0x23c>)
 80016f0:	f006 fde5 	bl	80082be <HAL_UART_Transmit>
						chkM = 0;
 80016f4:	4b3e      	ldr	r3, [pc, #248]	; (80017f0 <All_mode_UARTUI+0x214>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 80016fa:	4b41      	ldr	r3, [pc, #260]	; (8001800 <All_mode_UARTUI+0x224>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	701a      	strb	r2, [r3, #0]
					}
					break;
 8001700:	e262      	b.n	8001bc8 <All_mode_UARTUI+0x5ec>
				case 2:			// MCU Connect ,2 byte DataFrame 1
					chksum = DataIn;
 8001702:	4b3c      	ldr	r3, [pc, #240]	; (80017f4 <All_mode_UARTUI+0x218>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	b2da      	uxtb	r2, r3
 8001708:	4b40      	ldr	r3, [pc, #256]	; (800180c <All_mode_UARTUI+0x230>)
 800170a:	701a      	strb	r2, [r3, #0]
					chksum1 = ~(StartM);	// Check condition from manual
 800170c:	4b3a      	ldr	r3, [pc, #232]	; (80017f8 <All_mode_UARTUI+0x21c>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	43db      	mvns	r3, r3
 8001712:	b2da      	uxtb	r2, r3
 8001714:	4b41      	ldr	r3, [pc, #260]	; (800181c <All_mode_UARTUI+0x240>)
 8001716:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum1){	// Transmit back ack1
 8001718:	4b3c      	ldr	r3, [pc, #240]	; (800180c <All_mode_UARTUI+0x230>)
 800171a:	781a      	ldrb	r2, [r3, #0]
 800171c:	4b3f      	ldr	r3, [pc, #252]	; (800181c <All_mode_UARTUI+0x240>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	429a      	cmp	r2, r3
 8001722:	f040 8253 	bne.w	8001bcc <All_mode_UARTUI+0x5f0>
						//M_state = 2;
						/// Add work here///////////
						///////////////////////////
						HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,100); //Xu
 8001726:	2364      	movs	r3, #100	; 0x64
 8001728:	2202      	movs	r2, #2
 800172a:	493a      	ldr	r1, [pc, #232]	; (8001814 <All_mode_UARTUI+0x238>)
 800172c:	483a      	ldr	r0, [pc, #232]	; (8001818 <All_mode_UARTUI+0x23c>)
 800172e:	f006 fdc6 	bl	80082be <HAL_UART_Transmit>
						chkM = 0;
 8001732:	4b2f      	ldr	r3, [pc, #188]	; (80017f0 <All_mode_UARTUI+0x214>)
 8001734:	2200      	movs	r2, #0
 8001736:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 8001738:	4b31      	ldr	r3, [pc, #196]	; (8001800 <All_mode_UARTUI+0x224>)
 800173a:	2200      	movs	r2, #0
 800173c:	701a      	strb	r2, [r3, #0]
					}

					break;
 800173e:	e245      	b.n	8001bcc <All_mode_UARTUI+0x5f0>
				case 3:			// MCU DisConnect ,2 byte DataFrame 1
					chksum = DataIn;
 8001740:	4b2c      	ldr	r3, [pc, #176]	; (80017f4 <All_mode_UARTUI+0x218>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	b2da      	uxtb	r2, r3
 8001746:	4b31      	ldr	r3, [pc, #196]	; (800180c <All_mode_UARTUI+0x230>)
 8001748:	701a      	strb	r2, [r3, #0]
					chksum1 = ~(StartM);
 800174a:	4b2b      	ldr	r3, [pc, #172]	; (80017f8 <All_mode_UARTUI+0x21c>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	43db      	mvns	r3, r3
 8001750:	b2da      	uxtb	r2, r3
 8001752:	4b32      	ldr	r3, [pc, #200]	; (800181c <All_mode_UARTUI+0x240>)
 8001754:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum1){
 8001756:	4b2d      	ldr	r3, [pc, #180]	; (800180c <All_mode_UARTUI+0x230>)
 8001758:	781a      	ldrb	r2, [r3, #0]
 800175a:	4b30      	ldr	r3, [pc, #192]	; (800181c <All_mode_UARTUI+0x240>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	429a      	cmp	r2, r3
 8001760:	f040 8236 	bne.w	8001bd0 <All_mode_UARTUI+0x5f4>
						//M_state = 3;
						/// Add work here///////////
						///////////////////////////
						HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,100); //Xu
 8001764:	2364      	movs	r3, #100	; 0x64
 8001766:	2202      	movs	r2, #2
 8001768:	492a      	ldr	r1, [pc, #168]	; (8001814 <All_mode_UARTUI+0x238>)
 800176a:	482b      	ldr	r0, [pc, #172]	; (8001818 <All_mode_UARTUI+0x23c>)
 800176c:	f006 fda7 	bl	80082be <HAL_UART_Transmit>
						chkM = 0;
 8001770:	4b1f      	ldr	r3, [pc, #124]	; (80017f0 <All_mode_UARTUI+0x214>)
 8001772:	2200      	movs	r2, #0
 8001774:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 8001776:	4b22      	ldr	r3, [pc, #136]	; (8001800 <All_mode_UARTUI+0x224>)
 8001778:	2200      	movs	r2, #0
 800177a:	701a      	strb	r2, [r3, #0]
					}
					break;
 800177c:	e228      	b.n	8001bd0 <All_mode_UARTUI+0x5f4>
				case 4:			// Set Angular Velocity
					if (dataFN == 2){
 800177e:	4b20      	ldr	r3, [pc, #128]	; (8001800 <All_mode_UARTUI+0x224>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	2b02      	cmp	r3, #2
 8001784:	d104      	bne.n	8001790 <All_mode_UARTUI+0x1b4>
						dataF1 = DataIn;
 8001786:	4b1b      	ldr	r3, [pc, #108]	; (80017f4 <All_mode_UARTUI+0x218>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	b2da      	uxtb	r2, r3
 800178c:	4b1d      	ldr	r3, [pc, #116]	; (8001804 <All_mode_UARTUI+0x228>)
 800178e:	701a      	strb	r2, [r3, #0]
					}
					if(dataFN == 3){
 8001790:	4b1b      	ldr	r3, [pc, #108]	; (8001800 <All_mode_UARTUI+0x224>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	2b03      	cmp	r3, #3
 8001796:	d104      	bne.n	80017a2 <All_mode_UARTUI+0x1c6>
						dataF2 = DataIn;
 8001798:	4b16      	ldr	r3, [pc, #88]	; (80017f4 <All_mode_UARTUI+0x218>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	b2da      	uxtb	r2, r3
 800179e:	4b1a      	ldr	r3, [pc, #104]	; (8001808 <All_mode_UARTUI+0x22c>)
 80017a0:	701a      	strb	r2, [r3, #0]
					}
					chksum = DataIn;
 80017a2:	4b14      	ldr	r3, [pc, #80]	; (80017f4 <All_mode_UARTUI+0x218>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	b2da      	uxtb	r2, r3
 80017a8:	4b18      	ldr	r3, [pc, #96]	; (800180c <All_mode_UARTUI+0x230>)
 80017aa:	701a      	strb	r2, [r3, #0]
					chksum2 = ~(StartM + dataF1 + dataF2);
 80017ac:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <All_mode_UARTUI+0x21c>)
 80017ae:	781a      	ldrb	r2, [r3, #0]
 80017b0:	4b14      	ldr	r3, [pc, #80]	; (8001804 <All_mode_UARTUI+0x228>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	4413      	add	r3, r2
 80017b6:	b2da      	uxtb	r2, r3
 80017b8:	4b13      	ldr	r3, [pc, #76]	; (8001808 <All_mode_UARTUI+0x22c>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	4413      	add	r3, r2
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	43db      	mvns	r3, r3
 80017c2:	b2da      	uxtb	r2, r3
 80017c4:	4b12      	ldr	r3, [pc, #72]	; (8001810 <All_mode_UARTUI+0x234>)
 80017c6:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum2){
 80017c8:	4b10      	ldr	r3, [pc, #64]	; (800180c <All_mode_UARTUI+0x230>)
 80017ca:	781a      	ldrb	r2, [r3, #0]
 80017cc:	4b10      	ldr	r3, [pc, #64]	; (8001810 <All_mode_UARTUI+0x234>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	f040 81ff 	bne.w	8001bd4 <All_mode_UARTUI+0x5f8>
						//M_state = 4;
						/// Add work here///////////
												///////////////////////////
					HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,100);
 80017d6:	2364      	movs	r3, #100	; 0x64
 80017d8:	2202      	movs	r2, #2
 80017da:	490e      	ldr	r1, [pc, #56]	; (8001814 <All_mode_UARTUI+0x238>)
 80017dc:	480e      	ldr	r0, [pc, #56]	; (8001818 <All_mode_UARTUI+0x23c>)
 80017de:	f006 fd6e 	bl	80082be <HAL_UART_Transmit>
						chkM = 0;
 80017e2:	4b03      	ldr	r3, [pc, #12]	; (80017f0 <All_mode_UARTUI+0x214>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 80017e8:	4b05      	ldr	r3, [pc, #20]	; (8001800 <All_mode_UARTUI+0x224>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	701a      	strb	r2, [r3, #0]
					}
					break;
 80017ee:	e1f1      	b.n	8001bd4 <All_mode_UARTUI+0x5f8>
 80017f0:	20000348 	.word	0x20000348
 80017f4:	20000344 	.word	0x20000344
 80017f8:	20000349 	.word	0x20000349
 80017fc:	2000034a 	.word	0x2000034a
 8001800:	2000034b 	.word	0x2000034b
 8001804:	2000034d 	.word	0x2000034d
 8001808:	2000034e 	.word	0x2000034e
 800180c:	20000350 	.word	0x20000350
 8001810:	20000352 	.word	0x20000352
 8001814:	20000014 	.word	0x20000014
 8001818:	2000023c 	.word	0x2000023c
 800181c:	20000351 	.word	0x20000351
				case 5:			// Set Angular Position
					if (dataFN == 2){
 8001820:	4b96      	ldr	r3, [pc, #600]	; (8001a7c <All_mode_UARTUI+0x4a0>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	2b02      	cmp	r3, #2
 8001826:	d104      	bne.n	8001832 <All_mode_UARTUI+0x256>
						dataF1 = DataIn;
 8001828:	4b95      	ldr	r3, [pc, #596]	; (8001a80 <All_mode_UARTUI+0x4a4>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	b2da      	uxtb	r2, r3
 800182e:	4b95      	ldr	r3, [pc, #596]	; (8001a84 <All_mode_UARTUI+0x4a8>)
 8001830:	701a      	strb	r2, [r3, #0]
					}
					if(dataFN == 3){
 8001832:	4b92      	ldr	r3, [pc, #584]	; (8001a7c <All_mode_UARTUI+0x4a0>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	2b03      	cmp	r3, #3
 8001838:	d104      	bne.n	8001844 <All_mode_UARTUI+0x268>
						dataF2 = DataIn;
 800183a:	4b91      	ldr	r3, [pc, #580]	; (8001a80 <All_mode_UARTUI+0x4a4>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	b2da      	uxtb	r2, r3
 8001840:	4b91      	ldr	r3, [pc, #580]	; (8001a88 <All_mode_UARTUI+0x4ac>)
 8001842:	701a      	strb	r2, [r3, #0]
					}
					chksum = DataIn;
 8001844:	4b8e      	ldr	r3, [pc, #568]	; (8001a80 <All_mode_UARTUI+0x4a4>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	b2da      	uxtb	r2, r3
 800184a:	4b90      	ldr	r3, [pc, #576]	; (8001a8c <All_mode_UARTUI+0x4b0>)
 800184c:	701a      	strb	r2, [r3, #0]
					chksum2 = ~(StartM + dataF1 + dataF2);
 800184e:	4b90      	ldr	r3, [pc, #576]	; (8001a90 <All_mode_UARTUI+0x4b4>)
 8001850:	781a      	ldrb	r2, [r3, #0]
 8001852:	4b8c      	ldr	r3, [pc, #560]	; (8001a84 <All_mode_UARTUI+0x4a8>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	4413      	add	r3, r2
 8001858:	b2da      	uxtb	r2, r3
 800185a:	4b8b      	ldr	r3, [pc, #556]	; (8001a88 <All_mode_UARTUI+0x4ac>)
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	4413      	add	r3, r2
 8001860:	b2db      	uxtb	r3, r3
 8001862:	43db      	mvns	r3, r3
 8001864:	b2da      	uxtb	r2, r3
 8001866:	4b8b      	ldr	r3, [pc, #556]	; (8001a94 <All_mode_UARTUI+0x4b8>)
 8001868:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum2){
 800186a:	4b88      	ldr	r3, [pc, #544]	; (8001a8c <All_mode_UARTUI+0x4b0>)
 800186c:	781a      	ldrb	r2, [r3, #0]
 800186e:	4b89      	ldr	r3, [pc, #548]	; (8001a94 <All_mode_UARTUI+0x4b8>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	429a      	cmp	r2, r3
 8001874:	f040 81b0 	bne.w	8001bd8 <All_mode_UARTUI+0x5fc>
						//M_state = 5;
						/// Add work here///////////
						///////////////////////////
						HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,100);
 8001878:	2364      	movs	r3, #100	; 0x64
 800187a:	2202      	movs	r2, #2
 800187c:	4986      	ldr	r1, [pc, #536]	; (8001a98 <All_mode_UARTUI+0x4bc>)
 800187e:	4887      	ldr	r0, [pc, #540]	; (8001a9c <All_mode_UARTUI+0x4c0>)
 8001880:	f006 fd1d 	bl	80082be <HAL_UART_Transmit>
						chkM = 0;
 8001884:	4b86      	ldr	r3, [pc, #536]	; (8001aa0 <All_mode_UARTUI+0x4c4>)
 8001886:	2200      	movs	r2, #0
 8001888:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 800188a:	4b7c      	ldr	r3, [pc, #496]	; (8001a7c <All_mode_UARTUI+0x4a0>)
 800188c:	2200      	movs	r2, #0
 800188e:	701a      	strb	r2, [r3, #0]
					}
					break;
 8001890:	e1a2      	b.n	8001bd8 <All_mode_UARTUI+0x5fc>
				case 6:			// Set goal single station
					if (dataFN == 2){
 8001892:	4b7a      	ldr	r3, [pc, #488]	; (8001a7c <All_mode_UARTUI+0x4a0>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	2b02      	cmp	r3, #2
 8001898:	d104      	bne.n	80018a4 <All_mode_UARTUI+0x2c8>
						dataF1 = DataIn;
 800189a:	4b79      	ldr	r3, [pc, #484]	; (8001a80 <All_mode_UARTUI+0x4a4>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	b2da      	uxtb	r2, r3
 80018a0:	4b78      	ldr	r3, [pc, #480]	; (8001a84 <All_mode_UARTUI+0x4a8>)
 80018a2:	701a      	strb	r2, [r3, #0]
					}
					if(dataFN == 3){
 80018a4:	4b75      	ldr	r3, [pc, #468]	; (8001a7c <All_mode_UARTUI+0x4a0>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	2b03      	cmp	r3, #3
 80018aa:	d104      	bne.n	80018b6 <All_mode_UARTUI+0x2da>
						dataF2 = DataIn;
 80018ac:	4b74      	ldr	r3, [pc, #464]	; (8001a80 <All_mode_UARTUI+0x4a4>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	b2da      	uxtb	r2, r3
 80018b2:	4b75      	ldr	r3, [pc, #468]	; (8001a88 <All_mode_UARTUI+0x4ac>)
 80018b4:	701a      	strb	r2, [r3, #0]
					}
					chksum = DataIn;
 80018b6:	4b72      	ldr	r3, [pc, #456]	; (8001a80 <All_mode_UARTUI+0x4a4>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	b2da      	uxtb	r2, r3
 80018bc:	4b73      	ldr	r3, [pc, #460]	; (8001a8c <All_mode_UARTUI+0x4b0>)
 80018be:	701a      	strb	r2, [r3, #0]
					chksum2 = ~(StartM + dataF1 + dataF2);
 80018c0:	4b73      	ldr	r3, [pc, #460]	; (8001a90 <All_mode_UARTUI+0x4b4>)
 80018c2:	781a      	ldrb	r2, [r3, #0]
 80018c4:	4b6f      	ldr	r3, [pc, #444]	; (8001a84 <All_mode_UARTUI+0x4a8>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	4413      	add	r3, r2
 80018ca:	b2da      	uxtb	r2, r3
 80018cc:	4b6e      	ldr	r3, [pc, #440]	; (8001a88 <All_mode_UARTUI+0x4ac>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	4413      	add	r3, r2
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	43db      	mvns	r3, r3
 80018d6:	b2da      	uxtb	r2, r3
 80018d8:	4b6e      	ldr	r3, [pc, #440]	; (8001a94 <All_mode_UARTUI+0x4b8>)
 80018da:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum2){
 80018dc:	4b6b      	ldr	r3, [pc, #428]	; (8001a8c <All_mode_UARTUI+0x4b0>)
 80018de:	781a      	ldrb	r2, [r3, #0]
 80018e0:	4b6c      	ldr	r3, [pc, #432]	; (8001a94 <All_mode_UARTUI+0x4b8>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	f040 8179 	bne.w	8001bdc <All_mode_UARTUI+0x600>
						//M_state = 6;
						/// Add work here///////////
												///////////////////////////
						HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,100);
 80018ea:	2364      	movs	r3, #100	; 0x64
 80018ec:	2202      	movs	r2, #2
 80018ee:	496a      	ldr	r1, [pc, #424]	; (8001a98 <All_mode_UARTUI+0x4bc>)
 80018f0:	486a      	ldr	r0, [pc, #424]	; (8001a9c <All_mode_UARTUI+0x4c0>)
 80018f2:	f006 fce4 	bl	80082be <HAL_UART_Transmit>
						chkM = 0;
 80018f6:	4b6a      	ldr	r3, [pc, #424]	; (8001aa0 <All_mode_UARTUI+0x4c4>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 80018fc:	4b5f      	ldr	r3, [pc, #380]	; (8001a7c <All_mode_UARTUI+0x4a0>)
 80018fe:	2200      	movs	r2, #0
 8001900:	701a      	strb	r2, [r3, #0]
					}
					break;
 8001902:	e16b      	b.n	8001bdc <All_mode_UARTUI+0x600>
				case 7:			//set Goal multiple station
					if (dataFN == 2){
 8001904:	4b5d      	ldr	r3, [pc, #372]	; (8001a7c <All_mode_UARTUI+0x4a0>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	2b02      	cmp	r3, #2
 800190a:	d104      	bne.n	8001916 <All_mode_UARTUI+0x33a>
						Nstation = DataIn;
 800190c:	4b5c      	ldr	r3, [pc, #368]	; (8001a80 <All_mode_UARTUI+0x4a4>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	b2da      	uxtb	r2, r3
 8001912:	4b64      	ldr	r3, [pc, #400]	; (8001aa4 <All_mode_UARTUI+0x4c8>)
 8001914:	701a      	strb	r2, [r3, #0]
					}
					if (dataFN < Nstation + 3){
 8001916:	4b63      	ldr	r3, [pc, #396]	; (8001aa4 <All_mode_UARTUI+0x4c8>)
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	3302      	adds	r3, #2
 800191c:	4a57      	ldr	r2, [pc, #348]	; (8001a7c <All_mode_UARTUI+0x4a0>)
 800191e:	7812      	ldrb	r2, [r2, #0]
 8001920:	4293      	cmp	r3, r2
 8001922:	db16      	blt.n	8001952 <All_mode_UARTUI+0x376>
						if (dataFN == countN + 3){
 8001924:	4b55      	ldr	r3, [pc, #340]	; (8001a7c <All_mode_UARTUI+0x4a0>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	461a      	mov	r2, r3
 800192a:	4b5f      	ldr	r3, [pc, #380]	; (8001aa8 <All_mode_UARTUI+0x4cc>)
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	3303      	adds	r3, #3
 8001930:	429a      	cmp	r2, r3
 8001932:	d10e      	bne.n	8001952 <All_mode_UARTUI+0x376>
							dataFSum += DataIn;
 8001934:	4b52      	ldr	r3, [pc, #328]	; (8001a80 <All_mode_UARTUI+0x4a4>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	b2da      	uxtb	r2, r3
 800193a:	4b5c      	ldr	r3, [pc, #368]	; (8001aac <All_mode_UARTUI+0x4d0>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	4413      	add	r3, r2
 8001940:	b2da      	uxtb	r2, r3
 8001942:	4b5a      	ldr	r3, [pc, #360]	; (8001aac <All_mode_UARTUI+0x4d0>)
 8001944:	701a      	strb	r2, [r3, #0]
							countN += 1;
 8001946:	4b58      	ldr	r3, [pc, #352]	; (8001aa8 <All_mode_UARTUI+0x4cc>)
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	3301      	adds	r3, #1
 800194c:	b2da      	uxtb	r2, r3
 800194e:	4b56      	ldr	r3, [pc, #344]	; (8001aa8 <All_mode_UARTUI+0x4cc>)
 8001950:	701a      	strb	r2, [r3, #0]
						}
					}
					chksum = DataIn;
 8001952:	4b4b      	ldr	r3, [pc, #300]	; (8001a80 <All_mode_UARTUI+0x4a4>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	b2da      	uxtb	r2, r3
 8001958:	4b4c      	ldr	r3, [pc, #304]	; (8001a8c <All_mode_UARTUI+0x4b0>)
 800195a:	701a      	strb	r2, [r3, #0]
					chksum3 = ~(StartM + Nstation + dataFSum);
 800195c:	4b4c      	ldr	r3, [pc, #304]	; (8001a90 <All_mode_UARTUI+0x4b4>)
 800195e:	781a      	ldrb	r2, [r3, #0]
 8001960:	4b50      	ldr	r3, [pc, #320]	; (8001aa4 <All_mode_UARTUI+0x4c8>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	4413      	add	r3, r2
 8001966:	b2da      	uxtb	r2, r3
 8001968:	4b50      	ldr	r3, [pc, #320]	; (8001aac <All_mode_UARTUI+0x4d0>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	4413      	add	r3, r2
 800196e:	b2db      	uxtb	r3, r3
 8001970:	43db      	mvns	r3, r3
 8001972:	b2da      	uxtb	r2, r3
 8001974:	4b4e      	ldr	r3, [pc, #312]	; (8001ab0 <All_mode_UARTUI+0x4d4>)
 8001976:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum3){
 8001978:	4b44      	ldr	r3, [pc, #272]	; (8001a8c <All_mode_UARTUI+0x4b0>)
 800197a:	781a      	ldrb	r2, [r3, #0]
 800197c:	4b4c      	ldr	r3, [pc, #304]	; (8001ab0 <All_mode_UARTUI+0x4d4>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	429a      	cmp	r2, r3
 8001982:	f040 812d 	bne.w	8001be0 <All_mode_UARTUI+0x604>
						//M_state = 7;
						/// Add work here///////////
						///////////////////////////
						HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,100);
 8001986:	2364      	movs	r3, #100	; 0x64
 8001988:	2202      	movs	r2, #2
 800198a:	4943      	ldr	r1, [pc, #268]	; (8001a98 <All_mode_UARTUI+0x4bc>)
 800198c:	4843      	ldr	r0, [pc, #268]	; (8001a9c <All_mode_UARTUI+0x4c0>)
 800198e:	f006 fc96 	bl	80082be <HAL_UART_Transmit>
						chkM = 0;
 8001992:	4b43      	ldr	r3, [pc, #268]	; (8001aa0 <All_mode_UARTUI+0x4c4>)
 8001994:	2200      	movs	r2, #0
 8001996:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 8001998:	4b38      	ldr	r3, [pc, #224]	; (8001a7c <All_mode_UARTUI+0x4a0>)
 800199a:	2200      	movs	r2, #0
 800199c:	701a      	strb	r2, [r3, #0]
						countN = 0;
 800199e:	4b42      	ldr	r3, [pc, #264]	; (8001aa8 <All_mode_UARTUI+0x4cc>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	701a      	strb	r2, [r3, #0]
					}
					break;
 80019a4:	e11c      	b.n	8001be0 <All_mode_UARTUI+0x604>
				case 8:			// Order Go to that position
					chksum = DataIn;
 80019a6:	4b36      	ldr	r3, [pc, #216]	; (8001a80 <All_mode_UARTUI+0x4a4>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	b2da      	uxtb	r2, r3
 80019ac:	4b37      	ldr	r3, [pc, #220]	; (8001a8c <All_mode_UARTUI+0x4b0>)
 80019ae:	701a      	strb	r2, [r3, #0]
					chksum1 = ~(StartM);
 80019b0:	4b37      	ldr	r3, [pc, #220]	; (8001a90 <All_mode_UARTUI+0x4b4>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	43db      	mvns	r3, r3
 80019b6:	b2da      	uxtb	r2, r3
 80019b8:	4b3e      	ldr	r3, [pc, #248]	; (8001ab4 <All_mode_UARTUI+0x4d8>)
 80019ba:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum1){
 80019bc:	4b33      	ldr	r3, [pc, #204]	; (8001a8c <All_mode_UARTUI+0x4b0>)
 80019be:	781a      	ldrb	r2, [r3, #0]
 80019c0:	4b3c      	ldr	r3, [pc, #240]	; (8001ab4 <All_mode_UARTUI+0x4d8>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	f040 810d 	bne.w	8001be4 <All_mode_UARTUI+0x608>
						//M_state = 8;
						HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,100); //Xu
 80019ca:	2364      	movs	r3, #100	; 0x64
 80019cc:	2202      	movs	r2, #2
 80019ce:	4932      	ldr	r1, [pc, #200]	; (8001a98 <All_mode_UARTUI+0x4bc>)
 80019d0:	4832      	ldr	r0, [pc, #200]	; (8001a9c <All_mode_UARTUI+0x4c0>)
 80019d2:	f006 fc74 	bl	80082be <HAL_UART_Transmit>
						//// simulate workload
						HAL_Delay(1000);
 80019d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019da:	f000 fd57 	bl	800248c <HAL_Delay>
						grandState = work;
 80019de:	4b36      	ldr	r3, [pc, #216]	; (8001ab8 <All_mode_UARTUI+0x4dc>)
 80019e0:	2201      	movs	r2, #1
 80019e2:	701a      	strb	r2, [r3, #0]
						/// Add work here///////////
						///////////////////////////
						HAL_UART_Transmit(&huart2, (uint8_t*)temp_f, 2 ,100);//Fn
 80019e4:	2364      	movs	r3, #100	; 0x64
 80019e6:	2202      	movs	r2, #2
 80019e8:	4934      	ldr	r1, [pc, #208]	; (8001abc <All_mode_UARTUI+0x4e0>)
 80019ea:	482c      	ldr	r0, [pc, #176]	; (8001a9c <All_mode_UARTUI+0x4c0>)
 80019ec:	f006 fc67 	bl	80082be <HAL_UART_Transmit>
						chkM = 0;
 80019f0:	4b2b      	ldr	r3, [pc, #172]	; (8001aa0 <All_mode_UARTUI+0x4c4>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 80019f6:	4b21      	ldr	r3, [pc, #132]	; (8001a7c <All_mode_UARTUI+0x4a0>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	701a      	strb	r2, [r3, #0]
					}
					break;
 80019fc:	e0f2      	b.n	8001be4 <All_mode_UARTUI+0x608>

				////////////// Frame 2 ////////////////////////////////////////
				case 9:			// Request Current Station
					chksum = DataIn;
 80019fe:	4b20      	ldr	r3, [pc, #128]	; (8001a80 <All_mode_UARTUI+0x4a4>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	b2da      	uxtb	r2, r3
 8001a04:	4b21      	ldr	r3, [pc, #132]	; (8001a8c <All_mode_UARTUI+0x4b0>)
 8001a06:	701a      	strb	r2, [r3, #0]
					chksum1 = ~(StartM);
 8001a08:	4b21      	ldr	r3, [pc, #132]	; (8001a90 <All_mode_UARTUI+0x4b4>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	b2da      	uxtb	r2, r3
 8001a10:	4b28      	ldr	r3, [pc, #160]	; (8001ab4 <All_mode_UARTUI+0x4d8>)
 8001a12:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum1){
 8001a14:	4b1d      	ldr	r3, [pc, #116]	; (8001a8c <All_mode_UARTUI+0x4b0>)
 8001a16:	781a      	ldrb	r2, [r3, #0]
 8001a18:	4b26      	ldr	r3, [pc, #152]	; (8001ab4 <All_mode_UARTUI+0x4d8>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	f040 80e3 	bne.w	8001be8 <All_mode_UARTUI+0x60c>
						//M_state = 9;
						/// Add work here///////////
						///////////////////////////
						HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,100); //Xu
 8001a22:	2364      	movs	r3, #100	; 0x64
 8001a24:	2202      	movs	r2, #2
 8001a26:	491c      	ldr	r1, [pc, #112]	; (8001a98 <All_mode_UARTUI+0x4bc>)
 8001a28:	481c      	ldr	r0, [pc, #112]	; (8001a9c <All_mode_UARTUI+0x4c0>)
 8001a2a:	f006 fc48 	bl	80082be <HAL_UART_Transmit>
						chkM = 0;
 8001a2e:	4b1c      	ldr	r3, [pc, #112]	; (8001aa0 <All_mode_UARTUI+0x4c4>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 8001a34:	4b11      	ldr	r3, [pc, #68]	; (8001a7c <All_mode_UARTUI+0x4a0>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	701a      	strb	r2, [r3, #0]
					}
					break;
 8001a3a:	e0d5      	b.n	8001be8 <All_mode_UARTUI+0x60c>
				case 10:	// Request angular position
					chksum = DataIn;
 8001a3c:	4b10      	ldr	r3, [pc, #64]	; (8001a80 <All_mode_UARTUI+0x4a4>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	b2da      	uxtb	r2, r3
 8001a42:	4b12      	ldr	r3, [pc, #72]	; (8001a8c <All_mode_UARTUI+0x4b0>)
 8001a44:	701a      	strb	r2, [r3, #0]
					chksum1 = ~(StartM);
 8001a46:	4b12      	ldr	r3, [pc, #72]	; (8001a90 <All_mode_UARTUI+0x4b4>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	43db      	mvns	r3, r3
 8001a4c:	b2da      	uxtb	r2, r3
 8001a4e:	4b19      	ldr	r3, [pc, #100]	; (8001ab4 <All_mode_UARTUI+0x4d8>)
 8001a50:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum1){
 8001a52:	4b0e      	ldr	r3, [pc, #56]	; (8001a8c <All_mode_UARTUI+0x4b0>)
 8001a54:	781a      	ldrb	r2, [r3, #0]
 8001a56:	4b17      	ldr	r3, [pc, #92]	; (8001ab4 <All_mode_UARTUI+0x4d8>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	f040 80c6 	bne.w	8001bec <All_mode_UARTUI+0x610>
						//M_state = 10;
						HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,100); //Xu
 8001a60:	2364      	movs	r3, #100	; 0x64
 8001a62:	2202      	movs	r2, #2
 8001a64:	490c      	ldr	r1, [pc, #48]	; (8001a98 <All_mode_UARTUI+0x4bc>)
 8001a66:	480d      	ldr	r0, [pc, #52]	; (8001a9c <All_mode_UARTUI+0x4c0>)
 8001a68:	f006 fc29 	bl	80082be <HAL_UART_Transmit>
						/// Add work here///////////
						///////////////////////////

						//uint16_t angu = BinPosXI * 360 / 1024;
						//HAL_UART_Transmit(&huart2, (uint16_t*)angu, 2 ,100);
						chkM = 0;
 8001a6c:	4b0c      	ldr	r3, [pc, #48]	; (8001aa0 <All_mode_UARTUI+0x4c4>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 8001a72:	4b02      	ldr	r3, [pc, #8]	; (8001a7c <All_mode_UARTUI+0x4a0>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	701a      	strb	r2, [r3, #0]
					}
					break;
 8001a78:	e0b8      	b.n	8001bec <All_mode_UARTUI+0x610>
 8001a7a:	bf00      	nop
 8001a7c:	2000034b 	.word	0x2000034b
 8001a80:	20000344 	.word	0x20000344
 8001a84:	2000034d 	.word	0x2000034d
 8001a88:	2000034e 	.word	0x2000034e
 8001a8c:	20000350 	.word	0x20000350
 8001a90:	20000349 	.word	0x20000349
 8001a94:	20000352 	.word	0x20000352
 8001a98:	20000014 	.word	0x20000014
 8001a9c:	2000023c 	.word	0x2000023c
 8001aa0:	20000348 	.word	0x20000348
 8001aa4:	2000034c 	.word	0x2000034c
 8001aa8:	20000354 	.word	0x20000354
 8001aac:	2000034f 	.word	0x2000034f
 8001ab0:	20000353 	.word	0x20000353
 8001ab4:	20000351 	.word	0x20000351
 8001ab8:	20000280 	.word	0x20000280
 8001abc:	20000018 	.word	0x20000018
				case 11:		// Request Max Velo
					chksum = DataIn;
 8001ac0:	4b50      	ldr	r3, [pc, #320]	; (8001c04 <All_mode_UARTUI+0x628>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	b2da      	uxtb	r2, r3
 8001ac6:	4b50      	ldr	r3, [pc, #320]	; (8001c08 <All_mode_UARTUI+0x62c>)
 8001ac8:	701a      	strb	r2, [r3, #0]
					chksum1 = ~(StartM);
 8001aca:	4b50      	ldr	r3, [pc, #320]	; (8001c0c <All_mode_UARTUI+0x630>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	43db      	mvns	r3, r3
 8001ad0:	b2da      	uxtb	r2, r3
 8001ad2:	4b4f      	ldr	r3, [pc, #316]	; (8001c10 <All_mode_UARTUI+0x634>)
 8001ad4:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum1){
 8001ad6:	4b4c      	ldr	r3, [pc, #304]	; (8001c08 <All_mode_UARTUI+0x62c>)
 8001ad8:	781a      	ldrb	r2, [r3, #0]
 8001ada:	4b4d      	ldr	r3, [pc, #308]	; (8001c10 <All_mode_UARTUI+0x634>)
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d10b      	bne.n	8001afa <All_mode_UARTUI+0x51e>
						//M_state = 11;
						/// Add work here///////////
												///////////////////////////
						HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,100); //Xu
 8001ae2:	2364      	movs	r3, #100	; 0x64
 8001ae4:	2202      	movs	r2, #2
 8001ae6:	494b      	ldr	r1, [pc, #300]	; (8001c14 <All_mode_UARTUI+0x638>)
 8001ae8:	484b      	ldr	r0, [pc, #300]	; (8001c18 <All_mode_UARTUI+0x63c>)
 8001aea:	f006 fbe8 	bl	80082be <HAL_UART_Transmit>
						chkM = 0;
 8001aee:	4b4b      	ldr	r3, [pc, #300]	; (8001c1c <All_mode_UARTUI+0x640>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 8001af4:	4b4a      	ldr	r3, [pc, #296]	; (8001c20 <All_mode_UARTUI+0x644>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	701a      	strb	r2, [r3, #0]
					}
				case 12:	// 12 Enable end effector
					chksum = DataIn;
 8001afa:	4b42      	ldr	r3, [pc, #264]	; (8001c04 <All_mode_UARTUI+0x628>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	b2da      	uxtb	r2, r3
 8001b00:	4b41      	ldr	r3, [pc, #260]	; (8001c08 <All_mode_UARTUI+0x62c>)
 8001b02:	701a      	strb	r2, [r3, #0]
					chksum1 = ~(StartM);
 8001b04:	4b41      	ldr	r3, [pc, #260]	; (8001c0c <All_mode_UARTUI+0x630>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	b2da      	uxtb	r2, r3
 8001b0c:	4b40      	ldr	r3, [pc, #256]	; (8001c10 <All_mode_UARTUI+0x634>)
 8001b0e:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum1){
 8001b10:	4b3d      	ldr	r3, [pc, #244]	; (8001c08 <All_mode_UARTUI+0x62c>)
 8001b12:	781a      	ldrb	r2, [r3, #0]
 8001b14:	4b3e      	ldr	r3, [pc, #248]	; (8001c10 <All_mode_UARTUI+0x634>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d169      	bne.n	8001bf0 <All_mode_UARTUI+0x614>
						//M_state = 12;
						flag_efftActi = 1;
 8001b1c:	4b41      	ldr	r3, [pc, #260]	; (8001c24 <All_mode_UARTUI+0x648>)
 8001b1e:	2201      	movs	r2, #1
 8001b20:	701a      	strb	r2, [r3, #0]

						HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,100); //Xu
 8001b22:	2364      	movs	r3, #100	; 0x64
 8001b24:	2202      	movs	r2, #2
 8001b26:	493b      	ldr	r1, [pc, #236]	; (8001c14 <All_mode_UARTUI+0x638>)
 8001b28:	483b      	ldr	r0, [pc, #236]	; (8001c18 <All_mode_UARTUI+0x63c>)
 8001b2a:	f006 fbc8 	bl	80082be <HAL_UART_Transmit>
						chkM = 0;
 8001b2e:	4b3b      	ldr	r3, [pc, #236]	; (8001c1c <All_mode_UARTUI+0x640>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 8001b34:	4b3a      	ldr	r3, [pc, #232]	; (8001c20 <All_mode_UARTUI+0x644>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	701a      	strb	r2, [r3, #0]
					}
					break;
 8001b3a:	e059      	b.n	8001bf0 <All_mode_UARTUI+0x614>

				case 13:	// 13  Disable end effector
					chksum = DataIn;
 8001b3c:	4b31      	ldr	r3, [pc, #196]	; (8001c04 <All_mode_UARTUI+0x628>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	b2da      	uxtb	r2, r3
 8001b42:	4b31      	ldr	r3, [pc, #196]	; (8001c08 <All_mode_UARTUI+0x62c>)
 8001b44:	701a      	strb	r2, [r3, #0]
					chksum1 = ~(StartM);
 8001b46:	4b31      	ldr	r3, [pc, #196]	; (8001c0c <All_mode_UARTUI+0x630>)
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	43db      	mvns	r3, r3
 8001b4c:	b2da      	uxtb	r2, r3
 8001b4e:	4b30      	ldr	r3, [pc, #192]	; (8001c10 <All_mode_UARTUI+0x634>)
 8001b50:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum1){
 8001b52:	4b2d      	ldr	r3, [pc, #180]	; (8001c08 <All_mode_UARTUI+0x62c>)
 8001b54:	781a      	ldrb	r2, [r3, #0]
 8001b56:	4b2e      	ldr	r3, [pc, #184]	; (8001c10 <All_mode_UARTUI+0x634>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d14a      	bne.n	8001bf4 <All_mode_UARTUI+0x618>
						//M_state = 13;

						trig_efftRead = 0;
 8001b5e:	4b32      	ldr	r3, [pc, #200]	; (8001c28 <All_mode_UARTUI+0x64c>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	701a      	strb	r2, [r3, #0]
						flag_efftRead = 0;
 8001b64:	4b31      	ldr	r3, [pc, #196]	; (8001c2c <All_mode_UARTUI+0x650>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,100); //Xu
 8001b6a:	2364      	movs	r3, #100	; 0x64
 8001b6c:	2202      	movs	r2, #2
 8001b6e:	4929      	ldr	r1, [pc, #164]	; (8001c14 <All_mode_UARTUI+0x638>)
 8001b70:	4829      	ldr	r0, [pc, #164]	; (8001c18 <All_mode_UARTUI+0x63c>)
 8001b72:	f006 fba4 	bl	80082be <HAL_UART_Transmit>
						chkM = 0;
 8001b76:	4b29      	ldr	r3, [pc, #164]	; (8001c1c <All_mode_UARTUI+0x640>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 8001b7c:	4b28      	ldr	r3, [pc, #160]	; (8001c20 <All_mode_UARTUI+0x644>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	701a      	strb	r2, [r3, #0]
					}
					break;
 8001b82:	e037      	b.n	8001bf4 <All_mode_UARTUI+0x618>

				case 14:	// 14 Set Home
					chksum = DataIn;
 8001b84:	4b1f      	ldr	r3, [pc, #124]	; (8001c04 <All_mode_UARTUI+0x628>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	b2da      	uxtb	r2, r3
 8001b8a:	4b1f      	ldr	r3, [pc, #124]	; (8001c08 <All_mode_UARTUI+0x62c>)
 8001b8c:	701a      	strb	r2, [r3, #0]
					chksum1 = ~(StartM);
 8001b8e:	4b1f      	ldr	r3, [pc, #124]	; (8001c0c <All_mode_UARTUI+0x630>)
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	43db      	mvns	r3, r3
 8001b94:	b2da      	uxtb	r2, r3
 8001b96:	4b1e      	ldr	r3, [pc, #120]	; (8001c10 <All_mode_UARTUI+0x634>)
 8001b98:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum1){
 8001b9a:	4b1b      	ldr	r3, [pc, #108]	; (8001c08 <All_mode_UARTUI+0x62c>)
 8001b9c:	781a      	ldrb	r2, [r3, #0]
 8001b9e:	4b1c      	ldr	r3, [pc, #112]	; (8001c10 <All_mode_UARTUI+0x634>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d128      	bne.n	8001bf8 <All_mode_UARTUI+0x61c>
						//M_state = 14;
						/// Add work here///////////
						TargetDeg = 0;
 8001ba6:	4b22      	ldr	r3, [pc, #136]	; (8001c30 <All_mode_UARTUI+0x654>)
 8001ba8:	f04f 0200 	mov.w	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]
						//// PID and MotDrv to 0
						HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,100); //Xu
 8001bae:	2364      	movs	r3, #100	; 0x64
 8001bb0:	2202      	movs	r2, #2
 8001bb2:	4918      	ldr	r1, [pc, #96]	; (8001c14 <All_mode_UARTUI+0x638>)
 8001bb4:	4818      	ldr	r0, [pc, #96]	; (8001c18 <All_mode_UARTUI+0x63c>)
 8001bb6:	f006 fb82 	bl	80082be <HAL_UART_Transmit>
						chkM = 0;
 8001bba:	4b18      	ldr	r3, [pc, #96]	; (8001c1c <All_mode_UARTUI+0x640>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 8001bc0:	4b17      	ldr	r3, [pc, #92]	; (8001c20 <All_mode_UARTUI+0x644>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	701a      	strb	r2, [r3, #0]
					}
					break;
 8001bc6:	e017      	b.n	8001bf8 <All_mode_UARTUI+0x61c>
					break;
 8001bc8:	bf00      	nop
 8001bca:	e016      	b.n	8001bfa <All_mode_UARTUI+0x61e>
					break;
 8001bcc:	bf00      	nop
 8001bce:	e014      	b.n	8001bfa <All_mode_UARTUI+0x61e>
					break;
 8001bd0:	bf00      	nop
 8001bd2:	e012      	b.n	8001bfa <All_mode_UARTUI+0x61e>
					break;
 8001bd4:	bf00      	nop
 8001bd6:	e010      	b.n	8001bfa <All_mode_UARTUI+0x61e>
					break;
 8001bd8:	bf00      	nop
 8001bda:	e00e      	b.n	8001bfa <All_mode_UARTUI+0x61e>
					break;
 8001bdc:	bf00      	nop
 8001bde:	e00c      	b.n	8001bfa <All_mode_UARTUI+0x61e>
					break;
 8001be0:	bf00      	nop
 8001be2:	e00a      	b.n	8001bfa <All_mode_UARTUI+0x61e>
					break;
 8001be4:	bf00      	nop
 8001be6:	e008      	b.n	8001bfa <All_mode_UARTUI+0x61e>
					break;
 8001be8:	bf00      	nop
 8001bea:	e006      	b.n	8001bfa <All_mode_UARTUI+0x61e>
					break;
 8001bec:	bf00      	nop
 8001bee:	e004      	b.n	8001bfa <All_mode_UARTUI+0x61e>
					break;
 8001bf0:	bf00      	nop
 8001bf2:	e002      	b.n	8001bfa <All_mode_UARTUI+0x61e>
					break;
 8001bf4:	bf00      	nop
 8001bf6:	e000      	b.n	8001bfa <All_mode_UARTUI+0x61e>
					break;
 8001bf8:	bf00      	nop
					} /// End switch NameM
			break;
 8001bfa:	bf00      	nop
	}//end sw chkM

}
 8001bfc:	bf00      	nop
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	20000344 	.word	0x20000344
 8001c08:	20000350 	.word	0x20000350
 8001c0c:	20000349 	.word	0x20000349
 8001c10:	20000351 	.word	0x20000351
 8001c14:	20000014 	.word	0x20000014
 8001c18:	2000023c 	.word	0x2000023c
 8001c1c:	20000348 	.word	0x20000348
 8001c20:	2000034b 	.word	0x2000034b
 8001c24:	20000311 	.word	0x20000311
 8001c28:	20000313 	.word	0x20000313
 8001c2c:	20000312 	.word	0x20000312
 8001c30:	200002e8 	.word	0x200002e8

08001c34 <UARTRecieveIT>:

void UARTRecieveIT()
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
	static uint32_t dataPos =0;
	int16_t data=-1;
 8001c3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c3e:	80fb      	strh	r3, [r7, #6]
	HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 32);
 8001c40:	2220      	movs	r2, #32
 8001c42:	491b      	ldr	r1, [pc, #108]	; (8001cb0 <UARTRecieveIT+0x7c>)
 8001c44:	481b      	ldr	r0, [pc, #108]	; (8001cb4 <UARTRecieveIT+0x80>)
 8001c46:	f006 fbcc 	bl	80083e2 <HAL_UART_Receive_IT>
	if(huart2.RxXferSize - huart2.RxXferCount!=dataPos)
 8001c4a:	4b1a      	ldr	r3, [pc, #104]	; (8001cb4 <UARTRecieveIT+0x80>)
 8001c4c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001c4e:	461a      	mov	r2, r3
 8001c50:	4b18      	ldr	r3, [pc, #96]	; (8001cb4 <UARTRecieveIT+0x80>)
 8001c52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	4a17      	ldr	r2, [pc, #92]	; (8001cb8 <UARTRecieveIT+0x84>)
 8001c5a:	6812      	ldr	r2, [r2, #0]
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d01f      	beq.n	8001ca0 <UARTRecieveIT+0x6c>
	{
		data=RxDataBuffer[dataPos];
 8001c60:	4b15      	ldr	r3, [pc, #84]	; (8001cb8 <UARTRecieveIT+0x84>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a12      	ldr	r2, [pc, #72]	; (8001cb0 <UARTRecieveIT+0x7c>)
 8001c66:	5cd3      	ldrb	r3, [r2, r3]
 8001c68:	80fb      	strh	r3, [r7, #6]
		DataIn = data;
 8001c6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c6e:	4a13      	ldr	r2, [pc, #76]	; (8001cbc <UARTRecieveIT+0x88>)
 8001c70:	6013      	str	r3, [r2, #0]
		dataPos= (dataPos+1)%huart2.RxXferSize;
 8001c72:	4b11      	ldr	r3, [pc, #68]	; (8001cb8 <UARTRecieveIT+0x84>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	3301      	adds	r3, #1
 8001c78:	4a0e      	ldr	r2, [pc, #56]	; (8001cb4 <UARTRecieveIT+0x80>)
 8001c7a:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8001c7c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001c80:	fb01 f202 	mul.w	r2, r1, r2
 8001c84:	1a9b      	subs	r3, r3, r2
 8001c86:	4a0c      	ldr	r2, [pc, #48]	; (8001cb8 <UARTRecieveIT+0x84>)
 8001c88:	6013      	str	r3, [r2, #0]
		Posdata = dataPos;
 8001c8a:	4b0b      	ldr	r3, [pc, #44]	; (8001cb8 <UARTRecieveIT+0x84>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	b2da      	uxtb	r2, r3
 8001c90:	4b0b      	ldr	r3, [pc, #44]	; (8001cc0 <UARTRecieveIT+0x8c>)
 8001c92:	701a      	strb	r2, [r3, #0]
		dataFN += 1;
 8001c94:	4b0b      	ldr	r3, [pc, #44]	; (8001cc4 <UARTRecieveIT+0x90>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	b2da      	uxtb	r2, r3
 8001c9c:	4b09      	ldr	r3, [pc, #36]	; (8001cc4 <UARTRecieveIT+0x90>)
 8001c9e:	701a      	strb	r2, [r3, #0]
	}
	All_mode_UARTUI();
 8001ca0:	f7ff fc9c 	bl	80015dc <All_mode_UARTUI>
	All_mode_UARTUI();
 8001ca4:	f7ff fc9a 	bl	80015dc <All_mode_UARTUI>

}
 8001ca8:	bf00      	nop
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	20000320 	.word	0x20000320
 8001cb4:	2000023c 	.word	0x2000023c
 8001cb8:	20000358 	.word	0x20000358
 8001cbc:	20000344 	.word	0x20000344
 8001cc0:	20000340 	.word	0x20000340
 8001cc4:	2000034b 	.word	0x2000034b

08001cc8 <HAL_GPIO_EXTI_Callback>:

/////////////// Emer Interrupt /////////////////////////////////
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	4603      	mov	r3, r0
 8001cd0:	80fb      	strh	r3, [r7, #6]
	//// EMER ////
	if(GPIO_Pin == GPIO_PIN_11){
 8001cd2:	88fb      	ldrh	r3, [r7, #6]
 8001cd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001cd8:	d10e      	bne.n	8001cf8 <HAL_GPIO_EXTI_Callback+0x30>
		//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
		counter_e++;
 8001cda:	4b1d      	ldr	r3, [pc, #116]	; (8001d50 <HAL_GPIO_EXTI_Callback+0x88>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	b2da      	uxtb	r2, r3
 8001ce2:	4b1b      	ldr	r3, [pc, #108]	; (8001d50 <HAL_GPIO_EXTI_Callback+0x88>)
 8001ce4:	701a      	strb	r2, [r3, #0]
		grandState = emer;
 8001ce6:	4b1b      	ldr	r3, [pc, #108]	; (8001d54 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001ce8:	2203      	movs	r2, #3
 8001cea:	701a      	strb	r2, [r3, #0]
		bluecounter = 0;
 8001cec:	4b1a      	ldr	r3, [pc, #104]	; (8001d58 <HAL_GPIO_EXTI_Callback+0x90>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	701a      	strb	r2, [r3, #0]
		PWMOut = 0;
 8001cf2:	4b1a      	ldr	r3, [pc, #104]	; (8001d5c <HAL_GPIO_EXTI_Callback+0x94>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	801a      	strh	r2, [r3, #0]
		// Motor Driver Torque Lock here
	}
	//// Stop ////
	if(GPIO_Pin == GPIO_PIN_10){
 8001cf8:	88fb      	ldrh	r3, [r7, #6]
 8001cfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cfe:	d10c      	bne.n	8001d1a <HAL_GPIO_EXTI_Callback+0x52>
		PWMOut = 0;
 8001d00:	4b16      	ldr	r3, [pc, #88]	; (8001d5c <HAL_GPIO_EXTI_Callback+0x94>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	801a      	strh	r2, [r3, #0]
		bluecounter = 0;
 8001d06:	4b14      	ldr	r3, [pc, #80]	; (8001d58 <HAL_GPIO_EXTI_Callback+0x90>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	701a      	strb	r2, [r3, #0]
		if(grandState == work){grandState = stopnd;}
 8001d0c:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d102      	bne.n	8001d1a <HAL_GPIO_EXTI_Callback+0x52>
 8001d14:	4b0f      	ldr	r3, [pc, #60]	; (8001d54 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001d16:	2204      	movs	r2, #4
 8001d18:	701a      	strb	r2, [r3, #0]
		//else{grandState = stop;}

		}
	//// work Blue button////
	if(GPIO_Pin == GPIO_PIN_13){
 8001d1a:	88fb      	ldrh	r3, [r7, #6]
 8001d1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d20:	d108      	bne.n	8001d34 <HAL_GPIO_EXTI_Callback+0x6c>
		bluecounter++;
 8001d22:	4b0d      	ldr	r3, [pc, #52]	; (8001d58 <HAL_GPIO_EXTI_Callback+0x90>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	3301      	adds	r3, #1
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	4b0b      	ldr	r3, [pc, #44]	; (8001d58 <HAL_GPIO_EXTI_Callback+0x90>)
 8001d2c:	701a      	strb	r2, [r3, #0]
		flag_efftActi = 1;
 8001d2e:	4b0c      	ldr	r3, [pc, #48]	; (8001d60 <HAL_GPIO_EXTI_Callback+0x98>)
 8001d30:	2201      	movs	r2, #1
 8001d32:	701a      	strb	r2, [r3, #0]
		//trig_efftRead = 1;
	}

	//// setzero ////
		if(GPIO_Pin == GPIO_PIN_2){
 8001d34:	88fb      	ldrh	r3, [r7, #6]
 8001d36:	2b04      	cmp	r3, #4
 8001d38:	d103      	bne.n	8001d42 <HAL_GPIO_EXTI_Callback+0x7a>
			TargetDeg = 0;
 8001d3a:	4b0a      	ldr	r3, [pc, #40]	; (8001d64 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001d3c:	f04f 0200 	mov.w	r2, #0
 8001d40:	601a      	str	r2, [r3, #0]
		}
}
 8001d42:	bf00      	nop
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	20000290 	.word	0x20000290
 8001d54:	20000280 	.word	0x20000280
 8001d58:	200002e5 	.word	0x200002e5
 8001d5c:	2000000a 	.word	0x2000000a
 8001d60:	20000311 	.word	0x20000311
 8001d64:	200002e8 	.word	0x200002e8

08001d68 <micros>:

///////////////////////////////////// micro timer////////////////////////////////////
uint64_t micros()
{return _micros + htim11.Instance->CNT;}
 8001d68:	b4b0      	push	{r4, r5, r7}
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	4b09      	ldr	r3, [pc, #36]	; (8001d94 <micros+0x2c>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d72:	2200      	movs	r2, #0
 8001d74:	4618      	mov	r0, r3
 8001d76:	4611      	mov	r1, r2
 8001d78:	4b07      	ldr	r3, [pc, #28]	; (8001d98 <micros+0x30>)
 8001d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d7e:	1884      	adds	r4, r0, r2
 8001d80:	eb41 0503 	adc.w	r5, r1, r3
 8001d84:	4622      	mov	r2, r4
 8001d86:	462b      	mov	r3, r5
 8001d88:	4610      	mov	r0, r2
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bcb0      	pop	{r4, r5, r7}
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	20000194 	.word	0x20000194
 8001d98:	20000288 	.word	0x20000288

08001d9c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001d9c:	b4b0      	push	{r4, r5, r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 if(htim == &htim11)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4a09      	ldr	r2, [pc, #36]	; (8001dcc <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d10a      	bne.n	8001dc2 <HAL_TIM_PeriodElapsedCallback+0x26>
 {_micros += 65535;}
 8001dac:	4b08      	ldr	r3, [pc, #32]	; (8001dd0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001db6:	1854      	adds	r4, r2, r1
 8001db8:	f143 0500 	adc.w	r5, r3, #0
 8001dbc:	4b04      	ldr	r3, [pc, #16]	; (8001dd0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001dbe:	e9c3 4500 	strd	r4, r5, [r3]
}
 8001dc2:	bf00      	nop
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bcb0      	pop	{r4, r5, r7}
 8001dca:	4770      	bx	lr
 8001dcc:	20000194 	.word	0x20000194
 8001dd0:	20000288 	.word	0x20000288

08001dd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dd8:	b672      	cpsid	i
}
 8001dda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ddc:	e7fe      	b.n	8001ddc <Error_Handler+0x8>
	...

08001de0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	607b      	str	r3, [r7, #4]
 8001dea:	4b10      	ldr	r3, [pc, #64]	; (8001e2c <HAL_MspInit+0x4c>)
 8001dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dee:	4a0f      	ldr	r2, [pc, #60]	; (8001e2c <HAL_MspInit+0x4c>)
 8001df0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001df4:	6453      	str	r3, [r2, #68]	; 0x44
 8001df6:	4b0d      	ldr	r3, [pc, #52]	; (8001e2c <HAL_MspInit+0x4c>)
 8001df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dfe:	607b      	str	r3, [r7, #4]
 8001e00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	603b      	str	r3, [r7, #0]
 8001e06:	4b09      	ldr	r3, [pc, #36]	; (8001e2c <HAL_MspInit+0x4c>)
 8001e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0a:	4a08      	ldr	r2, [pc, #32]	; (8001e2c <HAL_MspInit+0x4c>)
 8001e0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e10:	6413      	str	r3, [r2, #64]	; 0x40
 8001e12:	4b06      	ldr	r3, [pc, #24]	; (8001e2c <HAL_MspInit+0x4c>)
 8001e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e1a:	603b      	str	r3, [r7, #0]
 8001e1c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001e1e:	2007      	movs	r0, #7
 8001e20:	f000 fc28 	bl	8002674 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e24:	bf00      	nop
 8001e26:	3708      	adds	r7, #8
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40023800 	.word	0x40023800

08001e30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b08c      	sub	sp, #48	; 0x30
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e38:	f107 031c 	add.w	r3, r7, #28
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	605a      	str	r2, [r3, #4]
 8001e42:	609a      	str	r2, [r3, #8]
 8001e44:	60da      	str	r2, [r3, #12]
 8001e46:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a52      	ldr	r2, [pc, #328]	; (8001f98 <HAL_I2C_MspInit+0x168>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d13d      	bne.n	8001ece <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	61bb      	str	r3, [r7, #24]
 8001e56:	4b51      	ldr	r3, [pc, #324]	; (8001f9c <HAL_I2C_MspInit+0x16c>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	4a50      	ldr	r2, [pc, #320]	; (8001f9c <HAL_I2C_MspInit+0x16c>)
 8001e5c:	f043 0302 	orr.w	r3, r3, #2
 8001e60:	6313      	str	r3, [r2, #48]	; 0x30
 8001e62:	4b4e      	ldr	r3, [pc, #312]	; (8001f9c <HAL_I2C_MspInit+0x16c>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	61bb      	str	r3, [r7, #24]
 8001e6c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e6e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e74:	2312      	movs	r3, #18
 8001e76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e80:	2304      	movs	r3, #4
 8001e82:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e84:	f107 031c 	add.w	r3, r7, #28
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4845      	ldr	r0, [pc, #276]	; (8001fa0 <HAL_I2C_MspInit+0x170>)
 8001e8c:	f001 f844 	bl	8002f18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e90:	2300      	movs	r3, #0
 8001e92:	617b      	str	r3, [r7, #20]
 8001e94:	4b41      	ldr	r3, [pc, #260]	; (8001f9c <HAL_I2C_MspInit+0x16c>)
 8001e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e98:	4a40      	ldr	r2, [pc, #256]	; (8001f9c <HAL_I2C_MspInit+0x16c>)
 8001e9a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e9e:	6413      	str	r3, [r2, #64]	; 0x40
 8001ea0:	4b3e      	ldr	r3, [pc, #248]	; (8001f9c <HAL_I2C_MspInit+0x16c>)
 8001ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ea8:	617b      	str	r3, [r7, #20]
 8001eaa:	697b      	ldr	r3, [r7, #20]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001eac:	2200      	movs	r2, #0
 8001eae:	2100      	movs	r1, #0
 8001eb0:	201f      	movs	r0, #31
 8001eb2:	f000 fbea 	bl	800268a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001eb6:	201f      	movs	r0, #31
 8001eb8:	f000 fc03 	bl	80026c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	2020      	movs	r0, #32
 8001ec2:	f000 fbe2 	bl	800268a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001ec6:	2020      	movs	r0, #32
 8001ec8:	f000 fbfb 	bl	80026c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001ecc:	e060      	b.n	8001f90 <HAL_I2C_MspInit+0x160>
  else if(hi2c->Instance==I2C3)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a34      	ldr	r2, [pc, #208]	; (8001fa4 <HAL_I2C_MspInit+0x174>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d15b      	bne.n	8001f90 <HAL_I2C_MspInit+0x160>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ed8:	2300      	movs	r3, #0
 8001eda:	613b      	str	r3, [r7, #16]
 8001edc:	4b2f      	ldr	r3, [pc, #188]	; (8001f9c <HAL_I2C_MspInit+0x16c>)
 8001ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee0:	4a2e      	ldr	r2, [pc, #184]	; (8001f9c <HAL_I2C_MspInit+0x16c>)
 8001ee2:	f043 0304 	orr.w	r3, r3, #4
 8001ee6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee8:	4b2c      	ldr	r3, [pc, #176]	; (8001f9c <HAL_I2C_MspInit+0x16c>)
 8001eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eec:	f003 0304 	and.w	r3, r3, #4
 8001ef0:	613b      	str	r3, [r7, #16]
 8001ef2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	60fb      	str	r3, [r7, #12]
 8001ef8:	4b28      	ldr	r3, [pc, #160]	; (8001f9c <HAL_I2C_MspInit+0x16c>)
 8001efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efc:	4a27      	ldr	r2, [pc, #156]	; (8001f9c <HAL_I2C_MspInit+0x16c>)
 8001efe:	f043 0301 	orr.w	r3, r3, #1
 8001f02:	6313      	str	r3, [r2, #48]	; 0x30
 8001f04:	4b25      	ldr	r3, [pc, #148]	; (8001f9c <HAL_I2C_MspInit+0x16c>)
 8001f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f08:	f003 0301 	and.w	r3, r3, #1
 8001f0c:	60fb      	str	r3, [r7, #12]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f16:	2312      	movs	r3, #18
 8001f18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001f22:	2304      	movs	r3, #4
 8001f24:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f26:	f107 031c 	add.w	r3, r7, #28
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	481e      	ldr	r0, [pc, #120]	; (8001fa8 <HAL_I2C_MspInit+0x178>)
 8001f2e:	f000 fff3 	bl	8002f18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001f32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f38:	2312      	movs	r3, #18
 8001f3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f40:	2303      	movs	r3, #3
 8001f42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001f44:	2304      	movs	r3, #4
 8001f46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f48:	f107 031c 	add.w	r3, r7, #28
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4817      	ldr	r0, [pc, #92]	; (8001fac <HAL_I2C_MspInit+0x17c>)
 8001f50:	f000 ffe2 	bl	8002f18 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001f54:	2300      	movs	r3, #0
 8001f56:	60bb      	str	r3, [r7, #8]
 8001f58:	4b10      	ldr	r3, [pc, #64]	; (8001f9c <HAL_I2C_MspInit+0x16c>)
 8001f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5c:	4a0f      	ldr	r2, [pc, #60]	; (8001f9c <HAL_I2C_MspInit+0x16c>)
 8001f5e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f62:	6413      	str	r3, [r2, #64]	; 0x40
 8001f64:	4b0d      	ldr	r3, [pc, #52]	; (8001f9c <HAL_I2C_MspInit+0x16c>)
 8001f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f6c:	60bb      	str	r3, [r7, #8]
 8001f6e:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8001f70:	2200      	movs	r2, #0
 8001f72:	2100      	movs	r1, #0
 8001f74:	2048      	movs	r0, #72	; 0x48
 8001f76:	f000 fb88 	bl	800268a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8001f7a:	2048      	movs	r0, #72	; 0x48
 8001f7c:	f000 fba1 	bl	80026c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 8001f80:	2200      	movs	r2, #0
 8001f82:	2100      	movs	r1, #0
 8001f84:	2049      	movs	r0, #73	; 0x49
 8001f86:	f000 fb80 	bl	800268a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8001f8a:	2049      	movs	r0, #73	; 0x49
 8001f8c:	f000 fb99 	bl	80026c2 <HAL_NVIC_EnableIRQ>
}
 8001f90:	bf00      	nop
 8001f92:	3730      	adds	r7, #48	; 0x30
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40005400 	.word	0x40005400
 8001f9c:	40023800 	.word	0x40023800
 8001fa0:	40020400 	.word	0x40020400
 8001fa4:	40005c00 	.word	0x40005c00
 8001fa8:	40020800 	.word	0x40020800
 8001fac:	40020000 	.word	0x40020000

08001fb0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b08c      	sub	sp, #48	; 0x30
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb8:	f107 031c 	add.w	r3, r7, #28
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	605a      	str	r2, [r3, #4]
 8001fc2:	609a      	str	r2, [r3, #8]
 8001fc4:	60da      	str	r2, [r3, #12]
 8001fc6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fd0:	d15d      	bne.n	800208e <HAL_TIM_Base_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	61bb      	str	r3, [r7, #24]
 8001fd6:	4b47      	ldr	r3, [pc, #284]	; (80020f4 <HAL_TIM_Base_MspInit+0x144>)
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fda:	4a46      	ldr	r2, [pc, #280]	; (80020f4 <HAL_TIM_Base_MspInit+0x144>)
 8001fdc:	f043 0301 	orr.w	r3, r3, #1
 8001fe0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fe2:	4b44      	ldr	r3, [pc, #272]	; (80020f4 <HAL_TIM_Base_MspInit+0x144>)
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	61bb      	str	r3, [r7, #24]
 8001fec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fee:	2300      	movs	r3, #0
 8001ff0:	617b      	str	r3, [r7, #20]
 8001ff2:	4b40      	ldr	r3, [pc, #256]	; (80020f4 <HAL_TIM_Base_MspInit+0x144>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff6:	4a3f      	ldr	r2, [pc, #252]	; (80020f4 <HAL_TIM_Base_MspInit+0x144>)
 8001ff8:	f043 0301 	orr.w	r3, r3, #1
 8001ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ffe:	4b3d      	ldr	r3, [pc, #244]	; (80020f4 <HAL_TIM_Base_MspInit+0x144>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	617b      	str	r3, [r7, #20]
 8002008:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TIM2_CH1_VINCp_Pin;
 800200a:	2301      	movs	r3, #1
 800200c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200e:	2302      	movs	r3, #2
 8002010:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002012:	2300      	movs	r3, #0
 8002014:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002016:	2300      	movs	r3, #0
 8002018:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800201a:	2301      	movs	r3, #1
 800201c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM2_CH1_VINCp_GPIO_Port, &GPIO_InitStruct);
 800201e:	f107 031c 	add.w	r3, r7, #28
 8002022:	4619      	mov	r1, r3
 8002024:	4834      	ldr	r0, [pc, #208]	; (80020f8 <HAL_TIM_Base_MspInit+0x148>)
 8002026:	f000 ff77 	bl	8002f18 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 800202a:	4b34      	ldr	r3, [pc, #208]	; (80020fc <HAL_TIM_Base_MspInit+0x14c>)
 800202c:	4a34      	ldr	r2, [pc, #208]	; (8002100 <HAL_TIM_Base_MspInit+0x150>)
 800202e:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 8002030:	4b32      	ldr	r3, [pc, #200]	; (80020fc <HAL_TIM_Base_MspInit+0x14c>)
 8002032:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002036:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002038:	4b30      	ldr	r3, [pc, #192]	; (80020fc <HAL_TIM_Base_MspInit+0x14c>)
 800203a:	2200      	movs	r2, #0
 800203c:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800203e:	4b2f      	ldr	r3, [pc, #188]	; (80020fc <HAL_TIM_Base_MspInit+0x14c>)
 8002040:	2200      	movs	r2, #0
 8002042:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002044:	4b2d      	ldr	r3, [pc, #180]	; (80020fc <HAL_TIM_Base_MspInit+0x14c>)
 8002046:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800204a:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800204c:	4b2b      	ldr	r3, [pc, #172]	; (80020fc <HAL_TIM_Base_MspInit+0x14c>)
 800204e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002052:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002054:	4b29      	ldr	r3, [pc, #164]	; (80020fc <HAL_TIM_Base_MspInit+0x14c>)
 8002056:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800205a:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 800205c:	4b27      	ldr	r3, [pc, #156]	; (80020fc <HAL_TIM_Base_MspInit+0x14c>)
 800205e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002062:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002064:	4b25      	ldr	r3, [pc, #148]	; (80020fc <HAL_TIM_Base_MspInit+0x14c>)
 8002066:	2200      	movs	r2, #0
 8002068:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800206a:	4b24      	ldr	r3, [pc, #144]	; (80020fc <HAL_TIM_Base_MspInit+0x14c>)
 800206c:	2200      	movs	r2, #0
 800206e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8002070:	4822      	ldr	r0, [pc, #136]	; (80020fc <HAL_TIM_Base_MspInit+0x14c>)
 8002072:	f000 fb41 	bl	80026f8 <HAL_DMA_Init>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <HAL_TIM_Base_MspInit+0xd0>
    {
      Error_Handler();
 800207c:	f7ff feaa 	bl	8001dd4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4a1e      	ldr	r2, [pc, #120]	; (80020fc <HAL_TIM_Base_MspInit+0x14c>)
 8002084:	625a      	str	r2, [r3, #36]	; 0x24
 8002086:	4a1d      	ldr	r2, [pc, #116]	; (80020fc <HAL_TIM_Base_MspInit+0x14c>)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800208c:	e02e      	b.n	80020ec <HAL_TIM_Base_MspInit+0x13c>
  else if(htim_base->Instance==TIM4)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a1c      	ldr	r2, [pc, #112]	; (8002104 <HAL_TIM_Base_MspInit+0x154>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d10e      	bne.n	80020b6 <HAL_TIM_Base_MspInit+0x106>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002098:	2300      	movs	r3, #0
 800209a:	613b      	str	r3, [r7, #16]
 800209c:	4b15      	ldr	r3, [pc, #84]	; (80020f4 <HAL_TIM_Base_MspInit+0x144>)
 800209e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a0:	4a14      	ldr	r2, [pc, #80]	; (80020f4 <HAL_TIM_Base_MspInit+0x144>)
 80020a2:	f043 0304 	orr.w	r3, r3, #4
 80020a6:	6413      	str	r3, [r2, #64]	; 0x40
 80020a8:	4b12      	ldr	r3, [pc, #72]	; (80020f4 <HAL_TIM_Base_MspInit+0x144>)
 80020aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ac:	f003 0304 	and.w	r3, r3, #4
 80020b0:	613b      	str	r3, [r7, #16]
 80020b2:	693b      	ldr	r3, [r7, #16]
}
 80020b4:	e01a      	b.n	80020ec <HAL_TIM_Base_MspInit+0x13c>
  else if(htim_base->Instance==TIM11)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a13      	ldr	r2, [pc, #76]	; (8002108 <HAL_TIM_Base_MspInit+0x158>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d115      	bne.n	80020ec <HAL_TIM_Base_MspInit+0x13c>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80020c0:	2300      	movs	r3, #0
 80020c2:	60fb      	str	r3, [r7, #12]
 80020c4:	4b0b      	ldr	r3, [pc, #44]	; (80020f4 <HAL_TIM_Base_MspInit+0x144>)
 80020c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c8:	4a0a      	ldr	r2, [pc, #40]	; (80020f4 <HAL_TIM_Base_MspInit+0x144>)
 80020ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020ce:	6453      	str	r3, [r2, #68]	; 0x44
 80020d0:	4b08      	ldr	r3, [pc, #32]	; (80020f4 <HAL_TIM_Base_MspInit+0x144>)
 80020d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020d8:	60fb      	str	r3, [r7, #12]
 80020da:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80020dc:	2200      	movs	r2, #0
 80020de:	2100      	movs	r1, #0
 80020e0:	201a      	movs	r0, #26
 80020e2:	f000 fad2 	bl	800268a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80020e6:	201a      	movs	r0, #26
 80020e8:	f000 faeb 	bl	80026c2 <HAL_NVIC_EnableIRQ>
}
 80020ec:	bf00      	nop
 80020ee:	3730      	adds	r7, #48	; 0x30
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	40023800 	.word	0x40023800
 80020f8:	40020000 	.word	0x40020000
 80020fc:	200001dc 	.word	0x200001dc
 8002100:	40026088 	.word	0x40026088
 8002104:	40000800 	.word	0x40000800
 8002108:	40014800 	.word	0x40014800

0800210c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b088      	sub	sp, #32
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002114:	f107 030c 	add.w	r3, r7, #12
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	605a      	str	r2, [r3, #4]
 800211e:	609a      	str	r2, [r3, #8]
 8002120:	60da      	str	r2, [r3, #12]
 8002122:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a12      	ldr	r2, [pc, #72]	; (8002174 <HAL_TIM_MspPostInit+0x68>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d11d      	bne.n	800216a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800212e:	2300      	movs	r3, #0
 8002130:	60bb      	str	r3, [r7, #8]
 8002132:	4b11      	ldr	r3, [pc, #68]	; (8002178 <HAL_TIM_MspPostInit+0x6c>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002136:	4a10      	ldr	r2, [pc, #64]	; (8002178 <HAL_TIM_MspPostInit+0x6c>)
 8002138:	f043 0302 	orr.w	r3, r3, #2
 800213c:	6313      	str	r3, [r2, #48]	; 0x30
 800213e:	4b0e      	ldr	r3, [pc, #56]	; (8002178 <HAL_TIM_MspPostInit+0x6c>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	60bb      	str	r3, [r7, #8]
 8002148:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = TIM4_CH1_PWMMOT_Pin;
 800214a:	2340      	movs	r3, #64	; 0x40
 800214c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214e:	2302      	movs	r3, #2
 8002150:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002152:	2300      	movs	r3, #0
 8002154:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002156:	2300      	movs	r3, #0
 8002158:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800215a:	2302      	movs	r3, #2
 800215c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIM4_CH1_PWMMOT_GPIO_Port, &GPIO_InitStruct);
 800215e:	f107 030c 	add.w	r3, r7, #12
 8002162:	4619      	mov	r1, r3
 8002164:	4805      	ldr	r0, [pc, #20]	; (800217c <HAL_TIM_MspPostInit+0x70>)
 8002166:	f000 fed7 	bl	8002f18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800216a:	bf00      	nop
 800216c:	3720      	adds	r7, #32
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	40000800 	.word	0x40000800
 8002178:	40023800 	.word	0x40023800
 800217c:	40020400 	.word	0x40020400

08002180 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b08a      	sub	sp, #40	; 0x28
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002188:	f107 0314 	add.w	r3, r7, #20
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	605a      	str	r2, [r3, #4]
 8002192:	609a      	str	r2, [r3, #8]
 8002194:	60da      	str	r2, [r3, #12]
 8002196:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a1d      	ldr	r2, [pc, #116]	; (8002214 <HAL_UART_MspInit+0x94>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d133      	bne.n	800220a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80021a2:	2300      	movs	r3, #0
 80021a4:	613b      	str	r3, [r7, #16]
 80021a6:	4b1c      	ldr	r3, [pc, #112]	; (8002218 <HAL_UART_MspInit+0x98>)
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	4a1b      	ldr	r2, [pc, #108]	; (8002218 <HAL_UART_MspInit+0x98>)
 80021ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021b0:	6413      	str	r3, [r2, #64]	; 0x40
 80021b2:	4b19      	ldr	r3, [pc, #100]	; (8002218 <HAL_UART_MspInit+0x98>)
 80021b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ba:	613b      	str	r3, [r7, #16]
 80021bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021be:	2300      	movs	r3, #0
 80021c0:	60fb      	str	r3, [r7, #12]
 80021c2:	4b15      	ldr	r3, [pc, #84]	; (8002218 <HAL_UART_MspInit+0x98>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c6:	4a14      	ldr	r2, [pc, #80]	; (8002218 <HAL_UART_MspInit+0x98>)
 80021c8:	f043 0301 	orr.w	r3, r3, #1
 80021cc:	6313      	str	r3, [r2, #48]	; 0x30
 80021ce:	4b12      	ldr	r3, [pc, #72]	; (8002218 <HAL_UART_MspInit+0x98>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80021da:	230c      	movs	r3, #12
 80021dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021de:	2302      	movs	r3, #2
 80021e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e2:	2300      	movs	r3, #0
 80021e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e6:	2303      	movs	r3, #3
 80021e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021ea:	2307      	movs	r3, #7
 80021ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ee:	f107 0314 	add.w	r3, r7, #20
 80021f2:	4619      	mov	r1, r3
 80021f4:	4809      	ldr	r0, [pc, #36]	; (800221c <HAL_UART_MspInit+0x9c>)
 80021f6:	f000 fe8f 	bl	8002f18 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80021fa:	2200      	movs	r2, #0
 80021fc:	2100      	movs	r1, #0
 80021fe:	2026      	movs	r0, #38	; 0x26
 8002200:	f000 fa43 	bl	800268a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002204:	2026      	movs	r0, #38	; 0x26
 8002206:	f000 fa5c 	bl	80026c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800220a:	bf00      	nop
 800220c:	3728      	adds	r7, #40	; 0x28
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	40004400 	.word	0x40004400
 8002218:	40023800 	.word	0x40023800
 800221c:	40020000 	.word	0x40020000

08002220 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002224:	e7fe      	b.n	8002224 <NMI_Handler+0x4>

08002226 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002226:	b480      	push	{r7}
 8002228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800222a:	e7fe      	b.n	800222a <HardFault_Handler+0x4>

0800222c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002230:	e7fe      	b.n	8002230 <MemManage_Handler+0x4>

08002232 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002232:	b480      	push	{r7}
 8002234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002236:	e7fe      	b.n	8002236 <BusFault_Handler+0x4>

08002238 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800223c:	e7fe      	b.n	800223c <UsageFault_Handler+0x4>

0800223e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800223e:	b480      	push	{r7}
 8002240:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002242:	bf00      	nop
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002250:	bf00      	nop
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr

0800225a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800225a:	b480      	push	{r7}
 800225c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800225e:	bf00      	nop
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800226c:	f000 f8ee 	bl	800244c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002270:	bf00      	nop
 8002272:	bd80      	pop	{r7, pc}

08002274 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI2_SetZero_Pin);
 8002278:	2004      	movs	r0, #4
 800227a:	f001 f803 	bl	8003284 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800227e:	bf00      	nop
 8002280:	bd80      	pop	{r7, pc}
	...

08002284 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8002288:	4802      	ldr	r0, [pc, #8]	; (8002294 <DMA1_Stream5_IRQHandler+0x10>)
 800228a:	f000 fbcd 	bl	8002a28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800228e:	bf00      	nop
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	200001dc 	.word	0x200001dc

08002298 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 800229c:	4802      	ldr	r0, [pc, #8]	; (80022a8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800229e:	f004 ff0b 	bl	80070b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80022a2:	bf00      	nop
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	20000194 	.word	0x20000194

080022ac <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80022b0:	4802      	ldr	r0, [pc, #8]	; (80022bc <I2C1_EV_IRQHandler+0x10>)
 80022b2:	f001 fe27 	bl	8003f04 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80022b6:	bf00      	nop
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	2000005c 	.word	0x2000005c

080022c0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80022c4:	4802      	ldr	r0, [pc, #8]	; (80022d0 <I2C1_ER_IRQHandler+0x10>)
 80022c6:	f001 ff8e 	bl	80041e6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80022ca:	bf00      	nop
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	2000005c 	.word	0x2000005c

080022d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80022d8:	4802      	ldr	r0, [pc, #8]	; (80022e4 <USART2_IRQHandler+0x10>)
 80022da:	f006 f8b3 	bl	8008444 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80022de:	bf00      	nop
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	2000023c 	.word	0x2000023c

080022e8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI10_Stop_Pin);
 80022ec:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80022f0:	f000 ffc8 	bl	8003284 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EXTI11_EMER_Pin);
 80022f4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80022f8:	f000 ffc4 	bl	8003284 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80022fc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002300:	f000 ffc0 	bl	8003284 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002304:	bf00      	nop
 8002306:	bd80      	pop	{r7, pc}

08002308 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 800230c:	4802      	ldr	r0, [pc, #8]	; (8002318 <I2C3_EV_IRQHandler+0x10>)
 800230e:	f001 fdf9 	bl	8003f04 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8002312:	bf00      	nop
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	200000b0 	.word	0x200000b0

0800231c <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8002320:	4802      	ldr	r0, [pc, #8]	; (800232c <I2C3_ER_IRQHandler+0x10>)
 8002322:	f001 ff60 	bl	80041e6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8002326:	bf00      	nop
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	200000b0 	.word	0x200000b0

08002330 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002334:	4b06      	ldr	r3, [pc, #24]	; (8002350 <SystemInit+0x20>)
 8002336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800233a:	4a05      	ldr	r2, [pc, #20]	; (8002350 <SystemInit+0x20>)
 800233c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002340:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002344:	bf00      	nop
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	e000ed00 	.word	0xe000ed00

08002354 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002354:	f8df d034 	ldr.w	sp, [pc, #52]	; 800238c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002358:	480d      	ldr	r0, [pc, #52]	; (8002390 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800235a:	490e      	ldr	r1, [pc, #56]	; (8002394 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800235c:	4a0e      	ldr	r2, [pc, #56]	; (8002398 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800235e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002360:	e002      	b.n	8002368 <LoopCopyDataInit>

08002362 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002362:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002364:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002366:	3304      	adds	r3, #4

08002368 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002368:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800236a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800236c:	d3f9      	bcc.n	8002362 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800236e:	4a0b      	ldr	r2, [pc, #44]	; (800239c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002370:	4c0b      	ldr	r4, [pc, #44]	; (80023a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002372:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002374:	e001      	b.n	800237a <LoopFillZerobss>

08002376 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002376:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002378:	3204      	adds	r2, #4

0800237a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800237a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800237c:	d3fb      	bcc.n	8002376 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800237e:	f7ff ffd7 	bl	8002330 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002382:	f006 ffd1 	bl	8009328 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002386:	f7fe f9b7 	bl	80006f8 <main>
  bx  lr    
 800238a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800238c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002390:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002394:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 8002398:	080093c8 	.word	0x080093c8
  ldr r2, =_sbss
 800239c:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 80023a0:	20000360 	.word	0x20000360

080023a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023a4:	e7fe      	b.n	80023a4 <ADC_IRQHandler>
	...

080023a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023ac:	4b0e      	ldr	r3, [pc, #56]	; (80023e8 <HAL_Init+0x40>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a0d      	ldr	r2, [pc, #52]	; (80023e8 <HAL_Init+0x40>)
 80023b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023b8:	4b0b      	ldr	r3, [pc, #44]	; (80023e8 <HAL_Init+0x40>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a0a      	ldr	r2, [pc, #40]	; (80023e8 <HAL_Init+0x40>)
 80023be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023c4:	4b08      	ldr	r3, [pc, #32]	; (80023e8 <HAL_Init+0x40>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a07      	ldr	r2, [pc, #28]	; (80023e8 <HAL_Init+0x40>)
 80023ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023d0:	2003      	movs	r0, #3
 80023d2:	f000 f94f 	bl	8002674 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023d6:	2000      	movs	r0, #0
 80023d8:	f000 f808 	bl	80023ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023dc:	f7ff fd00 	bl	8001de0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	40023c00 	.word	0x40023c00

080023ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023f4:	4b12      	ldr	r3, [pc, #72]	; (8002440 <HAL_InitTick+0x54>)
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	4b12      	ldr	r3, [pc, #72]	; (8002444 <HAL_InitTick+0x58>)
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	4619      	mov	r1, r3
 80023fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002402:	fbb3 f3f1 	udiv	r3, r3, r1
 8002406:	fbb2 f3f3 	udiv	r3, r2, r3
 800240a:	4618      	mov	r0, r3
 800240c:	f000 f967 	bl	80026de <HAL_SYSTICK_Config>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e00e      	b.n	8002438 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2b0f      	cmp	r3, #15
 800241e:	d80a      	bhi.n	8002436 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002420:	2200      	movs	r2, #0
 8002422:	6879      	ldr	r1, [r7, #4]
 8002424:	f04f 30ff 	mov.w	r0, #4294967295
 8002428:	f000 f92f 	bl	800268a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800242c:	4a06      	ldr	r2, [pc, #24]	; (8002448 <HAL_InitTick+0x5c>)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002432:	2300      	movs	r3, #0
 8002434:	e000      	b.n	8002438 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
}
 8002438:	4618      	mov	r0, r3
 800243a:	3708      	adds	r7, #8
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	20000034 	.word	0x20000034
 8002444:	2000003c 	.word	0x2000003c
 8002448:	20000038 	.word	0x20000038

0800244c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002450:	4b06      	ldr	r3, [pc, #24]	; (800246c <HAL_IncTick+0x20>)
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	461a      	mov	r2, r3
 8002456:	4b06      	ldr	r3, [pc, #24]	; (8002470 <HAL_IncTick+0x24>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4413      	add	r3, r2
 800245c:	4a04      	ldr	r2, [pc, #16]	; (8002470 <HAL_IncTick+0x24>)
 800245e:	6013      	str	r3, [r2, #0]
}
 8002460:	bf00      	nop
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	2000003c 	.word	0x2000003c
 8002470:	2000035c 	.word	0x2000035c

08002474 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  return uwTick;
 8002478:	4b03      	ldr	r3, [pc, #12]	; (8002488 <HAL_GetTick+0x14>)
 800247a:	681b      	ldr	r3, [r3, #0]
}
 800247c:	4618      	mov	r0, r3
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	2000035c 	.word	0x2000035c

0800248c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002494:	f7ff ffee 	bl	8002474 <HAL_GetTick>
 8002498:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024a4:	d005      	beq.n	80024b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024a6:	4b0a      	ldr	r3, [pc, #40]	; (80024d0 <HAL_Delay+0x44>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	461a      	mov	r2, r3
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	4413      	add	r3, r2
 80024b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80024b2:	bf00      	nop
 80024b4:	f7ff ffde 	bl	8002474 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d8f7      	bhi.n	80024b4 <HAL_Delay+0x28>
  {
  }
}
 80024c4:	bf00      	nop
 80024c6:	bf00      	nop
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	2000003c 	.word	0x2000003c

080024d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f003 0307 	and.w	r3, r3, #7
 80024e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024e4:	4b0c      	ldr	r3, [pc, #48]	; (8002518 <__NVIC_SetPriorityGrouping+0x44>)
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024ea:	68ba      	ldr	r2, [r7, #8]
 80024ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024f0:	4013      	ands	r3, r2
 80024f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002500:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002504:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002506:	4a04      	ldr	r2, [pc, #16]	; (8002518 <__NVIC_SetPriorityGrouping+0x44>)
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	60d3      	str	r3, [r2, #12]
}
 800250c:	bf00      	nop
 800250e:	3714      	adds	r7, #20
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr
 8002518:	e000ed00 	.word	0xe000ed00

0800251c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002520:	4b04      	ldr	r3, [pc, #16]	; (8002534 <__NVIC_GetPriorityGrouping+0x18>)
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	0a1b      	lsrs	r3, r3, #8
 8002526:	f003 0307 	and.w	r3, r3, #7
}
 800252a:	4618      	mov	r0, r3
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr
 8002534:	e000ed00 	.word	0xe000ed00

08002538 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	4603      	mov	r3, r0
 8002540:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002546:	2b00      	cmp	r3, #0
 8002548:	db0b      	blt.n	8002562 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800254a:	79fb      	ldrb	r3, [r7, #7]
 800254c:	f003 021f 	and.w	r2, r3, #31
 8002550:	4907      	ldr	r1, [pc, #28]	; (8002570 <__NVIC_EnableIRQ+0x38>)
 8002552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002556:	095b      	lsrs	r3, r3, #5
 8002558:	2001      	movs	r0, #1
 800255a:	fa00 f202 	lsl.w	r2, r0, r2
 800255e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002562:	bf00      	nop
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	e000e100 	.word	0xe000e100

08002574 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	4603      	mov	r3, r0
 800257c:	6039      	str	r1, [r7, #0]
 800257e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002580:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002584:	2b00      	cmp	r3, #0
 8002586:	db0a      	blt.n	800259e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	b2da      	uxtb	r2, r3
 800258c:	490c      	ldr	r1, [pc, #48]	; (80025c0 <__NVIC_SetPriority+0x4c>)
 800258e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002592:	0112      	lsls	r2, r2, #4
 8002594:	b2d2      	uxtb	r2, r2
 8002596:	440b      	add	r3, r1
 8002598:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800259c:	e00a      	b.n	80025b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	b2da      	uxtb	r2, r3
 80025a2:	4908      	ldr	r1, [pc, #32]	; (80025c4 <__NVIC_SetPriority+0x50>)
 80025a4:	79fb      	ldrb	r3, [r7, #7]
 80025a6:	f003 030f 	and.w	r3, r3, #15
 80025aa:	3b04      	subs	r3, #4
 80025ac:	0112      	lsls	r2, r2, #4
 80025ae:	b2d2      	uxtb	r2, r2
 80025b0:	440b      	add	r3, r1
 80025b2:	761a      	strb	r2, [r3, #24]
}
 80025b4:	bf00      	nop
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr
 80025c0:	e000e100 	.word	0xe000e100
 80025c4:	e000ed00 	.word	0xe000ed00

080025c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b089      	sub	sp, #36	; 0x24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f003 0307 	and.w	r3, r3, #7
 80025da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	f1c3 0307 	rsb	r3, r3, #7
 80025e2:	2b04      	cmp	r3, #4
 80025e4:	bf28      	it	cs
 80025e6:	2304      	movcs	r3, #4
 80025e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	3304      	adds	r3, #4
 80025ee:	2b06      	cmp	r3, #6
 80025f0:	d902      	bls.n	80025f8 <NVIC_EncodePriority+0x30>
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	3b03      	subs	r3, #3
 80025f6:	e000      	b.n	80025fa <NVIC_EncodePriority+0x32>
 80025f8:	2300      	movs	r3, #0
 80025fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	fa02 f303 	lsl.w	r3, r2, r3
 8002606:	43da      	mvns	r2, r3
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	401a      	ands	r2, r3
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002610:	f04f 31ff 	mov.w	r1, #4294967295
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	fa01 f303 	lsl.w	r3, r1, r3
 800261a:	43d9      	mvns	r1, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002620:	4313      	orrs	r3, r2
         );
}
 8002622:	4618      	mov	r0, r3
 8002624:	3724      	adds	r7, #36	; 0x24
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
	...

08002630 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	3b01      	subs	r3, #1
 800263c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002640:	d301      	bcc.n	8002646 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002642:	2301      	movs	r3, #1
 8002644:	e00f      	b.n	8002666 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002646:	4a0a      	ldr	r2, [pc, #40]	; (8002670 <SysTick_Config+0x40>)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	3b01      	subs	r3, #1
 800264c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800264e:	210f      	movs	r1, #15
 8002650:	f04f 30ff 	mov.w	r0, #4294967295
 8002654:	f7ff ff8e 	bl	8002574 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002658:	4b05      	ldr	r3, [pc, #20]	; (8002670 <SysTick_Config+0x40>)
 800265a:	2200      	movs	r2, #0
 800265c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800265e:	4b04      	ldr	r3, [pc, #16]	; (8002670 <SysTick_Config+0x40>)
 8002660:	2207      	movs	r2, #7
 8002662:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	e000e010 	.word	0xe000e010

08002674 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f7ff ff29 	bl	80024d4 <__NVIC_SetPriorityGrouping>
}
 8002682:	bf00      	nop
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800268a:	b580      	push	{r7, lr}
 800268c:	b086      	sub	sp, #24
 800268e:	af00      	add	r7, sp, #0
 8002690:	4603      	mov	r3, r0
 8002692:	60b9      	str	r1, [r7, #8]
 8002694:	607a      	str	r2, [r7, #4]
 8002696:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002698:	2300      	movs	r3, #0
 800269a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800269c:	f7ff ff3e 	bl	800251c <__NVIC_GetPriorityGrouping>
 80026a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	68b9      	ldr	r1, [r7, #8]
 80026a6:	6978      	ldr	r0, [r7, #20]
 80026a8:	f7ff ff8e 	bl	80025c8 <NVIC_EncodePriority>
 80026ac:	4602      	mov	r2, r0
 80026ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026b2:	4611      	mov	r1, r2
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7ff ff5d 	bl	8002574 <__NVIC_SetPriority>
}
 80026ba:	bf00      	nop
 80026bc:	3718      	adds	r7, #24
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b082      	sub	sp, #8
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	4603      	mov	r3, r0
 80026ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7ff ff31 	bl	8002538 <__NVIC_EnableIRQ>
}
 80026d6:	bf00      	nop
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b082      	sub	sp, #8
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f7ff ffa2 	bl	8002630 <SysTick_Config>
 80026ec:	4603      	mov	r3, r0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3708      	adds	r7, #8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
	...

080026f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002700:	2300      	movs	r3, #0
 8002702:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002704:	f7ff feb6 	bl	8002474 <HAL_GetTick>
 8002708:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d101      	bne.n	8002714 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e099      	b.n	8002848 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2202      	movs	r2, #2
 8002718:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f022 0201 	bic.w	r2, r2, #1
 8002732:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002734:	e00f      	b.n	8002756 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002736:	f7ff fe9d 	bl	8002474 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	2b05      	cmp	r3, #5
 8002742:	d908      	bls.n	8002756 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2220      	movs	r2, #32
 8002748:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2203      	movs	r2, #3
 800274e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e078      	b.n	8002848 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0301 	and.w	r3, r3, #1
 8002760:	2b00      	cmp	r3, #0
 8002762:	d1e8      	bne.n	8002736 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800276c:	697a      	ldr	r2, [r7, #20]
 800276e:	4b38      	ldr	r3, [pc, #224]	; (8002850 <HAL_DMA_Init+0x158>)
 8002770:	4013      	ands	r3, r2
 8002772:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685a      	ldr	r2, [r3, #4]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002782:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	691b      	ldr	r3, [r3, #16]
 8002788:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800278e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800279a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a1b      	ldr	r3, [r3, #32]
 80027a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ac:	2b04      	cmp	r3, #4
 80027ae:	d107      	bne.n	80027c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b8:	4313      	orrs	r3, r2
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	4313      	orrs	r3, r2
 80027be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	697a      	ldr	r2, [r7, #20]
 80027c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	f023 0307 	bic.w	r3, r3, #7
 80027d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027dc:	697a      	ldr	r2, [r7, #20]
 80027de:	4313      	orrs	r3, r2
 80027e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e6:	2b04      	cmp	r3, #4
 80027e8:	d117      	bne.n	800281a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d00e      	beq.n	800281a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f000 fb0f 	bl	8002e20 <DMA_CheckFifoParam>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d008      	beq.n	800281a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2240      	movs	r2, #64	; 0x40
 800280c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2201      	movs	r2, #1
 8002812:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002816:	2301      	movs	r3, #1
 8002818:	e016      	b.n	8002848 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	697a      	ldr	r2, [r7, #20]
 8002820:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f000 fac6 	bl	8002db4 <DMA_CalcBaseAndBitshift>
 8002828:	4603      	mov	r3, r0
 800282a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002830:	223f      	movs	r2, #63	; 0x3f
 8002832:	409a      	lsls	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2201      	movs	r2, #1
 8002842:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	3718      	adds	r7, #24
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	f010803f 	.word	0xf010803f

08002854 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
 8002860:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002862:	2300      	movs	r3, #0
 8002864:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800286a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002872:	2b01      	cmp	r3, #1
 8002874:	d101      	bne.n	800287a <HAL_DMA_Start_IT+0x26>
 8002876:	2302      	movs	r3, #2
 8002878:	e040      	b.n	80028fc <HAL_DMA_Start_IT+0xa8>
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2201      	movs	r2, #1
 800287e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b01      	cmp	r3, #1
 800288c:	d12f      	bne.n	80028ee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2202      	movs	r2, #2
 8002892:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2200      	movs	r2, #0
 800289a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	68b9      	ldr	r1, [r7, #8]
 80028a2:	68f8      	ldr	r0, [r7, #12]
 80028a4:	f000 fa58 	bl	8002d58 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ac:	223f      	movs	r2, #63	; 0x3f
 80028ae:	409a      	lsls	r2, r3
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f042 0216 	orr.w	r2, r2, #22
 80028c2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d007      	beq.n	80028dc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f042 0208 	orr.w	r2, r2, #8
 80028da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f042 0201 	orr.w	r2, r2, #1
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	e005      	b.n	80028fa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80028f6:	2302      	movs	r3, #2
 80028f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80028fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3718      	adds	r7, #24
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002910:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002912:	f7ff fdaf 	bl	8002474 <HAL_GetTick>
 8002916:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800291e:	b2db      	uxtb	r3, r3
 8002920:	2b02      	cmp	r3, #2
 8002922:	d008      	beq.n	8002936 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2280      	movs	r2, #128	; 0x80
 8002928:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e052      	b.n	80029dc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f022 0216 	bic.w	r2, r2, #22
 8002944:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	695a      	ldr	r2, [r3, #20]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002954:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	2b00      	cmp	r3, #0
 800295c:	d103      	bne.n	8002966 <HAL_DMA_Abort+0x62>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002962:	2b00      	cmp	r3, #0
 8002964:	d007      	beq.n	8002976 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f022 0208 	bic.w	r2, r2, #8
 8002974:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f022 0201 	bic.w	r2, r2, #1
 8002984:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002986:	e013      	b.n	80029b0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002988:	f7ff fd74 	bl	8002474 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b05      	cmp	r3, #5
 8002994:	d90c      	bls.n	80029b0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2220      	movs	r2, #32
 800299a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2203      	movs	r2, #3
 80029a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e015      	b.n	80029dc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1e4      	bne.n	8002988 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c2:	223f      	movs	r2, #63	; 0x3f
 80029c4:	409a      	lsls	r2, r3
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3710      	adds	r7, #16
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d004      	beq.n	8002a02 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2280      	movs	r2, #128	; 0x80
 80029fc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e00c      	b.n	8002a1c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2205      	movs	r2, #5
 8002a06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f022 0201 	bic.w	r2, r2, #1
 8002a18:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002a30:	2300      	movs	r3, #0
 8002a32:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a34:	4b8e      	ldr	r3, [pc, #568]	; (8002c70 <HAL_DMA_IRQHandler+0x248>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a8e      	ldr	r2, [pc, #568]	; (8002c74 <HAL_DMA_IRQHandler+0x24c>)
 8002a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3e:	0a9b      	lsrs	r3, r3, #10
 8002a40:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a46:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a52:	2208      	movs	r2, #8
 8002a54:	409a      	lsls	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d01a      	beq.n	8002a94 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0304 	and.w	r3, r3, #4
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d013      	beq.n	8002a94 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f022 0204 	bic.w	r2, r2, #4
 8002a7a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a80:	2208      	movs	r2, #8
 8002a82:	409a      	lsls	r2, r3
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a8c:	f043 0201 	orr.w	r2, r3, #1
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a98:	2201      	movs	r2, #1
 8002a9a:	409a      	lsls	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d012      	beq.n	8002aca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00b      	beq.n	8002aca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	409a      	lsls	r2, r3
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac2:	f043 0202 	orr.w	r2, r3, #2
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ace:	2204      	movs	r2, #4
 8002ad0:	409a      	lsls	r2, r3
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d012      	beq.n	8002b00 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0302 	and.w	r3, r3, #2
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d00b      	beq.n	8002b00 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aec:	2204      	movs	r2, #4
 8002aee:	409a      	lsls	r2, r3
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af8:	f043 0204 	orr.w	r2, r3, #4
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b04:	2210      	movs	r2, #16
 8002b06:	409a      	lsls	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d043      	beq.n	8002b98 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0308 	and.w	r3, r3, #8
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d03c      	beq.n	8002b98 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b22:	2210      	movs	r2, #16
 8002b24:	409a      	lsls	r2, r3
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d018      	beq.n	8002b6a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d108      	bne.n	8002b58 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d024      	beq.n	8002b98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	4798      	blx	r3
 8002b56:	e01f      	b.n	8002b98 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d01b      	beq.n	8002b98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	4798      	blx	r3
 8002b68:	e016      	b.n	8002b98 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d107      	bne.n	8002b88 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f022 0208 	bic.w	r2, r2, #8
 8002b86:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d003      	beq.n	8002b98 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b9c:	2220      	movs	r2, #32
 8002b9e:	409a      	lsls	r2, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f000 808f 	beq.w	8002cc8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0310 	and.w	r3, r3, #16
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f000 8087 	beq.w	8002cc8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bbe:	2220      	movs	r2, #32
 8002bc0:	409a      	lsls	r2, r3
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b05      	cmp	r3, #5
 8002bd0:	d136      	bne.n	8002c40 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f022 0216 	bic.w	r2, r2, #22
 8002be0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	695a      	ldr	r2, [r3, #20]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bf0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d103      	bne.n	8002c02 <HAL_DMA_IRQHandler+0x1da>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d007      	beq.n	8002c12 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f022 0208 	bic.w	r2, r2, #8
 8002c10:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c16:	223f      	movs	r2, #63	; 0x3f
 8002c18:	409a      	lsls	r2, r3
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2201      	movs	r2, #1
 8002c22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d07e      	beq.n	8002d34 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	4798      	blx	r3
        }
        return;
 8002c3e:	e079      	b.n	8002d34 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d01d      	beq.n	8002c8a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d10d      	bne.n	8002c78 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d031      	beq.n	8002cc8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	4798      	blx	r3
 8002c6c:	e02c      	b.n	8002cc8 <HAL_DMA_IRQHandler+0x2a0>
 8002c6e:	bf00      	nop
 8002c70:	20000034 	.word	0x20000034
 8002c74:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d023      	beq.n	8002cc8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	4798      	blx	r3
 8002c88:	e01e      	b.n	8002cc8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d10f      	bne.n	8002cb8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f022 0210 	bic.w	r2, r2, #16
 8002ca6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d003      	beq.n	8002cc8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d032      	beq.n	8002d36 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cd4:	f003 0301 	and.w	r3, r3, #1
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d022      	beq.n	8002d22 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2205      	movs	r2, #5
 8002ce0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f022 0201 	bic.w	r2, r2, #1
 8002cf2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	60bb      	str	r3, [r7, #8]
 8002cfa:	697a      	ldr	r2, [r7, #20]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d307      	bcc.n	8002d10 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1f2      	bne.n	8002cf4 <HAL_DMA_IRQHandler+0x2cc>
 8002d0e:	e000      	b.n	8002d12 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002d10:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2201      	movs	r2, #1
 8002d16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d005      	beq.n	8002d36 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	4798      	blx	r3
 8002d32:	e000      	b.n	8002d36 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002d34:	bf00      	nop
    }
  }
}
 8002d36:	3718      	adds	r7, #24
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d4a:	b2db      	uxtb	r3, r3
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b085      	sub	sp, #20
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
 8002d64:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d74:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	683a      	ldr	r2, [r7, #0]
 8002d7c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	2b40      	cmp	r3, #64	; 0x40
 8002d84:	d108      	bne.n	8002d98 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68ba      	ldr	r2, [r7, #8]
 8002d94:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002d96:	e007      	b.n	8002da8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	68ba      	ldr	r2, [r7, #8]
 8002d9e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	60da      	str	r2, [r3, #12]
}
 8002da8:	bf00      	nop
 8002daa:	3714      	adds	r7, #20
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b085      	sub	sp, #20
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	3b10      	subs	r3, #16
 8002dc4:	4a14      	ldr	r2, [pc, #80]	; (8002e18 <DMA_CalcBaseAndBitshift+0x64>)
 8002dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dca:	091b      	lsrs	r3, r3, #4
 8002dcc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002dce:	4a13      	ldr	r2, [pc, #76]	; (8002e1c <DMA_CalcBaseAndBitshift+0x68>)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2b03      	cmp	r3, #3
 8002de0:	d909      	bls.n	8002df6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002dea:	f023 0303 	bic.w	r3, r3, #3
 8002dee:	1d1a      	adds	r2, r3, #4
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	659a      	str	r2, [r3, #88]	; 0x58
 8002df4:	e007      	b.n	8002e06 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002dfe:	f023 0303 	bic.w	r3, r3, #3
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3714      	adds	r7, #20
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	aaaaaaab 	.word	0xaaaaaaab
 8002e1c:	080093b0 	.word	0x080093b0

08002e20 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b085      	sub	sp, #20
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e30:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d11f      	bne.n	8002e7a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	2b03      	cmp	r3, #3
 8002e3e:	d856      	bhi.n	8002eee <DMA_CheckFifoParam+0xce>
 8002e40:	a201      	add	r2, pc, #4	; (adr r2, 8002e48 <DMA_CheckFifoParam+0x28>)
 8002e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e46:	bf00      	nop
 8002e48:	08002e59 	.word	0x08002e59
 8002e4c:	08002e6b 	.word	0x08002e6b
 8002e50:	08002e59 	.word	0x08002e59
 8002e54:	08002eef 	.word	0x08002eef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d046      	beq.n	8002ef2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e68:	e043      	b.n	8002ef2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e6e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e72:	d140      	bne.n	8002ef6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e78:	e03d      	b.n	8002ef6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e82:	d121      	bne.n	8002ec8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	2b03      	cmp	r3, #3
 8002e88:	d837      	bhi.n	8002efa <DMA_CheckFifoParam+0xda>
 8002e8a:	a201      	add	r2, pc, #4	; (adr r2, 8002e90 <DMA_CheckFifoParam+0x70>)
 8002e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e90:	08002ea1 	.word	0x08002ea1
 8002e94:	08002ea7 	.word	0x08002ea7
 8002e98:	08002ea1 	.word	0x08002ea1
 8002e9c:	08002eb9 	.word	0x08002eb9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ea4:	e030      	b.n	8002f08 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eaa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d025      	beq.n	8002efe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eb6:	e022      	b.n	8002efe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ebc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ec0:	d11f      	bne.n	8002f02 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002ec6:	e01c      	b.n	8002f02 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d903      	bls.n	8002ed6 <DMA_CheckFifoParam+0xb6>
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	2b03      	cmp	r3, #3
 8002ed2:	d003      	beq.n	8002edc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ed4:	e018      	b.n	8002f08 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	73fb      	strb	r3, [r7, #15]
      break;
 8002eda:	e015      	b.n	8002f08 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d00e      	beq.n	8002f06 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	73fb      	strb	r3, [r7, #15]
      break;
 8002eec:	e00b      	b.n	8002f06 <DMA_CheckFifoParam+0xe6>
      break;
 8002eee:	bf00      	nop
 8002ef0:	e00a      	b.n	8002f08 <DMA_CheckFifoParam+0xe8>
      break;
 8002ef2:	bf00      	nop
 8002ef4:	e008      	b.n	8002f08 <DMA_CheckFifoParam+0xe8>
      break;
 8002ef6:	bf00      	nop
 8002ef8:	e006      	b.n	8002f08 <DMA_CheckFifoParam+0xe8>
      break;
 8002efa:	bf00      	nop
 8002efc:	e004      	b.n	8002f08 <DMA_CheckFifoParam+0xe8>
      break;
 8002efe:	bf00      	nop
 8002f00:	e002      	b.n	8002f08 <DMA_CheckFifoParam+0xe8>
      break;   
 8002f02:	bf00      	nop
 8002f04:	e000      	b.n	8002f08 <DMA_CheckFifoParam+0xe8>
      break;
 8002f06:	bf00      	nop
    }
  } 
  
  return status; 
 8002f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3714      	adds	r7, #20
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop

08002f18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b089      	sub	sp, #36	; 0x24
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f22:	2300      	movs	r3, #0
 8002f24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f26:	2300      	movs	r3, #0
 8002f28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f2e:	2300      	movs	r3, #0
 8002f30:	61fb      	str	r3, [r7, #28]
 8002f32:	e159      	b.n	80031e8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f34:	2201      	movs	r2, #1
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	697a      	ldr	r2, [r7, #20]
 8002f44:	4013      	ands	r3, r2
 8002f46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	f040 8148 	bne.w	80031e2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f003 0303 	and.w	r3, r3, #3
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d005      	beq.n	8002f6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d130      	bne.n	8002fcc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	005b      	lsls	r3, r3, #1
 8002f74:	2203      	movs	r2, #3
 8002f76:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7a:	43db      	mvns	r3, r3
 8002f7c:	69ba      	ldr	r2, [r7, #24]
 8002f7e:	4013      	ands	r3, r2
 8002f80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	68da      	ldr	r2, [r3, #12]
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	005b      	lsls	r3, r3, #1
 8002f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8e:	69ba      	ldr	r2, [r7, #24]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa8:	43db      	mvns	r3, r3
 8002faa:	69ba      	ldr	r2, [r7, #24]
 8002fac:	4013      	ands	r3, r2
 8002fae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	091b      	lsrs	r3, r3, #4
 8002fb6:	f003 0201 	and.w	r2, r3, #1
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f003 0303 	and.w	r3, r3, #3
 8002fd4:	2b03      	cmp	r3, #3
 8002fd6:	d017      	beq.n	8003008 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	005b      	lsls	r3, r3, #1
 8002fe2:	2203      	movs	r2, #3
 8002fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe8:	43db      	mvns	r3, r3
 8002fea:	69ba      	ldr	r2, [r7, #24]
 8002fec:	4013      	ands	r3, r2
 8002fee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	689a      	ldr	r2, [r3, #8]
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	005b      	lsls	r3, r3, #1
 8002ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffc:	69ba      	ldr	r2, [r7, #24]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f003 0303 	and.w	r3, r3, #3
 8003010:	2b02      	cmp	r3, #2
 8003012:	d123      	bne.n	800305c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	08da      	lsrs	r2, r3, #3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	3208      	adds	r2, #8
 800301c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003020:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	f003 0307 	and.w	r3, r3, #7
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	220f      	movs	r2, #15
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	43db      	mvns	r3, r3
 8003032:	69ba      	ldr	r2, [r7, #24]
 8003034:	4013      	ands	r3, r2
 8003036:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	691a      	ldr	r2, [r3, #16]
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	f003 0307 	and.w	r3, r3, #7
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	4313      	orrs	r3, r2
 800304c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	08da      	lsrs	r2, r3, #3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	3208      	adds	r2, #8
 8003056:	69b9      	ldr	r1, [r7, #24]
 8003058:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	005b      	lsls	r3, r3, #1
 8003066:	2203      	movs	r2, #3
 8003068:	fa02 f303 	lsl.w	r3, r2, r3
 800306c:	43db      	mvns	r3, r3
 800306e:	69ba      	ldr	r2, [r7, #24]
 8003070:	4013      	ands	r3, r2
 8003072:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f003 0203 	and.w	r2, r3, #3
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	005b      	lsls	r3, r3, #1
 8003080:	fa02 f303 	lsl.w	r3, r2, r3
 8003084:	69ba      	ldr	r2, [r7, #24]
 8003086:	4313      	orrs	r3, r2
 8003088:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	69ba      	ldr	r2, [r7, #24]
 800308e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003098:	2b00      	cmp	r3, #0
 800309a:	f000 80a2 	beq.w	80031e2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800309e:	2300      	movs	r3, #0
 80030a0:	60fb      	str	r3, [r7, #12]
 80030a2:	4b57      	ldr	r3, [pc, #348]	; (8003200 <HAL_GPIO_Init+0x2e8>)
 80030a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a6:	4a56      	ldr	r2, [pc, #344]	; (8003200 <HAL_GPIO_Init+0x2e8>)
 80030a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030ac:	6453      	str	r3, [r2, #68]	; 0x44
 80030ae:	4b54      	ldr	r3, [pc, #336]	; (8003200 <HAL_GPIO_Init+0x2e8>)
 80030b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030b6:	60fb      	str	r3, [r7, #12]
 80030b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030ba:	4a52      	ldr	r2, [pc, #328]	; (8003204 <HAL_GPIO_Init+0x2ec>)
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	089b      	lsrs	r3, r3, #2
 80030c0:	3302      	adds	r3, #2
 80030c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	f003 0303 	and.w	r3, r3, #3
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	220f      	movs	r2, #15
 80030d2:	fa02 f303 	lsl.w	r3, r2, r3
 80030d6:	43db      	mvns	r3, r3
 80030d8:	69ba      	ldr	r2, [r7, #24]
 80030da:	4013      	ands	r3, r2
 80030dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a49      	ldr	r2, [pc, #292]	; (8003208 <HAL_GPIO_Init+0x2f0>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d019      	beq.n	800311a <HAL_GPIO_Init+0x202>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a48      	ldr	r2, [pc, #288]	; (800320c <HAL_GPIO_Init+0x2f4>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d013      	beq.n	8003116 <HAL_GPIO_Init+0x1fe>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a47      	ldr	r2, [pc, #284]	; (8003210 <HAL_GPIO_Init+0x2f8>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d00d      	beq.n	8003112 <HAL_GPIO_Init+0x1fa>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a46      	ldr	r2, [pc, #280]	; (8003214 <HAL_GPIO_Init+0x2fc>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d007      	beq.n	800310e <HAL_GPIO_Init+0x1f6>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a45      	ldr	r2, [pc, #276]	; (8003218 <HAL_GPIO_Init+0x300>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d101      	bne.n	800310a <HAL_GPIO_Init+0x1f2>
 8003106:	2304      	movs	r3, #4
 8003108:	e008      	b.n	800311c <HAL_GPIO_Init+0x204>
 800310a:	2307      	movs	r3, #7
 800310c:	e006      	b.n	800311c <HAL_GPIO_Init+0x204>
 800310e:	2303      	movs	r3, #3
 8003110:	e004      	b.n	800311c <HAL_GPIO_Init+0x204>
 8003112:	2302      	movs	r3, #2
 8003114:	e002      	b.n	800311c <HAL_GPIO_Init+0x204>
 8003116:	2301      	movs	r3, #1
 8003118:	e000      	b.n	800311c <HAL_GPIO_Init+0x204>
 800311a:	2300      	movs	r3, #0
 800311c:	69fa      	ldr	r2, [r7, #28]
 800311e:	f002 0203 	and.w	r2, r2, #3
 8003122:	0092      	lsls	r2, r2, #2
 8003124:	4093      	lsls	r3, r2
 8003126:	69ba      	ldr	r2, [r7, #24]
 8003128:	4313      	orrs	r3, r2
 800312a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800312c:	4935      	ldr	r1, [pc, #212]	; (8003204 <HAL_GPIO_Init+0x2ec>)
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	089b      	lsrs	r3, r3, #2
 8003132:	3302      	adds	r3, #2
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800313a:	4b38      	ldr	r3, [pc, #224]	; (800321c <HAL_GPIO_Init+0x304>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	43db      	mvns	r3, r3
 8003144:	69ba      	ldr	r2, [r7, #24]
 8003146:	4013      	ands	r3, r2
 8003148:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d003      	beq.n	800315e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003156:	69ba      	ldr	r2, [r7, #24]
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	4313      	orrs	r3, r2
 800315c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800315e:	4a2f      	ldr	r2, [pc, #188]	; (800321c <HAL_GPIO_Init+0x304>)
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003164:	4b2d      	ldr	r3, [pc, #180]	; (800321c <HAL_GPIO_Init+0x304>)
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	43db      	mvns	r3, r3
 800316e:	69ba      	ldr	r2, [r7, #24]
 8003170:	4013      	ands	r3, r2
 8003172:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d003      	beq.n	8003188 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	4313      	orrs	r3, r2
 8003186:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003188:	4a24      	ldr	r2, [pc, #144]	; (800321c <HAL_GPIO_Init+0x304>)
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800318e:	4b23      	ldr	r3, [pc, #140]	; (800321c <HAL_GPIO_Init+0x304>)
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	43db      	mvns	r3, r3
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	4013      	ands	r3, r2
 800319c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d003      	beq.n	80031b2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80031aa:	69ba      	ldr	r2, [r7, #24]
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031b2:	4a1a      	ldr	r2, [pc, #104]	; (800321c <HAL_GPIO_Init+0x304>)
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031b8:	4b18      	ldr	r3, [pc, #96]	; (800321c <HAL_GPIO_Init+0x304>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	43db      	mvns	r3, r3
 80031c2:	69ba      	ldr	r2, [r7, #24]
 80031c4:	4013      	ands	r3, r2
 80031c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d003      	beq.n	80031dc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	4313      	orrs	r3, r2
 80031da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031dc:	4a0f      	ldr	r2, [pc, #60]	; (800321c <HAL_GPIO_Init+0x304>)
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	3301      	adds	r3, #1
 80031e6:	61fb      	str	r3, [r7, #28]
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	2b0f      	cmp	r3, #15
 80031ec:	f67f aea2 	bls.w	8002f34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031f0:	bf00      	nop
 80031f2:	bf00      	nop
 80031f4:	3724      	adds	r7, #36	; 0x24
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	40023800 	.word	0x40023800
 8003204:	40013800 	.word	0x40013800
 8003208:	40020000 	.word	0x40020000
 800320c:	40020400 	.word	0x40020400
 8003210:	40020800 	.word	0x40020800
 8003214:	40020c00 	.word	0x40020c00
 8003218:	40021000 	.word	0x40021000
 800321c:	40013c00 	.word	0x40013c00

08003220 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	460b      	mov	r3, r1
 800322a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	691a      	ldr	r2, [r3, #16]
 8003230:	887b      	ldrh	r3, [r7, #2]
 8003232:	4013      	ands	r3, r2
 8003234:	2b00      	cmp	r3, #0
 8003236:	d002      	beq.n	800323e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003238:	2301      	movs	r3, #1
 800323a:	73fb      	strb	r3, [r7, #15]
 800323c:	e001      	b.n	8003242 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800323e:	2300      	movs	r3, #0
 8003240:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003242:	7bfb      	ldrb	r3, [r7, #15]
}
 8003244:	4618      	mov	r0, r3
 8003246:	3714      	adds	r7, #20
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	460b      	mov	r3, r1
 800325a:	807b      	strh	r3, [r7, #2]
 800325c:	4613      	mov	r3, r2
 800325e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003260:	787b      	ldrb	r3, [r7, #1]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d003      	beq.n	800326e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003266:	887a      	ldrh	r2, [r7, #2]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800326c:	e003      	b.n	8003276 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800326e:	887b      	ldrh	r3, [r7, #2]
 8003270:	041a      	lsls	r2, r3, #16
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	619a      	str	r2, [r3, #24]
}
 8003276:	bf00      	nop
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
	...

08003284 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	4603      	mov	r3, r0
 800328c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800328e:	4b08      	ldr	r3, [pc, #32]	; (80032b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003290:	695a      	ldr	r2, [r3, #20]
 8003292:	88fb      	ldrh	r3, [r7, #6]
 8003294:	4013      	ands	r3, r2
 8003296:	2b00      	cmp	r3, #0
 8003298:	d006      	beq.n	80032a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800329a:	4a05      	ldr	r2, [pc, #20]	; (80032b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800329c:	88fb      	ldrh	r3, [r7, #6]
 800329e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80032a0:	88fb      	ldrh	r3, [r7, #6]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7fe fd10 	bl	8001cc8 <HAL_GPIO_EXTI_Callback>
  }
}
 80032a8:	bf00      	nop
 80032aa:	3708      	adds	r7, #8
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	40013c00 	.word	0x40013c00

080032b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d101      	bne.n	80032c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e12b      	b.n	800351e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d106      	bne.n	80032e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f7fe fda8 	bl	8001e30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2224      	movs	r2, #36	; 0x24
 80032e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f022 0201 	bic.w	r2, r2, #1
 80032f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003306:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003316:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003318:	f003 fa9a 	bl	8006850 <HAL_RCC_GetPCLK1Freq>
 800331c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	4a81      	ldr	r2, [pc, #516]	; (8003528 <HAL_I2C_Init+0x274>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d807      	bhi.n	8003338 <HAL_I2C_Init+0x84>
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	4a80      	ldr	r2, [pc, #512]	; (800352c <HAL_I2C_Init+0x278>)
 800332c:	4293      	cmp	r3, r2
 800332e:	bf94      	ite	ls
 8003330:	2301      	movls	r3, #1
 8003332:	2300      	movhi	r3, #0
 8003334:	b2db      	uxtb	r3, r3
 8003336:	e006      	b.n	8003346 <HAL_I2C_Init+0x92>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	4a7d      	ldr	r2, [pc, #500]	; (8003530 <HAL_I2C_Init+0x27c>)
 800333c:	4293      	cmp	r3, r2
 800333e:	bf94      	ite	ls
 8003340:	2301      	movls	r3, #1
 8003342:	2300      	movhi	r3, #0
 8003344:	b2db      	uxtb	r3, r3
 8003346:	2b00      	cmp	r3, #0
 8003348:	d001      	beq.n	800334e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e0e7      	b.n	800351e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	4a78      	ldr	r2, [pc, #480]	; (8003534 <HAL_I2C_Init+0x280>)
 8003352:	fba2 2303 	umull	r2, r3, r2, r3
 8003356:	0c9b      	lsrs	r3, r3, #18
 8003358:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68ba      	ldr	r2, [r7, #8]
 800336a:	430a      	orrs	r2, r1
 800336c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	6a1b      	ldr	r3, [r3, #32]
 8003374:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	4a6a      	ldr	r2, [pc, #424]	; (8003528 <HAL_I2C_Init+0x274>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d802      	bhi.n	8003388 <HAL_I2C_Init+0xd4>
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	3301      	adds	r3, #1
 8003386:	e009      	b.n	800339c <HAL_I2C_Init+0xe8>
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800338e:	fb02 f303 	mul.w	r3, r2, r3
 8003392:	4a69      	ldr	r2, [pc, #420]	; (8003538 <HAL_I2C_Init+0x284>)
 8003394:	fba2 2303 	umull	r2, r3, r2, r3
 8003398:	099b      	lsrs	r3, r3, #6
 800339a:	3301      	adds	r3, #1
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	6812      	ldr	r2, [r2, #0]
 80033a0:	430b      	orrs	r3, r1
 80033a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	69db      	ldr	r3, [r3, #28]
 80033aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80033ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	495c      	ldr	r1, [pc, #368]	; (8003528 <HAL_I2C_Init+0x274>)
 80033b8:	428b      	cmp	r3, r1
 80033ba:	d819      	bhi.n	80033f0 <HAL_I2C_Init+0x13c>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	1e59      	subs	r1, r3, #1
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	005b      	lsls	r3, r3, #1
 80033c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80033ca:	1c59      	adds	r1, r3, #1
 80033cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80033d0:	400b      	ands	r3, r1
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00a      	beq.n	80033ec <HAL_I2C_Init+0x138>
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	1e59      	subs	r1, r3, #1
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	005b      	lsls	r3, r3, #1
 80033e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80033e4:	3301      	adds	r3, #1
 80033e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033ea:	e051      	b.n	8003490 <HAL_I2C_Init+0x1dc>
 80033ec:	2304      	movs	r3, #4
 80033ee:	e04f      	b.n	8003490 <HAL_I2C_Init+0x1dc>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d111      	bne.n	800341c <HAL_I2C_Init+0x168>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	1e58      	subs	r0, r3, #1
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6859      	ldr	r1, [r3, #4]
 8003400:	460b      	mov	r3, r1
 8003402:	005b      	lsls	r3, r3, #1
 8003404:	440b      	add	r3, r1
 8003406:	fbb0 f3f3 	udiv	r3, r0, r3
 800340a:	3301      	adds	r3, #1
 800340c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003410:	2b00      	cmp	r3, #0
 8003412:	bf0c      	ite	eq
 8003414:	2301      	moveq	r3, #1
 8003416:	2300      	movne	r3, #0
 8003418:	b2db      	uxtb	r3, r3
 800341a:	e012      	b.n	8003442 <HAL_I2C_Init+0x18e>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	1e58      	subs	r0, r3, #1
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6859      	ldr	r1, [r3, #4]
 8003424:	460b      	mov	r3, r1
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	440b      	add	r3, r1
 800342a:	0099      	lsls	r1, r3, #2
 800342c:	440b      	add	r3, r1
 800342e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003432:	3301      	adds	r3, #1
 8003434:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003438:	2b00      	cmp	r3, #0
 800343a:	bf0c      	ite	eq
 800343c:	2301      	moveq	r3, #1
 800343e:	2300      	movne	r3, #0
 8003440:	b2db      	uxtb	r3, r3
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <HAL_I2C_Init+0x196>
 8003446:	2301      	movs	r3, #1
 8003448:	e022      	b.n	8003490 <HAL_I2C_Init+0x1dc>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d10e      	bne.n	8003470 <HAL_I2C_Init+0x1bc>
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	1e58      	subs	r0, r3, #1
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6859      	ldr	r1, [r3, #4]
 800345a:	460b      	mov	r3, r1
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	440b      	add	r3, r1
 8003460:	fbb0 f3f3 	udiv	r3, r0, r3
 8003464:	3301      	adds	r3, #1
 8003466:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800346a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800346e:	e00f      	b.n	8003490 <HAL_I2C_Init+0x1dc>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	1e58      	subs	r0, r3, #1
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6859      	ldr	r1, [r3, #4]
 8003478:	460b      	mov	r3, r1
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	440b      	add	r3, r1
 800347e:	0099      	lsls	r1, r3, #2
 8003480:	440b      	add	r3, r1
 8003482:	fbb0 f3f3 	udiv	r3, r0, r3
 8003486:	3301      	adds	r3, #1
 8003488:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800348c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003490:	6879      	ldr	r1, [r7, #4]
 8003492:	6809      	ldr	r1, [r1, #0]
 8003494:	4313      	orrs	r3, r2
 8003496:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	69da      	ldr	r2, [r3, #28]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a1b      	ldr	r3, [r3, #32]
 80034aa:	431a      	orrs	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	430a      	orrs	r2, r1
 80034b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80034be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	6911      	ldr	r1, [r2, #16]
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	68d2      	ldr	r2, [r2, #12]
 80034ca:	4311      	orrs	r1, r2
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	6812      	ldr	r2, [r2, #0]
 80034d0:	430b      	orrs	r3, r1
 80034d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	695a      	ldr	r2, [r3, #20]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	431a      	orrs	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	430a      	orrs	r2, r1
 80034ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f042 0201 	orr.w	r2, r2, #1
 80034fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2220      	movs	r2, #32
 800350a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3710      	adds	r7, #16
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	000186a0 	.word	0x000186a0
 800352c:	001e847f 	.word	0x001e847f
 8003530:	003d08ff 	.word	0x003d08ff
 8003534:	431bde83 	.word	0x431bde83
 8003538:	10624dd3 	.word	0x10624dd3

0800353c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b088      	sub	sp, #32
 8003540:	af02      	add	r7, sp, #8
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	4608      	mov	r0, r1
 8003546:	4611      	mov	r1, r2
 8003548:	461a      	mov	r2, r3
 800354a:	4603      	mov	r3, r0
 800354c:	817b      	strh	r3, [r7, #10]
 800354e:	460b      	mov	r3, r1
 8003550:	813b      	strh	r3, [r7, #8]
 8003552:	4613      	mov	r3, r2
 8003554:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003556:	f7fe ff8d 	bl	8002474 <HAL_GetTick>
 800355a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003562:	b2db      	uxtb	r3, r3
 8003564:	2b20      	cmp	r3, #32
 8003566:	f040 80d9 	bne.w	800371c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	9300      	str	r3, [sp, #0]
 800356e:	2319      	movs	r3, #25
 8003570:	2201      	movs	r2, #1
 8003572:	496d      	ldr	r1, [pc, #436]	; (8003728 <HAL_I2C_Mem_Write+0x1ec>)
 8003574:	68f8      	ldr	r0, [r7, #12]
 8003576:	f002 fad1 	bl	8005b1c <I2C_WaitOnFlagUntilTimeout>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d001      	beq.n	8003584 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003580:	2302      	movs	r3, #2
 8003582:	e0cc      	b.n	800371e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800358a:	2b01      	cmp	r3, #1
 800358c:	d101      	bne.n	8003592 <HAL_I2C_Mem_Write+0x56>
 800358e:	2302      	movs	r3, #2
 8003590:	e0c5      	b.n	800371e <HAL_I2C_Mem_Write+0x1e2>
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2201      	movs	r2, #1
 8003596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0301 	and.w	r3, r3, #1
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d007      	beq.n	80035b8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f042 0201 	orr.w	r2, r2, #1
 80035b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2221      	movs	r2, #33	; 0x21
 80035cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2240      	movs	r2, #64	; 0x40
 80035d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2200      	movs	r2, #0
 80035dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6a3a      	ldr	r2, [r7, #32]
 80035e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80035e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ee:	b29a      	uxth	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	4a4d      	ldr	r2, [pc, #308]	; (800372c <HAL_I2C_Mem_Write+0x1f0>)
 80035f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80035fa:	88f8      	ldrh	r0, [r7, #6]
 80035fc:	893a      	ldrh	r2, [r7, #8]
 80035fe:	8979      	ldrh	r1, [r7, #10]
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	9301      	str	r3, [sp, #4]
 8003604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003606:	9300      	str	r3, [sp, #0]
 8003608:	4603      	mov	r3, r0
 800360a:	68f8      	ldr	r0, [r7, #12]
 800360c:	f002 f860 	bl	80056d0 <I2C_RequestMemoryWrite>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d052      	beq.n	80036bc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e081      	b.n	800371e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800361a:	697a      	ldr	r2, [r7, #20]
 800361c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800361e:	68f8      	ldr	r0, [r7, #12]
 8003620:	f002 fb52 	bl	8005cc8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00d      	beq.n	8003646 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362e:	2b04      	cmp	r3, #4
 8003630:	d107      	bne.n	8003642 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003640:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e06b      	b.n	800371e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364a:	781a      	ldrb	r2, [r3, #0]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003656:	1c5a      	adds	r2, r3, #1
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003660:	3b01      	subs	r3, #1
 8003662:	b29a      	uxth	r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800366c:	b29b      	uxth	r3, r3
 800366e:	3b01      	subs	r3, #1
 8003670:	b29a      	uxth	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	695b      	ldr	r3, [r3, #20]
 800367c:	f003 0304 	and.w	r3, r3, #4
 8003680:	2b04      	cmp	r3, #4
 8003682:	d11b      	bne.n	80036bc <HAL_I2C_Mem_Write+0x180>
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003688:	2b00      	cmp	r3, #0
 800368a:	d017      	beq.n	80036bc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003690:	781a      	ldrb	r2, [r3, #0]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369c:	1c5a      	adds	r2, r3, #1
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036a6:	3b01      	subs	r3, #1
 80036a8:	b29a      	uxth	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	3b01      	subs	r3, #1
 80036b6:	b29a      	uxth	r2, r3
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d1aa      	bne.n	800361a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036c4:	697a      	ldr	r2, [r7, #20]
 80036c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036c8:	68f8      	ldr	r0, [r7, #12]
 80036ca:	f002 fb3e 	bl	8005d4a <I2C_WaitOnBTFFlagUntilTimeout>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00d      	beq.n	80036f0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d8:	2b04      	cmp	r3, #4
 80036da:	d107      	bne.n	80036ec <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036ea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e016      	b.n	800371e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2220      	movs	r2, #32
 8003704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003718:	2300      	movs	r3, #0
 800371a:	e000      	b.n	800371e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800371c:	2302      	movs	r3, #2
  }
}
 800371e:	4618      	mov	r0, r3
 8003720:	3718      	adds	r7, #24
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	00100002 	.word	0x00100002
 800372c:	ffff0000 	.word	0xffff0000

08003730 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b08c      	sub	sp, #48	; 0x30
 8003734:	af02      	add	r7, sp, #8
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	4608      	mov	r0, r1
 800373a:	4611      	mov	r1, r2
 800373c:	461a      	mov	r2, r3
 800373e:	4603      	mov	r3, r0
 8003740:	817b      	strh	r3, [r7, #10]
 8003742:	460b      	mov	r3, r1
 8003744:	813b      	strh	r3, [r7, #8]
 8003746:	4613      	mov	r3, r2
 8003748:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800374a:	f7fe fe93 	bl	8002474 <HAL_GetTick>
 800374e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003756:	b2db      	uxtb	r3, r3
 8003758:	2b20      	cmp	r3, #32
 800375a:	f040 8208 	bne.w	8003b6e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800375e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003760:	9300      	str	r3, [sp, #0]
 8003762:	2319      	movs	r3, #25
 8003764:	2201      	movs	r2, #1
 8003766:	497b      	ldr	r1, [pc, #492]	; (8003954 <HAL_I2C_Mem_Read+0x224>)
 8003768:	68f8      	ldr	r0, [r7, #12]
 800376a:	f002 f9d7 	bl	8005b1c <I2C_WaitOnFlagUntilTimeout>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d001      	beq.n	8003778 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003774:	2302      	movs	r3, #2
 8003776:	e1fb      	b.n	8003b70 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800377e:	2b01      	cmp	r3, #1
 8003780:	d101      	bne.n	8003786 <HAL_I2C_Mem_Read+0x56>
 8003782:	2302      	movs	r3, #2
 8003784:	e1f4      	b.n	8003b70 <HAL_I2C_Mem_Read+0x440>
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2201      	movs	r2, #1
 800378a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0301 	and.w	r3, r3, #1
 8003798:	2b01      	cmp	r3, #1
 800379a:	d007      	beq.n	80037ac <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f042 0201 	orr.w	r2, r2, #1
 80037aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2222      	movs	r2, #34	; 0x22
 80037c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2240      	movs	r2, #64	; 0x40
 80037c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80037dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e2:	b29a      	uxth	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	4a5b      	ldr	r2, [pc, #364]	; (8003958 <HAL_I2C_Mem_Read+0x228>)
 80037ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037ee:	88f8      	ldrh	r0, [r7, #6]
 80037f0:	893a      	ldrh	r2, [r7, #8]
 80037f2:	8979      	ldrh	r1, [r7, #10]
 80037f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f6:	9301      	str	r3, [sp, #4]
 80037f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037fa:	9300      	str	r3, [sp, #0]
 80037fc:	4603      	mov	r3, r0
 80037fe:	68f8      	ldr	r0, [r7, #12]
 8003800:	f001 fffc 	bl	80057fc <I2C_RequestMemoryRead>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d001      	beq.n	800380e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e1b0      	b.n	8003b70 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003812:	2b00      	cmp	r3, #0
 8003814:	d113      	bne.n	800383e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003816:	2300      	movs	r3, #0
 8003818:	623b      	str	r3, [r7, #32]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	695b      	ldr	r3, [r3, #20]
 8003820:	623b      	str	r3, [r7, #32]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	699b      	ldr	r3, [r3, #24]
 8003828:	623b      	str	r3, [r7, #32]
 800382a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800383a:	601a      	str	r2, [r3, #0]
 800383c:	e184      	b.n	8003b48 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003842:	2b01      	cmp	r3, #1
 8003844:	d11b      	bne.n	800387e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003854:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003856:	2300      	movs	r3, #0
 8003858:	61fb      	str	r3, [r7, #28]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	695b      	ldr	r3, [r3, #20]
 8003860:	61fb      	str	r3, [r7, #28]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	699b      	ldr	r3, [r3, #24]
 8003868:	61fb      	str	r3, [r7, #28]
 800386a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800387a:	601a      	str	r2, [r3, #0]
 800387c:	e164      	b.n	8003b48 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003882:	2b02      	cmp	r3, #2
 8003884:	d11b      	bne.n	80038be <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003894:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038a6:	2300      	movs	r3, #0
 80038a8:	61bb      	str	r3, [r7, #24]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	695b      	ldr	r3, [r3, #20]
 80038b0:	61bb      	str	r3, [r7, #24]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	61bb      	str	r3, [r7, #24]
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	e144      	b.n	8003b48 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038be:	2300      	movs	r3, #0
 80038c0:	617b      	str	r3, [r7, #20]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	695b      	ldr	r3, [r3, #20]
 80038c8:	617b      	str	r3, [r7, #20]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	699b      	ldr	r3, [r3, #24]
 80038d0:	617b      	str	r3, [r7, #20]
 80038d2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80038d4:	e138      	b.n	8003b48 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038da:	2b03      	cmp	r3, #3
 80038dc:	f200 80f1 	bhi.w	8003ac2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d123      	bne.n	8003930 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80038ec:	68f8      	ldr	r0, [r7, #12]
 80038ee:	f002 fa9f 	bl	8005e30 <I2C_WaitOnRXNEFlagUntilTimeout>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d001      	beq.n	80038fc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e139      	b.n	8003b70 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	691a      	ldr	r2, [r3, #16]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003906:	b2d2      	uxtb	r2, r2
 8003908:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390e:	1c5a      	adds	r2, r3, #1
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003918:	3b01      	subs	r3, #1
 800391a:	b29a      	uxth	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003924:	b29b      	uxth	r3, r3
 8003926:	3b01      	subs	r3, #1
 8003928:	b29a      	uxth	r2, r3
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800392e:	e10b      	b.n	8003b48 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003934:	2b02      	cmp	r3, #2
 8003936:	d14e      	bne.n	80039d6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393a:	9300      	str	r3, [sp, #0]
 800393c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800393e:	2200      	movs	r2, #0
 8003940:	4906      	ldr	r1, [pc, #24]	; (800395c <HAL_I2C_Mem_Read+0x22c>)
 8003942:	68f8      	ldr	r0, [r7, #12]
 8003944:	f002 f8ea 	bl	8005b1c <I2C_WaitOnFlagUntilTimeout>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d008      	beq.n	8003960 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e10e      	b.n	8003b70 <HAL_I2C_Mem_Read+0x440>
 8003952:	bf00      	nop
 8003954:	00100002 	.word	0x00100002
 8003958:	ffff0000 	.word	0xffff0000
 800395c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800396e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	691a      	ldr	r2, [r3, #16]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397a:	b2d2      	uxtb	r2, r2
 800397c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003982:	1c5a      	adds	r2, r3, #1
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800398c:	3b01      	subs	r3, #1
 800398e:	b29a      	uxth	r2, r3
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003998:	b29b      	uxth	r3, r3
 800399a:	3b01      	subs	r3, #1
 800399c:	b29a      	uxth	r2, r3
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	691a      	ldr	r2, [r3, #16]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ac:	b2d2      	uxtb	r2, r2
 80039ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b4:	1c5a      	adds	r2, r3, #1
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039be:	3b01      	subs	r3, #1
 80039c0:	b29a      	uxth	r2, r3
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	3b01      	subs	r3, #1
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80039d4:	e0b8      	b.n	8003b48 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d8:	9300      	str	r3, [sp, #0]
 80039da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039dc:	2200      	movs	r2, #0
 80039de:	4966      	ldr	r1, [pc, #408]	; (8003b78 <HAL_I2C_Mem_Read+0x448>)
 80039e0:	68f8      	ldr	r0, [r7, #12]
 80039e2:	f002 f89b 	bl	8005b1c <I2C_WaitOnFlagUntilTimeout>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d001      	beq.n	80039f0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e0bf      	b.n	8003b70 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	691a      	ldr	r2, [r3, #16]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0a:	b2d2      	uxtb	r2, r2
 8003a0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a12:	1c5a      	adds	r2, r3, #1
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a1c:	3b01      	subs	r3, #1
 8003a1e:	b29a      	uxth	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	b29a      	uxth	r2, r3
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a34:	9300      	str	r3, [sp, #0]
 8003a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a38:	2200      	movs	r2, #0
 8003a3a:	494f      	ldr	r1, [pc, #316]	; (8003b78 <HAL_I2C_Mem_Read+0x448>)
 8003a3c:	68f8      	ldr	r0, [r7, #12]
 8003a3e:	f002 f86d 	bl	8005b1c <I2C_WaitOnFlagUntilTimeout>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d001      	beq.n	8003a4c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e091      	b.n	8003b70 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	691a      	ldr	r2, [r3, #16]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a66:	b2d2      	uxtb	r2, r2
 8003a68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6e:	1c5a      	adds	r2, r3, #1
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	b29a      	uxth	r2, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	3b01      	subs	r3, #1
 8003a88:	b29a      	uxth	r2, r3
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	691a      	ldr	r2, [r3, #16]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a98:	b2d2      	uxtb	r2, r2
 8003a9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa0:	1c5a      	adds	r2, r3, #1
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	b29a      	uxth	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	3b01      	subs	r3, #1
 8003aba:	b29a      	uxth	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ac0:	e042      	b.n	8003b48 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ac4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003ac6:	68f8      	ldr	r0, [r7, #12]
 8003ac8:	f002 f9b2 	bl	8005e30 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d001      	beq.n	8003ad6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e04c      	b.n	8003b70 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	691a      	ldr	r2, [r3, #16]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae0:	b2d2      	uxtb	r2, r2
 8003ae2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae8:	1c5a      	adds	r2, r3, #1
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af2:	3b01      	subs	r3, #1
 8003af4:	b29a      	uxth	r2, r3
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	3b01      	subs	r3, #1
 8003b02:	b29a      	uxth	r2, r3
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	f003 0304 	and.w	r3, r3, #4
 8003b12:	2b04      	cmp	r3, #4
 8003b14:	d118      	bne.n	8003b48 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	691a      	ldr	r2, [r3, #16]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b20:	b2d2      	uxtb	r2, r2
 8003b22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b28:	1c5a      	adds	r2, r3, #1
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b32:	3b01      	subs	r3, #1
 8003b34:	b29a      	uxth	r2, r3
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	3b01      	subs	r3, #1
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	f47f aec2 	bne.w	80038d6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2220      	movs	r2, #32
 8003b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	e000      	b.n	8003b70 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003b6e:	2302      	movs	r3, #2
  }
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3728      	adds	r7, #40	; 0x28
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	00010004 	.word	0x00010004

08003b7c <HAL_I2C_Master_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b087      	sub	sp, #28
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	607a      	str	r2, [r7, #4]
 8003b86:	461a      	mov	r2, r3
 8003b88:	460b      	mov	r3, r1
 8003b8a:	817b      	strh	r3, [r7, #10]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 8003b90:	2300      	movs	r3, #0
 8003b92:	617b      	str	r3, [r7, #20]
  __IO uint32_t count      = 0x00U;
 8003b94:	2300      	movs	r3, #0
 8003b96:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	2b20      	cmp	r3, #32
 8003ba2:	f040 80a6 	bne.w	8003cf2 <HAL_I2C_Master_Seq_Transmit_IT+0x176>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bb4:	d005      	beq.n	8003bc2 <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 8003bb6:	6a3b      	ldr	r3, [r7, #32]
 8003bb8:	2b08      	cmp	r3, #8
 8003bba:	d002      	beq.n	8003bc2 <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 8003bbc:	6a3b      	ldr	r3, [r7, #32]
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d130      	bne.n	8003c24 <HAL_I2C_Master_Seq_Transmit_IT+0xa8>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003bc2:	4b4f      	ldr	r3, [pc, #316]	; (8003d00 <HAL_I2C_Master_Seq_Transmit_IT+0x184>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	08db      	lsrs	r3, r3, #3
 8003bc8:	4a4e      	ldr	r2, [pc, #312]	; (8003d04 <HAL_I2C_Master_Seq_Transmit_IT+0x188>)
 8003bca:	fba2 2303 	umull	r2, r3, r2, r3
 8003bce:	0a1a      	lsrs	r2, r3, #8
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	4413      	add	r3, r2
 8003bd6:	009a      	lsls	r2, r3, #2
 8003bd8:	4413      	add	r3, r2
 8003bda:	613b      	str	r3, [r7, #16]
      do
      {
        count--;
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	3b01      	subs	r3, #1
 8003be0:	613b      	str	r3, [r7, #16]
        if (count == 0U)
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d116      	bne.n	8003c16 <HAL_I2C_Master_Seq_Transmit_IT+0x9a>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2220      	movs	r2, #32
 8003bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c02:	f043 0220 	orr.w	r2, r3, #32
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e06e      	b.n	8003cf4 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	f003 0302 	and.w	r3, r3, #2
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d0db      	beq.n	8003bdc <HAL_I2C_Master_Seq_Transmit_IT+0x60>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d101      	bne.n	8003c32 <HAL_I2C_Master_Seq_Transmit_IT+0xb6>
 8003c2e:	2302      	movs	r3, #2
 8003c30:	e060      	b.n	8003cf4 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0301 	and.w	r3, r3, #1
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d007      	beq.n	8003c58 <HAL_I2C_Master_Seq_Transmit_IT+0xdc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f042 0201 	orr.w	r2, r2, #1
 8003c56:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c66:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2221      	movs	r2, #33	; 0x21
 8003c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2210      	movs	r2, #16
 8003c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	893a      	ldrh	r2, [r7, #8]
 8003c88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6a3a      	ldr	r2, [r7, #32]
 8003c98:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8003c9a:	897a      	ldrh	r2, [r7, #10]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca4:	617b      	str	r3, [r7, #20]

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	2b11      	cmp	r3, #17
 8003caa:	d10c      	bne.n	8003cc6 <HAL_I2C_Master_Seq_Transmit_IT+0x14a>
 8003cac:	6a3b      	ldr	r3, [r7, #32]
 8003cae:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003cb2:	d003      	beq.n	8003cbc <HAL_I2C_Master_Seq_Transmit_IT+0x140>
 8003cb4:	6a3b      	ldr	r3, [r7, #32]
 8003cb6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003cba:	d101      	bne.n	8003cc0 <HAL_I2C_Master_Seq_Transmit_IT+0x144>
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e000      	b.n	8003cc2 <HAL_I2C_Master_Seq_Transmit_IT+0x146>
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d107      	bne.n	8003cd6 <HAL_I2C_Master_Seq_Transmit_IT+0x15a>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cd4:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	685a      	ldr	r2, [r3, #4]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003cec:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	e000      	b.n	8003cf4 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
  }
  else
  {
    return HAL_BUSY;
 8003cf2:	2302      	movs	r3, #2
  }
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	371c      	adds	r7, #28
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr
 8003d00:	20000034 	.word	0x20000034
 8003d04:	14f8b589 	.word	0x14f8b589

08003d08 <HAL_I2C_Master_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b089      	sub	sp, #36	; 0x24
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	607a      	str	r2, [r7, #4]
 8003d12:	461a      	mov	r2, r3
 8003d14:	460b      	mov	r3, r1
 8003d16:	817b      	strh	r3, [r7, #10]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8003d20:	2300      	movs	r3, #0
 8003d22:	617b      	str	r3, [r7, #20]
  uint32_t enableIT = (I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d24:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003d28:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	2b20      	cmp	r3, #32
 8003d34:	f040 80da 	bne.w	8003eec <HAL_I2C_Master_Seq_Receive_IT+0x1e4>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d46:	d005      	beq.n	8003d54 <HAL_I2C_Master_Seq_Receive_IT+0x4c>
 8003d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d4a:	2b08      	cmp	r3, #8
 8003d4c:	d002      	beq.n	8003d54 <HAL_I2C_Master_Seq_Receive_IT+0x4c>
 8003d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d130      	bne.n	8003db6 <HAL_I2C_Master_Seq_Receive_IT+0xae>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003d54:	4b69      	ldr	r3, [pc, #420]	; (8003efc <HAL_I2C_Master_Seq_Receive_IT+0x1f4>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	08db      	lsrs	r3, r3, #3
 8003d5a:	4a69      	ldr	r2, [pc, #420]	; (8003f00 <HAL_I2C_Master_Seq_Receive_IT+0x1f8>)
 8003d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d60:	0a1a      	lsrs	r2, r3, #8
 8003d62:	4613      	mov	r3, r2
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	4413      	add	r3, r2
 8003d68:	009a      	lsls	r2, r3, #2
 8003d6a:	4413      	add	r3, r2
 8003d6c:	617b      	str	r3, [r7, #20]
      do
      {
        count--;
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	3b01      	subs	r3, #1
 8003d72:	617b      	str	r3, [r7, #20]
        if (count == 0U)
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d116      	bne.n	8003da8 <HAL_I2C_Master_Seq_Receive_IT+0xa0>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2220      	movs	r2, #32
 8003d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d94:	f043 0220 	orr.w	r2, r3, #32
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e0a2      	b.n	8003eee <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	699b      	ldr	r3, [r3, #24]
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d0db      	beq.n	8003d6e <HAL_I2C_Master_Seq_Receive_IT+0x66>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d101      	bne.n	8003dc4 <HAL_I2C_Master_Seq_Receive_IT+0xbc>
 8003dc0:	2302      	movs	r3, #2
 8003dc2:	e094      	b.n	8003eee <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0301 	and.w	r3, r3, #1
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d007      	beq.n	8003dea <HAL_I2C_Master_Seq_Receive_IT+0xe2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f042 0201 	orr.w	r2, r2, #1
 8003de8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003df8:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2222      	movs	r2, #34	; 0x22
 8003dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2210      	movs	r2, #16
 8003e06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	893a      	ldrh	r2, [r7, #8]
 8003e1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e20:	b29a      	uxth	r2, r3
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e2a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8003e2c:	897a      	ldrh	r2, [r7, #10]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e36:	61bb      	str	r3, [r7, #24]

    if ((hi2c->XferCount == 2U) && ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP)))
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d126      	bne.n	8003e90 <HAL_I2C_Master_Seq_Receive_IT+0x188>
 8003e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e44:	2b20      	cmp	r3, #32
 8003e46:	d002      	beq.n	8003e4e <HAL_I2C_Master_Seq_Receive_IT+0x146>
 8003e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e4a:	2b10      	cmp	r3, #16
 8003e4c:	d120      	bne.n	8003e90 <HAL_I2C_Master_Seq_Receive_IT+0x188>
    {
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	2b12      	cmp	r3, #18
 8003e52:	d114      	bne.n	8003e7e <HAL_I2C_Master_Seq_Receive_IT+0x176>
      {
        /* Disable Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e62:	601a      	str	r2, [r3, #0]

        /* Enable Pos */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e72:	601a      	str	r2, [r3, #0]

        /* Remove Enabling of IT_BUF, mean RXNE treatment, treat the 2 bytes through BTF */
        enableIT &= ~I2C_IT_BUF;
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e7a:	61fb      	str	r3, [r7, #28]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8003e7c:	e010      	b.n	8003ea0 <HAL_I2C_Master_Seq_Receive_IT+0x198>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e8c:	601a      	str	r2, [r3, #0]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8003e8e:	e007      	b.n	8003ea0 <HAL_I2C_Master_Seq_Receive_IT+0x198>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e9e:	601a      	str	r2, [r3, #0]
    }

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	2b12      	cmp	r3, #18
 8003ea4:	d10c      	bne.n	8003ec0 <HAL_I2C_Master_Seq_Receive_IT+0x1b8>
 8003ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003eac:	d003      	beq.n	8003eb6 <HAL_I2C_Master_Seq_Receive_IT+0x1ae>
 8003eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003eb4:	d101      	bne.n	8003eba <HAL_I2C_Master_Seq_Receive_IT+0x1b2>
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e000      	b.n	8003ebc <HAL_I2C_Master_Seq_Receive_IT+0x1b4>
 8003eba:	2300      	movs	r3, #0
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d107      	bne.n	8003ed0 <HAL_I2C_Master_Seq_Receive_IT+0x1c8>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ece:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable interrupts */
    __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	6859      	ldr	r1, [r3, #4]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	69fa      	ldr	r2, [r7, #28]
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	e000      	b.n	8003eee <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
  }
  else
  {
    return HAL_BUSY;
 8003eec:	2302      	movs	r3, #2
  }
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3724      	adds	r7, #36	; 0x24
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	20000034 	.word	0x20000034
 8003f00:	14f8b589 	.word	0x14f8b589

08003f04 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b088      	sub	sp, #32
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f24:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f2c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003f2e:	7bfb      	ldrb	r3, [r7, #15]
 8003f30:	2b10      	cmp	r3, #16
 8003f32:	d003      	beq.n	8003f3c <HAL_I2C_EV_IRQHandler+0x38>
 8003f34:	7bfb      	ldrb	r3, [r7, #15]
 8003f36:	2b40      	cmp	r3, #64	; 0x40
 8003f38:	f040 80c1 	bne.w	80040be <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	695b      	ldr	r3, [r3, #20]
 8003f4a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d10d      	bne.n	8003f72 <HAL_I2C_EV_IRQHandler+0x6e>
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003f5c:	d003      	beq.n	8003f66 <HAL_I2C_EV_IRQHandler+0x62>
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003f64:	d101      	bne.n	8003f6a <HAL_I2C_EV_IRQHandler+0x66>
 8003f66:	2301      	movs	r3, #1
 8003f68:	e000      	b.n	8003f6c <HAL_I2C_EV_IRQHandler+0x68>
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	f000 8132 	beq.w	80041d6 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	f003 0301 	and.w	r3, r3, #1
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d00c      	beq.n	8003f96 <HAL_I2C_EV_IRQHandler+0x92>
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	0a5b      	lsrs	r3, r3, #9
 8003f80:	f003 0301 	and.w	r3, r3, #1
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d006      	beq.n	8003f96 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f001 ffd6 	bl	8005f3a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 fd83 	bl	8004a9a <I2C_Master_SB>
 8003f94:	e092      	b.n	80040bc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	08db      	lsrs	r3, r3, #3
 8003f9a:	f003 0301 	and.w	r3, r3, #1
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d009      	beq.n	8003fb6 <HAL_I2C_EV_IRQHandler+0xb2>
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	0a5b      	lsrs	r3, r3, #9
 8003fa6:	f003 0301 	and.w	r3, r3, #1
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d003      	beq.n	8003fb6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 fdf9 	bl	8004ba6 <I2C_Master_ADD10>
 8003fb4:	e082      	b.n	80040bc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	085b      	lsrs	r3, r3, #1
 8003fba:	f003 0301 	and.w	r3, r3, #1
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d009      	beq.n	8003fd6 <HAL_I2C_EV_IRQHandler+0xd2>
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	0a5b      	lsrs	r3, r3, #9
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d003      	beq.n	8003fd6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 fe13 	bl	8004bfa <I2C_Master_ADDR>
 8003fd4:	e072      	b.n	80040bc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	089b      	lsrs	r3, r3, #2
 8003fda:	f003 0301 	and.w	r3, r3, #1
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d03b      	beq.n	800405a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ff0:	f000 80f3 	beq.w	80041da <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	09db      	lsrs	r3, r3, #7
 8003ff8:	f003 0301 	and.w	r3, r3, #1
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d00f      	beq.n	8004020 <HAL_I2C_EV_IRQHandler+0x11c>
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	0a9b      	lsrs	r3, r3, #10
 8004004:	f003 0301 	and.w	r3, r3, #1
 8004008:	2b00      	cmp	r3, #0
 800400a:	d009      	beq.n	8004020 <HAL_I2C_EV_IRQHandler+0x11c>
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	089b      	lsrs	r3, r3, #2
 8004010:	f003 0301 	and.w	r3, r3, #1
 8004014:	2b00      	cmp	r3, #0
 8004016:	d103      	bne.n	8004020 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f000 f9f3 	bl	8004404 <I2C_MasterTransmit_TXE>
 800401e:	e04d      	b.n	80040bc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	089b      	lsrs	r3, r3, #2
 8004024:	f003 0301 	and.w	r3, r3, #1
 8004028:	2b00      	cmp	r3, #0
 800402a:	f000 80d6 	beq.w	80041da <HAL_I2C_EV_IRQHandler+0x2d6>
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	0a5b      	lsrs	r3, r3, #9
 8004032:	f003 0301 	and.w	r3, r3, #1
 8004036:	2b00      	cmp	r3, #0
 8004038:	f000 80cf 	beq.w	80041da <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800403c:	7bbb      	ldrb	r3, [r7, #14]
 800403e:	2b21      	cmp	r3, #33	; 0x21
 8004040:	d103      	bne.n	800404a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 fa7a 	bl	800453c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004048:	e0c7      	b.n	80041da <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800404a:	7bfb      	ldrb	r3, [r7, #15]
 800404c:	2b40      	cmp	r3, #64	; 0x40
 800404e:	f040 80c4 	bne.w	80041da <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 fae8 	bl	8004628 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004058:	e0bf      	b.n	80041da <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004064:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004068:	f000 80b7 	beq.w	80041da <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	099b      	lsrs	r3, r3, #6
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	2b00      	cmp	r3, #0
 8004076:	d00f      	beq.n	8004098 <HAL_I2C_EV_IRQHandler+0x194>
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	0a9b      	lsrs	r3, r3, #10
 800407c:	f003 0301 	and.w	r3, r3, #1
 8004080:	2b00      	cmp	r3, #0
 8004082:	d009      	beq.n	8004098 <HAL_I2C_EV_IRQHandler+0x194>
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	089b      	lsrs	r3, r3, #2
 8004088:	f003 0301 	and.w	r3, r3, #1
 800408c:	2b00      	cmp	r3, #0
 800408e:	d103      	bne.n	8004098 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f000 fb5d 	bl	8004750 <I2C_MasterReceive_RXNE>
 8004096:	e011      	b.n	80040bc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	089b      	lsrs	r3, r3, #2
 800409c:	f003 0301 	and.w	r3, r3, #1
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	f000 809a 	beq.w	80041da <HAL_I2C_EV_IRQHandler+0x2d6>
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	0a5b      	lsrs	r3, r3, #9
 80040aa:	f003 0301 	and.w	r3, r3, #1
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	f000 8093 	beq.w	80041da <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f000 fc06 	bl	80048c6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040ba:	e08e      	b.n	80041da <HAL_I2C_EV_IRQHandler+0x2d6>
 80040bc:	e08d      	b.n	80041da <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d004      	beq.n	80040d0 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	695b      	ldr	r3, [r3, #20]
 80040cc:	61fb      	str	r3, [r7, #28]
 80040ce:	e007      	b.n	80040e0 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	695b      	ldr	r3, [r3, #20]
 80040de:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	085b      	lsrs	r3, r3, #1
 80040e4:	f003 0301 	and.w	r3, r3, #1
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d012      	beq.n	8004112 <HAL_I2C_EV_IRQHandler+0x20e>
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	0a5b      	lsrs	r3, r3, #9
 80040f0:	f003 0301 	and.w	r3, r3, #1
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d00c      	beq.n	8004112 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d003      	beq.n	8004108 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004108:	69b9      	ldr	r1, [r7, #24]
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 ffc4 	bl	8005098 <I2C_Slave_ADDR>
 8004110:	e066      	b.n	80041e0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	091b      	lsrs	r3, r3, #4
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	2b00      	cmp	r3, #0
 800411c:	d009      	beq.n	8004132 <HAL_I2C_EV_IRQHandler+0x22e>
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	0a5b      	lsrs	r3, r3, #9
 8004122:	f003 0301 	and.w	r3, r3, #1
 8004126:	2b00      	cmp	r3, #0
 8004128:	d003      	beq.n	8004132 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 fffe 	bl	800512c <I2C_Slave_STOPF>
 8004130:	e056      	b.n	80041e0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004132:	7bbb      	ldrb	r3, [r7, #14]
 8004134:	2b21      	cmp	r3, #33	; 0x21
 8004136:	d002      	beq.n	800413e <HAL_I2C_EV_IRQHandler+0x23a>
 8004138:	7bbb      	ldrb	r3, [r7, #14]
 800413a:	2b29      	cmp	r3, #41	; 0x29
 800413c:	d125      	bne.n	800418a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	09db      	lsrs	r3, r3, #7
 8004142:	f003 0301 	and.w	r3, r3, #1
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00f      	beq.n	800416a <HAL_I2C_EV_IRQHandler+0x266>
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	0a9b      	lsrs	r3, r3, #10
 800414e:	f003 0301 	and.w	r3, r3, #1
 8004152:	2b00      	cmp	r3, #0
 8004154:	d009      	beq.n	800416a <HAL_I2C_EV_IRQHandler+0x266>
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	089b      	lsrs	r3, r3, #2
 800415a:	f003 0301 	and.w	r3, r3, #1
 800415e:	2b00      	cmp	r3, #0
 8004160:	d103      	bne.n	800416a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 feda 	bl	8004f1c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004168:	e039      	b.n	80041de <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	089b      	lsrs	r3, r3, #2
 800416e:	f003 0301 	and.w	r3, r3, #1
 8004172:	2b00      	cmp	r3, #0
 8004174:	d033      	beq.n	80041de <HAL_I2C_EV_IRQHandler+0x2da>
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	0a5b      	lsrs	r3, r3, #9
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	2b00      	cmp	r3, #0
 8004180:	d02d      	beq.n	80041de <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f000 ff07 	bl	8004f96 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004188:	e029      	b.n	80041de <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	099b      	lsrs	r3, r3, #6
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00f      	beq.n	80041b6 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	0a9b      	lsrs	r3, r3, #10
 800419a:	f003 0301 	and.w	r3, r3, #1
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d009      	beq.n	80041b6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	089b      	lsrs	r3, r3, #2
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d103      	bne.n	80041b6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 ff12 	bl	8004fd8 <I2C_SlaveReceive_RXNE>
 80041b4:	e014      	b.n	80041e0 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	089b      	lsrs	r3, r3, #2
 80041ba:	f003 0301 	and.w	r3, r3, #1
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00e      	beq.n	80041e0 <HAL_I2C_EV_IRQHandler+0x2dc>
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	0a5b      	lsrs	r3, r3, #9
 80041c6:	f003 0301 	and.w	r3, r3, #1
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d008      	beq.n	80041e0 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 ff40 	bl	8005054 <I2C_SlaveReceive_BTF>
 80041d4:	e004      	b.n	80041e0 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80041d6:	bf00      	nop
 80041d8:	e002      	b.n	80041e0 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041da:	bf00      	nop
 80041dc:	e000      	b.n	80041e0 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80041de:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80041e0:	3720      	adds	r7, #32
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}

080041e6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80041e6:	b580      	push	{r7, lr}
 80041e8:	b08a      	sub	sp, #40	; 0x28
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	695b      	ldr	r3, [r3, #20]
 80041f4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80041fe:	2300      	movs	r3, #0
 8004200:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004208:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800420a:	6a3b      	ldr	r3, [r7, #32]
 800420c:	0a1b      	lsrs	r3, r3, #8
 800420e:	f003 0301 	and.w	r3, r3, #1
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00e      	beq.n	8004234 <HAL_I2C_ER_IRQHandler+0x4e>
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	0a1b      	lsrs	r3, r3, #8
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	2b00      	cmp	r3, #0
 8004220:	d008      	beq.n	8004234 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004224:	f043 0301 	orr.w	r3, r3, #1
 8004228:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004232:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004234:	6a3b      	ldr	r3, [r7, #32]
 8004236:	0a5b      	lsrs	r3, r3, #9
 8004238:	f003 0301 	and.w	r3, r3, #1
 800423c:	2b00      	cmp	r3, #0
 800423e:	d00e      	beq.n	800425e <HAL_I2C_ER_IRQHandler+0x78>
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	0a1b      	lsrs	r3, r3, #8
 8004244:	f003 0301 	and.w	r3, r3, #1
 8004248:	2b00      	cmp	r3, #0
 800424a:	d008      	beq.n	800425e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800424c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424e:	f043 0302 	orr.w	r3, r3, #2
 8004252:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800425c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800425e:	6a3b      	ldr	r3, [r7, #32]
 8004260:	0a9b      	lsrs	r3, r3, #10
 8004262:	f003 0301 	and.w	r3, r3, #1
 8004266:	2b00      	cmp	r3, #0
 8004268:	d03f      	beq.n	80042ea <HAL_I2C_ER_IRQHandler+0x104>
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	0a1b      	lsrs	r3, r3, #8
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	2b00      	cmp	r3, #0
 8004274:	d039      	beq.n	80042ea <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8004276:	7efb      	ldrb	r3, [r7, #27]
 8004278:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800427e:	b29b      	uxth	r3, r3
 8004280:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004288:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004290:	7ebb      	ldrb	r3, [r7, #26]
 8004292:	2b20      	cmp	r3, #32
 8004294:	d112      	bne.n	80042bc <HAL_I2C_ER_IRQHandler+0xd6>
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d10f      	bne.n	80042bc <HAL_I2C_ER_IRQHandler+0xd6>
 800429c:	7cfb      	ldrb	r3, [r7, #19]
 800429e:	2b21      	cmp	r3, #33	; 0x21
 80042a0:	d008      	beq.n	80042b4 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80042a2:	7cfb      	ldrb	r3, [r7, #19]
 80042a4:	2b29      	cmp	r3, #41	; 0x29
 80042a6:	d005      	beq.n	80042b4 <HAL_I2C_ER_IRQHandler+0xce>
 80042a8:	7cfb      	ldrb	r3, [r7, #19]
 80042aa:	2b28      	cmp	r3, #40	; 0x28
 80042ac:	d106      	bne.n	80042bc <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2b21      	cmp	r3, #33	; 0x21
 80042b2:	d103      	bne.n	80042bc <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f001 f869 	bl	800538c <I2C_Slave_AF>
 80042ba:	e016      	b.n	80042ea <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80042c4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80042c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c8:	f043 0304 	orr.w	r3, r3, #4
 80042cc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80042ce:	7efb      	ldrb	r3, [r7, #27]
 80042d0:	2b10      	cmp	r3, #16
 80042d2:	d002      	beq.n	80042da <HAL_I2C_ER_IRQHandler+0xf4>
 80042d4:	7efb      	ldrb	r3, [r7, #27]
 80042d6:	2b40      	cmp	r3, #64	; 0x40
 80042d8:	d107      	bne.n	80042ea <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042e8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80042ea:	6a3b      	ldr	r3, [r7, #32]
 80042ec:	0adb      	lsrs	r3, r3, #11
 80042ee:	f003 0301 	and.w	r3, r3, #1
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d00e      	beq.n	8004314 <HAL_I2C_ER_IRQHandler+0x12e>
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	0a1b      	lsrs	r3, r3, #8
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d008      	beq.n	8004314 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004304:	f043 0308 	orr.w	r3, r3, #8
 8004308:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004312:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004316:	2b00      	cmp	r3, #0
 8004318:	d008      	beq.n	800432c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800431e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004320:	431a      	orrs	r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f001 f8a0 	bl	800546c <I2C_ITError>
  }
}
 800432c:	bf00      	nop
 800432e:	3728      	adds	r7, #40	; 0x28
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800433c:	bf00      	nop
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004350:	bf00      	nop
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004364:	bf00      	nop
 8004366:	370c      	adds	r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr

08004370 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004378:	bf00      	nop
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	460b      	mov	r3, r1
 800438e:	70fb      	strb	r3, [r7, #3]
 8004390:	4613      	mov	r3, r2
 8004392:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004394:	bf00      	nop
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80043a8:	bf00      	nop
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80043f8:	bf00      	nop
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004412:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800441a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004420:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004426:	2b00      	cmp	r3, #0
 8004428:	d150      	bne.n	80044cc <I2C_MasterTransmit_TXE+0xc8>
 800442a:	7bfb      	ldrb	r3, [r7, #15]
 800442c:	2b21      	cmp	r3, #33	; 0x21
 800442e:	d14d      	bne.n	80044cc <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	2b08      	cmp	r3, #8
 8004434:	d01d      	beq.n	8004472 <I2C_MasterTransmit_TXE+0x6e>
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	2b20      	cmp	r3, #32
 800443a:	d01a      	beq.n	8004472 <I2C_MasterTransmit_TXE+0x6e>
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004442:	d016      	beq.n	8004472 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	685a      	ldr	r2, [r3, #4]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004452:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2211      	movs	r2, #17
 8004458:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2220      	movs	r2, #32
 8004466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f7ff ff62 	bl	8004334 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004470:	e060      	b.n	8004534 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	685a      	ldr	r2, [r3, #4]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004480:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004490:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2220      	movs	r2, #32
 800449c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	2b40      	cmp	r3, #64	; 0x40
 80044aa:	d107      	bne.n	80044bc <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f7ff ff7d 	bl	80043b4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80044ba:	e03b      	b.n	8004534 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f7ff ff35 	bl	8004334 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80044ca:	e033      	b.n	8004534 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80044cc:	7bfb      	ldrb	r3, [r7, #15]
 80044ce:	2b21      	cmp	r3, #33	; 0x21
 80044d0:	d005      	beq.n	80044de <I2C_MasterTransmit_TXE+0xda>
 80044d2:	7bbb      	ldrb	r3, [r7, #14]
 80044d4:	2b40      	cmp	r3, #64	; 0x40
 80044d6:	d12d      	bne.n	8004534 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80044d8:	7bfb      	ldrb	r3, [r7, #15]
 80044da:	2b22      	cmp	r3, #34	; 0x22
 80044dc:	d12a      	bne.n	8004534 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d108      	bne.n	80044fa <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	685a      	ldr	r2, [r3, #4]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044f6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80044f8:	e01c      	b.n	8004534 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004500:	b2db      	uxtb	r3, r3
 8004502:	2b40      	cmp	r3, #64	; 0x40
 8004504:	d103      	bne.n	800450e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 f88e 	bl	8004628 <I2C_MemoryTransmit_TXE_BTF>
}
 800450c:	e012      	b.n	8004534 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004512:	781a      	ldrb	r2, [r3, #0]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451e:	1c5a      	adds	r2, r3, #1
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004528:	b29b      	uxth	r3, r3
 800452a:	3b01      	subs	r3, #1
 800452c:	b29a      	uxth	r2, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004532:	e7ff      	b.n	8004534 <I2C_MasterTransmit_TXE+0x130>
 8004534:	bf00      	nop
 8004536:	3710      	adds	r7, #16
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004548:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004550:	b2db      	uxtb	r3, r3
 8004552:	2b21      	cmp	r3, #33	; 0x21
 8004554:	d164      	bne.n	8004620 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800455a:	b29b      	uxth	r3, r3
 800455c:	2b00      	cmp	r3, #0
 800455e:	d012      	beq.n	8004586 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004564:	781a      	ldrb	r2, [r3, #0]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004570:	1c5a      	adds	r2, r3, #1
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800457a:	b29b      	uxth	r3, r3
 800457c:	3b01      	subs	r3, #1
 800457e:	b29a      	uxth	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004584:	e04c      	b.n	8004620 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2b08      	cmp	r3, #8
 800458a:	d01d      	beq.n	80045c8 <I2C_MasterTransmit_BTF+0x8c>
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2b20      	cmp	r3, #32
 8004590:	d01a      	beq.n	80045c8 <I2C_MasterTransmit_BTF+0x8c>
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004598:	d016      	beq.n	80045c8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	685a      	ldr	r2, [r3, #4]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80045a8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2211      	movs	r2, #17
 80045ae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2220      	movs	r2, #32
 80045bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f7ff feb7 	bl	8004334 <HAL_I2C_MasterTxCpltCallback>
}
 80045c6:	e02b      	b.n	8004620 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	685a      	ldr	r2, [r3, #4]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80045d6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045e6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2220      	movs	r2, #32
 80045f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	2b40      	cmp	r3, #64	; 0x40
 8004600:	d107      	bne.n	8004612 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f7ff fed2 	bl	80043b4 <HAL_I2C_MemTxCpltCallback>
}
 8004610:	e006      	b.n	8004620 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f7ff fe8a 	bl	8004334 <HAL_I2C_MasterTxCpltCallback>
}
 8004620:	bf00      	nop
 8004622:	3710      	adds	r7, #16
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004636:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800463c:	2b00      	cmp	r3, #0
 800463e:	d11d      	bne.n	800467c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004644:	2b01      	cmp	r3, #1
 8004646:	d10b      	bne.n	8004660 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800464c:	b2da      	uxtb	r2, r3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004658:	1c9a      	adds	r2, r3, #2
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800465e:	e073      	b.n	8004748 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004664:	b29b      	uxth	r3, r3
 8004666:	121b      	asrs	r3, r3, #8
 8004668:	b2da      	uxtb	r2, r3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004674:	1c5a      	adds	r2, r3, #1
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	651a      	str	r2, [r3, #80]	; 0x50
}
 800467a:	e065      	b.n	8004748 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004680:	2b01      	cmp	r3, #1
 8004682:	d10b      	bne.n	800469c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004688:	b2da      	uxtb	r2, r3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004694:	1c5a      	adds	r2, r3, #1
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	651a      	str	r2, [r3, #80]	; 0x50
}
 800469a:	e055      	b.n	8004748 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d151      	bne.n	8004748 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80046a4:	7bfb      	ldrb	r3, [r7, #15]
 80046a6:	2b22      	cmp	r3, #34	; 0x22
 80046a8:	d10d      	bne.n	80046c6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046b8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046be:	1c5a      	adds	r2, r3, #1
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80046c4:	e040      	b.n	8004748 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d015      	beq.n	80046fc <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80046d0:	7bfb      	ldrb	r3, [r7, #15]
 80046d2:	2b21      	cmp	r3, #33	; 0x21
 80046d4:	d112      	bne.n	80046fc <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046da:	781a      	ldrb	r2, [r3, #0]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e6:	1c5a      	adds	r2, r3, #1
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	3b01      	subs	r3, #1
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80046fa:	e025      	b.n	8004748 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004700:	b29b      	uxth	r3, r3
 8004702:	2b00      	cmp	r3, #0
 8004704:	d120      	bne.n	8004748 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004706:	7bfb      	ldrb	r3, [r7, #15]
 8004708:	2b21      	cmp	r3, #33	; 0x21
 800470a:	d11d      	bne.n	8004748 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	685a      	ldr	r2, [r3, #4]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800471a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800472a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2220      	movs	r2, #32
 8004736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f7ff fe36 	bl	80043b4 <HAL_I2C_MemTxCpltCallback>
}
 8004748:	bf00      	nop
 800474a:	3710      	adds	r7, #16
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800475e:	b2db      	uxtb	r3, r3
 8004760:	2b22      	cmp	r3, #34	; 0x22
 8004762:	f040 80ac 	bne.w	80048be <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800476a:	b29b      	uxth	r3, r3
 800476c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2b03      	cmp	r3, #3
 8004772:	d921      	bls.n	80047b8 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	691a      	ldr	r2, [r3, #16]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477e:	b2d2      	uxtb	r2, r2
 8004780:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004786:	1c5a      	adds	r2, r3, #1
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004790:	b29b      	uxth	r3, r3
 8004792:	3b01      	subs	r3, #1
 8004794:	b29a      	uxth	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800479e:	b29b      	uxth	r3, r3
 80047a0:	2b03      	cmp	r3, #3
 80047a2:	f040 808c 	bne.w	80048be <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	685a      	ldr	r2, [r3, #4]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047b4:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80047b6:	e082      	b.n	80048be <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d075      	beq.n	80048ac <I2C_MasterReceive_RXNE+0x15c>
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d002      	beq.n	80047cc <I2C_MasterReceive_RXNE+0x7c>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d16f      	bne.n	80048ac <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f001 fafd 	bl	8005dcc <I2C_WaitOnSTOPRequestThroughIT>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d142      	bne.n	800485e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047e6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	685a      	ldr	r2, [r3, #4]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80047f6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	691a      	ldr	r2, [r3, #16]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004802:	b2d2      	uxtb	r2, r2
 8004804:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480a:	1c5a      	adds	r2, r3, #1
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004814:	b29b      	uxth	r3, r3
 8004816:	3b01      	subs	r3, #1
 8004818:	b29a      	uxth	r2, r3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2220      	movs	r2, #32
 8004822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800482c:	b2db      	uxtb	r3, r3
 800482e:	2b40      	cmp	r3, #64	; 0x40
 8004830:	d10a      	bne.n	8004848 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f7ff fdc1 	bl	80043c8 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004846:	e03a      	b.n	80048be <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2212      	movs	r2, #18
 8004854:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f7ff fd76 	bl	8004348 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800485c:	e02f      	b.n	80048be <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	685a      	ldr	r2, [r3, #4]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800486c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	691a      	ldr	r2, [r3, #16]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004878:	b2d2      	uxtb	r2, r2
 800487a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004880:	1c5a      	adds	r2, r3, #1
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800488a:	b29b      	uxth	r3, r3
 800488c:	3b01      	subs	r3, #1
 800488e:	b29a      	uxth	r2, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2220      	movs	r2, #32
 8004898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f7ff fd99 	bl	80043dc <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80048aa:	e008      	b.n	80048be <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	685a      	ldr	r2, [r3, #4]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048ba:	605a      	str	r2, [r3, #4]
}
 80048bc:	e7ff      	b.n	80048be <I2C_MasterReceive_RXNE+0x16e>
 80048be:	bf00      	nop
 80048c0:	3710      	adds	r7, #16
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}

080048c6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80048c6:	b580      	push	{r7, lr}
 80048c8:	b084      	sub	sp, #16
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048d8:	b29b      	uxth	r3, r3
 80048da:	2b04      	cmp	r3, #4
 80048dc:	d11b      	bne.n	8004916 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	685a      	ldr	r2, [r3, #4]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048ec:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	691a      	ldr	r2, [r3, #16]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f8:	b2d2      	uxtb	r2, r2
 80048fa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004900:	1c5a      	adds	r2, r3, #1
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800490a:	b29b      	uxth	r3, r3
 800490c:	3b01      	subs	r3, #1
 800490e:	b29a      	uxth	r2, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004914:	e0bd      	b.n	8004a92 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800491a:	b29b      	uxth	r3, r3
 800491c:	2b03      	cmp	r3, #3
 800491e:	d129      	bne.n	8004974 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	685a      	ldr	r2, [r3, #4]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800492e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2b04      	cmp	r3, #4
 8004934:	d00a      	beq.n	800494c <I2C_MasterReceive_BTF+0x86>
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2b02      	cmp	r3, #2
 800493a:	d007      	beq.n	800494c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800494a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	691a      	ldr	r2, [r3, #16]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004956:	b2d2      	uxtb	r2, r2
 8004958:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495e:	1c5a      	adds	r2, r3, #1
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004968:	b29b      	uxth	r3, r3
 800496a:	3b01      	subs	r3, #1
 800496c:	b29a      	uxth	r2, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004972:	e08e      	b.n	8004a92 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004978:	b29b      	uxth	r3, r3
 800497a:	2b02      	cmp	r3, #2
 800497c:	d176      	bne.n	8004a6c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2b01      	cmp	r3, #1
 8004982:	d002      	beq.n	800498a <I2C_MasterReceive_BTF+0xc4>
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2b10      	cmp	r3, #16
 8004988:	d108      	bne.n	800499c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004998:	601a      	str	r2, [r3, #0]
 800499a:	e019      	b.n	80049d0 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2b04      	cmp	r3, #4
 80049a0:	d002      	beq.n	80049a8 <I2C_MasterReceive_BTF+0xe2>
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d108      	bne.n	80049ba <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80049b6:	601a      	str	r2, [r3, #0]
 80049b8:	e00a      	b.n	80049d0 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2b10      	cmp	r3, #16
 80049be:	d007      	beq.n	80049d0 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049ce:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	691a      	ldr	r2, [r3, #16]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049da:	b2d2      	uxtb	r2, r2
 80049dc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e2:	1c5a      	adds	r2, r3, #1
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	3b01      	subs	r3, #1
 80049f0:	b29a      	uxth	r2, r3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	691a      	ldr	r2, [r3, #16]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a00:	b2d2      	uxtb	r2, r2
 8004a02:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a08:	1c5a      	adds	r2, r3, #1
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	3b01      	subs	r3, #1
 8004a16:	b29a      	uxth	r2, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	685a      	ldr	r2, [r3, #4]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004a2a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2220      	movs	r2, #32
 8004a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	2b40      	cmp	r3, #64	; 0x40
 8004a3e:	d10a      	bne.n	8004a56 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f7ff fcba 	bl	80043c8 <HAL_I2C_MemRxCpltCallback>
}
 8004a54:	e01d      	b.n	8004a92 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2212      	movs	r2, #18
 8004a62:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f7ff fc6f 	bl	8004348 <HAL_I2C_MasterRxCpltCallback>
}
 8004a6a:	e012      	b.n	8004a92 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	691a      	ldr	r2, [r3, #16]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a76:	b2d2      	uxtb	r2, r2
 8004a78:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7e:	1c5a      	adds	r2, r3, #1
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	3b01      	subs	r3, #1
 8004a8c:	b29a      	uxth	r2, r3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004a92:	bf00      	nop
 8004a94:	3710      	adds	r7, #16
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}

08004a9a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004a9a:	b480      	push	{r7}
 8004a9c:	b083      	sub	sp, #12
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	2b40      	cmp	r3, #64	; 0x40
 8004aac:	d117      	bne.n	8004ade <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d109      	bne.n	8004aca <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	461a      	mov	r2, r3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ac6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004ac8:	e067      	b.n	8004b9a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	f043 0301 	orr.w	r3, r3, #1
 8004ad4:	b2da      	uxtb	r2, r3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	611a      	str	r2, [r3, #16]
}
 8004adc:	e05d      	b.n	8004b9a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ae6:	d133      	bne.n	8004b50 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	2b21      	cmp	r3, #33	; 0x21
 8004af2:	d109      	bne.n	8004b08 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	461a      	mov	r2, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b04:	611a      	str	r2, [r3, #16]
 8004b06:	e008      	b.n	8004b1a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	f043 0301 	orr.w	r3, r3, #1
 8004b12:	b2da      	uxtb	r2, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d004      	beq.n	8004b2c <I2C_Master_SB+0x92>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d108      	bne.n	8004b3e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d032      	beq.n	8004b9a <I2C_Master_SB+0x100>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d02d      	beq.n	8004b9a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	685a      	ldr	r2, [r3, #4]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b4c:	605a      	str	r2, [r3, #4]
}
 8004b4e:	e024      	b.n	8004b9a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d10e      	bne.n	8004b76 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	11db      	asrs	r3, r3, #7
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	f003 0306 	and.w	r3, r3, #6
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	f063 030f 	orn	r3, r3, #15
 8004b6c:	b2da      	uxtb	r2, r3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	611a      	str	r2, [r3, #16]
}
 8004b74:	e011      	b.n	8004b9a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d10d      	bne.n	8004b9a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	11db      	asrs	r3, r3, #7
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	f003 0306 	and.w	r3, r3, #6
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	f063 030e 	orn	r3, r3, #14
 8004b92:	b2da      	uxtb	r2, r3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	611a      	str	r2, [r3, #16]
}
 8004b9a:	bf00      	nop
 8004b9c:	370c      	adds	r7, #12
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr

08004ba6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004ba6:	b480      	push	{r7}
 8004ba8:	b083      	sub	sp, #12
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bb2:	b2da      	uxtb	r2, r3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d004      	beq.n	8004bcc <I2C_Master_ADD10+0x26>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d108      	bne.n	8004bde <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d00c      	beq.n	8004bee <I2C_Master_ADD10+0x48>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d007      	beq.n	8004bee <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	685a      	ldr	r2, [r3, #4]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bec:	605a      	str	r2, [r3, #4]
  }
}
 8004bee:	bf00      	nop
 8004bf0:	370c      	adds	r7, #12
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr

08004bfa <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004bfa:	b480      	push	{r7}
 8004bfc:	b091      	sub	sp, #68	; 0x44
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c08:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c10:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c16:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	2b22      	cmp	r3, #34	; 0x22
 8004c22:	f040 8169 	bne.w	8004ef8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d10f      	bne.n	8004c4e <I2C_Master_ADDR+0x54>
 8004c2e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004c32:	2b40      	cmp	r3, #64	; 0x40
 8004c34:	d10b      	bne.n	8004c4e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c36:	2300      	movs	r3, #0
 8004c38:	633b      	str	r3, [r7, #48]	; 0x30
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	695b      	ldr	r3, [r3, #20]
 8004c40:	633b      	str	r3, [r7, #48]	; 0x30
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	699b      	ldr	r3, [r3, #24]
 8004c48:	633b      	str	r3, [r7, #48]	; 0x30
 8004c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4c:	e160      	b.n	8004f10 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d11d      	bne.n	8004c92 <I2C_Master_ADDR+0x98>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004c5e:	d118      	bne.n	8004c92 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c60:	2300      	movs	r3, #0
 8004c62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	695b      	ldr	r3, [r3, #20]
 8004c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c84:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c8a:	1c5a      	adds	r2, r3, #1
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	651a      	str	r2, [r3, #80]	; 0x50
 8004c90:	e13e      	b.n	8004f10 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d113      	bne.n	8004cc4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	695b      	ldr	r3, [r3, #20]
 8004ca6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	699b      	ldr	r3, [r3, #24]
 8004cae:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cc0:	601a      	str	r2, [r3, #0]
 8004cc2:	e115      	b.n	8004ef0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	f040 808a 	bne.w	8004de4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004cd6:	d137      	bne.n	8004d48 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ce6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cf2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cf6:	d113      	bne.n	8004d20 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d06:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d08:	2300      	movs	r3, #0
 8004d0a:	627b      	str	r3, [r7, #36]	; 0x24
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	695b      	ldr	r3, [r3, #20]
 8004d12:	627b      	str	r3, [r7, #36]	; 0x24
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	699b      	ldr	r3, [r3, #24]
 8004d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8004d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1e:	e0e7      	b.n	8004ef0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d20:	2300      	movs	r3, #0
 8004d22:	623b      	str	r3, [r7, #32]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	695b      	ldr	r3, [r3, #20]
 8004d2a:	623b      	str	r3, [r7, #32]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	699b      	ldr	r3, [r3, #24]
 8004d32:	623b      	str	r3, [r7, #32]
 8004d34:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d44:	601a      	str	r2, [r3, #0]
 8004d46:	e0d3      	b.n	8004ef0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d4a:	2b08      	cmp	r3, #8
 8004d4c:	d02e      	beq.n	8004dac <I2C_Master_ADDR+0x1b2>
 8004d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d50:	2b20      	cmp	r3, #32
 8004d52:	d02b      	beq.n	8004dac <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d56:	2b12      	cmp	r3, #18
 8004d58:	d102      	bne.n	8004d60 <I2C_Master_ADDR+0x166>
 8004d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d125      	bne.n	8004dac <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d62:	2b04      	cmp	r3, #4
 8004d64:	d00e      	beq.n	8004d84 <I2C_Master_ADDR+0x18a>
 8004d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d00b      	beq.n	8004d84 <I2C_Master_ADDR+0x18a>
 8004d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d6e:	2b10      	cmp	r3, #16
 8004d70:	d008      	beq.n	8004d84 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d80:	601a      	str	r2, [r3, #0]
 8004d82:	e007      	b.n	8004d94 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d92:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d94:	2300      	movs	r3, #0
 8004d96:	61fb      	str	r3, [r7, #28]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	695b      	ldr	r3, [r3, #20]
 8004d9e:	61fb      	str	r3, [r7, #28]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	699b      	ldr	r3, [r3, #24]
 8004da6:	61fb      	str	r3, [r7, #28]
 8004da8:	69fb      	ldr	r3, [r7, #28]
 8004daa:	e0a1      	b.n	8004ef0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dba:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	61bb      	str	r3, [r7, #24]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	61bb      	str	r3, [r7, #24]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	699b      	ldr	r3, [r3, #24]
 8004dce:	61bb      	str	r3, [r7, #24]
 8004dd0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004de0:	601a      	str	r2, [r3, #0]
 8004de2:	e085      	b.n	8004ef0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	2b02      	cmp	r3, #2
 8004dec:	d14d      	bne.n	8004e8a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df0:	2b04      	cmp	r3, #4
 8004df2:	d016      	beq.n	8004e22 <I2C_Master_ADDR+0x228>
 8004df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d013      	beq.n	8004e22 <I2C_Master_ADDR+0x228>
 8004dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dfc:	2b10      	cmp	r3, #16
 8004dfe:	d010      	beq.n	8004e22 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e0e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e1e:	601a      	str	r2, [r3, #0]
 8004e20:	e007      	b.n	8004e32 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e30:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e40:	d117      	bne.n	8004e72 <I2C_Master_ADDR+0x278>
 8004e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e44:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004e48:	d00b      	beq.n	8004e62 <I2C_Master_ADDR+0x268>
 8004e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d008      	beq.n	8004e62 <I2C_Master_ADDR+0x268>
 8004e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e52:	2b08      	cmp	r3, #8
 8004e54:	d005      	beq.n	8004e62 <I2C_Master_ADDR+0x268>
 8004e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e58:	2b10      	cmp	r3, #16
 8004e5a:	d002      	beq.n	8004e62 <I2C_Master_ADDR+0x268>
 8004e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e5e:	2b20      	cmp	r3, #32
 8004e60:	d107      	bne.n	8004e72 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	685a      	ldr	r2, [r3, #4]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e70:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e72:	2300      	movs	r3, #0
 8004e74:	617b      	str	r3, [r7, #20]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	695b      	ldr	r3, [r3, #20]
 8004e7c:	617b      	str	r3, [r7, #20]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	699b      	ldr	r3, [r3, #24]
 8004e84:	617b      	str	r3, [r7, #20]
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	e032      	b.n	8004ef0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e98:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ea4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ea8:	d117      	bne.n	8004eda <I2C_Master_ADDR+0x2e0>
 8004eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004eb0:	d00b      	beq.n	8004eca <I2C_Master_ADDR+0x2d0>
 8004eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d008      	beq.n	8004eca <I2C_Master_ADDR+0x2d0>
 8004eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eba:	2b08      	cmp	r3, #8
 8004ebc:	d005      	beq.n	8004eca <I2C_Master_ADDR+0x2d0>
 8004ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec0:	2b10      	cmp	r3, #16
 8004ec2:	d002      	beq.n	8004eca <I2C_Master_ADDR+0x2d0>
 8004ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec6:	2b20      	cmp	r3, #32
 8004ec8:	d107      	bne.n	8004eda <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	685a      	ldr	r2, [r3, #4]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ed8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004eda:	2300      	movs	r3, #0
 8004edc:	613b      	str	r3, [r7, #16]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	695b      	ldr	r3, [r3, #20]
 8004ee4:	613b      	str	r3, [r7, #16]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	699b      	ldr	r3, [r3, #24]
 8004eec:	613b      	str	r3, [r7, #16]
 8004eee:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004ef6:	e00b      	b.n	8004f10 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ef8:	2300      	movs	r3, #0
 8004efa:	60fb      	str	r3, [r7, #12]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	695b      	ldr	r3, [r3, #20]
 8004f02:	60fb      	str	r3, [r7, #12]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	699b      	ldr	r3, [r3, #24]
 8004f0a:	60fb      	str	r3, [r7, #12]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
}
 8004f0e:	e7ff      	b.n	8004f10 <I2C_Master_ADDR+0x316>
 8004f10:	bf00      	nop
 8004f12:	3744      	adds	r7, #68	; 0x44
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f2a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d02b      	beq.n	8004f8e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3a:	781a      	ldrb	r2, [r3, #0]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f46:	1c5a      	adds	r2, r3, #1
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	3b01      	subs	r3, #1
 8004f54:	b29a      	uxth	r2, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d114      	bne.n	8004f8e <I2C_SlaveTransmit_TXE+0x72>
 8004f64:	7bfb      	ldrb	r3, [r7, #15]
 8004f66:	2b29      	cmp	r3, #41	; 0x29
 8004f68:	d111      	bne.n	8004f8e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	685a      	ldr	r2, [r3, #4]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f78:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2221      	movs	r2, #33	; 0x21
 8004f7e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2228      	movs	r2, #40	; 0x28
 8004f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f7ff f9e7 	bl	800435c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004f8e:	bf00      	nop
 8004f90:	3710      	adds	r7, #16
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}

08004f96 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004f96:	b480      	push	{r7}
 8004f98:	b083      	sub	sp, #12
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d011      	beq.n	8004fcc <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fac:	781a      	ldrb	r2, [r3, #0]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb8:	1c5a      	adds	r2, r3, #1
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	b29a      	uxth	r2, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004fcc:	bf00      	nop
 8004fce:	370c      	adds	r7, #12
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr

08004fd8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fe6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d02c      	beq.n	800504c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	691a      	ldr	r2, [r3, #16]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffc:	b2d2      	uxtb	r2, r2
 8004ffe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005004:	1c5a      	adds	r2, r3, #1
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800500e:	b29b      	uxth	r3, r3
 8005010:	3b01      	subs	r3, #1
 8005012:	b29a      	uxth	r2, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800501c:	b29b      	uxth	r3, r3
 800501e:	2b00      	cmp	r3, #0
 8005020:	d114      	bne.n	800504c <I2C_SlaveReceive_RXNE+0x74>
 8005022:	7bfb      	ldrb	r3, [r7, #15]
 8005024:	2b2a      	cmp	r3, #42	; 0x2a
 8005026:	d111      	bne.n	800504c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	685a      	ldr	r2, [r3, #4]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005036:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2222      	movs	r2, #34	; 0x22
 800503c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2228      	movs	r2, #40	; 0x28
 8005042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f7ff f992 	bl	8004370 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800504c:	bf00      	nop
 800504e:	3710      	adds	r7, #16
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005060:	b29b      	uxth	r3, r3
 8005062:	2b00      	cmp	r3, #0
 8005064:	d012      	beq.n	800508c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	691a      	ldr	r2, [r3, #16]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005070:	b2d2      	uxtb	r2, r2
 8005072:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005078:	1c5a      	adds	r2, r3, #1
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005082:	b29b      	uxth	r3, r3
 8005084:	3b01      	subs	r3, #1
 8005086:	b29a      	uxth	r2, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800508c:	bf00      	nop
 800508e:	370c      	adds	r7, #12
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr

08005098 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80050a2:	2300      	movs	r3, #0
 80050a4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80050b2:	2b28      	cmp	r3, #40	; 0x28
 80050b4:	d127      	bne.n	8005106 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	685a      	ldr	r2, [r3, #4]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050c4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	089b      	lsrs	r3, r3, #2
 80050ca:	f003 0301 	and.w	r3, r3, #1
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d101      	bne.n	80050d6 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80050d2:	2301      	movs	r3, #1
 80050d4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	09db      	lsrs	r3, r3, #7
 80050da:	f003 0301 	and.w	r3, r3, #1
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d103      	bne.n	80050ea <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	81bb      	strh	r3, [r7, #12]
 80050e8:	e002      	b.n	80050f0 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	699b      	ldr	r3, [r3, #24]
 80050ee:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80050f8:	89ba      	ldrh	r2, [r7, #12]
 80050fa:	7bfb      	ldrb	r3, [r7, #15]
 80050fc:	4619      	mov	r1, r3
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f7ff f940 	bl	8004384 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005104:	e00e      	b.n	8005124 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005106:	2300      	movs	r3, #0
 8005108:	60bb      	str	r3, [r7, #8]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	695b      	ldr	r3, [r3, #20]
 8005110:	60bb      	str	r3, [r7, #8]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	699b      	ldr	r3, [r3, #24]
 8005118:	60bb      	str	r3, [r7, #8]
 800511a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005124:	bf00      	nop
 8005126:	3710      	adds	r7, #16
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800513a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	685a      	ldr	r2, [r3, #4]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800514a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800514c:	2300      	movs	r3, #0
 800514e:	60bb      	str	r3, [r7, #8]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	695b      	ldr	r3, [r3, #20]
 8005156:	60bb      	str	r3, [r7, #8]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f042 0201 	orr.w	r2, r2, #1
 8005166:	601a      	str	r2, [r3, #0]
 8005168:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005178:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005184:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005188:	d172      	bne.n	8005270 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800518a:	7bfb      	ldrb	r3, [r7, #15]
 800518c:	2b22      	cmp	r3, #34	; 0x22
 800518e:	d002      	beq.n	8005196 <I2C_Slave_STOPF+0x6a>
 8005190:	7bfb      	ldrb	r3, [r7, #15]
 8005192:	2b2a      	cmp	r3, #42	; 0x2a
 8005194:	d135      	bne.n	8005202 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	b29a      	uxth	r2, r3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d005      	beq.n	80051ba <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b2:	f043 0204 	orr.w	r2, r3, #4
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	685a      	ldr	r2, [r3, #4]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051c8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ce:	4618      	mov	r0, r3
 80051d0:	f7fd fdb4 	bl	8002d3c <HAL_DMA_GetState>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d049      	beq.n	800526e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051de:	4a69      	ldr	r2, [pc, #420]	; (8005384 <I2C_Slave_STOPF+0x258>)
 80051e0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e6:	4618      	mov	r0, r3
 80051e8:	f7fd fbfc 	bl	80029e4 <HAL_DMA_Abort_IT>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d03d      	beq.n	800526e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80051fc:	4610      	mov	r0, r2
 80051fe:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005200:	e035      	b.n	800526e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	b29a      	uxth	r2, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005214:	b29b      	uxth	r3, r3
 8005216:	2b00      	cmp	r3, #0
 8005218:	d005      	beq.n	8005226 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521e:	f043 0204 	orr.w	r2, r3, #4
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	685a      	ldr	r2, [r3, #4]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005234:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800523a:	4618      	mov	r0, r3
 800523c:	f7fd fd7e 	bl	8002d3c <HAL_DMA_GetState>
 8005240:	4603      	mov	r3, r0
 8005242:	2b01      	cmp	r3, #1
 8005244:	d014      	beq.n	8005270 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800524a:	4a4e      	ldr	r2, [pc, #312]	; (8005384 <I2C_Slave_STOPF+0x258>)
 800524c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005252:	4618      	mov	r0, r3
 8005254:	f7fd fbc6 	bl	80029e4 <HAL_DMA_Abort_IT>
 8005258:	4603      	mov	r3, r0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d008      	beq.n	8005270 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005262:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005268:	4610      	mov	r0, r2
 800526a:	4798      	blx	r3
 800526c:	e000      	b.n	8005270 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800526e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005274:	b29b      	uxth	r3, r3
 8005276:	2b00      	cmp	r3, #0
 8005278:	d03e      	beq.n	80052f8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	695b      	ldr	r3, [r3, #20]
 8005280:	f003 0304 	and.w	r3, r3, #4
 8005284:	2b04      	cmp	r3, #4
 8005286:	d112      	bne.n	80052ae <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	691a      	ldr	r2, [r3, #16]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005292:	b2d2      	uxtb	r2, r2
 8005294:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529a:	1c5a      	adds	r2, r3, #1
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	3b01      	subs	r3, #1
 80052a8:	b29a      	uxth	r2, r3
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	695b      	ldr	r3, [r3, #20]
 80052b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052b8:	2b40      	cmp	r3, #64	; 0x40
 80052ba:	d112      	bne.n	80052e2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	691a      	ldr	r2, [r3, #16]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c6:	b2d2      	uxtb	r2, r2
 80052c8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ce:	1c5a      	adds	r2, r3, #1
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052d8:	b29b      	uxth	r3, r3
 80052da:	3b01      	subs	r3, #1
 80052dc:	b29a      	uxth	r2, r3
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d005      	beq.n	80052f8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f0:	f043 0204 	orr.w	r2, r3, #4
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d003      	beq.n	8005308 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f000 f8b3 	bl	800546c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005306:	e039      	b.n	800537c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005308:	7bfb      	ldrb	r3, [r7, #15]
 800530a:	2b2a      	cmp	r3, #42	; 0x2a
 800530c:	d109      	bne.n	8005322 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2228      	movs	r2, #40	; 0x28
 8005318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f7ff f827 	bl	8004370 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005328:	b2db      	uxtb	r3, r3
 800532a:	2b28      	cmp	r3, #40	; 0x28
 800532c:	d111      	bne.n	8005352 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a15      	ldr	r2, [pc, #84]	; (8005388 <I2C_Slave_STOPF+0x25c>)
 8005332:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2220      	movs	r2, #32
 800533e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f7ff f828 	bl	80043a0 <HAL_I2C_ListenCpltCallback>
}
 8005350:	e014      	b.n	800537c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005356:	2b22      	cmp	r3, #34	; 0x22
 8005358:	d002      	beq.n	8005360 <I2C_Slave_STOPF+0x234>
 800535a:	7bfb      	ldrb	r3, [r7, #15]
 800535c:	2b22      	cmp	r3, #34	; 0x22
 800535e:	d10d      	bne.n	800537c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2220      	movs	r2, #32
 800536a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f7fe fffa 	bl	8004370 <HAL_I2C_SlaveRxCpltCallback>
}
 800537c:	bf00      	nop
 800537e:	3710      	adds	r7, #16
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}
 8005384:	080059cd 	.word	0x080059cd
 8005388:	ffff0000 	.word	0xffff0000

0800538c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800539a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	2b08      	cmp	r3, #8
 80053a6:	d002      	beq.n	80053ae <I2C_Slave_AF+0x22>
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	2b20      	cmp	r3, #32
 80053ac:	d129      	bne.n	8005402 <I2C_Slave_AF+0x76>
 80053ae:	7bfb      	ldrb	r3, [r7, #15]
 80053b0:	2b28      	cmp	r3, #40	; 0x28
 80053b2:	d126      	bne.n	8005402 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4a2c      	ldr	r2, [pc, #176]	; (8005468 <I2C_Slave_AF+0xdc>)
 80053b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	685a      	ldr	r2, [r3, #4]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80053c8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80053d2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053e2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2220      	movs	r2, #32
 80053ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f7fe ffd0 	bl	80043a0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005400:	e02e      	b.n	8005460 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005402:	7bfb      	ldrb	r3, [r7, #15]
 8005404:	2b21      	cmp	r3, #33	; 0x21
 8005406:	d126      	bne.n	8005456 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	4a17      	ldr	r2, [pc, #92]	; (8005468 <I2C_Slave_AF+0xdc>)
 800540c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2221      	movs	r2, #33	; 0x21
 8005412:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2220      	movs	r2, #32
 8005418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	685a      	ldr	r2, [r3, #4]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005432:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800543c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800544c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f7fe ff84 	bl	800435c <HAL_I2C_SlaveTxCpltCallback>
}
 8005454:	e004      	b.n	8005460 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800545e:	615a      	str	r2, [r3, #20]
}
 8005460:	bf00      	nop
 8005462:	3710      	adds	r7, #16
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}
 8005468:	ffff0000 	.word	0xffff0000

0800546c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800547a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005482:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005484:	7bbb      	ldrb	r3, [r7, #14]
 8005486:	2b10      	cmp	r3, #16
 8005488:	d002      	beq.n	8005490 <I2C_ITError+0x24>
 800548a:	7bbb      	ldrb	r3, [r7, #14]
 800548c:	2b40      	cmp	r3, #64	; 0x40
 800548e:	d10a      	bne.n	80054a6 <I2C_ITError+0x3a>
 8005490:	7bfb      	ldrb	r3, [r7, #15]
 8005492:	2b22      	cmp	r3, #34	; 0x22
 8005494:	d107      	bne.n	80054a6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054a4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80054a6:	7bfb      	ldrb	r3, [r7, #15]
 80054a8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80054ac:	2b28      	cmp	r3, #40	; 0x28
 80054ae:	d107      	bne.n	80054c0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2228      	movs	r2, #40	; 0x28
 80054ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80054be:	e015      	b.n	80054ec <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054ce:	d00a      	beq.n	80054e6 <I2C_ITError+0x7a>
 80054d0:	7bfb      	ldrb	r3, [r7, #15]
 80054d2:	2b60      	cmp	r3, #96	; 0x60
 80054d4:	d007      	beq.n	80054e6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2220      	movs	r2, #32
 80054da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054fa:	d162      	bne.n	80055c2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	685a      	ldr	r2, [r3, #4]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800550a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005510:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005514:	b2db      	uxtb	r3, r3
 8005516:	2b01      	cmp	r3, #1
 8005518:	d020      	beq.n	800555c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800551e:	4a6a      	ldr	r2, [pc, #424]	; (80056c8 <I2C_ITError+0x25c>)
 8005520:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005526:	4618      	mov	r0, r3
 8005528:	f7fd fa5c 	bl	80029e4 <HAL_DMA_Abort_IT>
 800552c:	4603      	mov	r3, r0
 800552e:	2b00      	cmp	r3, #0
 8005530:	f000 8089 	beq.w	8005646 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f022 0201 	bic.w	r2, r2, #1
 8005542:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2220      	movs	r2, #32
 8005548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005550:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005556:	4610      	mov	r0, r2
 8005558:	4798      	blx	r3
 800555a:	e074      	b.n	8005646 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005560:	4a59      	ldr	r2, [pc, #356]	; (80056c8 <I2C_ITError+0x25c>)
 8005562:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005568:	4618      	mov	r0, r3
 800556a:	f7fd fa3b 	bl	80029e4 <HAL_DMA_Abort_IT>
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d068      	beq.n	8005646 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	695b      	ldr	r3, [r3, #20]
 800557a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800557e:	2b40      	cmp	r3, #64	; 0x40
 8005580:	d10b      	bne.n	800559a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	691a      	ldr	r2, [r3, #16]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558c:	b2d2      	uxtb	r2, r2
 800558e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005594:	1c5a      	adds	r2, r3, #1
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f022 0201 	bic.w	r2, r2, #1
 80055a8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2220      	movs	r2, #32
 80055ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80055bc:	4610      	mov	r0, r2
 80055be:	4798      	blx	r3
 80055c0:	e041      	b.n	8005646 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	2b60      	cmp	r3, #96	; 0x60
 80055cc:	d125      	bne.n	800561a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2220      	movs	r2, #32
 80055d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	695b      	ldr	r3, [r3, #20]
 80055e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055e6:	2b40      	cmp	r3, #64	; 0x40
 80055e8:	d10b      	bne.n	8005602 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	691a      	ldr	r2, [r3, #16]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f4:	b2d2      	uxtb	r2, r2
 80055f6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fc:	1c5a      	adds	r2, r3, #1
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f022 0201 	bic.w	r2, r2, #1
 8005610:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f7fe feec 	bl	80043f0 <HAL_I2C_AbortCpltCallback>
 8005618:	e015      	b.n	8005646 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	695b      	ldr	r3, [r3, #20]
 8005620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005624:	2b40      	cmp	r3, #64	; 0x40
 8005626:	d10b      	bne.n	8005640 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	691a      	ldr	r2, [r3, #16]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005632:	b2d2      	uxtb	r2, r2
 8005634:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563a:	1c5a      	adds	r2, r3, #1
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f7fe fecb 	bl	80043dc <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800564a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	f003 0301 	and.w	r3, r3, #1
 8005652:	2b00      	cmp	r3, #0
 8005654:	d10e      	bne.n	8005674 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800565c:	2b00      	cmp	r3, #0
 800565e:	d109      	bne.n	8005674 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005666:	2b00      	cmp	r3, #0
 8005668:	d104      	bne.n	8005674 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005670:	2b00      	cmp	r3, #0
 8005672:	d007      	beq.n	8005684 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	685a      	ldr	r2, [r3, #4]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005682:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800568a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005690:	f003 0304 	and.w	r3, r3, #4
 8005694:	2b04      	cmp	r3, #4
 8005696:	d113      	bne.n	80056c0 <I2C_ITError+0x254>
 8005698:	7bfb      	ldrb	r3, [r7, #15]
 800569a:	2b28      	cmp	r3, #40	; 0x28
 800569c:	d110      	bne.n	80056c0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a0a      	ldr	r2, [pc, #40]	; (80056cc <I2C_ITError+0x260>)
 80056a2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2220      	movs	r2, #32
 80056ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f7fe fe70 	bl	80043a0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80056c0:	bf00      	nop
 80056c2:	3710      	adds	r7, #16
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	080059cd 	.word	0x080059cd
 80056cc:	ffff0000 	.word	0xffff0000

080056d0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b088      	sub	sp, #32
 80056d4:	af02      	add	r7, sp, #8
 80056d6:	60f8      	str	r0, [r7, #12]
 80056d8:	4608      	mov	r0, r1
 80056da:	4611      	mov	r1, r2
 80056dc:	461a      	mov	r2, r3
 80056de:	4603      	mov	r3, r0
 80056e0:	817b      	strh	r3, [r7, #10]
 80056e2:	460b      	mov	r3, r1
 80056e4:	813b      	strh	r3, [r7, #8]
 80056e6:	4613      	mov	r3, r2
 80056e8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056f8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80056fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fc:	9300      	str	r3, [sp, #0]
 80056fe:	6a3b      	ldr	r3, [r7, #32]
 8005700:	2200      	movs	r2, #0
 8005702:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005706:	68f8      	ldr	r0, [r7, #12]
 8005708:	f000 fa08 	bl	8005b1c <I2C_WaitOnFlagUntilTimeout>
 800570c:	4603      	mov	r3, r0
 800570e:	2b00      	cmp	r3, #0
 8005710:	d00d      	beq.n	800572e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800571c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005720:	d103      	bne.n	800572a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005728:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800572a:	2303      	movs	r3, #3
 800572c:	e05f      	b.n	80057ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800572e:	897b      	ldrh	r3, [r7, #10]
 8005730:	b2db      	uxtb	r3, r3
 8005732:	461a      	mov	r2, r3
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800573c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800573e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005740:	6a3a      	ldr	r2, [r7, #32]
 8005742:	492d      	ldr	r1, [pc, #180]	; (80057f8 <I2C_RequestMemoryWrite+0x128>)
 8005744:	68f8      	ldr	r0, [r7, #12]
 8005746:	f000 fa40 	bl	8005bca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800574a:	4603      	mov	r3, r0
 800574c:	2b00      	cmp	r3, #0
 800574e:	d001      	beq.n	8005754 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	e04c      	b.n	80057ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005754:	2300      	movs	r3, #0
 8005756:	617b      	str	r3, [r7, #20]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	695b      	ldr	r3, [r3, #20]
 800575e:	617b      	str	r3, [r7, #20]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	699b      	ldr	r3, [r3, #24]
 8005766:	617b      	str	r3, [r7, #20]
 8005768:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800576a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800576c:	6a39      	ldr	r1, [r7, #32]
 800576e:	68f8      	ldr	r0, [r7, #12]
 8005770:	f000 faaa 	bl	8005cc8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d00d      	beq.n	8005796 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577e:	2b04      	cmp	r3, #4
 8005780:	d107      	bne.n	8005792 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005790:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e02b      	b.n	80057ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005796:	88fb      	ldrh	r3, [r7, #6]
 8005798:	2b01      	cmp	r3, #1
 800579a:	d105      	bne.n	80057a8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800579c:	893b      	ldrh	r3, [r7, #8]
 800579e:	b2da      	uxtb	r2, r3
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	611a      	str	r2, [r3, #16]
 80057a6:	e021      	b.n	80057ec <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80057a8:	893b      	ldrh	r3, [r7, #8]
 80057aa:	0a1b      	lsrs	r3, r3, #8
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	b2da      	uxtb	r2, r3
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057b8:	6a39      	ldr	r1, [r7, #32]
 80057ba:	68f8      	ldr	r0, [r7, #12]
 80057bc:	f000 fa84 	bl	8005cc8 <I2C_WaitOnTXEFlagUntilTimeout>
 80057c0:	4603      	mov	r3, r0
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d00d      	beq.n	80057e2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ca:	2b04      	cmp	r3, #4
 80057cc:	d107      	bne.n	80057de <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057dc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	e005      	b.n	80057ee <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80057e2:	893b      	ldrh	r3, [r7, #8]
 80057e4:	b2da      	uxtb	r2, r3
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3718      	adds	r7, #24
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	00010002 	.word	0x00010002

080057fc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b088      	sub	sp, #32
 8005800:	af02      	add	r7, sp, #8
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	4608      	mov	r0, r1
 8005806:	4611      	mov	r1, r2
 8005808:	461a      	mov	r2, r3
 800580a:	4603      	mov	r3, r0
 800580c:	817b      	strh	r3, [r7, #10]
 800580e:	460b      	mov	r3, r1
 8005810:	813b      	strh	r3, [r7, #8]
 8005812:	4613      	mov	r3, r2
 8005814:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005824:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005834:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005838:	9300      	str	r3, [sp, #0]
 800583a:	6a3b      	ldr	r3, [r7, #32]
 800583c:	2200      	movs	r2, #0
 800583e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005842:	68f8      	ldr	r0, [r7, #12]
 8005844:	f000 f96a 	bl	8005b1c <I2C_WaitOnFlagUntilTimeout>
 8005848:	4603      	mov	r3, r0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d00d      	beq.n	800586a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005858:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800585c:	d103      	bne.n	8005866 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005864:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	e0aa      	b.n	80059c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800586a:	897b      	ldrh	r3, [r7, #10]
 800586c:	b2db      	uxtb	r3, r3
 800586e:	461a      	mov	r2, r3
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005878:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800587a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587c:	6a3a      	ldr	r2, [r7, #32]
 800587e:	4952      	ldr	r1, [pc, #328]	; (80059c8 <I2C_RequestMemoryRead+0x1cc>)
 8005880:	68f8      	ldr	r0, [r7, #12]
 8005882:	f000 f9a2 	bl	8005bca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005886:	4603      	mov	r3, r0
 8005888:	2b00      	cmp	r3, #0
 800588a:	d001      	beq.n	8005890 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	e097      	b.n	80059c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005890:	2300      	movs	r3, #0
 8005892:	617b      	str	r3, [r7, #20]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	695b      	ldr	r3, [r3, #20]
 800589a:	617b      	str	r3, [r7, #20]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	699b      	ldr	r3, [r3, #24]
 80058a2:	617b      	str	r3, [r7, #20]
 80058a4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058a8:	6a39      	ldr	r1, [r7, #32]
 80058aa:	68f8      	ldr	r0, [r7, #12]
 80058ac:	f000 fa0c 	bl	8005cc8 <I2C_WaitOnTXEFlagUntilTimeout>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d00d      	beq.n	80058d2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ba:	2b04      	cmp	r3, #4
 80058bc:	d107      	bne.n	80058ce <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058cc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e076      	b.n	80059c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80058d2:	88fb      	ldrh	r3, [r7, #6]
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d105      	bne.n	80058e4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80058d8:	893b      	ldrh	r3, [r7, #8]
 80058da:	b2da      	uxtb	r2, r3
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	611a      	str	r2, [r3, #16]
 80058e2:	e021      	b.n	8005928 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80058e4:	893b      	ldrh	r3, [r7, #8]
 80058e6:	0a1b      	lsrs	r3, r3, #8
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	b2da      	uxtb	r2, r3
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058f4:	6a39      	ldr	r1, [r7, #32]
 80058f6:	68f8      	ldr	r0, [r7, #12]
 80058f8:	f000 f9e6 	bl	8005cc8 <I2C_WaitOnTXEFlagUntilTimeout>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00d      	beq.n	800591e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005906:	2b04      	cmp	r3, #4
 8005908:	d107      	bne.n	800591a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005918:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	e050      	b.n	80059c0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800591e:	893b      	ldrh	r3, [r7, #8]
 8005920:	b2da      	uxtb	r2, r3
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800592a:	6a39      	ldr	r1, [r7, #32]
 800592c:	68f8      	ldr	r0, [r7, #12]
 800592e:	f000 f9cb 	bl	8005cc8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005932:	4603      	mov	r3, r0
 8005934:	2b00      	cmp	r3, #0
 8005936:	d00d      	beq.n	8005954 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593c:	2b04      	cmp	r3, #4
 800593e:	d107      	bne.n	8005950 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800594e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	e035      	b.n	80059c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005962:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005966:	9300      	str	r3, [sp, #0]
 8005968:	6a3b      	ldr	r3, [r7, #32]
 800596a:	2200      	movs	r2, #0
 800596c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005970:	68f8      	ldr	r0, [r7, #12]
 8005972:	f000 f8d3 	bl	8005b1c <I2C_WaitOnFlagUntilTimeout>
 8005976:	4603      	mov	r3, r0
 8005978:	2b00      	cmp	r3, #0
 800597a:	d00d      	beq.n	8005998 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005986:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800598a:	d103      	bne.n	8005994 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005992:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005994:	2303      	movs	r3, #3
 8005996:	e013      	b.n	80059c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005998:	897b      	ldrh	r3, [r7, #10]
 800599a:	b2db      	uxtb	r3, r3
 800599c:	f043 0301 	orr.w	r3, r3, #1
 80059a0:	b2da      	uxtb	r2, r3
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80059a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059aa:	6a3a      	ldr	r2, [r7, #32]
 80059ac:	4906      	ldr	r1, [pc, #24]	; (80059c8 <I2C_RequestMemoryRead+0x1cc>)
 80059ae:	68f8      	ldr	r0, [r7, #12]
 80059b0:	f000 f90b 	bl	8005bca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d001      	beq.n	80059be <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e000      	b.n	80059c0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80059be:	2300      	movs	r3, #0
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3718      	adds	r7, #24
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	00010002 	.word	0x00010002

080059cc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b086      	sub	sp, #24
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059d4:	2300      	movs	r3, #0
 80059d6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059dc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059e4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80059e6:	4b4b      	ldr	r3, [pc, #300]	; (8005b14 <I2C_DMAAbort+0x148>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	08db      	lsrs	r3, r3, #3
 80059ec:	4a4a      	ldr	r2, [pc, #296]	; (8005b18 <I2C_DMAAbort+0x14c>)
 80059ee:	fba2 2303 	umull	r2, r3, r2, r3
 80059f2:	0a1a      	lsrs	r2, r3, #8
 80059f4:	4613      	mov	r3, r2
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	4413      	add	r3, r2
 80059fa:	00da      	lsls	r2, r3, #3
 80059fc:	1ad3      	subs	r3, r2, r3
 80059fe:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d106      	bne.n	8005a14 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0a:	f043 0220 	orr.w	r2, r3, #32
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005a12:	e00a      	b.n	8005a2a <I2C_DMAAbort+0x5e>
    }
    count--;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	3b01      	subs	r3, #1
 8005a18:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a28:	d0ea      	beq.n	8005a00 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d003      	beq.n	8005a3a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a36:	2200      	movs	r2, #0
 8005a38:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d003      	beq.n	8005a4a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a46:	2200      	movs	r2, #0
 8005a48:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a58:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d003      	beq.n	8005a70 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d003      	beq.n	8005a80 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f022 0201 	bic.w	r2, r2, #1
 8005a8e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	2b60      	cmp	r3, #96	; 0x60
 8005a9a:	d10e      	bne.n	8005aba <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	2220      	movs	r2, #32
 8005aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005ab2:	6978      	ldr	r0, [r7, #20]
 8005ab4:	f7fe fc9c 	bl	80043f0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005ab8:	e027      	b.n	8005b0a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005aba:	7cfb      	ldrb	r3, [r7, #19]
 8005abc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005ac0:	2b28      	cmp	r3, #40	; 0x28
 8005ac2:	d117      	bne.n	8005af4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f042 0201 	orr.w	r2, r2, #1
 8005ad2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ae2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	2228      	movs	r2, #40	; 0x28
 8005aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005af2:	e007      	b.n	8005b04 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	2220      	movs	r2, #32
 8005af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	2200      	movs	r2, #0
 8005b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005b04:	6978      	ldr	r0, [r7, #20]
 8005b06:	f7fe fc69 	bl	80043dc <HAL_I2C_ErrorCallback>
}
 8005b0a:	bf00      	nop
 8005b0c:	3718      	adds	r7, #24
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop
 8005b14:	20000034 	.word	0x20000034
 8005b18:	14f8b589 	.word	0x14f8b589

08005b1c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b084      	sub	sp, #16
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	603b      	str	r3, [r7, #0]
 8005b28:	4613      	mov	r3, r2
 8005b2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b2c:	e025      	b.n	8005b7a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b34:	d021      	beq.n	8005b7a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b36:	f7fc fc9d 	bl	8002474 <HAL_GetTick>
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	69bb      	ldr	r3, [r7, #24]
 8005b3e:	1ad3      	subs	r3, r2, r3
 8005b40:	683a      	ldr	r2, [r7, #0]
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d302      	bcc.n	8005b4c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d116      	bne.n	8005b7a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2220      	movs	r2, #32
 8005b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b66:	f043 0220 	orr.w	r2, r3, #32
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2200      	movs	r2, #0
 8005b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e023      	b.n	8005bc2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	0c1b      	lsrs	r3, r3, #16
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d10d      	bne.n	8005ba0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	695b      	ldr	r3, [r3, #20]
 8005b8a:	43da      	mvns	r2, r3
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	4013      	ands	r3, r2
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	bf0c      	ite	eq
 8005b96:	2301      	moveq	r3, #1
 8005b98:	2300      	movne	r3, #0
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	e00c      	b.n	8005bba <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	699b      	ldr	r3, [r3, #24]
 8005ba6:	43da      	mvns	r2, r3
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	4013      	ands	r3, r2
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	bf0c      	ite	eq
 8005bb2:	2301      	moveq	r3, #1
 8005bb4:	2300      	movne	r3, #0
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	461a      	mov	r2, r3
 8005bba:	79fb      	ldrb	r3, [r7, #7]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d0b6      	beq.n	8005b2e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005bc0:	2300      	movs	r3, #0
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3710      	adds	r7, #16
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}

08005bca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005bca:	b580      	push	{r7, lr}
 8005bcc:	b084      	sub	sp, #16
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	60f8      	str	r0, [r7, #12]
 8005bd2:	60b9      	str	r1, [r7, #8]
 8005bd4:	607a      	str	r2, [r7, #4]
 8005bd6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005bd8:	e051      	b.n	8005c7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	695b      	ldr	r3, [r3, #20]
 8005be0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005be4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005be8:	d123      	bne.n	8005c32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bf8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c02:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2200      	movs	r2, #0
 8005c08:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2220      	movs	r2, #32
 8005c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1e:	f043 0204 	orr.w	r2, r3, #4
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e046      	b.n	8005cc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c38:	d021      	beq.n	8005c7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c3a:	f7fc fc1b 	bl	8002474 <HAL_GetTick>
 8005c3e:	4602      	mov	r2, r0
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	1ad3      	subs	r3, r2, r3
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d302      	bcc.n	8005c50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d116      	bne.n	8005c7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2200      	movs	r2, #0
 8005c54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2220      	movs	r2, #32
 8005c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2200      	movs	r2, #0
 8005c62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6a:	f043 0220 	orr.w	r2, r3, #32
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2200      	movs	r2, #0
 8005c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e020      	b.n	8005cc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	0c1b      	lsrs	r3, r3, #16
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d10c      	bne.n	8005ca2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	695b      	ldr	r3, [r3, #20]
 8005c8e:	43da      	mvns	r2, r3
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	4013      	ands	r3, r2
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	bf14      	ite	ne
 8005c9a:	2301      	movne	r3, #1
 8005c9c:	2300      	moveq	r3, #0
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	e00b      	b.n	8005cba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	699b      	ldr	r3, [r3, #24]
 8005ca8:	43da      	mvns	r2, r3
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	4013      	ands	r3, r2
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	bf14      	ite	ne
 8005cb4:	2301      	movne	r3, #1
 8005cb6:	2300      	moveq	r3, #0
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d18d      	bne.n	8005bda <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005cbe:	2300      	movs	r3, #0
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3710      	adds	r7, #16
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}

08005cc8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b084      	sub	sp, #16
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	60b9      	str	r1, [r7, #8]
 8005cd2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005cd4:	e02d      	b.n	8005d32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005cd6:	68f8      	ldr	r0, [r7, #12]
 8005cd8:	f000 f900 	bl	8005edc <I2C_IsAcknowledgeFailed>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d001      	beq.n	8005ce6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e02d      	b.n	8005d42 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cec:	d021      	beq.n	8005d32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cee:	f7fc fbc1 	bl	8002474 <HAL_GetTick>
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	1ad3      	subs	r3, r2, r3
 8005cf8:	68ba      	ldr	r2, [r7, #8]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d302      	bcc.n	8005d04 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d116      	bne.n	8005d32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2200      	movs	r2, #0
 8005d08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2220      	movs	r2, #32
 8005d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2200      	movs	r2, #0
 8005d16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d1e:	f043 0220 	orr.w	r2, r3, #32
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e007      	b.n	8005d42 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	695b      	ldr	r3, [r3, #20]
 8005d38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d3c:	2b80      	cmp	r3, #128	; 0x80
 8005d3e:	d1ca      	bne.n	8005cd6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005d40:	2300      	movs	r3, #0
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3710      	adds	r7, #16
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}

08005d4a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d4a:	b580      	push	{r7, lr}
 8005d4c:	b084      	sub	sp, #16
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	60f8      	str	r0, [r7, #12]
 8005d52:	60b9      	str	r1, [r7, #8]
 8005d54:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005d56:	e02d      	b.n	8005db4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005d58:	68f8      	ldr	r0, [r7, #12]
 8005d5a:	f000 f8bf 	bl	8005edc <I2C_IsAcknowledgeFailed>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d001      	beq.n	8005d68 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005d64:	2301      	movs	r3, #1
 8005d66:	e02d      	b.n	8005dc4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d6e:	d021      	beq.n	8005db4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d70:	f7fc fb80 	bl	8002474 <HAL_GetTick>
 8005d74:	4602      	mov	r2, r0
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	68ba      	ldr	r2, [r7, #8]
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d302      	bcc.n	8005d86 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d116      	bne.n	8005db4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2220      	movs	r2, #32
 8005d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2200      	movs	r2, #0
 8005d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da0:	f043 0220 	orr.w	r2, r3, #32
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2200      	movs	r2, #0
 8005dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	e007      	b.n	8005dc4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	695b      	ldr	r3, [r3, #20]
 8005dba:	f003 0304 	and.w	r3, r3, #4
 8005dbe:	2b04      	cmp	r3, #4
 8005dc0:	d1ca      	bne.n	8005d58 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005dc2:	2300      	movs	r3, #0
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3710      	adds	r7, #16
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}

08005dcc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b085      	sub	sp, #20
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005dd8:	4b13      	ldr	r3, [pc, #76]	; (8005e28 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	08db      	lsrs	r3, r3, #3
 8005dde:	4a13      	ldr	r2, [pc, #76]	; (8005e2c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005de0:	fba2 2303 	umull	r2, r3, r2, r3
 8005de4:	0a1a      	lsrs	r2, r3, #8
 8005de6:	4613      	mov	r3, r2
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	4413      	add	r3, r2
 8005dec:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	3b01      	subs	r3, #1
 8005df2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d107      	bne.n	8005e0a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfe:	f043 0220 	orr.w	r2, r3, #32
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e008      	b.n	8005e1c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e18:	d0e9      	beq.n	8005dee <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005e1a:	2300      	movs	r3, #0
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3714      	adds	r7, #20
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr
 8005e28:	20000034 	.word	0x20000034
 8005e2c:	14f8b589 	.word	0x14f8b589

08005e30 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005e3c:	e042      	b.n	8005ec4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	695b      	ldr	r3, [r3, #20]
 8005e44:	f003 0310 	and.w	r3, r3, #16
 8005e48:	2b10      	cmp	r3, #16
 8005e4a:	d119      	bne.n	8005e80 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f06f 0210 	mvn.w	r2, #16
 8005e54:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2220      	movs	r2, #32
 8005e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2200      	movs	r2, #0
 8005e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2200      	movs	r2, #0
 8005e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e029      	b.n	8005ed4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e80:	f7fc faf8 	bl	8002474 <HAL_GetTick>
 8005e84:	4602      	mov	r2, r0
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	1ad3      	subs	r3, r2, r3
 8005e8a:	68ba      	ldr	r2, [r7, #8]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d302      	bcc.n	8005e96 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d116      	bne.n	8005ec4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2220      	movs	r2, #32
 8005ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb0:	f043 0220 	orr.w	r2, r3, #32
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e007      	b.n	8005ed4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	695b      	ldr	r3, [r3, #20]
 8005eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ece:	2b40      	cmp	r3, #64	; 0x40
 8005ed0:	d1b5      	bne.n	8005e3e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005ed2:	2300      	movs	r3, #0
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3710      	adds	r7, #16
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	695b      	ldr	r3, [r3, #20]
 8005eea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005eee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ef2:	d11b      	bne.n	8005f2c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005efc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2220      	movs	r2, #32
 8005f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f18:	f043 0204 	orr.w	r2, r3, #4
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2200      	movs	r2, #0
 8005f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e000      	b.n	8005f2e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	370c      	adds	r7, #12
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr

08005f3a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005f3a:	b480      	push	{r7}
 8005f3c:	b083      	sub	sp, #12
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f46:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005f4a:	d103      	bne.n	8005f54 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005f52:	e007      	b.n	8005f64 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f58:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005f5c:	d102      	bne.n	8005f64 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2208      	movs	r2, #8
 8005f62:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005f64:	bf00      	nop
 8005f66:	370c      	adds	r7, #12
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b086      	sub	sp, #24
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d101      	bne.n	8005f82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e267      	b.n	8006452 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f003 0301 	and.w	r3, r3, #1
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d075      	beq.n	800607a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005f8e:	4b88      	ldr	r3, [pc, #544]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	f003 030c 	and.w	r3, r3, #12
 8005f96:	2b04      	cmp	r3, #4
 8005f98:	d00c      	beq.n	8005fb4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f9a:	4b85      	ldr	r3, [pc, #532]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005fa2:	2b08      	cmp	r3, #8
 8005fa4:	d112      	bne.n	8005fcc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005fa6:	4b82      	ldr	r3, [pc, #520]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005fb2:	d10b      	bne.n	8005fcc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fb4:	4b7e      	ldr	r3, [pc, #504]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d05b      	beq.n	8006078 <HAL_RCC_OscConfig+0x108>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d157      	bne.n	8006078 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e242      	b.n	8006452 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fd4:	d106      	bne.n	8005fe4 <HAL_RCC_OscConfig+0x74>
 8005fd6:	4b76      	ldr	r3, [pc, #472]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a75      	ldr	r2, [pc, #468]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8005fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fe0:	6013      	str	r3, [r2, #0]
 8005fe2:	e01d      	b.n	8006020 <HAL_RCC_OscConfig+0xb0>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005fec:	d10c      	bne.n	8006008 <HAL_RCC_OscConfig+0x98>
 8005fee:	4b70      	ldr	r3, [pc, #448]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a6f      	ldr	r2, [pc, #444]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8005ff4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ff8:	6013      	str	r3, [r2, #0]
 8005ffa:	4b6d      	ldr	r3, [pc, #436]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a6c      	ldr	r2, [pc, #432]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8006000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006004:	6013      	str	r3, [r2, #0]
 8006006:	e00b      	b.n	8006020 <HAL_RCC_OscConfig+0xb0>
 8006008:	4b69      	ldr	r3, [pc, #420]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a68      	ldr	r2, [pc, #416]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 800600e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006012:	6013      	str	r3, [r2, #0]
 8006014:	4b66      	ldr	r3, [pc, #408]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a65      	ldr	r2, [pc, #404]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 800601a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800601e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d013      	beq.n	8006050 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006028:	f7fc fa24 	bl	8002474 <HAL_GetTick>
 800602c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800602e:	e008      	b.n	8006042 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006030:	f7fc fa20 	bl	8002474 <HAL_GetTick>
 8006034:	4602      	mov	r2, r0
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	1ad3      	subs	r3, r2, r3
 800603a:	2b64      	cmp	r3, #100	; 0x64
 800603c:	d901      	bls.n	8006042 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800603e:	2303      	movs	r3, #3
 8006040:	e207      	b.n	8006452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006042:	4b5b      	ldr	r3, [pc, #364]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800604a:	2b00      	cmp	r3, #0
 800604c:	d0f0      	beq.n	8006030 <HAL_RCC_OscConfig+0xc0>
 800604e:	e014      	b.n	800607a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006050:	f7fc fa10 	bl	8002474 <HAL_GetTick>
 8006054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006056:	e008      	b.n	800606a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006058:	f7fc fa0c 	bl	8002474 <HAL_GetTick>
 800605c:	4602      	mov	r2, r0
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	1ad3      	subs	r3, r2, r3
 8006062:	2b64      	cmp	r3, #100	; 0x64
 8006064:	d901      	bls.n	800606a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006066:	2303      	movs	r3, #3
 8006068:	e1f3      	b.n	8006452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800606a:	4b51      	ldr	r3, [pc, #324]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006072:	2b00      	cmp	r3, #0
 8006074:	d1f0      	bne.n	8006058 <HAL_RCC_OscConfig+0xe8>
 8006076:	e000      	b.n	800607a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006078:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f003 0302 	and.w	r3, r3, #2
 8006082:	2b00      	cmp	r3, #0
 8006084:	d063      	beq.n	800614e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006086:	4b4a      	ldr	r3, [pc, #296]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	f003 030c 	and.w	r3, r3, #12
 800608e:	2b00      	cmp	r3, #0
 8006090:	d00b      	beq.n	80060aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006092:	4b47      	ldr	r3, [pc, #284]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800609a:	2b08      	cmp	r3, #8
 800609c:	d11c      	bne.n	80060d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800609e:	4b44      	ldr	r3, [pc, #272]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d116      	bne.n	80060d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060aa:	4b41      	ldr	r3, [pc, #260]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f003 0302 	and.w	r3, r3, #2
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d005      	beq.n	80060c2 <HAL_RCC_OscConfig+0x152>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	68db      	ldr	r3, [r3, #12]
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d001      	beq.n	80060c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	e1c7      	b.n	8006452 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060c2:	4b3b      	ldr	r3, [pc, #236]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	691b      	ldr	r3, [r3, #16]
 80060ce:	00db      	lsls	r3, r3, #3
 80060d0:	4937      	ldr	r1, [pc, #220]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 80060d2:	4313      	orrs	r3, r2
 80060d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060d6:	e03a      	b.n	800614e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	68db      	ldr	r3, [r3, #12]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d020      	beq.n	8006122 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80060e0:	4b34      	ldr	r3, [pc, #208]	; (80061b4 <HAL_RCC_OscConfig+0x244>)
 80060e2:	2201      	movs	r2, #1
 80060e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060e6:	f7fc f9c5 	bl	8002474 <HAL_GetTick>
 80060ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060ec:	e008      	b.n	8006100 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80060ee:	f7fc f9c1 	bl	8002474 <HAL_GetTick>
 80060f2:	4602      	mov	r2, r0
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	1ad3      	subs	r3, r2, r3
 80060f8:	2b02      	cmp	r3, #2
 80060fa:	d901      	bls.n	8006100 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80060fc:	2303      	movs	r3, #3
 80060fe:	e1a8      	b.n	8006452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006100:	4b2b      	ldr	r3, [pc, #172]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f003 0302 	and.w	r3, r3, #2
 8006108:	2b00      	cmp	r3, #0
 800610a:	d0f0      	beq.n	80060ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800610c:	4b28      	ldr	r3, [pc, #160]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	691b      	ldr	r3, [r3, #16]
 8006118:	00db      	lsls	r3, r3, #3
 800611a:	4925      	ldr	r1, [pc, #148]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 800611c:	4313      	orrs	r3, r2
 800611e:	600b      	str	r3, [r1, #0]
 8006120:	e015      	b.n	800614e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006122:	4b24      	ldr	r3, [pc, #144]	; (80061b4 <HAL_RCC_OscConfig+0x244>)
 8006124:	2200      	movs	r2, #0
 8006126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006128:	f7fc f9a4 	bl	8002474 <HAL_GetTick>
 800612c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800612e:	e008      	b.n	8006142 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006130:	f7fc f9a0 	bl	8002474 <HAL_GetTick>
 8006134:	4602      	mov	r2, r0
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	1ad3      	subs	r3, r2, r3
 800613a:	2b02      	cmp	r3, #2
 800613c:	d901      	bls.n	8006142 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800613e:	2303      	movs	r3, #3
 8006140:	e187      	b.n	8006452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006142:	4b1b      	ldr	r3, [pc, #108]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f003 0302 	and.w	r3, r3, #2
 800614a:	2b00      	cmp	r3, #0
 800614c:	d1f0      	bne.n	8006130 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f003 0308 	and.w	r3, r3, #8
 8006156:	2b00      	cmp	r3, #0
 8006158:	d036      	beq.n	80061c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	695b      	ldr	r3, [r3, #20]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d016      	beq.n	8006190 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006162:	4b15      	ldr	r3, [pc, #84]	; (80061b8 <HAL_RCC_OscConfig+0x248>)
 8006164:	2201      	movs	r2, #1
 8006166:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006168:	f7fc f984 	bl	8002474 <HAL_GetTick>
 800616c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800616e:	e008      	b.n	8006182 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006170:	f7fc f980 	bl	8002474 <HAL_GetTick>
 8006174:	4602      	mov	r2, r0
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	2b02      	cmp	r3, #2
 800617c:	d901      	bls.n	8006182 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800617e:	2303      	movs	r3, #3
 8006180:	e167      	b.n	8006452 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006182:	4b0b      	ldr	r3, [pc, #44]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8006184:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006186:	f003 0302 	and.w	r3, r3, #2
 800618a:	2b00      	cmp	r3, #0
 800618c:	d0f0      	beq.n	8006170 <HAL_RCC_OscConfig+0x200>
 800618e:	e01b      	b.n	80061c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006190:	4b09      	ldr	r3, [pc, #36]	; (80061b8 <HAL_RCC_OscConfig+0x248>)
 8006192:	2200      	movs	r2, #0
 8006194:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006196:	f7fc f96d 	bl	8002474 <HAL_GetTick>
 800619a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800619c:	e00e      	b.n	80061bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800619e:	f7fc f969 	bl	8002474 <HAL_GetTick>
 80061a2:	4602      	mov	r2, r0
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	1ad3      	subs	r3, r2, r3
 80061a8:	2b02      	cmp	r3, #2
 80061aa:	d907      	bls.n	80061bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80061ac:	2303      	movs	r3, #3
 80061ae:	e150      	b.n	8006452 <HAL_RCC_OscConfig+0x4e2>
 80061b0:	40023800 	.word	0x40023800
 80061b4:	42470000 	.word	0x42470000
 80061b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061bc:	4b88      	ldr	r3, [pc, #544]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 80061be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061c0:	f003 0302 	and.w	r3, r3, #2
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d1ea      	bne.n	800619e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 0304 	and.w	r3, r3, #4
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	f000 8097 	beq.w	8006304 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061d6:	2300      	movs	r3, #0
 80061d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061da:	4b81      	ldr	r3, [pc, #516]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 80061dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d10f      	bne.n	8006206 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061e6:	2300      	movs	r3, #0
 80061e8:	60bb      	str	r3, [r7, #8]
 80061ea:	4b7d      	ldr	r3, [pc, #500]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 80061ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ee:	4a7c      	ldr	r2, [pc, #496]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 80061f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061f4:	6413      	str	r3, [r2, #64]	; 0x40
 80061f6:	4b7a      	ldr	r3, [pc, #488]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 80061f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061fe:	60bb      	str	r3, [r7, #8]
 8006200:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006202:	2301      	movs	r3, #1
 8006204:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006206:	4b77      	ldr	r3, [pc, #476]	; (80063e4 <HAL_RCC_OscConfig+0x474>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800620e:	2b00      	cmp	r3, #0
 8006210:	d118      	bne.n	8006244 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006212:	4b74      	ldr	r3, [pc, #464]	; (80063e4 <HAL_RCC_OscConfig+0x474>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a73      	ldr	r2, [pc, #460]	; (80063e4 <HAL_RCC_OscConfig+0x474>)
 8006218:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800621c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800621e:	f7fc f929 	bl	8002474 <HAL_GetTick>
 8006222:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006224:	e008      	b.n	8006238 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006226:	f7fc f925 	bl	8002474 <HAL_GetTick>
 800622a:	4602      	mov	r2, r0
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	1ad3      	subs	r3, r2, r3
 8006230:	2b02      	cmp	r3, #2
 8006232:	d901      	bls.n	8006238 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006234:	2303      	movs	r3, #3
 8006236:	e10c      	b.n	8006452 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006238:	4b6a      	ldr	r3, [pc, #424]	; (80063e4 <HAL_RCC_OscConfig+0x474>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006240:	2b00      	cmp	r3, #0
 8006242:	d0f0      	beq.n	8006226 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	2b01      	cmp	r3, #1
 800624a:	d106      	bne.n	800625a <HAL_RCC_OscConfig+0x2ea>
 800624c:	4b64      	ldr	r3, [pc, #400]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 800624e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006250:	4a63      	ldr	r2, [pc, #396]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 8006252:	f043 0301 	orr.w	r3, r3, #1
 8006256:	6713      	str	r3, [r2, #112]	; 0x70
 8006258:	e01c      	b.n	8006294 <HAL_RCC_OscConfig+0x324>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	2b05      	cmp	r3, #5
 8006260:	d10c      	bne.n	800627c <HAL_RCC_OscConfig+0x30c>
 8006262:	4b5f      	ldr	r3, [pc, #380]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 8006264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006266:	4a5e      	ldr	r2, [pc, #376]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 8006268:	f043 0304 	orr.w	r3, r3, #4
 800626c:	6713      	str	r3, [r2, #112]	; 0x70
 800626e:	4b5c      	ldr	r3, [pc, #368]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 8006270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006272:	4a5b      	ldr	r2, [pc, #364]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 8006274:	f043 0301 	orr.w	r3, r3, #1
 8006278:	6713      	str	r3, [r2, #112]	; 0x70
 800627a:	e00b      	b.n	8006294 <HAL_RCC_OscConfig+0x324>
 800627c:	4b58      	ldr	r3, [pc, #352]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 800627e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006280:	4a57      	ldr	r2, [pc, #348]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 8006282:	f023 0301 	bic.w	r3, r3, #1
 8006286:	6713      	str	r3, [r2, #112]	; 0x70
 8006288:	4b55      	ldr	r3, [pc, #340]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 800628a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800628c:	4a54      	ldr	r2, [pc, #336]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 800628e:	f023 0304 	bic.w	r3, r3, #4
 8006292:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d015      	beq.n	80062c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800629c:	f7fc f8ea 	bl	8002474 <HAL_GetTick>
 80062a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062a2:	e00a      	b.n	80062ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062a4:	f7fc f8e6 	bl	8002474 <HAL_GetTick>
 80062a8:	4602      	mov	r2, r0
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	1ad3      	subs	r3, r2, r3
 80062ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d901      	bls.n	80062ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80062b6:	2303      	movs	r3, #3
 80062b8:	e0cb      	b.n	8006452 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062ba:	4b49      	ldr	r3, [pc, #292]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 80062bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062be:	f003 0302 	and.w	r3, r3, #2
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d0ee      	beq.n	80062a4 <HAL_RCC_OscConfig+0x334>
 80062c6:	e014      	b.n	80062f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062c8:	f7fc f8d4 	bl	8002474 <HAL_GetTick>
 80062cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062ce:	e00a      	b.n	80062e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062d0:	f7fc f8d0 	bl	8002474 <HAL_GetTick>
 80062d4:	4602      	mov	r2, r0
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	1ad3      	subs	r3, r2, r3
 80062da:	f241 3288 	movw	r2, #5000	; 0x1388
 80062de:	4293      	cmp	r3, r2
 80062e0:	d901      	bls.n	80062e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80062e2:	2303      	movs	r3, #3
 80062e4:	e0b5      	b.n	8006452 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062e6:	4b3e      	ldr	r3, [pc, #248]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 80062e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ea:	f003 0302 	and.w	r3, r3, #2
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d1ee      	bne.n	80062d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80062f2:	7dfb      	ldrb	r3, [r7, #23]
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d105      	bne.n	8006304 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062f8:	4b39      	ldr	r3, [pc, #228]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 80062fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fc:	4a38      	ldr	r2, [pc, #224]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 80062fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006302:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	699b      	ldr	r3, [r3, #24]
 8006308:	2b00      	cmp	r3, #0
 800630a:	f000 80a1 	beq.w	8006450 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800630e:	4b34      	ldr	r3, [pc, #208]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	f003 030c 	and.w	r3, r3, #12
 8006316:	2b08      	cmp	r3, #8
 8006318:	d05c      	beq.n	80063d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	699b      	ldr	r3, [r3, #24]
 800631e:	2b02      	cmp	r3, #2
 8006320:	d141      	bne.n	80063a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006322:	4b31      	ldr	r3, [pc, #196]	; (80063e8 <HAL_RCC_OscConfig+0x478>)
 8006324:	2200      	movs	r2, #0
 8006326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006328:	f7fc f8a4 	bl	8002474 <HAL_GetTick>
 800632c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800632e:	e008      	b.n	8006342 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006330:	f7fc f8a0 	bl	8002474 <HAL_GetTick>
 8006334:	4602      	mov	r2, r0
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	1ad3      	subs	r3, r2, r3
 800633a:	2b02      	cmp	r3, #2
 800633c:	d901      	bls.n	8006342 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800633e:	2303      	movs	r3, #3
 8006340:	e087      	b.n	8006452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006342:	4b27      	ldr	r3, [pc, #156]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800634a:	2b00      	cmp	r3, #0
 800634c:	d1f0      	bne.n	8006330 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	69da      	ldr	r2, [r3, #28]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a1b      	ldr	r3, [r3, #32]
 8006356:	431a      	orrs	r2, r3
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635c:	019b      	lsls	r3, r3, #6
 800635e:	431a      	orrs	r2, r3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006364:	085b      	lsrs	r3, r3, #1
 8006366:	3b01      	subs	r3, #1
 8006368:	041b      	lsls	r3, r3, #16
 800636a:	431a      	orrs	r2, r3
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006370:	061b      	lsls	r3, r3, #24
 8006372:	491b      	ldr	r1, [pc, #108]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 8006374:	4313      	orrs	r3, r2
 8006376:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006378:	4b1b      	ldr	r3, [pc, #108]	; (80063e8 <HAL_RCC_OscConfig+0x478>)
 800637a:	2201      	movs	r2, #1
 800637c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800637e:	f7fc f879 	bl	8002474 <HAL_GetTick>
 8006382:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006384:	e008      	b.n	8006398 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006386:	f7fc f875 	bl	8002474 <HAL_GetTick>
 800638a:	4602      	mov	r2, r0
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	1ad3      	subs	r3, r2, r3
 8006390:	2b02      	cmp	r3, #2
 8006392:	d901      	bls.n	8006398 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006394:	2303      	movs	r3, #3
 8006396:	e05c      	b.n	8006452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006398:	4b11      	ldr	r3, [pc, #68]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d0f0      	beq.n	8006386 <HAL_RCC_OscConfig+0x416>
 80063a4:	e054      	b.n	8006450 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063a6:	4b10      	ldr	r3, [pc, #64]	; (80063e8 <HAL_RCC_OscConfig+0x478>)
 80063a8:	2200      	movs	r2, #0
 80063aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063ac:	f7fc f862 	bl	8002474 <HAL_GetTick>
 80063b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063b2:	e008      	b.n	80063c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063b4:	f7fc f85e 	bl	8002474 <HAL_GetTick>
 80063b8:	4602      	mov	r2, r0
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	1ad3      	subs	r3, r2, r3
 80063be:	2b02      	cmp	r3, #2
 80063c0:	d901      	bls.n	80063c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80063c2:	2303      	movs	r3, #3
 80063c4:	e045      	b.n	8006452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063c6:	4b06      	ldr	r3, [pc, #24]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d1f0      	bne.n	80063b4 <HAL_RCC_OscConfig+0x444>
 80063d2:	e03d      	b.n	8006450 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	699b      	ldr	r3, [r3, #24]
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d107      	bne.n	80063ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	e038      	b.n	8006452 <HAL_RCC_OscConfig+0x4e2>
 80063e0:	40023800 	.word	0x40023800
 80063e4:	40007000 	.word	0x40007000
 80063e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80063ec:	4b1b      	ldr	r3, [pc, #108]	; (800645c <HAL_RCC_OscConfig+0x4ec>)
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	699b      	ldr	r3, [r3, #24]
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d028      	beq.n	800644c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006404:	429a      	cmp	r2, r3
 8006406:	d121      	bne.n	800644c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006412:	429a      	cmp	r2, r3
 8006414:	d11a      	bne.n	800644c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006416:	68fa      	ldr	r2, [r7, #12]
 8006418:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800641c:	4013      	ands	r3, r2
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006422:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006424:	4293      	cmp	r3, r2
 8006426:	d111      	bne.n	800644c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006432:	085b      	lsrs	r3, r3, #1
 8006434:	3b01      	subs	r3, #1
 8006436:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006438:	429a      	cmp	r2, r3
 800643a:	d107      	bne.n	800644c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006446:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006448:	429a      	cmp	r2, r3
 800644a:	d001      	beq.n	8006450 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	e000      	b.n	8006452 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006450:	2300      	movs	r3, #0
}
 8006452:	4618      	mov	r0, r3
 8006454:	3718      	adds	r7, #24
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	bf00      	nop
 800645c:	40023800 	.word	0x40023800

08006460 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d101      	bne.n	8006474 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	e0cc      	b.n	800660e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006474:	4b68      	ldr	r3, [pc, #416]	; (8006618 <HAL_RCC_ClockConfig+0x1b8>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f003 0307 	and.w	r3, r3, #7
 800647c:	683a      	ldr	r2, [r7, #0]
 800647e:	429a      	cmp	r2, r3
 8006480:	d90c      	bls.n	800649c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006482:	4b65      	ldr	r3, [pc, #404]	; (8006618 <HAL_RCC_ClockConfig+0x1b8>)
 8006484:	683a      	ldr	r2, [r7, #0]
 8006486:	b2d2      	uxtb	r2, r2
 8006488:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800648a:	4b63      	ldr	r3, [pc, #396]	; (8006618 <HAL_RCC_ClockConfig+0x1b8>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f003 0307 	and.w	r3, r3, #7
 8006492:	683a      	ldr	r2, [r7, #0]
 8006494:	429a      	cmp	r2, r3
 8006496:	d001      	beq.n	800649c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	e0b8      	b.n	800660e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f003 0302 	and.w	r3, r3, #2
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d020      	beq.n	80064ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f003 0304 	and.w	r3, r3, #4
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d005      	beq.n	80064c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80064b4:	4b59      	ldr	r3, [pc, #356]	; (800661c <HAL_RCC_ClockConfig+0x1bc>)
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	4a58      	ldr	r2, [pc, #352]	; (800661c <HAL_RCC_ClockConfig+0x1bc>)
 80064ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80064be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f003 0308 	and.w	r3, r3, #8
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d005      	beq.n	80064d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80064cc:	4b53      	ldr	r3, [pc, #332]	; (800661c <HAL_RCC_ClockConfig+0x1bc>)
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	4a52      	ldr	r2, [pc, #328]	; (800661c <HAL_RCC_ClockConfig+0x1bc>)
 80064d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80064d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064d8:	4b50      	ldr	r3, [pc, #320]	; (800661c <HAL_RCC_ClockConfig+0x1bc>)
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	494d      	ldr	r1, [pc, #308]	; (800661c <HAL_RCC_ClockConfig+0x1bc>)
 80064e6:	4313      	orrs	r3, r2
 80064e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f003 0301 	and.w	r3, r3, #1
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d044      	beq.n	8006580 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d107      	bne.n	800650e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064fe:	4b47      	ldr	r3, [pc, #284]	; (800661c <HAL_RCC_ClockConfig+0x1bc>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006506:	2b00      	cmp	r3, #0
 8006508:	d119      	bne.n	800653e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	e07f      	b.n	800660e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	2b02      	cmp	r3, #2
 8006514:	d003      	beq.n	800651e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800651a:	2b03      	cmp	r3, #3
 800651c:	d107      	bne.n	800652e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800651e:	4b3f      	ldr	r3, [pc, #252]	; (800661c <HAL_RCC_ClockConfig+0x1bc>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006526:	2b00      	cmp	r3, #0
 8006528:	d109      	bne.n	800653e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	e06f      	b.n	800660e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800652e:	4b3b      	ldr	r3, [pc, #236]	; (800661c <HAL_RCC_ClockConfig+0x1bc>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f003 0302 	and.w	r3, r3, #2
 8006536:	2b00      	cmp	r3, #0
 8006538:	d101      	bne.n	800653e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	e067      	b.n	800660e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800653e:	4b37      	ldr	r3, [pc, #220]	; (800661c <HAL_RCC_ClockConfig+0x1bc>)
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	f023 0203 	bic.w	r2, r3, #3
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	4934      	ldr	r1, [pc, #208]	; (800661c <HAL_RCC_ClockConfig+0x1bc>)
 800654c:	4313      	orrs	r3, r2
 800654e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006550:	f7fb ff90 	bl	8002474 <HAL_GetTick>
 8006554:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006556:	e00a      	b.n	800656e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006558:	f7fb ff8c 	bl	8002474 <HAL_GetTick>
 800655c:	4602      	mov	r2, r0
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	1ad3      	subs	r3, r2, r3
 8006562:	f241 3288 	movw	r2, #5000	; 0x1388
 8006566:	4293      	cmp	r3, r2
 8006568:	d901      	bls.n	800656e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800656a:	2303      	movs	r3, #3
 800656c:	e04f      	b.n	800660e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800656e:	4b2b      	ldr	r3, [pc, #172]	; (800661c <HAL_RCC_ClockConfig+0x1bc>)
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	f003 020c 	and.w	r2, r3, #12
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	429a      	cmp	r2, r3
 800657e:	d1eb      	bne.n	8006558 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006580:	4b25      	ldr	r3, [pc, #148]	; (8006618 <HAL_RCC_ClockConfig+0x1b8>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f003 0307 	and.w	r3, r3, #7
 8006588:	683a      	ldr	r2, [r7, #0]
 800658a:	429a      	cmp	r2, r3
 800658c:	d20c      	bcs.n	80065a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800658e:	4b22      	ldr	r3, [pc, #136]	; (8006618 <HAL_RCC_ClockConfig+0x1b8>)
 8006590:	683a      	ldr	r2, [r7, #0]
 8006592:	b2d2      	uxtb	r2, r2
 8006594:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006596:	4b20      	ldr	r3, [pc, #128]	; (8006618 <HAL_RCC_ClockConfig+0x1b8>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f003 0307 	and.w	r3, r3, #7
 800659e:	683a      	ldr	r2, [r7, #0]
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d001      	beq.n	80065a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80065a4:	2301      	movs	r3, #1
 80065a6:	e032      	b.n	800660e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f003 0304 	and.w	r3, r3, #4
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d008      	beq.n	80065c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80065b4:	4b19      	ldr	r3, [pc, #100]	; (800661c <HAL_RCC_ClockConfig+0x1bc>)
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	68db      	ldr	r3, [r3, #12]
 80065c0:	4916      	ldr	r1, [pc, #88]	; (800661c <HAL_RCC_ClockConfig+0x1bc>)
 80065c2:	4313      	orrs	r3, r2
 80065c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f003 0308 	and.w	r3, r3, #8
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d009      	beq.n	80065e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80065d2:	4b12      	ldr	r3, [pc, #72]	; (800661c <HAL_RCC_ClockConfig+0x1bc>)
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	691b      	ldr	r3, [r3, #16]
 80065de:	00db      	lsls	r3, r3, #3
 80065e0:	490e      	ldr	r1, [pc, #56]	; (800661c <HAL_RCC_ClockConfig+0x1bc>)
 80065e2:	4313      	orrs	r3, r2
 80065e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80065e6:	f000 f821 	bl	800662c <HAL_RCC_GetSysClockFreq>
 80065ea:	4602      	mov	r2, r0
 80065ec:	4b0b      	ldr	r3, [pc, #44]	; (800661c <HAL_RCC_ClockConfig+0x1bc>)
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	091b      	lsrs	r3, r3, #4
 80065f2:	f003 030f 	and.w	r3, r3, #15
 80065f6:	490a      	ldr	r1, [pc, #40]	; (8006620 <HAL_RCC_ClockConfig+0x1c0>)
 80065f8:	5ccb      	ldrb	r3, [r1, r3]
 80065fa:	fa22 f303 	lsr.w	r3, r2, r3
 80065fe:	4a09      	ldr	r2, [pc, #36]	; (8006624 <HAL_RCC_ClockConfig+0x1c4>)
 8006600:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006602:	4b09      	ldr	r3, [pc, #36]	; (8006628 <HAL_RCC_ClockConfig+0x1c8>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4618      	mov	r0, r3
 8006608:	f7fb fef0 	bl	80023ec <HAL_InitTick>

  return HAL_OK;
 800660c:	2300      	movs	r3, #0
}
 800660e:	4618      	mov	r0, r3
 8006610:	3710      	adds	r7, #16
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	40023c00 	.word	0x40023c00
 800661c:	40023800 	.word	0x40023800
 8006620:	08009398 	.word	0x08009398
 8006624:	20000034 	.word	0x20000034
 8006628:	20000038 	.word	0x20000038

0800662c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800662c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006630:	b094      	sub	sp, #80	; 0x50
 8006632:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006634:	2300      	movs	r3, #0
 8006636:	647b      	str	r3, [r7, #68]	; 0x44
 8006638:	2300      	movs	r3, #0
 800663a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800663c:	2300      	movs	r3, #0
 800663e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006640:	2300      	movs	r3, #0
 8006642:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006644:	4b79      	ldr	r3, [pc, #484]	; (800682c <HAL_RCC_GetSysClockFreq+0x200>)
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	f003 030c 	and.w	r3, r3, #12
 800664c:	2b08      	cmp	r3, #8
 800664e:	d00d      	beq.n	800666c <HAL_RCC_GetSysClockFreq+0x40>
 8006650:	2b08      	cmp	r3, #8
 8006652:	f200 80e1 	bhi.w	8006818 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006656:	2b00      	cmp	r3, #0
 8006658:	d002      	beq.n	8006660 <HAL_RCC_GetSysClockFreq+0x34>
 800665a:	2b04      	cmp	r3, #4
 800665c:	d003      	beq.n	8006666 <HAL_RCC_GetSysClockFreq+0x3a>
 800665e:	e0db      	b.n	8006818 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006660:	4b73      	ldr	r3, [pc, #460]	; (8006830 <HAL_RCC_GetSysClockFreq+0x204>)
 8006662:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006664:	e0db      	b.n	800681e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006666:	4b73      	ldr	r3, [pc, #460]	; (8006834 <HAL_RCC_GetSysClockFreq+0x208>)
 8006668:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800666a:	e0d8      	b.n	800681e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800666c:	4b6f      	ldr	r3, [pc, #444]	; (800682c <HAL_RCC_GetSysClockFreq+0x200>)
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006674:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006676:	4b6d      	ldr	r3, [pc, #436]	; (800682c <HAL_RCC_GetSysClockFreq+0x200>)
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800667e:	2b00      	cmp	r3, #0
 8006680:	d063      	beq.n	800674a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006682:	4b6a      	ldr	r3, [pc, #424]	; (800682c <HAL_RCC_GetSysClockFreq+0x200>)
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	099b      	lsrs	r3, r3, #6
 8006688:	2200      	movs	r2, #0
 800668a:	63bb      	str	r3, [r7, #56]	; 0x38
 800668c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800668e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006690:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006694:	633b      	str	r3, [r7, #48]	; 0x30
 8006696:	2300      	movs	r3, #0
 8006698:	637b      	str	r3, [r7, #52]	; 0x34
 800669a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800669e:	4622      	mov	r2, r4
 80066a0:	462b      	mov	r3, r5
 80066a2:	f04f 0000 	mov.w	r0, #0
 80066a6:	f04f 0100 	mov.w	r1, #0
 80066aa:	0159      	lsls	r1, r3, #5
 80066ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80066b0:	0150      	lsls	r0, r2, #5
 80066b2:	4602      	mov	r2, r0
 80066b4:	460b      	mov	r3, r1
 80066b6:	4621      	mov	r1, r4
 80066b8:	1a51      	subs	r1, r2, r1
 80066ba:	6139      	str	r1, [r7, #16]
 80066bc:	4629      	mov	r1, r5
 80066be:	eb63 0301 	sbc.w	r3, r3, r1
 80066c2:	617b      	str	r3, [r7, #20]
 80066c4:	f04f 0200 	mov.w	r2, #0
 80066c8:	f04f 0300 	mov.w	r3, #0
 80066cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80066d0:	4659      	mov	r1, fp
 80066d2:	018b      	lsls	r3, r1, #6
 80066d4:	4651      	mov	r1, sl
 80066d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80066da:	4651      	mov	r1, sl
 80066dc:	018a      	lsls	r2, r1, #6
 80066de:	4651      	mov	r1, sl
 80066e0:	ebb2 0801 	subs.w	r8, r2, r1
 80066e4:	4659      	mov	r1, fp
 80066e6:	eb63 0901 	sbc.w	r9, r3, r1
 80066ea:	f04f 0200 	mov.w	r2, #0
 80066ee:	f04f 0300 	mov.w	r3, #0
 80066f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80066f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80066fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80066fe:	4690      	mov	r8, r2
 8006700:	4699      	mov	r9, r3
 8006702:	4623      	mov	r3, r4
 8006704:	eb18 0303 	adds.w	r3, r8, r3
 8006708:	60bb      	str	r3, [r7, #8]
 800670a:	462b      	mov	r3, r5
 800670c:	eb49 0303 	adc.w	r3, r9, r3
 8006710:	60fb      	str	r3, [r7, #12]
 8006712:	f04f 0200 	mov.w	r2, #0
 8006716:	f04f 0300 	mov.w	r3, #0
 800671a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800671e:	4629      	mov	r1, r5
 8006720:	024b      	lsls	r3, r1, #9
 8006722:	4621      	mov	r1, r4
 8006724:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006728:	4621      	mov	r1, r4
 800672a:	024a      	lsls	r2, r1, #9
 800672c:	4610      	mov	r0, r2
 800672e:	4619      	mov	r1, r3
 8006730:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006732:	2200      	movs	r2, #0
 8006734:	62bb      	str	r3, [r7, #40]	; 0x28
 8006736:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006738:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800673c:	f7f9 fe5a 	bl	80003f4 <__aeabi_uldivmod>
 8006740:	4602      	mov	r2, r0
 8006742:	460b      	mov	r3, r1
 8006744:	4613      	mov	r3, r2
 8006746:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006748:	e058      	b.n	80067fc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800674a:	4b38      	ldr	r3, [pc, #224]	; (800682c <HAL_RCC_GetSysClockFreq+0x200>)
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	099b      	lsrs	r3, r3, #6
 8006750:	2200      	movs	r2, #0
 8006752:	4618      	mov	r0, r3
 8006754:	4611      	mov	r1, r2
 8006756:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800675a:	623b      	str	r3, [r7, #32]
 800675c:	2300      	movs	r3, #0
 800675e:	627b      	str	r3, [r7, #36]	; 0x24
 8006760:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006764:	4642      	mov	r2, r8
 8006766:	464b      	mov	r3, r9
 8006768:	f04f 0000 	mov.w	r0, #0
 800676c:	f04f 0100 	mov.w	r1, #0
 8006770:	0159      	lsls	r1, r3, #5
 8006772:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006776:	0150      	lsls	r0, r2, #5
 8006778:	4602      	mov	r2, r0
 800677a:	460b      	mov	r3, r1
 800677c:	4641      	mov	r1, r8
 800677e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006782:	4649      	mov	r1, r9
 8006784:	eb63 0b01 	sbc.w	fp, r3, r1
 8006788:	f04f 0200 	mov.w	r2, #0
 800678c:	f04f 0300 	mov.w	r3, #0
 8006790:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006794:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006798:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800679c:	ebb2 040a 	subs.w	r4, r2, sl
 80067a0:	eb63 050b 	sbc.w	r5, r3, fp
 80067a4:	f04f 0200 	mov.w	r2, #0
 80067a8:	f04f 0300 	mov.w	r3, #0
 80067ac:	00eb      	lsls	r3, r5, #3
 80067ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80067b2:	00e2      	lsls	r2, r4, #3
 80067b4:	4614      	mov	r4, r2
 80067b6:	461d      	mov	r5, r3
 80067b8:	4643      	mov	r3, r8
 80067ba:	18e3      	adds	r3, r4, r3
 80067bc:	603b      	str	r3, [r7, #0]
 80067be:	464b      	mov	r3, r9
 80067c0:	eb45 0303 	adc.w	r3, r5, r3
 80067c4:	607b      	str	r3, [r7, #4]
 80067c6:	f04f 0200 	mov.w	r2, #0
 80067ca:	f04f 0300 	mov.w	r3, #0
 80067ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80067d2:	4629      	mov	r1, r5
 80067d4:	028b      	lsls	r3, r1, #10
 80067d6:	4621      	mov	r1, r4
 80067d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80067dc:	4621      	mov	r1, r4
 80067de:	028a      	lsls	r2, r1, #10
 80067e0:	4610      	mov	r0, r2
 80067e2:	4619      	mov	r1, r3
 80067e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067e6:	2200      	movs	r2, #0
 80067e8:	61bb      	str	r3, [r7, #24]
 80067ea:	61fa      	str	r2, [r7, #28]
 80067ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80067f0:	f7f9 fe00 	bl	80003f4 <__aeabi_uldivmod>
 80067f4:	4602      	mov	r2, r0
 80067f6:	460b      	mov	r3, r1
 80067f8:	4613      	mov	r3, r2
 80067fa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80067fc:	4b0b      	ldr	r3, [pc, #44]	; (800682c <HAL_RCC_GetSysClockFreq+0x200>)
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	0c1b      	lsrs	r3, r3, #16
 8006802:	f003 0303 	and.w	r3, r3, #3
 8006806:	3301      	adds	r3, #1
 8006808:	005b      	lsls	r3, r3, #1
 800680a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800680c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800680e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006810:	fbb2 f3f3 	udiv	r3, r2, r3
 8006814:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006816:	e002      	b.n	800681e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006818:	4b05      	ldr	r3, [pc, #20]	; (8006830 <HAL_RCC_GetSysClockFreq+0x204>)
 800681a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800681c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800681e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006820:	4618      	mov	r0, r3
 8006822:	3750      	adds	r7, #80	; 0x50
 8006824:	46bd      	mov	sp, r7
 8006826:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800682a:	bf00      	nop
 800682c:	40023800 	.word	0x40023800
 8006830:	00f42400 	.word	0x00f42400
 8006834:	007a1200 	.word	0x007a1200

08006838 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006838:	b480      	push	{r7}
 800683a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800683c:	4b03      	ldr	r3, [pc, #12]	; (800684c <HAL_RCC_GetHCLKFreq+0x14>)
 800683e:	681b      	ldr	r3, [r3, #0]
}
 8006840:	4618      	mov	r0, r3
 8006842:	46bd      	mov	sp, r7
 8006844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006848:	4770      	bx	lr
 800684a:	bf00      	nop
 800684c:	20000034 	.word	0x20000034

08006850 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006854:	f7ff fff0 	bl	8006838 <HAL_RCC_GetHCLKFreq>
 8006858:	4602      	mov	r2, r0
 800685a:	4b05      	ldr	r3, [pc, #20]	; (8006870 <HAL_RCC_GetPCLK1Freq+0x20>)
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	0a9b      	lsrs	r3, r3, #10
 8006860:	f003 0307 	and.w	r3, r3, #7
 8006864:	4903      	ldr	r1, [pc, #12]	; (8006874 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006866:	5ccb      	ldrb	r3, [r1, r3]
 8006868:	fa22 f303 	lsr.w	r3, r2, r3
}
 800686c:	4618      	mov	r0, r3
 800686e:	bd80      	pop	{r7, pc}
 8006870:	40023800 	.word	0x40023800
 8006874:	080093a8 	.word	0x080093a8

08006878 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800687c:	f7ff ffdc 	bl	8006838 <HAL_RCC_GetHCLKFreq>
 8006880:	4602      	mov	r2, r0
 8006882:	4b05      	ldr	r3, [pc, #20]	; (8006898 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	0b5b      	lsrs	r3, r3, #13
 8006888:	f003 0307 	and.w	r3, r3, #7
 800688c:	4903      	ldr	r1, [pc, #12]	; (800689c <HAL_RCC_GetPCLK2Freq+0x24>)
 800688e:	5ccb      	ldrb	r3, [r1, r3]
 8006890:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006894:	4618      	mov	r0, r3
 8006896:	bd80      	pop	{r7, pc}
 8006898:	40023800 	.word	0x40023800
 800689c:	080093a8 	.word	0x080093a8

080068a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b082      	sub	sp, #8
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d101      	bne.n	80068b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	e041      	b.n	8006936 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d106      	bne.n	80068cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2200      	movs	r2, #0
 80068c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f7fb fb72 	bl	8001fb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2202      	movs	r2, #2
 80068d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	3304      	adds	r3, #4
 80068dc:	4619      	mov	r1, r3
 80068de:	4610      	mov	r0, r2
 80068e0:	f001 f834 	bl	800794c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2201      	movs	r2, #1
 80068e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2201      	movs	r2, #1
 80068f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2201      	movs	r2, #1
 8006900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2201      	movs	r2, #1
 8006908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2201      	movs	r2, #1
 8006918:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2201      	movs	r2, #1
 8006928:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2201      	movs	r2, #1
 8006930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006934:	2300      	movs	r3, #0
}
 8006936:	4618      	mov	r0, r3
 8006938:	3708      	adds	r7, #8
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
	...

08006940 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006940:	b480      	push	{r7}
 8006942:	b085      	sub	sp, #20
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800694e:	b2db      	uxtb	r3, r3
 8006950:	2b01      	cmp	r3, #1
 8006952:	d001      	beq.n	8006958 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	e03c      	b.n	80069d2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2202      	movs	r2, #2
 800695c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a1e      	ldr	r2, [pc, #120]	; (80069e0 <HAL_TIM_Base_Start+0xa0>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d018      	beq.n	800699c <HAL_TIM_Base_Start+0x5c>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006972:	d013      	beq.n	800699c <HAL_TIM_Base_Start+0x5c>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a1a      	ldr	r2, [pc, #104]	; (80069e4 <HAL_TIM_Base_Start+0xa4>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d00e      	beq.n	800699c <HAL_TIM_Base_Start+0x5c>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a19      	ldr	r2, [pc, #100]	; (80069e8 <HAL_TIM_Base_Start+0xa8>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d009      	beq.n	800699c <HAL_TIM_Base_Start+0x5c>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a17      	ldr	r2, [pc, #92]	; (80069ec <HAL_TIM_Base_Start+0xac>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d004      	beq.n	800699c <HAL_TIM_Base_Start+0x5c>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a16      	ldr	r2, [pc, #88]	; (80069f0 <HAL_TIM_Base_Start+0xb0>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d111      	bne.n	80069c0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	f003 0307 	and.w	r3, r3, #7
 80069a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2b06      	cmp	r3, #6
 80069ac:	d010      	beq.n	80069d0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f042 0201 	orr.w	r2, r2, #1
 80069bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069be:	e007      	b.n	80069d0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f042 0201 	orr.w	r2, r2, #1
 80069ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80069d0:	2300      	movs	r3, #0
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3714      	adds	r7, #20
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr
 80069de:	bf00      	nop
 80069e0:	40010000 	.word	0x40010000
 80069e4:	40000400 	.word	0x40000400
 80069e8:	40000800 	.word	0x40000800
 80069ec:	40000c00 	.word	0x40000c00
 80069f0:	40014000 	.word	0x40014000

080069f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b085      	sub	sp, #20
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d001      	beq.n	8006a0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	e044      	b.n	8006a96 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2202      	movs	r2, #2
 8006a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	68da      	ldr	r2, [r3, #12]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f042 0201 	orr.w	r2, r2, #1
 8006a22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a1e      	ldr	r2, [pc, #120]	; (8006aa4 <HAL_TIM_Base_Start_IT+0xb0>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d018      	beq.n	8006a60 <HAL_TIM_Base_Start_IT+0x6c>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a36:	d013      	beq.n	8006a60 <HAL_TIM_Base_Start_IT+0x6c>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a1a      	ldr	r2, [pc, #104]	; (8006aa8 <HAL_TIM_Base_Start_IT+0xb4>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d00e      	beq.n	8006a60 <HAL_TIM_Base_Start_IT+0x6c>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a19      	ldr	r2, [pc, #100]	; (8006aac <HAL_TIM_Base_Start_IT+0xb8>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d009      	beq.n	8006a60 <HAL_TIM_Base_Start_IT+0x6c>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a17      	ldr	r2, [pc, #92]	; (8006ab0 <HAL_TIM_Base_Start_IT+0xbc>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d004      	beq.n	8006a60 <HAL_TIM_Base_Start_IT+0x6c>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a16      	ldr	r2, [pc, #88]	; (8006ab4 <HAL_TIM_Base_Start_IT+0xc0>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d111      	bne.n	8006a84 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	f003 0307 	and.w	r3, r3, #7
 8006a6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2b06      	cmp	r3, #6
 8006a70:	d010      	beq.n	8006a94 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f042 0201 	orr.w	r2, r2, #1
 8006a80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a82:	e007      	b.n	8006a94 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f042 0201 	orr.w	r2, r2, #1
 8006a92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a94:	2300      	movs	r3, #0
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3714      	adds	r7, #20
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr
 8006aa2:	bf00      	nop
 8006aa4:	40010000 	.word	0x40010000
 8006aa8:	40000400 	.word	0x40000400
 8006aac:	40000800 	.word	0x40000800
 8006ab0:	40000c00 	.word	0x40000c00
 8006ab4:	40014000 	.word	0x40014000

08006ab8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b082      	sub	sp, #8
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d101      	bne.n	8006aca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	e041      	b.n	8006b4e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d106      	bne.n	8006ae4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 f839 	bl	8006b56 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2202      	movs	r2, #2
 8006ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	3304      	adds	r3, #4
 8006af4:	4619      	mov	r1, r3
 8006af6:	4610      	mov	r0, r2
 8006af8:	f000 ff28 	bl	800794c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2201      	movs	r2, #1
 8006b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2201      	movs	r2, #1
 8006b18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2201      	movs	r2, #1
 8006b28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2201      	movs	r2, #1
 8006b38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2201      	movs	r2, #1
 8006b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3708      	adds	r7, #8
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}

08006b56 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006b56:	b480      	push	{r7}
 8006b58:	b083      	sub	sp, #12
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006b5e:	bf00      	nop
 8006b60:	370c      	adds	r7, #12
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr
	...

08006b6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b084      	sub	sp, #16
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d109      	bne.n	8006b90 <HAL_TIM_PWM_Start+0x24>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	bf14      	ite	ne
 8006b88:	2301      	movne	r3, #1
 8006b8a:	2300      	moveq	r3, #0
 8006b8c:	b2db      	uxtb	r3, r3
 8006b8e:	e022      	b.n	8006bd6 <HAL_TIM_PWM_Start+0x6a>
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	2b04      	cmp	r3, #4
 8006b94:	d109      	bne.n	8006baa <HAL_TIM_PWM_Start+0x3e>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006b9c:	b2db      	uxtb	r3, r3
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	bf14      	ite	ne
 8006ba2:	2301      	movne	r3, #1
 8006ba4:	2300      	moveq	r3, #0
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	e015      	b.n	8006bd6 <HAL_TIM_PWM_Start+0x6a>
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	2b08      	cmp	r3, #8
 8006bae:	d109      	bne.n	8006bc4 <HAL_TIM_PWM_Start+0x58>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006bb6:	b2db      	uxtb	r3, r3
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	bf14      	ite	ne
 8006bbc:	2301      	movne	r3, #1
 8006bbe:	2300      	moveq	r3, #0
 8006bc0:	b2db      	uxtb	r3, r3
 8006bc2:	e008      	b.n	8006bd6 <HAL_TIM_PWM_Start+0x6a>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006bca:	b2db      	uxtb	r3, r3
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	bf14      	ite	ne
 8006bd0:	2301      	movne	r3, #1
 8006bd2:	2300      	moveq	r3, #0
 8006bd4:	b2db      	uxtb	r3, r3
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d001      	beq.n	8006bde <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e068      	b.n	8006cb0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d104      	bne.n	8006bee <HAL_TIM_PWM_Start+0x82>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2202      	movs	r2, #2
 8006be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006bec:	e013      	b.n	8006c16 <HAL_TIM_PWM_Start+0xaa>
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	2b04      	cmp	r3, #4
 8006bf2:	d104      	bne.n	8006bfe <HAL_TIM_PWM_Start+0x92>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2202      	movs	r2, #2
 8006bf8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006bfc:	e00b      	b.n	8006c16 <HAL_TIM_PWM_Start+0xaa>
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	2b08      	cmp	r3, #8
 8006c02:	d104      	bne.n	8006c0e <HAL_TIM_PWM_Start+0xa2>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2202      	movs	r2, #2
 8006c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c0c:	e003      	b.n	8006c16 <HAL_TIM_PWM_Start+0xaa>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2202      	movs	r2, #2
 8006c12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	6839      	ldr	r1, [r7, #0]
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f001 fa58 	bl	80080d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a23      	ldr	r2, [pc, #140]	; (8006cb8 <HAL_TIM_PWM_Start+0x14c>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d107      	bne.n	8006c3e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006c3c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a1d      	ldr	r2, [pc, #116]	; (8006cb8 <HAL_TIM_PWM_Start+0x14c>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d018      	beq.n	8006c7a <HAL_TIM_PWM_Start+0x10e>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c50:	d013      	beq.n	8006c7a <HAL_TIM_PWM_Start+0x10e>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a19      	ldr	r2, [pc, #100]	; (8006cbc <HAL_TIM_PWM_Start+0x150>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d00e      	beq.n	8006c7a <HAL_TIM_PWM_Start+0x10e>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a17      	ldr	r2, [pc, #92]	; (8006cc0 <HAL_TIM_PWM_Start+0x154>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d009      	beq.n	8006c7a <HAL_TIM_PWM_Start+0x10e>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a16      	ldr	r2, [pc, #88]	; (8006cc4 <HAL_TIM_PWM_Start+0x158>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d004      	beq.n	8006c7a <HAL_TIM_PWM_Start+0x10e>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a14      	ldr	r2, [pc, #80]	; (8006cc8 <HAL_TIM_PWM_Start+0x15c>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d111      	bne.n	8006c9e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	f003 0307 	and.w	r3, r3, #7
 8006c84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2b06      	cmp	r3, #6
 8006c8a:	d010      	beq.n	8006cae <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f042 0201 	orr.w	r2, r2, #1
 8006c9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c9c:	e007      	b.n	8006cae <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	681a      	ldr	r2, [r3, #0]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f042 0201 	orr.w	r2, r2, #1
 8006cac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006cae:	2300      	movs	r3, #0
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3710      	adds	r7, #16
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}
 8006cb8:	40010000 	.word	0x40010000
 8006cbc:	40000400 	.word	0x40000400
 8006cc0:	40000800 	.word	0x40000800
 8006cc4:	40000c00 	.word	0x40000c00
 8006cc8:	40014000 	.word	0x40014000

08006ccc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b082      	sub	sp, #8
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d101      	bne.n	8006cde <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e041      	b.n	8006d62 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d106      	bne.n	8006cf8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2200      	movs	r2, #0
 8006cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f000 f839 	bl	8006d6a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2202      	movs	r2, #2
 8006cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681a      	ldr	r2, [r3, #0]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	3304      	adds	r3, #4
 8006d08:	4619      	mov	r1, r3
 8006d0a:	4610      	mov	r0, r2
 8006d0c:	f000 fe1e 	bl	800794c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2201      	movs	r2, #1
 8006d14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2201      	movs	r2, #1
 8006d24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2201      	movs	r2, #1
 8006d34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2201      	movs	r2, #1
 8006d44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2201      	movs	r2, #1
 8006d54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d60:	2300      	movs	r3, #0
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3708      	adds	r7, #8
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}

08006d6a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006d6a:	b480      	push	{r7}
 8006d6c:	b083      	sub	sp, #12
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006d72:	bf00      	nop
 8006d74:	370c      	adds	r7, #12
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr
	...

08006d80 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b086      	sub	sp, #24
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	60f8      	str	r0, [r7, #12]
 8006d88:	60b9      	str	r1, [r7, #8]
 8006d8a:	607a      	str	r2, [r7, #4]
 8006d8c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d104      	bne.n	8006da2 <HAL_TIM_IC_Start_DMA+0x22>
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d9e:	b2db      	uxtb	r3, r3
 8006da0:	e013      	b.n	8006dca <HAL_TIM_IC_Start_DMA+0x4a>
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	2b04      	cmp	r3, #4
 8006da6:	d104      	bne.n	8006db2 <HAL_TIM_IC_Start_DMA+0x32>
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006dae:	b2db      	uxtb	r3, r3
 8006db0:	e00b      	b.n	8006dca <HAL_TIM_IC_Start_DMA+0x4a>
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	2b08      	cmp	r3, #8
 8006db6:	d104      	bne.n	8006dc2 <HAL_TIM_IC_Start_DMA+0x42>
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006dbe:	b2db      	uxtb	r3, r3
 8006dc0:	e003      	b.n	8006dca <HAL_TIM_IC_Start_DMA+0x4a>
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006dc8:	b2db      	uxtb	r3, r3
 8006dca:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d104      	bne.n	8006ddc <HAL_TIM_IC_Start_DMA+0x5c>
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006dd8:	b2db      	uxtb	r3, r3
 8006dda:	e013      	b.n	8006e04 <HAL_TIM_IC_Start_DMA+0x84>
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	2b04      	cmp	r3, #4
 8006de0:	d104      	bne.n	8006dec <HAL_TIM_IC_Start_DMA+0x6c>
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	e00b      	b.n	8006e04 <HAL_TIM_IC_Start_DMA+0x84>
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	2b08      	cmp	r3, #8
 8006df0:	d104      	bne.n	8006dfc <HAL_TIM_IC_Start_DMA+0x7c>
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006df8:	b2db      	uxtb	r3, r3
 8006dfa:	e003      	b.n	8006e04 <HAL_TIM_IC_Start_DMA+0x84>
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e02:	b2db      	uxtb	r3, r3
 8006e04:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8006e06:	7dbb      	ldrb	r3, [r7, #22]
 8006e08:	2b02      	cmp	r3, #2
 8006e0a:	d002      	beq.n	8006e12 <HAL_TIM_IC_Start_DMA+0x92>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8006e0c:	7d7b      	ldrb	r3, [r7, #21]
 8006e0e:	2b02      	cmp	r3, #2
 8006e10:	d101      	bne.n	8006e16 <HAL_TIM_IC_Start_DMA+0x96>
  {
    return HAL_BUSY;
 8006e12:	2302      	movs	r3, #2
 8006e14:	e13c      	b.n	8007090 <HAL_TIM_IC_Start_DMA+0x310>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 8006e16:	7dbb      	ldrb	r3, [r7, #22]
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d143      	bne.n	8006ea4 <HAL_TIM_IC_Start_DMA+0x124>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 8006e1c:	7d7b      	ldrb	r3, [r7, #21]
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d140      	bne.n	8006ea4 <HAL_TIM_IC_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d104      	bne.n	8006e32 <HAL_TIM_IC_Start_DMA+0xb2>
 8006e28:	887b      	ldrh	r3, [r7, #2]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d001      	beq.n	8006e32 <HAL_TIM_IC_Start_DMA+0xb2>
    {
      return HAL_ERROR;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	e12e      	b.n	8007090 <HAL_TIM_IC_Start_DMA+0x310>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d104      	bne.n	8006e42 <HAL_TIM_IC_Start_DMA+0xc2>
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2202      	movs	r2, #2
 8006e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e40:	e013      	b.n	8006e6a <HAL_TIM_IC_Start_DMA+0xea>
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	2b04      	cmp	r3, #4
 8006e46:	d104      	bne.n	8006e52 <HAL_TIM_IC_Start_DMA+0xd2>
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2202      	movs	r2, #2
 8006e4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e50:	e00b      	b.n	8006e6a <HAL_TIM_IC_Start_DMA+0xea>
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	2b08      	cmp	r3, #8
 8006e56:	d104      	bne.n	8006e62 <HAL_TIM_IC_Start_DMA+0xe2>
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2202      	movs	r2, #2
 8006e5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e60:	e003      	b.n	8006e6a <HAL_TIM_IC_Start_DMA+0xea>
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2202      	movs	r2, #2
 8006e66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d104      	bne.n	8006e7a <HAL_TIM_IC_Start_DMA+0xfa>
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2202      	movs	r2, #2
 8006e74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ((pData == NULL) && (Length > 0U))
 8006e78:	e016      	b.n	8006ea8 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	2b04      	cmp	r3, #4
 8006e7e:	d104      	bne.n	8006e8a <HAL_TIM_IC_Start_DMA+0x10a>
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2202      	movs	r2, #2
 8006e84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ((pData == NULL) && (Length > 0U))
 8006e88:	e00e      	b.n	8006ea8 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	2b08      	cmp	r3, #8
 8006e8e:	d104      	bne.n	8006e9a <HAL_TIM_IC_Start_DMA+0x11a>
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2202      	movs	r2, #2
 8006e94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 8006e98:	e006      	b.n	8006ea8 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2202      	movs	r2, #2
 8006e9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 8006ea2:	e001      	b.n	8006ea8 <HAL_TIM_IC_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	e0f3      	b.n	8007090 <HAL_TIM_IC_Start_DMA+0x310>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	2201      	movs	r2, #1
 8006eae:	68b9      	ldr	r1, [r7, #8]
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f001 f90f 	bl	80080d4 <TIM_CCxChannelCmd>

  switch (Channel)
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	2b0c      	cmp	r3, #12
 8006eba:	f200 80ad 	bhi.w	8007018 <HAL_TIM_IC_Start_DMA+0x298>
 8006ebe:	a201      	add	r2, pc, #4	; (adr r2, 8006ec4 <HAL_TIM_IC_Start_DMA+0x144>)
 8006ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ec4:	08006ef9 	.word	0x08006ef9
 8006ec8:	08007019 	.word	0x08007019
 8006ecc:	08007019 	.word	0x08007019
 8006ed0:	08007019 	.word	0x08007019
 8006ed4:	08006f41 	.word	0x08006f41
 8006ed8:	08007019 	.word	0x08007019
 8006edc:	08007019 	.word	0x08007019
 8006ee0:	08007019 	.word	0x08007019
 8006ee4:	08006f89 	.word	0x08006f89
 8006ee8:	08007019 	.word	0x08007019
 8006eec:	08007019 	.word	0x08007019
 8006ef0:	08007019 	.word	0x08007019
 8006ef4:	08006fd1 	.word	0x08006fd1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006efc:	4a66      	ldr	r2, [pc, #408]	; (8007098 <HAL_TIM_IC_Start_DMA+0x318>)
 8006efe:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f04:	4a65      	ldr	r2, [pc, #404]	; (800709c <HAL_TIM_IC_Start_DMA+0x31c>)
 8006f06:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0c:	4a64      	ldr	r2, [pc, #400]	; (80070a0 <HAL_TIM_IC_Start_DMA+0x320>)
 8006f0e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	3334      	adds	r3, #52	; 0x34
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	687a      	ldr	r2, [r7, #4]
 8006f1e:	887b      	ldrh	r3, [r7, #2]
 8006f20:	f7fb fc98 	bl	8002854 <HAL_DMA_Start_IT>
 8006f24:	4603      	mov	r3, r0
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d001      	beq.n	8006f2e <HAL_TIM_IC_Start_DMA+0x1ae>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	e0b0      	b.n	8007090 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	68da      	ldr	r2, [r3, #12]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f3c:	60da      	str	r2, [r3, #12]
      break;
 8006f3e:	e06e      	b.n	800701e <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f44:	4a54      	ldr	r2, [pc, #336]	; (8007098 <HAL_TIM_IC_Start_DMA+0x318>)
 8006f46:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f4c:	4a53      	ldr	r2, [pc, #332]	; (800709c <HAL_TIM_IC_Start_DMA+0x31c>)
 8006f4e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f54:	4a52      	ldr	r2, [pc, #328]	; (80070a0 <HAL_TIM_IC_Start_DMA+0x320>)
 8006f56:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	3338      	adds	r3, #56	; 0x38
 8006f62:	4619      	mov	r1, r3
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	887b      	ldrh	r3, [r7, #2]
 8006f68:	f7fb fc74 	bl	8002854 <HAL_DMA_Start_IT>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d001      	beq.n	8006f76 <HAL_TIM_IC_Start_DMA+0x1f6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	e08c      	b.n	8007090 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	68da      	ldr	r2, [r3, #12]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006f84:	60da      	str	r2, [r3, #12]
      break;
 8006f86:	e04a      	b.n	800701e <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f8c:	4a42      	ldr	r2, [pc, #264]	; (8007098 <HAL_TIM_IC_Start_DMA+0x318>)
 8006f8e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f94:	4a41      	ldr	r2, [pc, #260]	; (800709c <HAL_TIM_IC_Start_DMA+0x31c>)
 8006f96:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f9c:	4a40      	ldr	r2, [pc, #256]	; (80070a0 <HAL_TIM_IC_Start_DMA+0x320>)
 8006f9e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	333c      	adds	r3, #60	; 0x3c
 8006faa:	4619      	mov	r1, r3
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	887b      	ldrh	r3, [r7, #2]
 8006fb0:	f7fb fc50 	bl	8002854 <HAL_DMA_Start_IT>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d001      	beq.n	8006fbe <HAL_TIM_IC_Start_DMA+0x23e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	e068      	b.n	8007090 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	68da      	ldr	r2, [r3, #12]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006fcc:	60da      	str	r2, [r3, #12]
      break;
 8006fce:	e026      	b.n	800701e <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fd4:	4a30      	ldr	r2, [pc, #192]	; (8007098 <HAL_TIM_IC_Start_DMA+0x318>)
 8006fd6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fdc:	4a2f      	ldr	r2, [pc, #188]	; (800709c <HAL_TIM_IC_Start_DMA+0x31c>)
 8006fde:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fe4:	4a2e      	ldr	r2, [pc, #184]	; (80070a0 <HAL_TIM_IC_Start_DMA+0x320>)
 8006fe6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	3340      	adds	r3, #64	; 0x40
 8006ff2:	4619      	mov	r1, r3
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	887b      	ldrh	r3, [r7, #2]
 8006ff8:	f7fb fc2c 	bl	8002854 <HAL_DMA_Start_IT>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d001      	beq.n	8007006 <HAL_TIM_IC_Start_DMA+0x286>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007002:	2301      	movs	r3, #1
 8007004:	e044      	b.n	8007090 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	68da      	ldr	r2, [r3, #12]
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007014:	60da      	str	r2, [r3, #12]
      break;
 8007016:	e002      	b.n	800701e <HAL_TIM_IC_Start_DMA+0x29e>
    }

    default:
      status = HAL_ERROR;
 8007018:	2301      	movs	r3, #1
 800701a:	75fb      	strb	r3, [r7, #23]
      break;
 800701c:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a20      	ldr	r2, [pc, #128]	; (80070a4 <HAL_TIM_IC_Start_DMA+0x324>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d018      	beq.n	800705a <HAL_TIM_IC_Start_DMA+0x2da>
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007030:	d013      	beq.n	800705a <HAL_TIM_IC_Start_DMA+0x2da>
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a1c      	ldr	r2, [pc, #112]	; (80070a8 <HAL_TIM_IC_Start_DMA+0x328>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d00e      	beq.n	800705a <HAL_TIM_IC_Start_DMA+0x2da>
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a1a      	ldr	r2, [pc, #104]	; (80070ac <HAL_TIM_IC_Start_DMA+0x32c>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d009      	beq.n	800705a <HAL_TIM_IC_Start_DMA+0x2da>
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a19      	ldr	r2, [pc, #100]	; (80070b0 <HAL_TIM_IC_Start_DMA+0x330>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d004      	beq.n	800705a <HAL_TIM_IC_Start_DMA+0x2da>
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a17      	ldr	r2, [pc, #92]	; (80070b4 <HAL_TIM_IC_Start_DMA+0x334>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d111      	bne.n	800707e <HAL_TIM_IC_Start_DMA+0x2fe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	f003 0307 	and.w	r3, r3, #7
 8007064:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	2b06      	cmp	r3, #6
 800706a:	d010      	beq.n	800708e <HAL_TIM_IC_Start_DMA+0x30e>
    {
      __HAL_TIM_ENABLE(htim);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f042 0201 	orr.w	r2, r2, #1
 800707a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800707c:	e007      	b.n	800708e <HAL_TIM_IC_Start_DMA+0x30e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	681a      	ldr	r2, [r3, #0]
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f042 0201 	orr.w	r2, r2, #1
 800708c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800708e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007090:	4618      	mov	r0, r3
 8007092:	3718      	adds	r7, #24
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}
 8007098:	0800781d 	.word	0x0800781d
 800709c:	080078e5 	.word	0x080078e5
 80070a0:	0800778b 	.word	0x0800778b
 80070a4:	40010000 	.word	0x40010000
 80070a8:	40000400 	.word	0x40000400
 80070ac:	40000800 	.word	0x40000800
 80070b0:	40000c00 	.word	0x40000c00
 80070b4:	40014000 	.word	0x40014000

080070b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b082      	sub	sp, #8
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	691b      	ldr	r3, [r3, #16]
 80070c6:	f003 0302 	and.w	r3, r3, #2
 80070ca:	2b02      	cmp	r3, #2
 80070cc:	d122      	bne.n	8007114 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	68db      	ldr	r3, [r3, #12]
 80070d4:	f003 0302 	and.w	r3, r3, #2
 80070d8:	2b02      	cmp	r3, #2
 80070da:	d11b      	bne.n	8007114 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f06f 0202 	mvn.w	r2, #2
 80070e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2201      	movs	r2, #1
 80070ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	699b      	ldr	r3, [r3, #24]
 80070f2:	f003 0303 	and.w	r3, r3, #3
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d003      	beq.n	8007102 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 fb13 	bl	8007726 <HAL_TIM_IC_CaptureCallback>
 8007100:	e005      	b.n	800710e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 fb05 	bl	8007712 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 fb20 	bl	800774e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2200      	movs	r2, #0
 8007112:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	691b      	ldr	r3, [r3, #16]
 800711a:	f003 0304 	and.w	r3, r3, #4
 800711e:	2b04      	cmp	r3, #4
 8007120:	d122      	bne.n	8007168 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	68db      	ldr	r3, [r3, #12]
 8007128:	f003 0304 	and.w	r3, r3, #4
 800712c:	2b04      	cmp	r3, #4
 800712e:	d11b      	bne.n	8007168 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f06f 0204 	mvn.w	r2, #4
 8007138:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2202      	movs	r2, #2
 800713e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	699b      	ldr	r3, [r3, #24]
 8007146:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800714a:	2b00      	cmp	r3, #0
 800714c:	d003      	beq.n	8007156 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 fae9 	bl	8007726 <HAL_TIM_IC_CaptureCallback>
 8007154:	e005      	b.n	8007162 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 fadb 	bl	8007712 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f000 faf6 	bl	800774e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2200      	movs	r2, #0
 8007166:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	691b      	ldr	r3, [r3, #16]
 800716e:	f003 0308 	and.w	r3, r3, #8
 8007172:	2b08      	cmp	r3, #8
 8007174:	d122      	bne.n	80071bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	68db      	ldr	r3, [r3, #12]
 800717c:	f003 0308 	and.w	r3, r3, #8
 8007180:	2b08      	cmp	r3, #8
 8007182:	d11b      	bne.n	80071bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f06f 0208 	mvn.w	r2, #8
 800718c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2204      	movs	r2, #4
 8007192:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	69db      	ldr	r3, [r3, #28]
 800719a:	f003 0303 	and.w	r3, r3, #3
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d003      	beq.n	80071aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f000 fabf 	bl	8007726 <HAL_TIM_IC_CaptureCallback>
 80071a8:	e005      	b.n	80071b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f000 fab1 	bl	8007712 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f000 facc 	bl	800774e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2200      	movs	r2, #0
 80071ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	691b      	ldr	r3, [r3, #16]
 80071c2:	f003 0310 	and.w	r3, r3, #16
 80071c6:	2b10      	cmp	r3, #16
 80071c8:	d122      	bne.n	8007210 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	f003 0310 	and.w	r3, r3, #16
 80071d4:	2b10      	cmp	r3, #16
 80071d6:	d11b      	bne.n	8007210 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f06f 0210 	mvn.w	r2, #16
 80071e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2208      	movs	r2, #8
 80071e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	69db      	ldr	r3, [r3, #28]
 80071ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d003      	beq.n	80071fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 fa95 	bl	8007726 <HAL_TIM_IC_CaptureCallback>
 80071fc:	e005      	b.n	800720a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f000 fa87 	bl	8007712 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f000 faa2 	bl	800774e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2200      	movs	r2, #0
 800720e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	691b      	ldr	r3, [r3, #16]
 8007216:	f003 0301 	and.w	r3, r3, #1
 800721a:	2b01      	cmp	r3, #1
 800721c:	d10e      	bne.n	800723c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	68db      	ldr	r3, [r3, #12]
 8007224:	f003 0301 	and.w	r3, r3, #1
 8007228:	2b01      	cmp	r3, #1
 800722a:	d107      	bne.n	800723c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f06f 0201 	mvn.w	r2, #1
 8007234:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f7fa fdb0 	bl	8001d9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	691b      	ldr	r3, [r3, #16]
 8007242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007246:	2b80      	cmp	r3, #128	; 0x80
 8007248:	d10e      	bne.n	8007268 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	68db      	ldr	r3, [r3, #12]
 8007250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007254:	2b80      	cmp	r3, #128	; 0x80
 8007256:	d107      	bne.n	8007268 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 ffd4 	bl	8008210 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	691b      	ldr	r3, [r3, #16]
 800726e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007272:	2b40      	cmp	r3, #64	; 0x40
 8007274:	d10e      	bne.n	8007294 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	68db      	ldr	r3, [r3, #12]
 800727c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007280:	2b40      	cmp	r3, #64	; 0x40
 8007282:	d107      	bne.n	8007294 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800728c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 fa67 	bl	8007762 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	691b      	ldr	r3, [r3, #16]
 800729a:	f003 0320 	and.w	r3, r3, #32
 800729e:	2b20      	cmp	r3, #32
 80072a0:	d10e      	bne.n	80072c0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	68db      	ldr	r3, [r3, #12]
 80072a8:	f003 0320 	and.w	r3, r3, #32
 80072ac:	2b20      	cmp	r3, #32
 80072ae:	d107      	bne.n	80072c0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f06f 0220 	mvn.w	r2, #32
 80072b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 ff9e 	bl	80081fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80072c0:	bf00      	nop
 80072c2:	3708      	adds	r7, #8
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b086      	sub	sp, #24
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	60f8      	str	r0, [r7, #12]
 80072d0:	60b9      	str	r1, [r7, #8]
 80072d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072d4:	2300      	movs	r3, #0
 80072d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072de:	2b01      	cmp	r3, #1
 80072e0:	d101      	bne.n	80072e6 <HAL_TIM_IC_ConfigChannel+0x1e>
 80072e2:	2302      	movs	r3, #2
 80072e4:	e088      	b.n	80073f8 <HAL_TIM_IC_ConfigChannel+0x130>
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2201      	movs	r2, #1
 80072ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d11b      	bne.n	800732c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	6818      	ldr	r0, [r3, #0]
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	6819      	ldr	r1, [r3, #0]
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	685a      	ldr	r2, [r3, #4]
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	68db      	ldr	r3, [r3, #12]
 8007304:	f000 fd2e 	bl	8007d64 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	699a      	ldr	r2, [r3, #24]
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f022 020c 	bic.w	r2, r2, #12
 8007316:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	6999      	ldr	r1, [r3, #24]
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	689a      	ldr	r2, [r3, #8]
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	430a      	orrs	r2, r1
 8007328:	619a      	str	r2, [r3, #24]
 800732a:	e060      	b.n	80073ee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2b04      	cmp	r3, #4
 8007330:	d11c      	bne.n	800736c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	6818      	ldr	r0, [r3, #0]
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	6819      	ldr	r1, [r3, #0]
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	685a      	ldr	r2, [r3, #4]
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	68db      	ldr	r3, [r3, #12]
 8007342:	f000 fda6 	bl	8007e92 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	699a      	ldr	r2, [r3, #24]
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007354:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	6999      	ldr	r1, [r3, #24]
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	021a      	lsls	r2, r3, #8
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	430a      	orrs	r2, r1
 8007368:	619a      	str	r2, [r3, #24]
 800736a:	e040      	b.n	80073ee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2b08      	cmp	r3, #8
 8007370:	d11b      	bne.n	80073aa <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	6818      	ldr	r0, [r3, #0]
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	6819      	ldr	r1, [r3, #0]
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	685a      	ldr	r2, [r3, #4]
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	68db      	ldr	r3, [r3, #12]
 8007382:	f000 fdf3 	bl	8007f6c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	69da      	ldr	r2, [r3, #28]
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f022 020c 	bic.w	r2, r2, #12
 8007394:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	69d9      	ldr	r1, [r3, #28]
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	689a      	ldr	r2, [r3, #8]
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	430a      	orrs	r2, r1
 80073a6:	61da      	str	r2, [r3, #28]
 80073a8:	e021      	b.n	80073ee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2b0c      	cmp	r3, #12
 80073ae:	d11c      	bne.n	80073ea <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	6818      	ldr	r0, [r3, #0]
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	6819      	ldr	r1, [r3, #0]
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	685a      	ldr	r2, [r3, #4]
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	68db      	ldr	r3, [r3, #12]
 80073c0:	f000 fe10 	bl	8007fe4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	69da      	ldr	r2, [r3, #28]
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80073d2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	69d9      	ldr	r1, [r3, #28]
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	689b      	ldr	r3, [r3, #8]
 80073de:	021a      	lsls	r2, r3, #8
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	430a      	orrs	r2, r1
 80073e6:	61da      	str	r2, [r3, #28]
 80073e8:	e001      	b.n	80073ee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80073ea:	2301      	movs	r3, #1
 80073ec:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2200      	movs	r2, #0
 80073f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80073f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3718      	adds	r7, #24
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}

08007400 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b086      	sub	sp, #24
 8007404:	af00      	add	r7, sp, #0
 8007406:	60f8      	str	r0, [r7, #12]
 8007408:	60b9      	str	r1, [r7, #8]
 800740a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800740c:	2300      	movs	r3, #0
 800740e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007416:	2b01      	cmp	r3, #1
 8007418:	d101      	bne.n	800741e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800741a:	2302      	movs	r3, #2
 800741c:	e0ae      	b.n	800757c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2201      	movs	r2, #1
 8007422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2b0c      	cmp	r3, #12
 800742a:	f200 809f 	bhi.w	800756c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800742e:	a201      	add	r2, pc, #4	; (adr r2, 8007434 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007434:	08007469 	.word	0x08007469
 8007438:	0800756d 	.word	0x0800756d
 800743c:	0800756d 	.word	0x0800756d
 8007440:	0800756d 	.word	0x0800756d
 8007444:	080074a9 	.word	0x080074a9
 8007448:	0800756d 	.word	0x0800756d
 800744c:	0800756d 	.word	0x0800756d
 8007450:	0800756d 	.word	0x0800756d
 8007454:	080074eb 	.word	0x080074eb
 8007458:	0800756d 	.word	0x0800756d
 800745c:	0800756d 	.word	0x0800756d
 8007460:	0800756d 	.word	0x0800756d
 8007464:	0800752b 	.word	0x0800752b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	68b9      	ldr	r1, [r7, #8]
 800746e:	4618      	mov	r0, r3
 8007470:	f000 faec 	bl	8007a4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	699a      	ldr	r2, [r3, #24]
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f042 0208 	orr.w	r2, r2, #8
 8007482:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	699a      	ldr	r2, [r3, #24]
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f022 0204 	bic.w	r2, r2, #4
 8007492:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	6999      	ldr	r1, [r3, #24]
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	691a      	ldr	r2, [r3, #16]
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	430a      	orrs	r2, r1
 80074a4:	619a      	str	r2, [r3, #24]
      break;
 80074a6:	e064      	b.n	8007572 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	68b9      	ldr	r1, [r7, #8]
 80074ae:	4618      	mov	r0, r3
 80074b0:	f000 fb32 	bl	8007b18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	699a      	ldr	r2, [r3, #24]
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80074c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	699a      	ldr	r2, [r3, #24]
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	6999      	ldr	r1, [r3, #24]
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	691b      	ldr	r3, [r3, #16]
 80074de:	021a      	lsls	r2, r3, #8
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	430a      	orrs	r2, r1
 80074e6:	619a      	str	r2, [r3, #24]
      break;
 80074e8:	e043      	b.n	8007572 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	68b9      	ldr	r1, [r7, #8]
 80074f0:	4618      	mov	r0, r3
 80074f2:	f000 fb7d 	bl	8007bf0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	69da      	ldr	r2, [r3, #28]
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f042 0208 	orr.w	r2, r2, #8
 8007504:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	69da      	ldr	r2, [r3, #28]
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f022 0204 	bic.w	r2, r2, #4
 8007514:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	69d9      	ldr	r1, [r3, #28]
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	691a      	ldr	r2, [r3, #16]
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	430a      	orrs	r2, r1
 8007526:	61da      	str	r2, [r3, #28]
      break;
 8007528:	e023      	b.n	8007572 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	68b9      	ldr	r1, [r7, #8]
 8007530:	4618      	mov	r0, r3
 8007532:	f000 fbc7 	bl	8007cc4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	69da      	ldr	r2, [r3, #28]
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007544:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	69da      	ldr	r2, [r3, #28]
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007554:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	69d9      	ldr	r1, [r3, #28]
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	691b      	ldr	r3, [r3, #16]
 8007560:	021a      	lsls	r2, r3, #8
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	430a      	orrs	r2, r1
 8007568:	61da      	str	r2, [r3, #28]
      break;
 800756a:	e002      	b.n	8007572 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800756c:	2301      	movs	r3, #1
 800756e:	75fb      	strb	r3, [r7, #23]
      break;
 8007570:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2200      	movs	r2, #0
 8007576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800757a:	7dfb      	ldrb	r3, [r7, #23]
}
 800757c:	4618      	mov	r0, r3
 800757e:	3718      	adds	r7, #24
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}

08007584 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800758e:	2300      	movs	r3, #0
 8007590:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007598:	2b01      	cmp	r3, #1
 800759a:	d101      	bne.n	80075a0 <HAL_TIM_ConfigClockSource+0x1c>
 800759c:	2302      	movs	r3, #2
 800759e:	e0b4      	b.n	800770a <HAL_TIM_ConfigClockSource+0x186>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2201      	movs	r2, #1
 80075a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2202      	movs	r2, #2
 80075ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80075be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80075c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	68ba      	ldr	r2, [r7, #8]
 80075ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075d8:	d03e      	beq.n	8007658 <HAL_TIM_ConfigClockSource+0xd4>
 80075da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075de:	f200 8087 	bhi.w	80076f0 <HAL_TIM_ConfigClockSource+0x16c>
 80075e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075e6:	f000 8086 	beq.w	80076f6 <HAL_TIM_ConfigClockSource+0x172>
 80075ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075ee:	d87f      	bhi.n	80076f0 <HAL_TIM_ConfigClockSource+0x16c>
 80075f0:	2b70      	cmp	r3, #112	; 0x70
 80075f2:	d01a      	beq.n	800762a <HAL_TIM_ConfigClockSource+0xa6>
 80075f4:	2b70      	cmp	r3, #112	; 0x70
 80075f6:	d87b      	bhi.n	80076f0 <HAL_TIM_ConfigClockSource+0x16c>
 80075f8:	2b60      	cmp	r3, #96	; 0x60
 80075fa:	d050      	beq.n	800769e <HAL_TIM_ConfigClockSource+0x11a>
 80075fc:	2b60      	cmp	r3, #96	; 0x60
 80075fe:	d877      	bhi.n	80076f0 <HAL_TIM_ConfigClockSource+0x16c>
 8007600:	2b50      	cmp	r3, #80	; 0x50
 8007602:	d03c      	beq.n	800767e <HAL_TIM_ConfigClockSource+0xfa>
 8007604:	2b50      	cmp	r3, #80	; 0x50
 8007606:	d873      	bhi.n	80076f0 <HAL_TIM_ConfigClockSource+0x16c>
 8007608:	2b40      	cmp	r3, #64	; 0x40
 800760a:	d058      	beq.n	80076be <HAL_TIM_ConfigClockSource+0x13a>
 800760c:	2b40      	cmp	r3, #64	; 0x40
 800760e:	d86f      	bhi.n	80076f0 <HAL_TIM_ConfigClockSource+0x16c>
 8007610:	2b30      	cmp	r3, #48	; 0x30
 8007612:	d064      	beq.n	80076de <HAL_TIM_ConfigClockSource+0x15a>
 8007614:	2b30      	cmp	r3, #48	; 0x30
 8007616:	d86b      	bhi.n	80076f0 <HAL_TIM_ConfigClockSource+0x16c>
 8007618:	2b20      	cmp	r3, #32
 800761a:	d060      	beq.n	80076de <HAL_TIM_ConfigClockSource+0x15a>
 800761c:	2b20      	cmp	r3, #32
 800761e:	d867      	bhi.n	80076f0 <HAL_TIM_ConfigClockSource+0x16c>
 8007620:	2b00      	cmp	r3, #0
 8007622:	d05c      	beq.n	80076de <HAL_TIM_ConfigClockSource+0x15a>
 8007624:	2b10      	cmp	r3, #16
 8007626:	d05a      	beq.n	80076de <HAL_TIM_ConfigClockSource+0x15a>
 8007628:	e062      	b.n	80076f0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6818      	ldr	r0, [r3, #0]
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	6899      	ldr	r1, [r3, #8]
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	685a      	ldr	r2, [r3, #4]
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	68db      	ldr	r3, [r3, #12]
 800763a:	f000 fd2b 	bl	8008094 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800764c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	68ba      	ldr	r2, [r7, #8]
 8007654:	609a      	str	r2, [r3, #8]
      break;
 8007656:	e04f      	b.n	80076f8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6818      	ldr	r0, [r3, #0]
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	6899      	ldr	r1, [r3, #8]
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	685a      	ldr	r2, [r3, #4]
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	68db      	ldr	r3, [r3, #12]
 8007668:	f000 fd14 	bl	8008094 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	689a      	ldr	r2, [r3, #8]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800767a:	609a      	str	r2, [r3, #8]
      break;
 800767c:	e03c      	b.n	80076f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6818      	ldr	r0, [r3, #0]
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	6859      	ldr	r1, [r3, #4]
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	68db      	ldr	r3, [r3, #12]
 800768a:	461a      	mov	r2, r3
 800768c:	f000 fbd2 	bl	8007e34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	2150      	movs	r1, #80	; 0x50
 8007696:	4618      	mov	r0, r3
 8007698:	f000 fce1 	bl	800805e <TIM_ITRx_SetConfig>
      break;
 800769c:	e02c      	b.n	80076f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6818      	ldr	r0, [r3, #0]
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	6859      	ldr	r1, [r3, #4]
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	68db      	ldr	r3, [r3, #12]
 80076aa:	461a      	mov	r2, r3
 80076ac:	f000 fc2e 	bl	8007f0c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	2160      	movs	r1, #96	; 0x60
 80076b6:	4618      	mov	r0, r3
 80076b8:	f000 fcd1 	bl	800805e <TIM_ITRx_SetConfig>
      break;
 80076bc:	e01c      	b.n	80076f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6818      	ldr	r0, [r3, #0]
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	6859      	ldr	r1, [r3, #4]
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	68db      	ldr	r3, [r3, #12]
 80076ca:	461a      	mov	r2, r3
 80076cc:	f000 fbb2 	bl	8007e34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	2140      	movs	r1, #64	; 0x40
 80076d6:	4618      	mov	r0, r3
 80076d8:	f000 fcc1 	bl	800805e <TIM_ITRx_SetConfig>
      break;
 80076dc:	e00c      	b.n	80076f8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681a      	ldr	r2, [r3, #0]
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4619      	mov	r1, r3
 80076e8:	4610      	mov	r0, r2
 80076ea:	f000 fcb8 	bl	800805e <TIM_ITRx_SetConfig>
      break;
 80076ee:	e003      	b.n	80076f8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80076f0:	2301      	movs	r3, #1
 80076f2:	73fb      	strb	r3, [r7, #15]
      break;
 80076f4:	e000      	b.n	80076f8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80076f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2201      	movs	r2, #1
 80076fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2200      	movs	r2, #0
 8007704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007708:	7bfb      	ldrb	r3, [r7, #15]
}
 800770a:	4618      	mov	r0, r3
 800770c:	3710      	adds	r7, #16
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}

08007712 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007712:	b480      	push	{r7}
 8007714:	b083      	sub	sp, #12
 8007716:	af00      	add	r7, sp, #0
 8007718:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800771a:	bf00      	nop
 800771c:	370c      	adds	r7, #12
 800771e:	46bd      	mov	sp, r7
 8007720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007724:	4770      	bx	lr

08007726 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007726:	b480      	push	{r7}
 8007728:	b083      	sub	sp, #12
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800772e:	bf00      	nop
 8007730:	370c      	adds	r7, #12
 8007732:	46bd      	mov	sp, r7
 8007734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007738:	4770      	bx	lr

0800773a <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800773a:	b480      	push	{r7}
 800773c:	b083      	sub	sp, #12
 800773e:	af00      	add	r7, sp, #0
 8007740:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8007742:	bf00      	nop
 8007744:	370c      	adds	r7, #12
 8007746:	46bd      	mov	sp, r7
 8007748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774c:	4770      	bx	lr

0800774e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800774e:	b480      	push	{r7}
 8007750:	b083      	sub	sp, #12
 8007752:	af00      	add	r7, sp, #0
 8007754:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007756:	bf00      	nop
 8007758:	370c      	adds	r7, #12
 800775a:	46bd      	mov	sp, r7
 800775c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007760:	4770      	bx	lr

08007762 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007762:	b480      	push	{r7}
 8007764:	b083      	sub	sp, #12
 8007766:	af00      	add	r7, sp, #0
 8007768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800776a:	bf00      	nop
 800776c:	370c      	adds	r7, #12
 800776e:	46bd      	mov	sp, r7
 8007770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007774:	4770      	bx	lr

08007776 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007776:	b480      	push	{r7}
 8007778:	b083      	sub	sp, #12
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800777e:	bf00      	nop
 8007780:	370c      	adds	r7, #12
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr

0800778a <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800778a:	b580      	push	{r7, lr}
 800778c:	b084      	sub	sp, #16
 800778e:	af00      	add	r7, sp, #0
 8007790:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007796:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	429a      	cmp	r2, r3
 80077a0:	d107      	bne.n	80077b2 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2201      	movs	r2, #1
 80077a6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2201      	movs	r2, #1
 80077ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80077b0:	e02a      	b.n	8007808 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077b6:	687a      	ldr	r2, [r7, #4]
 80077b8:	429a      	cmp	r2, r3
 80077ba:	d107      	bne.n	80077cc <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2202      	movs	r2, #2
 80077c0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2201      	movs	r2, #1
 80077c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80077ca:	e01d      	b.n	8007808 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077d0:	687a      	ldr	r2, [r7, #4]
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d107      	bne.n	80077e6 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2204      	movs	r2, #4
 80077da:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2201      	movs	r2, #1
 80077e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80077e4:	e010      	b.n	8007808 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ea:	687a      	ldr	r2, [r7, #4]
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d107      	bne.n	8007800 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2208      	movs	r2, #8
 80077f4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2201      	movs	r2, #1
 80077fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80077fe:	e003      	b.n	8007808 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2201      	movs	r2, #1
 8007804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8007808:	68f8      	ldr	r0, [r7, #12]
 800780a:	f7ff ffb4 	bl	8007776 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2200      	movs	r2, #0
 8007812:	771a      	strb	r2, [r3, #28]
}
 8007814:	bf00      	nop
 8007816:	3710      	adds	r7, #16
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b084      	sub	sp, #16
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007828:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800782e:	687a      	ldr	r2, [r7, #4]
 8007830:	429a      	cmp	r2, r3
 8007832:	d10f      	bne.n	8007854 <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2201      	movs	r2, #1
 8007838:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	69db      	ldr	r3, [r3, #28]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d146      	bne.n	80078d0 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2201      	movs	r2, #1
 8007846:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2201      	movs	r2, #1
 800784e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007852:	e03d      	b.n	80078d0 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	429a      	cmp	r2, r3
 800785c:	d10f      	bne.n	800787e <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2202      	movs	r2, #2
 8007862:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	69db      	ldr	r3, [r3, #28]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d131      	bne.n	80078d0 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2201      	movs	r2, #1
 8007870:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2201      	movs	r2, #1
 8007878:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800787c:	e028      	b.n	80078d0 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007882:	687a      	ldr	r2, [r7, #4]
 8007884:	429a      	cmp	r2, r3
 8007886:	d10f      	bne.n	80078a8 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2204      	movs	r2, #4
 800788c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	69db      	ldr	r3, [r3, #28]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d11c      	bne.n	80078d0 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2201      	movs	r2, #1
 800789a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	2201      	movs	r2, #1
 80078a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078a6:	e013      	b.n	80078d0 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ac:	687a      	ldr	r2, [r7, #4]
 80078ae:	429a      	cmp	r2, r3
 80078b0:	d10e      	bne.n	80078d0 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2208      	movs	r2, #8
 80078b6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	69db      	ldr	r3, [r3, #28]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d107      	bne.n	80078d0 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2201      	movs	r2, #1
 80078c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2201      	movs	r2, #1
 80078cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 80078d0:	68f8      	ldr	r0, [r7, #12]
 80078d2:	f7ff ff28 	bl	8007726 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2200      	movs	r2, #0
 80078da:	771a      	strb	r2, [r3, #28]
}
 80078dc:	bf00      	nop
 80078de:	3710      	adds	r7, #16
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}

080078e4 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b084      	sub	sp, #16
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078f0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f6:	687a      	ldr	r2, [r7, #4]
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d103      	bne.n	8007904 <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2201      	movs	r2, #1
 8007900:	771a      	strb	r2, [r3, #28]
 8007902:	e019      	b.n	8007938 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007908:	687a      	ldr	r2, [r7, #4]
 800790a:	429a      	cmp	r2, r3
 800790c:	d103      	bne.n	8007916 <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2202      	movs	r2, #2
 8007912:	771a      	strb	r2, [r3, #28]
 8007914:	e010      	b.n	8007938 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800791a:	687a      	ldr	r2, [r7, #4]
 800791c:	429a      	cmp	r2, r3
 800791e:	d103      	bne.n	8007928 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2204      	movs	r2, #4
 8007924:	771a      	strb	r2, [r3, #28]
 8007926:	e007      	b.n	8007938 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800792c:	687a      	ldr	r2, [r7, #4]
 800792e:	429a      	cmp	r2, r3
 8007930:	d102      	bne.n	8007938 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2208      	movs	r2, #8
 8007936:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8007938:	68f8      	ldr	r0, [r7, #12]
 800793a:	f7ff fefe 	bl	800773a <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2200      	movs	r2, #0
 8007942:	771a      	strb	r2, [r3, #28]
}
 8007944:	bf00      	nop
 8007946:	3710      	adds	r7, #16
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}

0800794c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800794c:	b480      	push	{r7}
 800794e:	b085      	sub	sp, #20
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	4a34      	ldr	r2, [pc, #208]	; (8007a30 <TIM_Base_SetConfig+0xe4>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d00f      	beq.n	8007984 <TIM_Base_SetConfig+0x38>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800796a:	d00b      	beq.n	8007984 <TIM_Base_SetConfig+0x38>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	4a31      	ldr	r2, [pc, #196]	; (8007a34 <TIM_Base_SetConfig+0xe8>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d007      	beq.n	8007984 <TIM_Base_SetConfig+0x38>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	4a30      	ldr	r2, [pc, #192]	; (8007a38 <TIM_Base_SetConfig+0xec>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d003      	beq.n	8007984 <TIM_Base_SetConfig+0x38>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	4a2f      	ldr	r2, [pc, #188]	; (8007a3c <TIM_Base_SetConfig+0xf0>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d108      	bne.n	8007996 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800798a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	68fa      	ldr	r2, [r7, #12]
 8007992:	4313      	orrs	r3, r2
 8007994:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	4a25      	ldr	r2, [pc, #148]	; (8007a30 <TIM_Base_SetConfig+0xe4>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d01b      	beq.n	80079d6 <TIM_Base_SetConfig+0x8a>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079a4:	d017      	beq.n	80079d6 <TIM_Base_SetConfig+0x8a>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	4a22      	ldr	r2, [pc, #136]	; (8007a34 <TIM_Base_SetConfig+0xe8>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d013      	beq.n	80079d6 <TIM_Base_SetConfig+0x8a>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	4a21      	ldr	r2, [pc, #132]	; (8007a38 <TIM_Base_SetConfig+0xec>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d00f      	beq.n	80079d6 <TIM_Base_SetConfig+0x8a>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	4a20      	ldr	r2, [pc, #128]	; (8007a3c <TIM_Base_SetConfig+0xf0>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d00b      	beq.n	80079d6 <TIM_Base_SetConfig+0x8a>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	4a1f      	ldr	r2, [pc, #124]	; (8007a40 <TIM_Base_SetConfig+0xf4>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d007      	beq.n	80079d6 <TIM_Base_SetConfig+0x8a>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	4a1e      	ldr	r2, [pc, #120]	; (8007a44 <TIM_Base_SetConfig+0xf8>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d003      	beq.n	80079d6 <TIM_Base_SetConfig+0x8a>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	4a1d      	ldr	r2, [pc, #116]	; (8007a48 <TIM_Base_SetConfig+0xfc>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d108      	bne.n	80079e8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	68db      	ldr	r3, [r3, #12]
 80079e2:	68fa      	ldr	r2, [r7, #12]
 80079e4:	4313      	orrs	r3, r2
 80079e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	695b      	ldr	r3, [r3, #20]
 80079f2:	4313      	orrs	r3, r2
 80079f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	68fa      	ldr	r2, [r7, #12]
 80079fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	689a      	ldr	r2, [r3, #8]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	681a      	ldr	r2, [r3, #0]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	4a08      	ldr	r2, [pc, #32]	; (8007a30 <TIM_Base_SetConfig+0xe4>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d103      	bne.n	8007a1c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	691a      	ldr	r2, [r3, #16]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2201      	movs	r2, #1
 8007a20:	615a      	str	r2, [r3, #20]
}
 8007a22:	bf00      	nop
 8007a24:	3714      	adds	r7, #20
 8007a26:	46bd      	mov	sp, r7
 8007a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2c:	4770      	bx	lr
 8007a2e:	bf00      	nop
 8007a30:	40010000 	.word	0x40010000
 8007a34:	40000400 	.word	0x40000400
 8007a38:	40000800 	.word	0x40000800
 8007a3c:	40000c00 	.word	0x40000c00
 8007a40:	40014000 	.word	0x40014000
 8007a44:	40014400 	.word	0x40014400
 8007a48:	40014800 	.word	0x40014800

08007a4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b087      	sub	sp, #28
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6a1b      	ldr	r3, [r3, #32]
 8007a5a:	f023 0201 	bic.w	r2, r3, #1
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6a1b      	ldr	r3, [r3, #32]
 8007a66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	699b      	ldr	r3, [r3, #24]
 8007a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	f023 0303 	bic.w	r3, r3, #3
 8007a82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	68fa      	ldr	r2, [r7, #12]
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	f023 0302 	bic.w	r3, r3, #2
 8007a94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	689b      	ldr	r3, [r3, #8]
 8007a9a:	697a      	ldr	r2, [r7, #20]
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	4a1c      	ldr	r2, [pc, #112]	; (8007b14 <TIM_OC1_SetConfig+0xc8>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d10c      	bne.n	8007ac2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	f023 0308 	bic.w	r3, r3, #8
 8007aae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	68db      	ldr	r3, [r3, #12]
 8007ab4:	697a      	ldr	r2, [r7, #20]
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	f023 0304 	bic.w	r3, r3, #4
 8007ac0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	4a13      	ldr	r2, [pc, #76]	; (8007b14 <TIM_OC1_SetConfig+0xc8>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d111      	bne.n	8007aee <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ad0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007ad8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	695b      	ldr	r3, [r3, #20]
 8007ade:	693a      	ldr	r2, [r7, #16]
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	699b      	ldr	r3, [r3, #24]
 8007ae8:	693a      	ldr	r2, [r7, #16]
 8007aea:	4313      	orrs	r3, r2
 8007aec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	693a      	ldr	r2, [r7, #16]
 8007af2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	68fa      	ldr	r2, [r7, #12]
 8007af8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	685a      	ldr	r2, [r3, #4]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	697a      	ldr	r2, [r7, #20]
 8007b06:	621a      	str	r2, [r3, #32]
}
 8007b08:	bf00      	nop
 8007b0a:	371c      	adds	r7, #28
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr
 8007b14:	40010000 	.word	0x40010000

08007b18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b087      	sub	sp, #28
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6a1b      	ldr	r3, [r3, #32]
 8007b26:	f023 0210 	bic.w	r2, r3, #16
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6a1b      	ldr	r3, [r3, #32]
 8007b32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	699b      	ldr	r3, [r3, #24]
 8007b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	021b      	lsls	r3, r3, #8
 8007b56:	68fa      	ldr	r2, [r7, #12]
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	f023 0320 	bic.w	r3, r3, #32
 8007b62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	689b      	ldr	r3, [r3, #8]
 8007b68:	011b      	lsls	r3, r3, #4
 8007b6a:	697a      	ldr	r2, [r7, #20]
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	4a1e      	ldr	r2, [pc, #120]	; (8007bec <TIM_OC2_SetConfig+0xd4>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d10d      	bne.n	8007b94 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	68db      	ldr	r3, [r3, #12]
 8007b84:	011b      	lsls	r3, r3, #4
 8007b86:	697a      	ldr	r2, [r7, #20]
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b92:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	4a15      	ldr	r2, [pc, #84]	; (8007bec <TIM_OC2_SetConfig+0xd4>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d113      	bne.n	8007bc4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007ba2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007baa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	695b      	ldr	r3, [r3, #20]
 8007bb0:	009b      	lsls	r3, r3, #2
 8007bb2:	693a      	ldr	r2, [r7, #16]
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	699b      	ldr	r3, [r3, #24]
 8007bbc:	009b      	lsls	r3, r3, #2
 8007bbe:	693a      	ldr	r2, [r7, #16]
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	693a      	ldr	r2, [r7, #16]
 8007bc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	68fa      	ldr	r2, [r7, #12]
 8007bce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	685a      	ldr	r2, [r3, #4]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	697a      	ldr	r2, [r7, #20]
 8007bdc:	621a      	str	r2, [r3, #32]
}
 8007bde:	bf00      	nop
 8007be0:	371c      	adds	r7, #28
 8007be2:	46bd      	mov	sp, r7
 8007be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be8:	4770      	bx	lr
 8007bea:	bf00      	nop
 8007bec:	40010000 	.word	0x40010000

08007bf0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b087      	sub	sp, #28
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6a1b      	ldr	r3, [r3, #32]
 8007bfe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6a1b      	ldr	r3, [r3, #32]
 8007c0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	69db      	ldr	r3, [r3, #28]
 8007c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f023 0303 	bic.w	r3, r3, #3
 8007c26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	68fa      	ldr	r2, [r7, #12]
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	689b      	ldr	r3, [r3, #8]
 8007c3e:	021b      	lsls	r3, r3, #8
 8007c40:	697a      	ldr	r2, [r7, #20]
 8007c42:	4313      	orrs	r3, r2
 8007c44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	4a1d      	ldr	r2, [pc, #116]	; (8007cc0 <TIM_OC3_SetConfig+0xd0>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d10d      	bne.n	8007c6a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	68db      	ldr	r3, [r3, #12]
 8007c5a:	021b      	lsls	r3, r3, #8
 8007c5c:	697a      	ldr	r2, [r7, #20]
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	4a14      	ldr	r2, [pc, #80]	; (8007cc0 <TIM_OC3_SetConfig+0xd0>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d113      	bne.n	8007c9a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	695b      	ldr	r3, [r3, #20]
 8007c86:	011b      	lsls	r3, r3, #4
 8007c88:	693a      	ldr	r2, [r7, #16]
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	699b      	ldr	r3, [r3, #24]
 8007c92:	011b      	lsls	r3, r3, #4
 8007c94:	693a      	ldr	r2, [r7, #16]
 8007c96:	4313      	orrs	r3, r2
 8007c98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	693a      	ldr	r2, [r7, #16]
 8007c9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	68fa      	ldr	r2, [r7, #12]
 8007ca4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	685a      	ldr	r2, [r3, #4]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	697a      	ldr	r2, [r7, #20]
 8007cb2:	621a      	str	r2, [r3, #32]
}
 8007cb4:	bf00      	nop
 8007cb6:	371c      	adds	r7, #28
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr
 8007cc0:	40010000 	.word	0x40010000

08007cc4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b087      	sub	sp, #28
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6a1b      	ldr	r3, [r3, #32]
 8007cd2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6a1b      	ldr	r3, [r3, #32]
 8007cde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	69db      	ldr	r3, [r3, #28]
 8007cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	021b      	lsls	r3, r3, #8
 8007d02:	68fa      	ldr	r2, [r7, #12]
 8007d04:	4313      	orrs	r3, r2
 8007d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	689b      	ldr	r3, [r3, #8]
 8007d14:	031b      	lsls	r3, r3, #12
 8007d16:	693a      	ldr	r2, [r7, #16]
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	4a10      	ldr	r2, [pc, #64]	; (8007d60 <TIM_OC4_SetConfig+0x9c>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d109      	bne.n	8007d38 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	695b      	ldr	r3, [r3, #20]
 8007d30:	019b      	lsls	r3, r3, #6
 8007d32:	697a      	ldr	r2, [r7, #20]
 8007d34:	4313      	orrs	r3, r2
 8007d36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	697a      	ldr	r2, [r7, #20]
 8007d3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	68fa      	ldr	r2, [r7, #12]
 8007d42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	685a      	ldr	r2, [r3, #4]
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	693a      	ldr	r2, [r7, #16]
 8007d50:	621a      	str	r2, [r3, #32]
}
 8007d52:	bf00      	nop
 8007d54:	371c      	adds	r7, #28
 8007d56:	46bd      	mov	sp, r7
 8007d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5c:	4770      	bx	lr
 8007d5e:	bf00      	nop
 8007d60:	40010000 	.word	0x40010000

08007d64 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b087      	sub	sp, #28
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	60f8      	str	r0, [r7, #12]
 8007d6c:	60b9      	str	r1, [r7, #8]
 8007d6e:	607a      	str	r2, [r7, #4]
 8007d70:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	6a1b      	ldr	r3, [r3, #32]
 8007d76:	f023 0201 	bic.w	r2, r3, #1
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	699b      	ldr	r3, [r3, #24]
 8007d82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	6a1b      	ldr	r3, [r3, #32]
 8007d88:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	4a24      	ldr	r2, [pc, #144]	; (8007e20 <TIM_TI1_SetConfig+0xbc>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d013      	beq.n	8007dba <TIM_TI1_SetConfig+0x56>
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d98:	d00f      	beq.n	8007dba <TIM_TI1_SetConfig+0x56>
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	4a21      	ldr	r2, [pc, #132]	; (8007e24 <TIM_TI1_SetConfig+0xc0>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d00b      	beq.n	8007dba <TIM_TI1_SetConfig+0x56>
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	4a20      	ldr	r2, [pc, #128]	; (8007e28 <TIM_TI1_SetConfig+0xc4>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d007      	beq.n	8007dba <TIM_TI1_SetConfig+0x56>
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	4a1f      	ldr	r2, [pc, #124]	; (8007e2c <TIM_TI1_SetConfig+0xc8>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d003      	beq.n	8007dba <TIM_TI1_SetConfig+0x56>
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	4a1e      	ldr	r2, [pc, #120]	; (8007e30 <TIM_TI1_SetConfig+0xcc>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d101      	bne.n	8007dbe <TIM_TI1_SetConfig+0x5a>
 8007dba:	2301      	movs	r3, #1
 8007dbc:	e000      	b.n	8007dc0 <TIM_TI1_SetConfig+0x5c>
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d008      	beq.n	8007dd6 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	f023 0303 	bic.w	r3, r3, #3
 8007dca:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007dcc:	697a      	ldr	r2, [r7, #20]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	617b      	str	r3, [r7, #20]
 8007dd4:	e003      	b.n	8007dde <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	f043 0301 	orr.w	r3, r3, #1
 8007ddc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007de4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	011b      	lsls	r3, r3, #4
 8007dea:	b2db      	uxtb	r3, r3
 8007dec:	697a      	ldr	r2, [r7, #20]
 8007dee:	4313      	orrs	r3, r2
 8007df0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	f023 030a 	bic.w	r3, r3, #10
 8007df8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	f003 030a 	and.w	r3, r3, #10
 8007e00:	693a      	ldr	r2, [r7, #16]
 8007e02:	4313      	orrs	r3, r2
 8007e04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	697a      	ldr	r2, [r7, #20]
 8007e0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	693a      	ldr	r2, [r7, #16]
 8007e10:	621a      	str	r2, [r3, #32]
}
 8007e12:	bf00      	nop
 8007e14:	371c      	adds	r7, #28
 8007e16:	46bd      	mov	sp, r7
 8007e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1c:	4770      	bx	lr
 8007e1e:	bf00      	nop
 8007e20:	40010000 	.word	0x40010000
 8007e24:	40000400 	.word	0x40000400
 8007e28:	40000800 	.word	0x40000800
 8007e2c:	40000c00 	.word	0x40000c00
 8007e30:	40014000 	.word	0x40014000

08007e34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b087      	sub	sp, #28
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	60f8      	str	r0, [r7, #12]
 8007e3c:	60b9      	str	r1, [r7, #8]
 8007e3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	6a1b      	ldr	r3, [r3, #32]
 8007e44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	6a1b      	ldr	r3, [r3, #32]
 8007e4a:	f023 0201 	bic.w	r2, r3, #1
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	699b      	ldr	r3, [r3, #24]
 8007e56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	011b      	lsls	r3, r3, #4
 8007e64:	693a      	ldr	r2, [r7, #16]
 8007e66:	4313      	orrs	r3, r2
 8007e68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	f023 030a 	bic.w	r3, r3, #10
 8007e70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007e72:	697a      	ldr	r2, [r7, #20]
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	4313      	orrs	r3, r2
 8007e78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	693a      	ldr	r2, [r7, #16]
 8007e7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	697a      	ldr	r2, [r7, #20]
 8007e84:	621a      	str	r2, [r3, #32]
}
 8007e86:	bf00      	nop
 8007e88:	371c      	adds	r7, #28
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e90:	4770      	bx	lr

08007e92 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007e92:	b480      	push	{r7}
 8007e94:	b087      	sub	sp, #28
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	60f8      	str	r0, [r7, #12]
 8007e9a:	60b9      	str	r1, [r7, #8]
 8007e9c:	607a      	str	r2, [r7, #4]
 8007e9e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	6a1b      	ldr	r3, [r3, #32]
 8007ea4:	f023 0210 	bic.w	r2, r3, #16
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	699b      	ldr	r3, [r3, #24]
 8007eb0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	6a1b      	ldr	r3, [r3, #32]
 8007eb6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ebe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	021b      	lsls	r3, r3, #8
 8007ec4:	697a      	ldr	r2, [r7, #20]
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007ed0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	031b      	lsls	r3, r3, #12
 8007ed6:	b29b      	uxth	r3, r3
 8007ed8:	697a      	ldr	r2, [r7, #20]
 8007eda:	4313      	orrs	r3, r2
 8007edc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007ee4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	011b      	lsls	r3, r3, #4
 8007eea:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007eee:	693a      	ldr	r2, [r7, #16]
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	697a      	ldr	r2, [r7, #20]
 8007ef8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	693a      	ldr	r2, [r7, #16]
 8007efe:	621a      	str	r2, [r3, #32]
}
 8007f00:	bf00      	nop
 8007f02:	371c      	adds	r7, #28
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr

08007f0c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b087      	sub	sp, #28
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	60f8      	str	r0, [r7, #12]
 8007f14:	60b9      	str	r1, [r7, #8]
 8007f16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	6a1b      	ldr	r3, [r3, #32]
 8007f1c:	f023 0210 	bic.w	r2, r3, #16
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	699b      	ldr	r3, [r3, #24]
 8007f28:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	6a1b      	ldr	r3, [r3, #32]
 8007f2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007f36:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	031b      	lsls	r3, r3, #12
 8007f3c:	697a      	ldr	r2, [r7, #20]
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007f48:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	011b      	lsls	r3, r3, #4
 8007f4e:	693a      	ldr	r2, [r7, #16]
 8007f50:	4313      	orrs	r3, r2
 8007f52:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	697a      	ldr	r2, [r7, #20]
 8007f58:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	693a      	ldr	r2, [r7, #16]
 8007f5e:	621a      	str	r2, [r3, #32]
}
 8007f60:	bf00      	nop
 8007f62:	371c      	adds	r7, #28
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr

08007f6c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b087      	sub	sp, #28
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	60f8      	str	r0, [r7, #12]
 8007f74:	60b9      	str	r1, [r7, #8]
 8007f76:	607a      	str	r2, [r7, #4]
 8007f78:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	6a1b      	ldr	r3, [r3, #32]
 8007f7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	69db      	ldr	r3, [r3, #28]
 8007f8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	6a1b      	ldr	r3, [r3, #32]
 8007f90:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	f023 0303 	bic.w	r3, r3, #3
 8007f98:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007f9a:	697a      	ldr	r2, [r7, #20]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007fa8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	011b      	lsls	r3, r3, #4
 8007fae:	b2db      	uxtb	r3, r3
 8007fb0:	697a      	ldr	r2, [r7, #20]
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007fbc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	021b      	lsls	r3, r3, #8
 8007fc2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007fc6:	693a      	ldr	r2, [r7, #16]
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	697a      	ldr	r2, [r7, #20]
 8007fd0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	693a      	ldr	r2, [r7, #16]
 8007fd6:	621a      	str	r2, [r3, #32]
}
 8007fd8:	bf00      	nop
 8007fda:	371c      	adds	r7, #28
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr

08007fe4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b087      	sub	sp, #28
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	60f8      	str	r0, [r7, #12]
 8007fec:	60b9      	str	r1, [r7, #8]
 8007fee:	607a      	str	r2, [r7, #4]
 8007ff0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	6a1b      	ldr	r3, [r3, #32]
 8007ff6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	69db      	ldr	r3, [r3, #28]
 8008002:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	6a1b      	ldr	r3, [r3, #32]
 8008008:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008010:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	021b      	lsls	r3, r3, #8
 8008016:	697a      	ldr	r2, [r7, #20]
 8008018:	4313      	orrs	r3, r2
 800801a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008022:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	031b      	lsls	r3, r3, #12
 8008028:	b29b      	uxth	r3, r3
 800802a:	697a      	ldr	r2, [r7, #20]
 800802c:	4313      	orrs	r3, r2
 800802e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008036:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	031b      	lsls	r3, r3, #12
 800803c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008040:	693a      	ldr	r2, [r7, #16]
 8008042:	4313      	orrs	r3, r2
 8008044:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	697a      	ldr	r2, [r7, #20]
 800804a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	693a      	ldr	r2, [r7, #16]
 8008050:	621a      	str	r2, [r3, #32]
}
 8008052:	bf00      	nop
 8008054:	371c      	adds	r7, #28
 8008056:	46bd      	mov	sp, r7
 8008058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805c:	4770      	bx	lr

0800805e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800805e:	b480      	push	{r7}
 8008060:	b085      	sub	sp, #20
 8008062:	af00      	add	r7, sp, #0
 8008064:	6078      	str	r0, [r7, #4]
 8008066:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	689b      	ldr	r3, [r3, #8]
 800806c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008074:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008076:	683a      	ldr	r2, [r7, #0]
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	4313      	orrs	r3, r2
 800807c:	f043 0307 	orr.w	r3, r3, #7
 8008080:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	68fa      	ldr	r2, [r7, #12]
 8008086:	609a      	str	r2, [r3, #8]
}
 8008088:	bf00      	nop
 800808a:	3714      	adds	r7, #20
 800808c:	46bd      	mov	sp, r7
 800808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008092:	4770      	bx	lr

08008094 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008094:	b480      	push	{r7}
 8008096:	b087      	sub	sp, #28
 8008098:	af00      	add	r7, sp, #0
 800809a:	60f8      	str	r0, [r7, #12]
 800809c:	60b9      	str	r1, [r7, #8]
 800809e:	607a      	str	r2, [r7, #4]
 80080a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	689b      	ldr	r3, [r3, #8]
 80080a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80080ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	021a      	lsls	r2, r3, #8
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	431a      	orrs	r2, r3
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	4313      	orrs	r3, r2
 80080bc:	697a      	ldr	r2, [r7, #20]
 80080be:	4313      	orrs	r3, r2
 80080c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	697a      	ldr	r2, [r7, #20]
 80080c6:	609a      	str	r2, [r3, #8]
}
 80080c8:	bf00      	nop
 80080ca:	371c      	adds	r7, #28
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr

080080d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b087      	sub	sp, #28
 80080d8:	af00      	add	r7, sp, #0
 80080da:	60f8      	str	r0, [r7, #12]
 80080dc:	60b9      	str	r1, [r7, #8]
 80080de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	f003 031f 	and.w	r3, r3, #31
 80080e6:	2201      	movs	r2, #1
 80080e8:	fa02 f303 	lsl.w	r3, r2, r3
 80080ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	6a1a      	ldr	r2, [r3, #32]
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	43db      	mvns	r3, r3
 80080f6:	401a      	ands	r2, r3
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	6a1a      	ldr	r2, [r3, #32]
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	f003 031f 	and.w	r3, r3, #31
 8008106:	6879      	ldr	r1, [r7, #4]
 8008108:	fa01 f303 	lsl.w	r3, r1, r3
 800810c:	431a      	orrs	r2, r3
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	621a      	str	r2, [r3, #32]
}
 8008112:	bf00      	nop
 8008114:	371c      	adds	r7, #28
 8008116:	46bd      	mov	sp, r7
 8008118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811c:	4770      	bx	lr
	...

08008120 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008120:	b480      	push	{r7}
 8008122:	b085      	sub	sp, #20
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
 8008128:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008130:	2b01      	cmp	r3, #1
 8008132:	d101      	bne.n	8008138 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008134:	2302      	movs	r3, #2
 8008136:	e050      	b.n	80081da <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2201      	movs	r2, #1
 800813c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2202      	movs	r2, #2
 8008144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	689b      	ldr	r3, [r3, #8]
 8008156:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800815e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	68fa      	ldr	r2, [r7, #12]
 8008166:	4313      	orrs	r3, r2
 8008168:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	68fa      	ldr	r2, [r7, #12]
 8008170:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a1c      	ldr	r2, [pc, #112]	; (80081e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d018      	beq.n	80081ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008184:	d013      	beq.n	80081ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a18      	ldr	r2, [pc, #96]	; (80081ec <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d00e      	beq.n	80081ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a16      	ldr	r2, [pc, #88]	; (80081f0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d009      	beq.n	80081ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a15      	ldr	r2, [pc, #84]	; (80081f4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d004      	beq.n	80081ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a13      	ldr	r2, [pc, #76]	; (80081f8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d10c      	bne.n	80081c8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	68ba      	ldr	r2, [r7, #8]
 80081bc:	4313      	orrs	r3, r2
 80081be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	68ba      	ldr	r2, [r7, #8]
 80081c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2201      	movs	r2, #1
 80081cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2200      	movs	r2, #0
 80081d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80081d8:	2300      	movs	r3, #0
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3714      	adds	r7, #20
 80081de:	46bd      	mov	sp, r7
 80081e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e4:	4770      	bx	lr
 80081e6:	bf00      	nop
 80081e8:	40010000 	.word	0x40010000
 80081ec:	40000400 	.word	0x40000400
 80081f0:	40000800 	.word	0x40000800
 80081f4:	40000c00 	.word	0x40000c00
 80081f8:	40014000 	.word	0x40014000

080081fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b083      	sub	sp, #12
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008204:	bf00      	nop
 8008206:	370c      	adds	r7, #12
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr

08008210 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008210:	b480      	push	{r7}
 8008212:	b083      	sub	sp, #12
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008218:	bf00      	nop
 800821a:	370c      	adds	r7, #12
 800821c:	46bd      	mov	sp, r7
 800821e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008222:	4770      	bx	lr

08008224 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b082      	sub	sp, #8
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d101      	bne.n	8008236 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008232:	2301      	movs	r3, #1
 8008234:	e03f      	b.n	80082b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800823c:	b2db      	uxtb	r3, r3
 800823e:	2b00      	cmp	r3, #0
 8008240:	d106      	bne.n	8008250 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2200      	movs	r2, #0
 8008246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f7f9 ff98 	bl	8002180 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2224      	movs	r2, #36	; 0x24
 8008254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	68da      	ldr	r2, [r3, #12]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008266:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f000 fde9 	bl	8008e40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	691a      	ldr	r2, [r3, #16]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800827c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	695a      	ldr	r2, [r3, #20]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800828c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	68da      	ldr	r2, [r3, #12]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800829c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2200      	movs	r2, #0
 80082a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2220      	movs	r2, #32
 80082a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2220      	movs	r2, #32
 80082b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80082b4:	2300      	movs	r3, #0
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3708      	adds	r7, #8
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}

080082be <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80082be:	b580      	push	{r7, lr}
 80082c0:	b08a      	sub	sp, #40	; 0x28
 80082c2:	af02      	add	r7, sp, #8
 80082c4:	60f8      	str	r0, [r7, #12]
 80082c6:	60b9      	str	r1, [r7, #8]
 80082c8:	603b      	str	r3, [r7, #0]
 80082ca:	4613      	mov	r3, r2
 80082cc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80082ce:	2300      	movs	r3, #0
 80082d0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082d8:	b2db      	uxtb	r3, r3
 80082da:	2b20      	cmp	r3, #32
 80082dc:	d17c      	bne.n	80083d8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d002      	beq.n	80082ea <HAL_UART_Transmit+0x2c>
 80082e4:	88fb      	ldrh	r3, [r7, #6]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d101      	bne.n	80082ee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80082ea:	2301      	movs	r3, #1
 80082ec:	e075      	b.n	80083da <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d101      	bne.n	80082fc <HAL_UART_Transmit+0x3e>
 80082f8:	2302      	movs	r3, #2
 80082fa:	e06e      	b.n	80083da <HAL_UART_Transmit+0x11c>
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	2201      	movs	r2, #1
 8008300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2200      	movs	r2, #0
 8008308:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	2221      	movs	r2, #33	; 0x21
 800830e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008312:	f7fa f8af 	bl	8002474 <HAL_GetTick>
 8008316:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	88fa      	ldrh	r2, [r7, #6]
 800831c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	88fa      	ldrh	r2, [r7, #6]
 8008322:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800832c:	d108      	bne.n	8008340 <HAL_UART_Transmit+0x82>
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	691b      	ldr	r3, [r3, #16]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d104      	bne.n	8008340 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008336:	2300      	movs	r3, #0
 8008338:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	61bb      	str	r3, [r7, #24]
 800833e:	e003      	b.n	8008348 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008344:	2300      	movs	r3, #0
 8008346:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2200      	movs	r2, #0
 800834c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008350:	e02a      	b.n	80083a8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	9300      	str	r3, [sp, #0]
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	2200      	movs	r2, #0
 800835a:	2180      	movs	r1, #128	; 0x80
 800835c:	68f8      	ldr	r0, [r7, #12]
 800835e:	f000 fb29 	bl	80089b4 <UART_WaitOnFlagUntilTimeout>
 8008362:	4603      	mov	r3, r0
 8008364:	2b00      	cmp	r3, #0
 8008366:	d001      	beq.n	800836c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008368:	2303      	movs	r3, #3
 800836a:	e036      	b.n	80083da <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800836c:	69fb      	ldr	r3, [r7, #28]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d10b      	bne.n	800838a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008372:	69bb      	ldr	r3, [r7, #24]
 8008374:	881b      	ldrh	r3, [r3, #0]
 8008376:	461a      	mov	r2, r3
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008380:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008382:	69bb      	ldr	r3, [r7, #24]
 8008384:	3302      	adds	r3, #2
 8008386:	61bb      	str	r3, [r7, #24]
 8008388:	e007      	b.n	800839a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800838a:	69fb      	ldr	r3, [r7, #28]
 800838c:	781a      	ldrb	r2, [r3, #0]
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008394:	69fb      	ldr	r3, [r7, #28]
 8008396:	3301      	adds	r3, #1
 8008398:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800839e:	b29b      	uxth	r3, r3
 80083a0:	3b01      	subs	r3, #1
 80083a2:	b29a      	uxth	r2, r3
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80083ac:	b29b      	uxth	r3, r3
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d1cf      	bne.n	8008352 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	9300      	str	r3, [sp, #0]
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	2200      	movs	r2, #0
 80083ba:	2140      	movs	r1, #64	; 0x40
 80083bc:	68f8      	ldr	r0, [r7, #12]
 80083be:	f000 faf9 	bl	80089b4 <UART_WaitOnFlagUntilTimeout>
 80083c2:	4603      	mov	r3, r0
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d001      	beq.n	80083cc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80083c8:	2303      	movs	r3, #3
 80083ca:	e006      	b.n	80083da <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2220      	movs	r2, #32
 80083d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80083d4:	2300      	movs	r3, #0
 80083d6:	e000      	b.n	80083da <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80083d8:	2302      	movs	r3, #2
  }
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3720      	adds	r7, #32
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}

080083e2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80083e2:	b580      	push	{r7, lr}
 80083e4:	b084      	sub	sp, #16
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	60f8      	str	r0, [r7, #12]
 80083ea:	60b9      	str	r1, [r7, #8]
 80083ec:	4613      	mov	r3, r2
 80083ee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80083f6:	b2db      	uxtb	r3, r3
 80083f8:	2b20      	cmp	r3, #32
 80083fa:	d11d      	bne.n	8008438 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d002      	beq.n	8008408 <HAL_UART_Receive_IT+0x26>
 8008402:	88fb      	ldrh	r3, [r7, #6]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d101      	bne.n	800840c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008408:	2301      	movs	r3, #1
 800840a:	e016      	b.n	800843a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008412:	2b01      	cmp	r3, #1
 8008414:	d101      	bne.n	800841a <HAL_UART_Receive_IT+0x38>
 8008416:	2302      	movs	r3, #2
 8008418:	e00f      	b.n	800843a <HAL_UART_Receive_IT+0x58>
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2201      	movs	r2, #1
 800841e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2200      	movs	r2, #0
 8008426:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008428:	88fb      	ldrh	r3, [r7, #6]
 800842a:	461a      	mov	r2, r3
 800842c:	68b9      	ldr	r1, [r7, #8]
 800842e:	68f8      	ldr	r0, [r7, #12]
 8008430:	f000 fb2e 	bl	8008a90 <UART_Start_Receive_IT>
 8008434:	4603      	mov	r3, r0
 8008436:	e000      	b.n	800843a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008438:	2302      	movs	r3, #2
  }
}
 800843a:	4618      	mov	r0, r3
 800843c:	3710      	adds	r7, #16
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}
	...

08008444 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b0ba      	sub	sp, #232	; 0xe8
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	68db      	ldr	r3, [r3, #12]
 800845c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	695b      	ldr	r3, [r3, #20]
 8008466:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800846a:	2300      	movs	r3, #0
 800846c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008470:	2300      	movs	r3, #0
 8008472:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800847a:	f003 030f 	and.w	r3, r3, #15
 800847e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008482:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008486:	2b00      	cmp	r3, #0
 8008488:	d10f      	bne.n	80084aa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800848a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800848e:	f003 0320 	and.w	r3, r3, #32
 8008492:	2b00      	cmp	r3, #0
 8008494:	d009      	beq.n	80084aa <HAL_UART_IRQHandler+0x66>
 8008496:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800849a:	f003 0320 	and.w	r3, r3, #32
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d003      	beq.n	80084aa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f000 fc11 	bl	8008cca <UART_Receive_IT>
      return;
 80084a8:	e256      	b.n	8008958 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80084aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	f000 80de 	beq.w	8008670 <HAL_UART_IRQHandler+0x22c>
 80084b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084b8:	f003 0301 	and.w	r3, r3, #1
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d106      	bne.n	80084ce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80084c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084c4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	f000 80d1 	beq.w	8008670 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80084ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084d2:	f003 0301 	and.w	r3, r3, #1
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d00b      	beq.n	80084f2 <HAL_UART_IRQHandler+0xae>
 80084da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d005      	beq.n	80084f2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ea:	f043 0201 	orr.w	r2, r3, #1
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80084f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084f6:	f003 0304 	and.w	r3, r3, #4
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d00b      	beq.n	8008516 <HAL_UART_IRQHandler+0xd2>
 80084fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008502:	f003 0301 	and.w	r3, r3, #1
 8008506:	2b00      	cmp	r3, #0
 8008508:	d005      	beq.n	8008516 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800850e:	f043 0202 	orr.w	r2, r3, #2
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800851a:	f003 0302 	and.w	r3, r3, #2
 800851e:	2b00      	cmp	r3, #0
 8008520:	d00b      	beq.n	800853a <HAL_UART_IRQHandler+0xf6>
 8008522:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008526:	f003 0301 	and.w	r3, r3, #1
 800852a:	2b00      	cmp	r3, #0
 800852c:	d005      	beq.n	800853a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008532:	f043 0204 	orr.w	r2, r3, #4
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800853a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800853e:	f003 0308 	and.w	r3, r3, #8
 8008542:	2b00      	cmp	r3, #0
 8008544:	d011      	beq.n	800856a <HAL_UART_IRQHandler+0x126>
 8008546:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800854a:	f003 0320 	and.w	r3, r3, #32
 800854e:	2b00      	cmp	r3, #0
 8008550:	d105      	bne.n	800855e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008552:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008556:	f003 0301 	and.w	r3, r3, #1
 800855a:	2b00      	cmp	r3, #0
 800855c:	d005      	beq.n	800856a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008562:	f043 0208 	orr.w	r2, r3, #8
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800856e:	2b00      	cmp	r3, #0
 8008570:	f000 81ed 	beq.w	800894e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008574:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008578:	f003 0320 	and.w	r3, r3, #32
 800857c:	2b00      	cmp	r3, #0
 800857e:	d008      	beq.n	8008592 <HAL_UART_IRQHandler+0x14e>
 8008580:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008584:	f003 0320 	and.w	r3, r3, #32
 8008588:	2b00      	cmp	r3, #0
 800858a:	d002      	beq.n	8008592 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f000 fb9c 	bl	8008cca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	695b      	ldr	r3, [r3, #20]
 8008598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800859c:	2b40      	cmp	r3, #64	; 0x40
 800859e:	bf0c      	ite	eq
 80085a0:	2301      	moveq	r3, #1
 80085a2:	2300      	movne	r3, #0
 80085a4:	b2db      	uxtb	r3, r3
 80085a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ae:	f003 0308 	and.w	r3, r3, #8
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d103      	bne.n	80085be <HAL_UART_IRQHandler+0x17a>
 80085b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d04f      	beq.n	800865e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f000 faa4 	bl	8008b0c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	695b      	ldr	r3, [r3, #20]
 80085ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085ce:	2b40      	cmp	r3, #64	; 0x40
 80085d0:	d141      	bne.n	8008656 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	3314      	adds	r3, #20
 80085d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80085e0:	e853 3f00 	ldrex	r3, [r3]
 80085e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80085e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80085ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	3314      	adds	r3, #20
 80085fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80085fe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008602:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008606:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800860a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800860e:	e841 2300 	strex	r3, r2, [r1]
 8008612:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008616:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800861a:	2b00      	cmp	r3, #0
 800861c:	d1d9      	bne.n	80085d2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008622:	2b00      	cmp	r3, #0
 8008624:	d013      	beq.n	800864e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800862a:	4a7d      	ldr	r2, [pc, #500]	; (8008820 <HAL_UART_IRQHandler+0x3dc>)
 800862c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008632:	4618      	mov	r0, r3
 8008634:	f7fa f9d6 	bl	80029e4 <HAL_DMA_Abort_IT>
 8008638:	4603      	mov	r3, r0
 800863a:	2b00      	cmp	r3, #0
 800863c:	d016      	beq.n	800866c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008642:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008644:	687a      	ldr	r2, [r7, #4]
 8008646:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008648:	4610      	mov	r0, r2
 800864a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800864c:	e00e      	b.n	800866c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 f99a 	bl	8008988 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008654:	e00a      	b.n	800866c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f000 f996 	bl	8008988 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800865c:	e006      	b.n	800866c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f000 f992 	bl	8008988 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2200      	movs	r2, #0
 8008668:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800866a:	e170      	b.n	800894e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800866c:	bf00      	nop
    return;
 800866e:	e16e      	b.n	800894e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008674:	2b01      	cmp	r3, #1
 8008676:	f040 814a 	bne.w	800890e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800867a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800867e:	f003 0310 	and.w	r3, r3, #16
 8008682:	2b00      	cmp	r3, #0
 8008684:	f000 8143 	beq.w	800890e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008688:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800868c:	f003 0310 	and.w	r3, r3, #16
 8008690:	2b00      	cmp	r3, #0
 8008692:	f000 813c 	beq.w	800890e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008696:	2300      	movs	r3, #0
 8008698:	60bb      	str	r3, [r7, #8]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	60bb      	str	r3, [r7, #8]
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	685b      	ldr	r3, [r3, #4]
 80086a8:	60bb      	str	r3, [r7, #8]
 80086aa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	695b      	ldr	r3, [r3, #20]
 80086b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086b6:	2b40      	cmp	r3, #64	; 0x40
 80086b8:	f040 80b4 	bne.w	8008824 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80086c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	f000 8140 	beq.w	8008952 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80086d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80086da:	429a      	cmp	r2, r3
 80086dc:	f080 8139 	bcs.w	8008952 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80086e6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ec:	69db      	ldr	r3, [r3, #28]
 80086ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086f2:	f000 8088 	beq.w	8008806 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	330c      	adds	r3, #12
 80086fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008700:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008704:	e853 3f00 	ldrex	r3, [r3]
 8008708:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800870c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008710:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008714:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	330c      	adds	r3, #12
 800871e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008722:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008726:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800872a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800872e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008732:	e841 2300 	strex	r3, r2, [r1]
 8008736:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800873a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800873e:	2b00      	cmp	r3, #0
 8008740:	d1d9      	bne.n	80086f6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	3314      	adds	r3, #20
 8008748:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800874a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800874c:	e853 3f00 	ldrex	r3, [r3]
 8008750:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008752:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008754:	f023 0301 	bic.w	r3, r3, #1
 8008758:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	3314      	adds	r3, #20
 8008762:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008766:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800876a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800876c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800876e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008772:	e841 2300 	strex	r3, r2, [r1]
 8008776:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008778:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800877a:	2b00      	cmp	r3, #0
 800877c:	d1e1      	bne.n	8008742 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	3314      	adds	r3, #20
 8008784:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008786:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008788:	e853 3f00 	ldrex	r3, [r3]
 800878c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800878e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008790:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008794:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	3314      	adds	r3, #20
 800879e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80087a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80087a4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087a6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80087a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80087aa:	e841 2300 	strex	r3, r2, [r1]
 80087ae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80087b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d1e3      	bne.n	800877e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2220      	movs	r2, #32
 80087ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2200      	movs	r2, #0
 80087c2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	330c      	adds	r3, #12
 80087ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087ce:	e853 3f00 	ldrex	r3, [r3]
 80087d2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80087d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087d6:	f023 0310 	bic.w	r3, r3, #16
 80087da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	330c      	adds	r3, #12
 80087e4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80087e8:	65ba      	str	r2, [r7, #88]	; 0x58
 80087ea:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80087ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80087f0:	e841 2300 	strex	r3, r2, [r1]
 80087f4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80087f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d1e3      	bne.n	80087c4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008800:	4618      	mov	r0, r3
 8008802:	f7fa f87f 	bl	8002904 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800880e:	b29b      	uxth	r3, r3
 8008810:	1ad3      	subs	r3, r2, r3
 8008812:	b29b      	uxth	r3, r3
 8008814:	4619      	mov	r1, r3
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 f8c0 	bl	800899c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800881c:	e099      	b.n	8008952 <HAL_UART_IRQHandler+0x50e>
 800881e:	bf00      	nop
 8008820:	08008bd3 	.word	0x08008bd3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800882c:	b29b      	uxth	r3, r3
 800882e:	1ad3      	subs	r3, r2, r3
 8008830:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008838:	b29b      	uxth	r3, r3
 800883a:	2b00      	cmp	r3, #0
 800883c:	f000 808b 	beq.w	8008956 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008840:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008844:	2b00      	cmp	r3, #0
 8008846:	f000 8086 	beq.w	8008956 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	330c      	adds	r3, #12
 8008850:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008854:	e853 3f00 	ldrex	r3, [r3]
 8008858:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800885a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800885c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008860:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	330c      	adds	r3, #12
 800886a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800886e:	647a      	str	r2, [r7, #68]	; 0x44
 8008870:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008872:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008874:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008876:	e841 2300 	strex	r3, r2, [r1]
 800887a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800887c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800887e:	2b00      	cmp	r3, #0
 8008880:	d1e3      	bne.n	800884a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	3314      	adds	r3, #20
 8008888:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800888a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800888c:	e853 3f00 	ldrex	r3, [r3]
 8008890:	623b      	str	r3, [r7, #32]
   return(result);
 8008892:	6a3b      	ldr	r3, [r7, #32]
 8008894:	f023 0301 	bic.w	r3, r3, #1
 8008898:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	3314      	adds	r3, #20
 80088a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80088a6:	633a      	str	r2, [r7, #48]	; 0x30
 80088a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80088ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088ae:	e841 2300 	strex	r3, r2, [r1]
 80088b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80088b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d1e3      	bne.n	8008882 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2220      	movs	r2, #32
 80088be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2200      	movs	r2, #0
 80088c6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	330c      	adds	r3, #12
 80088ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	e853 3f00 	ldrex	r3, [r3]
 80088d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	f023 0310 	bic.w	r3, r3, #16
 80088de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	330c      	adds	r3, #12
 80088e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80088ec:	61fa      	str	r2, [r7, #28]
 80088ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088f0:	69b9      	ldr	r1, [r7, #24]
 80088f2:	69fa      	ldr	r2, [r7, #28]
 80088f4:	e841 2300 	strex	r3, r2, [r1]
 80088f8:	617b      	str	r3, [r7, #20]
   return(result);
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d1e3      	bne.n	80088c8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008900:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008904:	4619      	mov	r1, r3
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f000 f848 	bl	800899c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800890c:	e023      	b.n	8008956 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800890e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008916:	2b00      	cmp	r3, #0
 8008918:	d009      	beq.n	800892e <HAL_UART_IRQHandler+0x4ea>
 800891a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800891e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008922:	2b00      	cmp	r3, #0
 8008924:	d003      	beq.n	800892e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f000 f967 	bl	8008bfa <UART_Transmit_IT>
    return;
 800892c:	e014      	b.n	8008958 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800892e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008936:	2b00      	cmp	r3, #0
 8008938:	d00e      	beq.n	8008958 <HAL_UART_IRQHandler+0x514>
 800893a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800893e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008942:	2b00      	cmp	r3, #0
 8008944:	d008      	beq.n	8008958 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f000 f9a7 	bl	8008c9a <UART_EndTransmit_IT>
    return;
 800894c:	e004      	b.n	8008958 <HAL_UART_IRQHandler+0x514>
    return;
 800894e:	bf00      	nop
 8008950:	e002      	b.n	8008958 <HAL_UART_IRQHandler+0x514>
      return;
 8008952:	bf00      	nop
 8008954:	e000      	b.n	8008958 <HAL_UART_IRQHandler+0x514>
      return;
 8008956:	bf00      	nop
  }
}
 8008958:	37e8      	adds	r7, #232	; 0xe8
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}
 800895e:	bf00      	nop

08008960 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008960:	b480      	push	{r7}
 8008962:	b083      	sub	sp, #12
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008968:	bf00      	nop
 800896a:	370c      	adds	r7, #12
 800896c:	46bd      	mov	sp, r7
 800896e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008972:	4770      	bx	lr

08008974 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008974:	b480      	push	{r7}
 8008976:	b083      	sub	sp, #12
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800897c:	bf00      	nop
 800897e:	370c      	adds	r7, #12
 8008980:	46bd      	mov	sp, r7
 8008982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008986:	4770      	bx	lr

08008988 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008988:	b480      	push	{r7}
 800898a:	b083      	sub	sp, #12
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008990:	bf00      	nop
 8008992:	370c      	adds	r7, #12
 8008994:	46bd      	mov	sp, r7
 8008996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899a:	4770      	bx	lr

0800899c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800899c:	b480      	push	{r7}
 800899e:	b083      	sub	sp, #12
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	460b      	mov	r3, r1
 80089a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80089a8:	bf00      	nop
 80089aa:	370c      	adds	r7, #12
 80089ac:	46bd      	mov	sp, r7
 80089ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b2:	4770      	bx	lr

080089b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b090      	sub	sp, #64	; 0x40
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	60f8      	str	r0, [r7, #12]
 80089bc:	60b9      	str	r1, [r7, #8]
 80089be:	603b      	str	r3, [r7, #0]
 80089c0:	4613      	mov	r3, r2
 80089c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089c4:	e050      	b.n	8008a68 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089cc:	d04c      	beq.n	8008a68 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80089ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d007      	beq.n	80089e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80089d4:	f7f9 fd4e 	bl	8002474 <HAL_GetTick>
 80089d8:	4602      	mov	r2, r0
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	1ad3      	subs	r3, r2, r3
 80089de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80089e0:	429a      	cmp	r2, r3
 80089e2:	d241      	bcs.n	8008a68 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	330c      	adds	r3, #12
 80089ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ee:	e853 3f00 	ldrex	r3, [r3]
 80089f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80089f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80089fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	330c      	adds	r3, #12
 8008a02:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008a04:	637a      	str	r2, [r7, #52]	; 0x34
 8008a06:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a08:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008a0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a0c:	e841 2300 	strex	r3, r2, [r1]
 8008a10:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d1e5      	bne.n	80089e4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	3314      	adds	r3, #20
 8008a1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	e853 3f00 	ldrex	r3, [r3]
 8008a26:	613b      	str	r3, [r7, #16]
   return(result);
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	f023 0301 	bic.w	r3, r3, #1
 8008a2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	3314      	adds	r3, #20
 8008a36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a38:	623a      	str	r2, [r7, #32]
 8008a3a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a3c:	69f9      	ldr	r1, [r7, #28]
 8008a3e:	6a3a      	ldr	r2, [r7, #32]
 8008a40:	e841 2300 	strex	r3, r2, [r1]
 8008a44:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a46:	69bb      	ldr	r3, [r7, #24]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d1e5      	bne.n	8008a18 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	2220      	movs	r2, #32
 8008a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	2220      	movs	r2, #32
 8008a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008a64:	2303      	movs	r3, #3
 8008a66:	e00f      	b.n	8008a88 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	681a      	ldr	r2, [r3, #0]
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	4013      	ands	r3, r2
 8008a72:	68ba      	ldr	r2, [r7, #8]
 8008a74:	429a      	cmp	r2, r3
 8008a76:	bf0c      	ite	eq
 8008a78:	2301      	moveq	r3, #1
 8008a7a:	2300      	movne	r3, #0
 8008a7c:	b2db      	uxtb	r3, r3
 8008a7e:	461a      	mov	r2, r3
 8008a80:	79fb      	ldrb	r3, [r7, #7]
 8008a82:	429a      	cmp	r2, r3
 8008a84:	d09f      	beq.n	80089c6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008a86:	2300      	movs	r3, #0
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3740      	adds	r7, #64	; 0x40
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}

08008a90 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008a90:	b480      	push	{r7}
 8008a92:	b085      	sub	sp, #20
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	60f8      	str	r0, [r7, #12]
 8008a98:	60b9      	str	r1, [r7, #8]
 8008a9a:	4613      	mov	r3, r2
 8008a9c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	68ba      	ldr	r2, [r7, #8]
 8008aa2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	88fa      	ldrh	r2, [r7, #6]
 8008aa8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	88fa      	ldrh	r2, [r7, #6]
 8008aae:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	2222      	movs	r2, #34	; 0x22
 8008aba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	691b      	ldr	r3, [r3, #16]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d007      	beq.n	8008ade <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	68da      	ldr	r2, [r3, #12]
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008adc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	695a      	ldr	r2, [r3, #20]
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f042 0201 	orr.w	r2, r2, #1
 8008aec:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	68da      	ldr	r2, [r3, #12]
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f042 0220 	orr.w	r2, r2, #32
 8008afc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008afe:	2300      	movs	r3, #0
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	3714      	adds	r7, #20
 8008b04:	46bd      	mov	sp, r7
 8008b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0a:	4770      	bx	lr

08008b0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b095      	sub	sp, #84	; 0x54
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	330c      	adds	r3, #12
 8008b1a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b1e:	e853 3f00 	ldrex	r3, [r3]
 8008b22:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b26:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	330c      	adds	r3, #12
 8008b32:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008b34:	643a      	str	r2, [r7, #64]	; 0x40
 8008b36:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b38:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008b3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008b3c:	e841 2300 	strex	r3, r2, [r1]
 8008b40:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d1e5      	bne.n	8008b14 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	3314      	adds	r3, #20
 8008b4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b50:	6a3b      	ldr	r3, [r7, #32]
 8008b52:	e853 3f00 	ldrex	r3, [r3]
 8008b56:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b58:	69fb      	ldr	r3, [r7, #28]
 8008b5a:	f023 0301 	bic.w	r3, r3, #1
 8008b5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	3314      	adds	r3, #20
 8008b66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b68:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008b6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b70:	e841 2300 	strex	r3, r2, [r1]
 8008b74:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d1e5      	bne.n	8008b48 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b80:	2b01      	cmp	r3, #1
 8008b82:	d119      	bne.n	8008bb8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	330c      	adds	r3, #12
 8008b8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	e853 3f00 	ldrex	r3, [r3]
 8008b92:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	f023 0310 	bic.w	r3, r3, #16
 8008b9a:	647b      	str	r3, [r7, #68]	; 0x44
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	330c      	adds	r3, #12
 8008ba2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008ba4:	61ba      	str	r2, [r7, #24]
 8008ba6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ba8:	6979      	ldr	r1, [r7, #20]
 8008baa:	69ba      	ldr	r2, [r7, #24]
 8008bac:	e841 2300 	strex	r3, r2, [r1]
 8008bb0:	613b      	str	r3, [r7, #16]
   return(result);
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d1e5      	bne.n	8008b84 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2220      	movs	r2, #32
 8008bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008bc6:	bf00      	nop
 8008bc8:	3754      	adds	r7, #84	; 0x54
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd0:	4770      	bx	lr

08008bd2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008bd2:	b580      	push	{r7, lr}
 8008bd4:	b084      	sub	sp, #16
 8008bd6:	af00      	add	r7, sp, #0
 8008bd8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bde:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	2200      	movs	r2, #0
 8008be4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	2200      	movs	r2, #0
 8008bea:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008bec:	68f8      	ldr	r0, [r7, #12]
 8008bee:	f7ff fecb 	bl	8008988 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008bf2:	bf00      	nop
 8008bf4:	3710      	adds	r7, #16
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}

08008bfa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008bfa:	b480      	push	{r7}
 8008bfc:	b085      	sub	sp, #20
 8008bfe:	af00      	add	r7, sp, #0
 8008c00:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c08:	b2db      	uxtb	r3, r3
 8008c0a:	2b21      	cmp	r3, #33	; 0x21
 8008c0c:	d13e      	bne.n	8008c8c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	689b      	ldr	r3, [r3, #8]
 8008c12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c16:	d114      	bne.n	8008c42 <UART_Transmit_IT+0x48>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	691b      	ldr	r3, [r3, #16]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d110      	bne.n	8008c42 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6a1b      	ldr	r3, [r3, #32]
 8008c24:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	881b      	ldrh	r3, [r3, #0]
 8008c2a:	461a      	mov	r2, r3
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c34:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6a1b      	ldr	r3, [r3, #32]
 8008c3a:	1c9a      	adds	r2, r3, #2
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	621a      	str	r2, [r3, #32]
 8008c40:	e008      	b.n	8008c54 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6a1b      	ldr	r3, [r3, #32]
 8008c46:	1c59      	adds	r1, r3, #1
 8008c48:	687a      	ldr	r2, [r7, #4]
 8008c4a:	6211      	str	r1, [r2, #32]
 8008c4c:	781a      	ldrb	r2, [r3, #0]
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008c58:	b29b      	uxth	r3, r3
 8008c5a:	3b01      	subs	r3, #1
 8008c5c:	b29b      	uxth	r3, r3
 8008c5e:	687a      	ldr	r2, [r7, #4]
 8008c60:	4619      	mov	r1, r3
 8008c62:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d10f      	bne.n	8008c88 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	68da      	ldr	r2, [r3, #12]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008c76:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	68da      	ldr	r2, [r3, #12]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c86:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	e000      	b.n	8008c8e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008c8c:	2302      	movs	r3, #2
  }
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3714      	adds	r7, #20
 8008c92:	46bd      	mov	sp, r7
 8008c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c98:	4770      	bx	lr

08008c9a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008c9a:	b580      	push	{r7, lr}
 8008c9c:	b082      	sub	sp, #8
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	68da      	ldr	r2, [r3, #12]
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008cb0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2220      	movs	r2, #32
 8008cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f7ff fe50 	bl	8008960 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008cc0:	2300      	movs	r3, #0
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3708      	adds	r7, #8
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}

08008cca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008cca:	b580      	push	{r7, lr}
 8008ccc:	b08c      	sub	sp, #48	; 0x30
 8008cce:	af00      	add	r7, sp, #0
 8008cd0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008cd8:	b2db      	uxtb	r3, r3
 8008cda:	2b22      	cmp	r3, #34	; 0x22
 8008cdc:	f040 80ab 	bne.w	8008e36 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	689b      	ldr	r3, [r3, #8]
 8008ce4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ce8:	d117      	bne.n	8008d1a <UART_Receive_IT+0x50>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	691b      	ldr	r3, [r3, #16]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d113      	bne.n	8008d1a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cfa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	685b      	ldr	r3, [r3, #4]
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d08:	b29a      	uxth	r2, r3
 8008d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d0c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d12:	1c9a      	adds	r2, r3, #2
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	629a      	str	r2, [r3, #40]	; 0x28
 8008d18:	e026      	b.n	8008d68 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008d20:	2300      	movs	r3, #0
 8008d22:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	689b      	ldr	r3, [r3, #8]
 8008d28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d2c:	d007      	beq.n	8008d3e <UART_Receive_IT+0x74>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	689b      	ldr	r3, [r3, #8]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d10a      	bne.n	8008d4c <UART_Receive_IT+0x82>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	691b      	ldr	r3, [r3, #16]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d106      	bne.n	8008d4c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	b2da      	uxtb	r2, r3
 8008d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d48:	701a      	strb	r2, [r3, #0]
 8008d4a:	e008      	b.n	8008d5e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	b2db      	uxtb	r3, r3
 8008d54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d58:	b2da      	uxtb	r2, r3
 8008d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d5c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d62:	1c5a      	adds	r2, r3, #1
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008d6c:	b29b      	uxth	r3, r3
 8008d6e:	3b01      	subs	r3, #1
 8008d70:	b29b      	uxth	r3, r3
 8008d72:	687a      	ldr	r2, [r7, #4]
 8008d74:	4619      	mov	r1, r3
 8008d76:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d15a      	bne.n	8008e32 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	68da      	ldr	r2, [r3, #12]
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f022 0220 	bic.w	r2, r2, #32
 8008d8a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	68da      	ldr	r2, [r3, #12]
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008d9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	695a      	ldr	r2, [r3, #20]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f022 0201 	bic.w	r2, r2, #1
 8008daa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2220      	movs	r2, #32
 8008db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008db8:	2b01      	cmp	r3, #1
 8008dba:	d135      	bne.n	8008e28 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	330c      	adds	r3, #12
 8008dc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	e853 3f00 	ldrex	r3, [r3]
 8008dd0:	613b      	str	r3, [r7, #16]
   return(result);
 8008dd2:	693b      	ldr	r3, [r7, #16]
 8008dd4:	f023 0310 	bic.w	r3, r3, #16
 8008dd8:	627b      	str	r3, [r7, #36]	; 0x24
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	330c      	adds	r3, #12
 8008de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008de2:	623a      	str	r2, [r7, #32]
 8008de4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008de6:	69f9      	ldr	r1, [r7, #28]
 8008de8:	6a3a      	ldr	r2, [r7, #32]
 8008dea:	e841 2300 	strex	r3, r2, [r1]
 8008dee:	61bb      	str	r3, [r7, #24]
   return(result);
 8008df0:	69bb      	ldr	r3, [r7, #24]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d1e5      	bne.n	8008dc2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f003 0310 	and.w	r3, r3, #16
 8008e00:	2b10      	cmp	r3, #16
 8008e02:	d10a      	bne.n	8008e1a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008e04:	2300      	movs	r3, #0
 8008e06:	60fb      	str	r3, [r7, #12]
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	60fb      	str	r3, [r7, #12]
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	685b      	ldr	r3, [r3, #4]
 8008e16:	60fb      	str	r3, [r7, #12]
 8008e18:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008e1e:	4619      	mov	r1, r3
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f7ff fdbb 	bl	800899c <HAL_UARTEx_RxEventCallback>
 8008e26:	e002      	b.n	8008e2e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f7ff fda3 	bl	8008974 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	e002      	b.n	8008e38 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008e32:	2300      	movs	r3, #0
 8008e34:	e000      	b.n	8008e38 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008e36:	2302      	movs	r3, #2
  }
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3730      	adds	r7, #48	; 0x30
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}

08008e40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008e40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008e44:	b0c0      	sub	sp, #256	; 0x100
 8008e46:	af00      	add	r7, sp, #0
 8008e48:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	691b      	ldr	r3, [r3, #16]
 8008e54:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e5c:	68d9      	ldr	r1, [r3, #12]
 8008e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e62:	681a      	ldr	r2, [r3, #0]
 8008e64:	ea40 0301 	orr.w	r3, r0, r1
 8008e68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e6e:	689a      	ldr	r2, [r3, #8]
 8008e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e74:	691b      	ldr	r3, [r3, #16]
 8008e76:	431a      	orrs	r2, r3
 8008e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e7c:	695b      	ldr	r3, [r3, #20]
 8008e7e:	431a      	orrs	r2, r3
 8008e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e84:	69db      	ldr	r3, [r3, #28]
 8008e86:	4313      	orrs	r3, r2
 8008e88:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	68db      	ldr	r3, [r3, #12]
 8008e94:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008e98:	f021 010c 	bic.w	r1, r1, #12
 8008e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ea0:	681a      	ldr	r2, [r3, #0]
 8008ea2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008ea6:	430b      	orrs	r3, r1
 8008ea8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	695b      	ldr	r3, [r3, #20]
 8008eb2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008eba:	6999      	ldr	r1, [r3, #24]
 8008ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ec0:	681a      	ldr	r2, [r3, #0]
 8008ec2:	ea40 0301 	orr.w	r3, r0, r1
 8008ec6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ecc:	681a      	ldr	r2, [r3, #0]
 8008ece:	4b8f      	ldr	r3, [pc, #572]	; (800910c <UART_SetConfig+0x2cc>)
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	d005      	beq.n	8008ee0 <UART_SetConfig+0xa0>
 8008ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ed8:	681a      	ldr	r2, [r3, #0]
 8008eda:	4b8d      	ldr	r3, [pc, #564]	; (8009110 <UART_SetConfig+0x2d0>)
 8008edc:	429a      	cmp	r2, r3
 8008ede:	d104      	bne.n	8008eea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008ee0:	f7fd fcca 	bl	8006878 <HAL_RCC_GetPCLK2Freq>
 8008ee4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008ee8:	e003      	b.n	8008ef2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008eea:	f7fd fcb1 	bl	8006850 <HAL_RCC_GetPCLK1Freq>
 8008eee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ef6:	69db      	ldr	r3, [r3, #28]
 8008ef8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008efc:	f040 810c 	bne.w	8009118 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008f00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f04:	2200      	movs	r2, #0
 8008f06:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008f0a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008f0e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008f12:	4622      	mov	r2, r4
 8008f14:	462b      	mov	r3, r5
 8008f16:	1891      	adds	r1, r2, r2
 8008f18:	65b9      	str	r1, [r7, #88]	; 0x58
 8008f1a:	415b      	adcs	r3, r3
 8008f1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008f1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008f22:	4621      	mov	r1, r4
 8008f24:	eb12 0801 	adds.w	r8, r2, r1
 8008f28:	4629      	mov	r1, r5
 8008f2a:	eb43 0901 	adc.w	r9, r3, r1
 8008f2e:	f04f 0200 	mov.w	r2, #0
 8008f32:	f04f 0300 	mov.w	r3, #0
 8008f36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008f3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008f3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008f42:	4690      	mov	r8, r2
 8008f44:	4699      	mov	r9, r3
 8008f46:	4623      	mov	r3, r4
 8008f48:	eb18 0303 	adds.w	r3, r8, r3
 8008f4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008f50:	462b      	mov	r3, r5
 8008f52:	eb49 0303 	adc.w	r3, r9, r3
 8008f56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f5e:	685b      	ldr	r3, [r3, #4]
 8008f60:	2200      	movs	r2, #0
 8008f62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008f66:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008f6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008f6e:	460b      	mov	r3, r1
 8008f70:	18db      	adds	r3, r3, r3
 8008f72:	653b      	str	r3, [r7, #80]	; 0x50
 8008f74:	4613      	mov	r3, r2
 8008f76:	eb42 0303 	adc.w	r3, r2, r3
 8008f7a:	657b      	str	r3, [r7, #84]	; 0x54
 8008f7c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008f80:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008f84:	f7f7 fa36 	bl	80003f4 <__aeabi_uldivmod>
 8008f88:	4602      	mov	r2, r0
 8008f8a:	460b      	mov	r3, r1
 8008f8c:	4b61      	ldr	r3, [pc, #388]	; (8009114 <UART_SetConfig+0x2d4>)
 8008f8e:	fba3 2302 	umull	r2, r3, r3, r2
 8008f92:	095b      	lsrs	r3, r3, #5
 8008f94:	011c      	lsls	r4, r3, #4
 8008f96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008fa0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008fa4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008fa8:	4642      	mov	r2, r8
 8008faa:	464b      	mov	r3, r9
 8008fac:	1891      	adds	r1, r2, r2
 8008fae:	64b9      	str	r1, [r7, #72]	; 0x48
 8008fb0:	415b      	adcs	r3, r3
 8008fb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008fb4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008fb8:	4641      	mov	r1, r8
 8008fba:	eb12 0a01 	adds.w	sl, r2, r1
 8008fbe:	4649      	mov	r1, r9
 8008fc0:	eb43 0b01 	adc.w	fp, r3, r1
 8008fc4:	f04f 0200 	mov.w	r2, #0
 8008fc8:	f04f 0300 	mov.w	r3, #0
 8008fcc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008fd0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008fd4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008fd8:	4692      	mov	sl, r2
 8008fda:	469b      	mov	fp, r3
 8008fdc:	4643      	mov	r3, r8
 8008fde:	eb1a 0303 	adds.w	r3, sl, r3
 8008fe2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008fe6:	464b      	mov	r3, r9
 8008fe8:	eb4b 0303 	adc.w	r3, fp, r3
 8008fec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ff4:	685b      	ldr	r3, [r3, #4]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008ffc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009000:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009004:	460b      	mov	r3, r1
 8009006:	18db      	adds	r3, r3, r3
 8009008:	643b      	str	r3, [r7, #64]	; 0x40
 800900a:	4613      	mov	r3, r2
 800900c:	eb42 0303 	adc.w	r3, r2, r3
 8009010:	647b      	str	r3, [r7, #68]	; 0x44
 8009012:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009016:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800901a:	f7f7 f9eb 	bl	80003f4 <__aeabi_uldivmod>
 800901e:	4602      	mov	r2, r0
 8009020:	460b      	mov	r3, r1
 8009022:	4611      	mov	r1, r2
 8009024:	4b3b      	ldr	r3, [pc, #236]	; (8009114 <UART_SetConfig+0x2d4>)
 8009026:	fba3 2301 	umull	r2, r3, r3, r1
 800902a:	095b      	lsrs	r3, r3, #5
 800902c:	2264      	movs	r2, #100	; 0x64
 800902e:	fb02 f303 	mul.w	r3, r2, r3
 8009032:	1acb      	subs	r3, r1, r3
 8009034:	00db      	lsls	r3, r3, #3
 8009036:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800903a:	4b36      	ldr	r3, [pc, #216]	; (8009114 <UART_SetConfig+0x2d4>)
 800903c:	fba3 2302 	umull	r2, r3, r3, r2
 8009040:	095b      	lsrs	r3, r3, #5
 8009042:	005b      	lsls	r3, r3, #1
 8009044:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009048:	441c      	add	r4, r3
 800904a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800904e:	2200      	movs	r2, #0
 8009050:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009054:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009058:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800905c:	4642      	mov	r2, r8
 800905e:	464b      	mov	r3, r9
 8009060:	1891      	adds	r1, r2, r2
 8009062:	63b9      	str	r1, [r7, #56]	; 0x38
 8009064:	415b      	adcs	r3, r3
 8009066:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009068:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800906c:	4641      	mov	r1, r8
 800906e:	1851      	adds	r1, r2, r1
 8009070:	6339      	str	r1, [r7, #48]	; 0x30
 8009072:	4649      	mov	r1, r9
 8009074:	414b      	adcs	r3, r1
 8009076:	637b      	str	r3, [r7, #52]	; 0x34
 8009078:	f04f 0200 	mov.w	r2, #0
 800907c:	f04f 0300 	mov.w	r3, #0
 8009080:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009084:	4659      	mov	r1, fp
 8009086:	00cb      	lsls	r3, r1, #3
 8009088:	4651      	mov	r1, sl
 800908a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800908e:	4651      	mov	r1, sl
 8009090:	00ca      	lsls	r2, r1, #3
 8009092:	4610      	mov	r0, r2
 8009094:	4619      	mov	r1, r3
 8009096:	4603      	mov	r3, r0
 8009098:	4642      	mov	r2, r8
 800909a:	189b      	adds	r3, r3, r2
 800909c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80090a0:	464b      	mov	r3, r9
 80090a2:	460a      	mov	r2, r1
 80090a4:	eb42 0303 	adc.w	r3, r2, r3
 80090a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80090ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090b0:	685b      	ldr	r3, [r3, #4]
 80090b2:	2200      	movs	r2, #0
 80090b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80090b8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80090bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80090c0:	460b      	mov	r3, r1
 80090c2:	18db      	adds	r3, r3, r3
 80090c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80090c6:	4613      	mov	r3, r2
 80090c8:	eb42 0303 	adc.w	r3, r2, r3
 80090cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80090ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80090d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80090d6:	f7f7 f98d 	bl	80003f4 <__aeabi_uldivmod>
 80090da:	4602      	mov	r2, r0
 80090dc:	460b      	mov	r3, r1
 80090de:	4b0d      	ldr	r3, [pc, #52]	; (8009114 <UART_SetConfig+0x2d4>)
 80090e0:	fba3 1302 	umull	r1, r3, r3, r2
 80090e4:	095b      	lsrs	r3, r3, #5
 80090e6:	2164      	movs	r1, #100	; 0x64
 80090e8:	fb01 f303 	mul.w	r3, r1, r3
 80090ec:	1ad3      	subs	r3, r2, r3
 80090ee:	00db      	lsls	r3, r3, #3
 80090f0:	3332      	adds	r3, #50	; 0x32
 80090f2:	4a08      	ldr	r2, [pc, #32]	; (8009114 <UART_SetConfig+0x2d4>)
 80090f4:	fba2 2303 	umull	r2, r3, r2, r3
 80090f8:	095b      	lsrs	r3, r3, #5
 80090fa:	f003 0207 	and.w	r2, r3, #7
 80090fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	4422      	add	r2, r4
 8009106:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009108:	e105      	b.n	8009316 <UART_SetConfig+0x4d6>
 800910a:	bf00      	nop
 800910c:	40011000 	.word	0x40011000
 8009110:	40011400 	.word	0x40011400
 8009114:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009118:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800911c:	2200      	movs	r2, #0
 800911e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009122:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009126:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800912a:	4642      	mov	r2, r8
 800912c:	464b      	mov	r3, r9
 800912e:	1891      	adds	r1, r2, r2
 8009130:	6239      	str	r1, [r7, #32]
 8009132:	415b      	adcs	r3, r3
 8009134:	627b      	str	r3, [r7, #36]	; 0x24
 8009136:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800913a:	4641      	mov	r1, r8
 800913c:	1854      	adds	r4, r2, r1
 800913e:	4649      	mov	r1, r9
 8009140:	eb43 0501 	adc.w	r5, r3, r1
 8009144:	f04f 0200 	mov.w	r2, #0
 8009148:	f04f 0300 	mov.w	r3, #0
 800914c:	00eb      	lsls	r3, r5, #3
 800914e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009152:	00e2      	lsls	r2, r4, #3
 8009154:	4614      	mov	r4, r2
 8009156:	461d      	mov	r5, r3
 8009158:	4643      	mov	r3, r8
 800915a:	18e3      	adds	r3, r4, r3
 800915c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009160:	464b      	mov	r3, r9
 8009162:	eb45 0303 	adc.w	r3, r5, r3
 8009166:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800916a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800916e:	685b      	ldr	r3, [r3, #4]
 8009170:	2200      	movs	r2, #0
 8009172:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009176:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800917a:	f04f 0200 	mov.w	r2, #0
 800917e:	f04f 0300 	mov.w	r3, #0
 8009182:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009186:	4629      	mov	r1, r5
 8009188:	008b      	lsls	r3, r1, #2
 800918a:	4621      	mov	r1, r4
 800918c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009190:	4621      	mov	r1, r4
 8009192:	008a      	lsls	r2, r1, #2
 8009194:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009198:	f7f7 f92c 	bl	80003f4 <__aeabi_uldivmod>
 800919c:	4602      	mov	r2, r0
 800919e:	460b      	mov	r3, r1
 80091a0:	4b60      	ldr	r3, [pc, #384]	; (8009324 <UART_SetConfig+0x4e4>)
 80091a2:	fba3 2302 	umull	r2, r3, r3, r2
 80091a6:	095b      	lsrs	r3, r3, #5
 80091a8:	011c      	lsls	r4, r3, #4
 80091aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80091ae:	2200      	movs	r2, #0
 80091b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80091b4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80091b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80091bc:	4642      	mov	r2, r8
 80091be:	464b      	mov	r3, r9
 80091c0:	1891      	adds	r1, r2, r2
 80091c2:	61b9      	str	r1, [r7, #24]
 80091c4:	415b      	adcs	r3, r3
 80091c6:	61fb      	str	r3, [r7, #28]
 80091c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80091cc:	4641      	mov	r1, r8
 80091ce:	1851      	adds	r1, r2, r1
 80091d0:	6139      	str	r1, [r7, #16]
 80091d2:	4649      	mov	r1, r9
 80091d4:	414b      	adcs	r3, r1
 80091d6:	617b      	str	r3, [r7, #20]
 80091d8:	f04f 0200 	mov.w	r2, #0
 80091dc:	f04f 0300 	mov.w	r3, #0
 80091e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80091e4:	4659      	mov	r1, fp
 80091e6:	00cb      	lsls	r3, r1, #3
 80091e8:	4651      	mov	r1, sl
 80091ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80091ee:	4651      	mov	r1, sl
 80091f0:	00ca      	lsls	r2, r1, #3
 80091f2:	4610      	mov	r0, r2
 80091f4:	4619      	mov	r1, r3
 80091f6:	4603      	mov	r3, r0
 80091f8:	4642      	mov	r2, r8
 80091fa:	189b      	adds	r3, r3, r2
 80091fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009200:	464b      	mov	r3, r9
 8009202:	460a      	mov	r2, r1
 8009204:	eb42 0303 	adc.w	r3, r2, r3
 8009208:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800920c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009210:	685b      	ldr	r3, [r3, #4]
 8009212:	2200      	movs	r2, #0
 8009214:	67bb      	str	r3, [r7, #120]	; 0x78
 8009216:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009218:	f04f 0200 	mov.w	r2, #0
 800921c:	f04f 0300 	mov.w	r3, #0
 8009220:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009224:	4649      	mov	r1, r9
 8009226:	008b      	lsls	r3, r1, #2
 8009228:	4641      	mov	r1, r8
 800922a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800922e:	4641      	mov	r1, r8
 8009230:	008a      	lsls	r2, r1, #2
 8009232:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009236:	f7f7 f8dd 	bl	80003f4 <__aeabi_uldivmod>
 800923a:	4602      	mov	r2, r0
 800923c:	460b      	mov	r3, r1
 800923e:	4b39      	ldr	r3, [pc, #228]	; (8009324 <UART_SetConfig+0x4e4>)
 8009240:	fba3 1302 	umull	r1, r3, r3, r2
 8009244:	095b      	lsrs	r3, r3, #5
 8009246:	2164      	movs	r1, #100	; 0x64
 8009248:	fb01 f303 	mul.w	r3, r1, r3
 800924c:	1ad3      	subs	r3, r2, r3
 800924e:	011b      	lsls	r3, r3, #4
 8009250:	3332      	adds	r3, #50	; 0x32
 8009252:	4a34      	ldr	r2, [pc, #208]	; (8009324 <UART_SetConfig+0x4e4>)
 8009254:	fba2 2303 	umull	r2, r3, r2, r3
 8009258:	095b      	lsrs	r3, r3, #5
 800925a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800925e:	441c      	add	r4, r3
 8009260:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009264:	2200      	movs	r2, #0
 8009266:	673b      	str	r3, [r7, #112]	; 0x70
 8009268:	677a      	str	r2, [r7, #116]	; 0x74
 800926a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800926e:	4642      	mov	r2, r8
 8009270:	464b      	mov	r3, r9
 8009272:	1891      	adds	r1, r2, r2
 8009274:	60b9      	str	r1, [r7, #8]
 8009276:	415b      	adcs	r3, r3
 8009278:	60fb      	str	r3, [r7, #12]
 800927a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800927e:	4641      	mov	r1, r8
 8009280:	1851      	adds	r1, r2, r1
 8009282:	6039      	str	r1, [r7, #0]
 8009284:	4649      	mov	r1, r9
 8009286:	414b      	adcs	r3, r1
 8009288:	607b      	str	r3, [r7, #4]
 800928a:	f04f 0200 	mov.w	r2, #0
 800928e:	f04f 0300 	mov.w	r3, #0
 8009292:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009296:	4659      	mov	r1, fp
 8009298:	00cb      	lsls	r3, r1, #3
 800929a:	4651      	mov	r1, sl
 800929c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80092a0:	4651      	mov	r1, sl
 80092a2:	00ca      	lsls	r2, r1, #3
 80092a4:	4610      	mov	r0, r2
 80092a6:	4619      	mov	r1, r3
 80092a8:	4603      	mov	r3, r0
 80092aa:	4642      	mov	r2, r8
 80092ac:	189b      	adds	r3, r3, r2
 80092ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80092b0:	464b      	mov	r3, r9
 80092b2:	460a      	mov	r2, r1
 80092b4:	eb42 0303 	adc.w	r3, r2, r3
 80092b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80092ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092be:	685b      	ldr	r3, [r3, #4]
 80092c0:	2200      	movs	r2, #0
 80092c2:	663b      	str	r3, [r7, #96]	; 0x60
 80092c4:	667a      	str	r2, [r7, #100]	; 0x64
 80092c6:	f04f 0200 	mov.w	r2, #0
 80092ca:	f04f 0300 	mov.w	r3, #0
 80092ce:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80092d2:	4649      	mov	r1, r9
 80092d4:	008b      	lsls	r3, r1, #2
 80092d6:	4641      	mov	r1, r8
 80092d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80092dc:	4641      	mov	r1, r8
 80092de:	008a      	lsls	r2, r1, #2
 80092e0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80092e4:	f7f7 f886 	bl	80003f4 <__aeabi_uldivmod>
 80092e8:	4602      	mov	r2, r0
 80092ea:	460b      	mov	r3, r1
 80092ec:	4b0d      	ldr	r3, [pc, #52]	; (8009324 <UART_SetConfig+0x4e4>)
 80092ee:	fba3 1302 	umull	r1, r3, r3, r2
 80092f2:	095b      	lsrs	r3, r3, #5
 80092f4:	2164      	movs	r1, #100	; 0x64
 80092f6:	fb01 f303 	mul.w	r3, r1, r3
 80092fa:	1ad3      	subs	r3, r2, r3
 80092fc:	011b      	lsls	r3, r3, #4
 80092fe:	3332      	adds	r3, #50	; 0x32
 8009300:	4a08      	ldr	r2, [pc, #32]	; (8009324 <UART_SetConfig+0x4e4>)
 8009302:	fba2 2303 	umull	r2, r3, r2, r3
 8009306:	095b      	lsrs	r3, r3, #5
 8009308:	f003 020f 	and.w	r2, r3, #15
 800930c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	4422      	add	r2, r4
 8009314:	609a      	str	r2, [r3, #8]
}
 8009316:	bf00      	nop
 8009318:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800931c:	46bd      	mov	sp, r7
 800931e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009322:	bf00      	nop
 8009324:	51eb851f 	.word	0x51eb851f

08009328 <__libc_init_array>:
 8009328:	b570      	push	{r4, r5, r6, lr}
 800932a:	4d0d      	ldr	r5, [pc, #52]	; (8009360 <__libc_init_array+0x38>)
 800932c:	4c0d      	ldr	r4, [pc, #52]	; (8009364 <__libc_init_array+0x3c>)
 800932e:	1b64      	subs	r4, r4, r5
 8009330:	10a4      	asrs	r4, r4, #2
 8009332:	2600      	movs	r6, #0
 8009334:	42a6      	cmp	r6, r4
 8009336:	d109      	bne.n	800934c <__libc_init_array+0x24>
 8009338:	4d0b      	ldr	r5, [pc, #44]	; (8009368 <__libc_init_array+0x40>)
 800933a:	4c0c      	ldr	r4, [pc, #48]	; (800936c <__libc_init_array+0x44>)
 800933c:	f000 f820 	bl	8009380 <_init>
 8009340:	1b64      	subs	r4, r4, r5
 8009342:	10a4      	asrs	r4, r4, #2
 8009344:	2600      	movs	r6, #0
 8009346:	42a6      	cmp	r6, r4
 8009348:	d105      	bne.n	8009356 <__libc_init_array+0x2e>
 800934a:	bd70      	pop	{r4, r5, r6, pc}
 800934c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009350:	4798      	blx	r3
 8009352:	3601      	adds	r6, #1
 8009354:	e7ee      	b.n	8009334 <__libc_init_array+0xc>
 8009356:	f855 3b04 	ldr.w	r3, [r5], #4
 800935a:	4798      	blx	r3
 800935c:	3601      	adds	r6, #1
 800935e:	e7f2      	b.n	8009346 <__libc_init_array+0x1e>
 8009360:	080093c0 	.word	0x080093c0
 8009364:	080093c0 	.word	0x080093c0
 8009368:	080093c0 	.word	0x080093c0
 800936c:	080093c4 	.word	0x080093c4

08009370 <memset>:
 8009370:	4402      	add	r2, r0
 8009372:	4603      	mov	r3, r0
 8009374:	4293      	cmp	r3, r2
 8009376:	d100      	bne.n	800937a <memset+0xa>
 8009378:	4770      	bx	lr
 800937a:	f803 1b01 	strb.w	r1, [r3], #1
 800937e:	e7f9      	b.n	8009374 <memset+0x4>

08009380 <_init>:
 8009380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009382:	bf00      	nop
 8009384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009386:	bc08      	pop	{r3}
 8009388:	469e      	mov	lr, r3
 800938a:	4770      	bx	lr

0800938c <_fini>:
 800938c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800938e:	bf00      	nop
 8009390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009392:	bc08      	pop	{r3}
 8009394:	469e      	mov	lr, r3
 8009396:	4770      	bx	lr
